
tank_level_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  080084b0  080084b0  000184b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800895c  0800895c  0002026c  2**0
                  CONTENTS
  4 .ARM          00000000  0800895c  0800895c  0002026c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800895c  0800895c  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800895c  0800895c  0001895c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008964  08008964  00018964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  08008968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000026c  08008bd4  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08008bd4  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed2d  00000000  00000000  00020295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002436  00000000  00000000  0002efc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  000313f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  00032288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fe0  00000000  00000000  00033040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6fb  00000000  00000000  0004c020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091fd9  00000000  00000000  0005a71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec6f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff4  00000000  00000000  000ec748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000026c 	.word	0x2000026c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008498 	.word	0x08008498

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000270 	.word	0x20000270
 800014c:	08008498 	.word	0x08008498

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	; 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <__gesf2>:
 8000eac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000eb0:	e006      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eb2:	bf00      	nop

08000eb4 <__lesf2>:
 8000eb4:	f04f 0c01 	mov.w	ip, #1
 8000eb8:	e002      	b.n	8000ec0 <__cmpsf2+0x4>
 8000eba:	bf00      	nop

08000ebc <__cmpsf2>:
 8000ebc:	f04f 0c01 	mov.w	ip, #1
 8000ec0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ecc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ed0:	bf18      	it	ne
 8000ed2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed6:	d011      	beq.n	8000efc <__cmpsf2+0x40>
 8000ed8:	b001      	add	sp, #4
 8000eda:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ede:	bf18      	it	ne
 8000ee0:	ea90 0f01 	teqne	r0, r1
 8000ee4:	bf58      	it	pl
 8000ee6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eea:	bf88      	it	hi
 8000eec:	17c8      	asrhi	r0, r1, #31
 8000eee:	bf38      	it	cc
 8000ef0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef4:	bf18      	it	ne
 8000ef6:	f040 0001 	orrne.w	r0, r0, #1
 8000efa:	4770      	bx	lr
 8000efc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f00:	d102      	bne.n	8000f08 <__cmpsf2+0x4c>
 8000f02:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f06:	d105      	bne.n	8000f14 <__cmpsf2+0x58>
 8000f08:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f0c:	d1e4      	bne.n	8000ed8 <__cmpsf2+0x1c>
 8000f0e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f12:	d0e1      	beq.n	8000ed8 <__cmpsf2+0x1c>
 8000f14:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__aeabi_cfrcmple>:
 8000f1c:	4684      	mov	ip, r0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	4661      	mov	r1, ip
 8000f22:	e7ff      	b.n	8000f24 <__aeabi_cfcmpeq>

08000f24 <__aeabi_cfcmpeq>:
 8000f24:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f26:	f7ff ffc9 	bl	8000ebc <__cmpsf2>
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	bf48      	it	mi
 8000f2e:	f110 0f00 	cmnmi.w	r0, #0
 8000f32:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f34 <__aeabi_fcmpeq>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff fff4 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f3c:	bf0c      	ite	eq
 8000f3e:	2001      	moveq	r0, #1
 8000f40:	2000      	movne	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmplt>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffea 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f50:	bf34      	ite	cc
 8000f52:	2001      	movcc	r0, #1
 8000f54:	2000      	movcs	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmple>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffe0 	bl	8000f24 <__aeabi_cfcmpeq>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpge>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffd2 	bl	8000f1c <__aeabi_cfrcmple>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpgt>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffc8 	bl	8000f1c <__aeabi_cfrcmple>
 8000f8c:	bf34      	ite	cc
 8000f8e:	2001      	movcc	r0, #1
 8000f90:	2000      	movcs	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <__aeabi_f2uiz>:
 8000f98:	0042      	lsls	r2, r0, #1
 8000f9a:	d20e      	bcs.n	8000fba <__aeabi_f2uiz+0x22>
 8000f9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa0:	d30b      	bcc.n	8000fba <__aeabi_f2uiz+0x22>
 8000fa2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000faa:	d409      	bmi.n	8000fc0 <__aeabi_f2uiz+0x28>
 8000fac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb8:	4770      	bx	lr
 8000fba:	f04f 0000 	mov.w	r0, #0
 8000fbe:	4770      	bx	lr
 8000fc0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc4:	d101      	bne.n	8000fca <__aeabi_f2uiz+0x32>
 8000fc6:	0242      	lsls	r2, r0, #9
 8000fc8:	d102      	bne.n	8000fd0 <__aeabi_f2uiz+0x38>
 8000fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fce:	4770      	bx	lr
 8000fd0:	f04f 0000 	mov.w	r0, #0
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <_Z18FIRFilterFlow_InitP13FIRFilterFlow>:

#include "FlowSensor.h"


void FIRFilterFlow_Init(FIRFilterFlow *fir)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	2b20      	cmp	r3, #32
 8000fe8:	d809      	bhi.n	8000ffe <_Z18FIRFilterFlow_InitP13FIRFilterFlow+0x26>
    fir->buf[n] = 0.0f;
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f04f 0100 	mov.w	r1, #0
 8000ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e7f2      	b.n	8000fe4 <_Z18FIRFilterFlow_InitP13FIRFilterFlow+0xc>
  fir->bufIndex = 0;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  fir->out = 0.0f;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
	...

0800101c <_Z20FIRFilterFlow_UpdateP13FIRFilterFlowf>:


float FIRFilterFlow_Update(FIRFilterFlow *fir, float inp)
{
 800101c:	b590      	push	{r4, r7, lr}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  fir->buf[fir->bufIndex] = inp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800102c:	4619      	mov	r1, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

  fir->bufIndex++;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800103c:	3301      	adds	r3, #1
 800103e:	b2da      	uxtb	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  if(fir->bufIndex == FILTER_NUM_COEFFS)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800104c:	2b21      	cmp	r3, #33	; 0x21
 800104e:	d103      	bne.n	8001058 <_Z20FIRFilterFlow_UpdateP13FIRFilterFlowf+0x3c>
    fir->bufIndex = 0;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  fir->out = 0.0f;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  uint8_t sumIndex = fir->bufIndex;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001068:	73fb      	strb	r3, [r7, #15]

  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 800106a:	2300      	movs	r3, #0
 800106c:	73bb      	strb	r3, [r7, #14]
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	2b20      	cmp	r3, #32
 8001072:	d824      	bhi.n	80010be <_Z20FIRFilterFlow_UpdateP13FIRFilterFlowf+0xa2>
  {
    if (sumIndex > 0) sumIndex--;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <_Z20FIRFilterFlow_UpdateP13FIRFilterFlowf+0x66>
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	3b01      	subs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	e001      	b.n	8001086 <_Z20FIRFilterFlow_UpdateP13FIRFilterFlowf+0x6a>
    else sumIndex = FILTER_NUM_COEFFS - 1;
 8001082:	2320      	movs	r3, #32
 8001084:	73fb      	strb	r3, [r7, #15]
    fir->out += FIR_COEFFS[n] * fir->buf[sumIndex];
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800108c:	7bbb      	ldrb	r3, [r7, #14]
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <_Z20FIRFilterFlow_UpdateP13FIRFilterFlowf+0xb0>)
 8001090:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff f85f 	bl	8000160 <__aeabi_fmul>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4619      	mov	r1, r3
 80010a6:	4620      	mov	r0, r4
 80010a8:	f7ff fdf8 	bl	8000c9c <__addsf3>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	3301      	adds	r3, #1
 80010ba:	73bb      	strb	r3, [r7, #14]
 80010bc:	e7d7      	b.n	800106e <_Z20FIRFilterFlow_UpdateP13FIRFilterFlowf+0x52>
  }

  return fir->out;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	20000000 	.word	0x20000000

080010d0 <_ZN10FlowSensorC1Ev>:


FlowSensor::FlowSensor(){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	FIRFilterFlow_Init(&lpf);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff7c 	bl	8000fd8 <_Z18FIRFilterFlow_InitP13FIRFilterFlow>
}
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_ZN10FlowSensor10getFlowRawEv>:


float FlowSensor::getFlowRaw()
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	return flow_raw;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <_ZN10FlowSensor15getFlowFilteredEv>:

float FlowSensor::getFlowFiltered()
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
	return flow_filtered;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	0000      	movs	r0, r0
 800111c:	0000      	movs	r0, r0
	...

08001120 <_ZN10FlowSensor10readSensorEi>:


void FlowSensor::readSensor(int numPulses)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	flow_raw = numPulses/0.55;
 800112a:	6838      	ldr	r0, [r7, #0]
 800112c:	f7ff fa1e 	bl	800056c <__aeabi_i2d>
 8001130:	a30f      	add	r3, pc, #60	; (adr r3, 8001170 <_ZN10FlowSensor10readSensorEi+0x50>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	f7ff fbad 	bl	8000894 <__aeabi_ddiv>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff fd55 	bl	8000bf0 <__aeabi_d2f>
 8001146:	4602      	mov	r2, r0
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	flow_filtered = FIRFilterFlow_Update(&lpf, flow_raw);
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f7ff ff5f 	bl	800101c <_Z20FIRFilterFlow_UpdateP13FIRFilterFlowf>
 800115e:	4602      	mov	r2, r0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	9999999a 	.word	0x9999999a
 8001174:	3fe19999 	.word	0x3fe19999

08001178 <_ZL14DWT_Delay_Initv>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <_ZL14DWT_Delay_Initv+0x60>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <_ZL14DWT_Delay_Initv+0x60>)
 8001182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001186:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <_ZL14DWT_Delay_Initv+0x60>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <_ZL14DWT_Delay_Initv+0x60>)
 800118e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001192:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <_ZL14DWT_Delay_Initv+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a10      	ldr	r2, [pc, #64]	; (80011dc <_ZL14DWT_Delay_Initv+0x64>)
 800119a:	f023 0301 	bic.w	r3, r3, #1
 800119e:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <_ZL14DWT_Delay_Initv+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0d      	ldr	r2, [pc, #52]	; (80011dc <_ZL14DWT_Delay_Initv+0x64>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <_ZL14DWT_Delay_Initv+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 80011b2:	bf00      	nop
  __NOP();
 80011b4:	bf00      	nop
  __NOP();
 80011b6:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_ZL14DWT_Delay_Initv+0x64>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf14      	ite	ne
 80011c0:	2301      	movne	r3, #1
 80011c2:	2300      	moveq	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <_ZL14DWT_Delay_Initv+0x56>
  {
    return 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <_ZL14DWT_Delay_Initv+0x58>
  }
  else
  {
    return 1;
 80011ce:	2301      	movs	r3, #1
  }
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	e000edf0 	.word	0xe000edf0
 80011dc:	e0001000 	.word	0xe0001000

080011e0 <_ZL12DWT_Delay_usm>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <_ZL12DWT_Delay_usm+0x48>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80011ee:	f002 ff3b 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <_ZL12DWT_Delay_usm+0x4c>)
 80011f6:	fba2 2303 	umull	r2, r3, r2, r3
 80011fa:	0c9b      	lsrs	r3, r3, #18
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	fb02 f303 	mul.w	r3, r2, r3
 8001202:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <_ZL12DWT_Delay_usm+0x48>)
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	1ad2      	subs	r2, r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	429a      	cmp	r2, r3
 8001210:	bf34      	ite	cc
 8001212:	2301      	movcc	r3, #1
 8001214:	2300      	movcs	r3, #0
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d000      	beq.n	800121e <_ZL12DWT_Delay_usm+0x3e>
 800121c:	e7f2      	b.n	8001204 <_ZL12DWT_Delay_usm+0x24>
}
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	e0001000 	.word	0xe0001000
 800122c:	431bde83 	.word	0x431bde83

08001230 <_ZL19lcd16x2_enablePulsev>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <_ZL19lcd16x2_enablePulsev+0x34>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <_ZL19lcd16x2_enablePulsev+0x38>)
 800123a:	8811      	ldrh	r1, [r2, #0]
 800123c:	2201      	movs	r2, #1
 800123e:	4618      	mov	r0, r3
 8001240:	f002 faff 	bl	8003842 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8001244:	2014      	movs	r0, #20
 8001246:	f7ff ffcb 	bl	80011e0 <_ZL12DWT_Delay_usm>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <_ZL19lcd16x2_enablePulsev+0x34>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a06      	ldr	r2, [pc, #24]	; (8001268 <_ZL19lcd16x2_enablePulsev+0x38>)
 8001250:	8811      	ldrh	r1, [r2, #0]
 8001252:	2200      	movs	r2, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f002 faf4 	bl	8003842 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 800125a:	203c      	movs	r0, #60	; 0x3c
 800125c:	f7ff ffc0 	bl	80011e0 <_ZL12DWT_Delay_usm>
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000288 	.word	0x20000288
 8001268:	2000028e 	.word	0x2000028e

0800126c <_ZL10lcd16x2_rsb>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <_ZL10lcd16x2_rsb+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <_ZL10lcd16x2_rsb+0x28>)
 800127c:	8811      	ldrh	r1, [r2, #0]
 800127e:	79fa      	ldrb	r2, [r7, #7]
 8001280:	4618      	mov	r0, r3
 8001282:	f002 fade 	bl	8003842 <HAL_GPIO_WritePin>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000288 	.word	0x20000288
 8001294:	2000028c 	.word	0x2000028c

08001298 <_ZL13lcd16x2_writeh>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f003 030f 	and.w	r3, r3, #15
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 80012b0:	4b5f      	ldr	r3, [pc, #380]	; (8001430 <_ZL13lcd16x2_writeh+0x198>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d05a      	beq.n	800136e <_ZL13lcd16x2_writeh+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80012b8:	4b5e      	ldr	r3, [pc, #376]	; (8001434 <_ZL13lcd16x2_writeh+0x19c>)
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	4b5e      	ldr	r3, [pc, #376]	; (8001438 <_ZL13lcd16x2_writeh+0x1a0>)
 80012be:	8819      	ldrh	r1, [r3, #0]
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	f002 faba 	bl	8003842 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80012ce:	4b59      	ldr	r3, [pc, #356]	; (8001434 <_ZL13lcd16x2_writeh+0x19c>)
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	4b5a      	ldr	r3, [pc, #360]	; (800143c <_ZL13lcd16x2_writeh+0x1a4>)
 80012d4:	8819      	ldrh	r1, [r3, #0]
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	f002 faaf 	bl	8003842 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80012e4:	4b53      	ldr	r3, [pc, #332]	; (8001434 <_ZL13lcd16x2_writeh+0x19c>)
 80012e6:	6818      	ldr	r0, [r3, #0]
 80012e8:	4b55      	ldr	r3, [pc, #340]	; (8001440 <_ZL13lcd16x2_writeh+0x1a8>)
 80012ea:	8819      	ldrh	r1, [r3, #0]
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	f002 faa4 	bl	8003842 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80012fa:	4b4e      	ldr	r3, [pc, #312]	; (8001434 <_ZL13lcd16x2_writeh+0x19c>)
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	4b51      	ldr	r3, [pc, #324]	; (8001444 <_ZL13lcd16x2_writeh+0x1ac>)
 8001300:	8819      	ldrh	r1, [r3, #0]
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	b2db      	uxtb	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	f002 fa99 	bl	8003842 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001310:	4b4d      	ldr	r3, [pc, #308]	; (8001448 <_ZL13lcd16x2_writeh+0x1b0>)
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	4b4d      	ldr	r3, [pc, #308]	; (800144c <_ZL13lcd16x2_writeh+0x1b4>)
 8001316:	8819      	ldrh	r1, [r3, #0]
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	f002 fa8e 	bl	8003842 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001326:	4b48      	ldr	r3, [pc, #288]	; (8001448 <_ZL13lcd16x2_writeh+0x1b0>)
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	4b49      	ldr	r3, [pc, #292]	; (8001450 <_ZL13lcd16x2_writeh+0x1b8>)
 800132c:	8819      	ldrh	r1, [r3, #0]
 800132e:	7bbb      	ldrb	r3, [r7, #14]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461a      	mov	r2, r3
 8001338:	f002 fa83 	bl	8003842 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800133c:	4b42      	ldr	r3, [pc, #264]	; (8001448 <_ZL13lcd16x2_writeh+0x1b0>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	4b44      	ldr	r3, [pc, #272]	; (8001454 <_ZL13lcd16x2_writeh+0x1bc>)
 8001342:	8819      	ldrh	r1, [r3, #0]
 8001344:	7bbb      	ldrb	r3, [r7, #14]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	b2db      	uxtb	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	f002 fa78 	bl	8003842 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001352:	4b3d      	ldr	r3, [pc, #244]	; (8001448 <_ZL13lcd16x2_writeh+0x1b0>)
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	4b40      	ldr	r3, [pc, #256]	; (8001458 <_ZL13lcd16x2_writeh+0x1c0>)
 8001358:	8819      	ldrh	r1, [r3, #0]
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	b2db      	uxtb	r3, r3
 8001362:	461a      	mov	r2, r3
 8001364:	f002 fa6d 	bl	8003842 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001368:	f7ff ff62 	bl	8001230 <_ZL19lcd16x2_enablePulsev>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 800136c:	e05b      	b.n	8001426 <_ZL13lcd16x2_writeh+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800136e:	4b36      	ldr	r3, [pc, #216]	; (8001448 <_ZL13lcd16x2_writeh+0x1b0>)
 8001370:	6818      	ldr	r0, [r3, #0]
 8001372:	4b36      	ldr	r3, [pc, #216]	; (800144c <_ZL13lcd16x2_writeh+0x1b4>)
 8001374:	8819      	ldrh	r1, [r3, #0]
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	461a      	mov	r2, r3
 8001380:	f002 fa5f 	bl	8003842 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001384:	4b30      	ldr	r3, [pc, #192]	; (8001448 <_ZL13lcd16x2_writeh+0x1b0>)
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <_ZL13lcd16x2_writeh+0x1b8>)
 800138a:	8819      	ldrh	r1, [r3, #0]
 800138c:	7bbb      	ldrb	r3, [r7, #14]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	f002 fa54 	bl	8003842 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800139a:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <_ZL13lcd16x2_writeh+0x1b0>)
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <_ZL13lcd16x2_writeh+0x1bc>)
 80013a0:	8819      	ldrh	r1, [r3, #0]
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	f002 fa49 	bl	8003842 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <_ZL13lcd16x2_writeh+0x1b0>)
 80013b2:	6818      	ldr	r0, [r3, #0]
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <_ZL13lcd16x2_writeh+0x1c0>)
 80013b6:	8819      	ldrh	r1, [r3, #0]
 80013b8:	7bbb      	ldrb	r3, [r7, #14]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	f002 fa3e 	bl	8003842 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80013c6:	f7ff ff33 	bl	8001230 <_ZL19lcd16x2_enablePulsev>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <_ZL13lcd16x2_writeh+0x1b0>)
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <_ZL13lcd16x2_writeh+0x1b4>)
 80013d0:	8819      	ldrh	r1, [r3, #0]
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	461a      	mov	r2, r3
 80013dc:	f002 fa31 	bl	8003842 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <_ZL13lcd16x2_writeh+0x1b0>)
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <_ZL13lcd16x2_writeh+0x1b8>)
 80013e6:	8819      	ldrh	r1, [r3, #0]
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	f002 fa26 	bl	8003842 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <_ZL13lcd16x2_writeh+0x1b0>)
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <_ZL13lcd16x2_writeh+0x1bc>)
 80013fc:	8819      	ldrh	r1, [r3, #0]
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	b2db      	uxtb	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	f002 fa1b 	bl	8003842 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <_ZL13lcd16x2_writeh+0x1b0>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <_ZL13lcd16x2_writeh+0x1c0>)
 8001412:	8819      	ldrh	r1, [r3, #0]
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	f002 fa10 	bl	8003842 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001422:	f7ff ff05 	bl	8001230 <_ZL19lcd16x2_enablePulsev>
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000084 	.word	0x20000084
 8001434:	20000290 	.word	0x20000290
 8001438:	20000294 	.word	0x20000294
 800143c:	20000296 	.word	0x20000296
 8001440:	20000298 	.word	0x20000298
 8001444:	2000029a 	.word	0x2000029a
 8001448:	2000029c 	.word	0x2000029c
 800144c:	200002a0 	.word	0x200002a0
 8001450:	200002a2 	.word	0x200002a2
 8001454:	200002a4 	.word	0x200002a4
 8001458:	200002a6 	.word	0x200002a6

0800145c <_ZL20lcd16x2_writeCommandh>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8001466:	2000      	movs	r0, #0
 8001468:	f7ff ff00 	bl	800126c <_ZL10lcd16x2_rsb>
  lcd16x2_write(cmd);
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff12 	bl	8001298 <_ZL13lcd16x2_writeh>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_ZL17lcd16x2_writeDatah>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 8001486:	2001      	movs	r0, #1
 8001488:	f7ff fef0 	bl	800126c <_ZL10lcd16x2_rsb>
  lcd16x2_write(data);
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff02 	bl	8001298 <_ZL13lcd16x2_writeh>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_ZL14lcd16x2_write4h>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff fedc 	bl	800126c <_ZL10lcd16x2_rsb>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 80014b4:	4b18      	ldr	r3, [pc, #96]	; (8001518 <_ZL14lcd16x2_write4h+0x7c>)
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <_ZL14lcd16x2_write4h+0x80>)
 80014ba:	8819      	ldrh	r1, [r3, #0]
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	461a      	mov	r2, r3
 80014c6:	f002 f9bc 	bl	8003842 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_ZL14lcd16x2_write4h+0x7c>)
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <_ZL14lcd16x2_write4h+0x84>)
 80014d0:	8819      	ldrh	r1, [r3, #0]
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	f002 f9b1 	bl	8003842 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <_ZL14lcd16x2_write4h+0x7c>)
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <_ZL14lcd16x2_write4h+0x88>)
 80014e6:	8819      	ldrh	r1, [r3, #0]
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	f002 f9a6 	bl	8003842 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_ZL14lcd16x2_write4h+0x7c>)
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <_ZL14lcd16x2_write4h+0x8c>)
 80014fc:	8819      	ldrh	r1, [r3, #0]
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	b2db      	uxtb	r3, r3
 8001506:	461a      	mov	r2, r3
 8001508:	f002 f99b 	bl	8003842 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 800150c:	f7ff fe90 	bl	8001230 <_ZL19lcd16x2_enablePulsev>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	2000029c 	.word	0x2000029c
 800151c:	200002a0 	.word	0x200002a0
 8001520:	200002a2 	.word	0x200002a2
 8001524:	200002a4 	.word	0x200002a4
 8001528:	200002a6 	.word	0x200002a6

0800152c <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	817b      	strh	r3, [r7, #10]
 800153a:	4613      	mov	r3, r2
 800153c:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 800153e:	f7ff fe1b 	bl	8001178 <_ZL14DWT_Delay_Initv>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8001542:	4a24      	ldr	r2, [pc, #144]	; (80015d4 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xa8>)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8001548:	4a23      	ldr	r2, [pc, #140]	; (80015d8 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xac>)
 800154a:	897b      	ldrh	r3, [r7, #10]
 800154c:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 800154e:	4a23      	ldr	r2, [pc, #140]	; (80015dc <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb0>)
 8001550:	893b      	ldrh	r3, [r7, #8]
 8001552:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8001554:	4a22      	ldr	r2, [pc, #136]	; (80015e0 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb4>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 800155a:	4a22      	ldr	r2, [pc, #136]	; (80015e4 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb8>)
 800155c:	8b3b      	ldrh	r3, [r7, #24]
 800155e:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8001560:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xbc>)
 8001562:	8bbb      	ldrh	r3, [r7, #28]
 8001564:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8001566:	4a21      	ldr	r2, [pc, #132]	; (80015ec <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc0>)
 8001568:	8c3b      	ldrh	r3, [r7, #32]
 800156a:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 800156c:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc4>)
 800156e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001570:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc8>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xcc>)
 800157a:	2228      	movs	r2, #40	; 0x28
 800157c:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 800157e:	2014      	movs	r0, #20
 8001580:	f001 fa66 	bl	8002a50 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8001584:	2003      	movs	r0, #3
 8001586:	f7ff ff89 	bl	800149c <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(5);
 800158a:	2005      	movs	r0, #5
 800158c:	f001 fa60 	bl	8002a50 <HAL_Delay>
  lcd16x2_write4(0x3);
 8001590:	2003      	movs	r0, #3
 8001592:	f7ff ff83 	bl	800149c <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 8001596:	2001      	movs	r0, #1
 8001598:	f001 fa5a 	bl	8002a50 <HAL_Delay>
  lcd16x2_write4(0x3);
 800159c:	2003      	movs	r0, #3
 800159e:	f7ff ff7d 	bl	800149c <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f001 fa54 	bl	8002a50 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 80015a8:	2002      	movs	r0, #2
 80015aa:	f7ff ff77 	bl	800149c <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f001 fa4e 	bl	8002a50 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80015b4:	2028      	movs	r0, #40	; 0x28
 80015b6:	f7ff ff51 	bl	800145c <_ZL20lcd16x2_writeCommandh>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80015ba:	200f      	movs	r0, #15
 80015bc:	f7ff ff4e 	bl	800145c <_ZL20lcd16x2_writeCommandh>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7ff ff4b 	bl	800145c <_ZL20lcd16x2_writeCommandh>
  LCD_MS_DELAY(3);
 80015c6:	2003      	movs	r0, #3
 80015c8:	f001 fa42 	bl	8002a50 <HAL_Delay>
}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000288 	.word	0x20000288
 80015d8:	2000028c 	.word	0x2000028c
 80015dc:	2000028e 	.word	0x2000028e
 80015e0:	2000029c 	.word	0x2000029c
 80015e4:	200002a0 	.word	0x200002a0
 80015e8:	200002a2 	.word	0x200002a2
 80015ec:	200002a4 	.word	0x200002a4
 80015f0:	200002a6 	.word	0x200002a6
 80015f4:	20000084 	.word	0x20000084
 80015f8:	20000086 	.word	0x20000086

080015fc <_Z17lcd16x2_setCursorhh>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	460a      	mov	r2, r1
 8001606:	71fb      	strb	r3, [r7, #7]
 8001608:	4613      	mov	r3, r2
 800160a:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d108      	bne.n	800162c <_Z17lcd16x2_setCursorhh+0x30>
  {
    maskData |= (0x80);
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001620:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff19 	bl	800145c <_ZL20lcd16x2_writeCommandh>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 800162a:	e007      	b.n	800163c <_Z17lcd16x2_setCursorhh+0x40>
    maskData |= (0xc0);
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001632:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff10 	bl	800145c <_ZL20lcd16x2_writeCommandh>
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_Z15lcd16x2_1stLinev>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 8001648:	2100      	movs	r1, #0
 800164a:	2000      	movs	r0, #0
 800164c:	f7ff ffd6 	bl	80015fc <_Z17lcd16x2_setCursorhh>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <_Z15lcd16x2_2ndLinev>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8001658:	2100      	movs	r1, #0
 800165a:	2001      	movs	r0, #1
 800165c:	f7ff ffce 	bl	80015fc <_Z17lcd16x2_setCursorhh>
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <_Z18lcd16x2_cursorShowb>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  if(state)
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00c      	beq.n	800168e <_Z18lcd16x2_cursorShowb+0x2a>
  {
    DisplayControl |= (0x03);
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <_Z18lcd16x2_cursorShowb+0x4c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	f043 0303 	orr.w	r3, r3, #3
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <_Z18lcd16x2_cursorShowb+0x4c>)
 8001680:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <_Z18lcd16x2_cursorShowb+0x4c>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fee8 	bl	800145c <_ZL20lcd16x2_writeCommandh>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 800168c:	e00b      	b.n	80016a6 <_Z18lcd16x2_cursorShowb+0x42>
    DisplayControl &= ~(0x03);
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <_Z18lcd16x2_cursorShowb+0x4c>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	f023 0303 	bic.w	r3, r3, #3
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <_Z18lcd16x2_cursorShowb+0x4c>)
 800169a:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <_Z18lcd16x2_cursorShowb+0x4c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fedb 	bl	800145c <_ZL20lcd16x2_writeCommandh>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000085 	.word	0x20000085

080016b4 <_Z13lcd16x2_clearv>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7ff fecf 	bl	800145c <_ZL20lcd16x2_writeCommandh>
  LCD_MS_DELAY(3);
 80016be:	2003      	movs	r0, #3
 80016c0:	f001 f9c6 	bl	8002a50 <HAL_Delay>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_Z14lcd16x2_printfPKcz>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 80016c8:	b40f      	push	{r0, r1, r2, r3}
 80016ca:	b590      	push	{r4, r7, lr}
 80016cc:	b089      	sub	sp, #36	; 0x24
 80016ce:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80016d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016d4:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016de:	4618      	mov	r0, r3
 80016e0:	f004 fcc4 	bl	800606c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	77fb      	strb	r3, [r7, #31]
 80016e8:	7ffc      	ldrb	r4, [r7, #31]
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fd2e 	bl	8000150 <strlen>
 80016f4:	4603      	mov	r3, r0
 80016f6:	429c      	cmp	r4, r3
 80016f8:	d20f      	bcs.n	800171a <_Z14lcd16x2_printfPKcz+0x52>
 80016fa:	7ffb      	ldrb	r3, [r7, #31]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d80c      	bhi.n	800171a <_Z14lcd16x2_printfPKcz+0x52>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8001700:	7ffb      	ldrb	r3, [r7, #31]
 8001702:	f107 0220 	add.w	r2, r7, #32
 8001706:	4413      	add	r3, r2
 8001708:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff feb5 	bl	800147c <_ZL17lcd16x2_writeDatah>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001712:	7ffb      	ldrb	r3, [r7, #31]
 8001714:	3301      	adds	r3, #1
 8001716:	77fb      	strb	r3, [r7, #31]
 8001718:	e7e6      	b.n	80016e8 <_Z14lcd16x2_printfPKcz+0x20>
  }
}
 800171a:	bf00      	nop
 800171c:	3724      	adds	r7, #36	; 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001724:	b004      	add	sp, #16
 8001726:	4770      	bx	lr

08001728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b087      	sub	sp, #28
 800172c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172e:	f001 f92d 	bl	800298c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001732:	f000 fa21 	bl	8001b78 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001736:	f000 fce5 	bl	8002104 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 800173a:	f000 fba1 	bl	8001e80 <_ZL12MX_TIM2_Initv>
  MX_ADC1_Init();
 800173e:	f000 fa85 	bl	8001c4c <_ZL12MX_ADC1_Initv>
  MX_TIM4_Init();
 8001742:	f000 fc55 	bl	8001ff0 <_ZL12MX_TIM4_Initv>
  MX_TIM1_Init();
 8001746:	f000 fac9 	bl	8001cdc <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 800174a:	f000 fbf5 	bl	8001f38 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 800174e:	f000 fcab 	bl	80020a8 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

  lcd16x2_init_4bits(LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_EN_Pin,
 8001752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001756:	9303      	str	r3, [sp, #12]
 8001758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	4b9b      	ldr	r3, [pc, #620]	; (80019d8 <main+0x2b0>)
 800176c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001774:	4898      	ldr	r0, [pc, #608]	; (80019d8 <main+0x2b0>)
 8001776:	f7ff fed9 	bl	800152c <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt>
		  	  	  	 LCD_D4_GPIO_Port, LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin);

  lcd16x2_cursorShow(false);
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff ff72 	bl	8001664 <_Z18lcd16x2_cursorShowb>

  HAL_ADC_Start(&hadc1);
 8001780:	4896      	ldr	r0, [pc, #600]	; (80019dc <main+0x2b4>)
 8001782:	f001 fa61 	bl	8002c48 <HAL_ADC_Start>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001786:	2108      	movs	r1, #8
 8001788:	4895      	ldr	r0, [pc, #596]	; (80019e0 <main+0x2b8>)
 800178a:	f003 fc5f 	bl	800504c <HAL_TIMEx_PWMN_Start>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 800178e:	4b94      	ldr	r3, [pc, #592]	; (80019e0 <main+0x2b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_GPIO_WritePin(PUMP_EN_GPIO_Port, PUMP_EN_Pin, GPIO_PIN_SET);
 8001796:	2201      	movs	r2, #1
 8001798:	2120      	movs	r1, #32
 800179a:	4892      	ldr	r0, [pc, #584]	; (80019e4 <main+0x2bc>)
 800179c:	f002 f851 	bl	8003842 <HAL_GPIO_WritePin>

  while(!HAL_GPIO_ReadPin(SETPOINT_BUT_GPIO_Port, SETPOINT_BUT_Pin))
 80017a0:	2108      	movs	r1, #8
 80017a2:	488d      	ldr	r0, [pc, #564]	; (80019d8 <main+0x2b0>)
 80017a4:	f002 f836 	bl	8003814 <HAL_GPIO_ReadPin>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf0c      	ite	eq
 80017ae:	2301      	moveq	r3, #1
 80017b0:	2300      	movne	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d046      	beq.n	8001846 <main+0x11e>
  {
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017bc:	4887      	ldr	r0, [pc, #540]	; (80019dc <main+0x2b4>)
 80017be:	f001 faf1 	bl	8002da4 <HAL_ADC_PollForConversion>
	  potVal = HAL_ADC_GetValue(&hadc1);
 80017c2:	4886      	ldr	r0, [pc, #536]	; (80019dc <main+0x2b4>)
 80017c4:	f001 fbf4 	bl	8002fb0 <HAL_ADC_GetValue>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b86      	ldr	r3, [pc, #536]	; (80019e8 <main+0x2c0>)
 80017ce:	801a      	strh	r2, [r3, #0]
	  setpoint = 15.0 + 10.0*(potVal/4036.0);
 80017d0:	4b85      	ldr	r3, [pc, #532]	; (80019e8 <main+0x2c0>)
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fec9 	bl	800056c <__aeabi_i2d>
 80017da:	a377      	add	r3, pc, #476	; (adr r3, 80019b8 <main+0x290>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	f7ff f858 	bl	8000894 <__aeabi_ddiv>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b7e      	ldr	r3, [pc, #504]	; (80019ec <main+0x2c4>)
 80017f2:	f7fe ff25 	bl	8000640 <__aeabi_dmul>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	4b7b      	ldr	r3, [pc, #492]	; (80019f0 <main+0x2c8>)
 8001804:	f7fe fd66 	bl	80002d4 <__adddf3>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f9ee 	bl	8000bf0 <__aeabi_d2f>
 8001814:	4603      	mov	r3, r0
 8001816:	4a77      	ldr	r2, [pc, #476]	; (80019f4 <main+0x2cc>)
 8001818:	6013      	str	r3, [r2, #0]
	  lcd16x2_clear();
 800181a:	f7ff ff4b 	bl	80016b4 <_Z13lcd16x2_clearv>
	  lcd16x2_printf("Setpoint: ");
 800181e:	4876      	ldr	r0, [pc, #472]	; (80019f8 <main+0x2d0>)
 8001820:	f7ff ff52 	bl	80016c8 <_Z14lcd16x2_printfPKcz>
	  lcd16x2_2ndLine();
 8001824:	f7ff ff16 	bl	8001654 <_Z15lcd16x2_2ndLinev>
	  lcd16x2_printf("     %.1f L/min", setpoint);
 8001828:	4b72      	ldr	r3, [pc, #456]	; (80019f4 <main+0x2cc>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe feaf 	bl	8000590 <__aeabi_f2d>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4871      	ldr	r0, [pc, #452]	; (80019fc <main+0x2d4>)
 8001838:	f7ff ff46 	bl	80016c8 <_Z14lcd16x2_printfPKcz>
	  HAL_Delay(300);
 800183c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001840:	f001 f906 	bl	8002a50 <HAL_Delay>
  while(!HAL_GPIO_ReadPin(SETPOINT_BUT_GPIO_Port, SETPOINT_BUT_Pin))
 8001844:	e7ac      	b.n	80017a0 <main+0x78>
  }

  HAL_GPIO_WritePin(PUMP_EN_GPIO_Port, PUMP_EN_Pin, GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	2120      	movs	r1, #32
 800184a:	4866      	ldr	r0, [pc, #408]	; (80019e4 <main+0x2bc>)
 800184c:	f001 fff9 	bl	8003842 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim4);
 8001850:	486b      	ldr	r0, [pc, #428]	; (8001a00 <main+0x2d8>)
 8001852:	f002 fe23 	bl	800449c <HAL_TIM_Base_Start_IT>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001856:	2100      	movs	r1, #0
 8001858:	4861      	ldr	r0, [pc, #388]	; (80019e0 <main+0x2b8>)
 800185a:	f003 fbf7 	bl	800504c <HAL_TIMEx_PWMN_Start>

  lcd16x2_clear();
 800185e:	f7ff ff29 	bl	80016b4 <_Z13lcd16x2_clearv>
  lcd16x2_printf("Okay! Pressione");
 8001862:	4868      	ldr	r0, [pc, #416]	; (8001a04 <main+0x2dc>)
 8001864:	f7ff ff30 	bl	80016c8 <_Z14lcd16x2_printfPKcz>
  lcd16x2_2ndLine();
 8001868:	f7ff fef4 	bl	8001654 <_Z15lcd16x2_2ndLinev>
  lcd16x2_printf("novamente");
 800186c:	4866      	ldr	r0, [pc, #408]	; (8001a08 <main+0x2e0>)
 800186e:	f7ff ff2b 	bl	80016c8 <_Z14lcd16x2_printfPKcz>
  while (!HAL_GPIO_ReadPin(SETPOINT_BUT_GPIO_Port, SETPOINT_BUT_Pin));
 8001872:	2108      	movs	r1, #8
 8001874:	4858      	ldr	r0, [pc, #352]	; (80019d8 <main+0x2b0>)
 8001876:	f001 ffcd 	bl	8003814 <HAL_GPIO_ReadPin>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	bf0c      	ite	eq
 8001880:	2301      	moveq	r3, #1
 8001882:	2300      	movne	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d000      	beq.n	800188c <main+0x164>
 800188a:	e7f2      	b.n	8001872 <main+0x14a>
  lcd16x2_clear();
 800188c:	f7ff ff12 	bl	80016b4 <_Z13lcd16x2_clearv>

  lcd16x2_printf("Abrindo valvula");
 8001890:	485e      	ldr	r0, [pc, #376]	; (8001a0c <main+0x2e4>)
 8001892:	f7ff ff19 	bl	80016c8 <_Z14lcd16x2_printfPKcz>
  openValve(4500);
 8001896:	f241 1094 	movw	r0, #4500	; 0x1194
 800189a:	f000 fdb3 	bl	8002404 <_Z9openValvet>

  lcd16x2_clear();
 800189e:	f7ff ff09 	bl	80016b4 <_Z13lcd16x2_clearv>
  lcd16x2_2ndLine();
 80018a2:	f7ff fed7 	bl	8001654 <_Z15lcd16x2_2ndLinev>
  lcd16x2_printf("Iniciando...");
 80018a6:	485a      	ldr	r0, [pc, #360]	; (8001a10 <main+0x2e8>)
 80018a8:	f7ff ff0e 	bl	80016c8 <_Z14lcd16x2_printfPKcz>
  for (int i=0; i<30; i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b1d      	cmp	r3, #29
 80018b4:	dc0a      	bgt.n	80018cc <main+0x1a4>
  {
	  flowSensor.readSensor(0);
 80018b6:	2100      	movs	r1, #0
 80018b8:	4856      	ldr	r0, [pc, #344]	; (8001a14 <main+0x2ec>)
 80018ba:	f7ff fc31 	bl	8001120 <_ZN10FlowSensor10readSensorEi>
	  HAL_Delay(200);
 80018be:	20c8      	movs	r0, #200	; 0xc8
 80018c0:	f001 f8c6 	bl	8002a50 <HAL_Delay>
  for (int i=0; i<30; i++)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3301      	adds	r3, #1
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	e7f1      	b.n	80018b0 <main+0x188>
  }

  startMillis = HAL_GetTick();
 80018cc:	f001 f8b6 	bl	8002a3c <HAL_GetTick>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4a51      	ldr	r2, [pc, #324]	; (8001a18 <main+0x2f0>)
 80018d4:	6013      	str	r3, [r2, #0]
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 400);
 80018d6:	4b42      	ldr	r3, [pc, #264]	; (80019e0 <main+0x2b8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	startLoopMillis = HAL_GetTick();
 80018e0:	f001 f8ac 	bl	8002a3c <HAL_GetTick>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a4d      	ldr	r2, [pc, #308]	; (8001a1c <main+0x2f4>)
 80018e8:	6013      	str	r3, [r2, #0]

	error = setpoint - flowSensor.getFlowFiltered() - 0.6;
 80018ea:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <main+0x2cc>)
 80018ec:	681c      	ldr	r4, [r3, #0]
 80018ee:	4849      	ldr	r0, [pc, #292]	; (8001a14 <main+0x2ec>)
 80018f0:	f7ff fc07 	bl	8001102 <_ZN10FlowSensor15getFlowFilteredEv>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4619      	mov	r1, r3
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff f9cd 	bl	8000c98 <__aeabi_fsub>
 80018fe:	4603      	mov	r3, r0
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fe45 	bl	8000590 <__aeabi_f2d>
 8001906:	a32e      	add	r3, pc, #184	; (adr r3, 80019c0 <main+0x298>)
 8001908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190c:	f7fe fce0 	bl	80002d0 <__aeabi_dsub>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f7ff f96a 	bl	8000bf0 <__aeabi_d2f>
 800191c:	4603      	mov	r3, r0
 800191e:	4a40      	ldr	r2, [pc, #256]	; (8001a20 <main+0x2f8>)
 8001920:	6013      	str	r3, [r2, #0]
	if (error > 0.2) valveTime = 1000*kp*error;
 8001922:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <main+0x2f8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe32 	bl	8000590 <__aeabi_f2d>
 800192c:	a326      	add	r3, pc, #152	; (adr r3, 80019c8 <main+0x2a0>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7ff f915 	bl	8000b60 <__aeabi_dcmpgt>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d016      	beq.n	800196a <main+0x242>
 800193c:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <main+0x2fc>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4939      	ldr	r1, [pc, #228]	; (8001a28 <main+0x300>)
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fc0c 	bl	8000160 <__aeabi_fmul>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <main+0x2f8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	4610      	mov	r0, r2
 8001954:	f7fe fc04 	bl	8000160 <__aeabi_fmul>
 8001958:	4603      	mov	r3, r0
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fb1c 	bl	8000f98 <__aeabi_f2uiz>
 8001960:	4603      	mov	r3, r0
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <main+0x304>)
 8001966:	801a      	strh	r2, [r3, #0]
 8001968:	e067      	b.n	8001a3a <main+0x312>
	else if (error < -0.2) valveTime = -1000*kp*error;
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <main+0x2f8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fe0e 	bl	8000590 <__aeabi_f2d>
 8001974:	a316      	add	r3, pc, #88	; (adr r3, 80019d0 <main+0x2a8>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7ff f8d3 	bl	8000b24 <__aeabi_dcmplt>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d057      	beq.n	8001a34 <main+0x30c>
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <main+0x2fc>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4929      	ldr	r1, [pc, #164]	; (8001a30 <main+0x308>)
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fbe8 	bl	8000160 <__aeabi_fmul>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <main+0x2f8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f7fe fbe0 	bl	8000160 <__aeabi_fmul>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff faf8 	bl	8000f98 <__aeabi_f2uiz>
 80019a8:	4603      	mov	r3, r0
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <main+0x304>)
 80019ae:	801a      	strh	r2, [r3, #0]
 80019b0:	e043      	b.n	8001a3a <main+0x312>
 80019b2:	bf00      	nop
 80019b4:	f3af 8000 	nop.w
 80019b8:	00000000 	.word	0x00000000
 80019bc:	40af8800 	.word	0x40af8800
 80019c0:	33333333 	.word	0x33333333
 80019c4:	3fe33333 	.word	0x3fe33333
 80019c8:	9999999a 	.word	0x9999999a
 80019cc:	3fc99999 	.word	0x3fc99999
 80019d0:	9999999a 	.word	0x9999999a
 80019d4:	bfc99999 	.word	0xbfc99999
 80019d8:	40010800 	.word	0x40010800
 80019dc:	200002a8 	.word	0x200002a8
 80019e0:	200002d8 	.word	0x200002d8
 80019e4:	40010c00 	.word	0x40010c00
 80019e8:	200004d0 	.word	0x200004d0
 80019ec:	40240000 	.word	0x40240000
 80019f0:	402e0000 	.word	0x402e0000
 80019f4:	200004d4 	.word	0x200004d4
 80019f8:	080084b0 	.word	0x080084b0
 80019fc:	080084bc 	.word	0x080084bc
 8001a00:	200003b0 	.word	0x200003b0
 8001a04:	080084cc 	.word	0x080084cc
 8001a08:	080084dc 	.word	0x080084dc
 8001a0c:	080084e8 	.word	0x080084e8
 8001a10:	080084f8 	.word	0x080084f8
 8001a14:	2000043c 	.word	0x2000043c
 8001a18:	200004e8 	.word	0x200004e8
 8001a1c:	200004ec 	.word	0x200004ec
 8001a20:	200004d8 	.word	0x200004d8
 8001a24:	20000088 	.word	0x20000088
 8001a28:	447a0000 	.word	0x447a0000
 8001a2c:	200004dc 	.word	0x200004dc
 8001a30:	c47a0000 	.word	0xc47a0000
	else valveTime = 0;
 8001a34:	4b44      	ldr	r3, [pc, #272]	; (8001b48 <main+0x420>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	801a      	strh	r2, [r3, #0]

	if (valveTime > 1000) valveTime = 1000;
 8001a3a:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <main+0x420>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a42:	d903      	bls.n	8001a4c <main+0x324>
 8001a44:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <main+0x420>)
 8001a46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a4a:	801a      	strh	r2, [r3, #0]
	if (error > -0.5 &&  error < 0.5) valveTime /= 5;
 8001a4c:	4b3f      	ldr	r3, [pc, #252]	; (8001b4c <main+0x424>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fa95 	bl	8000f84 <__aeabi_fcmpgt>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d012      	beq.n	8001a86 <main+0x35e>
 8001a60:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <main+0x424>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fa6d 	bl	8000f48 <__aeabi_fcmplt>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <main+0x35e>
 8001a74:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <main+0x420>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	4a35      	ldr	r2, [pc, #212]	; (8001b50 <main+0x428>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <main+0x420>)
 8001a84:	801a      	strh	r2, [r3, #0]

	if (error > 0.0) openValve(valveTime);
 8001a86:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <main+0x424>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f04f 0100 	mov.w	r1, #0
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fa78 	bl	8000f84 <__aeabi_fcmpgt>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d005      	beq.n	8001aa6 <main+0x37e>
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <main+0x420>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fcb0 	bl	8002404 <_Z9openValvet>
 8001aa4:	e004      	b.n	8001ab0 <main+0x388>
	else closeValve(valveTime);
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <main+0x420>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 fc8a 	bl	80023c4 <_Z10closeValvet>

	if (calculateFlow)
 8001ab0:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <main+0x42c>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00d      	beq.n	8001ad4 <main+0x3ac>
	{
		flowSensor.readSensor(flowPulsesCont);
 8001ab8:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <main+0x430>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4827      	ldr	r0, [pc, #156]	; (8001b5c <main+0x434>)
 8001ac0:	f7ff fb2e 	bl	8001120 <_ZN10FlowSensor10readSensorEi>
		flowPulsesCont = 0;
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <main+0x430>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	801a      	strh	r2, [r3, #0]
		calculateFlow = false;
 8001aca:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <main+0x42c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
		sendData();
 8001ad0:	f000 fc20 	bl	8002314 <_Z8sendDatav>
	}

	if (updateLCD)
 8001ad4:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <main+0x438>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01e      	beq.n	8001b1a <main+0x3f2>
	{
		lcd16x2_clear();
 8001adc:	f7ff fdea 	bl	80016b4 <_Z13lcd16x2_clearv>
		lcd16x2_1stLine();
 8001ae0:	f7ff fdb0 	bl	8001644 <_Z15lcd16x2_1stLinev>
		lcd16x2_printf("SP: %.1f L/min", setpoint);
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <main+0x43c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd51 	bl	8000590 <__aeabi_f2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	481d      	ldr	r0, [pc, #116]	; (8001b68 <main+0x440>)
 8001af4:	f7ff fde8 	bl	80016c8 <_Z14lcd16x2_printfPKcz>
		lcd16x2_2ndLine();
 8001af8:	f7ff fdac 	bl	8001654 <_Z15lcd16x2_2ndLinev>
		lcd16x2_printf("V.: %.1f L/min", flowSensor.getFlowFiltered());
 8001afc:	4817      	ldr	r0, [pc, #92]	; (8001b5c <main+0x434>)
 8001afe:	f7ff fb00 	bl	8001102 <_ZN10FlowSensor15getFlowFilteredEv>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fd43 	bl	8000590 <__aeabi_f2d>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4817      	ldr	r0, [pc, #92]	; (8001b6c <main+0x444>)
 8001b10:	f7ff fdda 	bl	80016c8 <_Z14lcd16x2_printfPKcz>
		updateLCD = false;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <main+0x438>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000/SAMPLING_FREQUENCY - (HAL_GetTick() - startLoopMillis));
 8001b1a:	f000 ff8f 	bl	8002a3c <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <main+0x448>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f968 	bl	8000dfc <__aeabi_ui2f>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4810      	ldr	r0, [pc, #64]	; (8001b74 <main+0x44c>)
 8001b32:	f7ff f8b1 	bl	8000c98 <__aeabi_fsub>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fa2d 	bl	8000f98 <__aeabi_f2uiz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 ff85 	bl	8002a50 <HAL_Delay>
	startLoopMillis = HAL_GetTick();
 8001b46:	e6cb      	b.n	80018e0 <main+0x1b8>
 8001b48:	200004dc 	.word	0x200004dc
 8001b4c:	200004d8 	.word	0x200004d8
 8001b50:	cccccccd 	.word	0xcccccccd
 8001b54:	200004e2 	.word	0x200004e2
 8001b58:	200004e0 	.word	0x200004e0
 8001b5c:	2000043c 	.word	0x2000043c
 8001b60:	2000008c 	.word	0x2000008c
 8001b64:	200004d4 	.word	0x200004d4
 8001b68:	08008508 	.word	0x08008508
 8001b6c:	08008518 	.word	0x08008518
 8001b70:	200004ec 	.word	0x200004ec
 8001b74:	42c80000 	.word	0x42c80000

08001b78 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b094      	sub	sp, #80	; 0x50
 8001b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b82:	2228      	movs	r2, #40	; 0x28
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 fdd2 	bl	8005730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bc4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 fe80 	bl	80038d4 <HAL_RCC_OscConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bf14      	ite	ne
 8001bda:	2301      	movne	r3, #1
 8001bdc:	2300      	moveq	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001be4:	f000 fc2e 	bl	8002444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001be8:	230f      	movs	r3, #15
 8001bea:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bec:	2302      	movs	r3, #2
 8001bee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	2102      	movs	r1, #2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 f8e5 	bl	8003dd4 <HAL_RCC_ClockConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf14      	ite	ne
 8001c10:	2301      	movne	r3, #1
 8001c12:	2300      	moveq	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8001c1a:	f000 fc13 	bl	8002444 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c26:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fa6c 	bl	8004108 <HAL_RCCEx_PeriphCLKConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8001c40:	f000 fc00 	bl	8002444 <Error_Handler>
  }
}
 8001c44:	bf00      	nop
 8001c46:	3750      	adds	r7, #80	; 0x50
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <_ZL12MX_ADC1_Initv+0x88>)
 8001c5e:	4a1e      	ldr	r2, [pc, #120]	; (8001cd8 <_ZL12MX_ADC1_Initv+0x8c>)
 8001c60:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <_ZL12MX_ADC1_Initv+0x88>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c68:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <_ZL12MX_ADC1_Initv+0x88>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <_ZL12MX_ADC1_Initv+0x88>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <_ZL12MX_ADC1_Initv+0x88>)
 8001c76:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <_ZL12MX_ADC1_Initv+0x88>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <_ZL12MX_ADC1_Initv+0x88>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c88:	4812      	ldr	r0, [pc, #72]	; (8001cd4 <_ZL12MX_ADC1_Initv+0x88>)
 8001c8a:	f000 ff05 	bl	8002a98 <HAL_ADC_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf14      	ite	ne
 8001c94:	2301      	movne	r3, #1
 8001c96:	2300      	moveq	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8001c9e:	f000 fbd1 	bl	8002444 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4808      	ldr	r0, [pc, #32]	; (8001cd4 <_ZL12MX_ADC1_Initv+0x88>)
 8001cb4:	f001 f988 	bl	8002fc8 <HAL_ADC_ConfigChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	bf14      	ite	ne
 8001cbe:	2301      	movne	r3, #1
 8001cc0:	2300      	moveq	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8001cc8:	f000 fbbc 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ccc:	bf00      	nop
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	200002a8 	.word	0x200002a8
 8001cd8:	40012400 	.word	0x40012400

08001cdc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b096      	sub	sp, #88	; 0x58
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	611a      	str	r2, [r3, #16]
 8001d0a:	615a      	str	r2, [r3, #20]
 8001d0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d0e:	1d3b      	adds	r3, r7, #4
 8001d10:	2220      	movs	r2, #32
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 fd0b 	bl	8005730 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d1a:	4b57      	ldr	r3, [pc, #348]	; (8001e78 <_ZL12MX_TIM1_Initv+0x19c>)
 8001d1c:	4a57      	ldr	r2, [pc, #348]	; (8001e7c <_ZL12MX_TIM1_Initv+0x1a0>)
 8001d1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 8001d20:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <_ZL12MX_TIM1_Initv+0x19c>)
 8001d22:	227f      	movs	r2, #127	; 0x7f
 8001d24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d26:	4b54      	ldr	r3, [pc, #336]	; (8001e78 <_ZL12MX_TIM1_Initv+0x19c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625;
 8001d2c:	4b52      	ldr	r3, [pc, #328]	; (8001e78 <_ZL12MX_TIM1_Initv+0x19c>)
 8001d2e:	f240 2271 	movw	r2, #625	; 0x271
 8001d32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d34:	4b50      	ldr	r3, [pc, #320]	; (8001e78 <_ZL12MX_TIM1_Initv+0x19c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d3a:	4b4f      	ldr	r3, [pc, #316]	; (8001e78 <_ZL12MX_TIM1_Initv+0x19c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d40:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <_ZL12MX_TIM1_Initv+0x19c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d46:	484c      	ldr	r0, [pc, #304]	; (8001e78 <_ZL12MX_TIM1_Initv+0x19c>)
 8001d48:	f002 fb58 	bl	80043fc <HAL_TIM_Base_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8001d5c:	f000 fb72 	bl	8002444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d64:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4842      	ldr	r0, [pc, #264]	; (8001e78 <_ZL12MX_TIM1_Initv+0x19c>)
 8001d6e:	f002 fe05 	bl	800497c <HAL_TIM_ConfigClockSource>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf14      	ite	ne
 8001d78:	2301      	movne	r3, #1
 8001d7a:	2300      	moveq	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8001d82:	f000 fb5f 	bl	8002444 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d86:	483c      	ldr	r0, [pc, #240]	; (8001e78 <_ZL12MX_TIM1_Initv+0x19c>)
 8001d88:	f002 fbda 	bl	8004540 <HAL_TIM_PWM_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	bf14      	ite	ne
 8001d92:	2301      	movne	r3, #1
 8001d94:	2300      	moveq	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8001d9c:	f000 fb52 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001da8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dac:	4619      	mov	r1, r3
 8001dae:	4832      	ldr	r0, [pc, #200]	; (8001e78 <_ZL12MX_TIM1_Initv+0x19c>)
 8001db0:	f003 f9ea 	bl	8005188 <HAL_TIMEx_MasterConfigSynchronization>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	bf14      	ite	ne
 8001dba:	2301      	movne	r3, #1
 8001dbc:	2300      	moveq	r3, #0
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8001dc4:	f000 fb3e 	bl	8002444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dc8:	2360      	movs	r3, #96	; 0x60
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de8:	2200      	movs	r2, #0
 8001dea:	4619      	mov	r1, r3
 8001dec:	4822      	ldr	r0, [pc, #136]	; (8001e78 <_ZL12MX_TIM1_Initv+0x19c>)
 8001dee:	f002 fd07 	bl	8004800 <HAL_TIM_PWM_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf14      	ite	ne
 8001df8:	2301      	movne	r3, #1
 8001dfa:	2300      	moveq	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8001e02:	f000 fb1f 	bl	8002444 <Error_Handler>
  }
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e10:	2208      	movs	r2, #8
 8001e12:	4619      	mov	r1, r3
 8001e14:	4818      	ldr	r0, [pc, #96]	; (8001e78 <_ZL12MX_TIM1_Initv+0x19c>)
 8001e16:	f002 fcf3 	bl	8004800 <HAL_TIM_PWM_ConfigChannel>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf14      	ite	ne
 8001e20:	2301      	movne	r3, #1
 8001e22:	2300      	moveq	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 8001e2a:	f000 fb0b 	bl	8002444 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4809      	ldr	r0, [pc, #36]	; (8001e78 <_ZL12MX_TIM1_Initv+0x19c>)
 8001e52:	f003 f9f7 	bl	8005244 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <_ZL12MX_TIM1_Initv+0x18e>
  {
    Error_Handler();
 8001e66:	f000 faed 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e6a:	4803      	ldr	r0, [pc, #12]	; (8001e78 <_ZL12MX_TIM1_Initv+0x19c>)
 8001e6c:	f000 fbdc 	bl	8002628 <HAL_TIM_MspPostInit>

}
 8001e70:	bf00      	nop
 8001e72:	3758      	adds	r7, #88	; 0x58
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200002d8 	.word	0x200002d8
 8001e7c:	40012c00 	.word	0x40012c00

08001e80 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e86:	f107 0308 	add.w	r3, r7, #8
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e94:	463b      	mov	r3, r7
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e9c:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <_ZL12MX_TIM2_Initv+0xb4>)
 8001e9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ea2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001ea4:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <_ZL12MX_TIM2_Initv+0xb4>)
 8001ea6:	2247      	movs	r2, #71	; 0x47
 8001ea8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <_ZL12MX_TIM2_Initv+0xb4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <_ZL12MX_TIM2_Initv+0xb4>)
 8001eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <_ZL12MX_TIM2_Initv+0xb4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <_ZL12MX_TIM2_Initv+0xb4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ec4:	481b      	ldr	r0, [pc, #108]	; (8001f34 <_ZL12MX_TIM2_Initv+0xb4>)
 8001ec6:	f002 fa99 	bl	80043fc <HAL_TIM_Base_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf14      	ite	ne
 8001ed0:	2301      	movne	r3, #1
 8001ed2:	2300      	moveq	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001eda:	f000 fab3 	bl	8002444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ee4:	f107 0308 	add.w	r3, r7, #8
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4812      	ldr	r0, [pc, #72]	; (8001f34 <_ZL12MX_TIM2_Initv+0xb4>)
 8001eec:	f002 fd46 	bl	800497c <HAL_TIM_ConfigClockSource>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	bf14      	ite	ne
 8001ef6:	2301      	movne	r3, #1
 8001ef8:	2300      	moveq	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001f00:	f000 faa0 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f04:	2300      	movs	r3, #0
 8001f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4808      	ldr	r0, [pc, #32]	; (8001f34 <_ZL12MX_TIM2_Initv+0xb4>)
 8001f12:	f003 f939 	bl	8005188 <HAL_TIMEx_MasterConfigSynchronization>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf14      	ite	ne
 8001f1c:	2301      	movne	r3, #1
 8001f1e:	2300      	moveq	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001f26:	f000 fa8d 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000320 	.word	0x20000320

08001f38 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3e:	f107 0308 	add.w	r3, r7, #8
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f54:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001f56:	4a25      	ldr	r2, [pc, #148]	; (8001fec <_ZL12MX_TIM3_Initv+0xb4>)
 8001f58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f5a:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f60:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f74:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f7a:	481b      	ldr	r0, [pc, #108]	; (8001fe8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001f7c:	f002 fa3e 	bl	80043fc <HAL_TIM_Base_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bf14      	ite	ne
 8001f86:	2301      	movne	r3, #1
 8001f88:	2300      	moveq	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 8001f90:	f000 fa58 	bl	8002444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f9a:	f107 0308 	add.w	r3, r7, #8
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4811      	ldr	r0, [pc, #68]	; (8001fe8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001fa2:	f002 fceb 	bl	800497c <HAL_TIM_ConfigClockSource>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf14      	ite	ne
 8001fac:	2301      	movne	r3, #1
 8001fae:	2300      	moveq	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8001fb6:	f000 fa45 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4808      	ldr	r0, [pc, #32]	; (8001fe8 <_ZL12MX_TIM3_Initv+0xb0>)
 8001fc8:	f003 f8de 	bl	8005188 <HAL_TIMEx_MasterConfigSynchronization>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	bf14      	ite	ne
 8001fd2:	2301      	movne	r3, #1
 8001fd4:	2300      	moveq	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 8001fdc:	f000 fa32 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fe0:	bf00      	nop
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000368 	.word	0x20000368
 8001fec:	40000400 	.word	0x40000400

08001ff0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002004:	463b      	mov	r3, r7
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800200c:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <_ZL12MX_TIM4_Initv+0xb0>)
 800200e:	4a25      	ldr	r2, [pc, #148]	; (80020a4 <_ZL12MX_TIM4_Initv+0xb4>)
 8002010:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 8002012:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <_ZL12MX_TIM4_Initv+0xb0>)
 8002014:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002018:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201a:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <_ZL12MX_TIM4_Initv+0xb0>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10 - 1;
 8002020:	4b1f      	ldr	r3, [pc, #124]	; (80020a0 <_ZL12MX_TIM4_Initv+0xb0>)
 8002022:	2209      	movs	r2, #9
 8002024:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002026:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <_ZL12MX_TIM4_Initv+0xb0>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202c:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <_ZL12MX_TIM4_Initv+0xb0>)
 800202e:	2200      	movs	r2, #0
 8002030:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002032:	481b      	ldr	r0, [pc, #108]	; (80020a0 <_ZL12MX_TIM4_Initv+0xb0>)
 8002034:	f002 f9e2 	bl	80043fc <HAL_TIM_Base_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	bf14      	ite	ne
 800203e:	2301      	movne	r3, #1
 8002040:	2300      	moveq	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8002048:	f000 f9fc 	bl	8002444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800204c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002050:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	4619      	mov	r1, r3
 8002058:	4811      	ldr	r0, [pc, #68]	; (80020a0 <_ZL12MX_TIM4_Initv+0xb0>)
 800205a:	f002 fc8f 	bl	800497c <HAL_TIM_ConfigClockSource>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf14      	ite	ne
 8002064:	2301      	movne	r3, #1
 8002066:	2300      	moveq	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 800206e:	f000 f9e9 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800207a:	463b      	mov	r3, r7
 800207c:	4619      	mov	r1, r3
 800207e:	4808      	ldr	r0, [pc, #32]	; (80020a0 <_ZL12MX_TIM4_Initv+0xb0>)
 8002080:	f003 f882 	bl	8005188 <HAL_TIMEx_MasterConfigSynchronization>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	bf14      	ite	ne
 800208a:	2301      	movne	r3, #1
 800208c:	2300      	moveq	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8002094:	f000 f9d6 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002098:	bf00      	nop
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	200003b0 	.word	0x200003b0
 80020a4:	40000800 	.word	0x40000800

080020a8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80020ae:	4a14      	ldr	r2, [pc, #80]	; (8002100 <_ZL19MX_USART1_UART_Initv+0x58>)
 80020b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80020b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80020ce:	220c      	movs	r2, #12
 80020d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020de:	4807      	ldr	r0, [pc, #28]	; (80020fc <_ZL19MX_USART1_UART_Initv+0x54>)
 80020e0:	f003 f937 	bl	8005352 <HAL_UART_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf14      	ite	ne
 80020ea:	2301      	movne	r3, #1
 80020ec:	2300      	moveq	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80020f4:	f000 f9a6 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	200003f8 	.word	0x200003f8
 8002100:	40013800 	.word	0x40013800

08002104 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002118:	4b4f      	ldr	r3, [pc, #316]	; (8002258 <_ZL12MX_GPIO_Initv+0x154>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a4e      	ldr	r2, [pc, #312]	; (8002258 <_ZL12MX_GPIO_Initv+0x154>)
 800211e:	f043 0310 	orr.w	r3, r3, #16
 8002122:	6193      	str	r3, [r2, #24]
 8002124:	4b4c      	ldr	r3, [pc, #304]	; (8002258 <_ZL12MX_GPIO_Initv+0x154>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002130:	4b49      	ldr	r3, [pc, #292]	; (8002258 <_ZL12MX_GPIO_Initv+0x154>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a48      	ldr	r2, [pc, #288]	; (8002258 <_ZL12MX_GPIO_Initv+0x154>)
 8002136:	f043 0320 	orr.w	r3, r3, #32
 800213a:	6193      	str	r3, [r2, #24]
 800213c:	4b46      	ldr	r3, [pc, #280]	; (8002258 <_ZL12MX_GPIO_Initv+0x154>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002148:	4b43      	ldr	r3, [pc, #268]	; (8002258 <_ZL12MX_GPIO_Initv+0x154>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	4a42      	ldr	r2, [pc, #264]	; (8002258 <_ZL12MX_GPIO_Initv+0x154>)
 800214e:	f043 0304 	orr.w	r3, r3, #4
 8002152:	6193      	str	r3, [r2, #24]
 8002154:	4b40      	ldr	r3, [pc, #256]	; (8002258 <_ZL12MX_GPIO_Initv+0x154>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002160:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <_ZL12MX_GPIO_Initv+0x154>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a3c      	ldr	r2, [pc, #240]	; (8002258 <_ZL12MX_GPIO_Initv+0x154>)
 8002166:	f043 0308 	orr.w	r3, r3, #8
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <_ZL12MX_GPIO_Initv+0x154>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800217e:	4837      	ldr	r0, [pc, #220]	; (800225c <_ZL12MX_GPIO_Initv+0x158>)
 8002180:	f001 fb5f 	bl	8003842 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG_Pin|VALVE_DIR_Pin|PUMP_EN_Pin, GPIO_PIN_RESET);
 8002184:	2200      	movs	r2, #0
 8002186:	f44f 51a1 	mov.w	r1, #5152	; 0x1420
 800218a:	4835      	ldr	r0, [pc, #212]	; (8002260 <_ZL12MX_GPIO_Initv+0x15c>)
 800218c:	f001 fb59 	bl	8003842 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8002190:	2200      	movs	r2, #0
 8002192:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 8002196:	4833      	ldr	r0, [pc, #204]	; (8002264 <_ZL12MX_GPIO_Initv+0x160>)
 8002198:	f001 fb53 	bl	8003842 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800219c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a2:	2301      	movs	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ae:	f107 0310 	add.w	r3, r7, #16
 80021b2:	4619      	mov	r1, r3
 80021b4:	4829      	ldr	r0, [pc, #164]	; (800225c <_ZL12MX_GPIO_Initv+0x158>)
 80021b6:	f001 f9a9 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : SETPOINT_BUT_Pin */
  GPIO_InitStruct.Pin = SETPOINT_BUT_Pin;
 80021ba:	2308      	movs	r3, #8
 80021bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SETPOINT_BUT_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 0310 	add.w	r3, r7, #16
 80021ca:	4619      	mov	r1, r3
 80021cc:	4825      	ldr	r0, [pc, #148]	; (8002264 <_ZL12MX_GPIO_Initv+0x160>)
 80021ce:	f001 f99d 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOW_SENSOR_Pin */
  GPIO_InitStruct.Pin = FLOW_SENSOR_Pin;
 80021d2:	2302      	movs	r3, #2
 80021d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <_ZL12MX_GPIO_Initv+0x164>)
 80021d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLOW_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	4619      	mov	r1, r3
 80021e4:	481e      	ldr	r0, [pc, #120]	; (8002260 <_ZL12MX_GPIO_Initv+0x15c>)
 80021e6:	f001 f991 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin VALVE_DIR_Pin PUMP_EN_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|VALVE_DIR_Pin|PUMP_EN_Pin;
 80021ea:	f44f 53a1 	mov.w	r3, #5152	; 0x1420
 80021ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f0:	2301      	movs	r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	2302      	movs	r3, #2
 80021fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fc:	f107 0310 	add.w	r3, r7, #16
 8002200:	4619      	mov	r1, r3
 8002202:	4817      	ldr	r0, [pc, #92]	; (8002260 <_ZL12MX_GPIO_Initv+0x15c>)
 8002204:	f001 f982 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8002208:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800220c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8002216:	f107 0310 	add.w	r3, r7, #16
 800221a:	4619      	mov	r1, r3
 800221c:	4810      	ldr	r0, [pc, #64]	; (8002260 <_ZL12MX_GPIO_Initv+0x15c>)
 800221e:	f001 f975 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8002222:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 8002226:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002228:	2301      	movs	r3, #1
 800222a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002230:	2301      	movs	r3, #1
 8002232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	4619      	mov	r1, r3
 800223a:	480a      	ldr	r0, [pc, #40]	; (8002264 <_ZL12MX_GPIO_Initv+0x160>)
 800223c:	f001 f966 	bl	800350c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	2007      	movs	r0, #7
 8002246:	f001 f92a 	bl	800349e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800224a:	2007      	movs	r0, #7
 800224c:	f001 f943 	bl	80034d6 <HAL_NVIC_EnableIRQ>

}
 8002250:	bf00      	nop
 8002252:	3720      	adds	r7, #32
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	40011000 	.word	0x40011000
 8002260:	40010c00 	.word	0x40010c00
 8002264:	40010800 	.word	0x40010800
 8002268:	10110000 	.word	0x10110000

0800226c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	if (htim == &htim4)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d125      	bne.n	80022c8 <HAL_TIM_PeriodElapsedCallback+0x5c>
	{
		flowMillisCont++;
 800227c:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002286:	801a      	strh	r2, [r3, #0]
		if (flowMillisCont >= 200)
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	2bc7      	cmp	r3, #199	; 0xc7
 800228e:	d905      	bls.n	800229c <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			calculateFlow = true;
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
			flowMillisCont = 0;
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002298:	2200      	movs	r2, #0
 800229a:	801a      	strh	r2, [r3, #0]
		}

		LCDMillisCont++;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80022a6:	801a      	strh	r2, [r3, #0]
		if (LCDMillisCont >= 1000*int(LCD_UPDATE_TIME))
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022b0:	d30a      	bcc.n	80022c8 <HAL_TIM_PeriodElapsedCallback+0x5c>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80022b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022b6:	480a      	ldr	r0, [pc, #40]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80022b8:	f001 fadb 	bl	8003872 <HAL_GPIO_TogglePin>
			updateLCD = true;
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
			LCDMillisCont = 0;
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	801a      	strh	r2, [r3, #0]
		}
	}

}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200003b0 	.word	0x200003b0
 80022d4:	200004de 	.word	0x200004de
 80022d8:	200004e2 	.word	0x200004e2
 80022dc:	200004e4 	.word	0x200004e4
 80022e0:	40011000 	.word	0x40011000
 80022e4:	2000008c 	.word	0x2000008c

080022e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == FLOW_SENSOR_Pin)
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d105      	bne.n	8002304 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		flowPulsesCont++;
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_GPIO_EXTI_Callback+0x28>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_GPIO_EXTI_Callback+0x28>)
 8002302:	801a      	strh	r2, [r3, #0]
	}
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	200004e0 	.word	0x200004e0

08002314 <_Z8sendDatav>:

void sendData()
{
 8002314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002318:	b090      	sub	sp, #64	; 0x40
 800231a:	af06      	add	r7, sp, #24
	char buffer[36];
	sprintf(buffer, "%.2f,%.2f,%.2f,%.2f\n",
					(HAL_GetTick() - startMillis)/1000.0, setpoint,
 800231c:	f000 fb8e 	bl	8002a3c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	4b22      	ldr	r3, [pc, #136]	; (80023ac <_Z8sendDatav+0x98>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	1ad3      	subs	r3, r2, r3
	sprintf(buffer, "%.2f,%.2f,%.2f,%.2f\n",
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f90f 	bl	800054c <__aeabi_ui2d>
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <_Z8sendDatav+0x9c>)
 8002334:	f7fe faae 	bl	8000894 <__aeabi_ddiv>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4692      	mov	sl, r2
 800233e:	469b      	mov	fp, r3
 8002340:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <_Z8sendDatav+0xa0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f923 	bl	8000590 <__aeabi_f2d>
 800234a:	4604      	mov	r4, r0
 800234c:	460d      	mov	r5, r1
					flowSensor.getFlowRaw(), flowSensor.getFlowFiltered());
 800234e:	481a      	ldr	r0, [pc, #104]	; (80023b8 <_Z8sendDatav+0xa4>)
 8002350:	f7fe fecb 	bl	80010ea <_ZN10FlowSensor10getFlowRawEv>
 8002354:	4603      	mov	r3, r0
	sprintf(buffer, "%.2f,%.2f,%.2f,%.2f\n",
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f91a 	bl	8000590 <__aeabi_f2d>
 800235c:	4680      	mov	r8, r0
 800235e:	4689      	mov	r9, r1
					flowSensor.getFlowRaw(), flowSensor.getFlowFiltered());
 8002360:	4815      	ldr	r0, [pc, #84]	; (80023b8 <_Z8sendDatav+0xa4>)
 8002362:	f7fe fece 	bl	8001102 <_ZN10FlowSensor15getFlowFilteredEv>
 8002366:	4603      	mov	r3, r0
	sprintf(buffer, "%.2f,%.2f,%.2f,%.2f\n",
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f911 	bl	8000590 <__aeabi_f2d>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	1d38      	adds	r0, r7, #4
 8002374:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002378:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800237c:	e9cd 4500 	strd	r4, r5, [sp]
 8002380:	4652      	mov	r2, sl
 8002382:	465b      	mov	r3, fp
 8002384:	490d      	ldr	r1, [pc, #52]	; (80023bc <_Z8sendDatav+0xa8>)
 8002386:	f003 fe3b 	bl	8006000 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 100);
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	4618      	mov	r0, r3
 800238e:	f7fd fedf 	bl	8000150 <strlen>
 8002392:	4603      	mov	r3, r0
 8002394:	b29a      	uxth	r2, r3
 8002396:	1d39      	adds	r1, r7, #4
 8002398:	2364      	movs	r3, #100	; 0x64
 800239a:	4809      	ldr	r0, [pc, #36]	; (80023c0 <_Z8sendDatav+0xac>)
 800239c:	f003 f826 	bl	80053ec <HAL_UART_Transmit>
}
 80023a0:	bf00      	nop
 80023a2:	3728      	adds	r7, #40	; 0x28
 80023a4:	46bd      	mov	sp, r7
 80023a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023aa:	bf00      	nop
 80023ac:	200004e8 	.word	0x200004e8
 80023b0:	408f4000 	.word	0x408f4000
 80023b4:	200004d4 	.word	0x200004d4
 80023b8:	2000043c 	.word	0x2000043c
 80023bc:	08008528 	.word	0x08008528
 80023c0:	200003f8 	.word	0x200003f8

080023c4 <_Z10closeValvet>:

void closeValve(uint16_t closeTime)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	80fb      	strh	r3, [r7, #6]
	//lcd16x2_clear();
	//lcd16x2_2ndLine();
	//lcd16x2_printf("Fechando %d", closeTime);
	HAL_GPIO_WritePin(VALVE_DIR_GPIO_Port, VALVE_DIR_Pin, GPIO_PIN_RESET);
 80023ce:	2200      	movs	r2, #0
 80023d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023d4:	4809      	ldr	r0, [pc, #36]	; (80023fc <_Z10closeValvet+0x38>)
 80023d6:	f001 fa34 	bl	8003842 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 625);
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <_Z10closeValvet+0x3c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f240 2271 	movw	r2, #625	; 0x271
 80023e2:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(closeTime);
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fb32 	bl	8002a50 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <_Z10closeValvet+0x3c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2200      	movs	r2, #0
 80023f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40010c00 	.word	0x40010c00
 8002400:	200002d8 	.word	0x200002d8

08002404 <_Z9openValvet>:

void openValve(uint16_t openTime)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	80fb      	strh	r3, [r7, #6]
	//lcd16x2_clear();
	//lcd16x2_2ndLine();
	//lcd16x2_printf("Abrindo %d", openTime);
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 625);
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <_Z9openValvet+0x38>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f240 2271 	movw	r2, #625	; 0x271
 8002416:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(VALVE_DIR_GPIO_Port, VALVE_DIR_Pin, GPIO_PIN_SET);
 8002418:	2201      	movs	r2, #1
 800241a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800241e:	4808      	ldr	r0, [pc, #32]	; (8002440 <_Z9openValvet+0x3c>)
 8002420:	f001 fa0f 	bl	8003842 <HAL_GPIO_WritePin>
	HAL_Delay(openTime);
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fb12 	bl	8002a50 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <_Z9openValvet+0x38>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2200      	movs	r2, #0
 8002432:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200002d8 	.word	0x200002d8
 8002440:	40010c00 	.word	0x40010c00

08002444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002448:	b672      	cpsid	i
}
 800244a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800244c:	e7fe      	b.n	800244c <Error_Handler+0x8>
	...

08002450 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d107      	bne.n	8002470 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002466:	4293      	cmp	r3, r2
 8002468:	d102      	bne.n	8002470 <_Z41__static_initialization_and_destruction_0ii+0x20>
FlowSensor flowSensor;
 800246a:	4803      	ldr	r0, [pc, #12]	; (8002478 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800246c:	f7fe fe30 	bl	80010d0 <_ZN10FlowSensorC1Ev>
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	2000043c 	.word	0x2000043c

0800247c <_GLOBAL__sub_I__Z18lcd16x2_init_8bitsP12GPIO_TypeDefttS0_ttttS0_tttt>:
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
 8002480:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002484:	2001      	movs	r0, #1
 8002486:	f7ff ffe3 	bl	8002450 <_Z41__static_initialization_and_destruction_0ii>
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HAL_MspInit+0x5c>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <HAL_MspInit+0x5c>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6193      	str	r3, [r2, #24]
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_MspInit+0x5c>)
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HAL_MspInit+0x5c>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <HAL_MspInit+0x5c>)
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b4:	61d3      	str	r3, [r2, #28]
 80024b6:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <HAL_MspInit+0x5c>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_MspInit+0x60>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	4a04      	ldr	r2, [pc, #16]	; (80024ec <HAL_MspInit+0x60>)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40010000 	.word	0x40010000

080024f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a14      	ldr	r2, [pc, #80]	; (800255c <HAL_ADC_MspInit+0x6c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d121      	bne.n	8002554 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002510:	4b13      	ldr	r3, [pc, #76]	; (8002560 <HAL_ADC_MspInit+0x70>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	4a12      	ldr	r2, [pc, #72]	; (8002560 <HAL_ADC_MspInit+0x70>)
 8002516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800251a:	6193      	str	r3, [r2, #24]
 800251c:	4b10      	ldr	r3, [pc, #64]	; (8002560 <HAL_ADC_MspInit+0x70>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_ADC_MspInit+0x70>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4a0c      	ldr	r2, [pc, #48]	; (8002560 <HAL_ADC_MspInit+0x70>)
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	6193      	str	r3, [r2, #24]
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_ADC_MspInit+0x70>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = SETPOINT_POT_Pin;
 8002540:	2301      	movs	r3, #1
 8002542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002544:	2303      	movs	r3, #3
 8002546:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SETPOINT_POT_GPIO_Port, &GPIO_InitStruct);
 8002548:	f107 0310 	add.w	r3, r7, #16
 800254c:	4619      	mov	r1, r3
 800254e:	4805      	ldr	r0, [pc, #20]	; (8002564 <HAL_ADC_MspInit+0x74>)
 8002550:	f000 ffdc 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002554:	bf00      	nop
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40012400 	.word	0x40012400
 8002560:	40021000 	.word	0x40021000
 8002564:	40010800 	.word	0x40010800

08002568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a28      	ldr	r2, [pc, #160]	; (8002618 <HAL_TIM_Base_MspInit+0xb0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10c      	bne.n	8002594 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800257a:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_TIM_Base_MspInit+0xb4>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	4a27      	ldr	r2, [pc, #156]	; (800261c <HAL_TIM_Base_MspInit+0xb4>)
 8002580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002584:	6193      	str	r3, [r2, #24]
 8002586:	4b25      	ldr	r3, [pc, #148]	; (800261c <HAL_TIM_Base_MspInit+0xb4>)
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002592:	e03c      	b.n	800260e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259c:	d10c      	bne.n	80025b8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800259e:	4b1f      	ldr	r3, [pc, #124]	; (800261c <HAL_TIM_Base_MspInit+0xb4>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4a1e      	ldr	r2, [pc, #120]	; (800261c <HAL_TIM_Base_MspInit+0xb4>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	61d3      	str	r3, [r2, #28]
 80025aa:	4b1c      	ldr	r3, [pc, #112]	; (800261c <HAL_TIM_Base_MspInit+0xb4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]
}
 80025b6:	e02a      	b.n	800260e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a18      	ldr	r2, [pc, #96]	; (8002620 <HAL_TIM_Base_MspInit+0xb8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10c      	bne.n	80025dc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <HAL_TIM_Base_MspInit+0xb4>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a15      	ldr	r2, [pc, #84]	; (800261c <HAL_TIM_Base_MspInit+0xb4>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	61d3      	str	r3, [r2, #28]
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <HAL_TIM_Base_MspInit+0xb4>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
}
 80025da:	e018      	b.n	800260e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a10      	ldr	r2, [pc, #64]	; (8002624 <HAL_TIM_Base_MspInit+0xbc>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d113      	bne.n	800260e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <HAL_TIM_Base_MspInit+0xb4>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4a0c      	ldr	r2, [pc, #48]	; (800261c <HAL_TIM_Base_MspInit+0xb4>)
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	61d3      	str	r3, [r2, #28]
 80025f2:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_TIM_Base_MspInit+0xb4>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	201e      	movs	r0, #30
 8002604:	f000 ff4b 	bl	800349e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002608:	201e      	movs	r0, #30
 800260a:	f000 ff64 	bl	80034d6 <HAL_NVIC_EnableIRQ>
}
 800260e:	bf00      	nop
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40012c00 	.word	0x40012c00
 800261c:	40021000 	.word	0x40021000
 8002620:	40000400 	.word	0x40000400
 8002624:	40000800 	.word	0x40000800

08002628 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 0310 	add.w	r3, r7, #16
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a10      	ldr	r2, [pc, #64]	; (8002684 <HAL_TIM_MspPostInit+0x5c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d118      	bne.n	800267a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_TIM_MspPostInit+0x60>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	4a0e      	ldr	r2, [pc, #56]	; (8002688 <HAL_TIM_MspPostInit+0x60>)
 800264e:	f043 0308 	orr.w	r3, r3, #8
 8002652:	6193      	str	r3, [r2, #24]
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <HAL_TIM_MspPostInit+0x60>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = VALVE_PWM_Pin|PUMP_PWM_Pin;
 8002660:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002664:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266a:	2302      	movs	r3, #2
 800266c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266e:	f107 0310 	add.w	r3, r7, #16
 8002672:	4619      	mov	r1, r3
 8002674:	4805      	ldr	r0, [pc, #20]	; (800268c <HAL_TIM_MspPostInit+0x64>)
 8002676:	f000 ff49 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800267a:	bf00      	nop
 800267c:	3720      	adds	r7, #32
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40012c00 	.word	0x40012c00
 8002688:	40021000 	.word	0x40021000
 800268c:	40010c00 	.word	0x40010c00

08002690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08a      	sub	sp, #40	; 0x28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a22      	ldr	r2, [pc, #136]	; (8002734 <HAL_UART_MspInit+0xa4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d13d      	bne.n	800272c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026b0:	4b21      	ldr	r3, [pc, #132]	; (8002738 <HAL_UART_MspInit+0xa8>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	4a20      	ldr	r2, [pc, #128]	; (8002738 <HAL_UART_MspInit+0xa8>)
 80026b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ba:	6193      	str	r3, [r2, #24]
 80026bc:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <HAL_UART_MspInit+0xa8>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_UART_MspInit+0xa8>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <HAL_UART_MspInit+0xa8>)
 80026ce:	f043 0308 	orr.w	r3, r3, #8
 80026d2:	6193      	str	r3, [r2, #24]
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_UART_MspInit+0xa8>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026e0:	2340      	movs	r3, #64	; 0x40
 80026e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	4619      	mov	r1, r3
 80026f2:	4812      	ldr	r0, [pc, #72]	; (800273c <HAL_UART_MspInit+0xac>)
 80026f4:	f000 ff0a 	bl	800350c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4619      	mov	r1, r3
 800270a:	480c      	ldr	r0, [pc, #48]	; (800273c <HAL_UART_MspInit+0xac>)
 800270c:	f000 fefe 	bl	800350c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_UART_MspInit+0xb0>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
 8002726:	4a06      	ldr	r2, [pc, #24]	; (8002740 <HAL_UART_MspInit+0xb0>)
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800272c:	bf00      	nop
 800272e:	3728      	adds	r7, #40	; 0x28
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40013800 	.word	0x40013800
 8002738:	40021000 	.word	0x40021000
 800273c:	40010c00 	.word	0x40010c00
 8002740:	40010000 	.word	0x40010000

08002744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <NMI_Handler+0x4>

0800274a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800274e:	e7fe      	b.n	800274e <HardFault_Handler+0x4>

08002750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <MemManage_Handler+0x4>

08002756 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275a:	e7fe      	b.n	800275a <BusFault_Handler+0x4>

0800275c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <UsageFault_Handler+0x4>

08002762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800278a:	f000 f945 	bl	8002a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}

08002792 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002796:	2002      	movs	r0, #2
 8002798:	f001 f884 	bl	80038a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}

080027a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <TIM4_IRQHandler+0x10>)
 80027a6:	f001 ff23 	bl	80045f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200003b0 	.word	0x200003b0

080027b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
	return 1;
 80027b8:	2301      	movs	r3, #1
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <_kill>:

int _kill(int pid, int sig)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027cc:	f002 ff78 	bl	80056c0 <__errno>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2216      	movs	r2, #22
 80027d4:	601a      	str	r2, [r3, #0]
	return -1;
 80027d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <_exit>:

void _exit (int status)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff ffe7 	bl	80027c2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027f4:	e7fe      	b.n	80027f4 <_exit+0x12>

080027f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	e00a      	b.n	800281e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002808:	f3af 8000 	nop.w
 800280c:	4601      	mov	r1, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	60ba      	str	r2, [r7, #8]
 8002814:	b2ca      	uxtb	r2, r1
 8002816:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	3301      	adds	r3, #1
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	429a      	cmp	r2, r3
 8002824:	dbf0      	blt.n	8002808 <_read+0x12>
	}

return len;
 8002826:	687b      	ldr	r3, [r7, #4]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	e009      	b.n	8002856 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	60ba      	str	r2, [r7, #8]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3301      	adds	r3, #1
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	dbf1      	blt.n	8002842 <_write+0x12>
	}
	return len;
 800285e:	687b      	ldr	r3, [r7, #4]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <_close>:

int _close(int file)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	return -1;
 8002870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800288e:	605a      	str	r2, [r3, #4]
	return 0;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <_isatty>:

int _isatty(int file)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	return 1;
 80028a4:	2301      	movs	r3, #1
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
	return 0;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028d0:	4a14      	ldr	r2, [pc, #80]	; (8002924 <_sbrk+0x5c>)
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <_sbrk+0x60>)
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <_sbrk+0x64>)
 80028e6:	4a12      	ldr	r2, [pc, #72]	; (8002930 <_sbrk+0x68>)
 80028e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d207      	bcs.n	8002908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f8:	f002 fee2 	bl	80056c0 <__errno>
 80028fc:	4603      	mov	r3, r0
 80028fe:	220c      	movs	r2, #12
 8002900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002906:	e009      	b.n	800291c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <_sbrk+0x64>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <_sbrk+0x64>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	4a05      	ldr	r2, [pc, #20]	; (800292c <_sbrk+0x64>)
 8002918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20005000 	.word	0x20005000
 8002928:	00000400 	.word	0x00000400
 800292c:	200004f0 	.word	0x200004f0
 8002930:	20000510 	.word	0x20000510

08002934 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002940:	480c      	ldr	r0, [pc, #48]	; (8002974 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002942:	490d      	ldr	r1, [pc, #52]	; (8002978 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002944:	4a0d      	ldr	r2, [pc, #52]	; (800297c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002948:	e002      	b.n	8002950 <LoopCopyDataInit>

0800294a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800294a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800294c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294e:	3304      	adds	r3, #4

08002950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002954:	d3f9      	bcc.n	800294a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002956:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002958:	4c0a      	ldr	r4, [pc, #40]	; (8002984 <LoopFillZerobss+0x22>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800295c:	e001      	b.n	8002962 <LoopFillZerobss>

0800295e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002960:	3204      	adds	r2, #4

08002962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002964:	d3fb      	bcc.n	800295e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002966:	f7ff ffe5 	bl	8002934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800296a:	f002 feaf 	bl	80056cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800296e:	f7fe fedb 	bl	8001728 <main>
  bx lr
 8002972:	4770      	bx	lr
  ldr r0, =_sdata
 8002974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002978:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 800297c:	08008968 	.word	0x08008968
  ldr r2, =_sbss
 8002980:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8002984:	20000510 	.word	0x20000510

08002988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002988:	e7fe      	b.n	8002988 <ADC1_2_IRQHandler>
	...

0800298c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_Init+0x28>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <HAL_Init+0x28>)
 8002996:	f043 0310 	orr.w	r3, r3, #16
 800299a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299c:	2003      	movs	r0, #3
 800299e:	f000 fd73 	bl	8003488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029a2:	200f      	movs	r0, #15
 80029a4:	f000 f808 	bl	80029b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a8:	f7ff fd70 	bl	800248c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40022000 	.word	0x40022000

080029b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_InitTick+0x54>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_InitTick+0x58>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	4619      	mov	r1, r3
 80029ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80029d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fd8b 	bl	80034f2 <HAL_SYSTICK_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e00e      	b.n	8002a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b0f      	cmp	r3, #15
 80029ea:	d80a      	bhi.n	8002a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029ec:	2200      	movs	r2, #0
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029f4:	f000 fd53 	bl	800349e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f8:	4a06      	ldr	r2, [pc, #24]	; (8002a14 <HAL_InitTick+0x5c>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
 8002a00:	e000      	b.n	8002a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000090 	.word	0x20000090
 8002a10:	20000098 	.word	0x20000098
 8002a14:	20000094 	.word	0x20000094

08002a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_IncTick+0x1c>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_IncTick+0x20>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	4a03      	ldr	r2, [pc, #12]	; (8002a38 <HAL_IncTick+0x20>)
 8002a2a:	6013      	str	r3, [r2, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	20000098 	.word	0x20000098
 8002a38:	200004fc 	.word	0x200004fc

08002a3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a40:	4b02      	ldr	r3, [pc, #8]	; (8002a4c <HAL_GetTick+0x10>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	200004fc 	.word	0x200004fc

08002a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7ff fff0 	bl	8002a3c <HAL_GetTick>
 8002a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a68:	d005      	beq.n	8002a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_Delay+0x44>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4413      	add	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a76:	bf00      	nop
 8002a78:	f7ff ffe0 	bl	8002a3c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d8f7      	bhi.n	8002a78 <HAL_Delay+0x28>
  {
  }
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000098 	.word	0x20000098

08002a98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0be      	b.n	8002c38 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d109      	bne.n	8002adc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff fd0a 	bl	80024f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fbc5 	bl	800326c <ADC_ConversionStop_Disable>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 8099 	bne.w	8002c26 <HAL_ADC_Init+0x18e>
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 8095 	bne.w	8002c26 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b04:	f023 0302 	bic.w	r3, r3, #2
 8002b08:	f043 0202 	orr.w	r2, r3, #2
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	7b1b      	ldrb	r3, [r3, #12]
 8002b1e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b20:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b30:	d003      	beq.n	8002b3a <HAL_ADC_Init+0xa2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d102      	bne.n	8002b40 <HAL_ADC_Init+0xa8>
 8002b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b3e:	e000      	b.n	8002b42 <HAL_ADC_Init+0xaa>
 8002b40:	2300      	movs	r3, #0
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7d1b      	ldrb	r3, [r3, #20]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d119      	bne.n	8002b84 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7b1b      	ldrb	r3, [r3, #12]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	035a      	lsls	r2, r3, #13
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	e00b      	b.n	8002b84 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_ADC_Init+0x1a8>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb4:	d003      	beq.n	8002bbe <HAL_ADC_Init+0x126>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d104      	bne.n	8002bc8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	051b      	lsls	r3, r3, #20
 8002bc6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <HAL_ADC_Init+0x1ac>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d10b      	bne.n	8002c04 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	f023 0303 	bic.w	r3, r3, #3
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c02:	e018      	b.n	8002c36 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	f023 0312 	bic.w	r3, r3, #18
 8002c0c:	f043 0210 	orr.w	r2, r3, #16
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c24:	e007      	b.n	8002c36 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	f043 0210 	orr.w	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	ffe1f7fd 	.word	0xffe1f7fd
 8002c44:	ff1f0efe 	.word	0xff1f0efe

08002c48 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_ADC_Start+0x1a>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e098      	b.n	8002d94 <HAL_ADC_Start+0x14c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 faa4 	bl	80031b8 <ADC_Enable>
 8002c70:	4603      	mov	r3, r0
 8002c72:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f040 8087 	bne.w	8002d8a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a41      	ldr	r2, [pc, #260]	; (8002d9c <HAL_ADC_Start+0x154>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d105      	bne.n	8002ca6 <HAL_ADC_Start+0x5e>
 8002c9a:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_ADC_Start+0x158>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d115      	bne.n	8002cd2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d026      	beq.n	8002d0e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cc8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cd0:	e01d      	b.n	8002d0e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a2f      	ldr	r2, [pc, #188]	; (8002da0 <HAL_ADC_Start+0x158>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d004      	beq.n	8002cf2 <HAL_ADC_Start+0xaa>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a2b      	ldr	r2, [pc, #172]	; (8002d9c <HAL_ADC_Start+0x154>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d10d      	bne.n	8002d0e <HAL_ADC_Start+0xc6>
 8002cf2:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <HAL_ADC_Start+0x158>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d006      	beq.n	8002d28 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1e:	f023 0206 	bic.w	r2, r3, #6
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d26:	e002      	b.n	8002d2e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f06f 0202 	mvn.w	r2, #2
 8002d3e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d4a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d4e:	d113      	bne.n	8002d78 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d54:	4a11      	ldr	r2, [pc, #68]	; (8002d9c <HAL_ADC_Start+0x154>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d105      	bne.n	8002d66 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002d5a:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_ADC_Start+0x158>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d108      	bne.n	8002d78 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d74:	609a      	str	r2, [r3, #8]
 8002d76:	e00c      	b.n	8002d92 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	e003      	b.n	8002d92 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40012800 	.word	0x40012800
 8002da0:	40012400 	.word	0x40012400

08002da4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dba:	f7ff fe3f 	bl	8002a3c <HAL_GetTick>
 8002dbe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	f043 0220 	orr.w	r2, r3, #32
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0d3      	b.n	8002f8e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d131      	bne.n	8002e58 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d12a      	bne.n	8002e58 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e02:	e021      	b.n	8002e48 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e0a:	d01d      	beq.n	8002e48 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <HAL_ADC_PollForConversion+0x7e>
 8002e12:	f7ff fe13 	bl	8002a3c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d212      	bcs.n	8002e48 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10b      	bne.n	8002e48 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	f043 0204 	orr.w	r2, r3, #4
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e0a2      	b.n	8002f8e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0d6      	beq.n	8002e04 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002e56:	e070      	b.n	8002f3a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002e58:	4b4f      	ldr	r3, [pc, #316]	; (8002f98 <HAL_ADC_PollForConversion+0x1f4>)
 8002e5a:	681c      	ldr	r4, [r3, #0]
 8002e5c:	2002      	movs	r0, #2
 8002e5e:	f001 fa09 	bl	8004274 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e62:	4603      	mov	r3, r0
 8002e64:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6919      	ldr	r1, [r3, #16]
 8002e6e:	4b4b      	ldr	r3, [pc, #300]	; (8002f9c <HAL_ADC_PollForConversion+0x1f8>)
 8002e70:	400b      	ands	r3, r1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d118      	bne.n	8002ea8 <HAL_ADC_PollForConversion+0x104>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68d9      	ldr	r1, [r3, #12]
 8002e7c:	4b48      	ldr	r3, [pc, #288]	; (8002fa0 <HAL_ADC_PollForConversion+0x1fc>)
 8002e7e:	400b      	ands	r3, r1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <HAL_ADC_PollForConversion+0x104>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6919      	ldr	r1, [r3, #16]
 8002e8a:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <HAL_ADC_PollForConversion+0x200>)
 8002e8c:	400b      	ands	r3, r1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <HAL_ADC_PollForConversion+0x100>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68d9      	ldr	r1, [r3, #12]
 8002e98:	4b43      	ldr	r3, [pc, #268]	; (8002fa8 <HAL_ADC_PollForConversion+0x204>)
 8002e9a:	400b      	ands	r3, r1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_ADC_PollForConversion+0x100>
 8002ea0:	2314      	movs	r3, #20
 8002ea2:	e020      	b.n	8002ee6 <HAL_ADC_PollForConversion+0x142>
 8002ea4:	2329      	movs	r3, #41	; 0x29
 8002ea6:	e01e      	b.n	8002ee6 <HAL_ADC_PollForConversion+0x142>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6919      	ldr	r1, [r3, #16]
 8002eae:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <HAL_ADC_PollForConversion+0x200>)
 8002eb0:	400b      	ands	r3, r1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_ADC_PollForConversion+0x120>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68d9      	ldr	r1, [r3, #12]
 8002ebc:	4b3a      	ldr	r3, [pc, #232]	; (8002fa8 <HAL_ADC_PollForConversion+0x204>)
 8002ebe:	400b      	ands	r3, r1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_ADC_PollForConversion+0x13c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6919      	ldr	r1, [r3, #16]
 8002eca:	4b38      	ldr	r3, [pc, #224]	; (8002fac <HAL_ADC_PollForConversion+0x208>)
 8002ecc:	400b      	ands	r3, r1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d108      	bne.n	8002ee4 <HAL_ADC_PollForConversion+0x140>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68d9      	ldr	r1, [r3, #12]
 8002ed8:	4b34      	ldr	r3, [pc, #208]	; (8002fac <HAL_ADC_PollForConversion+0x208>)
 8002eda:	400b      	ands	r3, r1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_ADC_PollForConversion+0x140>
 8002ee0:	2354      	movs	r3, #84	; 0x54
 8002ee2:	e000      	b.n	8002ee6 <HAL_ADC_PollForConversion+0x142>
 8002ee4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002eec:	e021      	b.n	8002f32 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef4:	d01a      	beq.n	8002f2c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <HAL_ADC_PollForConversion+0x168>
 8002efc:	f7ff fd9e 	bl	8002a3c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d20f      	bcs.n	8002f2c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d90b      	bls.n	8002f2c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	f043 0204 	orr.w	r2, r3, #4
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e030      	b.n	8002f8e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d8d9      	bhi.n	8002eee <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f06f 0212 	mvn.w	r2, #18
 8002f42:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f5e:	d115      	bne.n	8002f8c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d111      	bne.n	8002f8c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	f043 0201 	orr.w	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd90      	pop	{r4, r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000090 	.word	0x20000090
 8002f9c:	24924924 	.word	0x24924924
 8002fa0:	00924924 	.word	0x00924924
 8002fa4:	12492492 	.word	0x12492492
 8002fa8:	00492492 	.word	0x00492492
 8002fac:	00249249 	.word	0x00249249

08002fb0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x20>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e0dc      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x1da>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b06      	cmp	r3, #6
 8002ff6:	d81c      	bhi.n	8003032 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	3b05      	subs	r3, #5
 800300a:	221f      	movs	r2, #31
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	4019      	ands	r1, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	3b05      	subs	r3, #5
 8003024:	fa00 f203 	lsl.w	r2, r0, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	635a      	str	r2, [r3, #52]	; 0x34
 8003030:	e03c      	b.n	80030ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b0c      	cmp	r3, #12
 8003038:	d81c      	bhi.n	8003074 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	3b23      	subs	r3, #35	; 0x23
 800304c:	221f      	movs	r2, #31
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	4019      	ands	r1, r3
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	3b23      	subs	r3, #35	; 0x23
 8003066:	fa00 f203 	lsl.w	r2, r0, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
 8003072:	e01b      	b.n	80030ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	3b41      	subs	r3, #65	; 0x41
 8003086:	221f      	movs	r2, #31
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	4019      	ands	r1, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	3b41      	subs	r3, #65	; 0x41
 80030a0:	fa00 f203 	lsl.w	r2, r0, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b09      	cmp	r3, #9
 80030b2:	d91c      	bls.n	80030ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68d9      	ldr	r1, [r3, #12]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	3b1e      	subs	r3, #30
 80030c6:	2207      	movs	r2, #7
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	4019      	ands	r1, r3
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6898      	ldr	r0, [r3, #8]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	3b1e      	subs	r3, #30
 80030e0:	fa00 f203 	lsl.w	r2, r0, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	60da      	str	r2, [r3, #12]
 80030ec:	e019      	b.n	8003122 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6919      	ldr	r1, [r3, #16]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	2207      	movs	r2, #7
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	4019      	ands	r1, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6898      	ldr	r0, [r3, #8]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	fa00 f203 	lsl.w	r2, r0, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b10      	cmp	r3, #16
 8003128:	d003      	beq.n	8003132 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800312e:	2b11      	cmp	r3, #17
 8003130:	d132      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1d      	ldr	r2, [pc, #116]	; (80031ac <HAL_ADC_ConfigChannel+0x1e4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d125      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d126      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003158:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b10      	cmp	r3, #16
 8003160:	d11a      	bne.n	8003198 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003168:	fba2 2303 	umull	r2, r3, r2, r3
 800316c:	0c9a      	lsrs	r2, r3, #18
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003178:	e002      	b.n	8003180 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	3b01      	subs	r3, #1
 800317e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f9      	bne.n	800317a <HAL_ADC_ConfigChannel+0x1b2>
 8003186:	e007      	b.n	8003198 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	f043 0220 	orr.w	r2, r3, #32
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	40012400 	.word	0x40012400
 80031b0:	20000090 	.word	0x20000090
 80031b4:	431bde83 	.word	0x431bde83

080031b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d040      	beq.n	8003258 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031e6:	4b1f      	ldr	r3, [pc, #124]	; (8003264 <ADC_Enable+0xac>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <ADC_Enable+0xb0>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	0c9b      	lsrs	r3, r3, #18
 80031f2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031f4:	e002      	b.n	80031fc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f9      	bne.n	80031f6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003202:	f7ff fc1b 	bl	8002a3c <HAL_GetTick>
 8003206:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003208:	e01f      	b.n	800324a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800320a:	f7ff fc17 	bl	8002a3c <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d918      	bls.n	800324a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d011      	beq.n	800324a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	f043 0210 	orr.w	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	f043 0201 	orr.w	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e007      	b.n	800325a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d1d8      	bne.n	800320a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000090 	.word	0x20000090
 8003268:	431bde83 	.word	0x431bde83

0800326c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d12e      	bne.n	80032e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0201 	bic.w	r2, r2, #1
 8003294:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003296:	f7ff fbd1 	bl	8002a3c <HAL_GetTick>
 800329a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800329c:	e01b      	b.n	80032d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800329e:	f7ff fbcd 	bl	8002a3c <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d914      	bls.n	80032d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d10d      	bne.n	80032d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	f043 0210 	orr.w	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	f043 0201 	orr.w	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e007      	b.n	80032e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d0dc      	beq.n	800329e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <__NVIC_SetPriorityGrouping+0x44>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800330c:	4013      	ands	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800331c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003322:	4a04      	ldr	r2, [pc, #16]	; (8003334 <__NVIC_SetPriorityGrouping+0x44>)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	60d3      	str	r3, [r2, #12]
}
 8003328:	bf00      	nop
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800333c:	4b04      	ldr	r3, [pc, #16]	; (8003350 <__NVIC_GetPriorityGrouping+0x18>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	0a1b      	lsrs	r3, r3, #8
 8003342:	f003 0307 	and.w	r3, r3, #7
}
 8003346:	4618      	mov	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	2b00      	cmp	r3, #0
 8003364:	db0b      	blt.n	800337e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	f003 021f 	and.w	r2, r3, #31
 800336c:	4906      	ldr	r1, [pc, #24]	; (8003388 <__NVIC_EnableIRQ+0x34>)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	095b      	lsrs	r3, r3, #5
 8003374:	2001      	movs	r0, #1
 8003376:	fa00 f202 	lsl.w	r2, r0, r2
 800337a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	e000e100 	.word	0xe000e100

0800338c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	6039      	str	r1, [r7, #0]
 8003396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339c:	2b00      	cmp	r3, #0
 800339e:	db0a      	blt.n	80033b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	490c      	ldr	r1, [pc, #48]	; (80033d8 <__NVIC_SetPriority+0x4c>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	440b      	add	r3, r1
 80033b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b4:	e00a      	b.n	80033cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <__NVIC_SetPriority+0x50>)
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	3b04      	subs	r3, #4
 80033c4:	0112      	lsls	r2, r2, #4
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	440b      	add	r3, r1
 80033ca:	761a      	strb	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000e100 	.word	0xe000e100
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	; 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f1c3 0307 	rsb	r3, r3, #7
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	bf28      	it	cs
 80033fe:	2304      	movcs	r3, #4
 8003400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3304      	adds	r3, #4
 8003406:	2b06      	cmp	r3, #6
 8003408:	d902      	bls.n	8003410 <NVIC_EncodePriority+0x30>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3b03      	subs	r3, #3
 800340e:	e000      	b.n	8003412 <NVIC_EncodePriority+0x32>
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003414:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43da      	mvns	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	401a      	ands	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003428:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	43d9      	mvns	r1, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003438:	4313      	orrs	r3, r2
         );
}
 800343a:	4618      	mov	r0, r3
 800343c:	3724      	adds	r7, #36	; 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr

08003444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3b01      	subs	r3, #1
 8003450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003454:	d301      	bcc.n	800345a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003456:	2301      	movs	r3, #1
 8003458:	e00f      	b.n	800347a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345a:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <SysTick_Config+0x40>)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3b01      	subs	r3, #1
 8003460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003462:	210f      	movs	r1, #15
 8003464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003468:	f7ff ff90 	bl	800338c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <SysTick_Config+0x40>)
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003472:	4b04      	ldr	r3, [pc, #16]	; (8003484 <SysTick_Config+0x40>)
 8003474:	2207      	movs	r2, #7
 8003476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	e000e010 	.word	0xe000e010

08003488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff2d 	bl	80032f0 <__NVIC_SetPriorityGrouping>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034b0:	f7ff ff42 	bl	8003338 <__NVIC_GetPriorityGrouping>
 80034b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	6978      	ldr	r0, [r7, #20]
 80034bc:	f7ff ff90 	bl	80033e0 <NVIC_EncodePriority>
 80034c0:	4602      	mov	r2, r0
 80034c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c6:	4611      	mov	r1, r2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ff5f 	bl	800338c <__NVIC_SetPriority>
}
 80034ce:	bf00      	nop
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4603      	mov	r3, r0
 80034de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff ff35 	bl	8003354 <__NVIC_EnableIRQ>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ffa2 	bl	8003444 <SysTick_Config>
 8003500:	4603      	mov	r3, r0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800350c:	b480      	push	{r7}
 800350e:	b08b      	sub	sp, #44	; 0x2c
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003516:	2300      	movs	r3, #0
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800351a:	2300      	movs	r3, #0
 800351c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800351e:	e169      	b.n	80037f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003520:	2201      	movs	r2, #1
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	429a      	cmp	r2, r3
 800353a:	f040 8158 	bne.w	80037ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4a9a      	ldr	r2, [pc, #616]	; (80037ac <HAL_GPIO_Init+0x2a0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d05e      	beq.n	8003606 <HAL_GPIO_Init+0xfa>
 8003548:	4a98      	ldr	r2, [pc, #608]	; (80037ac <HAL_GPIO_Init+0x2a0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d875      	bhi.n	800363a <HAL_GPIO_Init+0x12e>
 800354e:	4a98      	ldr	r2, [pc, #608]	; (80037b0 <HAL_GPIO_Init+0x2a4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d058      	beq.n	8003606 <HAL_GPIO_Init+0xfa>
 8003554:	4a96      	ldr	r2, [pc, #600]	; (80037b0 <HAL_GPIO_Init+0x2a4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d86f      	bhi.n	800363a <HAL_GPIO_Init+0x12e>
 800355a:	4a96      	ldr	r2, [pc, #600]	; (80037b4 <HAL_GPIO_Init+0x2a8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d052      	beq.n	8003606 <HAL_GPIO_Init+0xfa>
 8003560:	4a94      	ldr	r2, [pc, #592]	; (80037b4 <HAL_GPIO_Init+0x2a8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d869      	bhi.n	800363a <HAL_GPIO_Init+0x12e>
 8003566:	4a94      	ldr	r2, [pc, #592]	; (80037b8 <HAL_GPIO_Init+0x2ac>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d04c      	beq.n	8003606 <HAL_GPIO_Init+0xfa>
 800356c:	4a92      	ldr	r2, [pc, #584]	; (80037b8 <HAL_GPIO_Init+0x2ac>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d863      	bhi.n	800363a <HAL_GPIO_Init+0x12e>
 8003572:	4a92      	ldr	r2, [pc, #584]	; (80037bc <HAL_GPIO_Init+0x2b0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d046      	beq.n	8003606 <HAL_GPIO_Init+0xfa>
 8003578:	4a90      	ldr	r2, [pc, #576]	; (80037bc <HAL_GPIO_Init+0x2b0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d85d      	bhi.n	800363a <HAL_GPIO_Init+0x12e>
 800357e:	2b12      	cmp	r3, #18
 8003580:	d82a      	bhi.n	80035d8 <HAL_GPIO_Init+0xcc>
 8003582:	2b12      	cmp	r3, #18
 8003584:	d859      	bhi.n	800363a <HAL_GPIO_Init+0x12e>
 8003586:	a201      	add	r2, pc, #4	; (adr r2, 800358c <HAL_GPIO_Init+0x80>)
 8003588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358c:	08003607 	.word	0x08003607
 8003590:	080035e1 	.word	0x080035e1
 8003594:	080035f3 	.word	0x080035f3
 8003598:	08003635 	.word	0x08003635
 800359c:	0800363b 	.word	0x0800363b
 80035a0:	0800363b 	.word	0x0800363b
 80035a4:	0800363b 	.word	0x0800363b
 80035a8:	0800363b 	.word	0x0800363b
 80035ac:	0800363b 	.word	0x0800363b
 80035b0:	0800363b 	.word	0x0800363b
 80035b4:	0800363b 	.word	0x0800363b
 80035b8:	0800363b 	.word	0x0800363b
 80035bc:	0800363b 	.word	0x0800363b
 80035c0:	0800363b 	.word	0x0800363b
 80035c4:	0800363b 	.word	0x0800363b
 80035c8:	0800363b 	.word	0x0800363b
 80035cc:	0800363b 	.word	0x0800363b
 80035d0:	080035e9 	.word	0x080035e9
 80035d4:	080035fd 	.word	0x080035fd
 80035d8:	4a79      	ldr	r2, [pc, #484]	; (80037c0 <HAL_GPIO_Init+0x2b4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d013      	beq.n	8003606 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035de:	e02c      	b.n	800363a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	623b      	str	r3, [r7, #32]
          break;
 80035e6:	e029      	b.n	800363c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	3304      	adds	r3, #4
 80035ee:	623b      	str	r3, [r7, #32]
          break;
 80035f0:	e024      	b.n	800363c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	3308      	adds	r3, #8
 80035f8:	623b      	str	r3, [r7, #32]
          break;
 80035fa:	e01f      	b.n	800363c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	330c      	adds	r3, #12
 8003602:	623b      	str	r3, [r7, #32]
          break;
 8003604:	e01a      	b.n	800363c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800360e:	2304      	movs	r3, #4
 8003610:	623b      	str	r3, [r7, #32]
          break;
 8003612:	e013      	b.n	800363c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d105      	bne.n	8003628 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800361c:	2308      	movs	r3, #8
 800361e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	611a      	str	r2, [r3, #16]
          break;
 8003626:	e009      	b.n	800363c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003628:	2308      	movs	r3, #8
 800362a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	615a      	str	r2, [r3, #20]
          break;
 8003632:	e003      	b.n	800363c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003634:	2300      	movs	r3, #0
 8003636:	623b      	str	r3, [r7, #32]
          break;
 8003638:	e000      	b.n	800363c <HAL_GPIO_Init+0x130>
          break;
 800363a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2bff      	cmp	r3, #255	; 0xff
 8003640:	d801      	bhi.n	8003646 <HAL_GPIO_Init+0x13a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	e001      	b.n	800364a <HAL_GPIO_Init+0x13e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3304      	adds	r3, #4
 800364a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2bff      	cmp	r3, #255	; 0xff
 8003650:	d802      	bhi.n	8003658 <HAL_GPIO_Init+0x14c>
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	e002      	b.n	800365e <HAL_GPIO_Init+0x152>
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	3b08      	subs	r3, #8
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	210f      	movs	r1, #15
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	fa01 f303 	lsl.w	r3, r1, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	401a      	ands	r2, r3
 8003670:	6a39      	ldr	r1, [r7, #32]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	431a      	orrs	r2, r3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80b1 	beq.w	80037ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800368c:	4b4d      	ldr	r3, [pc, #308]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	4a4c      	ldr	r2, [pc, #304]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6193      	str	r3, [r2, #24]
 8003698:	4b4a      	ldr	r3, [pc, #296]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036a4:	4a48      	ldr	r2, [pc, #288]	; (80037c8 <HAL_GPIO_Init+0x2bc>)
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	089b      	lsrs	r3, r3, #2
 80036aa:	3302      	adds	r3, #2
 80036ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	f003 0303 	and.w	r3, r3, #3
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	220f      	movs	r2, #15
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4013      	ands	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a40      	ldr	r2, [pc, #256]	; (80037cc <HAL_GPIO_Init+0x2c0>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d013      	beq.n	80036f8 <HAL_GPIO_Init+0x1ec>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a3f      	ldr	r2, [pc, #252]	; (80037d0 <HAL_GPIO_Init+0x2c4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00d      	beq.n	80036f4 <HAL_GPIO_Init+0x1e8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a3e      	ldr	r2, [pc, #248]	; (80037d4 <HAL_GPIO_Init+0x2c8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d007      	beq.n	80036f0 <HAL_GPIO_Init+0x1e4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a3d      	ldr	r2, [pc, #244]	; (80037d8 <HAL_GPIO_Init+0x2cc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_GPIO_Init+0x1e0>
 80036e8:	2303      	movs	r3, #3
 80036ea:	e006      	b.n	80036fa <HAL_GPIO_Init+0x1ee>
 80036ec:	2304      	movs	r3, #4
 80036ee:	e004      	b.n	80036fa <HAL_GPIO_Init+0x1ee>
 80036f0:	2302      	movs	r3, #2
 80036f2:	e002      	b.n	80036fa <HAL_GPIO_Init+0x1ee>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <HAL_GPIO_Init+0x1ee>
 80036f8:	2300      	movs	r3, #0
 80036fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fc:	f002 0203 	and.w	r2, r2, #3
 8003700:	0092      	lsls	r2, r2, #2
 8003702:	4093      	lsls	r3, r2
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800370a:	492f      	ldr	r1, [pc, #188]	; (80037c8 <HAL_GPIO_Init+0x2bc>)
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	089b      	lsrs	r3, r3, #2
 8003710:	3302      	adds	r3, #2
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d006      	beq.n	8003732 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003724:	4b2d      	ldr	r3, [pc, #180]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	492c      	ldr	r1, [pc, #176]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]
 8003730:	e006      	b.n	8003740 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003732:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	43db      	mvns	r3, r3
 800373a:	4928      	ldr	r1, [pc, #160]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 800373c:	4013      	ands	r3, r2
 800373e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d006      	beq.n	800375a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800374c:	4b23      	ldr	r3, [pc, #140]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	4922      	ldr	r1, [pc, #136]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
 8003758:	e006      	b.n	8003768 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	43db      	mvns	r3, r3
 8003762:	491e      	ldr	r1, [pc, #120]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 8003764:	4013      	ands	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d006      	beq.n	8003782 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003774:	4b19      	ldr	r3, [pc, #100]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	4918      	ldr	r1, [pc, #96]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	4313      	orrs	r3, r2
 800377e:	608b      	str	r3, [r1, #8]
 8003780:	e006      	b.n	8003790 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	43db      	mvns	r3, r3
 800378a:	4914      	ldr	r1, [pc, #80]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 800378c:	4013      	ands	r3, r2
 800378e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d021      	beq.n	80037e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800379c:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	490e      	ldr	r1, [pc, #56]	; (80037dc <HAL_GPIO_Init+0x2d0>)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	60cb      	str	r3, [r1, #12]
 80037a8:	e021      	b.n	80037ee <HAL_GPIO_Init+0x2e2>
 80037aa:	bf00      	nop
 80037ac:	10320000 	.word	0x10320000
 80037b0:	10310000 	.word	0x10310000
 80037b4:	10220000 	.word	0x10220000
 80037b8:	10210000 	.word	0x10210000
 80037bc:	10120000 	.word	0x10120000
 80037c0:	10110000 	.word	0x10110000
 80037c4:	40021000 	.word	0x40021000
 80037c8:	40010000 	.word	0x40010000
 80037cc:	40010800 	.word	0x40010800
 80037d0:	40010c00 	.word	0x40010c00
 80037d4:	40011000 	.word	0x40011000
 80037d8:	40011400 	.word	0x40011400
 80037dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <HAL_GPIO_Init+0x304>)
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	4909      	ldr	r1, [pc, #36]	; (8003810 <HAL_GPIO_Init+0x304>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	3301      	adds	r3, #1
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	fa22 f303 	lsr.w	r3, r2, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f47f ae8e 	bne.w	8003520 <HAL_GPIO_Init+0x14>
  }
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	372c      	adds	r7, #44	; 0x2c
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	40010400 	.word	0x40010400

08003814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	887b      	ldrh	r3, [r7, #2]
 8003826:	4013      	ands	r3, r2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
 8003830:	e001      	b.n	8003836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003832:	2300      	movs	r3, #0
 8003834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003836:	7bfb      	ldrb	r3, [r7, #15]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	460b      	mov	r3, r1
 800384c:	807b      	strh	r3, [r7, #2]
 800384e:	4613      	mov	r3, r2
 8003850:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003852:	787b      	ldrb	r3, [r7, #1]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003858:	887a      	ldrh	r2, [r7, #2]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800385e:	e003      	b.n	8003868 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	041a      	lsls	r2, r3, #16
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	611a      	str	r2, [r3, #16]
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003872:	b480      	push	{r7}
 8003874:	b085      	sub	sp, #20
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003884:	887a      	ldrh	r2, [r7, #2]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4013      	ands	r3, r2
 800388a:	041a      	lsls	r2, r3, #16
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	43d9      	mvns	r1, r3
 8003890:	887b      	ldrh	r3, [r7, #2]
 8003892:	400b      	ands	r3, r1
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	611a      	str	r2, [r3, #16]
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d006      	beq.n	80038c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038ba:	4a05      	ldr	r2, [pc, #20]	; (80038d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038c0:	88fb      	ldrh	r3, [r7, #6]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe fd10 	bl	80022e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40010400 	.word	0x40010400

080038d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e26c      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8087 	beq.w	8003a02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038f4:	4b92      	ldr	r3, [pc, #584]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 030c 	and.w	r3, r3, #12
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d00c      	beq.n	800391a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003900:	4b8f      	ldr	r3, [pc, #572]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 030c 	and.w	r3, r3, #12
 8003908:	2b08      	cmp	r3, #8
 800390a:	d112      	bne.n	8003932 <HAL_RCC_OscConfig+0x5e>
 800390c:	4b8c      	ldr	r3, [pc, #560]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003918:	d10b      	bne.n	8003932 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800391a:	4b89      	ldr	r3, [pc, #548]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d06c      	beq.n	8003a00 <HAL_RCC_OscConfig+0x12c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d168      	bne.n	8003a00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e246      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800393a:	d106      	bne.n	800394a <HAL_RCC_OscConfig+0x76>
 800393c:	4b80      	ldr	r3, [pc, #512]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a7f      	ldr	r2, [pc, #508]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	e02e      	b.n	80039a8 <HAL_RCC_OscConfig+0xd4>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10c      	bne.n	800396c <HAL_RCC_OscConfig+0x98>
 8003952:	4b7b      	ldr	r3, [pc, #492]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a7a      	ldr	r2, [pc, #488]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4b78      	ldr	r3, [pc, #480]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a77      	ldr	r2, [pc, #476]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e01d      	b.n	80039a8 <HAL_RCC_OscConfig+0xd4>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003974:	d10c      	bne.n	8003990 <HAL_RCC_OscConfig+0xbc>
 8003976:	4b72      	ldr	r3, [pc, #456]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a71      	ldr	r2, [pc, #452]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 800397c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	4b6f      	ldr	r3, [pc, #444]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a6e      	ldr	r2, [pc, #440]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e00b      	b.n	80039a8 <HAL_RCC_OscConfig+0xd4>
 8003990:	4b6b      	ldr	r3, [pc, #428]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a6a      	ldr	r2, [pc, #424]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b68      	ldr	r3, [pc, #416]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a67      	ldr	r2, [pc, #412]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 80039a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7ff f844 	bl	8002a3c <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b8:	f7ff f840 	bl	8002a3c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e1fa      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	4b5d      	ldr	r3, [pc, #372]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0xe4>
 80039d6:	e014      	b.n	8003a02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7ff f830 	bl	8002a3c <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e0:	f7ff f82c 	bl	8002a3c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e1e6      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	4b53      	ldr	r3, [pc, #332]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x10c>
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d063      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a0e:	4b4c      	ldr	r3, [pc, #304]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a1a:	4b49      	ldr	r3, [pc, #292]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d11c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x18c>
 8003a26:	4b46      	ldr	r3, [pc, #280]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d116      	bne.n	8003a60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	4b43      	ldr	r3, [pc, #268]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_RCC_OscConfig+0x176>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d001      	beq.n	8003a4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e1ba      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4a:	4b3d      	ldr	r3, [pc, #244]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4939      	ldr	r1, [pc, #228]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5e:	e03a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a68:	4b36      	ldr	r3, [pc, #216]	; (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6e:	f7fe ffe5 	bl	8002a3c <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a76:	f7fe ffe1 	bl	8002a3c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e19b      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a88:	4b2d      	ldr	r3, [pc, #180]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a94:	4b2a      	ldr	r3, [pc, #168]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4927      	ldr	r1, [pc, #156]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]
 8003aa8:	e015      	b.n	8003ad6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aaa:	4b26      	ldr	r3, [pc, #152]	; (8003b44 <HAL_RCC_OscConfig+0x270>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab0:	f7fe ffc4 	bl	8002a3c <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab8:	f7fe ffc0 	bl	8002a3c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e17a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d03a      	beq.n	8003b58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d019      	beq.n	8003b1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aea:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af0:	f7fe ffa4 	bl	8002a3c <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af8:	f7fe ffa0 	bl	8002a3c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e15a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b16:	2001      	movs	r0, #1
 8003b18:	f000 fad8 	bl	80040cc <RCC_Delay>
 8003b1c:	e01c      	b.n	8003b58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_RCC_OscConfig+0x274>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b24:	f7fe ff8a 	bl	8002a3c <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2a:	e00f      	b.n	8003b4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b2c:	f7fe ff86 	bl	8002a3c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d908      	bls.n	8003b4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e140      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	42420000 	.word	0x42420000
 8003b48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	4b9e      	ldr	r3, [pc, #632]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e9      	bne.n	8003b2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80a6 	beq.w	8003cb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b66:	2300      	movs	r3, #0
 8003b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b6a:	4b97      	ldr	r3, [pc, #604]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10d      	bne.n	8003b92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b76:	4b94      	ldr	r3, [pc, #592]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	4a93      	ldr	r2, [pc, #588]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b80:	61d3      	str	r3, [r2, #28]
 8003b82:	4b91      	ldr	r3, [pc, #580]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b92:	4b8e      	ldr	r3, [pc, #568]	; (8003dcc <HAL_RCC_OscConfig+0x4f8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d118      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9e:	4b8b      	ldr	r3, [pc, #556]	; (8003dcc <HAL_RCC_OscConfig+0x4f8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a8a      	ldr	r2, [pc, #552]	; (8003dcc <HAL_RCC_OscConfig+0x4f8>)
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003baa:	f7fe ff47 	bl	8002a3c <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb2:	f7fe ff43 	bl	8002a3c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b64      	cmp	r3, #100	; 0x64
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0fd      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc4:	4b81      	ldr	r3, [pc, #516]	; (8003dcc <HAL_RCC_OscConfig+0x4f8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d106      	bne.n	8003be6 <HAL_RCC_OscConfig+0x312>
 8003bd8:	4b7b      	ldr	r3, [pc, #492]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	4a7a      	ldr	r2, [pc, #488]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	6213      	str	r3, [r2, #32]
 8003be4:	e02d      	b.n	8003c42 <HAL_RCC_OscConfig+0x36e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCC_OscConfig+0x334>
 8003bee:	4b76      	ldr	r3, [pc, #472]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	4a75      	ldr	r2, [pc, #468]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	6213      	str	r3, [r2, #32]
 8003bfa:	4b73      	ldr	r3, [pc, #460]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	4a72      	ldr	r2, [pc, #456]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c00:	f023 0304 	bic.w	r3, r3, #4
 8003c04:	6213      	str	r3, [r2, #32]
 8003c06:	e01c      	b.n	8003c42 <HAL_RCC_OscConfig+0x36e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d10c      	bne.n	8003c2a <HAL_RCC_OscConfig+0x356>
 8003c10:	4b6d      	ldr	r3, [pc, #436]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4a6c      	ldr	r2, [pc, #432]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c16:	f043 0304 	orr.w	r3, r3, #4
 8003c1a:	6213      	str	r3, [r2, #32]
 8003c1c:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4a69      	ldr	r2, [pc, #420]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c22:	f043 0301 	orr.w	r3, r3, #1
 8003c26:	6213      	str	r3, [r2, #32]
 8003c28:	e00b      	b.n	8003c42 <HAL_RCC_OscConfig+0x36e>
 8003c2a:	4b67      	ldr	r3, [pc, #412]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	4a66      	ldr	r2, [pc, #408]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	6213      	str	r3, [r2, #32]
 8003c36:	4b64      	ldr	r3, [pc, #400]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	4a63      	ldr	r2, [pc, #396]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c3c:	f023 0304 	bic.w	r3, r3, #4
 8003c40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d015      	beq.n	8003c76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4a:	f7fe fef7 	bl	8002a3c <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c50:	e00a      	b.n	8003c68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c52:	f7fe fef3 	bl	8002a3c <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e0ab      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c68:	4b57      	ldr	r3, [pc, #348]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0ee      	beq.n	8003c52 <HAL_RCC_OscConfig+0x37e>
 8003c74:	e014      	b.n	8003ca0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c76:	f7fe fee1 	bl	8002a3c <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fe fedd 	bl	8002a3c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e095      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c94:	4b4c      	ldr	r3, [pc, #304]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1ee      	bne.n	8003c7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d105      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca6:	4b48      	ldr	r3, [pc, #288]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4a47      	ldr	r2, [pc, #284]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 8081 	beq.w	8003dbe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cbc:	4b42      	ldr	r3, [pc, #264]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d061      	beq.n	8003d8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d146      	bne.n	8003d5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <HAL_RCC_OscConfig+0x4fc>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd6:	f7fe feb1 	bl	8002a3c <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cde:	f7fe fead 	bl	8002a3c <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e067      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf0:	4b35      	ldr	r3, [pc, #212]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d04:	d108      	bne.n	8003d18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d06:	4b30      	ldr	r3, [pc, #192]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	492d      	ldr	r1, [pc, #180]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d18:	4b2b      	ldr	r3, [pc, #172]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a19      	ldr	r1, [r3, #32]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	4927      	ldr	r1, [pc, #156]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <HAL_RCC_OscConfig+0x4fc>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fe fe81 	bl	8002a3c <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7fe fe7d 	bl	8002a3c <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e037      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d50:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x46a>
 8003d5c:	e02f      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <HAL_RCC_OscConfig+0x4fc>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fe fe6a 	bl	8002a3c <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d6c:	f7fe fe66 	bl	8002a3c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e020      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d7e:	4b12      	ldr	r3, [pc, #72]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x498>
 8003d8a:	e018      	b.n	8003dbe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e013      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d98:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_OscConfig+0x4f4>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d106      	bne.n	8003dba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d001      	beq.n	8003dbe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40007000 	.word	0x40007000
 8003dd0:	42420060 	.word	0x42420060

08003dd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0d0      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	4b6a      	ldr	r3, [pc, #424]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d910      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b67      	ldr	r3, [pc, #412]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 0207 	bic.w	r2, r3, #7
 8003dfe:	4965      	ldr	r1, [pc, #404]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b63      	ldr	r3, [pc, #396]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0b8      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e30:	4b59      	ldr	r3, [pc, #356]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4a58      	ldr	r2, [pc, #352]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e48:	4b53      	ldr	r3, [pc, #332]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4a52      	ldr	r2, [pc, #328]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e54:	4b50      	ldr	r3, [pc, #320]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	494d      	ldr	r1, [pc, #308]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d040      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7a:	4b47      	ldr	r3, [pc, #284]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d115      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e07f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e92:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e073      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea2:	4b3d      	ldr	r3, [pc, #244]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06b      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eb2:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f023 0203 	bic.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4936      	ldr	r1, [pc, #216]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec4:	f7fe fdba 	bl	8002a3c <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ecc:	f7fe fdb6 	bl	8002a3c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e053      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	4b2d      	ldr	r3, [pc, #180]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 020c 	and.w	r2, r3, #12
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d1eb      	bne.n	8003ecc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef4:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d210      	bcs.n	8003f24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 0207 	bic.w	r2, r3, #7
 8003f0a:	4922      	ldr	r1, [pc, #136]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f12:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e032      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f30:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4916      	ldr	r1, [pc, #88]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f4e:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	490e      	ldr	r1, [pc, #56]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f62:	f000 f821 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8003f66:	4602      	mov	r2, r0
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	490a      	ldr	r1, [pc, #40]	; (8003f9c <HAL_RCC_ClockConfig+0x1c8>)
 8003f74:	5ccb      	ldrb	r3, [r1, r3]
 8003f76:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7a:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <HAL_RCC_ClockConfig+0x1cc>)
 8003f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_RCC_ClockConfig+0x1d0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe fd18 	bl	80029b8 <HAL_InitTick>

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40022000 	.word	0x40022000
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	08008560 	.word	0x08008560
 8003fa0:	20000090 	.word	0x20000090
 8003fa4:	20000094 	.word	0x20000094

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	b490      	push	{r4, r7}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003fae:	4b2a      	ldr	r3, [pc, #168]	; (8004058 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fb0:	1d3c      	adds	r4, r7, #4
 8003fb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003fb8:	f240 2301 	movw	r3, #513	; 0x201
 8003fbc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fd2:	4b22      	ldr	r3, [pc, #136]	; (800405c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d002      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d003      	beq.n	8003fee <HAL_RCC_GetSysClockFreq+0x46>
 8003fe6:	e02d      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fea:	623b      	str	r3, [r7, #32]
      break;
 8003fec:	e02d      	b.n	800404a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	0c9b      	lsrs	r3, r3, #18
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004000:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d013      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800400c:	4b13      	ldr	r3, [pc, #76]	; (800405c <HAL_RCC_GetSysClockFreq+0xb4>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	0c5b      	lsrs	r3, r3, #17
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800401a:	4413      	add	r3, r2
 800401c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004020:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	4a0e      	ldr	r2, [pc, #56]	; (8004060 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004026:	fb02 f203 	mul.w	r2, r2, r3
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
 8004032:	e004      	b.n	800403e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	4a0b      	ldr	r2, [pc, #44]	; (8004064 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004038:	fb02 f303 	mul.w	r3, r2, r3
 800403c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	623b      	str	r3, [r7, #32]
      break;
 8004042:	e002      	b.n	800404a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004046:	623b      	str	r3, [r7, #32]
      break;
 8004048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800404a:	6a3b      	ldr	r3, [r7, #32]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3728      	adds	r7, #40	; 0x28
 8004050:	46bd      	mov	sp, r7
 8004052:	bc90      	pop	{r4, r7}
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	08008540 	.word	0x08008540
 800405c:	40021000 	.word	0x40021000
 8004060:	007a1200 	.word	0x007a1200
 8004064:	003d0900 	.word	0x003d0900

08004068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800406c:	4b02      	ldr	r3, [pc, #8]	; (8004078 <HAL_RCC_GetHCLKFreq+0x10>)
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr
 8004078:	20000090 	.word	0x20000090

0800407c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004080:	f7ff fff2 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	0a1b      	lsrs	r3, r3, #8
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	4903      	ldr	r1, [pc, #12]	; (80040a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004098:	4618      	mov	r0, r3
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021000 	.word	0x40021000
 80040a0:	08008570 	.word	0x08008570

080040a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040a8:	f7ff ffde 	bl	8004068 <HAL_RCC_GetHCLKFreq>
 80040ac:	4602      	mov	r2, r0
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	0adb      	lsrs	r3, r3, #11
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	4903      	ldr	r1, [pc, #12]	; (80040c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ba:	5ccb      	ldrb	r3, [r1, r3]
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40021000 	.word	0x40021000
 80040c8:	08008570 	.word	0x08008570

080040cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040d4:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <RCC_Delay+0x34>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <RCC_Delay+0x38>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	0a5b      	lsrs	r3, r3, #9
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040e8:	bf00      	nop
  }
  while (Delay --);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1e5a      	subs	r2, r3, #1
 80040ee:	60fa      	str	r2, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f9      	bne.n	80040e8 <RCC_Delay+0x1c>
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	20000090 	.word	0x20000090
 8004104:	10624dd3 	.word	0x10624dd3

08004108 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d07d      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004124:	2300      	movs	r3, #0
 8004126:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004128:	4b4f      	ldr	r3, [pc, #316]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10d      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004134:	4b4c      	ldr	r3, [pc, #304]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	4a4b      	ldr	r2, [pc, #300]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413e:	61d3      	str	r3, [r2, #28]
 8004140:	4b49      	ldr	r3, [pc, #292]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800414c:	2301      	movs	r3, #1
 800414e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	4b46      	ldr	r3, [pc, #280]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d118      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800415c:	4b43      	ldr	r3, [pc, #268]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a42      	ldr	r2, [pc, #264]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004166:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004168:	f7fe fc68 	bl	8002a3c <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416e:	e008      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004170:	f7fe fc64 	bl	8002a3c <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	; 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e06d      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004182:	4b3a      	ldr	r3, [pc, #232]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800418e:	4b36      	ldr	r3, [pc, #216]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004196:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d02e      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d027      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041ac:	4b2e      	ldr	r3, [pc, #184]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041b6:	4b2e      	ldr	r3, [pc, #184]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041bc:	4b2c      	ldr	r3, [pc, #176]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041c2:	4a29      	ldr	r2, [pc, #164]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d014      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d2:	f7fe fc33 	bl	8002a3c <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d8:	e00a      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041da:	f7fe fc2f 	bl	8002a3c <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e036      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f0:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0ee      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041fc:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4917      	ldr	r1, [pc, #92]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420a:	4313      	orrs	r3, r2
 800420c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800420e:	7dfb      	ldrb	r3, [r7, #23]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d105      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004214:	4b14      	ldr	r3, [pc, #80]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	4a13      	ldr	r2, [pc, #76]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800421a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800422c:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	490b      	ldr	r1, [pc, #44]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423a:	4313      	orrs	r3, r2
 800423c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	2b00      	cmp	r3, #0
 8004248:	d008      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	4904      	ldr	r1, [pc, #16]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004258:	4313      	orrs	r3, r2
 800425a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000
 800426c:	40007000 	.word	0x40007000
 8004270:	42420440 	.word	0x42420440

08004274 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004274:	b590      	push	{r4, r7, lr}
 8004276:	b08d      	sub	sp, #52	; 0x34
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800427c:	4b5a      	ldr	r3, [pc, #360]	; (80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800427e:	f107 040c 	add.w	r4, r7, #12
 8004282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004288:	f240 2301 	movw	r3, #513	; 0x201
 800428c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
 8004292:	2300      	movs	r3, #0
 8004294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004296:	2300      	movs	r3, #0
 8004298:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	2300      	movs	r3, #0
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d00a      	beq.n	80042be <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b10      	cmp	r3, #16
 80042ac:	f200 8091 	bhi.w	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d04c      	beq.n	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d07c      	beq.n	80043b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80042bc:	e089      	b.n	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80042be:	4b4b      	ldr	r3, [pc, #300]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80042c4:	4b49      	ldr	r3, [pc, #292]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8082 	beq.w	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	0c9b      	lsrs	r3, r3, #18
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80042de:	4413      	add	r3, r2
 80042e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80042e4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d018      	beq.n	8004322 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042f0:	4b3e      	ldr	r3, [pc, #248]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	0c5b      	lsrs	r3, r3, #17
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80042fe:	4413      	add	r3, r2
 8004300:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00d      	beq.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004310:	4a37      	ldr	r2, [pc, #220]	; (80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	fbb2 f2f3 	udiv	r2, r2, r3
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	fb02 f303 	mul.w	r3, r2, r3
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004320:	e004      	b.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	4a33      	ldr	r2, [pc, #204]	; (80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800432c:	4b2f      	ldr	r3, [pc, #188]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004338:	d102      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800433e:	e04a      	b.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4a2c      	ldr	r2, [pc, #176]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800434e:	e042      	b.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004350:	4b26      	ldr	r3, [pc, #152]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004360:	d108      	bne.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 800436c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004370:	62bb      	str	r3, [r7, #40]	; 0x28
 8004372:	e01f      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437e:	d109      	bne.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004380:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 800438c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004390:	62bb      	str	r3, [r7, #40]	; 0x28
 8004392:	e00f      	b.n	80043b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800439e:	d11c      	bne.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80043a0:	4b12      	ldr	r3, [pc, #72]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d016      	beq.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80043ac:	f24f 4324 	movw	r3, #62500	; 0xf424
 80043b0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80043b2:	e012      	b.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80043b4:	e011      	b.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80043b6:	f7ff fe75 	bl	80040a4 <HAL_RCC_GetPCLK2Freq>
 80043ba:	4602      	mov	r2, r0
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	0b9b      	lsrs	r3, r3, #14
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	3301      	adds	r3, #1
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80043d0:	e004      	b.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80043d2:	bf00      	nop
 80043d4:	e002      	b.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80043d6:	bf00      	nop
 80043d8:	e000      	b.n	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80043da:	bf00      	nop
    }
  }
  return (frequency);
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3734      	adds	r7, #52	; 0x34
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd90      	pop	{r4, r7, pc}
 80043e6:	bf00      	nop
 80043e8:	08008550 	.word	0x08008550
 80043ec:	40021000 	.word	0x40021000
 80043f0:	007a1200 	.word	0x007a1200
 80043f4:	003d0900 	.word	0x003d0900
 80043f8:	aaaaaaab 	.word	0xaaaaaaab

080043fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e041      	b.n	8004492 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fe f8a0 	bl	8002568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	4619      	mov	r1, r3
 800443a:	4610      	mov	r0, r2
 800443c:	f000 fb86 	bl	8004b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d001      	beq.n	80044b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e03a      	b.n	800452a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a18      	ldr	r2, [pc, #96]	; (8004534 <HAL_TIM_Base_Start_IT+0x98>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00e      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x58>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044de:	d009      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x58>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a14      	ldr	r2, [pc, #80]	; (8004538 <HAL_TIM_Base_Start_IT+0x9c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d004      	beq.n	80044f4 <HAL_TIM_Base_Start_IT+0x58>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a13      	ldr	r2, [pc, #76]	; (800453c <HAL_TIM_Base_Start_IT+0xa0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d111      	bne.n	8004518 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b06      	cmp	r3, #6
 8004504:	d010      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0201 	orr.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004516:	e007      	b.n	8004528 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40000400 	.word	0x40000400
 800453c:	40000800 	.word	0x40000800

08004540 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e041      	b.n	80045d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d106      	bne.n	800456c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f839 	bl	80045de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f000 fae4 	bl	8004b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b02      	cmp	r3, #2
 8004604:	d122      	bne.n	800464c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d11b      	bne.n	800464c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0202 	mvn.w	r2, #2
 800461c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fa6f 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 8004638:	e005      	b.n	8004646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fa62 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fa71 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b04      	cmp	r3, #4
 8004658:	d122      	bne.n	80046a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b04      	cmp	r3, #4
 8004666:	d11b      	bne.n	80046a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0204 	mvn.w	r2, #4
 8004670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fa45 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 800468c:	e005      	b.n	800469a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fa38 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fa47 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d122      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d11b      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0208 	mvn.w	r2, #8
 80046c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2204      	movs	r2, #4
 80046ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fa1b 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 80046e0:	e005      	b.n	80046ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fa0e 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fa1d 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d122      	bne.n	8004748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b10      	cmp	r3, #16
 800470e:	d11b      	bne.n	8004748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0210 	mvn.w	r2, #16
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2208      	movs	r2, #8
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f9f1 	bl	8004b16 <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f9e4 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f9f3 	bl	8004b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	d10e      	bne.n	8004774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b01      	cmp	r3, #1
 8004762:	d107      	bne.n	8004774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0201 	mvn.w	r2, #1
 800476c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fd fd7c 	bl	800226c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477e:	2b80      	cmp	r3, #128	; 0x80
 8004780:	d10e      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478c:	2b80      	cmp	r3, #128	; 0x80
 800478e:	d107      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fdac 	bl	80052f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047aa:	2b40      	cmp	r3, #64	; 0x40
 80047ac:	d10e      	bne.n	80047cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d107      	bne.n	80047cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f9b7 	bl	8004b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d10e      	bne.n	80047f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	d107      	bne.n	80047f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0220 	mvn.w	r2, #32
 80047f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fd77 	bl	80052e6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f8:	bf00      	nop
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004816:	2302      	movs	r3, #2
 8004818:	e0ac      	b.n	8004974 <HAL_TIM_PWM_ConfigChannel+0x174>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b0c      	cmp	r3, #12
 8004826:	f200 809f 	bhi.w	8004968 <HAL_TIM_PWM_ConfigChannel+0x168>
 800482a:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800482c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004830:	08004865 	.word	0x08004865
 8004834:	08004969 	.word	0x08004969
 8004838:	08004969 	.word	0x08004969
 800483c:	08004969 	.word	0x08004969
 8004840:	080048a5 	.word	0x080048a5
 8004844:	08004969 	.word	0x08004969
 8004848:	08004969 	.word	0x08004969
 800484c:	08004969 	.word	0x08004969
 8004850:	080048e7 	.word	0x080048e7
 8004854:	08004969 	.word	0x08004969
 8004858:	08004969 	.word	0x08004969
 800485c:	08004969 	.word	0x08004969
 8004860:	08004927 	.word	0x08004927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 f9d0 	bl	8004c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0208 	orr.w	r2, r2, #8
 800487e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0204 	bic.w	r2, r2, #4
 800488e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6999      	ldr	r1, [r3, #24]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	619a      	str	r2, [r3, #24]
      break;
 80048a2:	e062      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fa16 	bl	8004cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6999      	ldr	r1, [r3, #24]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	021a      	lsls	r2, r3, #8
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	619a      	str	r2, [r3, #24]
      break;
 80048e4:	e041      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fa5f 	bl	8004db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0208 	orr.w	r2, r2, #8
 8004900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0204 	bic.w	r2, r2, #4
 8004910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69d9      	ldr	r1, [r3, #28]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	61da      	str	r2, [r3, #28]
      break;
 8004924:	e021      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	4618      	mov	r0, r3
 800492e:	f000 faa9 	bl	8004e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69d9      	ldr	r1, [r3, #28]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	021a      	lsls	r2, r3, #8
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	61da      	str	r2, [r3, #28]
      break;
 8004966:	e000      	b.n	800496a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004968:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_TIM_ConfigClockSource+0x18>
 8004990:	2302      	movs	r3, #2
 8004992:	e0b3      	b.n	8004afc <HAL_TIM_ConfigClockSource+0x180>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049cc:	d03e      	beq.n	8004a4c <HAL_TIM_ConfigClockSource+0xd0>
 80049ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d2:	f200 8087 	bhi.w	8004ae4 <HAL_TIM_ConfigClockSource+0x168>
 80049d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049da:	f000 8085 	beq.w	8004ae8 <HAL_TIM_ConfigClockSource+0x16c>
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e2:	d87f      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x168>
 80049e4:	2b70      	cmp	r3, #112	; 0x70
 80049e6:	d01a      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0xa2>
 80049e8:	2b70      	cmp	r3, #112	; 0x70
 80049ea:	d87b      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x168>
 80049ec:	2b60      	cmp	r3, #96	; 0x60
 80049ee:	d050      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x116>
 80049f0:	2b60      	cmp	r3, #96	; 0x60
 80049f2:	d877      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x168>
 80049f4:	2b50      	cmp	r3, #80	; 0x50
 80049f6:	d03c      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0xf6>
 80049f8:	2b50      	cmp	r3, #80	; 0x50
 80049fa:	d873      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x168>
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d058      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x136>
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d86f      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x168>
 8004a04:	2b30      	cmp	r3, #48	; 0x30
 8004a06:	d064      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x156>
 8004a08:	2b30      	cmp	r3, #48	; 0x30
 8004a0a:	d86b      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x168>
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d060      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x156>
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d867      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x168>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d05c      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x156>
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d05a      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a1c:	e062      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6899      	ldr	r1, [r3, #8]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f000 faee 	bl	800500e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	609a      	str	r2, [r3, #8]
      break;
 8004a4a:	e04e      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	6899      	ldr	r1, [r3, #8]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f000 fad7 	bl	800500e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a6e:	609a      	str	r2, [r3, #8]
      break;
 8004a70:	e03b      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6859      	ldr	r1, [r3, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f000 fa4e 	bl	8004f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2150      	movs	r1, #80	; 0x50
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 faa5 	bl	8004fda <TIM_ITRx_SetConfig>
      break;
 8004a90:	e02b      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6859      	ldr	r1, [r3, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f000 fa6c 	bl	8004f7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2160      	movs	r1, #96	; 0x60
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fa95 	bl	8004fda <TIM_ITRx_SetConfig>
      break;
 8004ab0:	e01b      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f000 fa2e 	bl	8004f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2140      	movs	r1, #64	; 0x40
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fa85 	bl	8004fda <TIM_ITRx_SetConfig>
      break;
 8004ad0:	e00b      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f000 fa7c 	bl	8004fda <TIM_ITRx_SetConfig>
        break;
 8004ae2:	e002      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ae8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr

08004b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a29      	ldr	r2, [pc, #164]	; (8004c04 <TIM_Base_SetConfig+0xb8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00b      	beq.n	8004b7c <TIM_Base_SetConfig+0x30>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6a:	d007      	beq.n	8004b7c <TIM_Base_SetConfig+0x30>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a26      	ldr	r2, [pc, #152]	; (8004c08 <TIM_Base_SetConfig+0xbc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_Base_SetConfig+0x30>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a25      	ldr	r2, [pc, #148]	; (8004c0c <TIM_Base_SetConfig+0xc0>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d108      	bne.n	8004b8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a1c      	ldr	r2, [pc, #112]	; (8004c04 <TIM_Base_SetConfig+0xb8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00b      	beq.n	8004bae <TIM_Base_SetConfig+0x62>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9c:	d007      	beq.n	8004bae <TIM_Base_SetConfig+0x62>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a19      	ldr	r2, [pc, #100]	; (8004c08 <TIM_Base_SetConfig+0xbc>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_Base_SetConfig+0x62>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a18      	ldr	r2, [pc, #96]	; (8004c0c <TIM_Base_SetConfig+0xc0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d108      	bne.n	8004bc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a07      	ldr	r2, [pc, #28]	; (8004c04 <TIM_Base_SetConfig+0xb8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d103      	bne.n	8004bf4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	615a      	str	r2, [r3, #20]
}
 8004bfa:	bf00      	nop
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr
 8004c04:	40012c00 	.word	0x40012c00
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800

08004c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	f023 0201 	bic.w	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0303 	bic.w	r3, r3, #3
 8004c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f023 0302 	bic.w	r3, r3, #2
 8004c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <TIM_OC1_SetConfig+0xc8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d10c      	bne.n	8004c86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f023 0308 	bic.w	r3, r3, #8
 8004c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f023 0304 	bic.w	r3, r3, #4
 8004c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <TIM_OC1_SetConfig+0xc8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d111      	bne.n	8004cb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	621a      	str	r2, [r3, #32]
}
 8004ccc:	bf00      	nop
 8004cce:	371c      	adds	r7, #28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40012c00 	.word	0x40012c00

08004cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f023 0210 	bic.w	r2, r3, #16
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	021b      	lsls	r3, r3, #8
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f023 0320 	bic.w	r3, r3, #32
 8004d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a1d      	ldr	r2, [pc, #116]	; (8004dac <TIM_OC2_SetConfig+0xd0>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d10d      	bne.n	8004d58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a14      	ldr	r2, [pc, #80]	; (8004dac <TIM_OC2_SetConfig+0xd0>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d113      	bne.n	8004d88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	621a      	str	r2, [r3, #32]
}
 8004da2:	bf00      	nop
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr
 8004dac:	40012c00 	.word	0x40012c00

08004db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0303 	bic.w	r3, r3, #3
 8004de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a1d      	ldr	r2, [pc, #116]	; (8004e80 <TIM_OC3_SetConfig+0xd0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d10d      	bne.n	8004e2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	021b      	lsls	r3, r3, #8
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a14      	ldr	r2, [pc, #80]	; (8004e80 <TIM_OC3_SetConfig+0xd0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d113      	bne.n	8004e5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	621a      	str	r2, [r3, #32]
}
 8004e74:	bf00      	nop
 8004e76:	371c      	adds	r7, #28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40012c00 	.word	0x40012c00

08004e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	021b      	lsls	r3, r3, #8
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	031b      	lsls	r3, r3, #12
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a0f      	ldr	r2, [pc, #60]	; (8004f1c <TIM_OC4_SetConfig+0x98>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d109      	bne.n	8004ef8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	019b      	lsls	r3, r3, #6
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	621a      	str	r2, [r3, #32]
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr
 8004f1c:	40012c00 	.word	0x40012c00

08004f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b087      	sub	sp, #28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f023 0201 	bic.w	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f023 030a 	bic.w	r3, r3, #10
 8004f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	621a      	str	r2, [r3, #32]
}
 8004f72:	bf00      	nop
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr

08004f7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f023 0210 	bic.w	r2, r3, #16
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fa6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	031b      	lsls	r3, r3, #12
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	621a      	str	r2, [r3, #32]
}
 8004fd0:	bf00      	nop
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bc80      	pop	{r7}
 8004fd8:	4770      	bx	lr

08004fda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f043 0307 	orr.w	r3, r3, #7
 8004ffc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	609a      	str	r2, [r3, #8]
}
 8005004:	bf00      	nop
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	bc80      	pop	{r7}
 800500c:	4770      	bx	lr

0800500e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800500e:	b480      	push	{r7}
 8005010:	b087      	sub	sp, #28
 8005012:	af00      	add	r7, sp, #0
 8005014:	60f8      	str	r0, [r7, #12]
 8005016:	60b9      	str	r1, [r7, #8]
 8005018:	607a      	str	r2, [r7, #4]
 800501a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005028:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	021a      	lsls	r2, r3, #8
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	431a      	orrs	r2, r3
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	4313      	orrs	r3, r2
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	609a      	str	r2, [r3, #8]
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr

0800504c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <HAL_TIMEx_PWMN_Start+0x24>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e022      	b.n	80050b6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b04      	cmp	r3, #4
 8005074:	d109      	bne.n	800508a <HAL_TIMEx_PWMN_Start+0x3e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	bf14      	ite	ne
 8005082:	2301      	movne	r3, #1
 8005084:	2300      	moveq	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e015      	b.n	80050b6 <HAL_TIMEx_PWMN_Start+0x6a>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b08      	cmp	r3, #8
 800508e:	d109      	bne.n	80050a4 <HAL_TIMEx_PWMN_Start+0x58>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	bf14      	ite	ne
 800509c:	2301      	movne	r3, #1
 800509e:	2300      	moveq	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e008      	b.n	80050b6 <HAL_TIMEx_PWMN_Start+0x6a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	bf14      	ite	ne
 80050b0:	2301      	movne	r3, #1
 80050b2:	2300      	moveq	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e059      	b.n	8005172 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <HAL_TIMEx_PWMN_Start+0x82>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050cc:	e013      	b.n	80050f6 <HAL_TIMEx_PWMN_Start+0xaa>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d104      	bne.n	80050de <HAL_TIMEx_PWMN_Start+0x92>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050dc:	e00b      	b.n	80050f6 <HAL_TIMEx_PWMN_Start+0xaa>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d104      	bne.n	80050ee <HAL_TIMEx_PWMN_Start+0xa2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ec:	e003      	b.n	80050f6 <HAL_TIMEx_PWMN_Start+0xaa>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2204      	movs	r2, #4
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 f903 	bl	800530a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005112:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a18      	ldr	r2, [pc, #96]	; (800517c <HAL_TIMEx_PWMN_Start+0x130>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00e      	beq.n	800513c <HAL_TIMEx_PWMN_Start+0xf0>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005126:	d009      	beq.n	800513c <HAL_TIMEx_PWMN_Start+0xf0>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a14      	ldr	r2, [pc, #80]	; (8005180 <HAL_TIMEx_PWMN_Start+0x134>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d004      	beq.n	800513c <HAL_TIMEx_PWMN_Start+0xf0>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a13      	ldr	r2, [pc, #76]	; (8005184 <HAL_TIMEx_PWMN_Start+0x138>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d111      	bne.n	8005160 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b06      	cmp	r3, #6
 800514c:	d010      	beq.n	8005170 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515e:	e007      	b.n	8005170 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0201 	orr.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40012c00 	.word	0x40012c00
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800

08005188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800519c:	2302      	movs	r3, #2
 800519e:	e046      	b.n	800522e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a16      	ldr	r2, [pc, #88]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00e      	beq.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ec:	d009      	beq.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a12      	ldr	r2, [pc, #72]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d004      	beq.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a10      	ldr	r2, [pc, #64]	; (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d10c      	bne.n	800521c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005208:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	4313      	orrs	r3, r2
 8005212:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr
 8005238:	40012c00 	.word	0x40012c00
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800

08005244 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800525c:	2302      	movs	r3, #2
 800525e:	e03d      	b.n	80052dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr

080052e6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052ee:	bf00      	nop
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bc80      	pop	{r7}
 80052f6:	4770      	bx	lr

080052f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	bc80      	pop	{r7}
 8005308:	4770      	bx	lr

0800530a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800530a:	b480      	push	{r7}
 800530c:	b087      	sub	sp, #28
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	2204      	movs	r2, #4
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1a      	ldr	r2, [r3, #32]
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	43db      	mvns	r3, r3
 800532c:	401a      	ands	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1a      	ldr	r2, [r3, #32]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f003 031f 	and.w	r3, r3, #31
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	fa01 f303 	lsl.w	r3, r1, r3
 8005342:	431a      	orrs	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	621a      	str	r2, [r3, #32]
}
 8005348:	bf00      	nop
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr

08005352 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b082      	sub	sp, #8
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e03f      	b.n	80053e4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d106      	bne.n	800537e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7fd f989 	bl	8002690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2224      	movs	r2, #36	; 0x24
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005394:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f904 	bl	80055a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691a      	ldr	r2, [r3, #16]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695a      	ldr	r2, [r3, #20]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	4613      	mov	r3, r2
 80053fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b20      	cmp	r3, #32
 800540a:	d17c      	bne.n	8005506 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <HAL_UART_Transmit+0x2c>
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e075      	b.n	8005508 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_UART_Transmit+0x3e>
 8005426:	2302      	movs	r3, #2
 8005428:	e06e      	b.n	8005508 <HAL_UART_Transmit+0x11c>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2221      	movs	r2, #33	; 0x21
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005440:	f7fd fafc 	bl	8002a3c <HAL_GetTick>
 8005444:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	88fa      	ldrh	r2, [r7, #6]
 800544a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	88fa      	ldrh	r2, [r7, #6]
 8005450:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545a:	d108      	bne.n	800546e <HAL_UART_Transmit+0x82>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d104      	bne.n	800546e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005464:	2300      	movs	r3, #0
 8005466:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	e003      	b.n	8005476 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800547e:	e02a      	b.n	80054d6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2200      	movs	r2, #0
 8005488:	2180      	movs	r1, #128	; 0x80
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f840 	bl	8005510 <UART_WaitOnFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e036      	b.n	8005508 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10b      	bne.n	80054b8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	461a      	mov	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054ae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	3302      	adds	r3, #2
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	e007      	b.n	80054c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	781a      	ldrb	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	3301      	adds	r3, #1
 80054c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1cf      	bne.n	8005480 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2200      	movs	r2, #0
 80054e8:	2140      	movs	r1, #64	; 0x40
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f810 	bl	8005510 <UART_WaitOnFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e006      	b.n	8005508 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e000      	b.n	8005508 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005506:	2302      	movs	r3, #2
  }
}
 8005508:	4618      	mov	r0, r3
 800550a:	3720      	adds	r7, #32
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	4613      	mov	r3, r2
 800551e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005520:	e02c      	b.n	800557c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005528:	d028      	beq.n	800557c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d007      	beq.n	8005540 <UART_WaitOnFlagUntilTimeout+0x30>
 8005530:	f7fd fa84 	bl	8002a3c <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	429a      	cmp	r2, r3
 800553e:	d21d      	bcs.n	800557c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800554e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695a      	ldr	r2, [r3, #20]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0201 	bic.w	r2, r2, #1
 800555e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e00f      	b.n	800559c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	4013      	ands	r3, r2
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	429a      	cmp	r2, r3
 800558a:	bf0c      	ite	eq
 800558c:	2301      	moveq	r3, #1
 800558e:	2300      	movne	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	461a      	mov	r2, r3
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	429a      	cmp	r2, r3
 8005598:	d0c3      	beq.n	8005522 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80055de:	f023 030c 	bic.w	r3, r3, #12
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	430b      	orrs	r3, r1
 80055ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a2c      	ldr	r2, [pc, #176]	; (80056b8 <UART_SetConfig+0x114>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d103      	bne.n	8005614 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800560c:	f7fe fd4a 	bl	80040a4 <HAL_RCC_GetPCLK2Freq>
 8005610:	60f8      	str	r0, [r7, #12]
 8005612:	e002      	b.n	800561a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005614:	f7fe fd32 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 8005618:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	009a      	lsls	r2, r3, #2
 8005624:	441a      	add	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005630:	4a22      	ldr	r2, [pc, #136]	; (80056bc <UART_SetConfig+0x118>)
 8005632:	fba2 2303 	umull	r2, r3, r2, r3
 8005636:	095b      	lsrs	r3, r3, #5
 8005638:	0119      	lsls	r1, r3, #4
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009a      	lsls	r2, r3, #2
 8005644:	441a      	add	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005650:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <UART_SetConfig+0x118>)
 8005652:	fba3 0302 	umull	r0, r3, r3, r2
 8005656:	095b      	lsrs	r3, r3, #5
 8005658:	2064      	movs	r0, #100	; 0x64
 800565a:	fb00 f303 	mul.w	r3, r0, r3
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	011b      	lsls	r3, r3, #4
 8005662:	3332      	adds	r3, #50	; 0x32
 8005664:	4a15      	ldr	r2, [pc, #84]	; (80056bc <UART_SetConfig+0x118>)
 8005666:	fba2 2303 	umull	r2, r3, r2, r3
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005670:	4419      	add	r1, r3
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	009a      	lsls	r2, r3, #2
 800567c:	441a      	add	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	fbb2 f2f3 	udiv	r2, r2, r3
 8005688:	4b0c      	ldr	r3, [pc, #48]	; (80056bc <UART_SetConfig+0x118>)
 800568a:	fba3 0302 	umull	r0, r3, r3, r2
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	2064      	movs	r0, #100	; 0x64
 8005692:	fb00 f303 	mul.w	r3, r0, r3
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	3332      	adds	r3, #50	; 0x32
 800569c:	4a07      	ldr	r2, [pc, #28]	; (80056bc <UART_SetConfig+0x118>)
 800569e:	fba2 2303 	umull	r2, r3, r2, r3
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	f003 020f 	and.w	r2, r3, #15
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	440a      	add	r2, r1
 80056ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80056b0:	bf00      	nop
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40013800 	.word	0x40013800
 80056bc:	51eb851f 	.word	0x51eb851f

080056c0 <__errno>:
 80056c0:	4b01      	ldr	r3, [pc, #4]	; (80056c8 <__errno+0x8>)
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	2000009c 	.word	0x2000009c

080056cc <__libc_init_array>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	2600      	movs	r6, #0
 80056d0:	4d0c      	ldr	r5, [pc, #48]	; (8005704 <__libc_init_array+0x38>)
 80056d2:	4c0d      	ldr	r4, [pc, #52]	; (8005708 <__libc_init_array+0x3c>)
 80056d4:	1b64      	subs	r4, r4, r5
 80056d6:	10a4      	asrs	r4, r4, #2
 80056d8:	42a6      	cmp	r6, r4
 80056da:	d109      	bne.n	80056f0 <__libc_init_array+0x24>
 80056dc:	f002 fedc 	bl	8008498 <_init>
 80056e0:	2600      	movs	r6, #0
 80056e2:	4d0a      	ldr	r5, [pc, #40]	; (800570c <__libc_init_array+0x40>)
 80056e4:	4c0a      	ldr	r4, [pc, #40]	; (8005710 <__libc_init_array+0x44>)
 80056e6:	1b64      	subs	r4, r4, r5
 80056e8:	10a4      	asrs	r4, r4, #2
 80056ea:	42a6      	cmp	r6, r4
 80056ec:	d105      	bne.n	80056fa <__libc_init_array+0x2e>
 80056ee:	bd70      	pop	{r4, r5, r6, pc}
 80056f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f4:	4798      	blx	r3
 80056f6:	3601      	adds	r6, #1
 80056f8:	e7ee      	b.n	80056d8 <__libc_init_array+0xc>
 80056fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fe:	4798      	blx	r3
 8005700:	3601      	adds	r6, #1
 8005702:	e7f2      	b.n	80056ea <__libc_init_array+0x1e>
 8005704:	0800895c 	.word	0x0800895c
 8005708:	0800895c 	.word	0x0800895c
 800570c:	0800895c 	.word	0x0800895c
 8005710:	08008964 	.word	0x08008964

08005714 <memcpy>:
 8005714:	440a      	add	r2, r1
 8005716:	4291      	cmp	r1, r2
 8005718:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800571c:	d100      	bne.n	8005720 <memcpy+0xc>
 800571e:	4770      	bx	lr
 8005720:	b510      	push	{r4, lr}
 8005722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005726:	4291      	cmp	r1, r2
 8005728:	f803 4f01 	strb.w	r4, [r3, #1]!
 800572c:	d1f9      	bne.n	8005722 <memcpy+0xe>
 800572e:	bd10      	pop	{r4, pc}

08005730 <memset>:
 8005730:	4603      	mov	r3, r0
 8005732:	4402      	add	r2, r0
 8005734:	4293      	cmp	r3, r2
 8005736:	d100      	bne.n	800573a <memset+0xa>
 8005738:	4770      	bx	lr
 800573a:	f803 1b01 	strb.w	r1, [r3], #1
 800573e:	e7f9      	b.n	8005734 <memset+0x4>

08005740 <__cvt>:
 8005740:	2b00      	cmp	r3, #0
 8005742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005746:	461f      	mov	r7, r3
 8005748:	bfbb      	ittet	lt
 800574a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800574e:	461f      	movlt	r7, r3
 8005750:	2300      	movge	r3, #0
 8005752:	232d      	movlt	r3, #45	; 0x2d
 8005754:	b088      	sub	sp, #32
 8005756:	4614      	mov	r4, r2
 8005758:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800575a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800575c:	7013      	strb	r3, [r2, #0]
 800575e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005760:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005764:	f023 0820 	bic.w	r8, r3, #32
 8005768:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800576c:	d005      	beq.n	800577a <__cvt+0x3a>
 800576e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005772:	d100      	bne.n	8005776 <__cvt+0x36>
 8005774:	3501      	adds	r5, #1
 8005776:	2302      	movs	r3, #2
 8005778:	e000      	b.n	800577c <__cvt+0x3c>
 800577a:	2303      	movs	r3, #3
 800577c:	aa07      	add	r2, sp, #28
 800577e:	9204      	str	r2, [sp, #16]
 8005780:	aa06      	add	r2, sp, #24
 8005782:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005786:	e9cd 3500 	strd	r3, r5, [sp]
 800578a:	4622      	mov	r2, r4
 800578c:	463b      	mov	r3, r7
 800578e:	f000 fd07 	bl	80061a0 <_dtoa_r>
 8005792:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005796:	4606      	mov	r6, r0
 8005798:	d102      	bne.n	80057a0 <__cvt+0x60>
 800579a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800579c:	07db      	lsls	r3, r3, #31
 800579e:	d522      	bpl.n	80057e6 <__cvt+0xa6>
 80057a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057a4:	eb06 0905 	add.w	r9, r6, r5
 80057a8:	d110      	bne.n	80057cc <__cvt+0x8c>
 80057aa:	7833      	ldrb	r3, [r6, #0]
 80057ac:	2b30      	cmp	r3, #48	; 0x30
 80057ae:	d10a      	bne.n	80057c6 <__cvt+0x86>
 80057b0:	2200      	movs	r2, #0
 80057b2:	2300      	movs	r3, #0
 80057b4:	4620      	mov	r0, r4
 80057b6:	4639      	mov	r1, r7
 80057b8:	f7fb f9aa 	bl	8000b10 <__aeabi_dcmpeq>
 80057bc:	b918      	cbnz	r0, 80057c6 <__cvt+0x86>
 80057be:	f1c5 0501 	rsb	r5, r5, #1
 80057c2:	f8ca 5000 	str.w	r5, [sl]
 80057c6:	f8da 3000 	ldr.w	r3, [sl]
 80057ca:	4499      	add	r9, r3
 80057cc:	2200      	movs	r2, #0
 80057ce:	2300      	movs	r3, #0
 80057d0:	4620      	mov	r0, r4
 80057d2:	4639      	mov	r1, r7
 80057d4:	f7fb f99c 	bl	8000b10 <__aeabi_dcmpeq>
 80057d8:	b108      	cbz	r0, 80057de <__cvt+0x9e>
 80057da:	f8cd 901c 	str.w	r9, [sp, #28]
 80057de:	2230      	movs	r2, #48	; 0x30
 80057e0:	9b07      	ldr	r3, [sp, #28]
 80057e2:	454b      	cmp	r3, r9
 80057e4:	d307      	bcc.n	80057f6 <__cvt+0xb6>
 80057e6:	4630      	mov	r0, r6
 80057e8:	9b07      	ldr	r3, [sp, #28]
 80057ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80057ec:	1b9b      	subs	r3, r3, r6
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	b008      	add	sp, #32
 80057f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f6:	1c59      	adds	r1, r3, #1
 80057f8:	9107      	str	r1, [sp, #28]
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	e7f0      	b.n	80057e0 <__cvt+0xa0>

080057fe <__exponent>:
 80057fe:	4603      	mov	r3, r0
 8005800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005802:	2900      	cmp	r1, #0
 8005804:	f803 2b02 	strb.w	r2, [r3], #2
 8005808:	bfb6      	itet	lt
 800580a:	222d      	movlt	r2, #45	; 0x2d
 800580c:	222b      	movge	r2, #43	; 0x2b
 800580e:	4249      	neglt	r1, r1
 8005810:	2909      	cmp	r1, #9
 8005812:	7042      	strb	r2, [r0, #1]
 8005814:	dd2b      	ble.n	800586e <__exponent+0x70>
 8005816:	f10d 0407 	add.w	r4, sp, #7
 800581a:	46a4      	mov	ip, r4
 800581c:	270a      	movs	r7, #10
 800581e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005822:	460a      	mov	r2, r1
 8005824:	46a6      	mov	lr, r4
 8005826:	fb07 1516 	mls	r5, r7, r6, r1
 800582a:	2a63      	cmp	r2, #99	; 0x63
 800582c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005830:	4631      	mov	r1, r6
 8005832:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005836:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800583a:	dcf0      	bgt.n	800581e <__exponent+0x20>
 800583c:	3130      	adds	r1, #48	; 0x30
 800583e:	f1ae 0502 	sub.w	r5, lr, #2
 8005842:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005846:	4629      	mov	r1, r5
 8005848:	1c44      	adds	r4, r0, #1
 800584a:	4561      	cmp	r1, ip
 800584c:	d30a      	bcc.n	8005864 <__exponent+0x66>
 800584e:	f10d 0209 	add.w	r2, sp, #9
 8005852:	eba2 020e 	sub.w	r2, r2, lr
 8005856:	4565      	cmp	r5, ip
 8005858:	bf88      	it	hi
 800585a:	2200      	movhi	r2, #0
 800585c:	4413      	add	r3, r2
 800585e:	1a18      	subs	r0, r3, r0
 8005860:	b003      	add	sp, #12
 8005862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005864:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005868:	f804 2f01 	strb.w	r2, [r4, #1]!
 800586c:	e7ed      	b.n	800584a <__exponent+0x4c>
 800586e:	2330      	movs	r3, #48	; 0x30
 8005870:	3130      	adds	r1, #48	; 0x30
 8005872:	7083      	strb	r3, [r0, #2]
 8005874:	70c1      	strb	r1, [r0, #3]
 8005876:	1d03      	adds	r3, r0, #4
 8005878:	e7f1      	b.n	800585e <__exponent+0x60>
	...

0800587c <_printf_float>:
 800587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005880:	b091      	sub	sp, #68	; 0x44
 8005882:	460c      	mov	r4, r1
 8005884:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005888:	4616      	mov	r6, r2
 800588a:	461f      	mov	r7, r3
 800588c:	4605      	mov	r5, r0
 800588e:	f001 fa75 	bl	8006d7c <_localeconv_r>
 8005892:	6803      	ldr	r3, [r0, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	9309      	str	r3, [sp, #36]	; 0x24
 8005898:	f7fa fc5a 	bl	8000150 <strlen>
 800589c:	2300      	movs	r3, #0
 800589e:	930e      	str	r3, [sp, #56]	; 0x38
 80058a0:	f8d8 3000 	ldr.w	r3, [r8]
 80058a4:	900a      	str	r0, [sp, #40]	; 0x28
 80058a6:	3307      	adds	r3, #7
 80058a8:	f023 0307 	bic.w	r3, r3, #7
 80058ac:	f103 0208 	add.w	r2, r3, #8
 80058b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80058b4:	f8d4 b000 	ldr.w	fp, [r4]
 80058b8:	f8c8 2000 	str.w	r2, [r8]
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058c4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80058c8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80058cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80058ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058d2:	4640      	mov	r0, r8
 80058d4:	4b9c      	ldr	r3, [pc, #624]	; (8005b48 <_printf_float+0x2cc>)
 80058d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058d8:	f7fb f94c 	bl	8000b74 <__aeabi_dcmpun>
 80058dc:	bb70      	cbnz	r0, 800593c <_printf_float+0xc0>
 80058de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058e2:	4640      	mov	r0, r8
 80058e4:	4b98      	ldr	r3, [pc, #608]	; (8005b48 <_printf_float+0x2cc>)
 80058e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058e8:	f7fb f926 	bl	8000b38 <__aeabi_dcmple>
 80058ec:	bb30      	cbnz	r0, 800593c <_printf_float+0xc0>
 80058ee:	2200      	movs	r2, #0
 80058f0:	2300      	movs	r3, #0
 80058f2:	4640      	mov	r0, r8
 80058f4:	4651      	mov	r1, sl
 80058f6:	f7fb f915 	bl	8000b24 <__aeabi_dcmplt>
 80058fa:	b110      	cbz	r0, 8005902 <_printf_float+0x86>
 80058fc:	232d      	movs	r3, #45	; 0x2d
 80058fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005902:	4b92      	ldr	r3, [pc, #584]	; (8005b4c <_printf_float+0x2d0>)
 8005904:	4892      	ldr	r0, [pc, #584]	; (8005b50 <_printf_float+0x2d4>)
 8005906:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800590a:	bf94      	ite	ls
 800590c:	4698      	movls	r8, r3
 800590e:	4680      	movhi	r8, r0
 8005910:	2303      	movs	r3, #3
 8005912:	f04f 0a00 	mov.w	sl, #0
 8005916:	6123      	str	r3, [r4, #16]
 8005918:	f02b 0304 	bic.w	r3, fp, #4
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	4633      	mov	r3, r6
 8005920:	4621      	mov	r1, r4
 8005922:	4628      	mov	r0, r5
 8005924:	9700      	str	r7, [sp, #0]
 8005926:	aa0f      	add	r2, sp, #60	; 0x3c
 8005928:	f000 f9d4 	bl	8005cd4 <_printf_common>
 800592c:	3001      	adds	r0, #1
 800592e:	f040 8090 	bne.w	8005a52 <_printf_float+0x1d6>
 8005932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005936:	b011      	add	sp, #68	; 0x44
 8005938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800593c:	4642      	mov	r2, r8
 800593e:	4653      	mov	r3, sl
 8005940:	4640      	mov	r0, r8
 8005942:	4651      	mov	r1, sl
 8005944:	f7fb f916 	bl	8000b74 <__aeabi_dcmpun>
 8005948:	b148      	cbz	r0, 800595e <_printf_float+0xe2>
 800594a:	f1ba 0f00 	cmp.w	sl, #0
 800594e:	bfb8      	it	lt
 8005950:	232d      	movlt	r3, #45	; 0x2d
 8005952:	4880      	ldr	r0, [pc, #512]	; (8005b54 <_printf_float+0x2d8>)
 8005954:	bfb8      	it	lt
 8005956:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800595a:	4b7f      	ldr	r3, [pc, #508]	; (8005b58 <_printf_float+0x2dc>)
 800595c:	e7d3      	b.n	8005906 <_printf_float+0x8a>
 800595e:	6863      	ldr	r3, [r4, #4]
 8005960:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	d142      	bne.n	80059ee <_printf_float+0x172>
 8005968:	2306      	movs	r3, #6
 800596a:	6063      	str	r3, [r4, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	9206      	str	r2, [sp, #24]
 8005970:	aa0e      	add	r2, sp, #56	; 0x38
 8005972:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005976:	aa0d      	add	r2, sp, #52	; 0x34
 8005978:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800597c:	9203      	str	r2, [sp, #12]
 800597e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005982:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005986:	6023      	str	r3, [r4, #0]
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	4642      	mov	r2, r8
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	4628      	mov	r0, r5
 8005990:	4653      	mov	r3, sl
 8005992:	910b      	str	r1, [sp, #44]	; 0x2c
 8005994:	f7ff fed4 	bl	8005740 <__cvt>
 8005998:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800599a:	4680      	mov	r8, r0
 800599c:	2947      	cmp	r1, #71	; 0x47
 800599e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059a0:	d108      	bne.n	80059b4 <_printf_float+0x138>
 80059a2:	1cc8      	adds	r0, r1, #3
 80059a4:	db02      	blt.n	80059ac <_printf_float+0x130>
 80059a6:	6863      	ldr	r3, [r4, #4]
 80059a8:	4299      	cmp	r1, r3
 80059aa:	dd40      	ble.n	8005a2e <_printf_float+0x1b2>
 80059ac:	f1a9 0902 	sub.w	r9, r9, #2
 80059b0:	fa5f f989 	uxtb.w	r9, r9
 80059b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80059b8:	d81f      	bhi.n	80059fa <_printf_float+0x17e>
 80059ba:	464a      	mov	r2, r9
 80059bc:	3901      	subs	r1, #1
 80059be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059c2:	910d      	str	r1, [sp, #52]	; 0x34
 80059c4:	f7ff ff1b 	bl	80057fe <__exponent>
 80059c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059ca:	4682      	mov	sl, r0
 80059cc:	1813      	adds	r3, r2, r0
 80059ce:	2a01      	cmp	r2, #1
 80059d0:	6123      	str	r3, [r4, #16]
 80059d2:	dc02      	bgt.n	80059da <_printf_float+0x15e>
 80059d4:	6822      	ldr	r2, [r4, #0]
 80059d6:	07d2      	lsls	r2, r2, #31
 80059d8:	d501      	bpl.n	80059de <_printf_float+0x162>
 80059da:	3301      	adds	r3, #1
 80059dc:	6123      	str	r3, [r4, #16]
 80059de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d09b      	beq.n	800591e <_printf_float+0xa2>
 80059e6:	232d      	movs	r3, #45	; 0x2d
 80059e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ec:	e797      	b.n	800591e <_printf_float+0xa2>
 80059ee:	2947      	cmp	r1, #71	; 0x47
 80059f0:	d1bc      	bne.n	800596c <_printf_float+0xf0>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1ba      	bne.n	800596c <_printf_float+0xf0>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e7b7      	b.n	800596a <_printf_float+0xee>
 80059fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80059fe:	d118      	bne.n	8005a32 <_printf_float+0x1b6>
 8005a00:	2900      	cmp	r1, #0
 8005a02:	6863      	ldr	r3, [r4, #4]
 8005a04:	dd0b      	ble.n	8005a1e <_printf_float+0x1a2>
 8005a06:	6121      	str	r1, [r4, #16]
 8005a08:	b913      	cbnz	r3, 8005a10 <_printf_float+0x194>
 8005a0a:	6822      	ldr	r2, [r4, #0]
 8005a0c:	07d0      	lsls	r0, r2, #31
 8005a0e:	d502      	bpl.n	8005a16 <_printf_float+0x19a>
 8005a10:	3301      	adds	r3, #1
 8005a12:	440b      	add	r3, r1
 8005a14:	6123      	str	r3, [r4, #16]
 8005a16:	f04f 0a00 	mov.w	sl, #0
 8005a1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a1c:	e7df      	b.n	80059de <_printf_float+0x162>
 8005a1e:	b913      	cbnz	r3, 8005a26 <_printf_float+0x1aa>
 8005a20:	6822      	ldr	r2, [r4, #0]
 8005a22:	07d2      	lsls	r2, r2, #31
 8005a24:	d501      	bpl.n	8005a2a <_printf_float+0x1ae>
 8005a26:	3302      	adds	r3, #2
 8005a28:	e7f4      	b.n	8005a14 <_printf_float+0x198>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e7f2      	b.n	8005a14 <_printf_float+0x198>
 8005a2e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a34:	4299      	cmp	r1, r3
 8005a36:	db05      	blt.n	8005a44 <_printf_float+0x1c8>
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	6121      	str	r1, [r4, #16]
 8005a3c:	07d8      	lsls	r0, r3, #31
 8005a3e:	d5ea      	bpl.n	8005a16 <_printf_float+0x19a>
 8005a40:	1c4b      	adds	r3, r1, #1
 8005a42:	e7e7      	b.n	8005a14 <_printf_float+0x198>
 8005a44:	2900      	cmp	r1, #0
 8005a46:	bfcc      	ite	gt
 8005a48:	2201      	movgt	r2, #1
 8005a4a:	f1c1 0202 	rsble	r2, r1, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	e7e0      	b.n	8005a14 <_printf_float+0x198>
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	055a      	lsls	r2, r3, #21
 8005a56:	d407      	bmi.n	8005a68 <_printf_float+0x1ec>
 8005a58:	6923      	ldr	r3, [r4, #16]
 8005a5a:	4642      	mov	r2, r8
 8005a5c:	4631      	mov	r1, r6
 8005a5e:	4628      	mov	r0, r5
 8005a60:	47b8      	blx	r7
 8005a62:	3001      	adds	r0, #1
 8005a64:	d12b      	bne.n	8005abe <_printf_float+0x242>
 8005a66:	e764      	b.n	8005932 <_printf_float+0xb6>
 8005a68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a6c:	f240 80dd 	bls.w	8005c2a <_printf_float+0x3ae>
 8005a70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a74:	2200      	movs	r2, #0
 8005a76:	2300      	movs	r3, #0
 8005a78:	f7fb f84a 	bl	8000b10 <__aeabi_dcmpeq>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d033      	beq.n	8005ae8 <_printf_float+0x26c>
 8005a80:	2301      	movs	r3, #1
 8005a82:	4631      	mov	r1, r6
 8005a84:	4628      	mov	r0, r5
 8005a86:	4a35      	ldr	r2, [pc, #212]	; (8005b5c <_printf_float+0x2e0>)
 8005a88:	47b8      	blx	r7
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	f43f af51 	beq.w	8005932 <_printf_float+0xb6>
 8005a90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a94:	429a      	cmp	r2, r3
 8005a96:	db02      	blt.n	8005a9e <_printf_float+0x222>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	07d8      	lsls	r0, r3, #31
 8005a9c:	d50f      	bpl.n	8005abe <_printf_float+0x242>
 8005a9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	47b8      	blx	r7
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	f43f af42 	beq.w	8005932 <_printf_float+0xb6>
 8005aae:	f04f 0800 	mov.w	r8, #0
 8005ab2:	f104 091a 	add.w	r9, r4, #26
 8005ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	4543      	cmp	r3, r8
 8005abc:	dc09      	bgt.n	8005ad2 <_printf_float+0x256>
 8005abe:	6823      	ldr	r3, [r4, #0]
 8005ac0:	079b      	lsls	r3, r3, #30
 8005ac2:	f100 8102 	bmi.w	8005cca <_printf_float+0x44e>
 8005ac6:	68e0      	ldr	r0, [r4, #12]
 8005ac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005aca:	4298      	cmp	r0, r3
 8005acc:	bfb8      	it	lt
 8005ace:	4618      	movlt	r0, r3
 8005ad0:	e731      	b.n	8005936 <_printf_float+0xba>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	464a      	mov	r2, r9
 8005ad6:	4631      	mov	r1, r6
 8005ad8:	4628      	mov	r0, r5
 8005ada:	47b8      	blx	r7
 8005adc:	3001      	adds	r0, #1
 8005ade:	f43f af28 	beq.w	8005932 <_printf_float+0xb6>
 8005ae2:	f108 0801 	add.w	r8, r8, #1
 8005ae6:	e7e6      	b.n	8005ab6 <_printf_float+0x23a>
 8005ae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	dc38      	bgt.n	8005b60 <_printf_float+0x2e4>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4631      	mov	r1, r6
 8005af2:	4628      	mov	r0, r5
 8005af4:	4a19      	ldr	r2, [pc, #100]	; (8005b5c <_printf_float+0x2e0>)
 8005af6:	47b8      	blx	r7
 8005af8:	3001      	adds	r0, #1
 8005afa:	f43f af1a 	beq.w	8005932 <_printf_float+0xb6>
 8005afe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b02:	4313      	orrs	r3, r2
 8005b04:	d102      	bne.n	8005b0c <_printf_float+0x290>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	07d9      	lsls	r1, r3, #31
 8005b0a:	d5d8      	bpl.n	8005abe <_printf_float+0x242>
 8005b0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b10:	4631      	mov	r1, r6
 8005b12:	4628      	mov	r0, r5
 8005b14:	47b8      	blx	r7
 8005b16:	3001      	adds	r0, #1
 8005b18:	f43f af0b 	beq.w	8005932 <_printf_float+0xb6>
 8005b1c:	f04f 0900 	mov.w	r9, #0
 8005b20:	f104 0a1a 	add.w	sl, r4, #26
 8005b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b26:	425b      	negs	r3, r3
 8005b28:	454b      	cmp	r3, r9
 8005b2a:	dc01      	bgt.n	8005b30 <_printf_float+0x2b4>
 8005b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b2e:	e794      	b.n	8005a5a <_printf_float+0x1de>
 8005b30:	2301      	movs	r3, #1
 8005b32:	4652      	mov	r2, sl
 8005b34:	4631      	mov	r1, r6
 8005b36:	4628      	mov	r0, r5
 8005b38:	47b8      	blx	r7
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f43f aef9 	beq.w	8005932 <_printf_float+0xb6>
 8005b40:	f109 0901 	add.w	r9, r9, #1
 8005b44:	e7ee      	b.n	8005b24 <_printf_float+0x2a8>
 8005b46:	bf00      	nop
 8005b48:	7fefffff 	.word	0x7fefffff
 8005b4c:	0800857c 	.word	0x0800857c
 8005b50:	08008580 	.word	0x08008580
 8005b54:	08008588 	.word	0x08008588
 8005b58:	08008584 	.word	0x08008584
 8005b5c:	0800858c 	.word	0x0800858c
 8005b60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b64:	429a      	cmp	r2, r3
 8005b66:	bfa8      	it	ge
 8005b68:	461a      	movge	r2, r3
 8005b6a:	2a00      	cmp	r2, #0
 8005b6c:	4691      	mov	r9, r2
 8005b6e:	dc37      	bgt.n	8005be0 <_printf_float+0x364>
 8005b70:	f04f 0b00 	mov.w	fp, #0
 8005b74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b78:	f104 021a 	add.w	r2, r4, #26
 8005b7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b80:	ebaa 0309 	sub.w	r3, sl, r9
 8005b84:	455b      	cmp	r3, fp
 8005b86:	dc33      	bgt.n	8005bf0 <_printf_float+0x374>
 8005b88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	db3b      	blt.n	8005c08 <_printf_float+0x38c>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	07da      	lsls	r2, r3, #31
 8005b94:	d438      	bmi.n	8005c08 <_printf_float+0x38c>
 8005b96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b98:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b9a:	eba2 030a 	sub.w	r3, r2, sl
 8005b9e:	eba2 0901 	sub.w	r9, r2, r1
 8005ba2:	4599      	cmp	r9, r3
 8005ba4:	bfa8      	it	ge
 8005ba6:	4699      	movge	r9, r3
 8005ba8:	f1b9 0f00 	cmp.w	r9, #0
 8005bac:	dc34      	bgt.n	8005c18 <_printf_float+0x39c>
 8005bae:	f04f 0800 	mov.w	r8, #0
 8005bb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bb6:	f104 0a1a 	add.w	sl, r4, #26
 8005bba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	eba3 0309 	sub.w	r3, r3, r9
 8005bc4:	4543      	cmp	r3, r8
 8005bc6:	f77f af7a 	ble.w	8005abe <_printf_float+0x242>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	4652      	mov	r2, sl
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	47b8      	blx	r7
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	f43f aeac 	beq.w	8005932 <_printf_float+0xb6>
 8005bda:	f108 0801 	add.w	r8, r8, #1
 8005bde:	e7ec      	b.n	8005bba <_printf_float+0x33e>
 8005be0:	4613      	mov	r3, r2
 8005be2:	4631      	mov	r1, r6
 8005be4:	4642      	mov	r2, r8
 8005be6:	4628      	mov	r0, r5
 8005be8:	47b8      	blx	r7
 8005bea:	3001      	adds	r0, #1
 8005bec:	d1c0      	bne.n	8005b70 <_printf_float+0x2f4>
 8005bee:	e6a0      	b.n	8005932 <_printf_float+0xb6>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	920b      	str	r2, [sp, #44]	; 0x2c
 8005bf8:	47b8      	blx	r7
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	f43f ae99 	beq.w	8005932 <_printf_float+0xb6>
 8005c00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c02:	f10b 0b01 	add.w	fp, fp, #1
 8005c06:	e7b9      	b.n	8005b7c <_printf_float+0x300>
 8005c08:	4631      	mov	r1, r6
 8005c0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c0e:	4628      	mov	r0, r5
 8005c10:	47b8      	blx	r7
 8005c12:	3001      	adds	r0, #1
 8005c14:	d1bf      	bne.n	8005b96 <_printf_float+0x31a>
 8005c16:	e68c      	b.n	8005932 <_printf_float+0xb6>
 8005c18:	464b      	mov	r3, r9
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	eb08 020a 	add.w	r2, r8, sl
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	d1c2      	bne.n	8005bae <_printf_float+0x332>
 8005c28:	e683      	b.n	8005932 <_printf_float+0xb6>
 8005c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c2c:	2a01      	cmp	r2, #1
 8005c2e:	dc01      	bgt.n	8005c34 <_printf_float+0x3b8>
 8005c30:	07db      	lsls	r3, r3, #31
 8005c32:	d537      	bpl.n	8005ca4 <_printf_float+0x428>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4642      	mov	r2, r8
 8005c38:	4631      	mov	r1, r6
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	47b8      	blx	r7
 8005c3e:	3001      	adds	r0, #1
 8005c40:	f43f ae77 	beq.w	8005932 <_printf_float+0xb6>
 8005c44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c48:	4631      	mov	r1, r6
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	47b8      	blx	r7
 8005c4e:	3001      	adds	r0, #1
 8005c50:	f43f ae6f 	beq.w	8005932 <_printf_float+0xb6>
 8005c54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c58:	2200      	movs	r2, #0
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f7fa ff58 	bl	8000b10 <__aeabi_dcmpeq>
 8005c60:	b9d8      	cbnz	r0, 8005c9a <_printf_float+0x41e>
 8005c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c64:	f108 0201 	add.w	r2, r8, #1
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	47b8      	blx	r7
 8005c70:	3001      	adds	r0, #1
 8005c72:	d10e      	bne.n	8005c92 <_printf_float+0x416>
 8005c74:	e65d      	b.n	8005932 <_printf_float+0xb6>
 8005c76:	2301      	movs	r3, #1
 8005c78:	464a      	mov	r2, r9
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b8      	blx	r7
 8005c80:	3001      	adds	r0, #1
 8005c82:	f43f ae56 	beq.w	8005932 <_printf_float+0xb6>
 8005c86:	f108 0801 	add.w	r8, r8, #1
 8005c8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	4543      	cmp	r3, r8
 8005c90:	dcf1      	bgt.n	8005c76 <_printf_float+0x3fa>
 8005c92:	4653      	mov	r3, sl
 8005c94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c98:	e6e0      	b.n	8005a5c <_printf_float+0x1e0>
 8005c9a:	f04f 0800 	mov.w	r8, #0
 8005c9e:	f104 091a 	add.w	r9, r4, #26
 8005ca2:	e7f2      	b.n	8005c8a <_printf_float+0x40e>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	4642      	mov	r2, r8
 8005ca8:	e7df      	b.n	8005c6a <_printf_float+0x3ee>
 8005caa:	2301      	movs	r3, #1
 8005cac:	464a      	mov	r2, r9
 8005cae:	4631      	mov	r1, r6
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	47b8      	blx	r7
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	f43f ae3c 	beq.w	8005932 <_printf_float+0xb6>
 8005cba:	f108 0801 	add.w	r8, r8, #1
 8005cbe:	68e3      	ldr	r3, [r4, #12]
 8005cc0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cc2:	1a5b      	subs	r3, r3, r1
 8005cc4:	4543      	cmp	r3, r8
 8005cc6:	dcf0      	bgt.n	8005caa <_printf_float+0x42e>
 8005cc8:	e6fd      	b.n	8005ac6 <_printf_float+0x24a>
 8005cca:	f04f 0800 	mov.w	r8, #0
 8005cce:	f104 0919 	add.w	r9, r4, #25
 8005cd2:	e7f4      	b.n	8005cbe <_printf_float+0x442>

08005cd4 <_printf_common>:
 8005cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd8:	4616      	mov	r6, r2
 8005cda:	4699      	mov	r9, r3
 8005cdc:	688a      	ldr	r2, [r1, #8]
 8005cde:	690b      	ldr	r3, [r1, #16]
 8005ce0:	4607      	mov	r7, r0
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	bfb8      	it	lt
 8005ce6:	4613      	movlt	r3, r2
 8005ce8:	6033      	str	r3, [r6, #0]
 8005cea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cee:	460c      	mov	r4, r1
 8005cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cf4:	b10a      	cbz	r2, 8005cfa <_printf_common+0x26>
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	6033      	str	r3, [r6, #0]
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	0699      	lsls	r1, r3, #26
 8005cfe:	bf42      	ittt	mi
 8005d00:	6833      	ldrmi	r3, [r6, #0]
 8005d02:	3302      	addmi	r3, #2
 8005d04:	6033      	strmi	r3, [r6, #0]
 8005d06:	6825      	ldr	r5, [r4, #0]
 8005d08:	f015 0506 	ands.w	r5, r5, #6
 8005d0c:	d106      	bne.n	8005d1c <_printf_common+0x48>
 8005d0e:	f104 0a19 	add.w	sl, r4, #25
 8005d12:	68e3      	ldr	r3, [r4, #12]
 8005d14:	6832      	ldr	r2, [r6, #0]
 8005d16:	1a9b      	subs	r3, r3, r2
 8005d18:	42ab      	cmp	r3, r5
 8005d1a:	dc28      	bgt.n	8005d6e <_printf_common+0x9a>
 8005d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d20:	1e13      	subs	r3, r2, #0
 8005d22:	6822      	ldr	r2, [r4, #0]
 8005d24:	bf18      	it	ne
 8005d26:	2301      	movne	r3, #1
 8005d28:	0692      	lsls	r2, r2, #26
 8005d2a:	d42d      	bmi.n	8005d88 <_printf_common+0xb4>
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	4638      	mov	r0, r7
 8005d30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d34:	47c0      	blx	r8
 8005d36:	3001      	adds	r0, #1
 8005d38:	d020      	beq.n	8005d7c <_printf_common+0xa8>
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	68e5      	ldr	r5, [r4, #12]
 8005d3e:	f003 0306 	and.w	r3, r3, #6
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	bf18      	it	ne
 8005d46:	2500      	movne	r5, #0
 8005d48:	6832      	ldr	r2, [r6, #0]
 8005d4a:	f04f 0600 	mov.w	r6, #0
 8005d4e:	68a3      	ldr	r3, [r4, #8]
 8005d50:	bf08      	it	eq
 8005d52:	1aad      	subeq	r5, r5, r2
 8005d54:	6922      	ldr	r2, [r4, #16]
 8005d56:	bf08      	it	eq
 8005d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	bfc4      	itt	gt
 8005d60:	1a9b      	subgt	r3, r3, r2
 8005d62:	18ed      	addgt	r5, r5, r3
 8005d64:	341a      	adds	r4, #26
 8005d66:	42b5      	cmp	r5, r6
 8005d68:	d11a      	bne.n	8005da0 <_printf_common+0xcc>
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	e008      	b.n	8005d80 <_printf_common+0xac>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4652      	mov	r2, sl
 8005d72:	4649      	mov	r1, r9
 8005d74:	4638      	mov	r0, r7
 8005d76:	47c0      	blx	r8
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d103      	bne.n	8005d84 <_printf_common+0xb0>
 8005d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d84:	3501      	adds	r5, #1
 8005d86:	e7c4      	b.n	8005d12 <_printf_common+0x3e>
 8005d88:	2030      	movs	r0, #48	; 0x30
 8005d8a:	18e1      	adds	r1, r4, r3
 8005d8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d96:	4422      	add	r2, r4
 8005d98:	3302      	adds	r3, #2
 8005d9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d9e:	e7c5      	b.n	8005d2c <_printf_common+0x58>
 8005da0:	2301      	movs	r3, #1
 8005da2:	4622      	mov	r2, r4
 8005da4:	4649      	mov	r1, r9
 8005da6:	4638      	mov	r0, r7
 8005da8:	47c0      	blx	r8
 8005daa:	3001      	adds	r0, #1
 8005dac:	d0e6      	beq.n	8005d7c <_printf_common+0xa8>
 8005dae:	3601      	adds	r6, #1
 8005db0:	e7d9      	b.n	8005d66 <_printf_common+0x92>
	...

08005db4 <_printf_i>:
 8005db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005db8:	460c      	mov	r4, r1
 8005dba:	7e27      	ldrb	r7, [r4, #24]
 8005dbc:	4691      	mov	r9, r2
 8005dbe:	2f78      	cmp	r7, #120	; 0x78
 8005dc0:	4680      	mov	r8, r0
 8005dc2:	469a      	mov	sl, r3
 8005dc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005dc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dca:	d807      	bhi.n	8005ddc <_printf_i+0x28>
 8005dcc:	2f62      	cmp	r7, #98	; 0x62
 8005dce:	d80a      	bhi.n	8005de6 <_printf_i+0x32>
 8005dd0:	2f00      	cmp	r7, #0
 8005dd2:	f000 80d9 	beq.w	8005f88 <_printf_i+0x1d4>
 8005dd6:	2f58      	cmp	r7, #88	; 0x58
 8005dd8:	f000 80a4 	beq.w	8005f24 <_printf_i+0x170>
 8005ddc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005de0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005de4:	e03a      	b.n	8005e5c <_printf_i+0xa8>
 8005de6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dea:	2b15      	cmp	r3, #21
 8005dec:	d8f6      	bhi.n	8005ddc <_printf_i+0x28>
 8005dee:	a001      	add	r0, pc, #4	; (adr r0, 8005df4 <_printf_i+0x40>)
 8005df0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005df4:	08005e4d 	.word	0x08005e4d
 8005df8:	08005e61 	.word	0x08005e61
 8005dfc:	08005ddd 	.word	0x08005ddd
 8005e00:	08005ddd 	.word	0x08005ddd
 8005e04:	08005ddd 	.word	0x08005ddd
 8005e08:	08005ddd 	.word	0x08005ddd
 8005e0c:	08005e61 	.word	0x08005e61
 8005e10:	08005ddd 	.word	0x08005ddd
 8005e14:	08005ddd 	.word	0x08005ddd
 8005e18:	08005ddd 	.word	0x08005ddd
 8005e1c:	08005ddd 	.word	0x08005ddd
 8005e20:	08005f6f 	.word	0x08005f6f
 8005e24:	08005e91 	.word	0x08005e91
 8005e28:	08005f51 	.word	0x08005f51
 8005e2c:	08005ddd 	.word	0x08005ddd
 8005e30:	08005ddd 	.word	0x08005ddd
 8005e34:	08005f91 	.word	0x08005f91
 8005e38:	08005ddd 	.word	0x08005ddd
 8005e3c:	08005e91 	.word	0x08005e91
 8005e40:	08005ddd 	.word	0x08005ddd
 8005e44:	08005ddd 	.word	0x08005ddd
 8005e48:	08005f59 	.word	0x08005f59
 8005e4c:	680b      	ldr	r3, [r1, #0]
 8005e4e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e52:	1d1a      	adds	r2, r3, #4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	600a      	str	r2, [r1, #0]
 8005e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e0a4      	b.n	8005faa <_printf_i+0x1f6>
 8005e60:	6825      	ldr	r5, [r4, #0]
 8005e62:	6808      	ldr	r0, [r1, #0]
 8005e64:	062e      	lsls	r6, r5, #24
 8005e66:	f100 0304 	add.w	r3, r0, #4
 8005e6a:	d50a      	bpl.n	8005e82 <_printf_i+0xce>
 8005e6c:	6805      	ldr	r5, [r0, #0]
 8005e6e:	600b      	str	r3, [r1, #0]
 8005e70:	2d00      	cmp	r5, #0
 8005e72:	da03      	bge.n	8005e7c <_printf_i+0xc8>
 8005e74:	232d      	movs	r3, #45	; 0x2d
 8005e76:	426d      	negs	r5, r5
 8005e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e7c:	230a      	movs	r3, #10
 8005e7e:	485e      	ldr	r0, [pc, #376]	; (8005ff8 <_printf_i+0x244>)
 8005e80:	e019      	b.n	8005eb6 <_printf_i+0x102>
 8005e82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005e86:	6805      	ldr	r5, [r0, #0]
 8005e88:	600b      	str	r3, [r1, #0]
 8005e8a:	bf18      	it	ne
 8005e8c:	b22d      	sxthne	r5, r5
 8005e8e:	e7ef      	b.n	8005e70 <_printf_i+0xbc>
 8005e90:	680b      	ldr	r3, [r1, #0]
 8005e92:	6825      	ldr	r5, [r4, #0]
 8005e94:	1d18      	adds	r0, r3, #4
 8005e96:	6008      	str	r0, [r1, #0]
 8005e98:	0628      	lsls	r0, r5, #24
 8005e9a:	d501      	bpl.n	8005ea0 <_printf_i+0xec>
 8005e9c:	681d      	ldr	r5, [r3, #0]
 8005e9e:	e002      	b.n	8005ea6 <_printf_i+0xf2>
 8005ea0:	0669      	lsls	r1, r5, #25
 8005ea2:	d5fb      	bpl.n	8005e9c <_printf_i+0xe8>
 8005ea4:	881d      	ldrh	r5, [r3, #0]
 8005ea6:	2f6f      	cmp	r7, #111	; 0x6f
 8005ea8:	bf0c      	ite	eq
 8005eaa:	2308      	moveq	r3, #8
 8005eac:	230a      	movne	r3, #10
 8005eae:	4852      	ldr	r0, [pc, #328]	; (8005ff8 <_printf_i+0x244>)
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eb6:	6866      	ldr	r6, [r4, #4]
 8005eb8:	2e00      	cmp	r6, #0
 8005eba:	bfa8      	it	ge
 8005ebc:	6821      	ldrge	r1, [r4, #0]
 8005ebe:	60a6      	str	r6, [r4, #8]
 8005ec0:	bfa4      	itt	ge
 8005ec2:	f021 0104 	bicge.w	r1, r1, #4
 8005ec6:	6021      	strge	r1, [r4, #0]
 8005ec8:	b90d      	cbnz	r5, 8005ece <_printf_i+0x11a>
 8005eca:	2e00      	cmp	r6, #0
 8005ecc:	d04d      	beq.n	8005f6a <_printf_i+0x1b6>
 8005ece:	4616      	mov	r6, r2
 8005ed0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ed4:	fb03 5711 	mls	r7, r3, r1, r5
 8005ed8:	5dc7      	ldrb	r7, [r0, r7]
 8005eda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ede:	462f      	mov	r7, r5
 8005ee0:	42bb      	cmp	r3, r7
 8005ee2:	460d      	mov	r5, r1
 8005ee4:	d9f4      	bls.n	8005ed0 <_printf_i+0x11c>
 8005ee6:	2b08      	cmp	r3, #8
 8005ee8:	d10b      	bne.n	8005f02 <_printf_i+0x14e>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	07df      	lsls	r7, r3, #31
 8005eee:	d508      	bpl.n	8005f02 <_printf_i+0x14e>
 8005ef0:	6923      	ldr	r3, [r4, #16]
 8005ef2:	6861      	ldr	r1, [r4, #4]
 8005ef4:	4299      	cmp	r1, r3
 8005ef6:	bfde      	ittt	le
 8005ef8:	2330      	movle	r3, #48	; 0x30
 8005efa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005efe:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005f02:	1b92      	subs	r2, r2, r6
 8005f04:	6122      	str	r2, [r4, #16]
 8005f06:	464b      	mov	r3, r9
 8005f08:	4621      	mov	r1, r4
 8005f0a:	4640      	mov	r0, r8
 8005f0c:	f8cd a000 	str.w	sl, [sp]
 8005f10:	aa03      	add	r2, sp, #12
 8005f12:	f7ff fedf 	bl	8005cd4 <_printf_common>
 8005f16:	3001      	adds	r0, #1
 8005f18:	d14c      	bne.n	8005fb4 <_printf_i+0x200>
 8005f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f1e:	b004      	add	sp, #16
 8005f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f24:	4834      	ldr	r0, [pc, #208]	; (8005ff8 <_printf_i+0x244>)
 8005f26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f2a:	680e      	ldr	r6, [r1, #0]
 8005f2c:	6823      	ldr	r3, [r4, #0]
 8005f2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f32:	061f      	lsls	r7, r3, #24
 8005f34:	600e      	str	r6, [r1, #0]
 8005f36:	d514      	bpl.n	8005f62 <_printf_i+0x1ae>
 8005f38:	07d9      	lsls	r1, r3, #31
 8005f3a:	bf44      	itt	mi
 8005f3c:	f043 0320 	orrmi.w	r3, r3, #32
 8005f40:	6023      	strmi	r3, [r4, #0]
 8005f42:	b91d      	cbnz	r5, 8005f4c <_printf_i+0x198>
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	f023 0320 	bic.w	r3, r3, #32
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	e7af      	b.n	8005eb0 <_printf_i+0xfc>
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	f043 0320 	orr.w	r3, r3, #32
 8005f56:	6023      	str	r3, [r4, #0]
 8005f58:	2378      	movs	r3, #120	; 0x78
 8005f5a:	4828      	ldr	r0, [pc, #160]	; (8005ffc <_printf_i+0x248>)
 8005f5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f60:	e7e3      	b.n	8005f2a <_printf_i+0x176>
 8005f62:	065e      	lsls	r6, r3, #25
 8005f64:	bf48      	it	mi
 8005f66:	b2ad      	uxthmi	r5, r5
 8005f68:	e7e6      	b.n	8005f38 <_printf_i+0x184>
 8005f6a:	4616      	mov	r6, r2
 8005f6c:	e7bb      	b.n	8005ee6 <_printf_i+0x132>
 8005f6e:	680b      	ldr	r3, [r1, #0]
 8005f70:	6826      	ldr	r6, [r4, #0]
 8005f72:	1d1d      	adds	r5, r3, #4
 8005f74:	6960      	ldr	r0, [r4, #20]
 8005f76:	600d      	str	r5, [r1, #0]
 8005f78:	0635      	lsls	r5, r6, #24
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	d501      	bpl.n	8005f82 <_printf_i+0x1ce>
 8005f7e:	6018      	str	r0, [r3, #0]
 8005f80:	e002      	b.n	8005f88 <_printf_i+0x1d4>
 8005f82:	0671      	lsls	r1, r6, #25
 8005f84:	d5fb      	bpl.n	8005f7e <_printf_i+0x1ca>
 8005f86:	8018      	strh	r0, [r3, #0]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	4616      	mov	r6, r2
 8005f8c:	6123      	str	r3, [r4, #16]
 8005f8e:	e7ba      	b.n	8005f06 <_printf_i+0x152>
 8005f90:	680b      	ldr	r3, [r1, #0]
 8005f92:	1d1a      	adds	r2, r3, #4
 8005f94:	600a      	str	r2, [r1, #0]
 8005f96:	681e      	ldr	r6, [r3, #0]
 8005f98:	2100      	movs	r1, #0
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	6862      	ldr	r2, [r4, #4]
 8005f9e:	f000 fef9 	bl	8006d94 <memchr>
 8005fa2:	b108      	cbz	r0, 8005fa8 <_printf_i+0x1f4>
 8005fa4:	1b80      	subs	r0, r0, r6
 8005fa6:	6060      	str	r0, [r4, #4]
 8005fa8:	6863      	ldr	r3, [r4, #4]
 8005faa:	6123      	str	r3, [r4, #16]
 8005fac:	2300      	movs	r3, #0
 8005fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fb2:	e7a8      	b.n	8005f06 <_printf_i+0x152>
 8005fb4:	4632      	mov	r2, r6
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	4640      	mov	r0, r8
 8005fba:	6923      	ldr	r3, [r4, #16]
 8005fbc:	47d0      	blx	sl
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	d0ab      	beq.n	8005f1a <_printf_i+0x166>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	079b      	lsls	r3, r3, #30
 8005fc6:	d413      	bmi.n	8005ff0 <_printf_i+0x23c>
 8005fc8:	68e0      	ldr	r0, [r4, #12]
 8005fca:	9b03      	ldr	r3, [sp, #12]
 8005fcc:	4298      	cmp	r0, r3
 8005fce:	bfb8      	it	lt
 8005fd0:	4618      	movlt	r0, r3
 8005fd2:	e7a4      	b.n	8005f1e <_printf_i+0x16a>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	4632      	mov	r2, r6
 8005fd8:	4649      	mov	r1, r9
 8005fda:	4640      	mov	r0, r8
 8005fdc:	47d0      	blx	sl
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d09b      	beq.n	8005f1a <_printf_i+0x166>
 8005fe2:	3501      	adds	r5, #1
 8005fe4:	68e3      	ldr	r3, [r4, #12]
 8005fe6:	9903      	ldr	r1, [sp, #12]
 8005fe8:	1a5b      	subs	r3, r3, r1
 8005fea:	42ab      	cmp	r3, r5
 8005fec:	dcf2      	bgt.n	8005fd4 <_printf_i+0x220>
 8005fee:	e7eb      	b.n	8005fc8 <_printf_i+0x214>
 8005ff0:	2500      	movs	r5, #0
 8005ff2:	f104 0619 	add.w	r6, r4, #25
 8005ff6:	e7f5      	b.n	8005fe4 <_printf_i+0x230>
 8005ff8:	0800858e 	.word	0x0800858e
 8005ffc:	0800859f 	.word	0x0800859f

08006000 <siprintf>:
 8006000:	b40e      	push	{r1, r2, r3}
 8006002:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006006:	b500      	push	{lr}
 8006008:	b09c      	sub	sp, #112	; 0x70
 800600a:	ab1d      	add	r3, sp, #116	; 0x74
 800600c:	9002      	str	r0, [sp, #8]
 800600e:	9006      	str	r0, [sp, #24]
 8006010:	9107      	str	r1, [sp, #28]
 8006012:	9104      	str	r1, [sp, #16]
 8006014:	4808      	ldr	r0, [pc, #32]	; (8006038 <siprintf+0x38>)
 8006016:	4909      	ldr	r1, [pc, #36]	; (800603c <siprintf+0x3c>)
 8006018:	f853 2b04 	ldr.w	r2, [r3], #4
 800601c:	9105      	str	r1, [sp, #20]
 800601e:	6800      	ldr	r0, [r0, #0]
 8006020:	a902      	add	r1, sp, #8
 8006022:	9301      	str	r3, [sp, #4]
 8006024:	f001 fb56 	bl	80076d4 <_svfiprintf_r>
 8006028:	2200      	movs	r2, #0
 800602a:	9b02      	ldr	r3, [sp, #8]
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	b01c      	add	sp, #112	; 0x70
 8006030:	f85d eb04 	ldr.w	lr, [sp], #4
 8006034:	b003      	add	sp, #12
 8006036:	4770      	bx	lr
 8006038:	2000009c 	.word	0x2000009c
 800603c:	ffff0208 	.word	0xffff0208

08006040 <_vsiprintf_r>:
 8006040:	b500      	push	{lr}
 8006042:	b09b      	sub	sp, #108	; 0x6c
 8006044:	9100      	str	r1, [sp, #0]
 8006046:	9104      	str	r1, [sp, #16]
 8006048:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800604c:	9105      	str	r1, [sp, #20]
 800604e:	9102      	str	r1, [sp, #8]
 8006050:	4905      	ldr	r1, [pc, #20]	; (8006068 <_vsiprintf_r+0x28>)
 8006052:	9103      	str	r1, [sp, #12]
 8006054:	4669      	mov	r1, sp
 8006056:	f001 fb3d 	bl	80076d4 <_svfiprintf_r>
 800605a:	2200      	movs	r2, #0
 800605c:	9b00      	ldr	r3, [sp, #0]
 800605e:	701a      	strb	r2, [r3, #0]
 8006060:	b01b      	add	sp, #108	; 0x6c
 8006062:	f85d fb04 	ldr.w	pc, [sp], #4
 8006066:	bf00      	nop
 8006068:	ffff0208 	.word	0xffff0208

0800606c <vsiprintf>:
 800606c:	4613      	mov	r3, r2
 800606e:	460a      	mov	r2, r1
 8006070:	4601      	mov	r1, r0
 8006072:	4802      	ldr	r0, [pc, #8]	; (800607c <vsiprintf+0x10>)
 8006074:	6800      	ldr	r0, [r0, #0]
 8006076:	f7ff bfe3 	b.w	8006040 <_vsiprintf_r>
 800607a:	bf00      	nop
 800607c:	2000009c 	.word	0x2000009c

08006080 <quorem>:
 8006080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	6903      	ldr	r3, [r0, #16]
 8006086:	690c      	ldr	r4, [r1, #16]
 8006088:	4607      	mov	r7, r0
 800608a:	42a3      	cmp	r3, r4
 800608c:	f2c0 8083 	blt.w	8006196 <quorem+0x116>
 8006090:	3c01      	subs	r4, #1
 8006092:	f100 0514 	add.w	r5, r0, #20
 8006096:	f101 0814 	add.w	r8, r1, #20
 800609a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060a8:	3301      	adds	r3, #1
 80060aa:	429a      	cmp	r2, r3
 80060ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80060b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80060b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060b8:	d332      	bcc.n	8006120 <quorem+0xa0>
 80060ba:	f04f 0e00 	mov.w	lr, #0
 80060be:	4640      	mov	r0, r8
 80060c0:	46ac      	mov	ip, r5
 80060c2:	46f2      	mov	sl, lr
 80060c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80060c8:	b293      	uxth	r3, r2
 80060ca:	fb06 e303 	mla	r3, r6, r3, lr
 80060ce:	0c12      	lsrs	r2, r2, #16
 80060d0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80060d4:	fb06 e202 	mla	r2, r6, r2, lr
 80060d8:	b29b      	uxth	r3, r3
 80060da:	ebaa 0303 	sub.w	r3, sl, r3
 80060de:	f8dc a000 	ldr.w	sl, [ip]
 80060e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80060e6:	fa1f fa8a 	uxth.w	sl, sl
 80060ea:	4453      	add	r3, sl
 80060ec:	fa1f fa82 	uxth.w	sl, r2
 80060f0:	f8dc 2000 	ldr.w	r2, [ip]
 80060f4:	4581      	cmp	r9, r0
 80060f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80060fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060fe:	b29b      	uxth	r3, r3
 8006100:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006104:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006108:	f84c 3b04 	str.w	r3, [ip], #4
 800610c:	d2da      	bcs.n	80060c4 <quorem+0x44>
 800610e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006112:	b92b      	cbnz	r3, 8006120 <quorem+0xa0>
 8006114:	9b01      	ldr	r3, [sp, #4]
 8006116:	3b04      	subs	r3, #4
 8006118:	429d      	cmp	r5, r3
 800611a:	461a      	mov	r2, r3
 800611c:	d32f      	bcc.n	800617e <quorem+0xfe>
 800611e:	613c      	str	r4, [r7, #16]
 8006120:	4638      	mov	r0, r7
 8006122:	f001 f8bf 	bl	80072a4 <__mcmp>
 8006126:	2800      	cmp	r0, #0
 8006128:	db25      	blt.n	8006176 <quorem+0xf6>
 800612a:	4628      	mov	r0, r5
 800612c:	f04f 0c00 	mov.w	ip, #0
 8006130:	3601      	adds	r6, #1
 8006132:	f858 1b04 	ldr.w	r1, [r8], #4
 8006136:	f8d0 e000 	ldr.w	lr, [r0]
 800613a:	b28b      	uxth	r3, r1
 800613c:	ebac 0303 	sub.w	r3, ip, r3
 8006140:	fa1f f28e 	uxth.w	r2, lr
 8006144:	4413      	add	r3, r2
 8006146:	0c0a      	lsrs	r2, r1, #16
 8006148:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800614c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006150:	b29b      	uxth	r3, r3
 8006152:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006156:	45c1      	cmp	r9, r8
 8006158:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800615c:	f840 3b04 	str.w	r3, [r0], #4
 8006160:	d2e7      	bcs.n	8006132 <quorem+0xb2>
 8006162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006166:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800616a:	b922      	cbnz	r2, 8006176 <quorem+0xf6>
 800616c:	3b04      	subs	r3, #4
 800616e:	429d      	cmp	r5, r3
 8006170:	461a      	mov	r2, r3
 8006172:	d30a      	bcc.n	800618a <quorem+0x10a>
 8006174:	613c      	str	r4, [r7, #16]
 8006176:	4630      	mov	r0, r6
 8006178:	b003      	add	sp, #12
 800617a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	3b04      	subs	r3, #4
 8006182:	2a00      	cmp	r2, #0
 8006184:	d1cb      	bne.n	800611e <quorem+0x9e>
 8006186:	3c01      	subs	r4, #1
 8006188:	e7c6      	b.n	8006118 <quorem+0x98>
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	3b04      	subs	r3, #4
 800618e:	2a00      	cmp	r2, #0
 8006190:	d1f0      	bne.n	8006174 <quorem+0xf4>
 8006192:	3c01      	subs	r4, #1
 8006194:	e7eb      	b.n	800616e <quorem+0xee>
 8006196:	2000      	movs	r0, #0
 8006198:	e7ee      	b.n	8006178 <quorem+0xf8>
 800619a:	0000      	movs	r0, r0
 800619c:	0000      	movs	r0, r0
	...

080061a0 <_dtoa_r>:
 80061a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a4:	4616      	mov	r6, r2
 80061a6:	461f      	mov	r7, r3
 80061a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80061aa:	b099      	sub	sp, #100	; 0x64
 80061ac:	4605      	mov	r5, r0
 80061ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80061b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80061b6:	b974      	cbnz	r4, 80061d6 <_dtoa_r+0x36>
 80061b8:	2010      	movs	r0, #16
 80061ba:	f000 fde3 	bl	8006d84 <malloc>
 80061be:	4602      	mov	r2, r0
 80061c0:	6268      	str	r0, [r5, #36]	; 0x24
 80061c2:	b920      	cbnz	r0, 80061ce <_dtoa_r+0x2e>
 80061c4:	21ea      	movs	r1, #234	; 0xea
 80061c6:	4bae      	ldr	r3, [pc, #696]	; (8006480 <_dtoa_r+0x2e0>)
 80061c8:	48ae      	ldr	r0, [pc, #696]	; (8006484 <_dtoa_r+0x2e4>)
 80061ca:	f001 fb93 	bl	80078f4 <__assert_func>
 80061ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061d2:	6004      	str	r4, [r0, #0]
 80061d4:	60c4      	str	r4, [r0, #12]
 80061d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061d8:	6819      	ldr	r1, [r3, #0]
 80061da:	b151      	cbz	r1, 80061f2 <_dtoa_r+0x52>
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	2301      	movs	r3, #1
 80061e0:	4093      	lsls	r3, r2
 80061e2:	604a      	str	r2, [r1, #4]
 80061e4:	608b      	str	r3, [r1, #8]
 80061e6:	4628      	mov	r0, r5
 80061e8:	f000 fe22 	bl	8006e30 <_Bfree>
 80061ec:	2200      	movs	r2, #0
 80061ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	1e3b      	subs	r3, r7, #0
 80061f4:	bfaf      	iteee	ge
 80061f6:	2300      	movge	r3, #0
 80061f8:	2201      	movlt	r2, #1
 80061fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80061fe:	9305      	strlt	r3, [sp, #20]
 8006200:	bfa8      	it	ge
 8006202:	f8c8 3000 	strge.w	r3, [r8]
 8006206:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800620a:	4b9f      	ldr	r3, [pc, #636]	; (8006488 <_dtoa_r+0x2e8>)
 800620c:	bfb8      	it	lt
 800620e:	f8c8 2000 	strlt.w	r2, [r8]
 8006212:	ea33 0309 	bics.w	r3, r3, r9
 8006216:	d119      	bne.n	800624c <_dtoa_r+0xac>
 8006218:	f242 730f 	movw	r3, #9999	; 0x270f
 800621c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006224:	4333      	orrs	r3, r6
 8006226:	f000 8580 	beq.w	8006d2a <_dtoa_r+0xb8a>
 800622a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800622c:	b953      	cbnz	r3, 8006244 <_dtoa_r+0xa4>
 800622e:	4b97      	ldr	r3, [pc, #604]	; (800648c <_dtoa_r+0x2ec>)
 8006230:	e022      	b.n	8006278 <_dtoa_r+0xd8>
 8006232:	4b97      	ldr	r3, [pc, #604]	; (8006490 <_dtoa_r+0x2f0>)
 8006234:	9308      	str	r3, [sp, #32]
 8006236:	3308      	adds	r3, #8
 8006238:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	9808      	ldr	r0, [sp, #32]
 800623e:	b019      	add	sp, #100	; 0x64
 8006240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006244:	4b91      	ldr	r3, [pc, #580]	; (800648c <_dtoa_r+0x2ec>)
 8006246:	9308      	str	r3, [sp, #32]
 8006248:	3303      	adds	r3, #3
 800624a:	e7f5      	b.n	8006238 <_dtoa_r+0x98>
 800624c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006250:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006258:	2200      	movs	r2, #0
 800625a:	2300      	movs	r3, #0
 800625c:	f7fa fc58 	bl	8000b10 <__aeabi_dcmpeq>
 8006260:	4680      	mov	r8, r0
 8006262:	b158      	cbz	r0, 800627c <_dtoa_r+0xdc>
 8006264:	2301      	movs	r3, #1
 8006266:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 8559 	beq.w	8006d24 <_dtoa_r+0xb84>
 8006272:	4888      	ldr	r0, [pc, #544]	; (8006494 <_dtoa_r+0x2f4>)
 8006274:	6018      	str	r0, [r3, #0]
 8006276:	1e43      	subs	r3, r0, #1
 8006278:	9308      	str	r3, [sp, #32]
 800627a:	e7df      	b.n	800623c <_dtoa_r+0x9c>
 800627c:	ab16      	add	r3, sp, #88	; 0x58
 800627e:	9301      	str	r3, [sp, #4]
 8006280:	ab17      	add	r3, sp, #92	; 0x5c
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	4628      	mov	r0, r5
 8006286:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800628a:	f001 f8b7 	bl	80073fc <__d2b>
 800628e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006292:	4682      	mov	sl, r0
 8006294:	2c00      	cmp	r4, #0
 8006296:	d07e      	beq.n	8006396 <_dtoa_r+0x1f6>
 8006298:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800629c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800629e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80062a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80062aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80062ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80062b2:	2200      	movs	r2, #0
 80062b4:	4b78      	ldr	r3, [pc, #480]	; (8006498 <_dtoa_r+0x2f8>)
 80062b6:	f7fa f80b 	bl	80002d0 <__aeabi_dsub>
 80062ba:	a36b      	add	r3, pc, #428	; (adr r3, 8006468 <_dtoa_r+0x2c8>)
 80062bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c0:	f7fa f9be 	bl	8000640 <__aeabi_dmul>
 80062c4:	a36a      	add	r3, pc, #424	; (adr r3, 8006470 <_dtoa_r+0x2d0>)
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	f7fa f803 	bl	80002d4 <__adddf3>
 80062ce:	4606      	mov	r6, r0
 80062d0:	4620      	mov	r0, r4
 80062d2:	460f      	mov	r7, r1
 80062d4:	f7fa f94a 	bl	800056c <__aeabi_i2d>
 80062d8:	a367      	add	r3, pc, #412	; (adr r3, 8006478 <_dtoa_r+0x2d8>)
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	f7fa f9af 	bl	8000640 <__aeabi_dmul>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4630      	mov	r0, r6
 80062e8:	4639      	mov	r1, r7
 80062ea:	f7f9 fff3 	bl	80002d4 <__adddf3>
 80062ee:	4606      	mov	r6, r0
 80062f0:	460f      	mov	r7, r1
 80062f2:	f7fa fc55 	bl	8000ba0 <__aeabi_d2iz>
 80062f6:	2200      	movs	r2, #0
 80062f8:	4681      	mov	r9, r0
 80062fa:	2300      	movs	r3, #0
 80062fc:	4630      	mov	r0, r6
 80062fe:	4639      	mov	r1, r7
 8006300:	f7fa fc10 	bl	8000b24 <__aeabi_dcmplt>
 8006304:	b148      	cbz	r0, 800631a <_dtoa_r+0x17a>
 8006306:	4648      	mov	r0, r9
 8006308:	f7fa f930 	bl	800056c <__aeabi_i2d>
 800630c:	4632      	mov	r2, r6
 800630e:	463b      	mov	r3, r7
 8006310:	f7fa fbfe 	bl	8000b10 <__aeabi_dcmpeq>
 8006314:	b908      	cbnz	r0, 800631a <_dtoa_r+0x17a>
 8006316:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800631a:	f1b9 0f16 	cmp.w	r9, #22
 800631e:	d857      	bhi.n	80063d0 <_dtoa_r+0x230>
 8006320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006324:	4b5d      	ldr	r3, [pc, #372]	; (800649c <_dtoa_r+0x2fc>)
 8006326:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800632a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632e:	f7fa fbf9 	bl	8000b24 <__aeabi_dcmplt>
 8006332:	2800      	cmp	r0, #0
 8006334:	d04e      	beq.n	80063d4 <_dtoa_r+0x234>
 8006336:	2300      	movs	r3, #0
 8006338:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800633c:	930f      	str	r3, [sp, #60]	; 0x3c
 800633e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006340:	1b1c      	subs	r4, r3, r4
 8006342:	1e63      	subs	r3, r4, #1
 8006344:	9309      	str	r3, [sp, #36]	; 0x24
 8006346:	bf49      	itett	mi
 8006348:	f1c4 0301 	rsbmi	r3, r4, #1
 800634c:	2300      	movpl	r3, #0
 800634e:	9306      	strmi	r3, [sp, #24]
 8006350:	2300      	movmi	r3, #0
 8006352:	bf54      	ite	pl
 8006354:	9306      	strpl	r3, [sp, #24]
 8006356:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006358:	f1b9 0f00 	cmp.w	r9, #0
 800635c:	db3c      	blt.n	80063d8 <_dtoa_r+0x238>
 800635e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006360:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006364:	444b      	add	r3, r9
 8006366:	9309      	str	r3, [sp, #36]	; 0x24
 8006368:	2300      	movs	r3, #0
 800636a:	930a      	str	r3, [sp, #40]	; 0x28
 800636c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800636e:	2b09      	cmp	r3, #9
 8006370:	d86c      	bhi.n	800644c <_dtoa_r+0x2ac>
 8006372:	2b05      	cmp	r3, #5
 8006374:	bfc4      	itt	gt
 8006376:	3b04      	subgt	r3, #4
 8006378:	9322      	strgt	r3, [sp, #136]	; 0x88
 800637a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800637c:	bfc8      	it	gt
 800637e:	2400      	movgt	r4, #0
 8006380:	f1a3 0302 	sub.w	r3, r3, #2
 8006384:	bfd8      	it	le
 8006386:	2401      	movle	r4, #1
 8006388:	2b03      	cmp	r3, #3
 800638a:	f200 808b 	bhi.w	80064a4 <_dtoa_r+0x304>
 800638e:	e8df f003 	tbb	[pc, r3]
 8006392:	4f2d      	.short	0x4f2d
 8006394:	5b4d      	.short	0x5b4d
 8006396:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800639a:	441c      	add	r4, r3
 800639c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	bfc3      	ittte	gt
 80063a4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80063a8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80063ac:	fa09 f303 	lslgt.w	r3, r9, r3
 80063b0:	f1c3 0320 	rsble	r3, r3, #32
 80063b4:	bfc6      	itte	gt
 80063b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80063ba:	4318      	orrgt	r0, r3
 80063bc:	fa06 f003 	lslle.w	r0, r6, r3
 80063c0:	f7fa f8c4 	bl	800054c <__aeabi_ui2d>
 80063c4:	2301      	movs	r3, #1
 80063c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80063ca:	3c01      	subs	r4, #1
 80063cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80063ce:	e770      	b.n	80062b2 <_dtoa_r+0x112>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e7b3      	b.n	800633c <_dtoa_r+0x19c>
 80063d4:	900f      	str	r0, [sp, #60]	; 0x3c
 80063d6:	e7b2      	b.n	800633e <_dtoa_r+0x19e>
 80063d8:	9b06      	ldr	r3, [sp, #24]
 80063da:	eba3 0309 	sub.w	r3, r3, r9
 80063de:	9306      	str	r3, [sp, #24]
 80063e0:	f1c9 0300 	rsb	r3, r9, #0
 80063e4:	930a      	str	r3, [sp, #40]	; 0x28
 80063e6:	2300      	movs	r3, #0
 80063e8:	930e      	str	r3, [sp, #56]	; 0x38
 80063ea:	e7bf      	b.n	800636c <_dtoa_r+0x1cc>
 80063ec:	2300      	movs	r3, #0
 80063ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80063f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	dc59      	bgt.n	80064aa <_dtoa_r+0x30a>
 80063f6:	f04f 0b01 	mov.w	fp, #1
 80063fa:	465b      	mov	r3, fp
 80063fc:	f8cd b008 	str.w	fp, [sp, #8]
 8006400:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006404:	2200      	movs	r2, #0
 8006406:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006408:	6042      	str	r2, [r0, #4]
 800640a:	2204      	movs	r2, #4
 800640c:	f102 0614 	add.w	r6, r2, #20
 8006410:	429e      	cmp	r6, r3
 8006412:	6841      	ldr	r1, [r0, #4]
 8006414:	d94f      	bls.n	80064b6 <_dtoa_r+0x316>
 8006416:	4628      	mov	r0, r5
 8006418:	f000 fcca 	bl	8006db0 <_Balloc>
 800641c:	9008      	str	r0, [sp, #32]
 800641e:	2800      	cmp	r0, #0
 8006420:	d14d      	bne.n	80064be <_dtoa_r+0x31e>
 8006422:	4602      	mov	r2, r0
 8006424:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006428:	4b1d      	ldr	r3, [pc, #116]	; (80064a0 <_dtoa_r+0x300>)
 800642a:	e6cd      	b.n	80061c8 <_dtoa_r+0x28>
 800642c:	2301      	movs	r3, #1
 800642e:	e7de      	b.n	80063ee <_dtoa_r+0x24e>
 8006430:	2300      	movs	r3, #0
 8006432:	930b      	str	r3, [sp, #44]	; 0x2c
 8006434:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006436:	eb09 0b03 	add.w	fp, r9, r3
 800643a:	f10b 0301 	add.w	r3, fp, #1
 800643e:	2b01      	cmp	r3, #1
 8006440:	9302      	str	r3, [sp, #8]
 8006442:	bfb8      	it	lt
 8006444:	2301      	movlt	r3, #1
 8006446:	e7dd      	b.n	8006404 <_dtoa_r+0x264>
 8006448:	2301      	movs	r3, #1
 800644a:	e7f2      	b.n	8006432 <_dtoa_r+0x292>
 800644c:	2401      	movs	r4, #1
 800644e:	2300      	movs	r3, #0
 8006450:	940b      	str	r4, [sp, #44]	; 0x2c
 8006452:	9322      	str	r3, [sp, #136]	; 0x88
 8006454:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8006458:	2200      	movs	r2, #0
 800645a:	2312      	movs	r3, #18
 800645c:	f8cd b008 	str.w	fp, [sp, #8]
 8006460:	9223      	str	r2, [sp, #140]	; 0x8c
 8006462:	e7cf      	b.n	8006404 <_dtoa_r+0x264>
 8006464:	f3af 8000 	nop.w
 8006468:	636f4361 	.word	0x636f4361
 800646c:	3fd287a7 	.word	0x3fd287a7
 8006470:	8b60c8b3 	.word	0x8b60c8b3
 8006474:	3fc68a28 	.word	0x3fc68a28
 8006478:	509f79fb 	.word	0x509f79fb
 800647c:	3fd34413 	.word	0x3fd34413
 8006480:	080085bd 	.word	0x080085bd
 8006484:	080085d4 	.word	0x080085d4
 8006488:	7ff00000 	.word	0x7ff00000
 800648c:	080085b9 	.word	0x080085b9
 8006490:	080085b0 	.word	0x080085b0
 8006494:	0800858d 	.word	0x0800858d
 8006498:	3ff80000 	.word	0x3ff80000
 800649c:	080086d0 	.word	0x080086d0
 80064a0:	08008633 	.word	0x08008633
 80064a4:	2301      	movs	r3, #1
 80064a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80064a8:	e7d4      	b.n	8006454 <_dtoa_r+0x2b4>
 80064aa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80064ae:	465b      	mov	r3, fp
 80064b0:	f8cd b008 	str.w	fp, [sp, #8]
 80064b4:	e7a6      	b.n	8006404 <_dtoa_r+0x264>
 80064b6:	3101      	adds	r1, #1
 80064b8:	6041      	str	r1, [r0, #4]
 80064ba:	0052      	lsls	r2, r2, #1
 80064bc:	e7a6      	b.n	800640c <_dtoa_r+0x26c>
 80064be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064c0:	9a08      	ldr	r2, [sp, #32]
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	9b02      	ldr	r3, [sp, #8]
 80064c6:	2b0e      	cmp	r3, #14
 80064c8:	f200 80a8 	bhi.w	800661c <_dtoa_r+0x47c>
 80064cc:	2c00      	cmp	r4, #0
 80064ce:	f000 80a5 	beq.w	800661c <_dtoa_r+0x47c>
 80064d2:	f1b9 0f00 	cmp.w	r9, #0
 80064d6:	dd34      	ble.n	8006542 <_dtoa_r+0x3a2>
 80064d8:	4a9a      	ldr	r2, [pc, #616]	; (8006744 <_dtoa_r+0x5a4>)
 80064da:	f009 030f 	and.w	r3, r9, #15
 80064de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80064e2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80064e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80064ee:	ea4f 1429 	mov.w	r4, r9, asr #4
 80064f2:	d016      	beq.n	8006522 <_dtoa_r+0x382>
 80064f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064f8:	4b93      	ldr	r3, [pc, #588]	; (8006748 <_dtoa_r+0x5a8>)
 80064fa:	2703      	movs	r7, #3
 80064fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006500:	f7fa f9c8 	bl	8000894 <__aeabi_ddiv>
 8006504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006508:	f004 040f 	and.w	r4, r4, #15
 800650c:	4e8e      	ldr	r6, [pc, #568]	; (8006748 <_dtoa_r+0x5a8>)
 800650e:	b954      	cbnz	r4, 8006526 <_dtoa_r+0x386>
 8006510:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006518:	f7fa f9bc 	bl	8000894 <__aeabi_ddiv>
 800651c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006520:	e029      	b.n	8006576 <_dtoa_r+0x3d6>
 8006522:	2702      	movs	r7, #2
 8006524:	e7f2      	b.n	800650c <_dtoa_r+0x36c>
 8006526:	07e1      	lsls	r1, r4, #31
 8006528:	d508      	bpl.n	800653c <_dtoa_r+0x39c>
 800652a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800652e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006532:	f7fa f885 	bl	8000640 <__aeabi_dmul>
 8006536:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800653a:	3701      	adds	r7, #1
 800653c:	1064      	asrs	r4, r4, #1
 800653e:	3608      	adds	r6, #8
 8006540:	e7e5      	b.n	800650e <_dtoa_r+0x36e>
 8006542:	f000 80a5 	beq.w	8006690 <_dtoa_r+0x4f0>
 8006546:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800654a:	f1c9 0400 	rsb	r4, r9, #0
 800654e:	4b7d      	ldr	r3, [pc, #500]	; (8006744 <_dtoa_r+0x5a4>)
 8006550:	f004 020f 	and.w	r2, r4, #15
 8006554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f7fa f870 	bl	8000640 <__aeabi_dmul>
 8006560:	2702      	movs	r7, #2
 8006562:	2300      	movs	r3, #0
 8006564:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006568:	4e77      	ldr	r6, [pc, #476]	; (8006748 <_dtoa_r+0x5a8>)
 800656a:	1124      	asrs	r4, r4, #4
 800656c:	2c00      	cmp	r4, #0
 800656e:	f040 8084 	bne.w	800667a <_dtoa_r+0x4da>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1d2      	bne.n	800651c <_dtoa_r+0x37c>
 8006576:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 808b 	beq.w	8006694 <_dtoa_r+0x4f4>
 800657e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006582:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006586:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800658a:	2200      	movs	r2, #0
 800658c:	4b6f      	ldr	r3, [pc, #444]	; (800674c <_dtoa_r+0x5ac>)
 800658e:	f7fa fac9 	bl	8000b24 <__aeabi_dcmplt>
 8006592:	2800      	cmp	r0, #0
 8006594:	d07e      	beq.n	8006694 <_dtoa_r+0x4f4>
 8006596:	9b02      	ldr	r3, [sp, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d07b      	beq.n	8006694 <_dtoa_r+0x4f4>
 800659c:	f1bb 0f00 	cmp.w	fp, #0
 80065a0:	dd38      	ble.n	8006614 <_dtoa_r+0x474>
 80065a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065a6:	2200      	movs	r2, #0
 80065a8:	4b69      	ldr	r3, [pc, #420]	; (8006750 <_dtoa_r+0x5b0>)
 80065aa:	f7fa f849 	bl	8000640 <__aeabi_dmul>
 80065ae:	465c      	mov	r4, fp
 80065b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065b4:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 80065b8:	3701      	adds	r7, #1
 80065ba:	4638      	mov	r0, r7
 80065bc:	f7f9 ffd6 	bl	800056c <__aeabi_i2d>
 80065c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065c4:	f7fa f83c 	bl	8000640 <__aeabi_dmul>
 80065c8:	2200      	movs	r2, #0
 80065ca:	4b62      	ldr	r3, [pc, #392]	; (8006754 <_dtoa_r+0x5b4>)
 80065cc:	f7f9 fe82 	bl	80002d4 <__adddf3>
 80065d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80065d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80065d8:	9611      	str	r6, [sp, #68]	; 0x44
 80065da:	2c00      	cmp	r4, #0
 80065dc:	d15d      	bne.n	800669a <_dtoa_r+0x4fa>
 80065de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065e2:	2200      	movs	r2, #0
 80065e4:	4b5c      	ldr	r3, [pc, #368]	; (8006758 <_dtoa_r+0x5b8>)
 80065e6:	f7f9 fe73 	bl	80002d0 <__aeabi_dsub>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065f2:	4633      	mov	r3, r6
 80065f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80065f6:	f7fa fab3 	bl	8000b60 <__aeabi_dcmpgt>
 80065fa:	2800      	cmp	r0, #0
 80065fc:	f040 829e 	bne.w	8006b3c <_dtoa_r+0x99c>
 8006600:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006604:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006606:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800660a:	f7fa fa8b 	bl	8000b24 <__aeabi_dcmplt>
 800660e:	2800      	cmp	r0, #0
 8006610:	f040 8292 	bne.w	8006b38 <_dtoa_r+0x998>
 8006614:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006618:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800661c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800661e:	2b00      	cmp	r3, #0
 8006620:	f2c0 8153 	blt.w	80068ca <_dtoa_r+0x72a>
 8006624:	f1b9 0f0e 	cmp.w	r9, #14
 8006628:	f300 814f 	bgt.w	80068ca <_dtoa_r+0x72a>
 800662c:	4b45      	ldr	r3, [pc, #276]	; (8006744 <_dtoa_r+0x5a4>)
 800662e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006632:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006636:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800663a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800663c:	2b00      	cmp	r3, #0
 800663e:	f280 80db 	bge.w	80067f8 <_dtoa_r+0x658>
 8006642:	9b02      	ldr	r3, [sp, #8]
 8006644:	2b00      	cmp	r3, #0
 8006646:	f300 80d7 	bgt.w	80067f8 <_dtoa_r+0x658>
 800664a:	f040 8274 	bne.w	8006b36 <_dtoa_r+0x996>
 800664e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006652:	2200      	movs	r2, #0
 8006654:	4b40      	ldr	r3, [pc, #256]	; (8006758 <_dtoa_r+0x5b8>)
 8006656:	f7f9 fff3 	bl	8000640 <__aeabi_dmul>
 800665a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800665e:	f7fa fa75 	bl	8000b4c <__aeabi_dcmpge>
 8006662:	9c02      	ldr	r4, [sp, #8]
 8006664:	4626      	mov	r6, r4
 8006666:	2800      	cmp	r0, #0
 8006668:	f040 824a 	bne.w	8006b00 <_dtoa_r+0x960>
 800666c:	2331      	movs	r3, #49	; 0x31
 800666e:	9f08      	ldr	r7, [sp, #32]
 8006670:	f109 0901 	add.w	r9, r9, #1
 8006674:	f807 3b01 	strb.w	r3, [r7], #1
 8006678:	e246      	b.n	8006b08 <_dtoa_r+0x968>
 800667a:	07e2      	lsls	r2, r4, #31
 800667c:	d505      	bpl.n	800668a <_dtoa_r+0x4ea>
 800667e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006682:	f7f9 ffdd 	bl	8000640 <__aeabi_dmul>
 8006686:	2301      	movs	r3, #1
 8006688:	3701      	adds	r7, #1
 800668a:	1064      	asrs	r4, r4, #1
 800668c:	3608      	adds	r6, #8
 800668e:	e76d      	b.n	800656c <_dtoa_r+0x3cc>
 8006690:	2702      	movs	r7, #2
 8006692:	e770      	b.n	8006576 <_dtoa_r+0x3d6>
 8006694:	46c8      	mov	r8, r9
 8006696:	9c02      	ldr	r4, [sp, #8]
 8006698:	e78f      	b.n	80065ba <_dtoa_r+0x41a>
 800669a:	9908      	ldr	r1, [sp, #32]
 800669c:	4b29      	ldr	r3, [pc, #164]	; (8006744 <_dtoa_r+0x5a4>)
 800669e:	4421      	add	r1, r4
 80066a0:	9112      	str	r1, [sp, #72]	; 0x48
 80066a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80066ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066b0:	2900      	cmp	r1, #0
 80066b2:	d055      	beq.n	8006760 <_dtoa_r+0x5c0>
 80066b4:	2000      	movs	r0, #0
 80066b6:	4929      	ldr	r1, [pc, #164]	; (800675c <_dtoa_r+0x5bc>)
 80066b8:	f7fa f8ec 	bl	8000894 <__aeabi_ddiv>
 80066bc:	463b      	mov	r3, r7
 80066be:	4632      	mov	r2, r6
 80066c0:	f7f9 fe06 	bl	80002d0 <__aeabi_dsub>
 80066c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066c8:	9f08      	ldr	r7, [sp, #32]
 80066ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066ce:	f7fa fa67 	bl	8000ba0 <__aeabi_d2iz>
 80066d2:	4604      	mov	r4, r0
 80066d4:	f7f9 ff4a 	bl	800056c <__aeabi_i2d>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066e0:	f7f9 fdf6 	bl	80002d0 <__aeabi_dsub>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	3430      	adds	r4, #48	; 0x30
 80066ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066f2:	f807 4b01 	strb.w	r4, [r7], #1
 80066f6:	f7fa fa15 	bl	8000b24 <__aeabi_dcmplt>
 80066fa:	2800      	cmp	r0, #0
 80066fc:	d174      	bne.n	80067e8 <_dtoa_r+0x648>
 80066fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006702:	2000      	movs	r0, #0
 8006704:	4911      	ldr	r1, [pc, #68]	; (800674c <_dtoa_r+0x5ac>)
 8006706:	f7f9 fde3 	bl	80002d0 <__aeabi_dsub>
 800670a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800670e:	f7fa fa09 	bl	8000b24 <__aeabi_dcmplt>
 8006712:	2800      	cmp	r0, #0
 8006714:	f040 80b6 	bne.w	8006884 <_dtoa_r+0x6e4>
 8006718:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800671a:	429f      	cmp	r7, r3
 800671c:	f43f af7a 	beq.w	8006614 <_dtoa_r+0x474>
 8006720:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006724:	2200      	movs	r2, #0
 8006726:	4b0a      	ldr	r3, [pc, #40]	; (8006750 <_dtoa_r+0x5b0>)
 8006728:	f7f9 ff8a 	bl	8000640 <__aeabi_dmul>
 800672c:	2200      	movs	r2, #0
 800672e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006732:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006736:	4b06      	ldr	r3, [pc, #24]	; (8006750 <_dtoa_r+0x5b0>)
 8006738:	f7f9 ff82 	bl	8000640 <__aeabi_dmul>
 800673c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006740:	e7c3      	b.n	80066ca <_dtoa_r+0x52a>
 8006742:	bf00      	nop
 8006744:	080086d0 	.word	0x080086d0
 8006748:	080086a8 	.word	0x080086a8
 800674c:	3ff00000 	.word	0x3ff00000
 8006750:	40240000 	.word	0x40240000
 8006754:	401c0000 	.word	0x401c0000
 8006758:	40140000 	.word	0x40140000
 800675c:	3fe00000 	.word	0x3fe00000
 8006760:	4630      	mov	r0, r6
 8006762:	4639      	mov	r1, r7
 8006764:	f7f9 ff6c 	bl	8000640 <__aeabi_dmul>
 8006768:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800676a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800676e:	9c08      	ldr	r4, [sp, #32]
 8006770:	9314      	str	r3, [sp, #80]	; 0x50
 8006772:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006776:	f7fa fa13 	bl	8000ba0 <__aeabi_d2iz>
 800677a:	9015      	str	r0, [sp, #84]	; 0x54
 800677c:	f7f9 fef6 	bl	800056c <__aeabi_i2d>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006788:	f7f9 fda2 	bl	80002d0 <__aeabi_dsub>
 800678c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800678e:	4606      	mov	r6, r0
 8006790:	3330      	adds	r3, #48	; 0x30
 8006792:	f804 3b01 	strb.w	r3, [r4], #1
 8006796:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006798:	460f      	mov	r7, r1
 800679a:	429c      	cmp	r4, r3
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	d124      	bne.n	80067ec <_dtoa_r+0x64c>
 80067a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067a6:	4bb3      	ldr	r3, [pc, #716]	; (8006a74 <_dtoa_r+0x8d4>)
 80067a8:	f7f9 fd94 	bl	80002d4 <__adddf3>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4630      	mov	r0, r6
 80067b2:	4639      	mov	r1, r7
 80067b4:	f7fa f9d4 	bl	8000b60 <__aeabi_dcmpgt>
 80067b8:	2800      	cmp	r0, #0
 80067ba:	d162      	bne.n	8006882 <_dtoa_r+0x6e2>
 80067bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067c0:	2000      	movs	r0, #0
 80067c2:	49ac      	ldr	r1, [pc, #688]	; (8006a74 <_dtoa_r+0x8d4>)
 80067c4:	f7f9 fd84 	bl	80002d0 <__aeabi_dsub>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4630      	mov	r0, r6
 80067ce:	4639      	mov	r1, r7
 80067d0:	f7fa f9a8 	bl	8000b24 <__aeabi_dcmplt>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	f43f af1d 	beq.w	8006614 <_dtoa_r+0x474>
 80067da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80067dc:	1e7b      	subs	r3, r7, #1
 80067de:	9314      	str	r3, [sp, #80]	; 0x50
 80067e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80067e4:	2b30      	cmp	r3, #48	; 0x30
 80067e6:	d0f8      	beq.n	80067da <_dtoa_r+0x63a>
 80067e8:	46c1      	mov	r9, r8
 80067ea:	e03a      	b.n	8006862 <_dtoa_r+0x6c2>
 80067ec:	4ba2      	ldr	r3, [pc, #648]	; (8006a78 <_dtoa_r+0x8d8>)
 80067ee:	f7f9 ff27 	bl	8000640 <__aeabi_dmul>
 80067f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067f6:	e7bc      	b.n	8006772 <_dtoa_r+0x5d2>
 80067f8:	9f08      	ldr	r7, [sp, #32]
 80067fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006802:	f7fa f847 	bl	8000894 <__aeabi_ddiv>
 8006806:	f7fa f9cb 	bl	8000ba0 <__aeabi_d2iz>
 800680a:	4604      	mov	r4, r0
 800680c:	f7f9 feae 	bl	800056c <__aeabi_i2d>
 8006810:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006814:	f7f9 ff14 	bl	8000640 <__aeabi_dmul>
 8006818:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800681c:	460b      	mov	r3, r1
 800681e:	4602      	mov	r2, r0
 8006820:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006824:	f7f9 fd54 	bl	80002d0 <__aeabi_dsub>
 8006828:	f807 6b01 	strb.w	r6, [r7], #1
 800682c:	9e08      	ldr	r6, [sp, #32]
 800682e:	9b02      	ldr	r3, [sp, #8]
 8006830:	1bbe      	subs	r6, r7, r6
 8006832:	42b3      	cmp	r3, r6
 8006834:	d13a      	bne.n	80068ac <_dtoa_r+0x70c>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	f7f9 fd4b 	bl	80002d4 <__adddf3>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006846:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800684a:	f7fa f989 	bl	8000b60 <__aeabi_dcmpgt>
 800684e:	bb58      	cbnz	r0, 80068a8 <_dtoa_r+0x708>
 8006850:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006858:	f7fa f95a 	bl	8000b10 <__aeabi_dcmpeq>
 800685c:	b108      	cbz	r0, 8006862 <_dtoa_r+0x6c2>
 800685e:	07e1      	lsls	r1, r4, #31
 8006860:	d422      	bmi.n	80068a8 <_dtoa_r+0x708>
 8006862:	4628      	mov	r0, r5
 8006864:	4651      	mov	r1, sl
 8006866:	f000 fae3 	bl	8006e30 <_Bfree>
 800686a:	2300      	movs	r3, #0
 800686c:	703b      	strb	r3, [r7, #0]
 800686e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006870:	f109 0001 	add.w	r0, r9, #1
 8006874:	6018      	str	r0, [r3, #0]
 8006876:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006878:	2b00      	cmp	r3, #0
 800687a:	f43f acdf 	beq.w	800623c <_dtoa_r+0x9c>
 800687e:	601f      	str	r7, [r3, #0]
 8006880:	e4dc      	b.n	800623c <_dtoa_r+0x9c>
 8006882:	4627      	mov	r7, r4
 8006884:	463b      	mov	r3, r7
 8006886:	461f      	mov	r7, r3
 8006888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800688c:	2a39      	cmp	r2, #57	; 0x39
 800688e:	d107      	bne.n	80068a0 <_dtoa_r+0x700>
 8006890:	9a08      	ldr	r2, [sp, #32]
 8006892:	429a      	cmp	r2, r3
 8006894:	d1f7      	bne.n	8006886 <_dtoa_r+0x6e6>
 8006896:	2230      	movs	r2, #48	; 0x30
 8006898:	9908      	ldr	r1, [sp, #32]
 800689a:	f108 0801 	add.w	r8, r8, #1
 800689e:	700a      	strb	r2, [r1, #0]
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	3201      	adds	r2, #1
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	e79f      	b.n	80067e8 <_dtoa_r+0x648>
 80068a8:	46c8      	mov	r8, r9
 80068aa:	e7eb      	b.n	8006884 <_dtoa_r+0x6e4>
 80068ac:	2200      	movs	r2, #0
 80068ae:	4b72      	ldr	r3, [pc, #456]	; (8006a78 <_dtoa_r+0x8d8>)
 80068b0:	f7f9 fec6 	bl	8000640 <__aeabi_dmul>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068bc:	2200      	movs	r2, #0
 80068be:	2300      	movs	r3, #0
 80068c0:	f7fa f926 	bl	8000b10 <__aeabi_dcmpeq>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d098      	beq.n	80067fa <_dtoa_r+0x65a>
 80068c8:	e7cb      	b.n	8006862 <_dtoa_r+0x6c2>
 80068ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068cc:	2a00      	cmp	r2, #0
 80068ce:	f000 80cd 	beq.w	8006a6c <_dtoa_r+0x8cc>
 80068d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80068d4:	2a01      	cmp	r2, #1
 80068d6:	f300 80af 	bgt.w	8006a38 <_dtoa_r+0x898>
 80068da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80068dc:	2a00      	cmp	r2, #0
 80068de:	f000 80a7 	beq.w	8006a30 <_dtoa_r+0x890>
 80068e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80068e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80068e8:	9f06      	ldr	r7, [sp, #24]
 80068ea:	9a06      	ldr	r2, [sp, #24]
 80068ec:	2101      	movs	r1, #1
 80068ee:	441a      	add	r2, r3
 80068f0:	9206      	str	r2, [sp, #24]
 80068f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068f4:	4628      	mov	r0, r5
 80068f6:	441a      	add	r2, r3
 80068f8:	9209      	str	r2, [sp, #36]	; 0x24
 80068fa:	f000 fb53 	bl	8006fa4 <__i2b>
 80068fe:	4606      	mov	r6, r0
 8006900:	2f00      	cmp	r7, #0
 8006902:	dd0c      	ble.n	800691e <_dtoa_r+0x77e>
 8006904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006906:	2b00      	cmp	r3, #0
 8006908:	dd09      	ble.n	800691e <_dtoa_r+0x77e>
 800690a:	42bb      	cmp	r3, r7
 800690c:	bfa8      	it	ge
 800690e:	463b      	movge	r3, r7
 8006910:	9a06      	ldr	r2, [sp, #24]
 8006912:	1aff      	subs	r7, r7, r3
 8006914:	1ad2      	subs	r2, r2, r3
 8006916:	9206      	str	r2, [sp, #24]
 8006918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	9309      	str	r3, [sp, #36]	; 0x24
 800691e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006920:	b1f3      	cbz	r3, 8006960 <_dtoa_r+0x7c0>
 8006922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80a9 	beq.w	8006a7c <_dtoa_r+0x8dc>
 800692a:	2c00      	cmp	r4, #0
 800692c:	dd10      	ble.n	8006950 <_dtoa_r+0x7b0>
 800692e:	4631      	mov	r1, r6
 8006930:	4622      	mov	r2, r4
 8006932:	4628      	mov	r0, r5
 8006934:	f000 fbf0 	bl	8007118 <__pow5mult>
 8006938:	4652      	mov	r2, sl
 800693a:	4601      	mov	r1, r0
 800693c:	4606      	mov	r6, r0
 800693e:	4628      	mov	r0, r5
 8006940:	f000 fb46 	bl	8006fd0 <__multiply>
 8006944:	4680      	mov	r8, r0
 8006946:	4651      	mov	r1, sl
 8006948:	4628      	mov	r0, r5
 800694a:	f000 fa71 	bl	8006e30 <_Bfree>
 800694e:	46c2      	mov	sl, r8
 8006950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006952:	1b1a      	subs	r2, r3, r4
 8006954:	d004      	beq.n	8006960 <_dtoa_r+0x7c0>
 8006956:	4651      	mov	r1, sl
 8006958:	4628      	mov	r0, r5
 800695a:	f000 fbdd 	bl	8007118 <__pow5mult>
 800695e:	4682      	mov	sl, r0
 8006960:	2101      	movs	r1, #1
 8006962:	4628      	mov	r0, r5
 8006964:	f000 fb1e 	bl	8006fa4 <__i2b>
 8006968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800696a:	4604      	mov	r4, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	f340 8087 	ble.w	8006a80 <_dtoa_r+0x8e0>
 8006972:	461a      	mov	r2, r3
 8006974:	4601      	mov	r1, r0
 8006976:	4628      	mov	r0, r5
 8006978:	f000 fbce 	bl	8007118 <__pow5mult>
 800697c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800697e:	4604      	mov	r4, r0
 8006980:	2b01      	cmp	r3, #1
 8006982:	f340 8080 	ble.w	8006a86 <_dtoa_r+0x8e6>
 8006986:	f04f 0800 	mov.w	r8, #0
 800698a:	6923      	ldr	r3, [r4, #16]
 800698c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006990:	6918      	ldr	r0, [r3, #16]
 8006992:	f000 fab9 	bl	8006f08 <__hi0bits>
 8006996:	f1c0 0020 	rsb	r0, r0, #32
 800699a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800699c:	4418      	add	r0, r3
 800699e:	f010 001f 	ands.w	r0, r0, #31
 80069a2:	f000 8092 	beq.w	8006aca <_dtoa_r+0x92a>
 80069a6:	f1c0 0320 	rsb	r3, r0, #32
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	f340 808a 	ble.w	8006ac4 <_dtoa_r+0x924>
 80069b0:	f1c0 001c 	rsb	r0, r0, #28
 80069b4:	9b06      	ldr	r3, [sp, #24]
 80069b6:	4407      	add	r7, r0
 80069b8:	4403      	add	r3, r0
 80069ba:	9306      	str	r3, [sp, #24]
 80069bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069be:	4403      	add	r3, r0
 80069c0:	9309      	str	r3, [sp, #36]	; 0x24
 80069c2:	9b06      	ldr	r3, [sp, #24]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	dd05      	ble.n	80069d4 <_dtoa_r+0x834>
 80069c8:	4651      	mov	r1, sl
 80069ca:	461a      	mov	r2, r3
 80069cc:	4628      	mov	r0, r5
 80069ce:	f000 fbfd 	bl	80071cc <__lshift>
 80069d2:	4682      	mov	sl, r0
 80069d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	dd05      	ble.n	80069e6 <_dtoa_r+0x846>
 80069da:	4621      	mov	r1, r4
 80069dc:	461a      	mov	r2, r3
 80069de:	4628      	mov	r0, r5
 80069e0:	f000 fbf4 	bl	80071cc <__lshift>
 80069e4:	4604      	mov	r4, r0
 80069e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d070      	beq.n	8006ace <_dtoa_r+0x92e>
 80069ec:	4621      	mov	r1, r4
 80069ee:	4650      	mov	r0, sl
 80069f0:	f000 fc58 	bl	80072a4 <__mcmp>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	da6a      	bge.n	8006ace <_dtoa_r+0x92e>
 80069f8:	2300      	movs	r3, #0
 80069fa:	4651      	mov	r1, sl
 80069fc:	220a      	movs	r2, #10
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 fa38 	bl	8006e74 <__multadd>
 8006a04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a06:	4682      	mov	sl, r0
 8006a08:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8193 	beq.w	8006d38 <_dtoa_r+0xb98>
 8006a12:	4631      	mov	r1, r6
 8006a14:	2300      	movs	r3, #0
 8006a16:	220a      	movs	r2, #10
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f000 fa2b 	bl	8006e74 <__multadd>
 8006a1e:	f1bb 0f00 	cmp.w	fp, #0
 8006a22:	4606      	mov	r6, r0
 8006a24:	f300 8093 	bgt.w	8006b4e <_dtoa_r+0x9ae>
 8006a28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	dc57      	bgt.n	8006ade <_dtoa_r+0x93e>
 8006a2e:	e08e      	b.n	8006b4e <_dtoa_r+0x9ae>
 8006a30:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006a32:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a36:	e756      	b.n	80068e6 <_dtoa_r+0x746>
 8006a38:	9b02      	ldr	r3, [sp, #8]
 8006a3a:	1e5c      	subs	r4, r3, #1
 8006a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a3e:	42a3      	cmp	r3, r4
 8006a40:	bfb7      	itett	lt
 8006a42:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006a44:	1b1c      	subge	r4, r3, r4
 8006a46:	1ae2      	sublt	r2, r4, r3
 8006a48:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006a4a:	bfbe      	ittt	lt
 8006a4c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006a4e:	189b      	addlt	r3, r3, r2
 8006a50:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006a52:	9b02      	ldr	r3, [sp, #8]
 8006a54:	bfb8      	it	lt
 8006a56:	2400      	movlt	r4, #0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	bfbb      	ittet	lt
 8006a5c:	9b06      	ldrlt	r3, [sp, #24]
 8006a5e:	9a02      	ldrlt	r2, [sp, #8]
 8006a60:	9f06      	ldrge	r7, [sp, #24]
 8006a62:	1a9f      	sublt	r7, r3, r2
 8006a64:	bfac      	ite	ge
 8006a66:	9b02      	ldrge	r3, [sp, #8]
 8006a68:	2300      	movlt	r3, #0
 8006a6a:	e73e      	b.n	80068ea <_dtoa_r+0x74a>
 8006a6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a6e:	9f06      	ldr	r7, [sp, #24]
 8006a70:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006a72:	e745      	b.n	8006900 <_dtoa_r+0x760>
 8006a74:	3fe00000 	.word	0x3fe00000
 8006a78:	40240000 	.word	0x40240000
 8006a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a7e:	e76a      	b.n	8006956 <_dtoa_r+0x7b6>
 8006a80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	dc19      	bgt.n	8006aba <_dtoa_r+0x91a>
 8006a86:	9b04      	ldr	r3, [sp, #16]
 8006a88:	b9bb      	cbnz	r3, 8006aba <_dtoa_r+0x91a>
 8006a8a:	9b05      	ldr	r3, [sp, #20]
 8006a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a90:	b99b      	cbnz	r3, 8006aba <_dtoa_r+0x91a>
 8006a92:	9b05      	ldr	r3, [sp, #20]
 8006a94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a98:	0d1b      	lsrs	r3, r3, #20
 8006a9a:	051b      	lsls	r3, r3, #20
 8006a9c:	b183      	cbz	r3, 8006ac0 <_dtoa_r+0x920>
 8006a9e:	f04f 0801 	mov.w	r8, #1
 8006aa2:	9b06      	ldr	r3, [sp, #24]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	9306      	str	r3, [sp, #24]
 8006aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aaa:	3301      	adds	r3, #1
 8006aac:	9309      	str	r3, [sp, #36]	; 0x24
 8006aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f47f af6a 	bne.w	800698a <_dtoa_r+0x7ea>
 8006ab6:	2001      	movs	r0, #1
 8006ab8:	e76f      	b.n	800699a <_dtoa_r+0x7fa>
 8006aba:	f04f 0800 	mov.w	r8, #0
 8006abe:	e7f6      	b.n	8006aae <_dtoa_r+0x90e>
 8006ac0:	4698      	mov	r8, r3
 8006ac2:	e7f4      	b.n	8006aae <_dtoa_r+0x90e>
 8006ac4:	f43f af7d 	beq.w	80069c2 <_dtoa_r+0x822>
 8006ac8:	4618      	mov	r0, r3
 8006aca:	301c      	adds	r0, #28
 8006acc:	e772      	b.n	80069b4 <_dtoa_r+0x814>
 8006ace:	9b02      	ldr	r3, [sp, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	dc36      	bgt.n	8006b42 <_dtoa_r+0x9a2>
 8006ad4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	dd33      	ble.n	8006b42 <_dtoa_r+0x9a2>
 8006ada:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006ade:	f1bb 0f00 	cmp.w	fp, #0
 8006ae2:	d10d      	bne.n	8006b00 <_dtoa_r+0x960>
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	465b      	mov	r3, fp
 8006ae8:	2205      	movs	r2, #5
 8006aea:	4628      	mov	r0, r5
 8006aec:	f000 f9c2 	bl	8006e74 <__multadd>
 8006af0:	4601      	mov	r1, r0
 8006af2:	4604      	mov	r4, r0
 8006af4:	4650      	mov	r0, sl
 8006af6:	f000 fbd5 	bl	80072a4 <__mcmp>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	f73f adb6 	bgt.w	800666c <_dtoa_r+0x4cc>
 8006b00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b02:	9f08      	ldr	r7, [sp, #32]
 8006b04:	ea6f 0903 	mvn.w	r9, r3
 8006b08:	f04f 0800 	mov.w	r8, #0
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 f98e 	bl	8006e30 <_Bfree>
 8006b14:	2e00      	cmp	r6, #0
 8006b16:	f43f aea4 	beq.w	8006862 <_dtoa_r+0x6c2>
 8006b1a:	f1b8 0f00 	cmp.w	r8, #0
 8006b1e:	d005      	beq.n	8006b2c <_dtoa_r+0x98c>
 8006b20:	45b0      	cmp	r8, r6
 8006b22:	d003      	beq.n	8006b2c <_dtoa_r+0x98c>
 8006b24:	4641      	mov	r1, r8
 8006b26:	4628      	mov	r0, r5
 8006b28:	f000 f982 	bl	8006e30 <_Bfree>
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 f97e 	bl	8006e30 <_Bfree>
 8006b34:	e695      	b.n	8006862 <_dtoa_r+0x6c2>
 8006b36:	2400      	movs	r4, #0
 8006b38:	4626      	mov	r6, r4
 8006b3a:	e7e1      	b.n	8006b00 <_dtoa_r+0x960>
 8006b3c:	46c1      	mov	r9, r8
 8006b3e:	4626      	mov	r6, r4
 8006b40:	e594      	b.n	800666c <_dtoa_r+0x4cc>
 8006b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b44:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 80fc 	beq.w	8006d46 <_dtoa_r+0xba6>
 8006b4e:	2f00      	cmp	r7, #0
 8006b50:	dd05      	ble.n	8006b5e <_dtoa_r+0x9be>
 8006b52:	4631      	mov	r1, r6
 8006b54:	463a      	mov	r2, r7
 8006b56:	4628      	mov	r0, r5
 8006b58:	f000 fb38 	bl	80071cc <__lshift>
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	f1b8 0f00 	cmp.w	r8, #0
 8006b62:	d05c      	beq.n	8006c1e <_dtoa_r+0xa7e>
 8006b64:	4628      	mov	r0, r5
 8006b66:	6871      	ldr	r1, [r6, #4]
 8006b68:	f000 f922 	bl	8006db0 <_Balloc>
 8006b6c:	4607      	mov	r7, r0
 8006b6e:	b928      	cbnz	r0, 8006b7c <_dtoa_r+0x9dc>
 8006b70:	4602      	mov	r2, r0
 8006b72:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b76:	4b7e      	ldr	r3, [pc, #504]	; (8006d70 <_dtoa_r+0xbd0>)
 8006b78:	f7ff bb26 	b.w	80061c8 <_dtoa_r+0x28>
 8006b7c:	6932      	ldr	r2, [r6, #16]
 8006b7e:	f106 010c 	add.w	r1, r6, #12
 8006b82:	3202      	adds	r2, #2
 8006b84:	0092      	lsls	r2, r2, #2
 8006b86:	300c      	adds	r0, #12
 8006b88:	f7fe fdc4 	bl	8005714 <memcpy>
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	4639      	mov	r1, r7
 8006b90:	4628      	mov	r0, r5
 8006b92:	f000 fb1b 	bl	80071cc <__lshift>
 8006b96:	46b0      	mov	r8, r6
 8006b98:	4606      	mov	r6, r0
 8006b9a:	9b08      	ldr	r3, [sp, #32]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	9302      	str	r3, [sp, #8]
 8006ba0:	9b08      	ldr	r3, [sp, #32]
 8006ba2:	445b      	add	r3, fp
 8006ba4:	930a      	str	r3, [sp, #40]	; 0x28
 8006ba6:	9b04      	ldr	r3, [sp, #16]
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	9309      	str	r3, [sp, #36]	; 0x24
 8006bae:	9b02      	ldr	r3, [sp, #8]
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4650      	mov	r0, sl
 8006bb4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006bb8:	f7ff fa62 	bl	8006080 <quorem>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	3330      	adds	r3, #48	; 0x30
 8006bc2:	9004      	str	r0, [sp, #16]
 8006bc4:	4650      	mov	r0, sl
 8006bc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bc8:	f000 fb6c 	bl	80072a4 <__mcmp>
 8006bcc:	4632      	mov	r2, r6
 8006bce:	9006      	str	r0, [sp, #24]
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 fb82 	bl	80072dc <__mdiff>
 8006bd8:	68c2      	ldr	r2, [r0, #12]
 8006bda:	4607      	mov	r7, r0
 8006bdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bde:	bb02      	cbnz	r2, 8006c22 <_dtoa_r+0xa82>
 8006be0:	4601      	mov	r1, r0
 8006be2:	4650      	mov	r0, sl
 8006be4:	f000 fb5e 	bl	80072a4 <__mcmp>
 8006be8:	4602      	mov	r2, r0
 8006bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bec:	4639      	mov	r1, r7
 8006bee:	4628      	mov	r0, r5
 8006bf0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006bf4:	f000 f91c 	bl	8006e30 <_Bfree>
 8006bf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bfc:	9f02      	ldr	r7, [sp, #8]
 8006bfe:	ea43 0102 	orr.w	r1, r3, r2
 8006c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c04:	430b      	orrs	r3, r1
 8006c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c08:	d10d      	bne.n	8006c26 <_dtoa_r+0xa86>
 8006c0a:	2b39      	cmp	r3, #57	; 0x39
 8006c0c:	d027      	beq.n	8006c5e <_dtoa_r+0xabe>
 8006c0e:	9a06      	ldr	r2, [sp, #24]
 8006c10:	2a00      	cmp	r2, #0
 8006c12:	dd01      	ble.n	8006c18 <_dtoa_r+0xa78>
 8006c14:	9b04      	ldr	r3, [sp, #16]
 8006c16:	3331      	adds	r3, #49	; 0x31
 8006c18:	f88b 3000 	strb.w	r3, [fp]
 8006c1c:	e776      	b.n	8006b0c <_dtoa_r+0x96c>
 8006c1e:	4630      	mov	r0, r6
 8006c20:	e7b9      	b.n	8006b96 <_dtoa_r+0x9f6>
 8006c22:	2201      	movs	r2, #1
 8006c24:	e7e2      	b.n	8006bec <_dtoa_r+0xa4c>
 8006c26:	9906      	ldr	r1, [sp, #24]
 8006c28:	2900      	cmp	r1, #0
 8006c2a:	db04      	blt.n	8006c36 <_dtoa_r+0xa96>
 8006c2c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006c2e:	4301      	orrs	r1, r0
 8006c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c32:	4301      	orrs	r1, r0
 8006c34:	d120      	bne.n	8006c78 <_dtoa_r+0xad8>
 8006c36:	2a00      	cmp	r2, #0
 8006c38:	ddee      	ble.n	8006c18 <_dtoa_r+0xa78>
 8006c3a:	4651      	mov	r1, sl
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	4628      	mov	r0, r5
 8006c40:	9302      	str	r3, [sp, #8]
 8006c42:	f000 fac3 	bl	80071cc <__lshift>
 8006c46:	4621      	mov	r1, r4
 8006c48:	4682      	mov	sl, r0
 8006c4a:	f000 fb2b 	bl	80072a4 <__mcmp>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	9b02      	ldr	r3, [sp, #8]
 8006c52:	dc02      	bgt.n	8006c5a <_dtoa_r+0xaba>
 8006c54:	d1e0      	bne.n	8006c18 <_dtoa_r+0xa78>
 8006c56:	07da      	lsls	r2, r3, #31
 8006c58:	d5de      	bpl.n	8006c18 <_dtoa_r+0xa78>
 8006c5a:	2b39      	cmp	r3, #57	; 0x39
 8006c5c:	d1da      	bne.n	8006c14 <_dtoa_r+0xa74>
 8006c5e:	2339      	movs	r3, #57	; 0x39
 8006c60:	f88b 3000 	strb.w	r3, [fp]
 8006c64:	463b      	mov	r3, r7
 8006c66:	461f      	mov	r7, r3
 8006c68:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	2a39      	cmp	r2, #57	; 0x39
 8006c70:	d050      	beq.n	8006d14 <_dtoa_r+0xb74>
 8006c72:	3201      	adds	r2, #1
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	e749      	b.n	8006b0c <_dtoa_r+0x96c>
 8006c78:	2a00      	cmp	r2, #0
 8006c7a:	dd03      	ble.n	8006c84 <_dtoa_r+0xae4>
 8006c7c:	2b39      	cmp	r3, #57	; 0x39
 8006c7e:	d0ee      	beq.n	8006c5e <_dtoa_r+0xabe>
 8006c80:	3301      	adds	r3, #1
 8006c82:	e7c9      	b.n	8006c18 <_dtoa_r+0xa78>
 8006c84:	9a02      	ldr	r2, [sp, #8]
 8006c86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c88:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c8c:	428a      	cmp	r2, r1
 8006c8e:	d02a      	beq.n	8006ce6 <_dtoa_r+0xb46>
 8006c90:	4651      	mov	r1, sl
 8006c92:	2300      	movs	r3, #0
 8006c94:	220a      	movs	r2, #10
 8006c96:	4628      	mov	r0, r5
 8006c98:	f000 f8ec 	bl	8006e74 <__multadd>
 8006c9c:	45b0      	cmp	r8, r6
 8006c9e:	4682      	mov	sl, r0
 8006ca0:	f04f 0300 	mov.w	r3, #0
 8006ca4:	f04f 020a 	mov.w	r2, #10
 8006ca8:	4641      	mov	r1, r8
 8006caa:	4628      	mov	r0, r5
 8006cac:	d107      	bne.n	8006cbe <_dtoa_r+0xb1e>
 8006cae:	f000 f8e1 	bl	8006e74 <__multadd>
 8006cb2:	4680      	mov	r8, r0
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	9b02      	ldr	r3, [sp, #8]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	9302      	str	r3, [sp, #8]
 8006cbc:	e777      	b.n	8006bae <_dtoa_r+0xa0e>
 8006cbe:	f000 f8d9 	bl	8006e74 <__multadd>
 8006cc2:	4631      	mov	r1, r6
 8006cc4:	4680      	mov	r8, r0
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	220a      	movs	r2, #10
 8006cca:	4628      	mov	r0, r5
 8006ccc:	f000 f8d2 	bl	8006e74 <__multadd>
 8006cd0:	4606      	mov	r6, r0
 8006cd2:	e7f0      	b.n	8006cb6 <_dtoa_r+0xb16>
 8006cd4:	f1bb 0f00 	cmp.w	fp, #0
 8006cd8:	bfcc      	ite	gt
 8006cda:	465f      	movgt	r7, fp
 8006cdc:	2701      	movle	r7, #1
 8006cde:	f04f 0800 	mov.w	r8, #0
 8006ce2:	9a08      	ldr	r2, [sp, #32]
 8006ce4:	4417      	add	r7, r2
 8006ce6:	4651      	mov	r1, sl
 8006ce8:	2201      	movs	r2, #1
 8006cea:	4628      	mov	r0, r5
 8006cec:	9302      	str	r3, [sp, #8]
 8006cee:	f000 fa6d 	bl	80071cc <__lshift>
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	4682      	mov	sl, r0
 8006cf6:	f000 fad5 	bl	80072a4 <__mcmp>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	dcb2      	bgt.n	8006c64 <_dtoa_r+0xac4>
 8006cfe:	d102      	bne.n	8006d06 <_dtoa_r+0xb66>
 8006d00:	9b02      	ldr	r3, [sp, #8]
 8006d02:	07db      	lsls	r3, r3, #31
 8006d04:	d4ae      	bmi.n	8006c64 <_dtoa_r+0xac4>
 8006d06:	463b      	mov	r3, r7
 8006d08:	461f      	mov	r7, r3
 8006d0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d0e:	2a30      	cmp	r2, #48	; 0x30
 8006d10:	d0fa      	beq.n	8006d08 <_dtoa_r+0xb68>
 8006d12:	e6fb      	b.n	8006b0c <_dtoa_r+0x96c>
 8006d14:	9a08      	ldr	r2, [sp, #32]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d1a5      	bne.n	8006c66 <_dtoa_r+0xac6>
 8006d1a:	2331      	movs	r3, #49	; 0x31
 8006d1c:	f109 0901 	add.w	r9, r9, #1
 8006d20:	7013      	strb	r3, [r2, #0]
 8006d22:	e6f3      	b.n	8006b0c <_dtoa_r+0x96c>
 8006d24:	4b13      	ldr	r3, [pc, #76]	; (8006d74 <_dtoa_r+0xbd4>)
 8006d26:	f7ff baa7 	b.w	8006278 <_dtoa_r+0xd8>
 8006d2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f47f aa80 	bne.w	8006232 <_dtoa_r+0x92>
 8006d32:	4b11      	ldr	r3, [pc, #68]	; (8006d78 <_dtoa_r+0xbd8>)
 8006d34:	f7ff baa0 	b.w	8006278 <_dtoa_r+0xd8>
 8006d38:	f1bb 0f00 	cmp.w	fp, #0
 8006d3c:	dc03      	bgt.n	8006d46 <_dtoa_r+0xba6>
 8006d3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	f73f aecc 	bgt.w	8006ade <_dtoa_r+0x93e>
 8006d46:	9f08      	ldr	r7, [sp, #32]
 8006d48:	4621      	mov	r1, r4
 8006d4a:	4650      	mov	r0, sl
 8006d4c:	f7ff f998 	bl	8006080 <quorem>
 8006d50:	9a08      	ldr	r2, [sp, #32]
 8006d52:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d56:	f807 3b01 	strb.w	r3, [r7], #1
 8006d5a:	1aba      	subs	r2, r7, r2
 8006d5c:	4593      	cmp	fp, r2
 8006d5e:	ddb9      	ble.n	8006cd4 <_dtoa_r+0xb34>
 8006d60:	4651      	mov	r1, sl
 8006d62:	2300      	movs	r3, #0
 8006d64:	220a      	movs	r2, #10
 8006d66:	4628      	mov	r0, r5
 8006d68:	f000 f884 	bl	8006e74 <__multadd>
 8006d6c:	4682      	mov	sl, r0
 8006d6e:	e7eb      	b.n	8006d48 <_dtoa_r+0xba8>
 8006d70:	08008633 	.word	0x08008633
 8006d74:	0800858c 	.word	0x0800858c
 8006d78:	080085b0 	.word	0x080085b0

08006d7c <_localeconv_r>:
 8006d7c:	4800      	ldr	r0, [pc, #0]	; (8006d80 <_localeconv_r+0x4>)
 8006d7e:	4770      	bx	lr
 8006d80:	200001f0 	.word	0x200001f0

08006d84 <malloc>:
 8006d84:	4b02      	ldr	r3, [pc, #8]	; (8006d90 <malloc+0xc>)
 8006d86:	4601      	mov	r1, r0
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	f000 bbed 	b.w	8007568 <_malloc_r>
 8006d8e:	bf00      	nop
 8006d90:	2000009c 	.word	0x2000009c

08006d94 <memchr>:
 8006d94:	4603      	mov	r3, r0
 8006d96:	b510      	push	{r4, lr}
 8006d98:	b2c9      	uxtb	r1, r1
 8006d9a:	4402      	add	r2, r0
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	d101      	bne.n	8006da6 <memchr+0x12>
 8006da2:	2000      	movs	r0, #0
 8006da4:	e003      	b.n	8006dae <memchr+0x1a>
 8006da6:	7804      	ldrb	r4, [r0, #0]
 8006da8:	3301      	adds	r3, #1
 8006daa:	428c      	cmp	r4, r1
 8006dac:	d1f6      	bne.n	8006d9c <memchr+0x8>
 8006dae:	bd10      	pop	{r4, pc}

08006db0 <_Balloc>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006db4:	4604      	mov	r4, r0
 8006db6:	460d      	mov	r5, r1
 8006db8:	b976      	cbnz	r6, 8006dd8 <_Balloc+0x28>
 8006dba:	2010      	movs	r0, #16
 8006dbc:	f7ff ffe2 	bl	8006d84 <malloc>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	6260      	str	r0, [r4, #36]	; 0x24
 8006dc4:	b920      	cbnz	r0, 8006dd0 <_Balloc+0x20>
 8006dc6:	2166      	movs	r1, #102	; 0x66
 8006dc8:	4b17      	ldr	r3, [pc, #92]	; (8006e28 <_Balloc+0x78>)
 8006dca:	4818      	ldr	r0, [pc, #96]	; (8006e2c <_Balloc+0x7c>)
 8006dcc:	f000 fd92 	bl	80078f4 <__assert_func>
 8006dd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dd4:	6006      	str	r6, [r0, #0]
 8006dd6:	60c6      	str	r6, [r0, #12]
 8006dd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006dda:	68f3      	ldr	r3, [r6, #12]
 8006ddc:	b183      	cbz	r3, 8006e00 <_Balloc+0x50>
 8006dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006de6:	b9b8      	cbnz	r0, 8006e18 <_Balloc+0x68>
 8006de8:	2101      	movs	r1, #1
 8006dea:	fa01 f605 	lsl.w	r6, r1, r5
 8006dee:	1d72      	adds	r2, r6, #5
 8006df0:	4620      	mov	r0, r4
 8006df2:	0092      	lsls	r2, r2, #2
 8006df4:	f000 fb5e 	bl	80074b4 <_calloc_r>
 8006df8:	b160      	cbz	r0, 8006e14 <_Balloc+0x64>
 8006dfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006dfe:	e00e      	b.n	8006e1e <_Balloc+0x6e>
 8006e00:	2221      	movs	r2, #33	; 0x21
 8006e02:	2104      	movs	r1, #4
 8006e04:	4620      	mov	r0, r4
 8006e06:	f000 fb55 	bl	80074b4 <_calloc_r>
 8006e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e0c:	60f0      	str	r0, [r6, #12]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e4      	bne.n	8006dde <_Balloc+0x2e>
 8006e14:	2000      	movs	r0, #0
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	6802      	ldr	r2, [r0, #0]
 8006e1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e24:	e7f7      	b.n	8006e16 <_Balloc+0x66>
 8006e26:	bf00      	nop
 8006e28:	080085bd 	.word	0x080085bd
 8006e2c:	08008644 	.word	0x08008644

08006e30 <_Bfree>:
 8006e30:	b570      	push	{r4, r5, r6, lr}
 8006e32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e34:	4605      	mov	r5, r0
 8006e36:	460c      	mov	r4, r1
 8006e38:	b976      	cbnz	r6, 8006e58 <_Bfree+0x28>
 8006e3a:	2010      	movs	r0, #16
 8006e3c:	f7ff ffa2 	bl	8006d84 <malloc>
 8006e40:	4602      	mov	r2, r0
 8006e42:	6268      	str	r0, [r5, #36]	; 0x24
 8006e44:	b920      	cbnz	r0, 8006e50 <_Bfree+0x20>
 8006e46:	218a      	movs	r1, #138	; 0x8a
 8006e48:	4b08      	ldr	r3, [pc, #32]	; (8006e6c <_Bfree+0x3c>)
 8006e4a:	4809      	ldr	r0, [pc, #36]	; (8006e70 <_Bfree+0x40>)
 8006e4c:	f000 fd52 	bl	80078f4 <__assert_func>
 8006e50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e54:	6006      	str	r6, [r0, #0]
 8006e56:	60c6      	str	r6, [r0, #12]
 8006e58:	b13c      	cbz	r4, 8006e6a <_Bfree+0x3a>
 8006e5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e5c:	6862      	ldr	r2, [r4, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e64:	6021      	str	r1, [r4, #0]
 8006e66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e6a:	bd70      	pop	{r4, r5, r6, pc}
 8006e6c:	080085bd 	.word	0x080085bd
 8006e70:	08008644 	.word	0x08008644

08006e74 <__multadd>:
 8006e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e78:	4698      	mov	r8, r3
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	690e      	ldr	r6, [r1, #16]
 8006e80:	4607      	mov	r7, r0
 8006e82:	f101 0014 	add.w	r0, r1, #20
 8006e86:	6805      	ldr	r5, [r0, #0]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	b2a9      	uxth	r1, r5
 8006e8c:	fb02 8101 	mla	r1, r2, r1, r8
 8006e90:	0c2d      	lsrs	r5, r5, #16
 8006e92:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006e96:	fb02 c505 	mla	r5, r2, r5, ip
 8006e9a:	b289      	uxth	r1, r1
 8006e9c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006ea0:	429e      	cmp	r6, r3
 8006ea2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006ea6:	f840 1b04 	str.w	r1, [r0], #4
 8006eaa:	dcec      	bgt.n	8006e86 <__multadd+0x12>
 8006eac:	f1b8 0f00 	cmp.w	r8, #0
 8006eb0:	d022      	beq.n	8006ef8 <__multadd+0x84>
 8006eb2:	68a3      	ldr	r3, [r4, #8]
 8006eb4:	42b3      	cmp	r3, r6
 8006eb6:	dc19      	bgt.n	8006eec <__multadd+0x78>
 8006eb8:	6861      	ldr	r1, [r4, #4]
 8006eba:	4638      	mov	r0, r7
 8006ebc:	3101      	adds	r1, #1
 8006ebe:	f7ff ff77 	bl	8006db0 <_Balloc>
 8006ec2:	4605      	mov	r5, r0
 8006ec4:	b928      	cbnz	r0, 8006ed2 <__multadd+0x5e>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	21b5      	movs	r1, #181	; 0xb5
 8006eca:	4b0d      	ldr	r3, [pc, #52]	; (8006f00 <__multadd+0x8c>)
 8006ecc:	480d      	ldr	r0, [pc, #52]	; (8006f04 <__multadd+0x90>)
 8006ece:	f000 fd11 	bl	80078f4 <__assert_func>
 8006ed2:	6922      	ldr	r2, [r4, #16]
 8006ed4:	f104 010c 	add.w	r1, r4, #12
 8006ed8:	3202      	adds	r2, #2
 8006eda:	0092      	lsls	r2, r2, #2
 8006edc:	300c      	adds	r0, #12
 8006ede:	f7fe fc19 	bl	8005714 <memcpy>
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	f7ff ffa3 	bl	8006e30 <_Bfree>
 8006eea:	462c      	mov	r4, r5
 8006eec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006ef0:	3601      	adds	r6, #1
 8006ef2:	f8c3 8014 	str.w	r8, [r3, #20]
 8006ef6:	6126      	str	r6, [r4, #16]
 8006ef8:	4620      	mov	r0, r4
 8006efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006efe:	bf00      	nop
 8006f00:	08008633 	.word	0x08008633
 8006f04:	08008644 	.word	0x08008644

08006f08 <__hi0bits>:
 8006f08:	0c02      	lsrs	r2, r0, #16
 8006f0a:	0412      	lsls	r2, r2, #16
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	b9ca      	cbnz	r2, 8006f44 <__hi0bits+0x3c>
 8006f10:	0403      	lsls	r3, r0, #16
 8006f12:	2010      	movs	r0, #16
 8006f14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006f18:	bf04      	itt	eq
 8006f1a:	021b      	lsleq	r3, r3, #8
 8006f1c:	3008      	addeq	r0, #8
 8006f1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006f22:	bf04      	itt	eq
 8006f24:	011b      	lsleq	r3, r3, #4
 8006f26:	3004      	addeq	r0, #4
 8006f28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006f2c:	bf04      	itt	eq
 8006f2e:	009b      	lsleq	r3, r3, #2
 8006f30:	3002      	addeq	r0, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	db05      	blt.n	8006f42 <__hi0bits+0x3a>
 8006f36:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006f3a:	f100 0001 	add.w	r0, r0, #1
 8006f3e:	bf08      	it	eq
 8006f40:	2020      	moveq	r0, #32
 8006f42:	4770      	bx	lr
 8006f44:	2000      	movs	r0, #0
 8006f46:	e7e5      	b.n	8006f14 <__hi0bits+0xc>

08006f48 <__lo0bits>:
 8006f48:	6803      	ldr	r3, [r0, #0]
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	f013 0007 	ands.w	r0, r3, #7
 8006f50:	d00b      	beq.n	8006f6a <__lo0bits+0x22>
 8006f52:	07d9      	lsls	r1, r3, #31
 8006f54:	d422      	bmi.n	8006f9c <__lo0bits+0x54>
 8006f56:	0798      	lsls	r0, r3, #30
 8006f58:	bf49      	itett	mi
 8006f5a:	085b      	lsrmi	r3, r3, #1
 8006f5c:	089b      	lsrpl	r3, r3, #2
 8006f5e:	2001      	movmi	r0, #1
 8006f60:	6013      	strmi	r3, [r2, #0]
 8006f62:	bf5c      	itt	pl
 8006f64:	2002      	movpl	r0, #2
 8006f66:	6013      	strpl	r3, [r2, #0]
 8006f68:	4770      	bx	lr
 8006f6a:	b299      	uxth	r1, r3
 8006f6c:	b909      	cbnz	r1, 8006f72 <__lo0bits+0x2a>
 8006f6e:	2010      	movs	r0, #16
 8006f70:	0c1b      	lsrs	r3, r3, #16
 8006f72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f76:	bf04      	itt	eq
 8006f78:	0a1b      	lsreq	r3, r3, #8
 8006f7a:	3008      	addeq	r0, #8
 8006f7c:	0719      	lsls	r1, r3, #28
 8006f7e:	bf04      	itt	eq
 8006f80:	091b      	lsreq	r3, r3, #4
 8006f82:	3004      	addeq	r0, #4
 8006f84:	0799      	lsls	r1, r3, #30
 8006f86:	bf04      	itt	eq
 8006f88:	089b      	lsreq	r3, r3, #2
 8006f8a:	3002      	addeq	r0, #2
 8006f8c:	07d9      	lsls	r1, r3, #31
 8006f8e:	d403      	bmi.n	8006f98 <__lo0bits+0x50>
 8006f90:	085b      	lsrs	r3, r3, #1
 8006f92:	f100 0001 	add.w	r0, r0, #1
 8006f96:	d003      	beq.n	8006fa0 <__lo0bits+0x58>
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	4770      	bx	lr
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	4770      	bx	lr
 8006fa0:	2020      	movs	r0, #32
 8006fa2:	4770      	bx	lr

08006fa4 <__i2b>:
 8006fa4:	b510      	push	{r4, lr}
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	2101      	movs	r1, #1
 8006faa:	f7ff ff01 	bl	8006db0 <_Balloc>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	b928      	cbnz	r0, 8006fbe <__i2b+0x1a>
 8006fb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006fb6:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <__i2b+0x24>)
 8006fb8:	4804      	ldr	r0, [pc, #16]	; (8006fcc <__i2b+0x28>)
 8006fba:	f000 fc9b 	bl	80078f4 <__assert_func>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	6144      	str	r4, [r0, #20]
 8006fc2:	6103      	str	r3, [r0, #16]
 8006fc4:	bd10      	pop	{r4, pc}
 8006fc6:	bf00      	nop
 8006fc8:	08008633 	.word	0x08008633
 8006fcc:	08008644 	.word	0x08008644

08006fd0 <__multiply>:
 8006fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	4614      	mov	r4, r2
 8006fd6:	690a      	ldr	r2, [r1, #16]
 8006fd8:	6923      	ldr	r3, [r4, #16]
 8006fda:	460d      	mov	r5, r1
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	bfbe      	ittt	lt
 8006fe0:	460b      	movlt	r3, r1
 8006fe2:	4625      	movlt	r5, r4
 8006fe4:	461c      	movlt	r4, r3
 8006fe6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006fea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006fee:	68ab      	ldr	r3, [r5, #8]
 8006ff0:	6869      	ldr	r1, [r5, #4]
 8006ff2:	eb0a 0709 	add.w	r7, sl, r9
 8006ff6:	42bb      	cmp	r3, r7
 8006ff8:	b085      	sub	sp, #20
 8006ffa:	bfb8      	it	lt
 8006ffc:	3101      	addlt	r1, #1
 8006ffe:	f7ff fed7 	bl	8006db0 <_Balloc>
 8007002:	b930      	cbnz	r0, 8007012 <__multiply+0x42>
 8007004:	4602      	mov	r2, r0
 8007006:	f240 115d 	movw	r1, #349	; 0x15d
 800700a:	4b41      	ldr	r3, [pc, #260]	; (8007110 <__multiply+0x140>)
 800700c:	4841      	ldr	r0, [pc, #260]	; (8007114 <__multiply+0x144>)
 800700e:	f000 fc71 	bl	80078f4 <__assert_func>
 8007012:	f100 0614 	add.w	r6, r0, #20
 8007016:	4633      	mov	r3, r6
 8007018:	2200      	movs	r2, #0
 800701a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800701e:	4543      	cmp	r3, r8
 8007020:	d31e      	bcc.n	8007060 <__multiply+0x90>
 8007022:	f105 0c14 	add.w	ip, r5, #20
 8007026:	f104 0314 	add.w	r3, r4, #20
 800702a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800702e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007032:	9202      	str	r2, [sp, #8]
 8007034:	ebac 0205 	sub.w	r2, ip, r5
 8007038:	3a15      	subs	r2, #21
 800703a:	f022 0203 	bic.w	r2, r2, #3
 800703e:	3204      	adds	r2, #4
 8007040:	f105 0115 	add.w	r1, r5, #21
 8007044:	458c      	cmp	ip, r1
 8007046:	bf38      	it	cc
 8007048:	2204      	movcc	r2, #4
 800704a:	9201      	str	r2, [sp, #4]
 800704c:	9a02      	ldr	r2, [sp, #8]
 800704e:	9303      	str	r3, [sp, #12]
 8007050:	429a      	cmp	r2, r3
 8007052:	d808      	bhi.n	8007066 <__multiply+0x96>
 8007054:	2f00      	cmp	r7, #0
 8007056:	dc55      	bgt.n	8007104 <__multiply+0x134>
 8007058:	6107      	str	r7, [r0, #16]
 800705a:	b005      	add	sp, #20
 800705c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007060:	f843 2b04 	str.w	r2, [r3], #4
 8007064:	e7db      	b.n	800701e <__multiply+0x4e>
 8007066:	f8b3 a000 	ldrh.w	sl, [r3]
 800706a:	f1ba 0f00 	cmp.w	sl, #0
 800706e:	d020      	beq.n	80070b2 <__multiply+0xe2>
 8007070:	46b1      	mov	r9, r6
 8007072:	2200      	movs	r2, #0
 8007074:	f105 0e14 	add.w	lr, r5, #20
 8007078:	f85e 4b04 	ldr.w	r4, [lr], #4
 800707c:	f8d9 b000 	ldr.w	fp, [r9]
 8007080:	b2a1      	uxth	r1, r4
 8007082:	fa1f fb8b 	uxth.w	fp, fp
 8007086:	fb0a b101 	mla	r1, sl, r1, fp
 800708a:	4411      	add	r1, r2
 800708c:	f8d9 2000 	ldr.w	r2, [r9]
 8007090:	0c24      	lsrs	r4, r4, #16
 8007092:	0c12      	lsrs	r2, r2, #16
 8007094:	fb0a 2404 	mla	r4, sl, r4, r2
 8007098:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800709c:	b289      	uxth	r1, r1
 800709e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80070a2:	45f4      	cmp	ip, lr
 80070a4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80070a8:	f849 1b04 	str.w	r1, [r9], #4
 80070ac:	d8e4      	bhi.n	8007078 <__multiply+0xa8>
 80070ae:	9901      	ldr	r1, [sp, #4]
 80070b0:	5072      	str	r2, [r6, r1]
 80070b2:	9a03      	ldr	r2, [sp, #12]
 80070b4:	3304      	adds	r3, #4
 80070b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070ba:	f1b9 0f00 	cmp.w	r9, #0
 80070be:	d01f      	beq.n	8007100 <__multiply+0x130>
 80070c0:	46b6      	mov	lr, r6
 80070c2:	f04f 0a00 	mov.w	sl, #0
 80070c6:	6834      	ldr	r4, [r6, #0]
 80070c8:	f105 0114 	add.w	r1, r5, #20
 80070cc:	880a      	ldrh	r2, [r1, #0]
 80070ce:	f8be b002 	ldrh.w	fp, [lr, #2]
 80070d2:	b2a4      	uxth	r4, r4
 80070d4:	fb09 b202 	mla	r2, r9, r2, fp
 80070d8:	4492      	add	sl, r2
 80070da:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80070de:	f84e 4b04 	str.w	r4, [lr], #4
 80070e2:	f851 4b04 	ldr.w	r4, [r1], #4
 80070e6:	f8be 2000 	ldrh.w	r2, [lr]
 80070ea:	0c24      	lsrs	r4, r4, #16
 80070ec:	fb09 2404 	mla	r4, r9, r4, r2
 80070f0:	458c      	cmp	ip, r1
 80070f2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80070f6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80070fa:	d8e7      	bhi.n	80070cc <__multiply+0xfc>
 80070fc:	9a01      	ldr	r2, [sp, #4]
 80070fe:	50b4      	str	r4, [r6, r2]
 8007100:	3604      	adds	r6, #4
 8007102:	e7a3      	b.n	800704c <__multiply+0x7c>
 8007104:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1a5      	bne.n	8007058 <__multiply+0x88>
 800710c:	3f01      	subs	r7, #1
 800710e:	e7a1      	b.n	8007054 <__multiply+0x84>
 8007110:	08008633 	.word	0x08008633
 8007114:	08008644 	.word	0x08008644

08007118 <__pow5mult>:
 8007118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800711c:	4615      	mov	r5, r2
 800711e:	f012 0203 	ands.w	r2, r2, #3
 8007122:	4606      	mov	r6, r0
 8007124:	460f      	mov	r7, r1
 8007126:	d007      	beq.n	8007138 <__pow5mult+0x20>
 8007128:	4c25      	ldr	r4, [pc, #148]	; (80071c0 <__pow5mult+0xa8>)
 800712a:	3a01      	subs	r2, #1
 800712c:	2300      	movs	r3, #0
 800712e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007132:	f7ff fe9f 	bl	8006e74 <__multadd>
 8007136:	4607      	mov	r7, r0
 8007138:	10ad      	asrs	r5, r5, #2
 800713a:	d03d      	beq.n	80071b8 <__pow5mult+0xa0>
 800713c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800713e:	b97c      	cbnz	r4, 8007160 <__pow5mult+0x48>
 8007140:	2010      	movs	r0, #16
 8007142:	f7ff fe1f 	bl	8006d84 <malloc>
 8007146:	4602      	mov	r2, r0
 8007148:	6270      	str	r0, [r6, #36]	; 0x24
 800714a:	b928      	cbnz	r0, 8007158 <__pow5mult+0x40>
 800714c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007150:	4b1c      	ldr	r3, [pc, #112]	; (80071c4 <__pow5mult+0xac>)
 8007152:	481d      	ldr	r0, [pc, #116]	; (80071c8 <__pow5mult+0xb0>)
 8007154:	f000 fbce 	bl	80078f4 <__assert_func>
 8007158:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800715c:	6004      	str	r4, [r0, #0]
 800715e:	60c4      	str	r4, [r0, #12]
 8007160:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007164:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007168:	b94c      	cbnz	r4, 800717e <__pow5mult+0x66>
 800716a:	f240 2171 	movw	r1, #625	; 0x271
 800716e:	4630      	mov	r0, r6
 8007170:	f7ff ff18 	bl	8006fa4 <__i2b>
 8007174:	2300      	movs	r3, #0
 8007176:	4604      	mov	r4, r0
 8007178:	f8c8 0008 	str.w	r0, [r8, #8]
 800717c:	6003      	str	r3, [r0, #0]
 800717e:	f04f 0900 	mov.w	r9, #0
 8007182:	07eb      	lsls	r3, r5, #31
 8007184:	d50a      	bpl.n	800719c <__pow5mult+0x84>
 8007186:	4639      	mov	r1, r7
 8007188:	4622      	mov	r2, r4
 800718a:	4630      	mov	r0, r6
 800718c:	f7ff ff20 	bl	8006fd0 <__multiply>
 8007190:	4680      	mov	r8, r0
 8007192:	4639      	mov	r1, r7
 8007194:	4630      	mov	r0, r6
 8007196:	f7ff fe4b 	bl	8006e30 <_Bfree>
 800719a:	4647      	mov	r7, r8
 800719c:	106d      	asrs	r5, r5, #1
 800719e:	d00b      	beq.n	80071b8 <__pow5mult+0xa0>
 80071a0:	6820      	ldr	r0, [r4, #0]
 80071a2:	b938      	cbnz	r0, 80071b4 <__pow5mult+0x9c>
 80071a4:	4622      	mov	r2, r4
 80071a6:	4621      	mov	r1, r4
 80071a8:	4630      	mov	r0, r6
 80071aa:	f7ff ff11 	bl	8006fd0 <__multiply>
 80071ae:	6020      	str	r0, [r4, #0]
 80071b0:	f8c0 9000 	str.w	r9, [r0]
 80071b4:	4604      	mov	r4, r0
 80071b6:	e7e4      	b.n	8007182 <__pow5mult+0x6a>
 80071b8:	4638      	mov	r0, r7
 80071ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071be:	bf00      	nop
 80071c0:	08008798 	.word	0x08008798
 80071c4:	080085bd 	.word	0x080085bd
 80071c8:	08008644 	.word	0x08008644

080071cc <__lshift>:
 80071cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d0:	460c      	mov	r4, r1
 80071d2:	4607      	mov	r7, r0
 80071d4:	4691      	mov	r9, r2
 80071d6:	6923      	ldr	r3, [r4, #16]
 80071d8:	6849      	ldr	r1, [r1, #4]
 80071da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071de:	68a3      	ldr	r3, [r4, #8]
 80071e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071e4:	f108 0601 	add.w	r6, r8, #1
 80071e8:	42b3      	cmp	r3, r6
 80071ea:	db0b      	blt.n	8007204 <__lshift+0x38>
 80071ec:	4638      	mov	r0, r7
 80071ee:	f7ff fddf 	bl	8006db0 <_Balloc>
 80071f2:	4605      	mov	r5, r0
 80071f4:	b948      	cbnz	r0, 800720a <__lshift+0x3e>
 80071f6:	4602      	mov	r2, r0
 80071f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80071fc:	4b27      	ldr	r3, [pc, #156]	; (800729c <__lshift+0xd0>)
 80071fe:	4828      	ldr	r0, [pc, #160]	; (80072a0 <__lshift+0xd4>)
 8007200:	f000 fb78 	bl	80078f4 <__assert_func>
 8007204:	3101      	adds	r1, #1
 8007206:	005b      	lsls	r3, r3, #1
 8007208:	e7ee      	b.n	80071e8 <__lshift+0x1c>
 800720a:	2300      	movs	r3, #0
 800720c:	f100 0114 	add.w	r1, r0, #20
 8007210:	f100 0210 	add.w	r2, r0, #16
 8007214:	4618      	mov	r0, r3
 8007216:	4553      	cmp	r3, sl
 8007218:	db33      	blt.n	8007282 <__lshift+0xb6>
 800721a:	6920      	ldr	r0, [r4, #16]
 800721c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007220:	f104 0314 	add.w	r3, r4, #20
 8007224:	f019 091f 	ands.w	r9, r9, #31
 8007228:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800722c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007230:	d02b      	beq.n	800728a <__lshift+0xbe>
 8007232:	468a      	mov	sl, r1
 8007234:	2200      	movs	r2, #0
 8007236:	f1c9 0e20 	rsb	lr, r9, #32
 800723a:	6818      	ldr	r0, [r3, #0]
 800723c:	fa00 f009 	lsl.w	r0, r0, r9
 8007240:	4302      	orrs	r2, r0
 8007242:	f84a 2b04 	str.w	r2, [sl], #4
 8007246:	f853 2b04 	ldr.w	r2, [r3], #4
 800724a:	459c      	cmp	ip, r3
 800724c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007250:	d8f3      	bhi.n	800723a <__lshift+0x6e>
 8007252:	ebac 0304 	sub.w	r3, ip, r4
 8007256:	3b15      	subs	r3, #21
 8007258:	f023 0303 	bic.w	r3, r3, #3
 800725c:	3304      	adds	r3, #4
 800725e:	f104 0015 	add.w	r0, r4, #21
 8007262:	4584      	cmp	ip, r0
 8007264:	bf38      	it	cc
 8007266:	2304      	movcc	r3, #4
 8007268:	50ca      	str	r2, [r1, r3]
 800726a:	b10a      	cbz	r2, 8007270 <__lshift+0xa4>
 800726c:	f108 0602 	add.w	r6, r8, #2
 8007270:	3e01      	subs	r6, #1
 8007272:	4638      	mov	r0, r7
 8007274:	4621      	mov	r1, r4
 8007276:	612e      	str	r6, [r5, #16]
 8007278:	f7ff fdda 	bl	8006e30 <_Bfree>
 800727c:	4628      	mov	r0, r5
 800727e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007282:	f842 0f04 	str.w	r0, [r2, #4]!
 8007286:	3301      	adds	r3, #1
 8007288:	e7c5      	b.n	8007216 <__lshift+0x4a>
 800728a:	3904      	subs	r1, #4
 800728c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007290:	459c      	cmp	ip, r3
 8007292:	f841 2f04 	str.w	r2, [r1, #4]!
 8007296:	d8f9      	bhi.n	800728c <__lshift+0xc0>
 8007298:	e7ea      	b.n	8007270 <__lshift+0xa4>
 800729a:	bf00      	nop
 800729c:	08008633 	.word	0x08008633
 80072a0:	08008644 	.word	0x08008644

080072a4 <__mcmp>:
 80072a4:	4603      	mov	r3, r0
 80072a6:	690a      	ldr	r2, [r1, #16]
 80072a8:	6900      	ldr	r0, [r0, #16]
 80072aa:	b530      	push	{r4, r5, lr}
 80072ac:	1a80      	subs	r0, r0, r2
 80072ae:	d10d      	bne.n	80072cc <__mcmp+0x28>
 80072b0:	3314      	adds	r3, #20
 80072b2:	3114      	adds	r1, #20
 80072b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80072b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80072bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80072c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80072c4:	4295      	cmp	r5, r2
 80072c6:	d002      	beq.n	80072ce <__mcmp+0x2a>
 80072c8:	d304      	bcc.n	80072d4 <__mcmp+0x30>
 80072ca:	2001      	movs	r0, #1
 80072cc:	bd30      	pop	{r4, r5, pc}
 80072ce:	42a3      	cmp	r3, r4
 80072d0:	d3f4      	bcc.n	80072bc <__mcmp+0x18>
 80072d2:	e7fb      	b.n	80072cc <__mcmp+0x28>
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072d8:	e7f8      	b.n	80072cc <__mcmp+0x28>
	...

080072dc <__mdiff>:
 80072dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e0:	460c      	mov	r4, r1
 80072e2:	4606      	mov	r6, r0
 80072e4:	4611      	mov	r1, r2
 80072e6:	4620      	mov	r0, r4
 80072e8:	4692      	mov	sl, r2
 80072ea:	f7ff ffdb 	bl	80072a4 <__mcmp>
 80072ee:	1e05      	subs	r5, r0, #0
 80072f0:	d111      	bne.n	8007316 <__mdiff+0x3a>
 80072f2:	4629      	mov	r1, r5
 80072f4:	4630      	mov	r0, r6
 80072f6:	f7ff fd5b 	bl	8006db0 <_Balloc>
 80072fa:	4602      	mov	r2, r0
 80072fc:	b928      	cbnz	r0, 800730a <__mdiff+0x2e>
 80072fe:	f240 2132 	movw	r1, #562	; 0x232
 8007302:	4b3c      	ldr	r3, [pc, #240]	; (80073f4 <__mdiff+0x118>)
 8007304:	483c      	ldr	r0, [pc, #240]	; (80073f8 <__mdiff+0x11c>)
 8007306:	f000 faf5 	bl	80078f4 <__assert_func>
 800730a:	2301      	movs	r3, #1
 800730c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007310:	4610      	mov	r0, r2
 8007312:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007316:	bfa4      	itt	ge
 8007318:	4653      	movge	r3, sl
 800731a:	46a2      	movge	sl, r4
 800731c:	4630      	mov	r0, r6
 800731e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007322:	bfa6      	itte	ge
 8007324:	461c      	movge	r4, r3
 8007326:	2500      	movge	r5, #0
 8007328:	2501      	movlt	r5, #1
 800732a:	f7ff fd41 	bl	8006db0 <_Balloc>
 800732e:	4602      	mov	r2, r0
 8007330:	b918      	cbnz	r0, 800733a <__mdiff+0x5e>
 8007332:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007336:	4b2f      	ldr	r3, [pc, #188]	; (80073f4 <__mdiff+0x118>)
 8007338:	e7e4      	b.n	8007304 <__mdiff+0x28>
 800733a:	f100 0814 	add.w	r8, r0, #20
 800733e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007342:	60c5      	str	r5, [r0, #12]
 8007344:	f04f 0c00 	mov.w	ip, #0
 8007348:	f10a 0514 	add.w	r5, sl, #20
 800734c:	f10a 0010 	add.w	r0, sl, #16
 8007350:	46c2      	mov	sl, r8
 8007352:	6926      	ldr	r6, [r4, #16]
 8007354:	f104 0914 	add.w	r9, r4, #20
 8007358:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800735c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007360:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007364:	f859 3b04 	ldr.w	r3, [r9], #4
 8007368:	fa1f f18b 	uxth.w	r1, fp
 800736c:	4461      	add	r1, ip
 800736e:	fa1f fc83 	uxth.w	ip, r3
 8007372:	0c1b      	lsrs	r3, r3, #16
 8007374:	eba1 010c 	sub.w	r1, r1, ip
 8007378:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800737c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007380:	b289      	uxth	r1, r1
 8007382:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007386:	454e      	cmp	r6, r9
 8007388:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800738c:	f84a 3b04 	str.w	r3, [sl], #4
 8007390:	d8e6      	bhi.n	8007360 <__mdiff+0x84>
 8007392:	1b33      	subs	r3, r6, r4
 8007394:	3b15      	subs	r3, #21
 8007396:	f023 0303 	bic.w	r3, r3, #3
 800739a:	3415      	adds	r4, #21
 800739c:	3304      	adds	r3, #4
 800739e:	42a6      	cmp	r6, r4
 80073a0:	bf38      	it	cc
 80073a2:	2304      	movcc	r3, #4
 80073a4:	441d      	add	r5, r3
 80073a6:	4443      	add	r3, r8
 80073a8:	461e      	mov	r6, r3
 80073aa:	462c      	mov	r4, r5
 80073ac:	4574      	cmp	r4, lr
 80073ae:	d30e      	bcc.n	80073ce <__mdiff+0xf2>
 80073b0:	f10e 0103 	add.w	r1, lr, #3
 80073b4:	1b49      	subs	r1, r1, r5
 80073b6:	f021 0103 	bic.w	r1, r1, #3
 80073ba:	3d03      	subs	r5, #3
 80073bc:	45ae      	cmp	lr, r5
 80073be:	bf38      	it	cc
 80073c0:	2100      	movcc	r1, #0
 80073c2:	4419      	add	r1, r3
 80073c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80073c8:	b18b      	cbz	r3, 80073ee <__mdiff+0x112>
 80073ca:	6117      	str	r7, [r2, #16]
 80073cc:	e7a0      	b.n	8007310 <__mdiff+0x34>
 80073ce:	f854 8b04 	ldr.w	r8, [r4], #4
 80073d2:	fa1f f188 	uxth.w	r1, r8
 80073d6:	4461      	add	r1, ip
 80073d8:	1408      	asrs	r0, r1, #16
 80073da:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80073de:	b289      	uxth	r1, r1
 80073e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80073e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073e8:	f846 1b04 	str.w	r1, [r6], #4
 80073ec:	e7de      	b.n	80073ac <__mdiff+0xd0>
 80073ee:	3f01      	subs	r7, #1
 80073f0:	e7e8      	b.n	80073c4 <__mdiff+0xe8>
 80073f2:	bf00      	nop
 80073f4:	08008633 	.word	0x08008633
 80073f8:	08008644 	.word	0x08008644

080073fc <__d2b>:
 80073fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007400:	2101      	movs	r1, #1
 8007402:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007406:	4690      	mov	r8, r2
 8007408:	461d      	mov	r5, r3
 800740a:	f7ff fcd1 	bl	8006db0 <_Balloc>
 800740e:	4604      	mov	r4, r0
 8007410:	b930      	cbnz	r0, 8007420 <__d2b+0x24>
 8007412:	4602      	mov	r2, r0
 8007414:	f240 310a 	movw	r1, #778	; 0x30a
 8007418:	4b24      	ldr	r3, [pc, #144]	; (80074ac <__d2b+0xb0>)
 800741a:	4825      	ldr	r0, [pc, #148]	; (80074b0 <__d2b+0xb4>)
 800741c:	f000 fa6a 	bl	80078f4 <__assert_func>
 8007420:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007424:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007428:	bb2d      	cbnz	r5, 8007476 <__d2b+0x7a>
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	f1b8 0300 	subs.w	r3, r8, #0
 8007430:	d026      	beq.n	8007480 <__d2b+0x84>
 8007432:	4668      	mov	r0, sp
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	f7ff fd87 	bl	8006f48 <__lo0bits>
 800743a:	9900      	ldr	r1, [sp, #0]
 800743c:	b1f0      	cbz	r0, 800747c <__d2b+0x80>
 800743e:	9a01      	ldr	r2, [sp, #4]
 8007440:	f1c0 0320 	rsb	r3, r0, #32
 8007444:	fa02 f303 	lsl.w	r3, r2, r3
 8007448:	430b      	orrs	r3, r1
 800744a:	40c2      	lsrs	r2, r0
 800744c:	6163      	str	r3, [r4, #20]
 800744e:	9201      	str	r2, [sp, #4]
 8007450:	9b01      	ldr	r3, [sp, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	bf14      	ite	ne
 8007456:	2102      	movne	r1, #2
 8007458:	2101      	moveq	r1, #1
 800745a:	61a3      	str	r3, [r4, #24]
 800745c:	6121      	str	r1, [r4, #16]
 800745e:	b1c5      	cbz	r5, 8007492 <__d2b+0x96>
 8007460:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007464:	4405      	add	r5, r0
 8007466:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800746a:	603d      	str	r5, [r7, #0]
 800746c:	6030      	str	r0, [r6, #0]
 800746e:	4620      	mov	r0, r4
 8007470:	b002      	add	sp, #8
 8007472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800747a:	e7d6      	b.n	800742a <__d2b+0x2e>
 800747c:	6161      	str	r1, [r4, #20]
 800747e:	e7e7      	b.n	8007450 <__d2b+0x54>
 8007480:	a801      	add	r0, sp, #4
 8007482:	f7ff fd61 	bl	8006f48 <__lo0bits>
 8007486:	2101      	movs	r1, #1
 8007488:	9b01      	ldr	r3, [sp, #4]
 800748a:	6121      	str	r1, [r4, #16]
 800748c:	6163      	str	r3, [r4, #20]
 800748e:	3020      	adds	r0, #32
 8007490:	e7e5      	b.n	800745e <__d2b+0x62>
 8007492:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007496:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800749a:	6038      	str	r0, [r7, #0]
 800749c:	6918      	ldr	r0, [r3, #16]
 800749e:	f7ff fd33 	bl	8006f08 <__hi0bits>
 80074a2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80074a6:	6031      	str	r1, [r6, #0]
 80074a8:	e7e1      	b.n	800746e <__d2b+0x72>
 80074aa:	bf00      	nop
 80074ac:	08008633 	.word	0x08008633
 80074b0:	08008644 	.word	0x08008644

080074b4 <_calloc_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	fb02 f501 	mul.w	r5, r2, r1
 80074ba:	4629      	mov	r1, r5
 80074bc:	f000 f854 	bl	8007568 <_malloc_r>
 80074c0:	4604      	mov	r4, r0
 80074c2:	b118      	cbz	r0, 80074cc <_calloc_r+0x18>
 80074c4:	462a      	mov	r2, r5
 80074c6:	2100      	movs	r1, #0
 80074c8:	f7fe f932 	bl	8005730 <memset>
 80074cc:	4620      	mov	r0, r4
 80074ce:	bd38      	pop	{r3, r4, r5, pc}

080074d0 <_free_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	4605      	mov	r5, r0
 80074d4:	2900      	cmp	r1, #0
 80074d6:	d043      	beq.n	8007560 <_free_r+0x90>
 80074d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074dc:	1f0c      	subs	r4, r1, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bfb8      	it	lt
 80074e2:	18e4      	addlt	r4, r4, r3
 80074e4:	f000 fa62 	bl	80079ac <__malloc_lock>
 80074e8:	4a1e      	ldr	r2, [pc, #120]	; (8007564 <_free_r+0x94>)
 80074ea:	6813      	ldr	r3, [r2, #0]
 80074ec:	4610      	mov	r0, r2
 80074ee:	b933      	cbnz	r3, 80074fe <_free_r+0x2e>
 80074f0:	6063      	str	r3, [r4, #4]
 80074f2:	6014      	str	r4, [r2, #0]
 80074f4:	4628      	mov	r0, r5
 80074f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074fa:	f000 ba5d 	b.w	80079b8 <__malloc_unlock>
 80074fe:	42a3      	cmp	r3, r4
 8007500:	d90a      	bls.n	8007518 <_free_r+0x48>
 8007502:	6821      	ldr	r1, [r4, #0]
 8007504:	1862      	adds	r2, r4, r1
 8007506:	4293      	cmp	r3, r2
 8007508:	bf01      	itttt	eq
 800750a:	681a      	ldreq	r2, [r3, #0]
 800750c:	685b      	ldreq	r3, [r3, #4]
 800750e:	1852      	addeq	r2, r2, r1
 8007510:	6022      	streq	r2, [r4, #0]
 8007512:	6063      	str	r3, [r4, #4]
 8007514:	6004      	str	r4, [r0, #0]
 8007516:	e7ed      	b.n	80074f4 <_free_r+0x24>
 8007518:	461a      	mov	r2, r3
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	b10b      	cbz	r3, 8007522 <_free_r+0x52>
 800751e:	42a3      	cmp	r3, r4
 8007520:	d9fa      	bls.n	8007518 <_free_r+0x48>
 8007522:	6811      	ldr	r1, [r2, #0]
 8007524:	1850      	adds	r0, r2, r1
 8007526:	42a0      	cmp	r0, r4
 8007528:	d10b      	bne.n	8007542 <_free_r+0x72>
 800752a:	6820      	ldr	r0, [r4, #0]
 800752c:	4401      	add	r1, r0
 800752e:	1850      	adds	r0, r2, r1
 8007530:	4283      	cmp	r3, r0
 8007532:	6011      	str	r1, [r2, #0]
 8007534:	d1de      	bne.n	80074f4 <_free_r+0x24>
 8007536:	6818      	ldr	r0, [r3, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	4401      	add	r1, r0
 800753c:	6011      	str	r1, [r2, #0]
 800753e:	6053      	str	r3, [r2, #4]
 8007540:	e7d8      	b.n	80074f4 <_free_r+0x24>
 8007542:	d902      	bls.n	800754a <_free_r+0x7a>
 8007544:	230c      	movs	r3, #12
 8007546:	602b      	str	r3, [r5, #0]
 8007548:	e7d4      	b.n	80074f4 <_free_r+0x24>
 800754a:	6820      	ldr	r0, [r4, #0]
 800754c:	1821      	adds	r1, r4, r0
 800754e:	428b      	cmp	r3, r1
 8007550:	bf01      	itttt	eq
 8007552:	6819      	ldreq	r1, [r3, #0]
 8007554:	685b      	ldreq	r3, [r3, #4]
 8007556:	1809      	addeq	r1, r1, r0
 8007558:	6021      	streq	r1, [r4, #0]
 800755a:	6063      	str	r3, [r4, #4]
 800755c:	6054      	str	r4, [r2, #4]
 800755e:	e7c9      	b.n	80074f4 <_free_r+0x24>
 8007560:	bd38      	pop	{r3, r4, r5, pc}
 8007562:	bf00      	nop
 8007564:	200004f4 	.word	0x200004f4

08007568 <_malloc_r>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	1ccd      	adds	r5, r1, #3
 800756c:	f025 0503 	bic.w	r5, r5, #3
 8007570:	3508      	adds	r5, #8
 8007572:	2d0c      	cmp	r5, #12
 8007574:	bf38      	it	cc
 8007576:	250c      	movcc	r5, #12
 8007578:	2d00      	cmp	r5, #0
 800757a:	4606      	mov	r6, r0
 800757c:	db01      	blt.n	8007582 <_malloc_r+0x1a>
 800757e:	42a9      	cmp	r1, r5
 8007580:	d903      	bls.n	800758a <_malloc_r+0x22>
 8007582:	230c      	movs	r3, #12
 8007584:	6033      	str	r3, [r6, #0]
 8007586:	2000      	movs	r0, #0
 8007588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800758a:	f000 fa0f 	bl	80079ac <__malloc_lock>
 800758e:	4921      	ldr	r1, [pc, #132]	; (8007614 <_malloc_r+0xac>)
 8007590:	680a      	ldr	r2, [r1, #0]
 8007592:	4614      	mov	r4, r2
 8007594:	b99c      	cbnz	r4, 80075be <_malloc_r+0x56>
 8007596:	4f20      	ldr	r7, [pc, #128]	; (8007618 <_malloc_r+0xb0>)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	b923      	cbnz	r3, 80075a6 <_malloc_r+0x3e>
 800759c:	4621      	mov	r1, r4
 800759e:	4630      	mov	r0, r6
 80075a0:	f000 f998 	bl	80078d4 <_sbrk_r>
 80075a4:	6038      	str	r0, [r7, #0]
 80075a6:	4629      	mov	r1, r5
 80075a8:	4630      	mov	r0, r6
 80075aa:	f000 f993 	bl	80078d4 <_sbrk_r>
 80075ae:	1c43      	adds	r3, r0, #1
 80075b0:	d123      	bne.n	80075fa <_malloc_r+0x92>
 80075b2:	230c      	movs	r3, #12
 80075b4:	4630      	mov	r0, r6
 80075b6:	6033      	str	r3, [r6, #0]
 80075b8:	f000 f9fe 	bl	80079b8 <__malloc_unlock>
 80075bc:	e7e3      	b.n	8007586 <_malloc_r+0x1e>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	1b5b      	subs	r3, r3, r5
 80075c2:	d417      	bmi.n	80075f4 <_malloc_r+0x8c>
 80075c4:	2b0b      	cmp	r3, #11
 80075c6:	d903      	bls.n	80075d0 <_malloc_r+0x68>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	441c      	add	r4, r3
 80075cc:	6025      	str	r5, [r4, #0]
 80075ce:	e004      	b.n	80075da <_malloc_r+0x72>
 80075d0:	6863      	ldr	r3, [r4, #4]
 80075d2:	42a2      	cmp	r2, r4
 80075d4:	bf0c      	ite	eq
 80075d6:	600b      	streq	r3, [r1, #0]
 80075d8:	6053      	strne	r3, [r2, #4]
 80075da:	4630      	mov	r0, r6
 80075dc:	f000 f9ec 	bl	80079b8 <__malloc_unlock>
 80075e0:	f104 000b 	add.w	r0, r4, #11
 80075e4:	1d23      	adds	r3, r4, #4
 80075e6:	f020 0007 	bic.w	r0, r0, #7
 80075ea:	1ac2      	subs	r2, r0, r3
 80075ec:	d0cc      	beq.n	8007588 <_malloc_r+0x20>
 80075ee:	1a1b      	subs	r3, r3, r0
 80075f0:	50a3      	str	r3, [r4, r2]
 80075f2:	e7c9      	b.n	8007588 <_malloc_r+0x20>
 80075f4:	4622      	mov	r2, r4
 80075f6:	6864      	ldr	r4, [r4, #4]
 80075f8:	e7cc      	b.n	8007594 <_malloc_r+0x2c>
 80075fa:	1cc4      	adds	r4, r0, #3
 80075fc:	f024 0403 	bic.w	r4, r4, #3
 8007600:	42a0      	cmp	r0, r4
 8007602:	d0e3      	beq.n	80075cc <_malloc_r+0x64>
 8007604:	1a21      	subs	r1, r4, r0
 8007606:	4630      	mov	r0, r6
 8007608:	f000 f964 	bl	80078d4 <_sbrk_r>
 800760c:	3001      	adds	r0, #1
 800760e:	d1dd      	bne.n	80075cc <_malloc_r+0x64>
 8007610:	e7cf      	b.n	80075b2 <_malloc_r+0x4a>
 8007612:	bf00      	nop
 8007614:	200004f4 	.word	0x200004f4
 8007618:	200004f8 	.word	0x200004f8

0800761c <__ssputs_r>:
 800761c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007620:	688e      	ldr	r6, [r1, #8]
 8007622:	4682      	mov	sl, r0
 8007624:	429e      	cmp	r6, r3
 8007626:	460c      	mov	r4, r1
 8007628:	4690      	mov	r8, r2
 800762a:	461f      	mov	r7, r3
 800762c:	d838      	bhi.n	80076a0 <__ssputs_r+0x84>
 800762e:	898a      	ldrh	r2, [r1, #12]
 8007630:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007634:	d032      	beq.n	800769c <__ssputs_r+0x80>
 8007636:	6825      	ldr	r5, [r4, #0]
 8007638:	6909      	ldr	r1, [r1, #16]
 800763a:	3301      	adds	r3, #1
 800763c:	eba5 0901 	sub.w	r9, r5, r1
 8007640:	6965      	ldr	r5, [r4, #20]
 8007642:	444b      	add	r3, r9
 8007644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800764c:	106d      	asrs	r5, r5, #1
 800764e:	429d      	cmp	r5, r3
 8007650:	bf38      	it	cc
 8007652:	461d      	movcc	r5, r3
 8007654:	0553      	lsls	r3, r2, #21
 8007656:	d531      	bpl.n	80076bc <__ssputs_r+0xa0>
 8007658:	4629      	mov	r1, r5
 800765a:	f7ff ff85 	bl	8007568 <_malloc_r>
 800765e:	4606      	mov	r6, r0
 8007660:	b950      	cbnz	r0, 8007678 <__ssputs_r+0x5c>
 8007662:	230c      	movs	r3, #12
 8007664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007668:	f8ca 3000 	str.w	r3, [sl]
 800766c:	89a3      	ldrh	r3, [r4, #12]
 800766e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007672:	81a3      	strh	r3, [r4, #12]
 8007674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007678:	464a      	mov	r2, r9
 800767a:	6921      	ldr	r1, [r4, #16]
 800767c:	f7fe f84a 	bl	8005714 <memcpy>
 8007680:	89a3      	ldrh	r3, [r4, #12]
 8007682:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768a:	81a3      	strh	r3, [r4, #12]
 800768c:	6126      	str	r6, [r4, #16]
 800768e:	444e      	add	r6, r9
 8007690:	6026      	str	r6, [r4, #0]
 8007692:	463e      	mov	r6, r7
 8007694:	6165      	str	r5, [r4, #20]
 8007696:	eba5 0509 	sub.w	r5, r5, r9
 800769a:	60a5      	str	r5, [r4, #8]
 800769c:	42be      	cmp	r6, r7
 800769e:	d900      	bls.n	80076a2 <__ssputs_r+0x86>
 80076a0:	463e      	mov	r6, r7
 80076a2:	4632      	mov	r2, r6
 80076a4:	4641      	mov	r1, r8
 80076a6:	6820      	ldr	r0, [r4, #0]
 80076a8:	f000 f966 	bl	8007978 <memmove>
 80076ac:	68a3      	ldr	r3, [r4, #8]
 80076ae:	6822      	ldr	r2, [r4, #0]
 80076b0:	1b9b      	subs	r3, r3, r6
 80076b2:	4432      	add	r2, r6
 80076b4:	2000      	movs	r0, #0
 80076b6:	60a3      	str	r3, [r4, #8]
 80076b8:	6022      	str	r2, [r4, #0]
 80076ba:	e7db      	b.n	8007674 <__ssputs_r+0x58>
 80076bc:	462a      	mov	r2, r5
 80076be:	f000 f981 	bl	80079c4 <_realloc_r>
 80076c2:	4606      	mov	r6, r0
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d1e1      	bne.n	800768c <__ssputs_r+0x70>
 80076c8:	4650      	mov	r0, sl
 80076ca:	6921      	ldr	r1, [r4, #16]
 80076cc:	f7ff ff00 	bl	80074d0 <_free_r>
 80076d0:	e7c7      	b.n	8007662 <__ssputs_r+0x46>
	...

080076d4 <_svfiprintf_r>:
 80076d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d8:	4698      	mov	r8, r3
 80076da:	898b      	ldrh	r3, [r1, #12]
 80076dc:	4607      	mov	r7, r0
 80076de:	061b      	lsls	r3, r3, #24
 80076e0:	460d      	mov	r5, r1
 80076e2:	4614      	mov	r4, r2
 80076e4:	b09d      	sub	sp, #116	; 0x74
 80076e6:	d50e      	bpl.n	8007706 <_svfiprintf_r+0x32>
 80076e8:	690b      	ldr	r3, [r1, #16]
 80076ea:	b963      	cbnz	r3, 8007706 <_svfiprintf_r+0x32>
 80076ec:	2140      	movs	r1, #64	; 0x40
 80076ee:	f7ff ff3b 	bl	8007568 <_malloc_r>
 80076f2:	6028      	str	r0, [r5, #0]
 80076f4:	6128      	str	r0, [r5, #16]
 80076f6:	b920      	cbnz	r0, 8007702 <_svfiprintf_r+0x2e>
 80076f8:	230c      	movs	r3, #12
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007700:	e0d1      	b.n	80078a6 <_svfiprintf_r+0x1d2>
 8007702:	2340      	movs	r3, #64	; 0x40
 8007704:	616b      	str	r3, [r5, #20]
 8007706:	2300      	movs	r3, #0
 8007708:	9309      	str	r3, [sp, #36]	; 0x24
 800770a:	2320      	movs	r3, #32
 800770c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007710:	2330      	movs	r3, #48	; 0x30
 8007712:	f04f 0901 	mov.w	r9, #1
 8007716:	f8cd 800c 	str.w	r8, [sp, #12]
 800771a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80078c0 <_svfiprintf_r+0x1ec>
 800771e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007722:	4623      	mov	r3, r4
 8007724:	469a      	mov	sl, r3
 8007726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800772a:	b10a      	cbz	r2, 8007730 <_svfiprintf_r+0x5c>
 800772c:	2a25      	cmp	r2, #37	; 0x25
 800772e:	d1f9      	bne.n	8007724 <_svfiprintf_r+0x50>
 8007730:	ebba 0b04 	subs.w	fp, sl, r4
 8007734:	d00b      	beq.n	800774e <_svfiprintf_r+0x7a>
 8007736:	465b      	mov	r3, fp
 8007738:	4622      	mov	r2, r4
 800773a:	4629      	mov	r1, r5
 800773c:	4638      	mov	r0, r7
 800773e:	f7ff ff6d 	bl	800761c <__ssputs_r>
 8007742:	3001      	adds	r0, #1
 8007744:	f000 80aa 	beq.w	800789c <_svfiprintf_r+0x1c8>
 8007748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800774a:	445a      	add	r2, fp
 800774c:	9209      	str	r2, [sp, #36]	; 0x24
 800774e:	f89a 3000 	ldrb.w	r3, [sl]
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 80a2 	beq.w	800789c <_svfiprintf_r+0x1c8>
 8007758:	2300      	movs	r3, #0
 800775a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800775e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007762:	f10a 0a01 	add.w	sl, sl, #1
 8007766:	9304      	str	r3, [sp, #16]
 8007768:	9307      	str	r3, [sp, #28]
 800776a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800776e:	931a      	str	r3, [sp, #104]	; 0x68
 8007770:	4654      	mov	r4, sl
 8007772:	2205      	movs	r2, #5
 8007774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007778:	4851      	ldr	r0, [pc, #324]	; (80078c0 <_svfiprintf_r+0x1ec>)
 800777a:	f7ff fb0b 	bl	8006d94 <memchr>
 800777e:	9a04      	ldr	r2, [sp, #16]
 8007780:	b9d8      	cbnz	r0, 80077ba <_svfiprintf_r+0xe6>
 8007782:	06d0      	lsls	r0, r2, #27
 8007784:	bf44      	itt	mi
 8007786:	2320      	movmi	r3, #32
 8007788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800778c:	0711      	lsls	r1, r2, #28
 800778e:	bf44      	itt	mi
 8007790:	232b      	movmi	r3, #43	; 0x2b
 8007792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007796:	f89a 3000 	ldrb.w	r3, [sl]
 800779a:	2b2a      	cmp	r3, #42	; 0x2a
 800779c:	d015      	beq.n	80077ca <_svfiprintf_r+0xf6>
 800779e:	4654      	mov	r4, sl
 80077a0:	2000      	movs	r0, #0
 80077a2:	f04f 0c0a 	mov.w	ip, #10
 80077a6:	9a07      	ldr	r2, [sp, #28]
 80077a8:	4621      	mov	r1, r4
 80077aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ae:	3b30      	subs	r3, #48	; 0x30
 80077b0:	2b09      	cmp	r3, #9
 80077b2:	d94e      	bls.n	8007852 <_svfiprintf_r+0x17e>
 80077b4:	b1b0      	cbz	r0, 80077e4 <_svfiprintf_r+0x110>
 80077b6:	9207      	str	r2, [sp, #28]
 80077b8:	e014      	b.n	80077e4 <_svfiprintf_r+0x110>
 80077ba:	eba0 0308 	sub.w	r3, r0, r8
 80077be:	fa09 f303 	lsl.w	r3, r9, r3
 80077c2:	4313      	orrs	r3, r2
 80077c4:	46a2      	mov	sl, r4
 80077c6:	9304      	str	r3, [sp, #16]
 80077c8:	e7d2      	b.n	8007770 <_svfiprintf_r+0x9c>
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	1d19      	adds	r1, r3, #4
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	9103      	str	r1, [sp, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bfbb      	ittet	lt
 80077d6:	425b      	neglt	r3, r3
 80077d8:	f042 0202 	orrlt.w	r2, r2, #2
 80077dc:	9307      	strge	r3, [sp, #28]
 80077de:	9307      	strlt	r3, [sp, #28]
 80077e0:	bfb8      	it	lt
 80077e2:	9204      	strlt	r2, [sp, #16]
 80077e4:	7823      	ldrb	r3, [r4, #0]
 80077e6:	2b2e      	cmp	r3, #46	; 0x2e
 80077e8:	d10c      	bne.n	8007804 <_svfiprintf_r+0x130>
 80077ea:	7863      	ldrb	r3, [r4, #1]
 80077ec:	2b2a      	cmp	r3, #42	; 0x2a
 80077ee:	d135      	bne.n	800785c <_svfiprintf_r+0x188>
 80077f0:	9b03      	ldr	r3, [sp, #12]
 80077f2:	3402      	adds	r4, #2
 80077f4:	1d1a      	adds	r2, r3, #4
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	9203      	str	r2, [sp, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	bfb8      	it	lt
 80077fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007802:	9305      	str	r3, [sp, #20]
 8007804:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80078d0 <_svfiprintf_r+0x1fc>
 8007808:	2203      	movs	r2, #3
 800780a:	4650      	mov	r0, sl
 800780c:	7821      	ldrb	r1, [r4, #0]
 800780e:	f7ff fac1 	bl	8006d94 <memchr>
 8007812:	b140      	cbz	r0, 8007826 <_svfiprintf_r+0x152>
 8007814:	2340      	movs	r3, #64	; 0x40
 8007816:	eba0 000a 	sub.w	r0, r0, sl
 800781a:	fa03 f000 	lsl.w	r0, r3, r0
 800781e:	9b04      	ldr	r3, [sp, #16]
 8007820:	3401      	adds	r4, #1
 8007822:	4303      	orrs	r3, r0
 8007824:	9304      	str	r3, [sp, #16]
 8007826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800782a:	2206      	movs	r2, #6
 800782c:	4825      	ldr	r0, [pc, #148]	; (80078c4 <_svfiprintf_r+0x1f0>)
 800782e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007832:	f7ff faaf 	bl	8006d94 <memchr>
 8007836:	2800      	cmp	r0, #0
 8007838:	d038      	beq.n	80078ac <_svfiprintf_r+0x1d8>
 800783a:	4b23      	ldr	r3, [pc, #140]	; (80078c8 <_svfiprintf_r+0x1f4>)
 800783c:	bb1b      	cbnz	r3, 8007886 <_svfiprintf_r+0x1b2>
 800783e:	9b03      	ldr	r3, [sp, #12]
 8007840:	3307      	adds	r3, #7
 8007842:	f023 0307 	bic.w	r3, r3, #7
 8007846:	3308      	adds	r3, #8
 8007848:	9303      	str	r3, [sp, #12]
 800784a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800784c:	4433      	add	r3, r6
 800784e:	9309      	str	r3, [sp, #36]	; 0x24
 8007850:	e767      	b.n	8007722 <_svfiprintf_r+0x4e>
 8007852:	460c      	mov	r4, r1
 8007854:	2001      	movs	r0, #1
 8007856:	fb0c 3202 	mla	r2, ip, r2, r3
 800785a:	e7a5      	b.n	80077a8 <_svfiprintf_r+0xd4>
 800785c:	2300      	movs	r3, #0
 800785e:	f04f 0c0a 	mov.w	ip, #10
 8007862:	4619      	mov	r1, r3
 8007864:	3401      	adds	r4, #1
 8007866:	9305      	str	r3, [sp, #20]
 8007868:	4620      	mov	r0, r4
 800786a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800786e:	3a30      	subs	r2, #48	; 0x30
 8007870:	2a09      	cmp	r2, #9
 8007872:	d903      	bls.n	800787c <_svfiprintf_r+0x1a8>
 8007874:	2b00      	cmp	r3, #0
 8007876:	d0c5      	beq.n	8007804 <_svfiprintf_r+0x130>
 8007878:	9105      	str	r1, [sp, #20]
 800787a:	e7c3      	b.n	8007804 <_svfiprintf_r+0x130>
 800787c:	4604      	mov	r4, r0
 800787e:	2301      	movs	r3, #1
 8007880:	fb0c 2101 	mla	r1, ip, r1, r2
 8007884:	e7f0      	b.n	8007868 <_svfiprintf_r+0x194>
 8007886:	ab03      	add	r3, sp, #12
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	462a      	mov	r2, r5
 800788c:	4638      	mov	r0, r7
 800788e:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <_svfiprintf_r+0x1f8>)
 8007890:	a904      	add	r1, sp, #16
 8007892:	f7fd fff3 	bl	800587c <_printf_float>
 8007896:	1c42      	adds	r2, r0, #1
 8007898:	4606      	mov	r6, r0
 800789a:	d1d6      	bne.n	800784a <_svfiprintf_r+0x176>
 800789c:	89ab      	ldrh	r3, [r5, #12]
 800789e:	065b      	lsls	r3, r3, #25
 80078a0:	f53f af2c 	bmi.w	80076fc <_svfiprintf_r+0x28>
 80078a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078a6:	b01d      	add	sp, #116	; 0x74
 80078a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ac:	ab03      	add	r3, sp, #12
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	462a      	mov	r2, r5
 80078b2:	4638      	mov	r0, r7
 80078b4:	4b05      	ldr	r3, [pc, #20]	; (80078cc <_svfiprintf_r+0x1f8>)
 80078b6:	a904      	add	r1, sp, #16
 80078b8:	f7fe fa7c 	bl	8005db4 <_printf_i>
 80078bc:	e7eb      	b.n	8007896 <_svfiprintf_r+0x1c2>
 80078be:	bf00      	nop
 80078c0:	080087a4 	.word	0x080087a4
 80078c4:	080087ae 	.word	0x080087ae
 80078c8:	0800587d 	.word	0x0800587d
 80078cc:	0800761d 	.word	0x0800761d
 80078d0:	080087aa 	.word	0x080087aa

080078d4 <_sbrk_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	2300      	movs	r3, #0
 80078d8:	4d05      	ldr	r5, [pc, #20]	; (80078f0 <_sbrk_r+0x1c>)
 80078da:	4604      	mov	r4, r0
 80078dc:	4608      	mov	r0, r1
 80078de:	602b      	str	r3, [r5, #0]
 80078e0:	f7fa fff2 	bl	80028c8 <_sbrk>
 80078e4:	1c43      	adds	r3, r0, #1
 80078e6:	d102      	bne.n	80078ee <_sbrk_r+0x1a>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	b103      	cbz	r3, 80078ee <_sbrk_r+0x1a>
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	bd38      	pop	{r3, r4, r5, pc}
 80078f0:	20000500 	.word	0x20000500

080078f4 <__assert_func>:
 80078f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078f6:	4614      	mov	r4, r2
 80078f8:	461a      	mov	r2, r3
 80078fa:	4b09      	ldr	r3, [pc, #36]	; (8007920 <__assert_func+0x2c>)
 80078fc:	4605      	mov	r5, r0
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68d8      	ldr	r0, [r3, #12]
 8007902:	b14c      	cbz	r4, 8007918 <__assert_func+0x24>
 8007904:	4b07      	ldr	r3, [pc, #28]	; (8007924 <__assert_func+0x30>)
 8007906:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800790a:	9100      	str	r1, [sp, #0]
 800790c:	462b      	mov	r3, r5
 800790e:	4906      	ldr	r1, [pc, #24]	; (8007928 <__assert_func+0x34>)
 8007910:	f000 f80e 	bl	8007930 <fiprintf>
 8007914:	f000 faa2 	bl	8007e5c <abort>
 8007918:	4b04      	ldr	r3, [pc, #16]	; (800792c <__assert_func+0x38>)
 800791a:	461c      	mov	r4, r3
 800791c:	e7f3      	b.n	8007906 <__assert_func+0x12>
 800791e:	bf00      	nop
 8007920:	2000009c 	.word	0x2000009c
 8007924:	080087b5 	.word	0x080087b5
 8007928:	080087c2 	.word	0x080087c2
 800792c:	080087f0 	.word	0x080087f0

08007930 <fiprintf>:
 8007930:	b40e      	push	{r1, r2, r3}
 8007932:	b503      	push	{r0, r1, lr}
 8007934:	4601      	mov	r1, r0
 8007936:	ab03      	add	r3, sp, #12
 8007938:	4805      	ldr	r0, [pc, #20]	; (8007950 <fiprintf+0x20>)
 800793a:	f853 2b04 	ldr.w	r2, [r3], #4
 800793e:	6800      	ldr	r0, [r0, #0]
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	f000 f88d 	bl	8007a60 <_vfiprintf_r>
 8007946:	b002      	add	sp, #8
 8007948:	f85d eb04 	ldr.w	lr, [sp], #4
 800794c:	b003      	add	sp, #12
 800794e:	4770      	bx	lr
 8007950:	2000009c 	.word	0x2000009c

08007954 <__ascii_mbtowc>:
 8007954:	b082      	sub	sp, #8
 8007956:	b901      	cbnz	r1, 800795a <__ascii_mbtowc+0x6>
 8007958:	a901      	add	r1, sp, #4
 800795a:	b142      	cbz	r2, 800796e <__ascii_mbtowc+0x1a>
 800795c:	b14b      	cbz	r3, 8007972 <__ascii_mbtowc+0x1e>
 800795e:	7813      	ldrb	r3, [r2, #0]
 8007960:	600b      	str	r3, [r1, #0]
 8007962:	7812      	ldrb	r2, [r2, #0]
 8007964:	1e10      	subs	r0, r2, #0
 8007966:	bf18      	it	ne
 8007968:	2001      	movne	r0, #1
 800796a:	b002      	add	sp, #8
 800796c:	4770      	bx	lr
 800796e:	4610      	mov	r0, r2
 8007970:	e7fb      	b.n	800796a <__ascii_mbtowc+0x16>
 8007972:	f06f 0001 	mvn.w	r0, #1
 8007976:	e7f8      	b.n	800796a <__ascii_mbtowc+0x16>

08007978 <memmove>:
 8007978:	4288      	cmp	r0, r1
 800797a:	b510      	push	{r4, lr}
 800797c:	eb01 0402 	add.w	r4, r1, r2
 8007980:	d902      	bls.n	8007988 <memmove+0x10>
 8007982:	4284      	cmp	r4, r0
 8007984:	4623      	mov	r3, r4
 8007986:	d807      	bhi.n	8007998 <memmove+0x20>
 8007988:	1e43      	subs	r3, r0, #1
 800798a:	42a1      	cmp	r1, r4
 800798c:	d008      	beq.n	80079a0 <memmove+0x28>
 800798e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007992:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007996:	e7f8      	b.n	800798a <memmove+0x12>
 8007998:	4601      	mov	r1, r0
 800799a:	4402      	add	r2, r0
 800799c:	428a      	cmp	r2, r1
 800799e:	d100      	bne.n	80079a2 <memmove+0x2a>
 80079a0:	bd10      	pop	{r4, pc}
 80079a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079aa:	e7f7      	b.n	800799c <memmove+0x24>

080079ac <__malloc_lock>:
 80079ac:	4801      	ldr	r0, [pc, #4]	; (80079b4 <__malloc_lock+0x8>)
 80079ae:	f000 bc15 	b.w	80081dc <__retarget_lock_acquire_recursive>
 80079b2:	bf00      	nop
 80079b4:	20000508 	.word	0x20000508

080079b8 <__malloc_unlock>:
 80079b8:	4801      	ldr	r0, [pc, #4]	; (80079c0 <__malloc_unlock+0x8>)
 80079ba:	f000 bc10 	b.w	80081de <__retarget_lock_release_recursive>
 80079be:	bf00      	nop
 80079c0:	20000508 	.word	0x20000508

080079c4 <_realloc_r>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	4607      	mov	r7, r0
 80079c8:	4614      	mov	r4, r2
 80079ca:	460e      	mov	r6, r1
 80079cc:	b921      	cbnz	r1, 80079d8 <_realloc_r+0x14>
 80079ce:	4611      	mov	r1, r2
 80079d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079d4:	f7ff bdc8 	b.w	8007568 <_malloc_r>
 80079d8:	b922      	cbnz	r2, 80079e4 <_realloc_r+0x20>
 80079da:	f7ff fd79 	bl	80074d0 <_free_r>
 80079de:	4625      	mov	r5, r4
 80079e0:	4628      	mov	r0, r5
 80079e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e4:	f000 fc60 	bl	80082a8 <_malloc_usable_size_r>
 80079e8:	42a0      	cmp	r0, r4
 80079ea:	d20f      	bcs.n	8007a0c <_realloc_r+0x48>
 80079ec:	4621      	mov	r1, r4
 80079ee:	4638      	mov	r0, r7
 80079f0:	f7ff fdba 	bl	8007568 <_malloc_r>
 80079f4:	4605      	mov	r5, r0
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d0f2      	beq.n	80079e0 <_realloc_r+0x1c>
 80079fa:	4631      	mov	r1, r6
 80079fc:	4622      	mov	r2, r4
 80079fe:	f7fd fe89 	bl	8005714 <memcpy>
 8007a02:	4631      	mov	r1, r6
 8007a04:	4638      	mov	r0, r7
 8007a06:	f7ff fd63 	bl	80074d0 <_free_r>
 8007a0a:	e7e9      	b.n	80079e0 <_realloc_r+0x1c>
 8007a0c:	4635      	mov	r5, r6
 8007a0e:	e7e7      	b.n	80079e0 <_realloc_r+0x1c>

08007a10 <__sfputc_r>:
 8007a10:	6893      	ldr	r3, [r2, #8]
 8007a12:	b410      	push	{r4}
 8007a14:	3b01      	subs	r3, #1
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	6093      	str	r3, [r2, #8]
 8007a1a:	da07      	bge.n	8007a2c <__sfputc_r+0x1c>
 8007a1c:	6994      	ldr	r4, [r2, #24]
 8007a1e:	42a3      	cmp	r3, r4
 8007a20:	db01      	blt.n	8007a26 <__sfputc_r+0x16>
 8007a22:	290a      	cmp	r1, #10
 8007a24:	d102      	bne.n	8007a2c <__sfputc_r+0x1c>
 8007a26:	bc10      	pop	{r4}
 8007a28:	f000 b94a 	b.w	8007cc0 <__swbuf_r>
 8007a2c:	6813      	ldr	r3, [r2, #0]
 8007a2e:	1c58      	adds	r0, r3, #1
 8007a30:	6010      	str	r0, [r2, #0]
 8007a32:	7019      	strb	r1, [r3, #0]
 8007a34:	4608      	mov	r0, r1
 8007a36:	bc10      	pop	{r4}
 8007a38:	4770      	bx	lr

08007a3a <__sfputs_r>:
 8007a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	460f      	mov	r7, r1
 8007a40:	4614      	mov	r4, r2
 8007a42:	18d5      	adds	r5, r2, r3
 8007a44:	42ac      	cmp	r4, r5
 8007a46:	d101      	bne.n	8007a4c <__sfputs_r+0x12>
 8007a48:	2000      	movs	r0, #0
 8007a4a:	e007      	b.n	8007a5c <__sfputs_r+0x22>
 8007a4c:	463a      	mov	r2, r7
 8007a4e:	4630      	mov	r0, r6
 8007a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a54:	f7ff ffdc 	bl	8007a10 <__sfputc_r>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d1f3      	bne.n	8007a44 <__sfputs_r+0xa>
 8007a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a60 <_vfiprintf_r>:
 8007a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	460d      	mov	r5, r1
 8007a66:	4614      	mov	r4, r2
 8007a68:	4698      	mov	r8, r3
 8007a6a:	4606      	mov	r6, r0
 8007a6c:	b09d      	sub	sp, #116	; 0x74
 8007a6e:	b118      	cbz	r0, 8007a78 <_vfiprintf_r+0x18>
 8007a70:	6983      	ldr	r3, [r0, #24]
 8007a72:	b90b      	cbnz	r3, 8007a78 <_vfiprintf_r+0x18>
 8007a74:	f000 fb14 	bl	80080a0 <__sinit>
 8007a78:	4b89      	ldr	r3, [pc, #548]	; (8007ca0 <_vfiprintf_r+0x240>)
 8007a7a:	429d      	cmp	r5, r3
 8007a7c:	d11b      	bne.n	8007ab6 <_vfiprintf_r+0x56>
 8007a7e:	6875      	ldr	r5, [r6, #4]
 8007a80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a82:	07d9      	lsls	r1, r3, #31
 8007a84:	d405      	bmi.n	8007a92 <_vfiprintf_r+0x32>
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	059a      	lsls	r2, r3, #22
 8007a8a:	d402      	bmi.n	8007a92 <_vfiprintf_r+0x32>
 8007a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a8e:	f000 fba5 	bl	80081dc <__retarget_lock_acquire_recursive>
 8007a92:	89ab      	ldrh	r3, [r5, #12]
 8007a94:	071b      	lsls	r3, r3, #28
 8007a96:	d501      	bpl.n	8007a9c <_vfiprintf_r+0x3c>
 8007a98:	692b      	ldr	r3, [r5, #16]
 8007a9a:	b9eb      	cbnz	r3, 8007ad8 <_vfiprintf_r+0x78>
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f000 f96e 	bl	8007d80 <__swsetup_r>
 8007aa4:	b1c0      	cbz	r0, 8007ad8 <_vfiprintf_r+0x78>
 8007aa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aa8:	07dc      	lsls	r4, r3, #31
 8007aaa:	d50e      	bpl.n	8007aca <_vfiprintf_r+0x6a>
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ab0:	b01d      	add	sp, #116	; 0x74
 8007ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab6:	4b7b      	ldr	r3, [pc, #492]	; (8007ca4 <_vfiprintf_r+0x244>)
 8007ab8:	429d      	cmp	r5, r3
 8007aba:	d101      	bne.n	8007ac0 <_vfiprintf_r+0x60>
 8007abc:	68b5      	ldr	r5, [r6, #8]
 8007abe:	e7df      	b.n	8007a80 <_vfiprintf_r+0x20>
 8007ac0:	4b79      	ldr	r3, [pc, #484]	; (8007ca8 <_vfiprintf_r+0x248>)
 8007ac2:	429d      	cmp	r5, r3
 8007ac4:	bf08      	it	eq
 8007ac6:	68f5      	ldreq	r5, [r6, #12]
 8007ac8:	e7da      	b.n	8007a80 <_vfiprintf_r+0x20>
 8007aca:	89ab      	ldrh	r3, [r5, #12]
 8007acc:	0598      	lsls	r0, r3, #22
 8007ace:	d4ed      	bmi.n	8007aac <_vfiprintf_r+0x4c>
 8007ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ad2:	f000 fb84 	bl	80081de <__retarget_lock_release_recursive>
 8007ad6:	e7e9      	b.n	8007aac <_vfiprintf_r+0x4c>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9309      	str	r3, [sp, #36]	; 0x24
 8007adc:	2320      	movs	r3, #32
 8007ade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ae2:	2330      	movs	r3, #48	; 0x30
 8007ae4:	f04f 0901 	mov.w	r9, #1
 8007ae8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007cac <_vfiprintf_r+0x24c>
 8007af0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007af4:	4623      	mov	r3, r4
 8007af6:	469a      	mov	sl, r3
 8007af8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007afc:	b10a      	cbz	r2, 8007b02 <_vfiprintf_r+0xa2>
 8007afe:	2a25      	cmp	r2, #37	; 0x25
 8007b00:	d1f9      	bne.n	8007af6 <_vfiprintf_r+0x96>
 8007b02:	ebba 0b04 	subs.w	fp, sl, r4
 8007b06:	d00b      	beq.n	8007b20 <_vfiprintf_r+0xc0>
 8007b08:	465b      	mov	r3, fp
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f7ff ff93 	bl	8007a3a <__sfputs_r>
 8007b14:	3001      	adds	r0, #1
 8007b16:	f000 80aa 	beq.w	8007c6e <_vfiprintf_r+0x20e>
 8007b1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b1c:	445a      	add	r2, fp
 8007b1e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b20:	f89a 3000 	ldrb.w	r3, [sl]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 80a2 	beq.w	8007c6e <_vfiprintf_r+0x20e>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b34:	f10a 0a01 	add.w	sl, sl, #1
 8007b38:	9304      	str	r3, [sp, #16]
 8007b3a:	9307      	str	r3, [sp, #28]
 8007b3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b40:	931a      	str	r3, [sp, #104]	; 0x68
 8007b42:	4654      	mov	r4, sl
 8007b44:	2205      	movs	r2, #5
 8007b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4a:	4858      	ldr	r0, [pc, #352]	; (8007cac <_vfiprintf_r+0x24c>)
 8007b4c:	f7ff f922 	bl	8006d94 <memchr>
 8007b50:	9a04      	ldr	r2, [sp, #16]
 8007b52:	b9d8      	cbnz	r0, 8007b8c <_vfiprintf_r+0x12c>
 8007b54:	06d1      	lsls	r1, r2, #27
 8007b56:	bf44      	itt	mi
 8007b58:	2320      	movmi	r3, #32
 8007b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b5e:	0713      	lsls	r3, r2, #28
 8007b60:	bf44      	itt	mi
 8007b62:	232b      	movmi	r3, #43	; 0x2b
 8007b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b68:	f89a 3000 	ldrb.w	r3, [sl]
 8007b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b6e:	d015      	beq.n	8007b9c <_vfiprintf_r+0x13c>
 8007b70:	4654      	mov	r4, sl
 8007b72:	2000      	movs	r0, #0
 8007b74:	f04f 0c0a 	mov.w	ip, #10
 8007b78:	9a07      	ldr	r2, [sp, #28]
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b80:	3b30      	subs	r3, #48	; 0x30
 8007b82:	2b09      	cmp	r3, #9
 8007b84:	d94e      	bls.n	8007c24 <_vfiprintf_r+0x1c4>
 8007b86:	b1b0      	cbz	r0, 8007bb6 <_vfiprintf_r+0x156>
 8007b88:	9207      	str	r2, [sp, #28]
 8007b8a:	e014      	b.n	8007bb6 <_vfiprintf_r+0x156>
 8007b8c:	eba0 0308 	sub.w	r3, r0, r8
 8007b90:	fa09 f303 	lsl.w	r3, r9, r3
 8007b94:	4313      	orrs	r3, r2
 8007b96:	46a2      	mov	sl, r4
 8007b98:	9304      	str	r3, [sp, #16]
 8007b9a:	e7d2      	b.n	8007b42 <_vfiprintf_r+0xe2>
 8007b9c:	9b03      	ldr	r3, [sp, #12]
 8007b9e:	1d19      	adds	r1, r3, #4
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	9103      	str	r1, [sp, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bfbb      	ittet	lt
 8007ba8:	425b      	neglt	r3, r3
 8007baa:	f042 0202 	orrlt.w	r2, r2, #2
 8007bae:	9307      	strge	r3, [sp, #28]
 8007bb0:	9307      	strlt	r3, [sp, #28]
 8007bb2:	bfb8      	it	lt
 8007bb4:	9204      	strlt	r2, [sp, #16]
 8007bb6:	7823      	ldrb	r3, [r4, #0]
 8007bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8007bba:	d10c      	bne.n	8007bd6 <_vfiprintf_r+0x176>
 8007bbc:	7863      	ldrb	r3, [r4, #1]
 8007bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc0:	d135      	bne.n	8007c2e <_vfiprintf_r+0x1ce>
 8007bc2:	9b03      	ldr	r3, [sp, #12]
 8007bc4:	3402      	adds	r4, #2
 8007bc6:	1d1a      	adds	r2, r3, #4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	9203      	str	r2, [sp, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bfb8      	it	lt
 8007bd0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007bd4:	9305      	str	r3, [sp, #20]
 8007bd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cbc <_vfiprintf_r+0x25c>
 8007bda:	2203      	movs	r2, #3
 8007bdc:	4650      	mov	r0, sl
 8007bde:	7821      	ldrb	r1, [r4, #0]
 8007be0:	f7ff f8d8 	bl	8006d94 <memchr>
 8007be4:	b140      	cbz	r0, 8007bf8 <_vfiprintf_r+0x198>
 8007be6:	2340      	movs	r3, #64	; 0x40
 8007be8:	eba0 000a 	sub.w	r0, r0, sl
 8007bec:	fa03 f000 	lsl.w	r0, r3, r0
 8007bf0:	9b04      	ldr	r3, [sp, #16]
 8007bf2:	3401      	adds	r4, #1
 8007bf4:	4303      	orrs	r3, r0
 8007bf6:	9304      	str	r3, [sp, #16]
 8007bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bfc:	2206      	movs	r2, #6
 8007bfe:	482c      	ldr	r0, [pc, #176]	; (8007cb0 <_vfiprintf_r+0x250>)
 8007c00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c04:	f7ff f8c6 	bl	8006d94 <memchr>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d03f      	beq.n	8007c8c <_vfiprintf_r+0x22c>
 8007c0c:	4b29      	ldr	r3, [pc, #164]	; (8007cb4 <_vfiprintf_r+0x254>)
 8007c0e:	bb1b      	cbnz	r3, 8007c58 <_vfiprintf_r+0x1f8>
 8007c10:	9b03      	ldr	r3, [sp, #12]
 8007c12:	3307      	adds	r3, #7
 8007c14:	f023 0307 	bic.w	r3, r3, #7
 8007c18:	3308      	adds	r3, #8
 8007c1a:	9303      	str	r3, [sp, #12]
 8007c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c1e:	443b      	add	r3, r7
 8007c20:	9309      	str	r3, [sp, #36]	; 0x24
 8007c22:	e767      	b.n	8007af4 <_vfiprintf_r+0x94>
 8007c24:	460c      	mov	r4, r1
 8007c26:	2001      	movs	r0, #1
 8007c28:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c2c:	e7a5      	b.n	8007b7a <_vfiprintf_r+0x11a>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f04f 0c0a 	mov.w	ip, #10
 8007c34:	4619      	mov	r1, r3
 8007c36:	3401      	adds	r4, #1
 8007c38:	9305      	str	r3, [sp, #20]
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c40:	3a30      	subs	r2, #48	; 0x30
 8007c42:	2a09      	cmp	r2, #9
 8007c44:	d903      	bls.n	8007c4e <_vfiprintf_r+0x1ee>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d0c5      	beq.n	8007bd6 <_vfiprintf_r+0x176>
 8007c4a:	9105      	str	r1, [sp, #20]
 8007c4c:	e7c3      	b.n	8007bd6 <_vfiprintf_r+0x176>
 8007c4e:	4604      	mov	r4, r0
 8007c50:	2301      	movs	r3, #1
 8007c52:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c56:	e7f0      	b.n	8007c3a <_vfiprintf_r+0x1da>
 8007c58:	ab03      	add	r3, sp, #12
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	462a      	mov	r2, r5
 8007c5e:	4630      	mov	r0, r6
 8007c60:	4b15      	ldr	r3, [pc, #84]	; (8007cb8 <_vfiprintf_r+0x258>)
 8007c62:	a904      	add	r1, sp, #16
 8007c64:	f7fd fe0a 	bl	800587c <_printf_float>
 8007c68:	4607      	mov	r7, r0
 8007c6a:	1c78      	adds	r0, r7, #1
 8007c6c:	d1d6      	bne.n	8007c1c <_vfiprintf_r+0x1bc>
 8007c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c70:	07d9      	lsls	r1, r3, #31
 8007c72:	d405      	bmi.n	8007c80 <_vfiprintf_r+0x220>
 8007c74:	89ab      	ldrh	r3, [r5, #12]
 8007c76:	059a      	lsls	r2, r3, #22
 8007c78:	d402      	bmi.n	8007c80 <_vfiprintf_r+0x220>
 8007c7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c7c:	f000 faaf 	bl	80081de <__retarget_lock_release_recursive>
 8007c80:	89ab      	ldrh	r3, [r5, #12]
 8007c82:	065b      	lsls	r3, r3, #25
 8007c84:	f53f af12 	bmi.w	8007aac <_vfiprintf_r+0x4c>
 8007c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c8a:	e711      	b.n	8007ab0 <_vfiprintf_r+0x50>
 8007c8c:	ab03      	add	r3, sp, #12
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	462a      	mov	r2, r5
 8007c92:	4630      	mov	r0, r6
 8007c94:	4b08      	ldr	r3, [pc, #32]	; (8007cb8 <_vfiprintf_r+0x258>)
 8007c96:	a904      	add	r1, sp, #16
 8007c98:	f7fe f88c 	bl	8005db4 <_printf_i>
 8007c9c:	e7e4      	b.n	8007c68 <_vfiprintf_r+0x208>
 8007c9e:	bf00      	nop
 8007ca0:	0800891c 	.word	0x0800891c
 8007ca4:	0800893c 	.word	0x0800893c
 8007ca8:	080088fc 	.word	0x080088fc
 8007cac:	080087a4 	.word	0x080087a4
 8007cb0:	080087ae 	.word	0x080087ae
 8007cb4:	0800587d 	.word	0x0800587d
 8007cb8:	08007a3b 	.word	0x08007a3b
 8007cbc:	080087aa 	.word	0x080087aa

08007cc0 <__swbuf_r>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	460e      	mov	r6, r1
 8007cc4:	4614      	mov	r4, r2
 8007cc6:	4605      	mov	r5, r0
 8007cc8:	b118      	cbz	r0, 8007cd2 <__swbuf_r+0x12>
 8007cca:	6983      	ldr	r3, [r0, #24]
 8007ccc:	b90b      	cbnz	r3, 8007cd2 <__swbuf_r+0x12>
 8007cce:	f000 f9e7 	bl	80080a0 <__sinit>
 8007cd2:	4b21      	ldr	r3, [pc, #132]	; (8007d58 <__swbuf_r+0x98>)
 8007cd4:	429c      	cmp	r4, r3
 8007cd6:	d12b      	bne.n	8007d30 <__swbuf_r+0x70>
 8007cd8:	686c      	ldr	r4, [r5, #4]
 8007cda:	69a3      	ldr	r3, [r4, #24]
 8007cdc:	60a3      	str	r3, [r4, #8]
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	071a      	lsls	r2, r3, #28
 8007ce2:	d52f      	bpl.n	8007d44 <__swbuf_r+0x84>
 8007ce4:	6923      	ldr	r3, [r4, #16]
 8007ce6:	b36b      	cbz	r3, 8007d44 <__swbuf_r+0x84>
 8007ce8:	6923      	ldr	r3, [r4, #16]
 8007cea:	6820      	ldr	r0, [r4, #0]
 8007cec:	b2f6      	uxtb	r6, r6
 8007cee:	1ac0      	subs	r0, r0, r3
 8007cf0:	6963      	ldr	r3, [r4, #20]
 8007cf2:	4637      	mov	r7, r6
 8007cf4:	4283      	cmp	r3, r0
 8007cf6:	dc04      	bgt.n	8007d02 <__swbuf_r+0x42>
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	f000 f93c 	bl	8007f78 <_fflush_r>
 8007d00:	bb30      	cbnz	r0, 8007d50 <__swbuf_r+0x90>
 8007d02:	68a3      	ldr	r3, [r4, #8]
 8007d04:	3001      	adds	r0, #1
 8007d06:	3b01      	subs	r3, #1
 8007d08:	60a3      	str	r3, [r4, #8]
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	6022      	str	r2, [r4, #0]
 8007d10:	701e      	strb	r6, [r3, #0]
 8007d12:	6963      	ldr	r3, [r4, #20]
 8007d14:	4283      	cmp	r3, r0
 8007d16:	d004      	beq.n	8007d22 <__swbuf_r+0x62>
 8007d18:	89a3      	ldrh	r3, [r4, #12]
 8007d1a:	07db      	lsls	r3, r3, #31
 8007d1c:	d506      	bpl.n	8007d2c <__swbuf_r+0x6c>
 8007d1e:	2e0a      	cmp	r6, #10
 8007d20:	d104      	bne.n	8007d2c <__swbuf_r+0x6c>
 8007d22:	4621      	mov	r1, r4
 8007d24:	4628      	mov	r0, r5
 8007d26:	f000 f927 	bl	8007f78 <_fflush_r>
 8007d2a:	b988      	cbnz	r0, 8007d50 <__swbuf_r+0x90>
 8007d2c:	4638      	mov	r0, r7
 8007d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d30:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <__swbuf_r+0x9c>)
 8007d32:	429c      	cmp	r4, r3
 8007d34:	d101      	bne.n	8007d3a <__swbuf_r+0x7a>
 8007d36:	68ac      	ldr	r4, [r5, #8]
 8007d38:	e7cf      	b.n	8007cda <__swbuf_r+0x1a>
 8007d3a:	4b09      	ldr	r3, [pc, #36]	; (8007d60 <__swbuf_r+0xa0>)
 8007d3c:	429c      	cmp	r4, r3
 8007d3e:	bf08      	it	eq
 8007d40:	68ec      	ldreq	r4, [r5, #12]
 8007d42:	e7ca      	b.n	8007cda <__swbuf_r+0x1a>
 8007d44:	4621      	mov	r1, r4
 8007d46:	4628      	mov	r0, r5
 8007d48:	f000 f81a 	bl	8007d80 <__swsetup_r>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d0cb      	beq.n	8007ce8 <__swbuf_r+0x28>
 8007d50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d54:	e7ea      	b.n	8007d2c <__swbuf_r+0x6c>
 8007d56:	bf00      	nop
 8007d58:	0800891c 	.word	0x0800891c
 8007d5c:	0800893c 	.word	0x0800893c
 8007d60:	080088fc 	.word	0x080088fc

08007d64 <__ascii_wctomb>:
 8007d64:	4603      	mov	r3, r0
 8007d66:	4608      	mov	r0, r1
 8007d68:	b141      	cbz	r1, 8007d7c <__ascii_wctomb+0x18>
 8007d6a:	2aff      	cmp	r2, #255	; 0xff
 8007d6c:	d904      	bls.n	8007d78 <__ascii_wctomb+0x14>
 8007d6e:	228a      	movs	r2, #138	; 0x8a
 8007d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	4770      	bx	lr
 8007d78:	2001      	movs	r0, #1
 8007d7a:	700a      	strb	r2, [r1, #0]
 8007d7c:	4770      	bx	lr
	...

08007d80 <__swsetup_r>:
 8007d80:	4b32      	ldr	r3, [pc, #200]	; (8007e4c <__swsetup_r+0xcc>)
 8007d82:	b570      	push	{r4, r5, r6, lr}
 8007d84:	681d      	ldr	r5, [r3, #0]
 8007d86:	4606      	mov	r6, r0
 8007d88:	460c      	mov	r4, r1
 8007d8a:	b125      	cbz	r5, 8007d96 <__swsetup_r+0x16>
 8007d8c:	69ab      	ldr	r3, [r5, #24]
 8007d8e:	b913      	cbnz	r3, 8007d96 <__swsetup_r+0x16>
 8007d90:	4628      	mov	r0, r5
 8007d92:	f000 f985 	bl	80080a0 <__sinit>
 8007d96:	4b2e      	ldr	r3, [pc, #184]	; (8007e50 <__swsetup_r+0xd0>)
 8007d98:	429c      	cmp	r4, r3
 8007d9a:	d10f      	bne.n	8007dbc <__swsetup_r+0x3c>
 8007d9c:	686c      	ldr	r4, [r5, #4]
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007da4:	0719      	lsls	r1, r3, #28
 8007da6:	d42c      	bmi.n	8007e02 <__swsetup_r+0x82>
 8007da8:	06dd      	lsls	r5, r3, #27
 8007daa:	d411      	bmi.n	8007dd0 <__swsetup_r+0x50>
 8007dac:	2309      	movs	r3, #9
 8007dae:	6033      	str	r3, [r6, #0]
 8007db0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007db8:	81a3      	strh	r3, [r4, #12]
 8007dba:	e03e      	b.n	8007e3a <__swsetup_r+0xba>
 8007dbc:	4b25      	ldr	r3, [pc, #148]	; (8007e54 <__swsetup_r+0xd4>)
 8007dbe:	429c      	cmp	r4, r3
 8007dc0:	d101      	bne.n	8007dc6 <__swsetup_r+0x46>
 8007dc2:	68ac      	ldr	r4, [r5, #8]
 8007dc4:	e7eb      	b.n	8007d9e <__swsetup_r+0x1e>
 8007dc6:	4b24      	ldr	r3, [pc, #144]	; (8007e58 <__swsetup_r+0xd8>)
 8007dc8:	429c      	cmp	r4, r3
 8007dca:	bf08      	it	eq
 8007dcc:	68ec      	ldreq	r4, [r5, #12]
 8007dce:	e7e6      	b.n	8007d9e <__swsetup_r+0x1e>
 8007dd0:	0758      	lsls	r0, r3, #29
 8007dd2:	d512      	bpl.n	8007dfa <__swsetup_r+0x7a>
 8007dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dd6:	b141      	cbz	r1, 8007dea <__swsetup_r+0x6a>
 8007dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	d002      	beq.n	8007de6 <__swsetup_r+0x66>
 8007de0:	4630      	mov	r0, r6
 8007de2:	f7ff fb75 	bl	80074d0 <_free_r>
 8007de6:	2300      	movs	r3, #0
 8007de8:	6363      	str	r3, [r4, #52]	; 0x34
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007df0:	81a3      	strh	r3, [r4, #12]
 8007df2:	2300      	movs	r3, #0
 8007df4:	6063      	str	r3, [r4, #4]
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f043 0308 	orr.w	r3, r3, #8
 8007e00:	81a3      	strh	r3, [r4, #12]
 8007e02:	6923      	ldr	r3, [r4, #16]
 8007e04:	b94b      	cbnz	r3, 8007e1a <__swsetup_r+0x9a>
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e10:	d003      	beq.n	8007e1a <__swsetup_r+0x9a>
 8007e12:	4621      	mov	r1, r4
 8007e14:	4630      	mov	r0, r6
 8007e16:	f000 fa07 	bl	8008228 <__smakebuf_r>
 8007e1a:	89a0      	ldrh	r0, [r4, #12]
 8007e1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e20:	f010 0301 	ands.w	r3, r0, #1
 8007e24:	d00a      	beq.n	8007e3c <__swsetup_r+0xbc>
 8007e26:	2300      	movs	r3, #0
 8007e28:	60a3      	str	r3, [r4, #8]
 8007e2a:	6963      	ldr	r3, [r4, #20]
 8007e2c:	425b      	negs	r3, r3
 8007e2e:	61a3      	str	r3, [r4, #24]
 8007e30:	6923      	ldr	r3, [r4, #16]
 8007e32:	b943      	cbnz	r3, 8007e46 <__swsetup_r+0xc6>
 8007e34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e38:	d1ba      	bne.n	8007db0 <__swsetup_r+0x30>
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	0781      	lsls	r1, r0, #30
 8007e3e:	bf58      	it	pl
 8007e40:	6963      	ldrpl	r3, [r4, #20]
 8007e42:	60a3      	str	r3, [r4, #8]
 8007e44:	e7f4      	b.n	8007e30 <__swsetup_r+0xb0>
 8007e46:	2000      	movs	r0, #0
 8007e48:	e7f7      	b.n	8007e3a <__swsetup_r+0xba>
 8007e4a:	bf00      	nop
 8007e4c:	2000009c 	.word	0x2000009c
 8007e50:	0800891c 	.word	0x0800891c
 8007e54:	0800893c 	.word	0x0800893c
 8007e58:	080088fc 	.word	0x080088fc

08007e5c <abort>:
 8007e5c:	2006      	movs	r0, #6
 8007e5e:	b508      	push	{r3, lr}
 8007e60:	f000 fa52 	bl	8008308 <raise>
 8007e64:	2001      	movs	r0, #1
 8007e66:	f7fa fcbc 	bl	80027e2 <_exit>
	...

08007e6c <__sflush_r>:
 8007e6c:	898a      	ldrh	r2, [r1, #12]
 8007e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e72:	4605      	mov	r5, r0
 8007e74:	0710      	lsls	r0, r2, #28
 8007e76:	460c      	mov	r4, r1
 8007e78:	d458      	bmi.n	8007f2c <__sflush_r+0xc0>
 8007e7a:	684b      	ldr	r3, [r1, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dc05      	bgt.n	8007e8c <__sflush_r+0x20>
 8007e80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	dc02      	bgt.n	8007e8c <__sflush_r+0x20>
 8007e86:	2000      	movs	r0, #0
 8007e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e8e:	2e00      	cmp	r6, #0
 8007e90:	d0f9      	beq.n	8007e86 <__sflush_r+0x1a>
 8007e92:	2300      	movs	r3, #0
 8007e94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e98:	682f      	ldr	r7, [r5, #0]
 8007e9a:	602b      	str	r3, [r5, #0]
 8007e9c:	d032      	beq.n	8007f04 <__sflush_r+0x98>
 8007e9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	075a      	lsls	r2, r3, #29
 8007ea4:	d505      	bpl.n	8007eb2 <__sflush_r+0x46>
 8007ea6:	6863      	ldr	r3, [r4, #4]
 8007ea8:	1ac0      	subs	r0, r0, r3
 8007eaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007eac:	b10b      	cbz	r3, 8007eb2 <__sflush_r+0x46>
 8007eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007eb0:	1ac0      	subs	r0, r0, r3
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eb8:	4628      	mov	r0, r5
 8007eba:	6a21      	ldr	r1, [r4, #32]
 8007ebc:	47b0      	blx	r6
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	d106      	bne.n	8007ed2 <__sflush_r+0x66>
 8007ec4:	6829      	ldr	r1, [r5, #0]
 8007ec6:	291d      	cmp	r1, #29
 8007ec8:	d82c      	bhi.n	8007f24 <__sflush_r+0xb8>
 8007eca:	4a2a      	ldr	r2, [pc, #168]	; (8007f74 <__sflush_r+0x108>)
 8007ecc:	40ca      	lsrs	r2, r1
 8007ece:	07d6      	lsls	r6, r2, #31
 8007ed0:	d528      	bpl.n	8007f24 <__sflush_r+0xb8>
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	6062      	str	r2, [r4, #4]
 8007ed6:	6922      	ldr	r2, [r4, #16]
 8007ed8:	04d9      	lsls	r1, r3, #19
 8007eda:	6022      	str	r2, [r4, #0]
 8007edc:	d504      	bpl.n	8007ee8 <__sflush_r+0x7c>
 8007ede:	1c42      	adds	r2, r0, #1
 8007ee0:	d101      	bne.n	8007ee6 <__sflush_r+0x7a>
 8007ee2:	682b      	ldr	r3, [r5, #0]
 8007ee4:	b903      	cbnz	r3, 8007ee8 <__sflush_r+0x7c>
 8007ee6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eea:	602f      	str	r7, [r5, #0]
 8007eec:	2900      	cmp	r1, #0
 8007eee:	d0ca      	beq.n	8007e86 <__sflush_r+0x1a>
 8007ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ef4:	4299      	cmp	r1, r3
 8007ef6:	d002      	beq.n	8007efe <__sflush_r+0x92>
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f7ff fae9 	bl	80074d0 <_free_r>
 8007efe:	2000      	movs	r0, #0
 8007f00:	6360      	str	r0, [r4, #52]	; 0x34
 8007f02:	e7c1      	b.n	8007e88 <__sflush_r+0x1c>
 8007f04:	6a21      	ldr	r1, [r4, #32]
 8007f06:	2301      	movs	r3, #1
 8007f08:	4628      	mov	r0, r5
 8007f0a:	47b0      	blx	r6
 8007f0c:	1c41      	adds	r1, r0, #1
 8007f0e:	d1c7      	bne.n	8007ea0 <__sflush_r+0x34>
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0c4      	beq.n	8007ea0 <__sflush_r+0x34>
 8007f16:	2b1d      	cmp	r3, #29
 8007f18:	d001      	beq.n	8007f1e <__sflush_r+0xb2>
 8007f1a:	2b16      	cmp	r3, #22
 8007f1c:	d101      	bne.n	8007f22 <__sflush_r+0xb6>
 8007f1e:	602f      	str	r7, [r5, #0]
 8007f20:	e7b1      	b.n	8007e86 <__sflush_r+0x1a>
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f28:	81a3      	strh	r3, [r4, #12]
 8007f2a:	e7ad      	b.n	8007e88 <__sflush_r+0x1c>
 8007f2c:	690f      	ldr	r7, [r1, #16]
 8007f2e:	2f00      	cmp	r7, #0
 8007f30:	d0a9      	beq.n	8007e86 <__sflush_r+0x1a>
 8007f32:	0793      	lsls	r3, r2, #30
 8007f34:	bf18      	it	ne
 8007f36:	2300      	movne	r3, #0
 8007f38:	680e      	ldr	r6, [r1, #0]
 8007f3a:	bf08      	it	eq
 8007f3c:	694b      	ldreq	r3, [r1, #20]
 8007f3e:	eba6 0807 	sub.w	r8, r6, r7
 8007f42:	600f      	str	r7, [r1, #0]
 8007f44:	608b      	str	r3, [r1, #8]
 8007f46:	f1b8 0f00 	cmp.w	r8, #0
 8007f4a:	dd9c      	ble.n	8007e86 <__sflush_r+0x1a>
 8007f4c:	4643      	mov	r3, r8
 8007f4e:	463a      	mov	r2, r7
 8007f50:	4628      	mov	r0, r5
 8007f52:	6a21      	ldr	r1, [r4, #32]
 8007f54:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f56:	47b0      	blx	r6
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	dc06      	bgt.n	8007f6a <__sflush_r+0xfe>
 8007f5c:	89a3      	ldrh	r3, [r4, #12]
 8007f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f66:	81a3      	strh	r3, [r4, #12]
 8007f68:	e78e      	b.n	8007e88 <__sflush_r+0x1c>
 8007f6a:	4407      	add	r7, r0
 8007f6c:	eba8 0800 	sub.w	r8, r8, r0
 8007f70:	e7e9      	b.n	8007f46 <__sflush_r+0xda>
 8007f72:	bf00      	nop
 8007f74:	20400001 	.word	0x20400001

08007f78 <_fflush_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	690b      	ldr	r3, [r1, #16]
 8007f7c:	4605      	mov	r5, r0
 8007f7e:	460c      	mov	r4, r1
 8007f80:	b913      	cbnz	r3, 8007f88 <_fflush_r+0x10>
 8007f82:	2500      	movs	r5, #0
 8007f84:	4628      	mov	r0, r5
 8007f86:	bd38      	pop	{r3, r4, r5, pc}
 8007f88:	b118      	cbz	r0, 8007f92 <_fflush_r+0x1a>
 8007f8a:	6983      	ldr	r3, [r0, #24]
 8007f8c:	b90b      	cbnz	r3, 8007f92 <_fflush_r+0x1a>
 8007f8e:	f000 f887 	bl	80080a0 <__sinit>
 8007f92:	4b14      	ldr	r3, [pc, #80]	; (8007fe4 <_fflush_r+0x6c>)
 8007f94:	429c      	cmp	r4, r3
 8007f96:	d11b      	bne.n	8007fd0 <_fflush_r+0x58>
 8007f98:	686c      	ldr	r4, [r5, #4]
 8007f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0ef      	beq.n	8007f82 <_fflush_r+0xa>
 8007fa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fa4:	07d0      	lsls	r0, r2, #31
 8007fa6:	d404      	bmi.n	8007fb2 <_fflush_r+0x3a>
 8007fa8:	0599      	lsls	r1, r3, #22
 8007faa:	d402      	bmi.n	8007fb2 <_fflush_r+0x3a>
 8007fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fae:	f000 f915 	bl	80081dc <__retarget_lock_acquire_recursive>
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	f7ff ff59 	bl	8007e6c <__sflush_r>
 8007fba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	07da      	lsls	r2, r3, #31
 8007fc0:	d4e0      	bmi.n	8007f84 <_fflush_r+0xc>
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	059b      	lsls	r3, r3, #22
 8007fc6:	d4dd      	bmi.n	8007f84 <_fflush_r+0xc>
 8007fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fca:	f000 f908 	bl	80081de <__retarget_lock_release_recursive>
 8007fce:	e7d9      	b.n	8007f84 <_fflush_r+0xc>
 8007fd0:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <_fflush_r+0x70>)
 8007fd2:	429c      	cmp	r4, r3
 8007fd4:	d101      	bne.n	8007fda <_fflush_r+0x62>
 8007fd6:	68ac      	ldr	r4, [r5, #8]
 8007fd8:	e7df      	b.n	8007f9a <_fflush_r+0x22>
 8007fda:	4b04      	ldr	r3, [pc, #16]	; (8007fec <_fflush_r+0x74>)
 8007fdc:	429c      	cmp	r4, r3
 8007fde:	bf08      	it	eq
 8007fe0:	68ec      	ldreq	r4, [r5, #12]
 8007fe2:	e7da      	b.n	8007f9a <_fflush_r+0x22>
 8007fe4:	0800891c 	.word	0x0800891c
 8007fe8:	0800893c 	.word	0x0800893c
 8007fec:	080088fc 	.word	0x080088fc

08007ff0 <std>:
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	b510      	push	{r4, lr}
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8007ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ffe:	6083      	str	r3, [r0, #8]
 8008000:	8181      	strh	r1, [r0, #12]
 8008002:	6643      	str	r3, [r0, #100]	; 0x64
 8008004:	81c2      	strh	r2, [r0, #14]
 8008006:	6183      	str	r3, [r0, #24]
 8008008:	4619      	mov	r1, r3
 800800a:	2208      	movs	r2, #8
 800800c:	305c      	adds	r0, #92	; 0x5c
 800800e:	f7fd fb8f 	bl	8005730 <memset>
 8008012:	4b05      	ldr	r3, [pc, #20]	; (8008028 <std+0x38>)
 8008014:	6224      	str	r4, [r4, #32]
 8008016:	6263      	str	r3, [r4, #36]	; 0x24
 8008018:	4b04      	ldr	r3, [pc, #16]	; (800802c <std+0x3c>)
 800801a:	62a3      	str	r3, [r4, #40]	; 0x28
 800801c:	4b04      	ldr	r3, [pc, #16]	; (8008030 <std+0x40>)
 800801e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008020:	4b04      	ldr	r3, [pc, #16]	; (8008034 <std+0x44>)
 8008022:	6323      	str	r3, [r4, #48]	; 0x30
 8008024:	bd10      	pop	{r4, pc}
 8008026:	bf00      	nop
 8008028:	08008341 	.word	0x08008341
 800802c:	08008363 	.word	0x08008363
 8008030:	0800839b 	.word	0x0800839b
 8008034:	080083bf 	.word	0x080083bf

08008038 <_cleanup_r>:
 8008038:	4901      	ldr	r1, [pc, #4]	; (8008040 <_cleanup_r+0x8>)
 800803a:	f000 b8af 	b.w	800819c <_fwalk_reent>
 800803e:	bf00      	nop
 8008040:	08007f79 	.word	0x08007f79

08008044 <__sfmoreglue>:
 8008044:	b570      	push	{r4, r5, r6, lr}
 8008046:	2568      	movs	r5, #104	; 0x68
 8008048:	1e4a      	subs	r2, r1, #1
 800804a:	4355      	muls	r5, r2
 800804c:	460e      	mov	r6, r1
 800804e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008052:	f7ff fa89 	bl	8007568 <_malloc_r>
 8008056:	4604      	mov	r4, r0
 8008058:	b140      	cbz	r0, 800806c <__sfmoreglue+0x28>
 800805a:	2100      	movs	r1, #0
 800805c:	e9c0 1600 	strd	r1, r6, [r0]
 8008060:	300c      	adds	r0, #12
 8008062:	60a0      	str	r0, [r4, #8]
 8008064:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008068:	f7fd fb62 	bl	8005730 <memset>
 800806c:	4620      	mov	r0, r4
 800806e:	bd70      	pop	{r4, r5, r6, pc}

08008070 <__sfp_lock_acquire>:
 8008070:	4801      	ldr	r0, [pc, #4]	; (8008078 <__sfp_lock_acquire+0x8>)
 8008072:	f000 b8b3 	b.w	80081dc <__retarget_lock_acquire_recursive>
 8008076:	bf00      	nop
 8008078:	2000050c 	.word	0x2000050c

0800807c <__sfp_lock_release>:
 800807c:	4801      	ldr	r0, [pc, #4]	; (8008084 <__sfp_lock_release+0x8>)
 800807e:	f000 b8ae 	b.w	80081de <__retarget_lock_release_recursive>
 8008082:	bf00      	nop
 8008084:	2000050c 	.word	0x2000050c

08008088 <__sinit_lock_acquire>:
 8008088:	4801      	ldr	r0, [pc, #4]	; (8008090 <__sinit_lock_acquire+0x8>)
 800808a:	f000 b8a7 	b.w	80081dc <__retarget_lock_acquire_recursive>
 800808e:	bf00      	nop
 8008090:	20000507 	.word	0x20000507

08008094 <__sinit_lock_release>:
 8008094:	4801      	ldr	r0, [pc, #4]	; (800809c <__sinit_lock_release+0x8>)
 8008096:	f000 b8a2 	b.w	80081de <__retarget_lock_release_recursive>
 800809a:	bf00      	nop
 800809c:	20000507 	.word	0x20000507

080080a0 <__sinit>:
 80080a0:	b510      	push	{r4, lr}
 80080a2:	4604      	mov	r4, r0
 80080a4:	f7ff fff0 	bl	8008088 <__sinit_lock_acquire>
 80080a8:	69a3      	ldr	r3, [r4, #24]
 80080aa:	b11b      	cbz	r3, 80080b4 <__sinit+0x14>
 80080ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080b0:	f7ff bff0 	b.w	8008094 <__sinit_lock_release>
 80080b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080b8:	6523      	str	r3, [r4, #80]	; 0x50
 80080ba:	4b13      	ldr	r3, [pc, #76]	; (8008108 <__sinit+0x68>)
 80080bc:	4a13      	ldr	r2, [pc, #76]	; (800810c <__sinit+0x6c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80080c2:	42a3      	cmp	r3, r4
 80080c4:	bf08      	it	eq
 80080c6:	2301      	moveq	r3, #1
 80080c8:	4620      	mov	r0, r4
 80080ca:	bf08      	it	eq
 80080cc:	61a3      	streq	r3, [r4, #24]
 80080ce:	f000 f81f 	bl	8008110 <__sfp>
 80080d2:	6060      	str	r0, [r4, #4]
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 f81b 	bl	8008110 <__sfp>
 80080da:	60a0      	str	r0, [r4, #8]
 80080dc:	4620      	mov	r0, r4
 80080de:	f000 f817 	bl	8008110 <__sfp>
 80080e2:	2200      	movs	r2, #0
 80080e4:	2104      	movs	r1, #4
 80080e6:	60e0      	str	r0, [r4, #12]
 80080e8:	6860      	ldr	r0, [r4, #4]
 80080ea:	f7ff ff81 	bl	8007ff0 <std>
 80080ee:	2201      	movs	r2, #1
 80080f0:	2109      	movs	r1, #9
 80080f2:	68a0      	ldr	r0, [r4, #8]
 80080f4:	f7ff ff7c 	bl	8007ff0 <std>
 80080f8:	2202      	movs	r2, #2
 80080fa:	2112      	movs	r1, #18
 80080fc:	68e0      	ldr	r0, [r4, #12]
 80080fe:	f7ff ff77 	bl	8007ff0 <std>
 8008102:	2301      	movs	r3, #1
 8008104:	61a3      	str	r3, [r4, #24]
 8008106:	e7d1      	b.n	80080ac <__sinit+0xc>
 8008108:	08008578 	.word	0x08008578
 800810c:	08008039 	.word	0x08008039

08008110 <__sfp>:
 8008110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008112:	4607      	mov	r7, r0
 8008114:	f7ff ffac 	bl	8008070 <__sfp_lock_acquire>
 8008118:	4b1e      	ldr	r3, [pc, #120]	; (8008194 <__sfp+0x84>)
 800811a:	681e      	ldr	r6, [r3, #0]
 800811c:	69b3      	ldr	r3, [r6, #24]
 800811e:	b913      	cbnz	r3, 8008126 <__sfp+0x16>
 8008120:	4630      	mov	r0, r6
 8008122:	f7ff ffbd 	bl	80080a0 <__sinit>
 8008126:	3648      	adds	r6, #72	; 0x48
 8008128:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800812c:	3b01      	subs	r3, #1
 800812e:	d503      	bpl.n	8008138 <__sfp+0x28>
 8008130:	6833      	ldr	r3, [r6, #0]
 8008132:	b30b      	cbz	r3, 8008178 <__sfp+0x68>
 8008134:	6836      	ldr	r6, [r6, #0]
 8008136:	e7f7      	b.n	8008128 <__sfp+0x18>
 8008138:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800813c:	b9d5      	cbnz	r5, 8008174 <__sfp+0x64>
 800813e:	4b16      	ldr	r3, [pc, #88]	; (8008198 <__sfp+0x88>)
 8008140:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008144:	60e3      	str	r3, [r4, #12]
 8008146:	6665      	str	r5, [r4, #100]	; 0x64
 8008148:	f000 f847 	bl	80081da <__retarget_lock_init_recursive>
 800814c:	f7ff ff96 	bl	800807c <__sfp_lock_release>
 8008150:	2208      	movs	r2, #8
 8008152:	4629      	mov	r1, r5
 8008154:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008158:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800815c:	6025      	str	r5, [r4, #0]
 800815e:	61a5      	str	r5, [r4, #24]
 8008160:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008164:	f7fd fae4 	bl	8005730 <memset>
 8008168:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800816c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008170:	4620      	mov	r0, r4
 8008172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008174:	3468      	adds	r4, #104	; 0x68
 8008176:	e7d9      	b.n	800812c <__sfp+0x1c>
 8008178:	2104      	movs	r1, #4
 800817a:	4638      	mov	r0, r7
 800817c:	f7ff ff62 	bl	8008044 <__sfmoreglue>
 8008180:	4604      	mov	r4, r0
 8008182:	6030      	str	r0, [r6, #0]
 8008184:	2800      	cmp	r0, #0
 8008186:	d1d5      	bne.n	8008134 <__sfp+0x24>
 8008188:	f7ff ff78 	bl	800807c <__sfp_lock_release>
 800818c:	230c      	movs	r3, #12
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	e7ee      	b.n	8008170 <__sfp+0x60>
 8008192:	bf00      	nop
 8008194:	08008578 	.word	0x08008578
 8008198:	ffff0001 	.word	0xffff0001

0800819c <_fwalk_reent>:
 800819c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a0:	4606      	mov	r6, r0
 80081a2:	4688      	mov	r8, r1
 80081a4:	2700      	movs	r7, #0
 80081a6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081ae:	f1b9 0901 	subs.w	r9, r9, #1
 80081b2:	d505      	bpl.n	80081c0 <_fwalk_reent+0x24>
 80081b4:	6824      	ldr	r4, [r4, #0]
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	d1f7      	bne.n	80081aa <_fwalk_reent+0xe>
 80081ba:	4638      	mov	r0, r7
 80081bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081c0:	89ab      	ldrh	r3, [r5, #12]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d907      	bls.n	80081d6 <_fwalk_reent+0x3a>
 80081c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081ca:	3301      	adds	r3, #1
 80081cc:	d003      	beq.n	80081d6 <_fwalk_reent+0x3a>
 80081ce:	4629      	mov	r1, r5
 80081d0:	4630      	mov	r0, r6
 80081d2:	47c0      	blx	r8
 80081d4:	4307      	orrs	r7, r0
 80081d6:	3568      	adds	r5, #104	; 0x68
 80081d8:	e7e9      	b.n	80081ae <_fwalk_reent+0x12>

080081da <__retarget_lock_init_recursive>:
 80081da:	4770      	bx	lr

080081dc <__retarget_lock_acquire_recursive>:
 80081dc:	4770      	bx	lr

080081de <__retarget_lock_release_recursive>:
 80081de:	4770      	bx	lr

080081e0 <__swhatbuf_r>:
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	460e      	mov	r6, r1
 80081e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e8:	4614      	mov	r4, r2
 80081ea:	2900      	cmp	r1, #0
 80081ec:	461d      	mov	r5, r3
 80081ee:	b096      	sub	sp, #88	; 0x58
 80081f0:	da07      	bge.n	8008202 <__swhatbuf_r+0x22>
 80081f2:	2300      	movs	r3, #0
 80081f4:	602b      	str	r3, [r5, #0]
 80081f6:	89b3      	ldrh	r3, [r6, #12]
 80081f8:	061a      	lsls	r2, r3, #24
 80081fa:	d410      	bmi.n	800821e <__swhatbuf_r+0x3e>
 80081fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008200:	e00e      	b.n	8008220 <__swhatbuf_r+0x40>
 8008202:	466a      	mov	r2, sp
 8008204:	f000 f902 	bl	800840c <_fstat_r>
 8008208:	2800      	cmp	r0, #0
 800820a:	dbf2      	blt.n	80081f2 <__swhatbuf_r+0x12>
 800820c:	9a01      	ldr	r2, [sp, #4]
 800820e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008212:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008216:	425a      	negs	r2, r3
 8008218:	415a      	adcs	r2, r3
 800821a:	602a      	str	r2, [r5, #0]
 800821c:	e7ee      	b.n	80081fc <__swhatbuf_r+0x1c>
 800821e:	2340      	movs	r3, #64	; 0x40
 8008220:	2000      	movs	r0, #0
 8008222:	6023      	str	r3, [r4, #0]
 8008224:	b016      	add	sp, #88	; 0x58
 8008226:	bd70      	pop	{r4, r5, r6, pc}

08008228 <__smakebuf_r>:
 8008228:	898b      	ldrh	r3, [r1, #12]
 800822a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800822c:	079d      	lsls	r5, r3, #30
 800822e:	4606      	mov	r6, r0
 8008230:	460c      	mov	r4, r1
 8008232:	d507      	bpl.n	8008244 <__smakebuf_r+0x1c>
 8008234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	6123      	str	r3, [r4, #16]
 800823c:	2301      	movs	r3, #1
 800823e:	6163      	str	r3, [r4, #20]
 8008240:	b002      	add	sp, #8
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	466a      	mov	r2, sp
 8008246:	ab01      	add	r3, sp, #4
 8008248:	f7ff ffca 	bl	80081e0 <__swhatbuf_r>
 800824c:	9900      	ldr	r1, [sp, #0]
 800824e:	4605      	mov	r5, r0
 8008250:	4630      	mov	r0, r6
 8008252:	f7ff f989 	bl	8007568 <_malloc_r>
 8008256:	b948      	cbnz	r0, 800826c <__smakebuf_r+0x44>
 8008258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825c:	059a      	lsls	r2, r3, #22
 800825e:	d4ef      	bmi.n	8008240 <__smakebuf_r+0x18>
 8008260:	f023 0303 	bic.w	r3, r3, #3
 8008264:	f043 0302 	orr.w	r3, r3, #2
 8008268:	81a3      	strh	r3, [r4, #12]
 800826a:	e7e3      	b.n	8008234 <__smakebuf_r+0xc>
 800826c:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <__smakebuf_r+0x7c>)
 800826e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008270:	89a3      	ldrh	r3, [r4, #12]
 8008272:	6020      	str	r0, [r4, #0]
 8008274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008278:	81a3      	strh	r3, [r4, #12]
 800827a:	9b00      	ldr	r3, [sp, #0]
 800827c:	6120      	str	r0, [r4, #16]
 800827e:	6163      	str	r3, [r4, #20]
 8008280:	9b01      	ldr	r3, [sp, #4]
 8008282:	b15b      	cbz	r3, 800829c <__smakebuf_r+0x74>
 8008284:	4630      	mov	r0, r6
 8008286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800828a:	f000 f8d1 	bl	8008430 <_isatty_r>
 800828e:	b128      	cbz	r0, 800829c <__smakebuf_r+0x74>
 8008290:	89a3      	ldrh	r3, [r4, #12]
 8008292:	f023 0303 	bic.w	r3, r3, #3
 8008296:	f043 0301 	orr.w	r3, r3, #1
 800829a:	81a3      	strh	r3, [r4, #12]
 800829c:	89a0      	ldrh	r0, [r4, #12]
 800829e:	4305      	orrs	r5, r0
 80082a0:	81a5      	strh	r5, [r4, #12]
 80082a2:	e7cd      	b.n	8008240 <__smakebuf_r+0x18>
 80082a4:	08008039 	.word	0x08008039

080082a8 <_malloc_usable_size_r>:
 80082a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ac:	1f18      	subs	r0, r3, #4
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	bfbc      	itt	lt
 80082b2:	580b      	ldrlt	r3, [r1, r0]
 80082b4:	18c0      	addlt	r0, r0, r3
 80082b6:	4770      	bx	lr

080082b8 <_raise_r>:
 80082b8:	291f      	cmp	r1, #31
 80082ba:	b538      	push	{r3, r4, r5, lr}
 80082bc:	4604      	mov	r4, r0
 80082be:	460d      	mov	r5, r1
 80082c0:	d904      	bls.n	80082cc <_raise_r+0x14>
 80082c2:	2316      	movs	r3, #22
 80082c4:	6003      	str	r3, [r0, #0]
 80082c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082ce:	b112      	cbz	r2, 80082d6 <_raise_r+0x1e>
 80082d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082d4:	b94b      	cbnz	r3, 80082ea <_raise_r+0x32>
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 f830 	bl	800833c <_getpid_r>
 80082dc:	462a      	mov	r2, r5
 80082de:	4601      	mov	r1, r0
 80082e0:	4620      	mov	r0, r4
 80082e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082e6:	f000 b817 	b.w	8008318 <_kill_r>
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d00a      	beq.n	8008304 <_raise_r+0x4c>
 80082ee:	1c59      	adds	r1, r3, #1
 80082f0:	d103      	bne.n	80082fa <_raise_r+0x42>
 80082f2:	2316      	movs	r3, #22
 80082f4:	6003      	str	r3, [r0, #0]
 80082f6:	2001      	movs	r0, #1
 80082f8:	e7e7      	b.n	80082ca <_raise_r+0x12>
 80082fa:	2400      	movs	r4, #0
 80082fc:	4628      	mov	r0, r5
 80082fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008302:	4798      	blx	r3
 8008304:	2000      	movs	r0, #0
 8008306:	e7e0      	b.n	80082ca <_raise_r+0x12>

08008308 <raise>:
 8008308:	4b02      	ldr	r3, [pc, #8]	; (8008314 <raise+0xc>)
 800830a:	4601      	mov	r1, r0
 800830c:	6818      	ldr	r0, [r3, #0]
 800830e:	f7ff bfd3 	b.w	80082b8 <_raise_r>
 8008312:	bf00      	nop
 8008314:	2000009c 	.word	0x2000009c

08008318 <_kill_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	2300      	movs	r3, #0
 800831c:	4d06      	ldr	r5, [pc, #24]	; (8008338 <_kill_r+0x20>)
 800831e:	4604      	mov	r4, r0
 8008320:	4608      	mov	r0, r1
 8008322:	4611      	mov	r1, r2
 8008324:	602b      	str	r3, [r5, #0]
 8008326:	f7fa fa4c 	bl	80027c2 <_kill>
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	d102      	bne.n	8008334 <_kill_r+0x1c>
 800832e:	682b      	ldr	r3, [r5, #0]
 8008330:	b103      	cbz	r3, 8008334 <_kill_r+0x1c>
 8008332:	6023      	str	r3, [r4, #0]
 8008334:	bd38      	pop	{r3, r4, r5, pc}
 8008336:	bf00      	nop
 8008338:	20000500 	.word	0x20000500

0800833c <_getpid_r>:
 800833c:	f7fa ba3a 	b.w	80027b4 <_getpid>

08008340 <__sread>:
 8008340:	b510      	push	{r4, lr}
 8008342:	460c      	mov	r4, r1
 8008344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008348:	f000 f894 	bl	8008474 <_read_r>
 800834c:	2800      	cmp	r0, #0
 800834e:	bfab      	itete	ge
 8008350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008352:	89a3      	ldrhlt	r3, [r4, #12]
 8008354:	181b      	addge	r3, r3, r0
 8008356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800835a:	bfac      	ite	ge
 800835c:	6563      	strge	r3, [r4, #84]	; 0x54
 800835e:	81a3      	strhlt	r3, [r4, #12]
 8008360:	bd10      	pop	{r4, pc}

08008362 <__swrite>:
 8008362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008366:	461f      	mov	r7, r3
 8008368:	898b      	ldrh	r3, [r1, #12]
 800836a:	4605      	mov	r5, r0
 800836c:	05db      	lsls	r3, r3, #23
 800836e:	460c      	mov	r4, r1
 8008370:	4616      	mov	r6, r2
 8008372:	d505      	bpl.n	8008380 <__swrite+0x1e>
 8008374:	2302      	movs	r3, #2
 8008376:	2200      	movs	r2, #0
 8008378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800837c:	f000 f868 	bl	8008450 <_lseek_r>
 8008380:	89a3      	ldrh	r3, [r4, #12]
 8008382:	4632      	mov	r2, r6
 8008384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008388:	81a3      	strh	r3, [r4, #12]
 800838a:	4628      	mov	r0, r5
 800838c:	463b      	mov	r3, r7
 800838e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008396:	f000 b817 	b.w	80083c8 <_write_r>

0800839a <__sseek>:
 800839a:	b510      	push	{r4, lr}
 800839c:	460c      	mov	r4, r1
 800839e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a2:	f000 f855 	bl	8008450 <_lseek_r>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	bf15      	itete	ne
 80083ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80083ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083b6:	81a3      	strheq	r3, [r4, #12]
 80083b8:	bf18      	it	ne
 80083ba:	81a3      	strhne	r3, [r4, #12]
 80083bc:	bd10      	pop	{r4, pc}

080083be <__sclose>:
 80083be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c2:	f000 b813 	b.w	80083ec <_close_r>
	...

080083c8 <_write_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4604      	mov	r4, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	4611      	mov	r1, r2
 80083d0:	2200      	movs	r2, #0
 80083d2:	4d05      	ldr	r5, [pc, #20]	; (80083e8 <_write_r+0x20>)
 80083d4:	602a      	str	r2, [r5, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f7fa fa2a 	bl	8002830 <_write>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_write_r+0x1e>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_write_r+0x1e>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	20000500 	.word	0x20000500

080083ec <_close_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	2300      	movs	r3, #0
 80083f0:	4d05      	ldr	r5, [pc, #20]	; (8008408 <_close_r+0x1c>)
 80083f2:	4604      	mov	r4, r0
 80083f4:	4608      	mov	r0, r1
 80083f6:	602b      	str	r3, [r5, #0]
 80083f8:	f7fa fa36 	bl	8002868 <_close>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d102      	bne.n	8008406 <_close_r+0x1a>
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	b103      	cbz	r3, 8008406 <_close_r+0x1a>
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	20000500 	.word	0x20000500

0800840c <_fstat_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	2300      	movs	r3, #0
 8008410:	4d06      	ldr	r5, [pc, #24]	; (800842c <_fstat_r+0x20>)
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	4611      	mov	r1, r2
 8008418:	602b      	str	r3, [r5, #0]
 800841a:	f7fa fa30 	bl	800287e <_fstat>
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	d102      	bne.n	8008428 <_fstat_r+0x1c>
 8008422:	682b      	ldr	r3, [r5, #0]
 8008424:	b103      	cbz	r3, 8008428 <_fstat_r+0x1c>
 8008426:	6023      	str	r3, [r4, #0]
 8008428:	bd38      	pop	{r3, r4, r5, pc}
 800842a:	bf00      	nop
 800842c:	20000500 	.word	0x20000500

08008430 <_isatty_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	2300      	movs	r3, #0
 8008434:	4d05      	ldr	r5, [pc, #20]	; (800844c <_isatty_r+0x1c>)
 8008436:	4604      	mov	r4, r0
 8008438:	4608      	mov	r0, r1
 800843a:	602b      	str	r3, [r5, #0]
 800843c:	f7fa fa2e 	bl	800289c <_isatty>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_isatty_r+0x1a>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_isatty_r+0x1a>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	20000500 	.word	0x20000500

08008450 <_lseek_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4604      	mov	r4, r0
 8008454:	4608      	mov	r0, r1
 8008456:	4611      	mov	r1, r2
 8008458:	2200      	movs	r2, #0
 800845a:	4d05      	ldr	r5, [pc, #20]	; (8008470 <_lseek_r+0x20>)
 800845c:	602a      	str	r2, [r5, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	f7fa fa26 	bl	80028b0 <_lseek>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_lseek_r+0x1e>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_lseek_r+0x1e>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	20000500 	.word	0x20000500

08008474 <_read_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4604      	mov	r4, r0
 8008478:	4608      	mov	r0, r1
 800847a:	4611      	mov	r1, r2
 800847c:	2200      	movs	r2, #0
 800847e:	4d05      	ldr	r5, [pc, #20]	; (8008494 <_read_r+0x20>)
 8008480:	602a      	str	r2, [r5, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	f7fa f9b7 	bl	80027f6 <_read>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_read_r+0x1e>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	b103      	cbz	r3, 8008492 <_read_r+0x1e>
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	20000500 	.word	0x20000500

08008498 <_init>:
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	bf00      	nop
 800849c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800849e:	bc08      	pop	{r3}
 80084a0:	469e      	mov	lr, r3
 80084a2:	4770      	bx	lr

080084a4 <_fini>:
 80084a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a6:	bf00      	nop
 80084a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084aa:	bc08      	pop	{r3}
 80084ac:	469e      	mov	lr, r3
 80084ae:	4770      	bx	lr
