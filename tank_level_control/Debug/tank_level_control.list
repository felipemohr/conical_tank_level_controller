
tank_level_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08005098  08005098  00015098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c4  080054c4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080054c4  080054c4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054c4  080054c4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054c8  080054c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080054cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  200001e0  080056ac  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080056ac  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005c73  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000159e  00000000  00000000  00025e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000558  00000000  00000000  00027420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004a0  00000000  00000000  00027978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178ec  00000000  00000000  00027e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005d13  00000000  00000000  0003f704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000819c4  00000000  00000000  00045417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c6ddb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002480  00000000  00000000  000c6e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800507c 	.word	0x0800507c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800507c 	.word	0x0800507c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <DWT_Delay_Init+0x58>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <DWT_Delay_Init+0x58>)
 8000a92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a96:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <DWT_Delay_Init+0x58>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <DWT_Delay_Init+0x58>)
 8000a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa2:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <DWT_Delay_Init+0x5c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <DWT_Delay_Init+0x5c>)
 8000aaa:	f023 0301 	bic.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <DWT_Delay_Init+0x5c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <DWT_Delay_Init+0x5c>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <DWT_Delay_Init+0x5c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 8000ac2:	bf00      	nop
  __NOP();
 8000ac4:	bf00      	nop
  __NOP();
 8000ac6:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <DWT_Delay_Init+0x5c>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <DWT_Delay_Init+0x4c>
  {
    return 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e000      	b.n	8000ad6 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8000ad4:	2301      	movs	r3, #1
  }
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000edf0 	.word	0xe000edf0
 8000ae4:	e0001000 	.word	0xe0001000

08000ae8 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <DWT_Delay_us+0x40>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000af6:	f001 fbcf 	bl	8002298 <HAL_RCC_GetHCLKFreq>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <DWT_Delay_us+0x44>)
 8000afe:	fba2 2303 	umull	r2, r3, r2, r3
 8000b02:	0c9b      	lsrs	r3, r3, #18
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	fb02 f303 	mul.w	r3, r2, r3
 8000b0a:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8000b0c:	bf00      	nop
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <DWT_Delay_us+0x40>)
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	1ad2      	subs	r2, r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d3f8      	bcc.n	8000b0e <DWT_Delay_us+0x26>
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	e0001000 	.word	0xe0001000
 8000b2c:	431bde83 	.word	0x431bde83

08000b30 <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <lcd16x2_enablePulse+0x34>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <lcd16x2_enablePulse+0x38>)
 8000b3a:	8811      	ldrh	r1, [r2, #0]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 ffae 	bl	8001aa0 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8000b44:	2014      	movs	r0, #20
 8000b46:	f7ff ffcf 	bl	8000ae8 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <lcd16x2_enablePulse+0x34>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <lcd16x2_enablePulse+0x38>)
 8000b50:	8811      	ldrh	r1, [r2, #0]
 8000b52:	2200      	movs	r2, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 ffa3 	bl	8001aa0 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 8000b5a:	203c      	movs	r0, #60	; 0x3c
 8000b5c:	f7ff ffc4 	bl	8000ae8 <DWT_Delay_us>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200001fc 	.word	0x200001fc
 8000b68:	20000202 	.word	0x20000202

08000b6c <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <lcd16x2_rs+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <lcd16x2_rs+0x28>)
 8000b7c:	8811      	ldrh	r1, [r2, #0]
 8000b7e:	79fa      	ldrb	r2, [r7, #7]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 ff8d 	bl	8001aa0 <HAL_GPIO_WritePin>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200001fc 	.word	0x200001fc
 8000b94:	20000200 	.word	0x20000200

08000b98 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 030f 	and.w	r3, r3, #15
 8000ba8:	73fb      	strb	r3, [r7, #15]
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	091b      	lsrs	r3, r3, #4
 8000bae:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 8000bb0:	4b5f      	ldr	r3, [pc, #380]	; (8000d30 <lcd16x2_write+0x198>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d05a      	beq.n	8000c6e <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000bb8:	4b5e      	ldr	r3, [pc, #376]	; (8000d34 <lcd16x2_write+0x19c>)
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	4b5e      	ldr	r3, [pc, #376]	; (8000d38 <lcd16x2_write+0x1a0>)
 8000bbe:	8819      	ldrh	r1, [r3, #0]
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	461a      	mov	r2, r3
 8000bca:	f000 ff69 	bl	8001aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000bce:	4b59      	ldr	r3, [pc, #356]	; (8000d34 <lcd16x2_write+0x19c>)
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	4b5a      	ldr	r3, [pc, #360]	; (8000d3c <lcd16x2_write+0x1a4>)
 8000bd4:	8819      	ldrh	r1, [r3, #0]
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	461a      	mov	r2, r3
 8000be0:	f000 ff5e 	bl	8001aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000be4:	4b53      	ldr	r3, [pc, #332]	; (8000d34 <lcd16x2_write+0x19c>)
 8000be6:	6818      	ldr	r0, [r3, #0]
 8000be8:	4b55      	ldr	r3, [pc, #340]	; (8000d40 <lcd16x2_write+0x1a8>)
 8000bea:	8819      	ldrh	r1, [r3, #0]
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	f000 ff53 	bl	8001aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000bfa:	4b4e      	ldr	r3, [pc, #312]	; (8000d34 <lcd16x2_write+0x19c>)
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	4b51      	ldr	r3, [pc, #324]	; (8000d44 <lcd16x2_write+0x1ac>)
 8000c00:	8819      	ldrh	r1, [r3, #0]
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	f003 0308 	and.w	r3, r3, #8
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f000 ff48 	bl	8001aa0 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000c10:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <lcd16x2_write+0x1b0>)
 8000c12:	6818      	ldr	r0, [r3, #0]
 8000c14:	4b4d      	ldr	r3, [pc, #308]	; (8000d4c <lcd16x2_write+0x1b4>)
 8000c16:	8819      	ldrh	r1, [r3, #0]
 8000c18:	7bbb      	ldrb	r3, [r7, #14]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	461a      	mov	r2, r3
 8000c22:	f000 ff3d 	bl	8001aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000c26:	4b48      	ldr	r3, [pc, #288]	; (8000d48 <lcd16x2_write+0x1b0>)
 8000c28:	6818      	ldr	r0, [r3, #0]
 8000c2a:	4b49      	ldr	r3, [pc, #292]	; (8000d50 <lcd16x2_write+0x1b8>)
 8000c2c:	8819      	ldrh	r1, [r3, #0]
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	461a      	mov	r2, r3
 8000c38:	f000 ff32 	bl	8001aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000c3c:	4b42      	ldr	r3, [pc, #264]	; (8000d48 <lcd16x2_write+0x1b0>)
 8000c3e:	6818      	ldr	r0, [r3, #0]
 8000c40:	4b44      	ldr	r3, [pc, #272]	; (8000d54 <lcd16x2_write+0x1bc>)
 8000c42:	8819      	ldrh	r1, [r3, #0]
 8000c44:	7bbb      	ldrb	r3, [r7, #14]
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	f000 ff27 	bl	8001aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000c52:	4b3d      	ldr	r3, [pc, #244]	; (8000d48 <lcd16x2_write+0x1b0>)
 8000c54:	6818      	ldr	r0, [r3, #0]
 8000c56:	4b40      	ldr	r3, [pc, #256]	; (8000d58 <lcd16x2_write+0x1c0>)
 8000c58:	8819      	ldrh	r1, [r3, #0]
 8000c5a:	7bbb      	ldrb	r3, [r7, #14]
 8000c5c:	f003 0308 	and.w	r3, r3, #8
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	461a      	mov	r2, r3
 8000c64:	f000 ff1c 	bl	8001aa0 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000c68:	f7ff ff62 	bl	8000b30 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8000c6c:	e05b      	b.n	8000d26 <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000c6e:	4b36      	ldr	r3, [pc, #216]	; (8000d48 <lcd16x2_write+0x1b0>)
 8000c70:	6818      	ldr	r0, [r3, #0]
 8000c72:	4b36      	ldr	r3, [pc, #216]	; (8000d4c <lcd16x2_write+0x1b4>)
 8000c74:	8819      	ldrh	r1, [r3, #0]
 8000c76:	7bbb      	ldrb	r3, [r7, #14]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f000 ff0e 	bl	8001aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000c84:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <lcd16x2_write+0x1b0>)
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <lcd16x2_write+0x1b8>)
 8000c8a:	8819      	ldrh	r1, [r3, #0]
 8000c8c:	7bbb      	ldrb	r3, [r7, #14]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	f000 ff03 	bl	8001aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000c9a:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <lcd16x2_write+0x1b0>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <lcd16x2_write+0x1bc>)
 8000ca0:	8819      	ldrh	r1, [r3, #0]
 8000ca2:	7bbb      	ldrb	r3, [r7, #14]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	461a      	mov	r2, r3
 8000cac:	f000 fef8 	bl	8001aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000cb0:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <lcd16x2_write+0x1b0>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <lcd16x2_write+0x1c0>)
 8000cb6:	8819      	ldrh	r1, [r3, #0]
 8000cb8:	7bbb      	ldrb	r3, [r7, #14]
 8000cba:	f003 0308 	and.w	r3, r3, #8
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	f000 feed 	bl	8001aa0 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000cc6:	f7ff ff33 	bl	8000b30 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <lcd16x2_write+0x1b0>)
 8000ccc:	6818      	ldr	r0, [r3, #0]
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <lcd16x2_write+0x1b4>)
 8000cd0:	8819      	ldrh	r1, [r3, #0]
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f000 fee0 	bl	8001aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <lcd16x2_write+0x1b0>)
 8000ce2:	6818      	ldr	r0, [r3, #0]
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <lcd16x2_write+0x1b8>)
 8000ce6:	8819      	ldrh	r1, [r3, #0]
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	f000 fed5 	bl	8001aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <lcd16x2_write+0x1b0>)
 8000cf8:	6818      	ldr	r0, [r3, #0]
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <lcd16x2_write+0x1bc>)
 8000cfc:	8819      	ldrh	r1, [r3, #0]
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	f000 feca 	bl	8001aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <lcd16x2_write+0x1b0>)
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <lcd16x2_write+0x1c0>)
 8000d12:	8819      	ldrh	r1, [r3, #0]
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	f003 0308 	and.w	r3, r3, #8
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	f000 febf 	bl	8001aa0 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000d22:	f7ff ff05 	bl	8000b30 <lcd16x2_enablePulse>
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000204 	.word	0x20000204
 8000d38:	20000208 	.word	0x20000208
 8000d3c:	2000020a 	.word	0x2000020a
 8000d40:	2000020c 	.word	0x2000020c
 8000d44:	2000020e 	.word	0x2000020e
 8000d48:	20000210 	.word	0x20000210
 8000d4c:	20000214 	.word	0x20000214
 8000d50:	20000216 	.word	0x20000216
 8000d54:	20000218 	.word	0x20000218
 8000d58:	2000021a 	.word	0x2000021a

08000d5c <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff ff00 	bl	8000b6c <lcd16x2_rs>
  lcd16x2_write(cmd);
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff12 	bl	8000b98 <lcd16x2_write>
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 8000d86:	2001      	movs	r0, #1
 8000d88:	f7ff fef0 	bl	8000b6c <lcd16x2_rs>
  lcd16x2_write(data);
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff02 	bl	8000b98 <lcd16x2_write>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 030f 	and.w	r3, r3, #15
 8000dac:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f7ff fedc 	bl	8000b6c <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <lcd16x2_write4+0x7c>)
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <lcd16x2_write4+0x80>)
 8000dba:	8819      	ldrh	r1, [r3, #0]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	f000 fe6b 	bl	8001aa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8000dca:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <lcd16x2_write4+0x7c>)
 8000dcc:	6818      	ldr	r0, [r3, #0]
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <lcd16x2_write4+0x84>)
 8000dd0:	8819      	ldrh	r1, [r3, #0]
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	461a      	mov	r2, r3
 8000ddc:	f000 fe60 	bl	8001aa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8000de0:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <lcd16x2_write4+0x7c>)
 8000de2:	6818      	ldr	r0, [r3, #0]
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <lcd16x2_write4+0x88>)
 8000de6:	8819      	ldrh	r1, [r3, #0]
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	461a      	mov	r2, r3
 8000df2:	f000 fe55 	bl	8001aa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <lcd16x2_write4+0x7c>)
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <lcd16x2_write4+0x8c>)
 8000dfc:	8819      	ldrh	r1, [r3, #0]
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 0308 	and.w	r3, r3, #8
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	461a      	mov	r2, r3
 8000e08:	f000 fe4a 	bl	8001aa0 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8000e0c:	f7ff fe90 	bl	8000b30 <lcd16x2_enablePulse>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000210 	.word	0x20000210
 8000e1c:	20000214 	.word	0x20000214
 8000e20:	20000216 	.word	0x20000216
 8000e24:	20000218 	.word	0x20000218
 8000e28:	2000021a 	.word	0x2000021a

08000e2c <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	460b      	mov	r3, r1
 8000e38:	817b      	strh	r3, [r7, #10]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8000e3e:	f7ff fe23 	bl	8000a88 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8000e42:	4a24      	ldr	r2, [pc, #144]	; (8000ed4 <lcd16x2_init_4bits+0xa8>)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8000e48:	4a23      	ldr	r2, [pc, #140]	; (8000ed8 <lcd16x2_init_4bits+0xac>)
 8000e4a:	897b      	ldrh	r3, [r7, #10]
 8000e4c:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 8000e4e:	4a23      	ldr	r2, [pc, #140]	; (8000edc <lcd16x2_init_4bits+0xb0>)
 8000e50:	893b      	ldrh	r3, [r7, #8]
 8000e52:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8000e54:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <lcd16x2_init_4bits+0xb4>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <lcd16x2_init_4bits+0xb8>)
 8000e5c:	8b3b      	ldrh	r3, [r7, #24]
 8000e5e:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8000e60:	4a21      	ldr	r2, [pc, #132]	; (8000ee8 <lcd16x2_init_4bits+0xbc>)
 8000e62:	8bbb      	ldrh	r3, [r7, #28]
 8000e64:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8000e66:	4a21      	ldr	r2, [pc, #132]	; (8000eec <lcd16x2_init_4bits+0xc0>)
 8000e68:	8c3b      	ldrh	r3, [r7, #32]
 8000e6a:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8000e6c:	4a20      	ldr	r2, [pc, #128]	; (8000ef0 <lcd16x2_init_4bits+0xc4>)
 8000e6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e70:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <lcd16x2_init_4bits+0xc8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <lcd16x2_init_4bits+0xcc>)
 8000e7a:	2228      	movs	r2, #40	; 0x28
 8000e7c:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 8000e7e:	2014      	movs	r0, #20
 8000e80:	f000 fb82 	bl	8001588 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f7ff ff89 	bl	8000d9c <lcd16x2_write4>
  LCD_MS_DELAY(5);
 8000e8a:	2005      	movs	r0, #5
 8000e8c:	f000 fb7c 	bl	8001588 <HAL_Delay>
  lcd16x2_write4(0x3);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f7ff ff83 	bl	8000d9c <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000e96:	2001      	movs	r0, #1
 8000e98:	f000 fb76 	bl	8001588 <HAL_Delay>
  lcd16x2_write4(0x3);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f7ff ff7d 	bl	8000d9c <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f000 fb70 	bl	8001588 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8000ea8:	2002      	movs	r0, #2
 8000eaa:	f7ff ff77 	bl	8000d9c <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f000 fb6a 	bl	8001588 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000eb4:	2028      	movs	r0, #40	; 0x28
 8000eb6:	f7ff ff51 	bl	8000d5c <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8000eba:	200f      	movs	r0, #15
 8000ebc:	f7ff ff4e 	bl	8000d5c <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff ff4b 	bl	8000d5c <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8000ec6:	2003      	movs	r0, #3
 8000ec8:	f000 fb5e 	bl	8001588 <HAL_Delay>
}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200001fc 	.word	0x200001fc
 8000ed8:	20000200 	.word	0x20000200
 8000edc:	20000202 	.word	0x20000202
 8000ee0:	20000210 	.word	0x20000210
 8000ee4:	20000214 	.word	0x20000214
 8000ee8:	20000216 	.word	0x20000216
 8000eec:	20000218 	.word	0x20000218
 8000ef0:	2000021a 	.word	0x2000021a
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	20000002 	.word	0x20000002

08000efc <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	460a      	mov	r2, r1
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d108      	bne.n	8000f2c <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f20:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff19 	bl	8000d5c <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8000f2a:	e007      	b.n	8000f3c <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000f32:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff10 	bl	8000d5c <lcd16x2_writeCommand>
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <lcd16x2_1stLine>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff ffd6 	bl	8000efc <lcd16x2_setCursor>
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <lcd16x2_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f7ff ffce 	bl	8000efc <lcd16x2_setCursor>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <lcd16x2_cursorShow>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if(state)
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00c      	beq.n	8000f8e <lcd16x2_cursorShow+0x2a>
  {
    DisplayControl |= (0x03);
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <lcd16x2_cursorShow+0x4c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	f043 0303 	orr.w	r3, r3, #3
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <lcd16x2_cursorShow+0x4c>)
 8000f80:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <lcd16x2_cursorShow+0x4c>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fee8 	bl	8000d5c <lcd16x2_writeCommand>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 8000f8c:	e00b      	b.n	8000fa6 <lcd16x2_cursorShow+0x42>
    DisplayControl &= ~(0x03);
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <lcd16x2_cursorShow+0x4c>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <lcd16x2_cursorShow+0x4c>)
 8000f9a:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <lcd16x2_cursorShow+0x4c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fedb 	bl	8000d5c <lcd16x2_writeCommand>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000001 	.word	0x20000001

08000fb4 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff fecf 	bl	8000d5c <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	f000 fae2 	bl	8001588 <HAL_Delay>
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8000fc8:	b40f      	push	{r0, r1, r2, r3}
 8000fca:	b590      	push	{r4, r7, lr}
 8000fcc:	b089      	sub	sp, #36	; 0x24
 8000fce:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000fd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fd4:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 fe2a 	bl	8002c38 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	77fb      	strb	r3, [r7, #31]
 8000fe8:	e00b      	b.n	8001002 <lcd16x2_printf+0x3a>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8000fea:	7ffb      	ldrb	r3, [r7, #31]
 8000fec:	f107 0220 	add.w	r2, r7, #32
 8000ff0:	4413      	add	r3, r2
 8000ff2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fec0 	bl	8000d7c <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000ffc:	7ffb      	ldrb	r3, [r7, #31]
 8000ffe:	3301      	adds	r3, #1
 8001000:	77fb      	strb	r3, [r7, #31]
 8001002:	7ffc      	ldrb	r4, [r7, #31]
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff f8a1 	bl	8000150 <strlen>
 800100e:	4603      	mov	r3, r0
 8001010:	429c      	cmp	r4, r3
 8001012:	d202      	bcs.n	800101a <lcd16x2_printf+0x52>
 8001014:	7ffb      	ldrb	r3, [r7, #31]
 8001016:	2b0f      	cmp	r3, #15
 8001018:	d9e7      	bls.n	8000fea <lcd16x2_printf+0x22>
  }
}
 800101a:	bf00      	nop
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001024:	b004      	add	sp, #16
 8001026:	4770      	bx	lr

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f000 fa49 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 f853 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001036:	f000 f897 	bl	8001168 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  lcd16x2_init_4bits(LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_EN_Pin,
 800103a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800103e:	9303      	str	r3, [sp, #12]
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <main+0xa0>)
 8001054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105c:	481a      	ldr	r0, [pc, #104]	; (80010c8 <main+0xa0>)
 800105e:	f7ff fee5 	bl	8000e2c <lcd16x2_init_4bits>
		  	  	  	 LCD_D4_GPIO_Port, LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin);

  lcd16x2_printf("Heeelloo world!!");
 8001062:	481a      	ldr	r0, [pc, #104]	; (80010cc <main+0xa4>)
 8001064:	f7ff ffb0 	bl	8000fc8 <lcd16x2_printf>
  HAL_Delay(1000);
 8001068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800106c:	f000 fa8c 	bl	8001588 <HAL_Delay>
  lcd16x2_clear();
 8001070:	f7ff ffa0 	bl	8000fb4 <lcd16x2_clear>
  lcd16x2_cursorShow(false);
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff ff75 	bl	8000f64 <lcd16x2_cursorShow>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800107a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107e:	4814      	ldr	r0, [pc, #80]	; (80010d0 <main+0xa8>)
 8001080:	f000 fd26 	bl	8001ad0 <HAL_GPIO_TogglePin>

	  lcd16x2_1stLine();
 8001084:	f7ff ff5e 	bl	8000f44 <lcd16x2_1stLine>
	  lcd16x2_printf("First line:");
 8001088:	4812      	ldr	r0, [pc, #72]	; (80010d4 <main+0xac>)
 800108a:	f7ff ff9d 	bl	8000fc8 <lcd16x2_printf>
	  HAL_Delay(1000);
 800108e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001092:	f000 fa79 	bl	8001588 <HAL_Delay>
	  lcd16x2_2ndLine();
 8001096:	f7ff ff5d 	bl	8000f54 <lcd16x2_2ndLine>
	  lcd16x2_printf("%.2f", 1.23);
 800109a:	a309      	add	r3, pc, #36	; (adr r3, 80010c0 <main+0x98>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <main+0xb0>)
 80010a2:	f7ff ff91 	bl	8000fc8 <lcd16x2_printf>
	  HAL_Delay(1000);
 80010a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010aa:	f000 fa6d 	bl	8001588 <HAL_Delay>
	  lcd16x2_clear();
 80010ae:	f7ff ff81 	bl	8000fb4 <lcd16x2_clear>
	  HAL_Delay(500);
 80010b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b6:	f000 fa67 	bl	8001588 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80010ba:	e7de      	b.n	800107a <main+0x52>
 80010bc:	f3af 8000 	nop.w
 80010c0:	7ae147ae 	.word	0x7ae147ae
 80010c4:	3ff3ae14 	.word	0x3ff3ae14
 80010c8:	40010800 	.word	0x40010800
 80010cc:	08005098 	.word	0x08005098
 80010d0:	40011000 	.word	0x40011000
 80010d4:	080050ac 	.word	0x080050ac
 80010d8:	080050b8 	.word	0x080050b8

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b090      	sub	sp, #64	; 0x40
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	2228      	movs	r2, #40	; 0x28
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 f926 	bl	800233c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010fe:	2301      	movs	r3, #1
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001106:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800110c:	2301      	movs	r3, #1
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001110:	2302      	movs	r3, #2
 8001112:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001118:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800111a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001120:	f107 0318 	add.w	r3, r7, #24
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fced 	bl	8001b04 <HAL_RCC_OscConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001130:	f000 f87c 	bl	800122c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001134:	230f      	movs	r3, #15
 8001136:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001138:	2302      	movs	r3, #2
 800113a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2102      	movs	r1, #2
 800114e:	4618      	mov	r0, r3
 8001150:	f000 ff58 	bl	8002004 <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800115a:	f000 f867 	bl	800122c <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3740      	adds	r7, #64	; 0x40
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117c:	4b28      	ldr	r3, [pc, #160]	; (8001220 <MX_GPIO_Init+0xb8>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a27      	ldr	r2, [pc, #156]	; (8001220 <MX_GPIO_Init+0xb8>)
 8001182:	f043 0310 	orr.w	r3, r3, #16
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <MX_GPIO_Init+0xb8>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <MX_GPIO_Init+0xb8>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a21      	ldr	r2, [pc, #132]	; (8001220 <MX_GPIO_Init+0xb8>)
 800119a:	f043 0320 	orr.w	r3, r3, #32
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <MX_GPIO_Init+0xb8>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <MX_GPIO_Init+0xb8>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <MX_GPIO_Init+0xb8>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <MX_GPIO_Init+0xb8>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ca:	4816      	ldr	r0, [pc, #88]	; (8001224 <MX_GPIO_Init+0xbc>)
 80011cc:	f000 fc68 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 80011d6:	4814      	ldr	r0, [pc, #80]	; (8001228 <MX_GPIO_Init+0xc0>)
 80011d8:	f000 fc62 	bl	8001aa0 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2302      	movs	r3, #2
 80011ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4619      	mov	r1, r3
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <MX_GPIO_Init+0xbc>)
 80011f6:	f000 facf 	bl	8001798 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 80011fa:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 80011fe:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001208:	2301      	movs	r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4619      	mov	r1, r3
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_GPIO_Init+0xc0>)
 8001214:	f000 fac0 	bl	8001798 <HAL_GPIO_Init>

}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000
 8001224:	40011000 	.word	0x40011000
 8001228:	40010800 	.word	0x40010800

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	e7fe      	b.n	8001234 <Error_Handler+0x8>
	...

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_MspInit+0x5c>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_MspInit+0x5c>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6193      	str	r3, [r2, #24]
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_MspInit+0x5c>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <HAL_MspInit+0x5c>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <HAL_MspInit+0x5c>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	61d3      	str	r3, [r2, #28]
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_MspInit+0x5c>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_MspInit+0x60>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_MspInit+0x60>)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	40021000 	.word	0x40021000
 8001298:	40010000 	.word	0x40010000

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <NMI_Handler+0x4>

080012a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <MemManage_Handler+0x4>

080012ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <UsageFault_Handler+0x4>

080012ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e2:	f000 f935 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
	return 1;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <_kill>:

int _kill(int pid, int sig)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001302:	f000 fff1 	bl	80022e8 <__errno>
 8001306:	4603      	mov	r3, r0
 8001308:	2216      	movs	r2, #22
 800130a:	601a      	str	r2, [r3, #0]
	return -1;
 800130c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <_exit>:

void _exit (int status)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ffe7 	bl	80012f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800132a:	e7fe      	b.n	800132a <_exit+0x12>

0800132c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	e00a      	b.n	8001354 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800133e:	f3af 8000 	nop.w
 8001342:	4601      	mov	r1, r0
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	60ba      	str	r2, [r7, #8]
 800134a:	b2ca      	uxtb	r2, r1
 800134c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	dbf0      	blt.n	800133e <_read+0x12>
	}

return len;
 800135c:	687b      	ldr	r3, [r7, #4]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e009      	b.n	800138c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	60ba      	str	r2, [r7, #8]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	429a      	cmp	r2, r3
 8001392:	dbf1      	blt.n	8001378 <_write+0x12>
	}
	return len;
 8001394:	687b      	ldr	r3, [r7, #4]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <_close>:

int _close(int file)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
	return -1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013c4:	605a      	str	r2, [r3, #4]
	return 0;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <_isatty>:

int _isatty(int file)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
	return 1;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
	return 0;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
	...

08001400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <_sbrk+0x5c>)
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <_sbrk+0x60>)
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001430:	f000 ff5a 	bl	80022e8 <__errno>
 8001434:	4603      	mov	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <_sbrk+0x64>)
 8001450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20005000 	.word	0x20005000
 8001460:	00000400 	.word	0x00000400
 8001464:	2000021c 	.word	0x2000021c
 8001468:	20000240 	.word	0x20000240

0800146c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147a:	490d      	ldr	r1, [pc, #52]	; (80014b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001490:	4c0a      	ldr	r4, [pc, #40]	; (80014bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800149e:	f7ff ffe5 	bl	800146c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a2:	f000 ff27 	bl	80022f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014a6:	f7ff fdbf 	bl	8001028 <main>
  bx lr
 80014aa:	4770      	bx	lr
  ldr r0, =_sdata
 80014ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80014b4:	080054cc 	.word	0x080054cc
  ldr r2, =_sbss
 80014b8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80014bc:	2000023c 	.word	0x2000023c

080014c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC1_2_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_Init+0x28>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_Init+0x28>)
 80014ce:	f043 0310 	orr.w	r3, r3, #16
 80014d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f000 f92b 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014da:	200f      	movs	r0, #15
 80014dc:	f000 f808 	bl	80014f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e0:	f7ff feaa 	bl	8001238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40022000 	.word	0x40022000

080014f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x54>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x58>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001506:	fbb3 f3f1 	udiv	r3, r3, r1
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f935 	bl	800177e <HAL_SYSTICK_Config>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e00e      	b.n	800153c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d80a      	bhi.n	800153a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800152c:	f000 f90b 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <HAL_InitTick+0x5c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000004 	.word	0x20000004
 8001548:	2000000c 	.word	0x2000000c
 800154c:	20000008 	.word	0x20000008

08001550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_IncTick+0x1c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_IncTick+0x20>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a03      	ldr	r2, [pc, #12]	; (8001570 <HAL_IncTick+0x20>)
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	2000000c 	.word	0x2000000c
 8001570:	20000228 	.word	0x20000228

08001574 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <HAL_GetTick+0x10>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	20000228 	.word	0x20000228

08001588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff fff0 	bl	8001574 <HAL_GetTick>
 8001594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015a0:	d005      	beq.n	80015ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_Delay+0x44>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ae:	bf00      	nop
 80015b0:	f7ff ffe0 	bl	8001574 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d8f7      	bhi.n	80015b0 <HAL_Delay+0x28>
  {
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000000c 	.word	0x2000000c

080015d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001602:	4a04      	ldr	r2, [pc, #16]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	60d3      	str	r3, [r2, #12]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	; (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	; (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
         );
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	; 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001710:	f7ff ff90 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff49 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff5e 	bl	8001618 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff90 	bl	8001688 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5f 	bl	8001634 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffb0 	bl	80016ec <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001798:	b480      	push	{r7}
 800179a:	b08b      	sub	sp, #44	; 0x2c
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017aa:	e169      	b.n	8001a80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017ac:	2201      	movs	r2, #1
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	f040 8158 	bne.w	8001a7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4a9a      	ldr	r2, [pc, #616]	; (8001a38 <HAL_GPIO_Init+0x2a0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d05e      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017d4:	4a98      	ldr	r2, [pc, #608]	; (8001a38 <HAL_GPIO_Init+0x2a0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d875      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017da:	4a98      	ldr	r2, [pc, #608]	; (8001a3c <HAL_GPIO_Init+0x2a4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d058      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017e0:	4a96      	ldr	r2, [pc, #600]	; (8001a3c <HAL_GPIO_Init+0x2a4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d86f      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017e6:	4a96      	ldr	r2, [pc, #600]	; (8001a40 <HAL_GPIO_Init+0x2a8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d052      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017ec:	4a94      	ldr	r2, [pc, #592]	; (8001a40 <HAL_GPIO_Init+0x2a8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d869      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017f2:	4a94      	ldr	r2, [pc, #592]	; (8001a44 <HAL_GPIO_Init+0x2ac>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d04c      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 80017f8:	4a92      	ldr	r2, [pc, #584]	; (8001a44 <HAL_GPIO_Init+0x2ac>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d863      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 80017fe:	4a92      	ldr	r2, [pc, #584]	; (8001a48 <HAL_GPIO_Init+0x2b0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d046      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
 8001804:	4a90      	ldr	r2, [pc, #576]	; (8001a48 <HAL_GPIO_Init+0x2b0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d85d      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 800180a:	2b12      	cmp	r3, #18
 800180c:	d82a      	bhi.n	8001864 <HAL_GPIO_Init+0xcc>
 800180e:	2b12      	cmp	r3, #18
 8001810:	d859      	bhi.n	80018c6 <HAL_GPIO_Init+0x12e>
 8001812:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <HAL_GPIO_Init+0x80>)
 8001814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001818:	08001893 	.word	0x08001893
 800181c:	0800186d 	.word	0x0800186d
 8001820:	0800187f 	.word	0x0800187f
 8001824:	080018c1 	.word	0x080018c1
 8001828:	080018c7 	.word	0x080018c7
 800182c:	080018c7 	.word	0x080018c7
 8001830:	080018c7 	.word	0x080018c7
 8001834:	080018c7 	.word	0x080018c7
 8001838:	080018c7 	.word	0x080018c7
 800183c:	080018c7 	.word	0x080018c7
 8001840:	080018c7 	.word	0x080018c7
 8001844:	080018c7 	.word	0x080018c7
 8001848:	080018c7 	.word	0x080018c7
 800184c:	080018c7 	.word	0x080018c7
 8001850:	080018c7 	.word	0x080018c7
 8001854:	080018c7 	.word	0x080018c7
 8001858:	080018c7 	.word	0x080018c7
 800185c:	08001875 	.word	0x08001875
 8001860:	08001889 	.word	0x08001889
 8001864:	4a79      	ldr	r2, [pc, #484]	; (8001a4c <HAL_GPIO_Init+0x2b4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800186a:	e02c      	b.n	80018c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	623b      	str	r3, [r7, #32]
          break;
 8001872:	e029      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	3304      	adds	r3, #4
 800187a:	623b      	str	r3, [r7, #32]
          break;
 800187c:	e024      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	3308      	adds	r3, #8
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e01f      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	330c      	adds	r3, #12
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e01a      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d102      	bne.n	80018a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800189a:	2304      	movs	r3, #4
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e013      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a8:	2308      	movs	r3, #8
 80018aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	611a      	str	r2, [r3, #16]
          break;
 80018b2:	e009      	b.n	80018c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b4:	2308      	movs	r3, #8
 80018b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	615a      	str	r2, [r3, #20]
          break;
 80018be:	e003      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
          break;
 80018c4:	e000      	b.n	80018c8 <HAL_GPIO_Init+0x130>
          break;
 80018c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2bff      	cmp	r3, #255	; 0xff
 80018cc:	d801      	bhi.n	80018d2 <HAL_GPIO_Init+0x13a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	e001      	b.n	80018d6 <HAL_GPIO_Init+0x13e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3304      	adds	r3, #4
 80018d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2bff      	cmp	r3, #255	; 0xff
 80018dc:	d802      	bhi.n	80018e4 <HAL_GPIO_Init+0x14c>
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	e002      	b.n	80018ea <HAL_GPIO_Init+0x152>
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	3b08      	subs	r3, #8
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	210f      	movs	r1, #15
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	6a39      	ldr	r1, [r7, #32]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	431a      	orrs	r2, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80b1 	beq.w	8001a7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001918:	4b4d      	ldr	r3, [pc, #308]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a4c      	ldr	r2, [pc, #304]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <HAL_GPIO_Init+0x2b8>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001930:	4a48      	ldr	r2, [pc, #288]	; (8001a54 <HAL_GPIO_Init+0x2bc>)
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	3302      	adds	r3, #2
 8001938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a40      	ldr	r2, [pc, #256]	; (8001a58 <HAL_GPIO_Init+0x2c0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d013      	beq.n	8001984 <HAL_GPIO_Init+0x1ec>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a3f      	ldr	r2, [pc, #252]	; (8001a5c <HAL_GPIO_Init+0x2c4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00d      	beq.n	8001980 <HAL_GPIO_Init+0x1e8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a3e      	ldr	r2, [pc, #248]	; (8001a60 <HAL_GPIO_Init+0x2c8>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d007      	beq.n	800197c <HAL_GPIO_Init+0x1e4>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a3d      	ldr	r2, [pc, #244]	; (8001a64 <HAL_GPIO_Init+0x2cc>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d101      	bne.n	8001978 <HAL_GPIO_Init+0x1e0>
 8001974:	2303      	movs	r3, #3
 8001976:	e006      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 8001978:	2304      	movs	r3, #4
 800197a:	e004      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 800197c:	2302      	movs	r3, #2
 800197e:	e002      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <HAL_GPIO_Init+0x1ee>
 8001984:	2300      	movs	r3, #0
 8001986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001988:	f002 0203 	and.w	r2, r2, #3
 800198c:	0092      	lsls	r2, r2, #2
 800198e:	4093      	lsls	r3, r2
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001996:	492f      	ldr	r1, [pc, #188]	; (8001a54 <HAL_GPIO_Init+0x2bc>)
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019b0:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	492c      	ldr	r1, [pc, #176]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019be:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	4928      	ldr	r1, [pc, #160]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	4922      	ldr	r1, [pc, #136]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
 80019e4:	e006      	b.n	80019f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	491e      	ldr	r1, [pc, #120]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	4918      	ldr	r1, [pc, #96]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]
 8001a0c:	e006      	b.n	8001a1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	4914      	ldr	r1, [pc, #80]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d021      	beq.n	8001a6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	490e      	ldr	r1, [pc, #56]	; (8001a68 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60cb      	str	r3, [r1, #12]
 8001a34:	e021      	b.n	8001a7a <HAL_GPIO_Init+0x2e2>
 8001a36:	bf00      	nop
 8001a38:	10320000 	.word	0x10320000
 8001a3c:	10310000 	.word	0x10310000
 8001a40:	10220000 	.word	0x10220000
 8001a44:	10210000 	.word	0x10210000
 8001a48:	10120000 	.word	0x10120000
 8001a4c:	10110000 	.word	0x10110000
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010000 	.word	0x40010000
 8001a58:	40010800 	.word	0x40010800
 8001a5c:	40010c00 	.word	0x40010c00
 8001a60:	40011000 	.word	0x40011000
 8001a64:	40011400 	.word	0x40011400
 8001a68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	4909      	ldr	r1, [pc, #36]	; (8001a9c <HAL_GPIO_Init+0x304>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f47f ae8e 	bne.w	80017ac <HAL_GPIO_Init+0x14>
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	372c      	adds	r7, #44	; 0x2c
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001abc:	e003      	b.n	8001ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001abe:	887b      	ldrh	r3, [r7, #2]
 8001ac0:	041a      	lsls	r2, r3, #16
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	611a      	str	r2, [r3, #16]
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	041a      	lsls	r2, r3, #16
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43d9      	mvns	r1, r3
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	400b      	ands	r3, r1
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	611a      	str	r2, [r3, #16]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e26c      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8087 	beq.w	8001c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b24:	4b92      	ldr	r3, [pc, #584]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d00c      	beq.n	8001b4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b30:	4b8f      	ldr	r3, [pc, #572]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d112      	bne.n	8001b62 <HAL_RCC_OscConfig+0x5e>
 8001b3c:	4b8c      	ldr	r3, [pc, #560]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d10b      	bne.n	8001b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4a:	4b89      	ldr	r3, [pc, #548]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d06c      	beq.n	8001c30 <HAL_RCC_OscConfig+0x12c>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d168      	bne.n	8001c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e246      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x76>
 8001b6c:	4b80      	ldr	r3, [pc, #512]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a7f      	ldr	r2, [pc, #508]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	e02e      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd4>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x98>
 8001b82:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7a      	ldr	r2, [pc, #488]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b78      	ldr	r3, [pc, #480]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a77      	ldr	r2, [pc, #476]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e01d      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd4>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xbc>
 8001ba6:	4b72      	ldr	r3, [pc, #456]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a71      	ldr	r2, [pc, #452]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a6e      	ldr	r2, [pc, #440]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd4>
 8001bc0:	4b6b      	ldr	r3, [pc, #428]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6a      	ldr	r2, [pc, #424]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b68      	ldr	r3, [pc, #416]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a67      	ldr	r2, [pc, #412]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fcc8 	bl	8001574 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fcc4 	bl	8001574 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1fa      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0xe4>
 8001c06:	e014      	b.n	8001c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fcb4 	bl	8001574 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fcb0 	bl	8001574 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1e6      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x10c>
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d063      	beq.n	8001d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c4a:	4b49      	ldr	r3, [pc, #292]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d11c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x18c>
 8001c56:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d116      	bne.n	8001c90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_RCC_OscConfig+0x176>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e1ba      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4939      	ldr	r1, [pc, #228]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	e03a      	b.n	8001d06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fc69 	bl	8001574 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fc65 	bl	8001574 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e19b      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4927      	ldr	r1, [pc, #156]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
 8001cd8:	e015      	b.n	8001d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fc48 	bl	8001574 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fc44 	bl	8001574 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e17a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d03a      	beq.n	8001d88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d019      	beq.n	8001d4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d20:	f7ff fc28 	bl	8001574 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d28:	f7ff fc24 	bl	8001574 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e15a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d46:	2001      	movs	r0, #1
 8001d48:	f000 fab0 	bl	80022ac <RCC_Delay>
 8001d4c:	e01c      	b.n	8001d88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_RCC_OscConfig+0x274>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7ff fc0e 	bl	8001574 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5a:	e00f      	b.n	8001d7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fc0a 	bl	8001574 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d908      	bls.n	8001d7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e140      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	42420000 	.word	0x42420000
 8001d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7c:	4b9e      	ldr	r3, [pc, #632]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1e9      	bne.n	8001d5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80a6 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9a:	4b97      	ldr	r3, [pc, #604]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10d      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	4b94      	ldr	r3, [pc, #592]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a93      	ldr	r2, [pc, #588]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	61d3      	str	r3, [r2, #28]
 8001db2:	4b91      	ldr	r3, [pc, #580]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	4b8e      	ldr	r3, [pc, #568]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dce:	4b8b      	ldr	r3, [pc, #556]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a8a      	ldr	r2, [pc, #552]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dda:	f7ff fbcb 	bl	8001574 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff fbc7 	bl	8001574 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b64      	cmp	r3, #100	; 0x64
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e0fd      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	4b81      	ldr	r3, [pc, #516]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x312>
 8001e08:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a7a      	ldr	r2, [pc, #488]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6213      	str	r3, [r2, #32]
 8001e14:	e02d      	b.n	8001e72 <HAL_RCC_OscConfig+0x36e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x334>
 8001e1e:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a75      	ldr	r2, [pc, #468]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6213      	str	r3, [r2, #32]
 8001e2a:	4b73      	ldr	r3, [pc, #460]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a72      	ldr	r2, [pc, #456]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	6213      	str	r3, [r2, #32]
 8001e36:	e01c      	b.n	8001e72 <HAL_RCC_OscConfig+0x36e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	d10c      	bne.n	8001e5a <HAL_RCC_OscConfig+0x356>
 8001e40:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a6c      	ldr	r2, [pc, #432]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6213      	str	r3, [r2, #32]
 8001e58:	e00b      	b.n	8001e72 <HAL_RCC_OscConfig+0x36e>
 8001e5a:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a66      	ldr	r2, [pc, #408]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	4b64      	ldr	r3, [pc, #400]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a63      	ldr	r2, [pc, #396]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d015      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fb7b 	bl	8001574 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7ff fb77 	bl	8001574 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e0ab      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e98:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ee      	beq.n	8001e82 <HAL_RCC_OscConfig+0x37e>
 8001ea4:	e014      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fb65 	bl	8001574 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7ff fb61 	bl	8001574 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e095      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec4:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ee      	bne.n	8001eae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed6:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a47      	ldr	r2, [pc, #284]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 8081 	beq.w	8001fee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eec:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d061      	beq.n	8001fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d146      	bne.n	8001f8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f00:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <HAL_RCC_OscConfig+0x4fc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7ff fb35 	bl	8001574 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7ff fb31 	bl	8001574 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e067      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f20:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f34:	d108      	bne.n	8001f48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f36:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	492d      	ldr	r1, [pc, #180]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a19      	ldr	r1, [r3, #32]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	4927      	ldr	r1, [pc, #156]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <HAL_RCC_OscConfig+0x4fc>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff fb05 	bl	8001574 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff fb01 	bl	8001574 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e037      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x46a>
 8001f8c:	e02f      	b.n	8001fee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <HAL_RCC_OscConfig+0x4fc>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff faee 	bl	8001574 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff faea 	bl	8001574 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e020      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x498>
 8001fba:	e018      	b.n	8001fee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e013      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40007000 	.word	0x40007000
 8002000:	42420060 	.word	0x42420060

08002004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0d0      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d910      	bls.n	8002048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	4965      	ldr	r1, [pc, #404]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0b8      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800206a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a52      	ldr	r2, [pc, #328]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	494d      	ldr	r1, [pc, #308]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d040      	beq.n	8002124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d115      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e07f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e073      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06b      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e2:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f023 0203 	bic.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4936      	ldr	r1, [pc, #216]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f4:	f7ff fa3e 	bl	8001574 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7ff fa3a 	bl	8001574 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e053      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 020c 	and.w	r2, r3, #12
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	429a      	cmp	r2, r3
 8002122:	d1eb      	bne.n	80020fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d210      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 0207 	bic.w	r2, r3, #7
 800213a:	4922      	ldr	r1, [pc, #136]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e032      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4916      	ldr	r1, [pc, #88]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	490e      	ldr	r1, [pc, #56]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002192:	f000 f821 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002196:	4602      	mov	r2, r0
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	490a      	ldr	r1, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	5ccb      	ldrb	r3, [r1, r3]
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1cc>)
 80021ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1d0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff f99c 	bl	80014f0 <HAL_InitTick>

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40022000 	.word	0x40022000
 80021c8:	40021000 	.word	0x40021000
 80021cc:	080050d0 	.word	0x080050d0
 80021d0:	20000004 	.word	0x20000004
 80021d4:	20000008 	.word	0x20000008

080021d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	b490      	push	{r4, r7}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021de:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021e0:	1d3c      	adds	r4, r7, #4
 80021e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021e8:	f240 2301 	movw	r3, #513	; 0x201
 80021ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002202:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b04      	cmp	r3, #4
 8002210:	d002      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x40>
 8002212:	2b08      	cmp	r3, #8
 8002214:	d003      	beq.n	800221e <HAL_RCC_GetSysClockFreq+0x46>
 8002216:	e02d      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb8>)
 800221a:	623b      	str	r3, [r7, #32]
      break;
 800221c:	e02d      	b.n	800227a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	0c9b      	lsrs	r3, r3, #18
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800222a:	4413      	add	r3, r2
 800222c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002230:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_RCC_GetSysClockFreq+0xb4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	0c5b      	lsrs	r3, r3, #17
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800224a:	4413      	add	r3, r2
 800224c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002250:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002256:	fb02 f203 	mul.w	r2, r2, r3
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
 8002262:	e004      	b.n	800226e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	623b      	str	r3, [r7, #32]
      break;
 8002272:	e002      	b.n	800227a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002276:	623b      	str	r3, [r7, #32]
      break;
 8002278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227a:	6a3b      	ldr	r3, [r7, #32]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3728      	adds	r7, #40	; 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	bc90      	pop	{r4, r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	080050c0 	.word	0x080050c0
 800228c:	40021000 	.word	0x40021000
 8002290:	007a1200 	.word	0x007a1200
 8002294:	003d0900 	.word	0x003d0900

08002298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800229c:	4b02      	ldr	r3, [pc, #8]	; (80022a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	20000004 	.word	0x20000004

080022ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <RCC_Delay+0x34>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <RCC_Delay+0x38>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0a5b      	lsrs	r3, r3, #9
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022c8:	bf00      	nop
  }
  while (Delay --);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	60fa      	str	r2, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f9      	bne.n	80022c8 <RCC_Delay+0x1c>
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	20000004 	.word	0x20000004
 80022e4:	10624dd3 	.word	0x10624dd3

080022e8 <__errno>:
 80022e8:	4b01      	ldr	r3, [pc, #4]	; (80022f0 <__errno+0x8>)
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000010 	.word	0x20000010

080022f4 <__libc_init_array>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	2600      	movs	r6, #0
 80022f8:	4d0c      	ldr	r5, [pc, #48]	; (800232c <__libc_init_array+0x38>)
 80022fa:	4c0d      	ldr	r4, [pc, #52]	; (8002330 <__libc_init_array+0x3c>)
 80022fc:	1b64      	subs	r4, r4, r5
 80022fe:	10a4      	asrs	r4, r4, #2
 8002300:	42a6      	cmp	r6, r4
 8002302:	d109      	bne.n	8002318 <__libc_init_array+0x24>
 8002304:	f002 feba 	bl	800507c <_init>
 8002308:	2600      	movs	r6, #0
 800230a:	4d0a      	ldr	r5, [pc, #40]	; (8002334 <__libc_init_array+0x40>)
 800230c:	4c0a      	ldr	r4, [pc, #40]	; (8002338 <__libc_init_array+0x44>)
 800230e:	1b64      	subs	r4, r4, r5
 8002310:	10a4      	asrs	r4, r4, #2
 8002312:	42a6      	cmp	r6, r4
 8002314:	d105      	bne.n	8002322 <__libc_init_array+0x2e>
 8002316:	bd70      	pop	{r4, r5, r6, pc}
 8002318:	f855 3b04 	ldr.w	r3, [r5], #4
 800231c:	4798      	blx	r3
 800231e:	3601      	adds	r6, #1
 8002320:	e7ee      	b.n	8002300 <__libc_init_array+0xc>
 8002322:	f855 3b04 	ldr.w	r3, [r5], #4
 8002326:	4798      	blx	r3
 8002328:	3601      	adds	r6, #1
 800232a:	e7f2      	b.n	8002312 <__libc_init_array+0x1e>
 800232c:	080054c4 	.word	0x080054c4
 8002330:	080054c4 	.word	0x080054c4
 8002334:	080054c4 	.word	0x080054c4
 8002338:	080054c8 	.word	0x080054c8

0800233c <memset>:
 800233c:	4603      	mov	r3, r0
 800233e:	4402      	add	r2, r0
 8002340:	4293      	cmp	r3, r2
 8002342:	d100      	bne.n	8002346 <memset+0xa>
 8002344:	4770      	bx	lr
 8002346:	f803 1b01 	strb.w	r1, [r3], #1
 800234a:	e7f9      	b.n	8002340 <memset+0x4>

0800234c <__cvt>:
 800234c:	2b00      	cmp	r3, #0
 800234e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002352:	461f      	mov	r7, r3
 8002354:	bfbb      	ittet	lt
 8002356:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800235a:	461f      	movlt	r7, r3
 800235c:	2300      	movge	r3, #0
 800235e:	232d      	movlt	r3, #45	; 0x2d
 8002360:	b088      	sub	sp, #32
 8002362:	4614      	mov	r4, r2
 8002364:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002366:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002368:	7013      	strb	r3, [r2, #0]
 800236a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800236c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002370:	f023 0820 	bic.w	r8, r3, #32
 8002374:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002378:	d005      	beq.n	8002386 <__cvt+0x3a>
 800237a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800237e:	d100      	bne.n	8002382 <__cvt+0x36>
 8002380:	3501      	adds	r5, #1
 8002382:	2302      	movs	r3, #2
 8002384:	e000      	b.n	8002388 <__cvt+0x3c>
 8002386:	2303      	movs	r3, #3
 8002388:	aa07      	add	r2, sp, #28
 800238a:	9204      	str	r2, [sp, #16]
 800238c:	aa06      	add	r2, sp, #24
 800238e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002392:	e9cd 3500 	strd	r3, r5, [sp]
 8002396:	4622      	mov	r2, r4
 8002398:	463b      	mov	r3, r7
 800239a:	f000 fce5 	bl	8002d68 <_dtoa_r>
 800239e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80023a2:	4606      	mov	r6, r0
 80023a4:	d102      	bne.n	80023ac <__cvt+0x60>
 80023a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80023a8:	07db      	lsls	r3, r3, #31
 80023aa:	d522      	bpl.n	80023f2 <__cvt+0xa6>
 80023ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80023b0:	eb06 0905 	add.w	r9, r6, r5
 80023b4:	d110      	bne.n	80023d8 <__cvt+0x8c>
 80023b6:	7833      	ldrb	r3, [r6, #0]
 80023b8:	2b30      	cmp	r3, #48	; 0x30
 80023ba:	d10a      	bne.n	80023d2 <__cvt+0x86>
 80023bc:	2200      	movs	r2, #0
 80023be:	2300      	movs	r3, #0
 80023c0:	4620      	mov	r0, r4
 80023c2:	4639      	mov	r1, r7
 80023c4:	f7fe faf0 	bl	80009a8 <__aeabi_dcmpeq>
 80023c8:	b918      	cbnz	r0, 80023d2 <__cvt+0x86>
 80023ca:	f1c5 0501 	rsb	r5, r5, #1
 80023ce:	f8ca 5000 	str.w	r5, [sl]
 80023d2:	f8da 3000 	ldr.w	r3, [sl]
 80023d6:	4499      	add	r9, r3
 80023d8:	2200      	movs	r2, #0
 80023da:	2300      	movs	r3, #0
 80023dc:	4620      	mov	r0, r4
 80023de:	4639      	mov	r1, r7
 80023e0:	f7fe fae2 	bl	80009a8 <__aeabi_dcmpeq>
 80023e4:	b108      	cbz	r0, 80023ea <__cvt+0x9e>
 80023e6:	f8cd 901c 	str.w	r9, [sp, #28]
 80023ea:	2230      	movs	r2, #48	; 0x30
 80023ec:	9b07      	ldr	r3, [sp, #28]
 80023ee:	454b      	cmp	r3, r9
 80023f0:	d307      	bcc.n	8002402 <__cvt+0xb6>
 80023f2:	4630      	mov	r0, r6
 80023f4:	9b07      	ldr	r3, [sp, #28]
 80023f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80023f8:	1b9b      	subs	r3, r3, r6
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	b008      	add	sp, #32
 80023fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002402:	1c59      	adds	r1, r3, #1
 8002404:	9107      	str	r1, [sp, #28]
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e7f0      	b.n	80023ec <__cvt+0xa0>

0800240a <__exponent>:
 800240a:	4603      	mov	r3, r0
 800240c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800240e:	2900      	cmp	r1, #0
 8002410:	f803 2b02 	strb.w	r2, [r3], #2
 8002414:	bfb6      	itet	lt
 8002416:	222d      	movlt	r2, #45	; 0x2d
 8002418:	222b      	movge	r2, #43	; 0x2b
 800241a:	4249      	neglt	r1, r1
 800241c:	2909      	cmp	r1, #9
 800241e:	7042      	strb	r2, [r0, #1]
 8002420:	dd2b      	ble.n	800247a <__exponent+0x70>
 8002422:	f10d 0407 	add.w	r4, sp, #7
 8002426:	46a4      	mov	ip, r4
 8002428:	270a      	movs	r7, #10
 800242a:	fb91 f6f7 	sdiv	r6, r1, r7
 800242e:	460a      	mov	r2, r1
 8002430:	46a6      	mov	lr, r4
 8002432:	fb07 1516 	mls	r5, r7, r6, r1
 8002436:	2a63      	cmp	r2, #99	; 0x63
 8002438:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800243c:	4631      	mov	r1, r6
 800243e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002442:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002446:	dcf0      	bgt.n	800242a <__exponent+0x20>
 8002448:	3130      	adds	r1, #48	; 0x30
 800244a:	f1ae 0502 	sub.w	r5, lr, #2
 800244e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002452:	4629      	mov	r1, r5
 8002454:	1c44      	adds	r4, r0, #1
 8002456:	4561      	cmp	r1, ip
 8002458:	d30a      	bcc.n	8002470 <__exponent+0x66>
 800245a:	f10d 0209 	add.w	r2, sp, #9
 800245e:	eba2 020e 	sub.w	r2, r2, lr
 8002462:	4565      	cmp	r5, ip
 8002464:	bf88      	it	hi
 8002466:	2200      	movhi	r2, #0
 8002468:	4413      	add	r3, r2
 800246a:	1a18      	subs	r0, r3, r0
 800246c:	b003      	add	sp, #12
 800246e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002470:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002474:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002478:	e7ed      	b.n	8002456 <__exponent+0x4c>
 800247a:	2330      	movs	r3, #48	; 0x30
 800247c:	3130      	adds	r1, #48	; 0x30
 800247e:	7083      	strb	r3, [r0, #2]
 8002480:	70c1      	strb	r1, [r0, #3]
 8002482:	1d03      	adds	r3, r0, #4
 8002484:	e7f1      	b.n	800246a <__exponent+0x60>
	...

08002488 <_printf_float>:
 8002488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800248c:	b091      	sub	sp, #68	; 0x44
 800248e:	460c      	mov	r4, r1
 8002490:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002494:	4616      	mov	r6, r2
 8002496:	461f      	mov	r7, r3
 8002498:	4605      	mov	r5, r0
 800249a:	f001 fa53 	bl	8003944 <_localeconv_r>
 800249e:	6803      	ldr	r3, [r0, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	9309      	str	r3, [sp, #36]	; 0x24
 80024a4:	f7fd fe54 	bl	8000150 <strlen>
 80024a8:	2300      	movs	r3, #0
 80024aa:	930e      	str	r3, [sp, #56]	; 0x38
 80024ac:	f8d8 3000 	ldr.w	r3, [r8]
 80024b0:	900a      	str	r0, [sp, #40]	; 0x28
 80024b2:	3307      	adds	r3, #7
 80024b4:	f023 0307 	bic.w	r3, r3, #7
 80024b8:	f103 0208 	add.w	r2, r3, #8
 80024bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80024c0:	f8d4 b000 	ldr.w	fp, [r4]
 80024c4:	f8c8 2000 	str.w	r2, [r8]
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80024d0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80024d4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80024d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80024da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024de:	4640      	mov	r0, r8
 80024e0:	4b9c      	ldr	r3, [pc, #624]	; (8002754 <_printf_float+0x2cc>)
 80024e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80024e4:	f7fe fa92 	bl	8000a0c <__aeabi_dcmpun>
 80024e8:	bb70      	cbnz	r0, 8002548 <_printf_float+0xc0>
 80024ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024ee:	4640      	mov	r0, r8
 80024f0:	4b98      	ldr	r3, [pc, #608]	; (8002754 <_printf_float+0x2cc>)
 80024f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80024f4:	f7fe fa6c 	bl	80009d0 <__aeabi_dcmple>
 80024f8:	bb30      	cbnz	r0, 8002548 <_printf_float+0xc0>
 80024fa:	2200      	movs	r2, #0
 80024fc:	2300      	movs	r3, #0
 80024fe:	4640      	mov	r0, r8
 8002500:	4651      	mov	r1, sl
 8002502:	f7fe fa5b 	bl	80009bc <__aeabi_dcmplt>
 8002506:	b110      	cbz	r0, 800250e <_printf_float+0x86>
 8002508:	232d      	movs	r3, #45	; 0x2d
 800250a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800250e:	4b92      	ldr	r3, [pc, #584]	; (8002758 <_printf_float+0x2d0>)
 8002510:	4892      	ldr	r0, [pc, #584]	; (800275c <_printf_float+0x2d4>)
 8002512:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002516:	bf94      	ite	ls
 8002518:	4698      	movls	r8, r3
 800251a:	4680      	movhi	r8, r0
 800251c:	2303      	movs	r3, #3
 800251e:	f04f 0a00 	mov.w	sl, #0
 8002522:	6123      	str	r3, [r4, #16]
 8002524:	f02b 0304 	bic.w	r3, fp, #4
 8002528:	6023      	str	r3, [r4, #0]
 800252a:	4633      	mov	r3, r6
 800252c:	4621      	mov	r1, r4
 800252e:	4628      	mov	r0, r5
 8002530:	9700      	str	r7, [sp, #0]
 8002532:	aa0f      	add	r2, sp, #60	; 0x3c
 8002534:	f000 f9d4 	bl	80028e0 <_printf_common>
 8002538:	3001      	adds	r0, #1
 800253a:	f040 8090 	bne.w	800265e <_printf_float+0x1d6>
 800253e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002542:	b011      	add	sp, #68	; 0x44
 8002544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002548:	4642      	mov	r2, r8
 800254a:	4653      	mov	r3, sl
 800254c:	4640      	mov	r0, r8
 800254e:	4651      	mov	r1, sl
 8002550:	f7fe fa5c 	bl	8000a0c <__aeabi_dcmpun>
 8002554:	b148      	cbz	r0, 800256a <_printf_float+0xe2>
 8002556:	f1ba 0f00 	cmp.w	sl, #0
 800255a:	bfb8      	it	lt
 800255c:	232d      	movlt	r3, #45	; 0x2d
 800255e:	4880      	ldr	r0, [pc, #512]	; (8002760 <_printf_float+0x2d8>)
 8002560:	bfb8      	it	lt
 8002562:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002566:	4b7f      	ldr	r3, [pc, #508]	; (8002764 <_printf_float+0x2dc>)
 8002568:	e7d3      	b.n	8002512 <_printf_float+0x8a>
 800256a:	6863      	ldr	r3, [r4, #4]
 800256c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	d142      	bne.n	80025fa <_printf_float+0x172>
 8002574:	2306      	movs	r3, #6
 8002576:	6063      	str	r3, [r4, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	9206      	str	r2, [sp, #24]
 800257c:	aa0e      	add	r2, sp, #56	; 0x38
 800257e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002582:	aa0d      	add	r2, sp, #52	; 0x34
 8002584:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002588:	9203      	str	r2, [sp, #12]
 800258a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800258e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002592:	6023      	str	r3, [r4, #0]
 8002594:	6863      	ldr	r3, [r4, #4]
 8002596:	4642      	mov	r2, r8
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	4628      	mov	r0, r5
 800259c:	4653      	mov	r3, sl
 800259e:	910b      	str	r1, [sp, #44]	; 0x2c
 80025a0:	f7ff fed4 	bl	800234c <__cvt>
 80025a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80025a6:	4680      	mov	r8, r0
 80025a8:	2947      	cmp	r1, #71	; 0x47
 80025aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80025ac:	d108      	bne.n	80025c0 <_printf_float+0x138>
 80025ae:	1cc8      	adds	r0, r1, #3
 80025b0:	db02      	blt.n	80025b8 <_printf_float+0x130>
 80025b2:	6863      	ldr	r3, [r4, #4]
 80025b4:	4299      	cmp	r1, r3
 80025b6:	dd40      	ble.n	800263a <_printf_float+0x1b2>
 80025b8:	f1a9 0902 	sub.w	r9, r9, #2
 80025bc:	fa5f f989 	uxtb.w	r9, r9
 80025c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80025c4:	d81f      	bhi.n	8002606 <_printf_float+0x17e>
 80025c6:	464a      	mov	r2, r9
 80025c8:	3901      	subs	r1, #1
 80025ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80025ce:	910d      	str	r1, [sp, #52]	; 0x34
 80025d0:	f7ff ff1b 	bl	800240a <__exponent>
 80025d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025d6:	4682      	mov	sl, r0
 80025d8:	1813      	adds	r3, r2, r0
 80025da:	2a01      	cmp	r2, #1
 80025dc:	6123      	str	r3, [r4, #16]
 80025de:	dc02      	bgt.n	80025e6 <_printf_float+0x15e>
 80025e0:	6822      	ldr	r2, [r4, #0]
 80025e2:	07d2      	lsls	r2, r2, #31
 80025e4:	d501      	bpl.n	80025ea <_printf_float+0x162>
 80025e6:	3301      	adds	r3, #1
 80025e8:	6123      	str	r3, [r4, #16]
 80025ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d09b      	beq.n	800252a <_printf_float+0xa2>
 80025f2:	232d      	movs	r3, #45	; 0x2d
 80025f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025f8:	e797      	b.n	800252a <_printf_float+0xa2>
 80025fa:	2947      	cmp	r1, #71	; 0x47
 80025fc:	d1bc      	bne.n	8002578 <_printf_float+0xf0>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1ba      	bne.n	8002578 <_printf_float+0xf0>
 8002602:	2301      	movs	r3, #1
 8002604:	e7b7      	b.n	8002576 <_printf_float+0xee>
 8002606:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800260a:	d118      	bne.n	800263e <_printf_float+0x1b6>
 800260c:	2900      	cmp	r1, #0
 800260e:	6863      	ldr	r3, [r4, #4]
 8002610:	dd0b      	ble.n	800262a <_printf_float+0x1a2>
 8002612:	6121      	str	r1, [r4, #16]
 8002614:	b913      	cbnz	r3, 800261c <_printf_float+0x194>
 8002616:	6822      	ldr	r2, [r4, #0]
 8002618:	07d0      	lsls	r0, r2, #31
 800261a:	d502      	bpl.n	8002622 <_printf_float+0x19a>
 800261c:	3301      	adds	r3, #1
 800261e:	440b      	add	r3, r1
 8002620:	6123      	str	r3, [r4, #16]
 8002622:	f04f 0a00 	mov.w	sl, #0
 8002626:	65a1      	str	r1, [r4, #88]	; 0x58
 8002628:	e7df      	b.n	80025ea <_printf_float+0x162>
 800262a:	b913      	cbnz	r3, 8002632 <_printf_float+0x1aa>
 800262c:	6822      	ldr	r2, [r4, #0]
 800262e:	07d2      	lsls	r2, r2, #31
 8002630:	d501      	bpl.n	8002636 <_printf_float+0x1ae>
 8002632:	3302      	adds	r3, #2
 8002634:	e7f4      	b.n	8002620 <_printf_float+0x198>
 8002636:	2301      	movs	r3, #1
 8002638:	e7f2      	b.n	8002620 <_printf_float+0x198>
 800263a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800263e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002640:	4299      	cmp	r1, r3
 8002642:	db05      	blt.n	8002650 <_printf_float+0x1c8>
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	6121      	str	r1, [r4, #16]
 8002648:	07d8      	lsls	r0, r3, #31
 800264a:	d5ea      	bpl.n	8002622 <_printf_float+0x19a>
 800264c:	1c4b      	adds	r3, r1, #1
 800264e:	e7e7      	b.n	8002620 <_printf_float+0x198>
 8002650:	2900      	cmp	r1, #0
 8002652:	bfcc      	ite	gt
 8002654:	2201      	movgt	r2, #1
 8002656:	f1c1 0202 	rsble	r2, r1, #2
 800265a:	4413      	add	r3, r2
 800265c:	e7e0      	b.n	8002620 <_printf_float+0x198>
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	055a      	lsls	r2, r3, #21
 8002662:	d407      	bmi.n	8002674 <_printf_float+0x1ec>
 8002664:	6923      	ldr	r3, [r4, #16]
 8002666:	4642      	mov	r2, r8
 8002668:	4631      	mov	r1, r6
 800266a:	4628      	mov	r0, r5
 800266c:	47b8      	blx	r7
 800266e:	3001      	adds	r0, #1
 8002670:	d12b      	bne.n	80026ca <_printf_float+0x242>
 8002672:	e764      	b.n	800253e <_printf_float+0xb6>
 8002674:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002678:	f240 80dd 	bls.w	8002836 <_printf_float+0x3ae>
 800267c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002680:	2200      	movs	r2, #0
 8002682:	2300      	movs	r3, #0
 8002684:	f7fe f990 	bl	80009a8 <__aeabi_dcmpeq>
 8002688:	2800      	cmp	r0, #0
 800268a:	d033      	beq.n	80026f4 <_printf_float+0x26c>
 800268c:	2301      	movs	r3, #1
 800268e:	4631      	mov	r1, r6
 8002690:	4628      	mov	r0, r5
 8002692:	4a35      	ldr	r2, [pc, #212]	; (8002768 <_printf_float+0x2e0>)
 8002694:	47b8      	blx	r7
 8002696:	3001      	adds	r0, #1
 8002698:	f43f af51 	beq.w	800253e <_printf_float+0xb6>
 800269c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80026a0:	429a      	cmp	r2, r3
 80026a2:	db02      	blt.n	80026aa <_printf_float+0x222>
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	07d8      	lsls	r0, r3, #31
 80026a8:	d50f      	bpl.n	80026ca <_printf_float+0x242>
 80026aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80026ae:	4631      	mov	r1, r6
 80026b0:	4628      	mov	r0, r5
 80026b2:	47b8      	blx	r7
 80026b4:	3001      	adds	r0, #1
 80026b6:	f43f af42 	beq.w	800253e <_printf_float+0xb6>
 80026ba:	f04f 0800 	mov.w	r8, #0
 80026be:	f104 091a 	add.w	r9, r4, #26
 80026c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80026c4:	3b01      	subs	r3, #1
 80026c6:	4543      	cmp	r3, r8
 80026c8:	dc09      	bgt.n	80026de <_printf_float+0x256>
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	079b      	lsls	r3, r3, #30
 80026ce:	f100 8102 	bmi.w	80028d6 <_printf_float+0x44e>
 80026d2:	68e0      	ldr	r0, [r4, #12]
 80026d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80026d6:	4298      	cmp	r0, r3
 80026d8:	bfb8      	it	lt
 80026da:	4618      	movlt	r0, r3
 80026dc:	e731      	b.n	8002542 <_printf_float+0xba>
 80026de:	2301      	movs	r3, #1
 80026e0:	464a      	mov	r2, r9
 80026e2:	4631      	mov	r1, r6
 80026e4:	4628      	mov	r0, r5
 80026e6:	47b8      	blx	r7
 80026e8:	3001      	adds	r0, #1
 80026ea:	f43f af28 	beq.w	800253e <_printf_float+0xb6>
 80026ee:	f108 0801 	add.w	r8, r8, #1
 80026f2:	e7e6      	b.n	80026c2 <_printf_float+0x23a>
 80026f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	dc38      	bgt.n	800276c <_printf_float+0x2e4>
 80026fa:	2301      	movs	r3, #1
 80026fc:	4631      	mov	r1, r6
 80026fe:	4628      	mov	r0, r5
 8002700:	4a19      	ldr	r2, [pc, #100]	; (8002768 <_printf_float+0x2e0>)
 8002702:	47b8      	blx	r7
 8002704:	3001      	adds	r0, #1
 8002706:	f43f af1a 	beq.w	800253e <_printf_float+0xb6>
 800270a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800270e:	4313      	orrs	r3, r2
 8002710:	d102      	bne.n	8002718 <_printf_float+0x290>
 8002712:	6823      	ldr	r3, [r4, #0]
 8002714:	07d9      	lsls	r1, r3, #31
 8002716:	d5d8      	bpl.n	80026ca <_printf_float+0x242>
 8002718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800271c:	4631      	mov	r1, r6
 800271e:	4628      	mov	r0, r5
 8002720:	47b8      	blx	r7
 8002722:	3001      	adds	r0, #1
 8002724:	f43f af0b 	beq.w	800253e <_printf_float+0xb6>
 8002728:	f04f 0900 	mov.w	r9, #0
 800272c:	f104 0a1a 	add.w	sl, r4, #26
 8002730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002732:	425b      	negs	r3, r3
 8002734:	454b      	cmp	r3, r9
 8002736:	dc01      	bgt.n	800273c <_printf_float+0x2b4>
 8002738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800273a:	e794      	b.n	8002666 <_printf_float+0x1de>
 800273c:	2301      	movs	r3, #1
 800273e:	4652      	mov	r2, sl
 8002740:	4631      	mov	r1, r6
 8002742:	4628      	mov	r0, r5
 8002744:	47b8      	blx	r7
 8002746:	3001      	adds	r0, #1
 8002748:	f43f aef9 	beq.w	800253e <_printf_float+0xb6>
 800274c:	f109 0901 	add.w	r9, r9, #1
 8002750:	e7ee      	b.n	8002730 <_printf_float+0x2a8>
 8002752:	bf00      	nop
 8002754:	7fefffff 	.word	0x7fefffff
 8002758:	080050e4 	.word	0x080050e4
 800275c:	080050e8 	.word	0x080050e8
 8002760:	080050f0 	.word	0x080050f0
 8002764:	080050ec 	.word	0x080050ec
 8002768:	080050f4 	.word	0x080050f4
 800276c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800276e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002770:	429a      	cmp	r2, r3
 8002772:	bfa8      	it	ge
 8002774:	461a      	movge	r2, r3
 8002776:	2a00      	cmp	r2, #0
 8002778:	4691      	mov	r9, r2
 800277a:	dc37      	bgt.n	80027ec <_printf_float+0x364>
 800277c:	f04f 0b00 	mov.w	fp, #0
 8002780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002784:	f104 021a 	add.w	r2, r4, #26
 8002788:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800278c:	ebaa 0309 	sub.w	r3, sl, r9
 8002790:	455b      	cmp	r3, fp
 8002792:	dc33      	bgt.n	80027fc <_printf_float+0x374>
 8002794:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002798:	429a      	cmp	r2, r3
 800279a:	db3b      	blt.n	8002814 <_printf_float+0x38c>
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	07da      	lsls	r2, r3, #31
 80027a0:	d438      	bmi.n	8002814 <_printf_float+0x38c>
 80027a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80027a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80027a6:	eba2 030a 	sub.w	r3, r2, sl
 80027aa:	eba2 0901 	sub.w	r9, r2, r1
 80027ae:	4599      	cmp	r9, r3
 80027b0:	bfa8      	it	ge
 80027b2:	4699      	movge	r9, r3
 80027b4:	f1b9 0f00 	cmp.w	r9, #0
 80027b8:	dc34      	bgt.n	8002824 <_printf_float+0x39c>
 80027ba:	f04f 0800 	mov.w	r8, #0
 80027be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80027c2:	f104 0a1a 	add.w	sl, r4, #26
 80027c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	eba3 0309 	sub.w	r3, r3, r9
 80027d0:	4543      	cmp	r3, r8
 80027d2:	f77f af7a 	ble.w	80026ca <_printf_float+0x242>
 80027d6:	2301      	movs	r3, #1
 80027d8:	4652      	mov	r2, sl
 80027da:	4631      	mov	r1, r6
 80027dc:	4628      	mov	r0, r5
 80027de:	47b8      	blx	r7
 80027e0:	3001      	adds	r0, #1
 80027e2:	f43f aeac 	beq.w	800253e <_printf_float+0xb6>
 80027e6:	f108 0801 	add.w	r8, r8, #1
 80027ea:	e7ec      	b.n	80027c6 <_printf_float+0x33e>
 80027ec:	4613      	mov	r3, r2
 80027ee:	4631      	mov	r1, r6
 80027f0:	4642      	mov	r2, r8
 80027f2:	4628      	mov	r0, r5
 80027f4:	47b8      	blx	r7
 80027f6:	3001      	adds	r0, #1
 80027f8:	d1c0      	bne.n	800277c <_printf_float+0x2f4>
 80027fa:	e6a0      	b.n	800253e <_printf_float+0xb6>
 80027fc:	2301      	movs	r3, #1
 80027fe:	4631      	mov	r1, r6
 8002800:	4628      	mov	r0, r5
 8002802:	920b      	str	r2, [sp, #44]	; 0x2c
 8002804:	47b8      	blx	r7
 8002806:	3001      	adds	r0, #1
 8002808:	f43f ae99 	beq.w	800253e <_printf_float+0xb6>
 800280c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800280e:	f10b 0b01 	add.w	fp, fp, #1
 8002812:	e7b9      	b.n	8002788 <_printf_float+0x300>
 8002814:	4631      	mov	r1, r6
 8002816:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800281a:	4628      	mov	r0, r5
 800281c:	47b8      	blx	r7
 800281e:	3001      	adds	r0, #1
 8002820:	d1bf      	bne.n	80027a2 <_printf_float+0x31a>
 8002822:	e68c      	b.n	800253e <_printf_float+0xb6>
 8002824:	464b      	mov	r3, r9
 8002826:	4631      	mov	r1, r6
 8002828:	4628      	mov	r0, r5
 800282a:	eb08 020a 	add.w	r2, r8, sl
 800282e:	47b8      	blx	r7
 8002830:	3001      	adds	r0, #1
 8002832:	d1c2      	bne.n	80027ba <_printf_float+0x332>
 8002834:	e683      	b.n	800253e <_printf_float+0xb6>
 8002836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002838:	2a01      	cmp	r2, #1
 800283a:	dc01      	bgt.n	8002840 <_printf_float+0x3b8>
 800283c:	07db      	lsls	r3, r3, #31
 800283e:	d537      	bpl.n	80028b0 <_printf_float+0x428>
 8002840:	2301      	movs	r3, #1
 8002842:	4642      	mov	r2, r8
 8002844:	4631      	mov	r1, r6
 8002846:	4628      	mov	r0, r5
 8002848:	47b8      	blx	r7
 800284a:	3001      	adds	r0, #1
 800284c:	f43f ae77 	beq.w	800253e <_printf_float+0xb6>
 8002850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002854:	4631      	mov	r1, r6
 8002856:	4628      	mov	r0, r5
 8002858:	47b8      	blx	r7
 800285a:	3001      	adds	r0, #1
 800285c:	f43f ae6f 	beq.w	800253e <_printf_float+0xb6>
 8002860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002864:	2200      	movs	r2, #0
 8002866:	2300      	movs	r3, #0
 8002868:	f7fe f89e 	bl	80009a8 <__aeabi_dcmpeq>
 800286c:	b9d8      	cbnz	r0, 80028a6 <_printf_float+0x41e>
 800286e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002870:	f108 0201 	add.w	r2, r8, #1
 8002874:	3b01      	subs	r3, #1
 8002876:	4631      	mov	r1, r6
 8002878:	4628      	mov	r0, r5
 800287a:	47b8      	blx	r7
 800287c:	3001      	adds	r0, #1
 800287e:	d10e      	bne.n	800289e <_printf_float+0x416>
 8002880:	e65d      	b.n	800253e <_printf_float+0xb6>
 8002882:	2301      	movs	r3, #1
 8002884:	464a      	mov	r2, r9
 8002886:	4631      	mov	r1, r6
 8002888:	4628      	mov	r0, r5
 800288a:	47b8      	blx	r7
 800288c:	3001      	adds	r0, #1
 800288e:	f43f ae56 	beq.w	800253e <_printf_float+0xb6>
 8002892:	f108 0801 	add.w	r8, r8, #1
 8002896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002898:	3b01      	subs	r3, #1
 800289a:	4543      	cmp	r3, r8
 800289c:	dcf1      	bgt.n	8002882 <_printf_float+0x3fa>
 800289e:	4653      	mov	r3, sl
 80028a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80028a4:	e6e0      	b.n	8002668 <_printf_float+0x1e0>
 80028a6:	f04f 0800 	mov.w	r8, #0
 80028aa:	f104 091a 	add.w	r9, r4, #26
 80028ae:	e7f2      	b.n	8002896 <_printf_float+0x40e>
 80028b0:	2301      	movs	r3, #1
 80028b2:	4642      	mov	r2, r8
 80028b4:	e7df      	b.n	8002876 <_printf_float+0x3ee>
 80028b6:	2301      	movs	r3, #1
 80028b8:	464a      	mov	r2, r9
 80028ba:	4631      	mov	r1, r6
 80028bc:	4628      	mov	r0, r5
 80028be:	47b8      	blx	r7
 80028c0:	3001      	adds	r0, #1
 80028c2:	f43f ae3c 	beq.w	800253e <_printf_float+0xb6>
 80028c6:	f108 0801 	add.w	r8, r8, #1
 80028ca:	68e3      	ldr	r3, [r4, #12]
 80028cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80028ce:	1a5b      	subs	r3, r3, r1
 80028d0:	4543      	cmp	r3, r8
 80028d2:	dcf0      	bgt.n	80028b6 <_printf_float+0x42e>
 80028d4:	e6fd      	b.n	80026d2 <_printf_float+0x24a>
 80028d6:	f04f 0800 	mov.w	r8, #0
 80028da:	f104 0919 	add.w	r9, r4, #25
 80028de:	e7f4      	b.n	80028ca <_printf_float+0x442>

080028e0 <_printf_common>:
 80028e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028e4:	4616      	mov	r6, r2
 80028e6:	4699      	mov	r9, r3
 80028e8:	688a      	ldr	r2, [r1, #8]
 80028ea:	690b      	ldr	r3, [r1, #16]
 80028ec:	4607      	mov	r7, r0
 80028ee:	4293      	cmp	r3, r2
 80028f0:	bfb8      	it	lt
 80028f2:	4613      	movlt	r3, r2
 80028f4:	6033      	str	r3, [r6, #0]
 80028f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028fa:	460c      	mov	r4, r1
 80028fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002900:	b10a      	cbz	r2, 8002906 <_printf_common+0x26>
 8002902:	3301      	adds	r3, #1
 8002904:	6033      	str	r3, [r6, #0]
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	0699      	lsls	r1, r3, #26
 800290a:	bf42      	ittt	mi
 800290c:	6833      	ldrmi	r3, [r6, #0]
 800290e:	3302      	addmi	r3, #2
 8002910:	6033      	strmi	r3, [r6, #0]
 8002912:	6825      	ldr	r5, [r4, #0]
 8002914:	f015 0506 	ands.w	r5, r5, #6
 8002918:	d106      	bne.n	8002928 <_printf_common+0x48>
 800291a:	f104 0a19 	add.w	sl, r4, #25
 800291e:	68e3      	ldr	r3, [r4, #12]
 8002920:	6832      	ldr	r2, [r6, #0]
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	42ab      	cmp	r3, r5
 8002926:	dc28      	bgt.n	800297a <_printf_common+0x9a>
 8002928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800292c:	1e13      	subs	r3, r2, #0
 800292e:	6822      	ldr	r2, [r4, #0]
 8002930:	bf18      	it	ne
 8002932:	2301      	movne	r3, #1
 8002934:	0692      	lsls	r2, r2, #26
 8002936:	d42d      	bmi.n	8002994 <_printf_common+0xb4>
 8002938:	4649      	mov	r1, r9
 800293a:	4638      	mov	r0, r7
 800293c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002940:	47c0      	blx	r8
 8002942:	3001      	adds	r0, #1
 8002944:	d020      	beq.n	8002988 <_printf_common+0xa8>
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	68e5      	ldr	r5, [r4, #12]
 800294a:	f003 0306 	and.w	r3, r3, #6
 800294e:	2b04      	cmp	r3, #4
 8002950:	bf18      	it	ne
 8002952:	2500      	movne	r5, #0
 8002954:	6832      	ldr	r2, [r6, #0]
 8002956:	f04f 0600 	mov.w	r6, #0
 800295a:	68a3      	ldr	r3, [r4, #8]
 800295c:	bf08      	it	eq
 800295e:	1aad      	subeq	r5, r5, r2
 8002960:	6922      	ldr	r2, [r4, #16]
 8002962:	bf08      	it	eq
 8002964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002968:	4293      	cmp	r3, r2
 800296a:	bfc4      	itt	gt
 800296c:	1a9b      	subgt	r3, r3, r2
 800296e:	18ed      	addgt	r5, r5, r3
 8002970:	341a      	adds	r4, #26
 8002972:	42b5      	cmp	r5, r6
 8002974:	d11a      	bne.n	80029ac <_printf_common+0xcc>
 8002976:	2000      	movs	r0, #0
 8002978:	e008      	b.n	800298c <_printf_common+0xac>
 800297a:	2301      	movs	r3, #1
 800297c:	4652      	mov	r2, sl
 800297e:	4649      	mov	r1, r9
 8002980:	4638      	mov	r0, r7
 8002982:	47c0      	blx	r8
 8002984:	3001      	adds	r0, #1
 8002986:	d103      	bne.n	8002990 <_printf_common+0xb0>
 8002988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800298c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002990:	3501      	adds	r5, #1
 8002992:	e7c4      	b.n	800291e <_printf_common+0x3e>
 8002994:	2030      	movs	r0, #48	; 0x30
 8002996:	18e1      	adds	r1, r4, r3
 8002998:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029a2:	4422      	add	r2, r4
 80029a4:	3302      	adds	r3, #2
 80029a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029aa:	e7c5      	b.n	8002938 <_printf_common+0x58>
 80029ac:	2301      	movs	r3, #1
 80029ae:	4622      	mov	r2, r4
 80029b0:	4649      	mov	r1, r9
 80029b2:	4638      	mov	r0, r7
 80029b4:	47c0      	blx	r8
 80029b6:	3001      	adds	r0, #1
 80029b8:	d0e6      	beq.n	8002988 <_printf_common+0xa8>
 80029ba:	3601      	adds	r6, #1
 80029bc:	e7d9      	b.n	8002972 <_printf_common+0x92>
	...

080029c0 <_printf_i>:
 80029c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029c4:	460c      	mov	r4, r1
 80029c6:	7e27      	ldrb	r7, [r4, #24]
 80029c8:	4691      	mov	r9, r2
 80029ca:	2f78      	cmp	r7, #120	; 0x78
 80029cc:	4680      	mov	r8, r0
 80029ce:	469a      	mov	sl, r3
 80029d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80029d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029d6:	d807      	bhi.n	80029e8 <_printf_i+0x28>
 80029d8:	2f62      	cmp	r7, #98	; 0x62
 80029da:	d80a      	bhi.n	80029f2 <_printf_i+0x32>
 80029dc:	2f00      	cmp	r7, #0
 80029de:	f000 80d9 	beq.w	8002b94 <_printf_i+0x1d4>
 80029e2:	2f58      	cmp	r7, #88	; 0x58
 80029e4:	f000 80a4 	beq.w	8002b30 <_printf_i+0x170>
 80029e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80029ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80029f0:	e03a      	b.n	8002a68 <_printf_i+0xa8>
 80029f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80029f6:	2b15      	cmp	r3, #21
 80029f8:	d8f6      	bhi.n	80029e8 <_printf_i+0x28>
 80029fa:	a001      	add	r0, pc, #4	; (adr r0, 8002a00 <_printf_i+0x40>)
 80029fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002a00:	08002a59 	.word	0x08002a59
 8002a04:	08002a6d 	.word	0x08002a6d
 8002a08:	080029e9 	.word	0x080029e9
 8002a0c:	080029e9 	.word	0x080029e9
 8002a10:	080029e9 	.word	0x080029e9
 8002a14:	080029e9 	.word	0x080029e9
 8002a18:	08002a6d 	.word	0x08002a6d
 8002a1c:	080029e9 	.word	0x080029e9
 8002a20:	080029e9 	.word	0x080029e9
 8002a24:	080029e9 	.word	0x080029e9
 8002a28:	080029e9 	.word	0x080029e9
 8002a2c:	08002b7b 	.word	0x08002b7b
 8002a30:	08002a9d 	.word	0x08002a9d
 8002a34:	08002b5d 	.word	0x08002b5d
 8002a38:	080029e9 	.word	0x080029e9
 8002a3c:	080029e9 	.word	0x080029e9
 8002a40:	08002b9d 	.word	0x08002b9d
 8002a44:	080029e9 	.word	0x080029e9
 8002a48:	08002a9d 	.word	0x08002a9d
 8002a4c:	080029e9 	.word	0x080029e9
 8002a50:	080029e9 	.word	0x080029e9
 8002a54:	08002b65 	.word	0x08002b65
 8002a58:	680b      	ldr	r3, [r1, #0]
 8002a5a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002a5e:	1d1a      	adds	r2, r3, #4
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	600a      	str	r2, [r1, #0]
 8002a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0a4      	b.n	8002bb6 <_printf_i+0x1f6>
 8002a6c:	6825      	ldr	r5, [r4, #0]
 8002a6e:	6808      	ldr	r0, [r1, #0]
 8002a70:	062e      	lsls	r6, r5, #24
 8002a72:	f100 0304 	add.w	r3, r0, #4
 8002a76:	d50a      	bpl.n	8002a8e <_printf_i+0xce>
 8002a78:	6805      	ldr	r5, [r0, #0]
 8002a7a:	600b      	str	r3, [r1, #0]
 8002a7c:	2d00      	cmp	r5, #0
 8002a7e:	da03      	bge.n	8002a88 <_printf_i+0xc8>
 8002a80:	232d      	movs	r3, #45	; 0x2d
 8002a82:	426d      	negs	r5, r5
 8002a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a88:	230a      	movs	r3, #10
 8002a8a:	485e      	ldr	r0, [pc, #376]	; (8002c04 <_printf_i+0x244>)
 8002a8c:	e019      	b.n	8002ac2 <_printf_i+0x102>
 8002a8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002a92:	6805      	ldr	r5, [r0, #0]
 8002a94:	600b      	str	r3, [r1, #0]
 8002a96:	bf18      	it	ne
 8002a98:	b22d      	sxthne	r5, r5
 8002a9a:	e7ef      	b.n	8002a7c <_printf_i+0xbc>
 8002a9c:	680b      	ldr	r3, [r1, #0]
 8002a9e:	6825      	ldr	r5, [r4, #0]
 8002aa0:	1d18      	adds	r0, r3, #4
 8002aa2:	6008      	str	r0, [r1, #0]
 8002aa4:	0628      	lsls	r0, r5, #24
 8002aa6:	d501      	bpl.n	8002aac <_printf_i+0xec>
 8002aa8:	681d      	ldr	r5, [r3, #0]
 8002aaa:	e002      	b.n	8002ab2 <_printf_i+0xf2>
 8002aac:	0669      	lsls	r1, r5, #25
 8002aae:	d5fb      	bpl.n	8002aa8 <_printf_i+0xe8>
 8002ab0:	881d      	ldrh	r5, [r3, #0]
 8002ab2:	2f6f      	cmp	r7, #111	; 0x6f
 8002ab4:	bf0c      	ite	eq
 8002ab6:	2308      	moveq	r3, #8
 8002ab8:	230a      	movne	r3, #10
 8002aba:	4852      	ldr	r0, [pc, #328]	; (8002c04 <_printf_i+0x244>)
 8002abc:	2100      	movs	r1, #0
 8002abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ac2:	6866      	ldr	r6, [r4, #4]
 8002ac4:	2e00      	cmp	r6, #0
 8002ac6:	bfa8      	it	ge
 8002ac8:	6821      	ldrge	r1, [r4, #0]
 8002aca:	60a6      	str	r6, [r4, #8]
 8002acc:	bfa4      	itt	ge
 8002ace:	f021 0104 	bicge.w	r1, r1, #4
 8002ad2:	6021      	strge	r1, [r4, #0]
 8002ad4:	b90d      	cbnz	r5, 8002ada <_printf_i+0x11a>
 8002ad6:	2e00      	cmp	r6, #0
 8002ad8:	d04d      	beq.n	8002b76 <_printf_i+0x1b6>
 8002ada:	4616      	mov	r6, r2
 8002adc:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ae0:	fb03 5711 	mls	r7, r3, r1, r5
 8002ae4:	5dc7      	ldrb	r7, [r0, r7]
 8002ae6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002aea:	462f      	mov	r7, r5
 8002aec:	42bb      	cmp	r3, r7
 8002aee:	460d      	mov	r5, r1
 8002af0:	d9f4      	bls.n	8002adc <_printf_i+0x11c>
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d10b      	bne.n	8002b0e <_printf_i+0x14e>
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	07df      	lsls	r7, r3, #31
 8002afa:	d508      	bpl.n	8002b0e <_printf_i+0x14e>
 8002afc:	6923      	ldr	r3, [r4, #16]
 8002afe:	6861      	ldr	r1, [r4, #4]
 8002b00:	4299      	cmp	r1, r3
 8002b02:	bfde      	ittt	le
 8002b04:	2330      	movle	r3, #48	; 0x30
 8002b06:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b0a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002b0e:	1b92      	subs	r2, r2, r6
 8002b10:	6122      	str	r2, [r4, #16]
 8002b12:	464b      	mov	r3, r9
 8002b14:	4621      	mov	r1, r4
 8002b16:	4640      	mov	r0, r8
 8002b18:	f8cd a000 	str.w	sl, [sp]
 8002b1c:	aa03      	add	r2, sp, #12
 8002b1e:	f7ff fedf 	bl	80028e0 <_printf_common>
 8002b22:	3001      	adds	r0, #1
 8002b24:	d14c      	bne.n	8002bc0 <_printf_i+0x200>
 8002b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b2a:	b004      	add	sp, #16
 8002b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b30:	4834      	ldr	r0, [pc, #208]	; (8002c04 <_printf_i+0x244>)
 8002b32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002b36:	680e      	ldr	r6, [r1, #0]
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002b3e:	061f      	lsls	r7, r3, #24
 8002b40:	600e      	str	r6, [r1, #0]
 8002b42:	d514      	bpl.n	8002b6e <_printf_i+0x1ae>
 8002b44:	07d9      	lsls	r1, r3, #31
 8002b46:	bf44      	itt	mi
 8002b48:	f043 0320 	orrmi.w	r3, r3, #32
 8002b4c:	6023      	strmi	r3, [r4, #0]
 8002b4e:	b91d      	cbnz	r5, 8002b58 <_printf_i+0x198>
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	f023 0320 	bic.w	r3, r3, #32
 8002b56:	6023      	str	r3, [r4, #0]
 8002b58:	2310      	movs	r3, #16
 8002b5a:	e7af      	b.n	8002abc <_printf_i+0xfc>
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	f043 0320 	orr.w	r3, r3, #32
 8002b62:	6023      	str	r3, [r4, #0]
 8002b64:	2378      	movs	r3, #120	; 0x78
 8002b66:	4828      	ldr	r0, [pc, #160]	; (8002c08 <_printf_i+0x248>)
 8002b68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b6c:	e7e3      	b.n	8002b36 <_printf_i+0x176>
 8002b6e:	065e      	lsls	r6, r3, #25
 8002b70:	bf48      	it	mi
 8002b72:	b2ad      	uxthmi	r5, r5
 8002b74:	e7e6      	b.n	8002b44 <_printf_i+0x184>
 8002b76:	4616      	mov	r6, r2
 8002b78:	e7bb      	b.n	8002af2 <_printf_i+0x132>
 8002b7a:	680b      	ldr	r3, [r1, #0]
 8002b7c:	6826      	ldr	r6, [r4, #0]
 8002b7e:	1d1d      	adds	r5, r3, #4
 8002b80:	6960      	ldr	r0, [r4, #20]
 8002b82:	600d      	str	r5, [r1, #0]
 8002b84:	0635      	lsls	r5, r6, #24
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	d501      	bpl.n	8002b8e <_printf_i+0x1ce>
 8002b8a:	6018      	str	r0, [r3, #0]
 8002b8c:	e002      	b.n	8002b94 <_printf_i+0x1d4>
 8002b8e:	0671      	lsls	r1, r6, #25
 8002b90:	d5fb      	bpl.n	8002b8a <_printf_i+0x1ca>
 8002b92:	8018      	strh	r0, [r3, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	4616      	mov	r6, r2
 8002b98:	6123      	str	r3, [r4, #16]
 8002b9a:	e7ba      	b.n	8002b12 <_printf_i+0x152>
 8002b9c:	680b      	ldr	r3, [r1, #0]
 8002b9e:	1d1a      	adds	r2, r3, #4
 8002ba0:	600a      	str	r2, [r1, #0]
 8002ba2:	681e      	ldr	r6, [r3, #0]
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4630      	mov	r0, r6
 8002ba8:	6862      	ldr	r2, [r4, #4]
 8002baa:	f000 fed7 	bl	800395c <memchr>
 8002bae:	b108      	cbz	r0, 8002bb4 <_printf_i+0x1f4>
 8002bb0:	1b80      	subs	r0, r0, r6
 8002bb2:	6060      	str	r0, [r4, #4]
 8002bb4:	6863      	ldr	r3, [r4, #4]
 8002bb6:	6123      	str	r3, [r4, #16]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bbe:	e7a8      	b.n	8002b12 <_printf_i+0x152>
 8002bc0:	4632      	mov	r2, r6
 8002bc2:	4649      	mov	r1, r9
 8002bc4:	4640      	mov	r0, r8
 8002bc6:	6923      	ldr	r3, [r4, #16]
 8002bc8:	47d0      	blx	sl
 8002bca:	3001      	adds	r0, #1
 8002bcc:	d0ab      	beq.n	8002b26 <_printf_i+0x166>
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	079b      	lsls	r3, r3, #30
 8002bd2:	d413      	bmi.n	8002bfc <_printf_i+0x23c>
 8002bd4:	68e0      	ldr	r0, [r4, #12]
 8002bd6:	9b03      	ldr	r3, [sp, #12]
 8002bd8:	4298      	cmp	r0, r3
 8002bda:	bfb8      	it	lt
 8002bdc:	4618      	movlt	r0, r3
 8002bde:	e7a4      	b.n	8002b2a <_printf_i+0x16a>
 8002be0:	2301      	movs	r3, #1
 8002be2:	4632      	mov	r2, r6
 8002be4:	4649      	mov	r1, r9
 8002be6:	4640      	mov	r0, r8
 8002be8:	47d0      	blx	sl
 8002bea:	3001      	adds	r0, #1
 8002bec:	d09b      	beq.n	8002b26 <_printf_i+0x166>
 8002bee:	3501      	adds	r5, #1
 8002bf0:	68e3      	ldr	r3, [r4, #12]
 8002bf2:	9903      	ldr	r1, [sp, #12]
 8002bf4:	1a5b      	subs	r3, r3, r1
 8002bf6:	42ab      	cmp	r3, r5
 8002bf8:	dcf2      	bgt.n	8002be0 <_printf_i+0x220>
 8002bfa:	e7eb      	b.n	8002bd4 <_printf_i+0x214>
 8002bfc:	2500      	movs	r5, #0
 8002bfe:	f104 0619 	add.w	r6, r4, #25
 8002c02:	e7f5      	b.n	8002bf0 <_printf_i+0x230>
 8002c04:	080050f6 	.word	0x080050f6
 8002c08:	08005107 	.word	0x08005107

08002c0c <_vsiprintf_r>:
 8002c0c:	b500      	push	{lr}
 8002c0e:	b09b      	sub	sp, #108	; 0x6c
 8002c10:	9100      	str	r1, [sp, #0]
 8002c12:	9104      	str	r1, [sp, #16]
 8002c14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c18:	9105      	str	r1, [sp, #20]
 8002c1a:	9102      	str	r1, [sp, #8]
 8002c1c:	4905      	ldr	r1, [pc, #20]	; (8002c34 <_vsiprintf_r+0x28>)
 8002c1e:	9103      	str	r1, [sp, #12]
 8002c20:	4669      	mov	r1, sp
 8002c22:	f001 fb49 	bl	80042b8 <_svfiprintf_r>
 8002c26:	2200      	movs	r2, #0
 8002c28:	9b00      	ldr	r3, [sp, #0]
 8002c2a:	701a      	strb	r2, [r3, #0]
 8002c2c:	b01b      	add	sp, #108	; 0x6c
 8002c2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c32:	bf00      	nop
 8002c34:	ffff0208 	.word	0xffff0208

08002c38 <vsiprintf>:
 8002c38:	4613      	mov	r3, r2
 8002c3a:	460a      	mov	r2, r1
 8002c3c:	4601      	mov	r1, r0
 8002c3e:	4802      	ldr	r0, [pc, #8]	; (8002c48 <vsiprintf+0x10>)
 8002c40:	6800      	ldr	r0, [r0, #0]
 8002c42:	f7ff bfe3 	b.w	8002c0c <_vsiprintf_r>
 8002c46:	bf00      	nop
 8002c48:	20000010 	.word	0x20000010

08002c4c <quorem>:
 8002c4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c50:	6903      	ldr	r3, [r0, #16]
 8002c52:	690c      	ldr	r4, [r1, #16]
 8002c54:	4607      	mov	r7, r0
 8002c56:	42a3      	cmp	r3, r4
 8002c58:	f2c0 8083 	blt.w	8002d62 <quorem+0x116>
 8002c5c:	3c01      	subs	r4, #1
 8002c5e:	f100 0514 	add.w	r5, r0, #20
 8002c62:	f101 0814 	add.w	r8, r1, #20
 8002c66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002c70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002c74:	3301      	adds	r3, #1
 8002c76:	429a      	cmp	r2, r3
 8002c78:	fbb2 f6f3 	udiv	r6, r2, r3
 8002c7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002c80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002c84:	d332      	bcc.n	8002cec <quorem+0xa0>
 8002c86:	f04f 0e00 	mov.w	lr, #0
 8002c8a:	4640      	mov	r0, r8
 8002c8c:	46ac      	mov	ip, r5
 8002c8e:	46f2      	mov	sl, lr
 8002c90:	f850 2b04 	ldr.w	r2, [r0], #4
 8002c94:	b293      	uxth	r3, r2
 8002c96:	fb06 e303 	mla	r3, r6, r3, lr
 8002c9a:	0c12      	lsrs	r2, r2, #16
 8002c9c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002ca0:	fb06 e202 	mla	r2, r6, r2, lr
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	ebaa 0303 	sub.w	r3, sl, r3
 8002caa:	f8dc a000 	ldr.w	sl, [ip]
 8002cae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002cb2:	fa1f fa8a 	uxth.w	sl, sl
 8002cb6:	4453      	add	r3, sl
 8002cb8:	fa1f fa82 	uxth.w	sl, r2
 8002cbc:	f8dc 2000 	ldr.w	r2, [ip]
 8002cc0:	4581      	cmp	r9, r0
 8002cc2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8002cc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002cd0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002cd4:	f84c 3b04 	str.w	r3, [ip], #4
 8002cd8:	d2da      	bcs.n	8002c90 <quorem+0x44>
 8002cda:	f855 300b 	ldr.w	r3, [r5, fp]
 8002cde:	b92b      	cbnz	r3, 8002cec <quorem+0xa0>
 8002ce0:	9b01      	ldr	r3, [sp, #4]
 8002ce2:	3b04      	subs	r3, #4
 8002ce4:	429d      	cmp	r5, r3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	d32f      	bcc.n	8002d4a <quorem+0xfe>
 8002cea:	613c      	str	r4, [r7, #16]
 8002cec:	4638      	mov	r0, r7
 8002cee:	f001 f8cb 	bl	8003e88 <__mcmp>
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	db25      	blt.n	8002d42 <quorem+0xf6>
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f04f 0c00 	mov.w	ip, #0
 8002cfc:	3601      	adds	r6, #1
 8002cfe:	f858 1b04 	ldr.w	r1, [r8], #4
 8002d02:	f8d0 e000 	ldr.w	lr, [r0]
 8002d06:	b28b      	uxth	r3, r1
 8002d08:	ebac 0303 	sub.w	r3, ip, r3
 8002d0c:	fa1f f28e 	uxth.w	r2, lr
 8002d10:	4413      	add	r3, r2
 8002d12:	0c0a      	lsrs	r2, r1, #16
 8002d14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002d18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d22:	45c1      	cmp	r9, r8
 8002d24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002d28:	f840 3b04 	str.w	r3, [r0], #4
 8002d2c:	d2e7      	bcs.n	8002cfe <quorem+0xb2>
 8002d2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002d32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002d36:	b922      	cbnz	r2, 8002d42 <quorem+0xf6>
 8002d38:	3b04      	subs	r3, #4
 8002d3a:	429d      	cmp	r5, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	d30a      	bcc.n	8002d56 <quorem+0x10a>
 8002d40:	613c      	str	r4, [r7, #16]
 8002d42:	4630      	mov	r0, r6
 8002d44:	b003      	add	sp, #12
 8002d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	3b04      	subs	r3, #4
 8002d4e:	2a00      	cmp	r2, #0
 8002d50:	d1cb      	bne.n	8002cea <quorem+0x9e>
 8002d52:	3c01      	subs	r4, #1
 8002d54:	e7c6      	b.n	8002ce4 <quorem+0x98>
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	3b04      	subs	r3, #4
 8002d5a:	2a00      	cmp	r2, #0
 8002d5c:	d1f0      	bne.n	8002d40 <quorem+0xf4>
 8002d5e:	3c01      	subs	r4, #1
 8002d60:	e7eb      	b.n	8002d3a <quorem+0xee>
 8002d62:	2000      	movs	r0, #0
 8002d64:	e7ee      	b.n	8002d44 <quorem+0xf8>
	...

08002d68 <_dtoa_r>:
 8002d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d6c:	4616      	mov	r6, r2
 8002d6e:	461f      	mov	r7, r3
 8002d70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002d72:	b099      	sub	sp, #100	; 0x64
 8002d74:	4605      	mov	r5, r0
 8002d76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002d7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8002d7e:	b974      	cbnz	r4, 8002d9e <_dtoa_r+0x36>
 8002d80:	2010      	movs	r0, #16
 8002d82:	f000 fde3 	bl	800394c <malloc>
 8002d86:	4602      	mov	r2, r0
 8002d88:	6268      	str	r0, [r5, #36]	; 0x24
 8002d8a:	b920      	cbnz	r0, 8002d96 <_dtoa_r+0x2e>
 8002d8c:	21ea      	movs	r1, #234	; 0xea
 8002d8e:	4bae      	ldr	r3, [pc, #696]	; (8003048 <_dtoa_r+0x2e0>)
 8002d90:	48ae      	ldr	r0, [pc, #696]	; (800304c <_dtoa_r+0x2e4>)
 8002d92:	f001 fba1 	bl	80044d8 <__assert_func>
 8002d96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002d9a:	6004      	str	r4, [r0, #0]
 8002d9c:	60c4      	str	r4, [r0, #12]
 8002d9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002da0:	6819      	ldr	r1, [r3, #0]
 8002da2:	b151      	cbz	r1, 8002dba <_dtoa_r+0x52>
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	2301      	movs	r3, #1
 8002da8:	4093      	lsls	r3, r2
 8002daa:	604a      	str	r2, [r1, #4]
 8002dac:	608b      	str	r3, [r1, #8]
 8002dae:	4628      	mov	r0, r5
 8002db0:	f000 fe30 	bl	8003a14 <_Bfree>
 8002db4:	2200      	movs	r2, #0
 8002db6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	1e3b      	subs	r3, r7, #0
 8002dbc:	bfaf      	iteee	ge
 8002dbe:	2300      	movge	r3, #0
 8002dc0:	2201      	movlt	r2, #1
 8002dc2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002dc6:	9305      	strlt	r3, [sp, #20]
 8002dc8:	bfa8      	it	ge
 8002dca:	f8c8 3000 	strge.w	r3, [r8]
 8002dce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002dd2:	4b9f      	ldr	r3, [pc, #636]	; (8003050 <_dtoa_r+0x2e8>)
 8002dd4:	bfb8      	it	lt
 8002dd6:	f8c8 2000 	strlt.w	r2, [r8]
 8002dda:	ea33 0309 	bics.w	r3, r3, r9
 8002dde:	d119      	bne.n	8002e14 <_dtoa_r+0xac>
 8002de0:	f242 730f 	movw	r3, #9999	; 0x270f
 8002de4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002dec:	4333      	orrs	r3, r6
 8002dee:	f000 8580 	beq.w	80038f2 <_dtoa_r+0xb8a>
 8002df2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002df4:	b953      	cbnz	r3, 8002e0c <_dtoa_r+0xa4>
 8002df6:	4b97      	ldr	r3, [pc, #604]	; (8003054 <_dtoa_r+0x2ec>)
 8002df8:	e022      	b.n	8002e40 <_dtoa_r+0xd8>
 8002dfa:	4b97      	ldr	r3, [pc, #604]	; (8003058 <_dtoa_r+0x2f0>)
 8002dfc:	9308      	str	r3, [sp, #32]
 8002dfe:	3308      	adds	r3, #8
 8002e00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	9808      	ldr	r0, [sp, #32]
 8002e06:	b019      	add	sp, #100	; 0x64
 8002e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e0c:	4b91      	ldr	r3, [pc, #580]	; (8003054 <_dtoa_r+0x2ec>)
 8002e0e:	9308      	str	r3, [sp, #32]
 8002e10:	3303      	adds	r3, #3
 8002e12:	e7f5      	b.n	8002e00 <_dtoa_r+0x98>
 8002e14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002e18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8002e1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002e20:	2200      	movs	r2, #0
 8002e22:	2300      	movs	r3, #0
 8002e24:	f7fd fdc0 	bl	80009a8 <__aeabi_dcmpeq>
 8002e28:	4680      	mov	r8, r0
 8002e2a:	b158      	cbz	r0, 8002e44 <_dtoa_r+0xdc>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8559 	beq.w	80038ec <_dtoa_r+0xb84>
 8002e3a:	4888      	ldr	r0, [pc, #544]	; (800305c <_dtoa_r+0x2f4>)
 8002e3c:	6018      	str	r0, [r3, #0]
 8002e3e:	1e43      	subs	r3, r0, #1
 8002e40:	9308      	str	r3, [sp, #32]
 8002e42:	e7df      	b.n	8002e04 <_dtoa_r+0x9c>
 8002e44:	ab16      	add	r3, sp, #88	; 0x58
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	ab17      	add	r3, sp, #92	; 0x5c
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002e52:	f001 f8c5 	bl	8003fe0 <__d2b>
 8002e56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8002e5a:	4682      	mov	sl, r0
 8002e5c:	2c00      	cmp	r4, #0
 8002e5e:	d07e      	beq.n	8002f5e <_dtoa_r+0x1f6>
 8002e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002e64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e66:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002e6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002e72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002e76:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	4b78      	ldr	r3, [pc, #480]	; (8003060 <_dtoa_r+0x2f8>)
 8002e7e:	f7fd f973 	bl	8000168 <__aeabi_dsub>
 8002e82:	a36b      	add	r3, pc, #428	; (adr r3, 8003030 <_dtoa_r+0x2c8>)
 8002e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e88:	f7fd fb26 	bl	80004d8 <__aeabi_dmul>
 8002e8c:	a36a      	add	r3, pc, #424	; (adr r3, 8003038 <_dtoa_r+0x2d0>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f7fd f96b 	bl	800016c <__adddf3>
 8002e96:	4606      	mov	r6, r0
 8002e98:	4620      	mov	r0, r4
 8002e9a:	460f      	mov	r7, r1
 8002e9c:	f7fd fab2 	bl	8000404 <__aeabi_i2d>
 8002ea0:	a367      	add	r3, pc, #412	; (adr r3, 8003040 <_dtoa_r+0x2d8>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f7fd fb17 	bl	80004d8 <__aeabi_dmul>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4630      	mov	r0, r6
 8002eb0:	4639      	mov	r1, r7
 8002eb2:	f7fd f95b 	bl	800016c <__adddf3>
 8002eb6:	4606      	mov	r6, r0
 8002eb8:	460f      	mov	r7, r1
 8002eba:	f7fd fdbd 	bl	8000a38 <__aeabi_d2iz>
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	4681      	mov	r9, r0
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	4639      	mov	r1, r7
 8002ec8:	f7fd fd78 	bl	80009bc <__aeabi_dcmplt>
 8002ecc:	b148      	cbz	r0, 8002ee2 <_dtoa_r+0x17a>
 8002ece:	4648      	mov	r0, r9
 8002ed0:	f7fd fa98 	bl	8000404 <__aeabi_i2d>
 8002ed4:	4632      	mov	r2, r6
 8002ed6:	463b      	mov	r3, r7
 8002ed8:	f7fd fd66 	bl	80009a8 <__aeabi_dcmpeq>
 8002edc:	b908      	cbnz	r0, 8002ee2 <_dtoa_r+0x17a>
 8002ede:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002ee2:	f1b9 0f16 	cmp.w	r9, #22
 8002ee6:	d857      	bhi.n	8002f98 <_dtoa_r+0x230>
 8002ee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002eec:	4b5d      	ldr	r3, [pc, #372]	; (8003064 <_dtoa_r+0x2fc>)
 8002eee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8002ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef6:	f7fd fd61 	bl	80009bc <__aeabi_dcmplt>
 8002efa:	2800      	cmp	r0, #0
 8002efc:	d04e      	beq.n	8002f9c <_dtoa_r+0x234>
 8002efe:	2300      	movs	r3, #0
 8002f00:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002f04:	930f      	str	r3, [sp, #60]	; 0x3c
 8002f06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002f08:	1b1c      	subs	r4, r3, r4
 8002f0a:	1e63      	subs	r3, r4, #1
 8002f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f0e:	bf49      	itett	mi
 8002f10:	f1c4 0301 	rsbmi	r3, r4, #1
 8002f14:	2300      	movpl	r3, #0
 8002f16:	9306      	strmi	r3, [sp, #24]
 8002f18:	2300      	movmi	r3, #0
 8002f1a:	bf54      	ite	pl
 8002f1c:	9306      	strpl	r3, [sp, #24]
 8002f1e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8002f20:	f1b9 0f00 	cmp.w	r9, #0
 8002f24:	db3c      	blt.n	8002fa0 <_dtoa_r+0x238>
 8002f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f28:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8002f2c:	444b      	add	r3, r9
 8002f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8002f30:	2300      	movs	r3, #0
 8002f32:	930a      	str	r3, [sp, #40]	; 0x28
 8002f34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002f36:	2b09      	cmp	r3, #9
 8002f38:	d86c      	bhi.n	8003014 <_dtoa_r+0x2ac>
 8002f3a:	2b05      	cmp	r3, #5
 8002f3c:	bfc4      	itt	gt
 8002f3e:	3b04      	subgt	r3, #4
 8002f40:	9322      	strgt	r3, [sp, #136]	; 0x88
 8002f42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002f44:	bfc8      	it	gt
 8002f46:	2400      	movgt	r4, #0
 8002f48:	f1a3 0302 	sub.w	r3, r3, #2
 8002f4c:	bfd8      	it	le
 8002f4e:	2401      	movle	r4, #1
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	f200 808b 	bhi.w	800306c <_dtoa_r+0x304>
 8002f56:	e8df f003 	tbb	[pc, r3]
 8002f5a:	4f2d      	.short	0x4f2d
 8002f5c:	5b4d      	.short	0x5b4d
 8002f5e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8002f62:	441c      	add	r4, r3
 8002f64:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	bfc3      	ittte	gt
 8002f6c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002f70:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8002f74:	fa09 f303 	lslgt.w	r3, r9, r3
 8002f78:	f1c3 0320 	rsble	r3, r3, #32
 8002f7c:	bfc6      	itte	gt
 8002f7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002f82:	4318      	orrgt	r0, r3
 8002f84:	fa06 f003 	lslle.w	r0, r6, r3
 8002f88:	f7fd fa2c 	bl	80003e4 <__aeabi_ui2d>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002f92:	3c01      	subs	r4, #1
 8002f94:	9313      	str	r3, [sp, #76]	; 0x4c
 8002f96:	e770      	b.n	8002e7a <_dtoa_r+0x112>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e7b3      	b.n	8002f04 <_dtoa_r+0x19c>
 8002f9c:	900f      	str	r0, [sp, #60]	; 0x3c
 8002f9e:	e7b2      	b.n	8002f06 <_dtoa_r+0x19e>
 8002fa0:	9b06      	ldr	r3, [sp, #24]
 8002fa2:	eba3 0309 	sub.w	r3, r3, r9
 8002fa6:	9306      	str	r3, [sp, #24]
 8002fa8:	f1c9 0300 	rsb	r3, r9, #0
 8002fac:	930a      	str	r3, [sp, #40]	; 0x28
 8002fae:	2300      	movs	r3, #0
 8002fb0:	930e      	str	r3, [sp, #56]	; 0x38
 8002fb2:	e7bf      	b.n	8002f34 <_dtoa_r+0x1cc>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8002fb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	dc59      	bgt.n	8003072 <_dtoa_r+0x30a>
 8002fbe:	f04f 0b01 	mov.w	fp, #1
 8002fc2:	465b      	mov	r3, fp
 8002fc4:	f8cd b008 	str.w	fp, [sp, #8]
 8002fc8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8002fcc:	2200      	movs	r2, #0
 8002fce:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002fd0:	6042      	str	r2, [r0, #4]
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	f102 0614 	add.w	r6, r2, #20
 8002fd8:	429e      	cmp	r6, r3
 8002fda:	6841      	ldr	r1, [r0, #4]
 8002fdc:	d94f      	bls.n	800307e <_dtoa_r+0x316>
 8002fde:	4628      	mov	r0, r5
 8002fe0:	f000 fcd8 	bl	8003994 <_Balloc>
 8002fe4:	9008      	str	r0, [sp, #32]
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	d14d      	bne.n	8003086 <_dtoa_r+0x31e>
 8002fea:	4602      	mov	r2, r0
 8002fec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <_dtoa_r+0x300>)
 8002ff2:	e6cd      	b.n	8002d90 <_dtoa_r+0x28>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e7de      	b.n	8002fb6 <_dtoa_r+0x24e>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ffc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002ffe:	eb09 0b03 	add.w	fp, r9, r3
 8003002:	f10b 0301 	add.w	r3, fp, #1
 8003006:	2b01      	cmp	r3, #1
 8003008:	9302      	str	r3, [sp, #8]
 800300a:	bfb8      	it	lt
 800300c:	2301      	movlt	r3, #1
 800300e:	e7dd      	b.n	8002fcc <_dtoa_r+0x264>
 8003010:	2301      	movs	r3, #1
 8003012:	e7f2      	b.n	8002ffa <_dtoa_r+0x292>
 8003014:	2401      	movs	r4, #1
 8003016:	2300      	movs	r3, #0
 8003018:	940b      	str	r4, [sp, #44]	; 0x2c
 800301a:	9322      	str	r3, [sp, #136]	; 0x88
 800301c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003020:	2200      	movs	r2, #0
 8003022:	2312      	movs	r3, #18
 8003024:	f8cd b008 	str.w	fp, [sp, #8]
 8003028:	9223      	str	r2, [sp, #140]	; 0x8c
 800302a:	e7cf      	b.n	8002fcc <_dtoa_r+0x264>
 800302c:	f3af 8000 	nop.w
 8003030:	636f4361 	.word	0x636f4361
 8003034:	3fd287a7 	.word	0x3fd287a7
 8003038:	8b60c8b3 	.word	0x8b60c8b3
 800303c:	3fc68a28 	.word	0x3fc68a28
 8003040:	509f79fb 	.word	0x509f79fb
 8003044:	3fd34413 	.word	0x3fd34413
 8003048:	08005125 	.word	0x08005125
 800304c:	0800513c 	.word	0x0800513c
 8003050:	7ff00000 	.word	0x7ff00000
 8003054:	08005121 	.word	0x08005121
 8003058:	08005118 	.word	0x08005118
 800305c:	080050f5 	.word	0x080050f5
 8003060:	3ff80000 	.word	0x3ff80000
 8003064:	08005238 	.word	0x08005238
 8003068:	0800519b 	.word	0x0800519b
 800306c:	2301      	movs	r3, #1
 800306e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003070:	e7d4      	b.n	800301c <_dtoa_r+0x2b4>
 8003072:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003076:	465b      	mov	r3, fp
 8003078:	f8cd b008 	str.w	fp, [sp, #8]
 800307c:	e7a6      	b.n	8002fcc <_dtoa_r+0x264>
 800307e:	3101      	adds	r1, #1
 8003080:	6041      	str	r1, [r0, #4]
 8003082:	0052      	lsls	r2, r2, #1
 8003084:	e7a6      	b.n	8002fd4 <_dtoa_r+0x26c>
 8003086:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003088:	9a08      	ldr	r2, [sp, #32]
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	9b02      	ldr	r3, [sp, #8]
 800308e:	2b0e      	cmp	r3, #14
 8003090:	f200 80a8 	bhi.w	80031e4 <_dtoa_r+0x47c>
 8003094:	2c00      	cmp	r4, #0
 8003096:	f000 80a5 	beq.w	80031e4 <_dtoa_r+0x47c>
 800309a:	f1b9 0f00 	cmp.w	r9, #0
 800309e:	dd34      	ble.n	800310a <_dtoa_r+0x3a2>
 80030a0:	4a9a      	ldr	r2, [pc, #616]	; (800330c <_dtoa_r+0x5a4>)
 80030a2:	f009 030f 	and.w	r3, r9, #15
 80030a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80030aa:	f419 7f80 	tst.w	r9, #256	; 0x100
 80030ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80030b6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80030ba:	d016      	beq.n	80030ea <_dtoa_r+0x382>
 80030bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80030c0:	4b93      	ldr	r3, [pc, #588]	; (8003310 <_dtoa_r+0x5a8>)
 80030c2:	2703      	movs	r7, #3
 80030c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80030c8:	f7fd fb30 	bl	800072c <__aeabi_ddiv>
 80030cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030d0:	f004 040f 	and.w	r4, r4, #15
 80030d4:	4e8e      	ldr	r6, [pc, #568]	; (8003310 <_dtoa_r+0x5a8>)
 80030d6:	b954      	cbnz	r4, 80030ee <_dtoa_r+0x386>
 80030d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80030dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030e0:	f7fd fb24 	bl	800072c <__aeabi_ddiv>
 80030e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030e8:	e029      	b.n	800313e <_dtoa_r+0x3d6>
 80030ea:	2702      	movs	r7, #2
 80030ec:	e7f2      	b.n	80030d4 <_dtoa_r+0x36c>
 80030ee:	07e1      	lsls	r1, r4, #31
 80030f0:	d508      	bpl.n	8003104 <_dtoa_r+0x39c>
 80030f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80030f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80030fa:	f7fd f9ed 	bl	80004d8 <__aeabi_dmul>
 80030fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003102:	3701      	adds	r7, #1
 8003104:	1064      	asrs	r4, r4, #1
 8003106:	3608      	adds	r6, #8
 8003108:	e7e5      	b.n	80030d6 <_dtoa_r+0x36e>
 800310a:	f000 80a5 	beq.w	8003258 <_dtoa_r+0x4f0>
 800310e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003112:	f1c9 0400 	rsb	r4, r9, #0
 8003116:	4b7d      	ldr	r3, [pc, #500]	; (800330c <_dtoa_r+0x5a4>)
 8003118:	f004 020f 	and.w	r2, r4, #15
 800311c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003124:	f7fd f9d8 	bl	80004d8 <__aeabi_dmul>
 8003128:	2702      	movs	r7, #2
 800312a:	2300      	movs	r3, #0
 800312c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003130:	4e77      	ldr	r6, [pc, #476]	; (8003310 <_dtoa_r+0x5a8>)
 8003132:	1124      	asrs	r4, r4, #4
 8003134:	2c00      	cmp	r4, #0
 8003136:	f040 8084 	bne.w	8003242 <_dtoa_r+0x4da>
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1d2      	bne.n	80030e4 <_dtoa_r+0x37c>
 800313e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 808b 	beq.w	800325c <_dtoa_r+0x4f4>
 8003146:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800314a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800314e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003152:	2200      	movs	r2, #0
 8003154:	4b6f      	ldr	r3, [pc, #444]	; (8003314 <_dtoa_r+0x5ac>)
 8003156:	f7fd fc31 	bl	80009bc <__aeabi_dcmplt>
 800315a:	2800      	cmp	r0, #0
 800315c:	d07e      	beq.n	800325c <_dtoa_r+0x4f4>
 800315e:	9b02      	ldr	r3, [sp, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d07b      	beq.n	800325c <_dtoa_r+0x4f4>
 8003164:	f1bb 0f00 	cmp.w	fp, #0
 8003168:	dd38      	ble.n	80031dc <_dtoa_r+0x474>
 800316a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800316e:	2200      	movs	r2, #0
 8003170:	4b69      	ldr	r3, [pc, #420]	; (8003318 <_dtoa_r+0x5b0>)
 8003172:	f7fd f9b1 	bl	80004d8 <__aeabi_dmul>
 8003176:	465c      	mov	r4, fp
 8003178:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800317c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8003180:	3701      	adds	r7, #1
 8003182:	4638      	mov	r0, r7
 8003184:	f7fd f93e 	bl	8000404 <__aeabi_i2d>
 8003188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800318c:	f7fd f9a4 	bl	80004d8 <__aeabi_dmul>
 8003190:	2200      	movs	r2, #0
 8003192:	4b62      	ldr	r3, [pc, #392]	; (800331c <_dtoa_r+0x5b4>)
 8003194:	f7fc ffea 	bl	800016c <__adddf3>
 8003198:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800319c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80031a0:	9611      	str	r6, [sp, #68]	; 0x44
 80031a2:	2c00      	cmp	r4, #0
 80031a4:	d15d      	bne.n	8003262 <_dtoa_r+0x4fa>
 80031a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80031aa:	2200      	movs	r2, #0
 80031ac:	4b5c      	ldr	r3, [pc, #368]	; (8003320 <_dtoa_r+0x5b8>)
 80031ae:	f7fc ffdb 	bl	8000168 <__aeabi_dsub>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031ba:	4633      	mov	r3, r6
 80031bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80031be:	f7fd fc1b 	bl	80009f8 <__aeabi_dcmpgt>
 80031c2:	2800      	cmp	r0, #0
 80031c4:	f040 829e 	bne.w	8003704 <_dtoa_r+0x99c>
 80031c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80031cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80031ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80031d2:	f7fd fbf3 	bl	80009bc <__aeabi_dcmplt>
 80031d6:	2800      	cmp	r0, #0
 80031d8:	f040 8292 	bne.w	8003700 <_dtoa_r+0x998>
 80031dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80031e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80031e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f2c0 8153 	blt.w	8003492 <_dtoa_r+0x72a>
 80031ec:	f1b9 0f0e 	cmp.w	r9, #14
 80031f0:	f300 814f 	bgt.w	8003492 <_dtoa_r+0x72a>
 80031f4:	4b45      	ldr	r3, [pc, #276]	; (800330c <_dtoa_r+0x5a4>)
 80031f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80031fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003202:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003204:	2b00      	cmp	r3, #0
 8003206:	f280 80db 	bge.w	80033c0 <_dtoa_r+0x658>
 800320a:	9b02      	ldr	r3, [sp, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	f300 80d7 	bgt.w	80033c0 <_dtoa_r+0x658>
 8003212:	f040 8274 	bne.w	80036fe <_dtoa_r+0x996>
 8003216:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800321a:	2200      	movs	r2, #0
 800321c:	4b40      	ldr	r3, [pc, #256]	; (8003320 <_dtoa_r+0x5b8>)
 800321e:	f7fd f95b 	bl	80004d8 <__aeabi_dmul>
 8003222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003226:	f7fd fbdd 	bl	80009e4 <__aeabi_dcmpge>
 800322a:	9c02      	ldr	r4, [sp, #8]
 800322c:	4626      	mov	r6, r4
 800322e:	2800      	cmp	r0, #0
 8003230:	f040 824a 	bne.w	80036c8 <_dtoa_r+0x960>
 8003234:	2331      	movs	r3, #49	; 0x31
 8003236:	9f08      	ldr	r7, [sp, #32]
 8003238:	f109 0901 	add.w	r9, r9, #1
 800323c:	f807 3b01 	strb.w	r3, [r7], #1
 8003240:	e246      	b.n	80036d0 <_dtoa_r+0x968>
 8003242:	07e2      	lsls	r2, r4, #31
 8003244:	d505      	bpl.n	8003252 <_dtoa_r+0x4ea>
 8003246:	e9d6 2300 	ldrd	r2, r3, [r6]
 800324a:	f7fd f945 	bl	80004d8 <__aeabi_dmul>
 800324e:	2301      	movs	r3, #1
 8003250:	3701      	adds	r7, #1
 8003252:	1064      	asrs	r4, r4, #1
 8003254:	3608      	adds	r6, #8
 8003256:	e76d      	b.n	8003134 <_dtoa_r+0x3cc>
 8003258:	2702      	movs	r7, #2
 800325a:	e770      	b.n	800313e <_dtoa_r+0x3d6>
 800325c:	46c8      	mov	r8, r9
 800325e:	9c02      	ldr	r4, [sp, #8]
 8003260:	e78f      	b.n	8003182 <_dtoa_r+0x41a>
 8003262:	9908      	ldr	r1, [sp, #32]
 8003264:	4b29      	ldr	r3, [pc, #164]	; (800330c <_dtoa_r+0x5a4>)
 8003266:	4421      	add	r1, r4
 8003268:	9112      	str	r1, [sp, #72]	; 0x48
 800326a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800326c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003270:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003274:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003278:	2900      	cmp	r1, #0
 800327a:	d055      	beq.n	8003328 <_dtoa_r+0x5c0>
 800327c:	2000      	movs	r0, #0
 800327e:	4929      	ldr	r1, [pc, #164]	; (8003324 <_dtoa_r+0x5bc>)
 8003280:	f7fd fa54 	bl	800072c <__aeabi_ddiv>
 8003284:	463b      	mov	r3, r7
 8003286:	4632      	mov	r2, r6
 8003288:	f7fc ff6e 	bl	8000168 <__aeabi_dsub>
 800328c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003290:	9f08      	ldr	r7, [sp, #32]
 8003292:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003296:	f7fd fbcf 	bl	8000a38 <__aeabi_d2iz>
 800329a:	4604      	mov	r4, r0
 800329c:	f7fd f8b2 	bl	8000404 <__aeabi_i2d>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032a8:	f7fc ff5e 	bl	8000168 <__aeabi_dsub>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	3430      	adds	r4, #48	; 0x30
 80032b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80032b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80032ba:	f807 4b01 	strb.w	r4, [r7], #1
 80032be:	f7fd fb7d 	bl	80009bc <__aeabi_dcmplt>
 80032c2:	2800      	cmp	r0, #0
 80032c4:	d174      	bne.n	80033b0 <_dtoa_r+0x648>
 80032c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80032ca:	2000      	movs	r0, #0
 80032cc:	4911      	ldr	r1, [pc, #68]	; (8003314 <_dtoa_r+0x5ac>)
 80032ce:	f7fc ff4b 	bl	8000168 <__aeabi_dsub>
 80032d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80032d6:	f7fd fb71 	bl	80009bc <__aeabi_dcmplt>
 80032da:	2800      	cmp	r0, #0
 80032dc:	f040 80b6 	bne.w	800344c <_dtoa_r+0x6e4>
 80032e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80032e2:	429f      	cmp	r7, r3
 80032e4:	f43f af7a 	beq.w	80031dc <_dtoa_r+0x474>
 80032e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80032ec:	2200      	movs	r2, #0
 80032ee:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <_dtoa_r+0x5b0>)
 80032f0:	f7fd f8f2 	bl	80004d8 <__aeabi_dmul>
 80032f4:	2200      	movs	r2, #0
 80032f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80032fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <_dtoa_r+0x5b0>)
 8003300:	f7fd f8ea 	bl	80004d8 <__aeabi_dmul>
 8003304:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003308:	e7c3      	b.n	8003292 <_dtoa_r+0x52a>
 800330a:	bf00      	nop
 800330c:	08005238 	.word	0x08005238
 8003310:	08005210 	.word	0x08005210
 8003314:	3ff00000 	.word	0x3ff00000
 8003318:	40240000 	.word	0x40240000
 800331c:	401c0000 	.word	0x401c0000
 8003320:	40140000 	.word	0x40140000
 8003324:	3fe00000 	.word	0x3fe00000
 8003328:	4630      	mov	r0, r6
 800332a:	4639      	mov	r1, r7
 800332c:	f7fd f8d4 	bl	80004d8 <__aeabi_dmul>
 8003330:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003332:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003336:	9c08      	ldr	r4, [sp, #32]
 8003338:	9314      	str	r3, [sp, #80]	; 0x50
 800333a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800333e:	f7fd fb7b 	bl	8000a38 <__aeabi_d2iz>
 8003342:	9015      	str	r0, [sp, #84]	; 0x54
 8003344:	f7fd f85e 	bl	8000404 <__aeabi_i2d>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003350:	f7fc ff0a 	bl	8000168 <__aeabi_dsub>
 8003354:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003356:	4606      	mov	r6, r0
 8003358:	3330      	adds	r3, #48	; 0x30
 800335a:	f804 3b01 	strb.w	r3, [r4], #1
 800335e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003360:	460f      	mov	r7, r1
 8003362:	429c      	cmp	r4, r3
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	d124      	bne.n	80033b4 <_dtoa_r+0x64c>
 800336a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800336e:	4bb3      	ldr	r3, [pc, #716]	; (800363c <_dtoa_r+0x8d4>)
 8003370:	f7fc fefc 	bl	800016c <__adddf3>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4630      	mov	r0, r6
 800337a:	4639      	mov	r1, r7
 800337c:	f7fd fb3c 	bl	80009f8 <__aeabi_dcmpgt>
 8003380:	2800      	cmp	r0, #0
 8003382:	d162      	bne.n	800344a <_dtoa_r+0x6e2>
 8003384:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003388:	2000      	movs	r0, #0
 800338a:	49ac      	ldr	r1, [pc, #688]	; (800363c <_dtoa_r+0x8d4>)
 800338c:	f7fc feec 	bl	8000168 <__aeabi_dsub>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4630      	mov	r0, r6
 8003396:	4639      	mov	r1, r7
 8003398:	f7fd fb10 	bl	80009bc <__aeabi_dcmplt>
 800339c:	2800      	cmp	r0, #0
 800339e:	f43f af1d 	beq.w	80031dc <_dtoa_r+0x474>
 80033a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80033a4:	1e7b      	subs	r3, r7, #1
 80033a6:	9314      	str	r3, [sp, #80]	; 0x50
 80033a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80033ac:	2b30      	cmp	r3, #48	; 0x30
 80033ae:	d0f8      	beq.n	80033a2 <_dtoa_r+0x63a>
 80033b0:	46c1      	mov	r9, r8
 80033b2:	e03a      	b.n	800342a <_dtoa_r+0x6c2>
 80033b4:	4ba2      	ldr	r3, [pc, #648]	; (8003640 <_dtoa_r+0x8d8>)
 80033b6:	f7fd f88f 	bl	80004d8 <__aeabi_dmul>
 80033ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80033be:	e7bc      	b.n	800333a <_dtoa_r+0x5d2>
 80033c0:	9f08      	ldr	r7, [sp, #32]
 80033c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80033c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80033ca:	f7fd f9af 	bl	800072c <__aeabi_ddiv>
 80033ce:	f7fd fb33 	bl	8000a38 <__aeabi_d2iz>
 80033d2:	4604      	mov	r4, r0
 80033d4:	f7fd f816 	bl	8000404 <__aeabi_i2d>
 80033d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80033dc:	f7fd f87c 	bl	80004d8 <__aeabi_dmul>
 80033e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80033e4:	460b      	mov	r3, r1
 80033e6:	4602      	mov	r2, r0
 80033e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80033ec:	f7fc febc 	bl	8000168 <__aeabi_dsub>
 80033f0:	f807 6b01 	strb.w	r6, [r7], #1
 80033f4:	9e08      	ldr	r6, [sp, #32]
 80033f6:	9b02      	ldr	r3, [sp, #8]
 80033f8:	1bbe      	subs	r6, r7, r6
 80033fa:	42b3      	cmp	r3, r6
 80033fc:	d13a      	bne.n	8003474 <_dtoa_r+0x70c>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	f7fc feb3 	bl	800016c <__adddf3>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800340e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003412:	f7fd faf1 	bl	80009f8 <__aeabi_dcmpgt>
 8003416:	bb58      	cbnz	r0, 8003470 <_dtoa_r+0x708>
 8003418:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800341c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003420:	f7fd fac2 	bl	80009a8 <__aeabi_dcmpeq>
 8003424:	b108      	cbz	r0, 800342a <_dtoa_r+0x6c2>
 8003426:	07e1      	lsls	r1, r4, #31
 8003428:	d422      	bmi.n	8003470 <_dtoa_r+0x708>
 800342a:	4628      	mov	r0, r5
 800342c:	4651      	mov	r1, sl
 800342e:	f000 faf1 	bl	8003a14 <_Bfree>
 8003432:	2300      	movs	r3, #0
 8003434:	703b      	strb	r3, [r7, #0]
 8003436:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003438:	f109 0001 	add.w	r0, r9, #1
 800343c:	6018      	str	r0, [r3, #0]
 800343e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003440:	2b00      	cmp	r3, #0
 8003442:	f43f acdf 	beq.w	8002e04 <_dtoa_r+0x9c>
 8003446:	601f      	str	r7, [r3, #0]
 8003448:	e4dc      	b.n	8002e04 <_dtoa_r+0x9c>
 800344a:	4627      	mov	r7, r4
 800344c:	463b      	mov	r3, r7
 800344e:	461f      	mov	r7, r3
 8003450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003454:	2a39      	cmp	r2, #57	; 0x39
 8003456:	d107      	bne.n	8003468 <_dtoa_r+0x700>
 8003458:	9a08      	ldr	r2, [sp, #32]
 800345a:	429a      	cmp	r2, r3
 800345c:	d1f7      	bne.n	800344e <_dtoa_r+0x6e6>
 800345e:	2230      	movs	r2, #48	; 0x30
 8003460:	9908      	ldr	r1, [sp, #32]
 8003462:	f108 0801 	add.w	r8, r8, #1
 8003466:	700a      	strb	r2, [r1, #0]
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	3201      	adds	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	e79f      	b.n	80033b0 <_dtoa_r+0x648>
 8003470:	46c8      	mov	r8, r9
 8003472:	e7eb      	b.n	800344c <_dtoa_r+0x6e4>
 8003474:	2200      	movs	r2, #0
 8003476:	4b72      	ldr	r3, [pc, #456]	; (8003640 <_dtoa_r+0x8d8>)
 8003478:	f7fd f82e 	bl	80004d8 <__aeabi_dmul>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003484:	2200      	movs	r2, #0
 8003486:	2300      	movs	r3, #0
 8003488:	f7fd fa8e 	bl	80009a8 <__aeabi_dcmpeq>
 800348c:	2800      	cmp	r0, #0
 800348e:	d098      	beq.n	80033c2 <_dtoa_r+0x65a>
 8003490:	e7cb      	b.n	800342a <_dtoa_r+0x6c2>
 8003492:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003494:	2a00      	cmp	r2, #0
 8003496:	f000 80cd 	beq.w	8003634 <_dtoa_r+0x8cc>
 800349a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800349c:	2a01      	cmp	r2, #1
 800349e:	f300 80af 	bgt.w	8003600 <_dtoa_r+0x898>
 80034a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80034a4:	2a00      	cmp	r2, #0
 80034a6:	f000 80a7 	beq.w	80035f8 <_dtoa_r+0x890>
 80034aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80034ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80034b0:	9f06      	ldr	r7, [sp, #24]
 80034b2:	9a06      	ldr	r2, [sp, #24]
 80034b4:	2101      	movs	r1, #1
 80034b6:	441a      	add	r2, r3
 80034b8:	9206      	str	r2, [sp, #24]
 80034ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034bc:	4628      	mov	r0, r5
 80034be:	441a      	add	r2, r3
 80034c0:	9209      	str	r2, [sp, #36]	; 0x24
 80034c2:	f000 fb61 	bl	8003b88 <__i2b>
 80034c6:	4606      	mov	r6, r0
 80034c8:	2f00      	cmp	r7, #0
 80034ca:	dd0c      	ble.n	80034e6 <_dtoa_r+0x77e>
 80034cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	dd09      	ble.n	80034e6 <_dtoa_r+0x77e>
 80034d2:	42bb      	cmp	r3, r7
 80034d4:	bfa8      	it	ge
 80034d6:	463b      	movge	r3, r7
 80034d8:	9a06      	ldr	r2, [sp, #24]
 80034da:	1aff      	subs	r7, r7, r3
 80034dc:	1ad2      	subs	r2, r2, r3
 80034de:	9206      	str	r2, [sp, #24]
 80034e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	9309      	str	r3, [sp, #36]	; 0x24
 80034e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034e8:	b1f3      	cbz	r3, 8003528 <_dtoa_r+0x7c0>
 80034ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80a9 	beq.w	8003644 <_dtoa_r+0x8dc>
 80034f2:	2c00      	cmp	r4, #0
 80034f4:	dd10      	ble.n	8003518 <_dtoa_r+0x7b0>
 80034f6:	4631      	mov	r1, r6
 80034f8:	4622      	mov	r2, r4
 80034fa:	4628      	mov	r0, r5
 80034fc:	f000 fbfe 	bl	8003cfc <__pow5mult>
 8003500:	4652      	mov	r2, sl
 8003502:	4601      	mov	r1, r0
 8003504:	4606      	mov	r6, r0
 8003506:	4628      	mov	r0, r5
 8003508:	f000 fb54 	bl	8003bb4 <__multiply>
 800350c:	4680      	mov	r8, r0
 800350e:	4651      	mov	r1, sl
 8003510:	4628      	mov	r0, r5
 8003512:	f000 fa7f 	bl	8003a14 <_Bfree>
 8003516:	46c2      	mov	sl, r8
 8003518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800351a:	1b1a      	subs	r2, r3, r4
 800351c:	d004      	beq.n	8003528 <_dtoa_r+0x7c0>
 800351e:	4651      	mov	r1, sl
 8003520:	4628      	mov	r0, r5
 8003522:	f000 fbeb 	bl	8003cfc <__pow5mult>
 8003526:	4682      	mov	sl, r0
 8003528:	2101      	movs	r1, #1
 800352a:	4628      	mov	r0, r5
 800352c:	f000 fb2c 	bl	8003b88 <__i2b>
 8003530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003532:	4604      	mov	r4, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	f340 8087 	ble.w	8003648 <_dtoa_r+0x8e0>
 800353a:	461a      	mov	r2, r3
 800353c:	4601      	mov	r1, r0
 800353e:	4628      	mov	r0, r5
 8003540:	f000 fbdc 	bl	8003cfc <__pow5mult>
 8003544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003546:	4604      	mov	r4, r0
 8003548:	2b01      	cmp	r3, #1
 800354a:	f340 8080 	ble.w	800364e <_dtoa_r+0x8e6>
 800354e:	f04f 0800 	mov.w	r8, #0
 8003552:	6923      	ldr	r3, [r4, #16]
 8003554:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003558:	6918      	ldr	r0, [r3, #16]
 800355a:	f000 fac7 	bl	8003aec <__hi0bits>
 800355e:	f1c0 0020 	rsb	r0, r0, #32
 8003562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003564:	4418      	add	r0, r3
 8003566:	f010 001f 	ands.w	r0, r0, #31
 800356a:	f000 8092 	beq.w	8003692 <_dtoa_r+0x92a>
 800356e:	f1c0 0320 	rsb	r3, r0, #32
 8003572:	2b04      	cmp	r3, #4
 8003574:	f340 808a 	ble.w	800368c <_dtoa_r+0x924>
 8003578:	f1c0 001c 	rsb	r0, r0, #28
 800357c:	9b06      	ldr	r3, [sp, #24]
 800357e:	4407      	add	r7, r0
 8003580:	4403      	add	r3, r0
 8003582:	9306      	str	r3, [sp, #24]
 8003584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003586:	4403      	add	r3, r0
 8003588:	9309      	str	r3, [sp, #36]	; 0x24
 800358a:	9b06      	ldr	r3, [sp, #24]
 800358c:	2b00      	cmp	r3, #0
 800358e:	dd05      	ble.n	800359c <_dtoa_r+0x834>
 8003590:	4651      	mov	r1, sl
 8003592:	461a      	mov	r2, r3
 8003594:	4628      	mov	r0, r5
 8003596:	f000 fc0b 	bl	8003db0 <__lshift>
 800359a:	4682      	mov	sl, r0
 800359c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800359e:	2b00      	cmp	r3, #0
 80035a0:	dd05      	ble.n	80035ae <_dtoa_r+0x846>
 80035a2:	4621      	mov	r1, r4
 80035a4:	461a      	mov	r2, r3
 80035a6:	4628      	mov	r0, r5
 80035a8:	f000 fc02 	bl	8003db0 <__lshift>
 80035ac:	4604      	mov	r4, r0
 80035ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d070      	beq.n	8003696 <_dtoa_r+0x92e>
 80035b4:	4621      	mov	r1, r4
 80035b6:	4650      	mov	r0, sl
 80035b8:	f000 fc66 	bl	8003e88 <__mcmp>
 80035bc:	2800      	cmp	r0, #0
 80035be:	da6a      	bge.n	8003696 <_dtoa_r+0x92e>
 80035c0:	2300      	movs	r3, #0
 80035c2:	4651      	mov	r1, sl
 80035c4:	220a      	movs	r2, #10
 80035c6:	4628      	mov	r0, r5
 80035c8:	f000 fa46 	bl	8003a58 <__multadd>
 80035cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035ce:	4682      	mov	sl, r0
 80035d0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8193 	beq.w	8003900 <_dtoa_r+0xb98>
 80035da:	4631      	mov	r1, r6
 80035dc:	2300      	movs	r3, #0
 80035de:	220a      	movs	r2, #10
 80035e0:	4628      	mov	r0, r5
 80035e2:	f000 fa39 	bl	8003a58 <__multadd>
 80035e6:	f1bb 0f00 	cmp.w	fp, #0
 80035ea:	4606      	mov	r6, r0
 80035ec:	f300 8093 	bgt.w	8003716 <_dtoa_r+0x9ae>
 80035f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	dc57      	bgt.n	80036a6 <_dtoa_r+0x93e>
 80035f6:	e08e      	b.n	8003716 <_dtoa_r+0x9ae>
 80035f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80035fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80035fe:	e756      	b.n	80034ae <_dtoa_r+0x746>
 8003600:	9b02      	ldr	r3, [sp, #8]
 8003602:	1e5c      	subs	r4, r3, #1
 8003604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003606:	42a3      	cmp	r3, r4
 8003608:	bfb7      	itett	lt
 800360a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800360c:	1b1c      	subge	r4, r3, r4
 800360e:	1ae2      	sublt	r2, r4, r3
 8003610:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003612:	bfbe      	ittt	lt
 8003614:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003616:	189b      	addlt	r3, r3, r2
 8003618:	930e      	strlt	r3, [sp, #56]	; 0x38
 800361a:	9b02      	ldr	r3, [sp, #8]
 800361c:	bfb8      	it	lt
 800361e:	2400      	movlt	r4, #0
 8003620:	2b00      	cmp	r3, #0
 8003622:	bfbb      	ittet	lt
 8003624:	9b06      	ldrlt	r3, [sp, #24]
 8003626:	9a02      	ldrlt	r2, [sp, #8]
 8003628:	9f06      	ldrge	r7, [sp, #24]
 800362a:	1a9f      	sublt	r7, r3, r2
 800362c:	bfac      	ite	ge
 800362e:	9b02      	ldrge	r3, [sp, #8]
 8003630:	2300      	movlt	r3, #0
 8003632:	e73e      	b.n	80034b2 <_dtoa_r+0x74a>
 8003634:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003636:	9f06      	ldr	r7, [sp, #24]
 8003638:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800363a:	e745      	b.n	80034c8 <_dtoa_r+0x760>
 800363c:	3fe00000 	.word	0x3fe00000
 8003640:	40240000 	.word	0x40240000
 8003644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003646:	e76a      	b.n	800351e <_dtoa_r+0x7b6>
 8003648:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800364a:	2b01      	cmp	r3, #1
 800364c:	dc19      	bgt.n	8003682 <_dtoa_r+0x91a>
 800364e:	9b04      	ldr	r3, [sp, #16]
 8003650:	b9bb      	cbnz	r3, 8003682 <_dtoa_r+0x91a>
 8003652:	9b05      	ldr	r3, [sp, #20]
 8003654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003658:	b99b      	cbnz	r3, 8003682 <_dtoa_r+0x91a>
 800365a:	9b05      	ldr	r3, [sp, #20]
 800365c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003660:	0d1b      	lsrs	r3, r3, #20
 8003662:	051b      	lsls	r3, r3, #20
 8003664:	b183      	cbz	r3, 8003688 <_dtoa_r+0x920>
 8003666:	f04f 0801 	mov.w	r8, #1
 800366a:	9b06      	ldr	r3, [sp, #24]
 800366c:	3301      	adds	r3, #1
 800366e:	9306      	str	r3, [sp, #24]
 8003670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003672:	3301      	adds	r3, #1
 8003674:	9309      	str	r3, [sp, #36]	; 0x24
 8003676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003678:	2b00      	cmp	r3, #0
 800367a:	f47f af6a 	bne.w	8003552 <_dtoa_r+0x7ea>
 800367e:	2001      	movs	r0, #1
 8003680:	e76f      	b.n	8003562 <_dtoa_r+0x7fa>
 8003682:	f04f 0800 	mov.w	r8, #0
 8003686:	e7f6      	b.n	8003676 <_dtoa_r+0x90e>
 8003688:	4698      	mov	r8, r3
 800368a:	e7f4      	b.n	8003676 <_dtoa_r+0x90e>
 800368c:	f43f af7d 	beq.w	800358a <_dtoa_r+0x822>
 8003690:	4618      	mov	r0, r3
 8003692:	301c      	adds	r0, #28
 8003694:	e772      	b.n	800357c <_dtoa_r+0x814>
 8003696:	9b02      	ldr	r3, [sp, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	dc36      	bgt.n	800370a <_dtoa_r+0x9a2>
 800369c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800369e:	2b02      	cmp	r3, #2
 80036a0:	dd33      	ble.n	800370a <_dtoa_r+0x9a2>
 80036a2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80036a6:	f1bb 0f00 	cmp.w	fp, #0
 80036aa:	d10d      	bne.n	80036c8 <_dtoa_r+0x960>
 80036ac:	4621      	mov	r1, r4
 80036ae:	465b      	mov	r3, fp
 80036b0:	2205      	movs	r2, #5
 80036b2:	4628      	mov	r0, r5
 80036b4:	f000 f9d0 	bl	8003a58 <__multadd>
 80036b8:	4601      	mov	r1, r0
 80036ba:	4604      	mov	r4, r0
 80036bc:	4650      	mov	r0, sl
 80036be:	f000 fbe3 	bl	8003e88 <__mcmp>
 80036c2:	2800      	cmp	r0, #0
 80036c4:	f73f adb6 	bgt.w	8003234 <_dtoa_r+0x4cc>
 80036c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80036ca:	9f08      	ldr	r7, [sp, #32]
 80036cc:	ea6f 0903 	mvn.w	r9, r3
 80036d0:	f04f 0800 	mov.w	r8, #0
 80036d4:	4621      	mov	r1, r4
 80036d6:	4628      	mov	r0, r5
 80036d8:	f000 f99c 	bl	8003a14 <_Bfree>
 80036dc:	2e00      	cmp	r6, #0
 80036de:	f43f aea4 	beq.w	800342a <_dtoa_r+0x6c2>
 80036e2:	f1b8 0f00 	cmp.w	r8, #0
 80036e6:	d005      	beq.n	80036f4 <_dtoa_r+0x98c>
 80036e8:	45b0      	cmp	r8, r6
 80036ea:	d003      	beq.n	80036f4 <_dtoa_r+0x98c>
 80036ec:	4641      	mov	r1, r8
 80036ee:	4628      	mov	r0, r5
 80036f0:	f000 f990 	bl	8003a14 <_Bfree>
 80036f4:	4631      	mov	r1, r6
 80036f6:	4628      	mov	r0, r5
 80036f8:	f000 f98c 	bl	8003a14 <_Bfree>
 80036fc:	e695      	b.n	800342a <_dtoa_r+0x6c2>
 80036fe:	2400      	movs	r4, #0
 8003700:	4626      	mov	r6, r4
 8003702:	e7e1      	b.n	80036c8 <_dtoa_r+0x960>
 8003704:	46c1      	mov	r9, r8
 8003706:	4626      	mov	r6, r4
 8003708:	e594      	b.n	8003234 <_dtoa_r+0x4cc>
 800370a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800370c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80fc 	beq.w	800390e <_dtoa_r+0xba6>
 8003716:	2f00      	cmp	r7, #0
 8003718:	dd05      	ble.n	8003726 <_dtoa_r+0x9be>
 800371a:	4631      	mov	r1, r6
 800371c:	463a      	mov	r2, r7
 800371e:	4628      	mov	r0, r5
 8003720:	f000 fb46 	bl	8003db0 <__lshift>
 8003724:	4606      	mov	r6, r0
 8003726:	f1b8 0f00 	cmp.w	r8, #0
 800372a:	d05c      	beq.n	80037e6 <_dtoa_r+0xa7e>
 800372c:	4628      	mov	r0, r5
 800372e:	6871      	ldr	r1, [r6, #4]
 8003730:	f000 f930 	bl	8003994 <_Balloc>
 8003734:	4607      	mov	r7, r0
 8003736:	b928      	cbnz	r0, 8003744 <_dtoa_r+0x9dc>
 8003738:	4602      	mov	r2, r0
 800373a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800373e:	4b7e      	ldr	r3, [pc, #504]	; (8003938 <_dtoa_r+0xbd0>)
 8003740:	f7ff bb26 	b.w	8002d90 <_dtoa_r+0x28>
 8003744:	6932      	ldr	r2, [r6, #16]
 8003746:	f106 010c 	add.w	r1, r6, #12
 800374a:	3202      	adds	r2, #2
 800374c:	0092      	lsls	r2, r2, #2
 800374e:	300c      	adds	r0, #12
 8003750:	f000 f912 	bl	8003978 <memcpy>
 8003754:	2201      	movs	r2, #1
 8003756:	4639      	mov	r1, r7
 8003758:	4628      	mov	r0, r5
 800375a:	f000 fb29 	bl	8003db0 <__lshift>
 800375e:	46b0      	mov	r8, r6
 8003760:	4606      	mov	r6, r0
 8003762:	9b08      	ldr	r3, [sp, #32]
 8003764:	3301      	adds	r3, #1
 8003766:	9302      	str	r3, [sp, #8]
 8003768:	9b08      	ldr	r3, [sp, #32]
 800376a:	445b      	add	r3, fp
 800376c:	930a      	str	r3, [sp, #40]	; 0x28
 800376e:	9b04      	ldr	r3, [sp, #16]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	9309      	str	r3, [sp, #36]	; 0x24
 8003776:	9b02      	ldr	r3, [sp, #8]
 8003778:	4621      	mov	r1, r4
 800377a:	4650      	mov	r0, sl
 800377c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8003780:	f7ff fa64 	bl	8002c4c <quorem>
 8003784:	4603      	mov	r3, r0
 8003786:	4641      	mov	r1, r8
 8003788:	3330      	adds	r3, #48	; 0x30
 800378a:	9004      	str	r0, [sp, #16]
 800378c:	4650      	mov	r0, sl
 800378e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003790:	f000 fb7a 	bl	8003e88 <__mcmp>
 8003794:	4632      	mov	r2, r6
 8003796:	9006      	str	r0, [sp, #24]
 8003798:	4621      	mov	r1, r4
 800379a:	4628      	mov	r0, r5
 800379c:	f000 fb90 	bl	8003ec0 <__mdiff>
 80037a0:	68c2      	ldr	r2, [r0, #12]
 80037a2:	4607      	mov	r7, r0
 80037a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037a6:	bb02      	cbnz	r2, 80037ea <_dtoa_r+0xa82>
 80037a8:	4601      	mov	r1, r0
 80037aa:	4650      	mov	r0, sl
 80037ac:	f000 fb6c 	bl	8003e88 <__mcmp>
 80037b0:	4602      	mov	r2, r0
 80037b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037b4:	4639      	mov	r1, r7
 80037b6:	4628      	mov	r0, r5
 80037b8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80037bc:	f000 f92a 	bl	8003a14 <_Bfree>
 80037c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037c4:	9f02      	ldr	r7, [sp, #8]
 80037c6:	ea43 0102 	orr.w	r1, r3, r2
 80037ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037cc:	430b      	orrs	r3, r1
 80037ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037d0:	d10d      	bne.n	80037ee <_dtoa_r+0xa86>
 80037d2:	2b39      	cmp	r3, #57	; 0x39
 80037d4:	d027      	beq.n	8003826 <_dtoa_r+0xabe>
 80037d6:	9a06      	ldr	r2, [sp, #24]
 80037d8:	2a00      	cmp	r2, #0
 80037da:	dd01      	ble.n	80037e0 <_dtoa_r+0xa78>
 80037dc:	9b04      	ldr	r3, [sp, #16]
 80037de:	3331      	adds	r3, #49	; 0x31
 80037e0:	f88b 3000 	strb.w	r3, [fp]
 80037e4:	e776      	b.n	80036d4 <_dtoa_r+0x96c>
 80037e6:	4630      	mov	r0, r6
 80037e8:	e7b9      	b.n	800375e <_dtoa_r+0x9f6>
 80037ea:	2201      	movs	r2, #1
 80037ec:	e7e2      	b.n	80037b4 <_dtoa_r+0xa4c>
 80037ee:	9906      	ldr	r1, [sp, #24]
 80037f0:	2900      	cmp	r1, #0
 80037f2:	db04      	blt.n	80037fe <_dtoa_r+0xa96>
 80037f4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80037f6:	4301      	orrs	r1, r0
 80037f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037fa:	4301      	orrs	r1, r0
 80037fc:	d120      	bne.n	8003840 <_dtoa_r+0xad8>
 80037fe:	2a00      	cmp	r2, #0
 8003800:	ddee      	ble.n	80037e0 <_dtoa_r+0xa78>
 8003802:	4651      	mov	r1, sl
 8003804:	2201      	movs	r2, #1
 8003806:	4628      	mov	r0, r5
 8003808:	9302      	str	r3, [sp, #8]
 800380a:	f000 fad1 	bl	8003db0 <__lshift>
 800380e:	4621      	mov	r1, r4
 8003810:	4682      	mov	sl, r0
 8003812:	f000 fb39 	bl	8003e88 <__mcmp>
 8003816:	2800      	cmp	r0, #0
 8003818:	9b02      	ldr	r3, [sp, #8]
 800381a:	dc02      	bgt.n	8003822 <_dtoa_r+0xaba>
 800381c:	d1e0      	bne.n	80037e0 <_dtoa_r+0xa78>
 800381e:	07da      	lsls	r2, r3, #31
 8003820:	d5de      	bpl.n	80037e0 <_dtoa_r+0xa78>
 8003822:	2b39      	cmp	r3, #57	; 0x39
 8003824:	d1da      	bne.n	80037dc <_dtoa_r+0xa74>
 8003826:	2339      	movs	r3, #57	; 0x39
 8003828:	f88b 3000 	strb.w	r3, [fp]
 800382c:	463b      	mov	r3, r7
 800382e:	461f      	mov	r7, r3
 8003830:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003834:	3b01      	subs	r3, #1
 8003836:	2a39      	cmp	r2, #57	; 0x39
 8003838:	d050      	beq.n	80038dc <_dtoa_r+0xb74>
 800383a:	3201      	adds	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e749      	b.n	80036d4 <_dtoa_r+0x96c>
 8003840:	2a00      	cmp	r2, #0
 8003842:	dd03      	ble.n	800384c <_dtoa_r+0xae4>
 8003844:	2b39      	cmp	r3, #57	; 0x39
 8003846:	d0ee      	beq.n	8003826 <_dtoa_r+0xabe>
 8003848:	3301      	adds	r3, #1
 800384a:	e7c9      	b.n	80037e0 <_dtoa_r+0xa78>
 800384c:	9a02      	ldr	r2, [sp, #8]
 800384e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003850:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003854:	428a      	cmp	r2, r1
 8003856:	d02a      	beq.n	80038ae <_dtoa_r+0xb46>
 8003858:	4651      	mov	r1, sl
 800385a:	2300      	movs	r3, #0
 800385c:	220a      	movs	r2, #10
 800385e:	4628      	mov	r0, r5
 8003860:	f000 f8fa 	bl	8003a58 <__multadd>
 8003864:	45b0      	cmp	r8, r6
 8003866:	4682      	mov	sl, r0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	f04f 020a 	mov.w	r2, #10
 8003870:	4641      	mov	r1, r8
 8003872:	4628      	mov	r0, r5
 8003874:	d107      	bne.n	8003886 <_dtoa_r+0xb1e>
 8003876:	f000 f8ef 	bl	8003a58 <__multadd>
 800387a:	4680      	mov	r8, r0
 800387c:	4606      	mov	r6, r0
 800387e:	9b02      	ldr	r3, [sp, #8]
 8003880:	3301      	adds	r3, #1
 8003882:	9302      	str	r3, [sp, #8]
 8003884:	e777      	b.n	8003776 <_dtoa_r+0xa0e>
 8003886:	f000 f8e7 	bl	8003a58 <__multadd>
 800388a:	4631      	mov	r1, r6
 800388c:	4680      	mov	r8, r0
 800388e:	2300      	movs	r3, #0
 8003890:	220a      	movs	r2, #10
 8003892:	4628      	mov	r0, r5
 8003894:	f000 f8e0 	bl	8003a58 <__multadd>
 8003898:	4606      	mov	r6, r0
 800389a:	e7f0      	b.n	800387e <_dtoa_r+0xb16>
 800389c:	f1bb 0f00 	cmp.w	fp, #0
 80038a0:	bfcc      	ite	gt
 80038a2:	465f      	movgt	r7, fp
 80038a4:	2701      	movle	r7, #1
 80038a6:	f04f 0800 	mov.w	r8, #0
 80038aa:	9a08      	ldr	r2, [sp, #32]
 80038ac:	4417      	add	r7, r2
 80038ae:	4651      	mov	r1, sl
 80038b0:	2201      	movs	r2, #1
 80038b2:	4628      	mov	r0, r5
 80038b4:	9302      	str	r3, [sp, #8]
 80038b6:	f000 fa7b 	bl	8003db0 <__lshift>
 80038ba:	4621      	mov	r1, r4
 80038bc:	4682      	mov	sl, r0
 80038be:	f000 fae3 	bl	8003e88 <__mcmp>
 80038c2:	2800      	cmp	r0, #0
 80038c4:	dcb2      	bgt.n	800382c <_dtoa_r+0xac4>
 80038c6:	d102      	bne.n	80038ce <_dtoa_r+0xb66>
 80038c8:	9b02      	ldr	r3, [sp, #8]
 80038ca:	07db      	lsls	r3, r3, #31
 80038cc:	d4ae      	bmi.n	800382c <_dtoa_r+0xac4>
 80038ce:	463b      	mov	r3, r7
 80038d0:	461f      	mov	r7, r3
 80038d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80038d6:	2a30      	cmp	r2, #48	; 0x30
 80038d8:	d0fa      	beq.n	80038d0 <_dtoa_r+0xb68>
 80038da:	e6fb      	b.n	80036d4 <_dtoa_r+0x96c>
 80038dc:	9a08      	ldr	r2, [sp, #32]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d1a5      	bne.n	800382e <_dtoa_r+0xac6>
 80038e2:	2331      	movs	r3, #49	; 0x31
 80038e4:	f109 0901 	add.w	r9, r9, #1
 80038e8:	7013      	strb	r3, [r2, #0]
 80038ea:	e6f3      	b.n	80036d4 <_dtoa_r+0x96c>
 80038ec:	4b13      	ldr	r3, [pc, #76]	; (800393c <_dtoa_r+0xbd4>)
 80038ee:	f7ff baa7 	b.w	8002e40 <_dtoa_r+0xd8>
 80038f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f47f aa80 	bne.w	8002dfa <_dtoa_r+0x92>
 80038fa:	4b11      	ldr	r3, [pc, #68]	; (8003940 <_dtoa_r+0xbd8>)
 80038fc:	f7ff baa0 	b.w	8002e40 <_dtoa_r+0xd8>
 8003900:	f1bb 0f00 	cmp.w	fp, #0
 8003904:	dc03      	bgt.n	800390e <_dtoa_r+0xba6>
 8003906:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003908:	2b02      	cmp	r3, #2
 800390a:	f73f aecc 	bgt.w	80036a6 <_dtoa_r+0x93e>
 800390e:	9f08      	ldr	r7, [sp, #32]
 8003910:	4621      	mov	r1, r4
 8003912:	4650      	mov	r0, sl
 8003914:	f7ff f99a 	bl	8002c4c <quorem>
 8003918:	9a08      	ldr	r2, [sp, #32]
 800391a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800391e:	f807 3b01 	strb.w	r3, [r7], #1
 8003922:	1aba      	subs	r2, r7, r2
 8003924:	4593      	cmp	fp, r2
 8003926:	ddb9      	ble.n	800389c <_dtoa_r+0xb34>
 8003928:	4651      	mov	r1, sl
 800392a:	2300      	movs	r3, #0
 800392c:	220a      	movs	r2, #10
 800392e:	4628      	mov	r0, r5
 8003930:	f000 f892 	bl	8003a58 <__multadd>
 8003934:	4682      	mov	sl, r0
 8003936:	e7eb      	b.n	8003910 <_dtoa_r+0xba8>
 8003938:	0800519b 	.word	0x0800519b
 800393c:	080050f4 	.word	0x080050f4
 8003940:	08005118 	.word	0x08005118

08003944 <_localeconv_r>:
 8003944:	4800      	ldr	r0, [pc, #0]	; (8003948 <_localeconv_r+0x4>)
 8003946:	4770      	bx	lr
 8003948:	20000164 	.word	0x20000164

0800394c <malloc>:
 800394c:	4b02      	ldr	r3, [pc, #8]	; (8003958 <malloc+0xc>)
 800394e:	4601      	mov	r1, r0
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	f000 bbfb 	b.w	800414c <_malloc_r>
 8003956:	bf00      	nop
 8003958:	20000010 	.word	0x20000010

0800395c <memchr>:
 800395c:	4603      	mov	r3, r0
 800395e:	b510      	push	{r4, lr}
 8003960:	b2c9      	uxtb	r1, r1
 8003962:	4402      	add	r2, r0
 8003964:	4293      	cmp	r3, r2
 8003966:	4618      	mov	r0, r3
 8003968:	d101      	bne.n	800396e <memchr+0x12>
 800396a:	2000      	movs	r0, #0
 800396c:	e003      	b.n	8003976 <memchr+0x1a>
 800396e:	7804      	ldrb	r4, [r0, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	428c      	cmp	r4, r1
 8003974:	d1f6      	bne.n	8003964 <memchr+0x8>
 8003976:	bd10      	pop	{r4, pc}

08003978 <memcpy>:
 8003978:	440a      	add	r2, r1
 800397a:	4291      	cmp	r1, r2
 800397c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003980:	d100      	bne.n	8003984 <memcpy+0xc>
 8003982:	4770      	bx	lr
 8003984:	b510      	push	{r4, lr}
 8003986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800398a:	4291      	cmp	r1, r2
 800398c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003990:	d1f9      	bne.n	8003986 <memcpy+0xe>
 8003992:	bd10      	pop	{r4, pc}

08003994 <_Balloc>:
 8003994:	b570      	push	{r4, r5, r6, lr}
 8003996:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003998:	4604      	mov	r4, r0
 800399a:	460d      	mov	r5, r1
 800399c:	b976      	cbnz	r6, 80039bc <_Balloc+0x28>
 800399e:	2010      	movs	r0, #16
 80039a0:	f7ff ffd4 	bl	800394c <malloc>
 80039a4:	4602      	mov	r2, r0
 80039a6:	6260      	str	r0, [r4, #36]	; 0x24
 80039a8:	b920      	cbnz	r0, 80039b4 <_Balloc+0x20>
 80039aa:	2166      	movs	r1, #102	; 0x66
 80039ac:	4b17      	ldr	r3, [pc, #92]	; (8003a0c <_Balloc+0x78>)
 80039ae:	4818      	ldr	r0, [pc, #96]	; (8003a10 <_Balloc+0x7c>)
 80039b0:	f000 fd92 	bl	80044d8 <__assert_func>
 80039b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80039b8:	6006      	str	r6, [r0, #0]
 80039ba:	60c6      	str	r6, [r0, #12]
 80039bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80039be:	68f3      	ldr	r3, [r6, #12]
 80039c0:	b183      	cbz	r3, 80039e4 <_Balloc+0x50>
 80039c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80039ca:	b9b8      	cbnz	r0, 80039fc <_Balloc+0x68>
 80039cc:	2101      	movs	r1, #1
 80039ce:	fa01 f605 	lsl.w	r6, r1, r5
 80039d2:	1d72      	adds	r2, r6, #5
 80039d4:	4620      	mov	r0, r4
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	f000 fb5e 	bl	8004098 <_calloc_r>
 80039dc:	b160      	cbz	r0, 80039f8 <_Balloc+0x64>
 80039de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80039e2:	e00e      	b.n	8003a02 <_Balloc+0x6e>
 80039e4:	2221      	movs	r2, #33	; 0x21
 80039e6:	2104      	movs	r1, #4
 80039e8:	4620      	mov	r0, r4
 80039ea:	f000 fb55 	bl	8004098 <_calloc_r>
 80039ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039f0:	60f0      	str	r0, [r6, #12]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e4      	bne.n	80039c2 <_Balloc+0x2e>
 80039f8:	2000      	movs	r0, #0
 80039fa:	bd70      	pop	{r4, r5, r6, pc}
 80039fc:	6802      	ldr	r2, [r0, #0]
 80039fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003a02:	2300      	movs	r3, #0
 8003a04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003a08:	e7f7      	b.n	80039fa <_Balloc+0x66>
 8003a0a:	bf00      	nop
 8003a0c:	08005125 	.word	0x08005125
 8003a10:	080051ac 	.word	0x080051ac

08003a14 <_Bfree>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003a18:	4605      	mov	r5, r0
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	b976      	cbnz	r6, 8003a3c <_Bfree+0x28>
 8003a1e:	2010      	movs	r0, #16
 8003a20:	f7ff ff94 	bl	800394c <malloc>
 8003a24:	4602      	mov	r2, r0
 8003a26:	6268      	str	r0, [r5, #36]	; 0x24
 8003a28:	b920      	cbnz	r0, 8003a34 <_Bfree+0x20>
 8003a2a:	218a      	movs	r1, #138	; 0x8a
 8003a2c:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <_Bfree+0x3c>)
 8003a2e:	4809      	ldr	r0, [pc, #36]	; (8003a54 <_Bfree+0x40>)
 8003a30:	f000 fd52 	bl	80044d8 <__assert_func>
 8003a34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003a38:	6006      	str	r6, [r0, #0]
 8003a3a:	60c6      	str	r6, [r0, #12]
 8003a3c:	b13c      	cbz	r4, 8003a4e <_Bfree+0x3a>
 8003a3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003a40:	6862      	ldr	r2, [r4, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a48:	6021      	str	r1, [r4, #0]
 8003a4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
 8003a50:	08005125 	.word	0x08005125
 8003a54:	080051ac 	.word	0x080051ac

08003a58 <__multadd>:
 8003a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a5c:	4698      	mov	r8, r3
 8003a5e:	460c      	mov	r4, r1
 8003a60:	2300      	movs	r3, #0
 8003a62:	690e      	ldr	r6, [r1, #16]
 8003a64:	4607      	mov	r7, r0
 8003a66:	f101 0014 	add.w	r0, r1, #20
 8003a6a:	6805      	ldr	r5, [r0, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	b2a9      	uxth	r1, r5
 8003a70:	fb02 8101 	mla	r1, r2, r1, r8
 8003a74:	0c2d      	lsrs	r5, r5, #16
 8003a76:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8003a7a:	fb02 c505 	mla	r5, r2, r5, ip
 8003a7e:	b289      	uxth	r1, r1
 8003a80:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8003a84:	429e      	cmp	r6, r3
 8003a86:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8003a8a:	f840 1b04 	str.w	r1, [r0], #4
 8003a8e:	dcec      	bgt.n	8003a6a <__multadd+0x12>
 8003a90:	f1b8 0f00 	cmp.w	r8, #0
 8003a94:	d022      	beq.n	8003adc <__multadd+0x84>
 8003a96:	68a3      	ldr	r3, [r4, #8]
 8003a98:	42b3      	cmp	r3, r6
 8003a9a:	dc19      	bgt.n	8003ad0 <__multadd+0x78>
 8003a9c:	6861      	ldr	r1, [r4, #4]
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	3101      	adds	r1, #1
 8003aa2:	f7ff ff77 	bl	8003994 <_Balloc>
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	b928      	cbnz	r0, 8003ab6 <__multadd+0x5e>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	21b5      	movs	r1, #181	; 0xb5
 8003aae:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <__multadd+0x8c>)
 8003ab0:	480d      	ldr	r0, [pc, #52]	; (8003ae8 <__multadd+0x90>)
 8003ab2:	f000 fd11 	bl	80044d8 <__assert_func>
 8003ab6:	6922      	ldr	r2, [r4, #16]
 8003ab8:	f104 010c 	add.w	r1, r4, #12
 8003abc:	3202      	adds	r2, #2
 8003abe:	0092      	lsls	r2, r2, #2
 8003ac0:	300c      	adds	r0, #12
 8003ac2:	f7ff ff59 	bl	8003978 <memcpy>
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	4638      	mov	r0, r7
 8003aca:	f7ff ffa3 	bl	8003a14 <_Bfree>
 8003ace:	462c      	mov	r4, r5
 8003ad0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8003ad4:	3601      	adds	r6, #1
 8003ad6:	f8c3 8014 	str.w	r8, [r3, #20]
 8003ada:	6126      	str	r6, [r4, #16]
 8003adc:	4620      	mov	r0, r4
 8003ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ae2:	bf00      	nop
 8003ae4:	0800519b 	.word	0x0800519b
 8003ae8:	080051ac 	.word	0x080051ac

08003aec <__hi0bits>:
 8003aec:	0c02      	lsrs	r2, r0, #16
 8003aee:	0412      	lsls	r2, r2, #16
 8003af0:	4603      	mov	r3, r0
 8003af2:	b9ca      	cbnz	r2, 8003b28 <__hi0bits+0x3c>
 8003af4:	0403      	lsls	r3, r0, #16
 8003af6:	2010      	movs	r0, #16
 8003af8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003afc:	bf04      	itt	eq
 8003afe:	021b      	lsleq	r3, r3, #8
 8003b00:	3008      	addeq	r0, #8
 8003b02:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003b06:	bf04      	itt	eq
 8003b08:	011b      	lsleq	r3, r3, #4
 8003b0a:	3004      	addeq	r0, #4
 8003b0c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003b10:	bf04      	itt	eq
 8003b12:	009b      	lsleq	r3, r3, #2
 8003b14:	3002      	addeq	r0, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	db05      	blt.n	8003b26 <__hi0bits+0x3a>
 8003b1a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003b1e:	f100 0001 	add.w	r0, r0, #1
 8003b22:	bf08      	it	eq
 8003b24:	2020      	moveq	r0, #32
 8003b26:	4770      	bx	lr
 8003b28:	2000      	movs	r0, #0
 8003b2a:	e7e5      	b.n	8003af8 <__hi0bits+0xc>

08003b2c <__lo0bits>:
 8003b2c:	6803      	ldr	r3, [r0, #0]
 8003b2e:	4602      	mov	r2, r0
 8003b30:	f013 0007 	ands.w	r0, r3, #7
 8003b34:	d00b      	beq.n	8003b4e <__lo0bits+0x22>
 8003b36:	07d9      	lsls	r1, r3, #31
 8003b38:	d422      	bmi.n	8003b80 <__lo0bits+0x54>
 8003b3a:	0798      	lsls	r0, r3, #30
 8003b3c:	bf49      	itett	mi
 8003b3e:	085b      	lsrmi	r3, r3, #1
 8003b40:	089b      	lsrpl	r3, r3, #2
 8003b42:	2001      	movmi	r0, #1
 8003b44:	6013      	strmi	r3, [r2, #0]
 8003b46:	bf5c      	itt	pl
 8003b48:	2002      	movpl	r0, #2
 8003b4a:	6013      	strpl	r3, [r2, #0]
 8003b4c:	4770      	bx	lr
 8003b4e:	b299      	uxth	r1, r3
 8003b50:	b909      	cbnz	r1, 8003b56 <__lo0bits+0x2a>
 8003b52:	2010      	movs	r0, #16
 8003b54:	0c1b      	lsrs	r3, r3, #16
 8003b56:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003b5a:	bf04      	itt	eq
 8003b5c:	0a1b      	lsreq	r3, r3, #8
 8003b5e:	3008      	addeq	r0, #8
 8003b60:	0719      	lsls	r1, r3, #28
 8003b62:	bf04      	itt	eq
 8003b64:	091b      	lsreq	r3, r3, #4
 8003b66:	3004      	addeq	r0, #4
 8003b68:	0799      	lsls	r1, r3, #30
 8003b6a:	bf04      	itt	eq
 8003b6c:	089b      	lsreq	r3, r3, #2
 8003b6e:	3002      	addeq	r0, #2
 8003b70:	07d9      	lsls	r1, r3, #31
 8003b72:	d403      	bmi.n	8003b7c <__lo0bits+0x50>
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	f100 0001 	add.w	r0, r0, #1
 8003b7a:	d003      	beq.n	8003b84 <__lo0bits+0x58>
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4770      	bx	lr
 8003b80:	2000      	movs	r0, #0
 8003b82:	4770      	bx	lr
 8003b84:	2020      	movs	r0, #32
 8003b86:	4770      	bx	lr

08003b88 <__i2b>:
 8003b88:	b510      	push	{r4, lr}
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	f7ff ff01 	bl	8003994 <_Balloc>
 8003b92:	4602      	mov	r2, r0
 8003b94:	b928      	cbnz	r0, 8003ba2 <__i2b+0x1a>
 8003b96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003b9a:	4b04      	ldr	r3, [pc, #16]	; (8003bac <__i2b+0x24>)
 8003b9c:	4804      	ldr	r0, [pc, #16]	; (8003bb0 <__i2b+0x28>)
 8003b9e:	f000 fc9b 	bl	80044d8 <__assert_func>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	6144      	str	r4, [r0, #20]
 8003ba6:	6103      	str	r3, [r0, #16]
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	bf00      	nop
 8003bac:	0800519b 	.word	0x0800519b
 8003bb0:	080051ac 	.word	0x080051ac

08003bb4 <__multiply>:
 8003bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb8:	4614      	mov	r4, r2
 8003bba:	690a      	ldr	r2, [r1, #16]
 8003bbc:	6923      	ldr	r3, [r4, #16]
 8003bbe:	460d      	mov	r5, r1
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	bfbe      	ittt	lt
 8003bc4:	460b      	movlt	r3, r1
 8003bc6:	4625      	movlt	r5, r4
 8003bc8:	461c      	movlt	r4, r3
 8003bca:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8003bce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003bd2:	68ab      	ldr	r3, [r5, #8]
 8003bd4:	6869      	ldr	r1, [r5, #4]
 8003bd6:	eb0a 0709 	add.w	r7, sl, r9
 8003bda:	42bb      	cmp	r3, r7
 8003bdc:	b085      	sub	sp, #20
 8003bde:	bfb8      	it	lt
 8003be0:	3101      	addlt	r1, #1
 8003be2:	f7ff fed7 	bl	8003994 <_Balloc>
 8003be6:	b930      	cbnz	r0, 8003bf6 <__multiply+0x42>
 8003be8:	4602      	mov	r2, r0
 8003bea:	f240 115d 	movw	r1, #349	; 0x15d
 8003bee:	4b41      	ldr	r3, [pc, #260]	; (8003cf4 <__multiply+0x140>)
 8003bf0:	4841      	ldr	r0, [pc, #260]	; (8003cf8 <__multiply+0x144>)
 8003bf2:	f000 fc71 	bl	80044d8 <__assert_func>
 8003bf6:	f100 0614 	add.w	r6, r0, #20
 8003bfa:	4633      	mov	r3, r6
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8003c02:	4543      	cmp	r3, r8
 8003c04:	d31e      	bcc.n	8003c44 <__multiply+0x90>
 8003c06:	f105 0c14 	add.w	ip, r5, #20
 8003c0a:	f104 0314 	add.w	r3, r4, #20
 8003c0e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8003c12:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8003c16:	9202      	str	r2, [sp, #8]
 8003c18:	ebac 0205 	sub.w	r2, ip, r5
 8003c1c:	3a15      	subs	r2, #21
 8003c1e:	f022 0203 	bic.w	r2, r2, #3
 8003c22:	3204      	adds	r2, #4
 8003c24:	f105 0115 	add.w	r1, r5, #21
 8003c28:	458c      	cmp	ip, r1
 8003c2a:	bf38      	it	cc
 8003c2c:	2204      	movcc	r2, #4
 8003c2e:	9201      	str	r2, [sp, #4]
 8003c30:	9a02      	ldr	r2, [sp, #8]
 8003c32:	9303      	str	r3, [sp, #12]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d808      	bhi.n	8003c4a <__multiply+0x96>
 8003c38:	2f00      	cmp	r7, #0
 8003c3a:	dc55      	bgt.n	8003ce8 <__multiply+0x134>
 8003c3c:	6107      	str	r7, [r0, #16]
 8003c3e:	b005      	add	sp, #20
 8003c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c44:	f843 2b04 	str.w	r2, [r3], #4
 8003c48:	e7db      	b.n	8003c02 <__multiply+0x4e>
 8003c4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8003c4e:	f1ba 0f00 	cmp.w	sl, #0
 8003c52:	d020      	beq.n	8003c96 <__multiply+0xe2>
 8003c54:	46b1      	mov	r9, r6
 8003c56:	2200      	movs	r2, #0
 8003c58:	f105 0e14 	add.w	lr, r5, #20
 8003c5c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003c60:	f8d9 b000 	ldr.w	fp, [r9]
 8003c64:	b2a1      	uxth	r1, r4
 8003c66:	fa1f fb8b 	uxth.w	fp, fp
 8003c6a:	fb0a b101 	mla	r1, sl, r1, fp
 8003c6e:	4411      	add	r1, r2
 8003c70:	f8d9 2000 	ldr.w	r2, [r9]
 8003c74:	0c24      	lsrs	r4, r4, #16
 8003c76:	0c12      	lsrs	r2, r2, #16
 8003c78:	fb0a 2404 	mla	r4, sl, r4, r2
 8003c7c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8003c80:	b289      	uxth	r1, r1
 8003c82:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003c86:	45f4      	cmp	ip, lr
 8003c88:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8003c8c:	f849 1b04 	str.w	r1, [r9], #4
 8003c90:	d8e4      	bhi.n	8003c5c <__multiply+0xa8>
 8003c92:	9901      	ldr	r1, [sp, #4]
 8003c94:	5072      	str	r2, [r6, r1]
 8003c96:	9a03      	ldr	r2, [sp, #12]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003c9e:	f1b9 0f00 	cmp.w	r9, #0
 8003ca2:	d01f      	beq.n	8003ce4 <__multiply+0x130>
 8003ca4:	46b6      	mov	lr, r6
 8003ca6:	f04f 0a00 	mov.w	sl, #0
 8003caa:	6834      	ldr	r4, [r6, #0]
 8003cac:	f105 0114 	add.w	r1, r5, #20
 8003cb0:	880a      	ldrh	r2, [r1, #0]
 8003cb2:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003cb6:	b2a4      	uxth	r4, r4
 8003cb8:	fb09 b202 	mla	r2, r9, r2, fp
 8003cbc:	4492      	add	sl, r2
 8003cbe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8003cc2:	f84e 4b04 	str.w	r4, [lr], #4
 8003cc6:	f851 4b04 	ldr.w	r4, [r1], #4
 8003cca:	f8be 2000 	ldrh.w	r2, [lr]
 8003cce:	0c24      	lsrs	r4, r4, #16
 8003cd0:	fb09 2404 	mla	r4, r9, r4, r2
 8003cd4:	458c      	cmp	ip, r1
 8003cd6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8003cda:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003cde:	d8e7      	bhi.n	8003cb0 <__multiply+0xfc>
 8003ce0:	9a01      	ldr	r2, [sp, #4]
 8003ce2:	50b4      	str	r4, [r6, r2]
 8003ce4:	3604      	adds	r6, #4
 8003ce6:	e7a3      	b.n	8003c30 <__multiply+0x7c>
 8003ce8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1a5      	bne.n	8003c3c <__multiply+0x88>
 8003cf0:	3f01      	subs	r7, #1
 8003cf2:	e7a1      	b.n	8003c38 <__multiply+0x84>
 8003cf4:	0800519b 	.word	0x0800519b
 8003cf8:	080051ac 	.word	0x080051ac

08003cfc <__pow5mult>:
 8003cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d00:	4615      	mov	r5, r2
 8003d02:	f012 0203 	ands.w	r2, r2, #3
 8003d06:	4606      	mov	r6, r0
 8003d08:	460f      	mov	r7, r1
 8003d0a:	d007      	beq.n	8003d1c <__pow5mult+0x20>
 8003d0c:	4c25      	ldr	r4, [pc, #148]	; (8003da4 <__pow5mult+0xa8>)
 8003d0e:	3a01      	subs	r2, #1
 8003d10:	2300      	movs	r3, #0
 8003d12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003d16:	f7ff fe9f 	bl	8003a58 <__multadd>
 8003d1a:	4607      	mov	r7, r0
 8003d1c:	10ad      	asrs	r5, r5, #2
 8003d1e:	d03d      	beq.n	8003d9c <__pow5mult+0xa0>
 8003d20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003d22:	b97c      	cbnz	r4, 8003d44 <__pow5mult+0x48>
 8003d24:	2010      	movs	r0, #16
 8003d26:	f7ff fe11 	bl	800394c <malloc>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	6270      	str	r0, [r6, #36]	; 0x24
 8003d2e:	b928      	cbnz	r0, 8003d3c <__pow5mult+0x40>
 8003d30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003d34:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <__pow5mult+0xac>)
 8003d36:	481d      	ldr	r0, [pc, #116]	; (8003dac <__pow5mult+0xb0>)
 8003d38:	f000 fbce 	bl	80044d8 <__assert_func>
 8003d3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003d40:	6004      	str	r4, [r0, #0]
 8003d42:	60c4      	str	r4, [r0, #12]
 8003d44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003d48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003d4c:	b94c      	cbnz	r4, 8003d62 <__pow5mult+0x66>
 8003d4e:	f240 2171 	movw	r1, #625	; 0x271
 8003d52:	4630      	mov	r0, r6
 8003d54:	f7ff ff18 	bl	8003b88 <__i2b>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	4604      	mov	r4, r0
 8003d5c:	f8c8 0008 	str.w	r0, [r8, #8]
 8003d60:	6003      	str	r3, [r0, #0]
 8003d62:	f04f 0900 	mov.w	r9, #0
 8003d66:	07eb      	lsls	r3, r5, #31
 8003d68:	d50a      	bpl.n	8003d80 <__pow5mult+0x84>
 8003d6a:	4639      	mov	r1, r7
 8003d6c:	4622      	mov	r2, r4
 8003d6e:	4630      	mov	r0, r6
 8003d70:	f7ff ff20 	bl	8003bb4 <__multiply>
 8003d74:	4680      	mov	r8, r0
 8003d76:	4639      	mov	r1, r7
 8003d78:	4630      	mov	r0, r6
 8003d7a:	f7ff fe4b 	bl	8003a14 <_Bfree>
 8003d7e:	4647      	mov	r7, r8
 8003d80:	106d      	asrs	r5, r5, #1
 8003d82:	d00b      	beq.n	8003d9c <__pow5mult+0xa0>
 8003d84:	6820      	ldr	r0, [r4, #0]
 8003d86:	b938      	cbnz	r0, 8003d98 <__pow5mult+0x9c>
 8003d88:	4622      	mov	r2, r4
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f7ff ff11 	bl	8003bb4 <__multiply>
 8003d92:	6020      	str	r0, [r4, #0]
 8003d94:	f8c0 9000 	str.w	r9, [r0]
 8003d98:	4604      	mov	r4, r0
 8003d9a:	e7e4      	b.n	8003d66 <__pow5mult+0x6a>
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003da2:	bf00      	nop
 8003da4:	08005300 	.word	0x08005300
 8003da8:	08005125 	.word	0x08005125
 8003dac:	080051ac 	.word	0x080051ac

08003db0 <__lshift>:
 8003db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db4:	460c      	mov	r4, r1
 8003db6:	4607      	mov	r7, r0
 8003db8:	4691      	mov	r9, r2
 8003dba:	6923      	ldr	r3, [r4, #16]
 8003dbc:	6849      	ldr	r1, [r1, #4]
 8003dbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003dc2:	68a3      	ldr	r3, [r4, #8]
 8003dc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003dc8:	f108 0601 	add.w	r6, r8, #1
 8003dcc:	42b3      	cmp	r3, r6
 8003dce:	db0b      	blt.n	8003de8 <__lshift+0x38>
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	f7ff fddf 	bl	8003994 <_Balloc>
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	b948      	cbnz	r0, 8003dee <__lshift+0x3e>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003de0:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <__lshift+0xd0>)
 8003de2:	4828      	ldr	r0, [pc, #160]	; (8003e84 <__lshift+0xd4>)
 8003de4:	f000 fb78 	bl	80044d8 <__assert_func>
 8003de8:	3101      	adds	r1, #1
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	e7ee      	b.n	8003dcc <__lshift+0x1c>
 8003dee:	2300      	movs	r3, #0
 8003df0:	f100 0114 	add.w	r1, r0, #20
 8003df4:	f100 0210 	add.w	r2, r0, #16
 8003df8:	4618      	mov	r0, r3
 8003dfa:	4553      	cmp	r3, sl
 8003dfc:	db33      	blt.n	8003e66 <__lshift+0xb6>
 8003dfe:	6920      	ldr	r0, [r4, #16]
 8003e00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003e04:	f104 0314 	add.w	r3, r4, #20
 8003e08:	f019 091f 	ands.w	r9, r9, #31
 8003e0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003e10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003e14:	d02b      	beq.n	8003e6e <__lshift+0xbe>
 8003e16:	468a      	mov	sl, r1
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f1c9 0e20 	rsb	lr, r9, #32
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	fa00 f009 	lsl.w	r0, r0, r9
 8003e24:	4302      	orrs	r2, r0
 8003e26:	f84a 2b04 	str.w	r2, [sl], #4
 8003e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e2e:	459c      	cmp	ip, r3
 8003e30:	fa22 f20e 	lsr.w	r2, r2, lr
 8003e34:	d8f3      	bhi.n	8003e1e <__lshift+0x6e>
 8003e36:	ebac 0304 	sub.w	r3, ip, r4
 8003e3a:	3b15      	subs	r3, #21
 8003e3c:	f023 0303 	bic.w	r3, r3, #3
 8003e40:	3304      	adds	r3, #4
 8003e42:	f104 0015 	add.w	r0, r4, #21
 8003e46:	4584      	cmp	ip, r0
 8003e48:	bf38      	it	cc
 8003e4a:	2304      	movcc	r3, #4
 8003e4c:	50ca      	str	r2, [r1, r3]
 8003e4e:	b10a      	cbz	r2, 8003e54 <__lshift+0xa4>
 8003e50:	f108 0602 	add.w	r6, r8, #2
 8003e54:	3e01      	subs	r6, #1
 8003e56:	4638      	mov	r0, r7
 8003e58:	4621      	mov	r1, r4
 8003e5a:	612e      	str	r6, [r5, #16]
 8003e5c:	f7ff fdda 	bl	8003a14 <_Bfree>
 8003e60:	4628      	mov	r0, r5
 8003e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e66:	f842 0f04 	str.w	r0, [r2, #4]!
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	e7c5      	b.n	8003dfa <__lshift+0x4a>
 8003e6e:	3904      	subs	r1, #4
 8003e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e74:	459c      	cmp	ip, r3
 8003e76:	f841 2f04 	str.w	r2, [r1, #4]!
 8003e7a:	d8f9      	bhi.n	8003e70 <__lshift+0xc0>
 8003e7c:	e7ea      	b.n	8003e54 <__lshift+0xa4>
 8003e7e:	bf00      	nop
 8003e80:	0800519b 	.word	0x0800519b
 8003e84:	080051ac 	.word	0x080051ac

08003e88 <__mcmp>:
 8003e88:	4603      	mov	r3, r0
 8003e8a:	690a      	ldr	r2, [r1, #16]
 8003e8c:	6900      	ldr	r0, [r0, #16]
 8003e8e:	b530      	push	{r4, r5, lr}
 8003e90:	1a80      	subs	r0, r0, r2
 8003e92:	d10d      	bne.n	8003eb0 <__mcmp+0x28>
 8003e94:	3314      	adds	r3, #20
 8003e96:	3114      	adds	r1, #20
 8003e98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003e9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003ea0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003ea4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003ea8:	4295      	cmp	r5, r2
 8003eaa:	d002      	beq.n	8003eb2 <__mcmp+0x2a>
 8003eac:	d304      	bcc.n	8003eb8 <__mcmp+0x30>
 8003eae:	2001      	movs	r0, #1
 8003eb0:	bd30      	pop	{r4, r5, pc}
 8003eb2:	42a3      	cmp	r3, r4
 8003eb4:	d3f4      	bcc.n	8003ea0 <__mcmp+0x18>
 8003eb6:	e7fb      	b.n	8003eb0 <__mcmp+0x28>
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ebc:	e7f8      	b.n	8003eb0 <__mcmp+0x28>
	...

08003ec0 <__mdiff>:
 8003ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec4:	460c      	mov	r4, r1
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4620      	mov	r0, r4
 8003ecc:	4692      	mov	sl, r2
 8003ece:	f7ff ffdb 	bl	8003e88 <__mcmp>
 8003ed2:	1e05      	subs	r5, r0, #0
 8003ed4:	d111      	bne.n	8003efa <__mdiff+0x3a>
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	4630      	mov	r0, r6
 8003eda:	f7ff fd5b 	bl	8003994 <_Balloc>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	b928      	cbnz	r0, 8003eee <__mdiff+0x2e>
 8003ee2:	f240 2132 	movw	r1, #562	; 0x232
 8003ee6:	4b3c      	ldr	r3, [pc, #240]	; (8003fd8 <__mdiff+0x118>)
 8003ee8:	483c      	ldr	r0, [pc, #240]	; (8003fdc <__mdiff+0x11c>)
 8003eea:	f000 faf5 	bl	80044d8 <__assert_func>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003efa:	bfa4      	itt	ge
 8003efc:	4653      	movge	r3, sl
 8003efe:	46a2      	movge	sl, r4
 8003f00:	4630      	mov	r0, r6
 8003f02:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003f06:	bfa6      	itte	ge
 8003f08:	461c      	movge	r4, r3
 8003f0a:	2500      	movge	r5, #0
 8003f0c:	2501      	movlt	r5, #1
 8003f0e:	f7ff fd41 	bl	8003994 <_Balloc>
 8003f12:	4602      	mov	r2, r0
 8003f14:	b918      	cbnz	r0, 8003f1e <__mdiff+0x5e>
 8003f16:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003f1a:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <__mdiff+0x118>)
 8003f1c:	e7e4      	b.n	8003ee8 <__mdiff+0x28>
 8003f1e:	f100 0814 	add.w	r8, r0, #20
 8003f22:	f8da 7010 	ldr.w	r7, [sl, #16]
 8003f26:	60c5      	str	r5, [r0, #12]
 8003f28:	f04f 0c00 	mov.w	ip, #0
 8003f2c:	f10a 0514 	add.w	r5, sl, #20
 8003f30:	f10a 0010 	add.w	r0, sl, #16
 8003f34:	46c2      	mov	sl, r8
 8003f36:	6926      	ldr	r6, [r4, #16]
 8003f38:	f104 0914 	add.w	r9, r4, #20
 8003f3c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8003f40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003f44:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8003f48:	f859 3b04 	ldr.w	r3, [r9], #4
 8003f4c:	fa1f f18b 	uxth.w	r1, fp
 8003f50:	4461      	add	r1, ip
 8003f52:	fa1f fc83 	uxth.w	ip, r3
 8003f56:	0c1b      	lsrs	r3, r3, #16
 8003f58:	eba1 010c 	sub.w	r1, r1, ip
 8003f5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003f60:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003f64:	b289      	uxth	r1, r1
 8003f66:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003f6a:	454e      	cmp	r6, r9
 8003f6c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003f70:	f84a 3b04 	str.w	r3, [sl], #4
 8003f74:	d8e6      	bhi.n	8003f44 <__mdiff+0x84>
 8003f76:	1b33      	subs	r3, r6, r4
 8003f78:	3b15      	subs	r3, #21
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	3415      	adds	r4, #21
 8003f80:	3304      	adds	r3, #4
 8003f82:	42a6      	cmp	r6, r4
 8003f84:	bf38      	it	cc
 8003f86:	2304      	movcc	r3, #4
 8003f88:	441d      	add	r5, r3
 8003f8a:	4443      	add	r3, r8
 8003f8c:	461e      	mov	r6, r3
 8003f8e:	462c      	mov	r4, r5
 8003f90:	4574      	cmp	r4, lr
 8003f92:	d30e      	bcc.n	8003fb2 <__mdiff+0xf2>
 8003f94:	f10e 0103 	add.w	r1, lr, #3
 8003f98:	1b49      	subs	r1, r1, r5
 8003f9a:	f021 0103 	bic.w	r1, r1, #3
 8003f9e:	3d03      	subs	r5, #3
 8003fa0:	45ae      	cmp	lr, r5
 8003fa2:	bf38      	it	cc
 8003fa4:	2100      	movcc	r1, #0
 8003fa6:	4419      	add	r1, r3
 8003fa8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003fac:	b18b      	cbz	r3, 8003fd2 <__mdiff+0x112>
 8003fae:	6117      	str	r7, [r2, #16]
 8003fb0:	e7a0      	b.n	8003ef4 <__mdiff+0x34>
 8003fb2:	f854 8b04 	ldr.w	r8, [r4], #4
 8003fb6:	fa1f f188 	uxth.w	r1, r8
 8003fba:	4461      	add	r1, ip
 8003fbc:	1408      	asrs	r0, r1, #16
 8003fbe:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8003fc2:	b289      	uxth	r1, r1
 8003fc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003fc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003fcc:	f846 1b04 	str.w	r1, [r6], #4
 8003fd0:	e7de      	b.n	8003f90 <__mdiff+0xd0>
 8003fd2:	3f01      	subs	r7, #1
 8003fd4:	e7e8      	b.n	8003fa8 <__mdiff+0xe8>
 8003fd6:	bf00      	nop
 8003fd8:	0800519b 	.word	0x0800519b
 8003fdc:	080051ac 	.word	0x080051ac

08003fe0 <__d2b>:
 8003fe0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8003fea:	4690      	mov	r8, r2
 8003fec:	461d      	mov	r5, r3
 8003fee:	f7ff fcd1 	bl	8003994 <_Balloc>
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	b930      	cbnz	r0, 8004004 <__d2b+0x24>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	f240 310a 	movw	r1, #778	; 0x30a
 8003ffc:	4b24      	ldr	r3, [pc, #144]	; (8004090 <__d2b+0xb0>)
 8003ffe:	4825      	ldr	r0, [pc, #148]	; (8004094 <__d2b+0xb4>)
 8004000:	f000 fa6a 	bl	80044d8 <__assert_func>
 8004004:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004008:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800400c:	bb2d      	cbnz	r5, 800405a <__d2b+0x7a>
 800400e:	9301      	str	r3, [sp, #4]
 8004010:	f1b8 0300 	subs.w	r3, r8, #0
 8004014:	d026      	beq.n	8004064 <__d2b+0x84>
 8004016:	4668      	mov	r0, sp
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	f7ff fd87 	bl	8003b2c <__lo0bits>
 800401e:	9900      	ldr	r1, [sp, #0]
 8004020:	b1f0      	cbz	r0, 8004060 <__d2b+0x80>
 8004022:	9a01      	ldr	r2, [sp, #4]
 8004024:	f1c0 0320 	rsb	r3, r0, #32
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	430b      	orrs	r3, r1
 800402e:	40c2      	lsrs	r2, r0
 8004030:	6163      	str	r3, [r4, #20]
 8004032:	9201      	str	r2, [sp, #4]
 8004034:	9b01      	ldr	r3, [sp, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	bf14      	ite	ne
 800403a:	2102      	movne	r1, #2
 800403c:	2101      	moveq	r1, #1
 800403e:	61a3      	str	r3, [r4, #24]
 8004040:	6121      	str	r1, [r4, #16]
 8004042:	b1c5      	cbz	r5, 8004076 <__d2b+0x96>
 8004044:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004048:	4405      	add	r5, r0
 800404a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800404e:	603d      	str	r5, [r7, #0]
 8004050:	6030      	str	r0, [r6, #0]
 8004052:	4620      	mov	r0, r4
 8004054:	b002      	add	sp, #8
 8004056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800405a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800405e:	e7d6      	b.n	800400e <__d2b+0x2e>
 8004060:	6161      	str	r1, [r4, #20]
 8004062:	e7e7      	b.n	8004034 <__d2b+0x54>
 8004064:	a801      	add	r0, sp, #4
 8004066:	f7ff fd61 	bl	8003b2c <__lo0bits>
 800406a:	2101      	movs	r1, #1
 800406c:	9b01      	ldr	r3, [sp, #4]
 800406e:	6121      	str	r1, [r4, #16]
 8004070:	6163      	str	r3, [r4, #20]
 8004072:	3020      	adds	r0, #32
 8004074:	e7e5      	b.n	8004042 <__d2b+0x62>
 8004076:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800407a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800407e:	6038      	str	r0, [r7, #0]
 8004080:	6918      	ldr	r0, [r3, #16]
 8004082:	f7ff fd33 	bl	8003aec <__hi0bits>
 8004086:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800408a:	6031      	str	r1, [r6, #0]
 800408c:	e7e1      	b.n	8004052 <__d2b+0x72>
 800408e:	bf00      	nop
 8004090:	0800519b 	.word	0x0800519b
 8004094:	080051ac 	.word	0x080051ac

08004098 <_calloc_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	fb02 f501 	mul.w	r5, r2, r1
 800409e:	4629      	mov	r1, r5
 80040a0:	f000 f854 	bl	800414c <_malloc_r>
 80040a4:	4604      	mov	r4, r0
 80040a6:	b118      	cbz	r0, 80040b0 <_calloc_r+0x18>
 80040a8:	462a      	mov	r2, r5
 80040aa:	2100      	movs	r1, #0
 80040ac:	f7fe f946 	bl	800233c <memset>
 80040b0:	4620      	mov	r0, r4
 80040b2:	bd38      	pop	{r3, r4, r5, pc}

080040b4 <_free_r>:
 80040b4:	b538      	push	{r3, r4, r5, lr}
 80040b6:	4605      	mov	r5, r0
 80040b8:	2900      	cmp	r1, #0
 80040ba:	d043      	beq.n	8004144 <_free_r+0x90>
 80040bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040c0:	1f0c      	subs	r4, r1, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bfb8      	it	lt
 80040c6:	18e4      	addlt	r4, r4, r3
 80040c8:	f000 fa62 	bl	8004590 <__malloc_lock>
 80040cc:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <_free_r+0x94>)
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	4610      	mov	r0, r2
 80040d2:	b933      	cbnz	r3, 80040e2 <_free_r+0x2e>
 80040d4:	6063      	str	r3, [r4, #4]
 80040d6:	6014      	str	r4, [r2, #0]
 80040d8:	4628      	mov	r0, r5
 80040da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040de:	f000 ba5d 	b.w	800459c <__malloc_unlock>
 80040e2:	42a3      	cmp	r3, r4
 80040e4:	d90a      	bls.n	80040fc <_free_r+0x48>
 80040e6:	6821      	ldr	r1, [r4, #0]
 80040e8:	1862      	adds	r2, r4, r1
 80040ea:	4293      	cmp	r3, r2
 80040ec:	bf01      	itttt	eq
 80040ee:	681a      	ldreq	r2, [r3, #0]
 80040f0:	685b      	ldreq	r3, [r3, #4]
 80040f2:	1852      	addeq	r2, r2, r1
 80040f4:	6022      	streq	r2, [r4, #0]
 80040f6:	6063      	str	r3, [r4, #4]
 80040f8:	6004      	str	r4, [r0, #0]
 80040fa:	e7ed      	b.n	80040d8 <_free_r+0x24>
 80040fc:	461a      	mov	r2, r3
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	b10b      	cbz	r3, 8004106 <_free_r+0x52>
 8004102:	42a3      	cmp	r3, r4
 8004104:	d9fa      	bls.n	80040fc <_free_r+0x48>
 8004106:	6811      	ldr	r1, [r2, #0]
 8004108:	1850      	adds	r0, r2, r1
 800410a:	42a0      	cmp	r0, r4
 800410c:	d10b      	bne.n	8004126 <_free_r+0x72>
 800410e:	6820      	ldr	r0, [r4, #0]
 8004110:	4401      	add	r1, r0
 8004112:	1850      	adds	r0, r2, r1
 8004114:	4283      	cmp	r3, r0
 8004116:	6011      	str	r1, [r2, #0]
 8004118:	d1de      	bne.n	80040d8 <_free_r+0x24>
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4401      	add	r1, r0
 8004120:	6011      	str	r1, [r2, #0]
 8004122:	6053      	str	r3, [r2, #4]
 8004124:	e7d8      	b.n	80040d8 <_free_r+0x24>
 8004126:	d902      	bls.n	800412e <_free_r+0x7a>
 8004128:	230c      	movs	r3, #12
 800412a:	602b      	str	r3, [r5, #0]
 800412c:	e7d4      	b.n	80040d8 <_free_r+0x24>
 800412e:	6820      	ldr	r0, [r4, #0]
 8004130:	1821      	adds	r1, r4, r0
 8004132:	428b      	cmp	r3, r1
 8004134:	bf01      	itttt	eq
 8004136:	6819      	ldreq	r1, [r3, #0]
 8004138:	685b      	ldreq	r3, [r3, #4]
 800413a:	1809      	addeq	r1, r1, r0
 800413c:	6021      	streq	r1, [r4, #0]
 800413e:	6063      	str	r3, [r4, #4]
 8004140:	6054      	str	r4, [r2, #4]
 8004142:	e7c9      	b.n	80040d8 <_free_r+0x24>
 8004144:	bd38      	pop	{r3, r4, r5, pc}
 8004146:	bf00      	nop
 8004148:	20000220 	.word	0x20000220

0800414c <_malloc_r>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	1ccd      	adds	r5, r1, #3
 8004150:	f025 0503 	bic.w	r5, r5, #3
 8004154:	3508      	adds	r5, #8
 8004156:	2d0c      	cmp	r5, #12
 8004158:	bf38      	it	cc
 800415a:	250c      	movcc	r5, #12
 800415c:	2d00      	cmp	r5, #0
 800415e:	4606      	mov	r6, r0
 8004160:	db01      	blt.n	8004166 <_malloc_r+0x1a>
 8004162:	42a9      	cmp	r1, r5
 8004164:	d903      	bls.n	800416e <_malloc_r+0x22>
 8004166:	230c      	movs	r3, #12
 8004168:	6033      	str	r3, [r6, #0]
 800416a:	2000      	movs	r0, #0
 800416c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800416e:	f000 fa0f 	bl	8004590 <__malloc_lock>
 8004172:	4921      	ldr	r1, [pc, #132]	; (80041f8 <_malloc_r+0xac>)
 8004174:	680a      	ldr	r2, [r1, #0]
 8004176:	4614      	mov	r4, r2
 8004178:	b99c      	cbnz	r4, 80041a2 <_malloc_r+0x56>
 800417a:	4f20      	ldr	r7, [pc, #128]	; (80041fc <_malloc_r+0xb0>)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	b923      	cbnz	r3, 800418a <_malloc_r+0x3e>
 8004180:	4621      	mov	r1, r4
 8004182:	4630      	mov	r0, r6
 8004184:	f000 f998 	bl	80044b8 <_sbrk_r>
 8004188:	6038      	str	r0, [r7, #0]
 800418a:	4629      	mov	r1, r5
 800418c:	4630      	mov	r0, r6
 800418e:	f000 f993 	bl	80044b8 <_sbrk_r>
 8004192:	1c43      	adds	r3, r0, #1
 8004194:	d123      	bne.n	80041de <_malloc_r+0x92>
 8004196:	230c      	movs	r3, #12
 8004198:	4630      	mov	r0, r6
 800419a:	6033      	str	r3, [r6, #0]
 800419c:	f000 f9fe 	bl	800459c <__malloc_unlock>
 80041a0:	e7e3      	b.n	800416a <_malloc_r+0x1e>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	1b5b      	subs	r3, r3, r5
 80041a6:	d417      	bmi.n	80041d8 <_malloc_r+0x8c>
 80041a8:	2b0b      	cmp	r3, #11
 80041aa:	d903      	bls.n	80041b4 <_malloc_r+0x68>
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	441c      	add	r4, r3
 80041b0:	6025      	str	r5, [r4, #0]
 80041b2:	e004      	b.n	80041be <_malloc_r+0x72>
 80041b4:	6863      	ldr	r3, [r4, #4]
 80041b6:	42a2      	cmp	r2, r4
 80041b8:	bf0c      	ite	eq
 80041ba:	600b      	streq	r3, [r1, #0]
 80041bc:	6053      	strne	r3, [r2, #4]
 80041be:	4630      	mov	r0, r6
 80041c0:	f000 f9ec 	bl	800459c <__malloc_unlock>
 80041c4:	f104 000b 	add.w	r0, r4, #11
 80041c8:	1d23      	adds	r3, r4, #4
 80041ca:	f020 0007 	bic.w	r0, r0, #7
 80041ce:	1ac2      	subs	r2, r0, r3
 80041d0:	d0cc      	beq.n	800416c <_malloc_r+0x20>
 80041d2:	1a1b      	subs	r3, r3, r0
 80041d4:	50a3      	str	r3, [r4, r2]
 80041d6:	e7c9      	b.n	800416c <_malloc_r+0x20>
 80041d8:	4622      	mov	r2, r4
 80041da:	6864      	ldr	r4, [r4, #4]
 80041dc:	e7cc      	b.n	8004178 <_malloc_r+0x2c>
 80041de:	1cc4      	adds	r4, r0, #3
 80041e0:	f024 0403 	bic.w	r4, r4, #3
 80041e4:	42a0      	cmp	r0, r4
 80041e6:	d0e3      	beq.n	80041b0 <_malloc_r+0x64>
 80041e8:	1a21      	subs	r1, r4, r0
 80041ea:	4630      	mov	r0, r6
 80041ec:	f000 f964 	bl	80044b8 <_sbrk_r>
 80041f0:	3001      	adds	r0, #1
 80041f2:	d1dd      	bne.n	80041b0 <_malloc_r+0x64>
 80041f4:	e7cf      	b.n	8004196 <_malloc_r+0x4a>
 80041f6:	bf00      	nop
 80041f8:	20000220 	.word	0x20000220
 80041fc:	20000224 	.word	0x20000224

08004200 <__ssputs_r>:
 8004200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004204:	688e      	ldr	r6, [r1, #8]
 8004206:	4682      	mov	sl, r0
 8004208:	429e      	cmp	r6, r3
 800420a:	460c      	mov	r4, r1
 800420c:	4690      	mov	r8, r2
 800420e:	461f      	mov	r7, r3
 8004210:	d838      	bhi.n	8004284 <__ssputs_r+0x84>
 8004212:	898a      	ldrh	r2, [r1, #12]
 8004214:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004218:	d032      	beq.n	8004280 <__ssputs_r+0x80>
 800421a:	6825      	ldr	r5, [r4, #0]
 800421c:	6909      	ldr	r1, [r1, #16]
 800421e:	3301      	adds	r3, #1
 8004220:	eba5 0901 	sub.w	r9, r5, r1
 8004224:	6965      	ldr	r5, [r4, #20]
 8004226:	444b      	add	r3, r9
 8004228:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800422c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004230:	106d      	asrs	r5, r5, #1
 8004232:	429d      	cmp	r5, r3
 8004234:	bf38      	it	cc
 8004236:	461d      	movcc	r5, r3
 8004238:	0553      	lsls	r3, r2, #21
 800423a:	d531      	bpl.n	80042a0 <__ssputs_r+0xa0>
 800423c:	4629      	mov	r1, r5
 800423e:	f7ff ff85 	bl	800414c <_malloc_r>
 8004242:	4606      	mov	r6, r0
 8004244:	b950      	cbnz	r0, 800425c <__ssputs_r+0x5c>
 8004246:	230c      	movs	r3, #12
 8004248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800424c:	f8ca 3000 	str.w	r3, [sl]
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004256:	81a3      	strh	r3, [r4, #12]
 8004258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800425c:	464a      	mov	r2, r9
 800425e:	6921      	ldr	r1, [r4, #16]
 8004260:	f7ff fb8a 	bl	8003978 <memcpy>
 8004264:	89a3      	ldrh	r3, [r4, #12]
 8004266:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800426a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426e:	81a3      	strh	r3, [r4, #12]
 8004270:	6126      	str	r6, [r4, #16]
 8004272:	444e      	add	r6, r9
 8004274:	6026      	str	r6, [r4, #0]
 8004276:	463e      	mov	r6, r7
 8004278:	6165      	str	r5, [r4, #20]
 800427a:	eba5 0509 	sub.w	r5, r5, r9
 800427e:	60a5      	str	r5, [r4, #8]
 8004280:	42be      	cmp	r6, r7
 8004282:	d900      	bls.n	8004286 <__ssputs_r+0x86>
 8004284:	463e      	mov	r6, r7
 8004286:	4632      	mov	r2, r6
 8004288:	4641      	mov	r1, r8
 800428a:	6820      	ldr	r0, [r4, #0]
 800428c:	f000 f966 	bl	800455c <memmove>
 8004290:	68a3      	ldr	r3, [r4, #8]
 8004292:	6822      	ldr	r2, [r4, #0]
 8004294:	1b9b      	subs	r3, r3, r6
 8004296:	4432      	add	r2, r6
 8004298:	2000      	movs	r0, #0
 800429a:	60a3      	str	r3, [r4, #8]
 800429c:	6022      	str	r2, [r4, #0]
 800429e:	e7db      	b.n	8004258 <__ssputs_r+0x58>
 80042a0:	462a      	mov	r2, r5
 80042a2:	f000 f981 	bl	80045a8 <_realloc_r>
 80042a6:	4606      	mov	r6, r0
 80042a8:	2800      	cmp	r0, #0
 80042aa:	d1e1      	bne.n	8004270 <__ssputs_r+0x70>
 80042ac:	4650      	mov	r0, sl
 80042ae:	6921      	ldr	r1, [r4, #16]
 80042b0:	f7ff ff00 	bl	80040b4 <_free_r>
 80042b4:	e7c7      	b.n	8004246 <__ssputs_r+0x46>
	...

080042b8 <_svfiprintf_r>:
 80042b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042bc:	4698      	mov	r8, r3
 80042be:	898b      	ldrh	r3, [r1, #12]
 80042c0:	4607      	mov	r7, r0
 80042c2:	061b      	lsls	r3, r3, #24
 80042c4:	460d      	mov	r5, r1
 80042c6:	4614      	mov	r4, r2
 80042c8:	b09d      	sub	sp, #116	; 0x74
 80042ca:	d50e      	bpl.n	80042ea <_svfiprintf_r+0x32>
 80042cc:	690b      	ldr	r3, [r1, #16]
 80042ce:	b963      	cbnz	r3, 80042ea <_svfiprintf_r+0x32>
 80042d0:	2140      	movs	r1, #64	; 0x40
 80042d2:	f7ff ff3b 	bl	800414c <_malloc_r>
 80042d6:	6028      	str	r0, [r5, #0]
 80042d8:	6128      	str	r0, [r5, #16]
 80042da:	b920      	cbnz	r0, 80042e6 <_svfiprintf_r+0x2e>
 80042dc:	230c      	movs	r3, #12
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042e4:	e0d1      	b.n	800448a <_svfiprintf_r+0x1d2>
 80042e6:	2340      	movs	r3, #64	; 0x40
 80042e8:	616b      	str	r3, [r5, #20]
 80042ea:	2300      	movs	r3, #0
 80042ec:	9309      	str	r3, [sp, #36]	; 0x24
 80042ee:	2320      	movs	r3, #32
 80042f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042f4:	2330      	movs	r3, #48	; 0x30
 80042f6:	f04f 0901 	mov.w	r9, #1
 80042fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80042fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80044a4 <_svfiprintf_r+0x1ec>
 8004302:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004306:	4623      	mov	r3, r4
 8004308:	469a      	mov	sl, r3
 800430a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800430e:	b10a      	cbz	r2, 8004314 <_svfiprintf_r+0x5c>
 8004310:	2a25      	cmp	r2, #37	; 0x25
 8004312:	d1f9      	bne.n	8004308 <_svfiprintf_r+0x50>
 8004314:	ebba 0b04 	subs.w	fp, sl, r4
 8004318:	d00b      	beq.n	8004332 <_svfiprintf_r+0x7a>
 800431a:	465b      	mov	r3, fp
 800431c:	4622      	mov	r2, r4
 800431e:	4629      	mov	r1, r5
 8004320:	4638      	mov	r0, r7
 8004322:	f7ff ff6d 	bl	8004200 <__ssputs_r>
 8004326:	3001      	adds	r0, #1
 8004328:	f000 80aa 	beq.w	8004480 <_svfiprintf_r+0x1c8>
 800432c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800432e:	445a      	add	r2, fp
 8004330:	9209      	str	r2, [sp, #36]	; 0x24
 8004332:	f89a 3000 	ldrb.w	r3, [sl]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 80a2 	beq.w	8004480 <_svfiprintf_r+0x1c8>
 800433c:	2300      	movs	r3, #0
 800433e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004346:	f10a 0a01 	add.w	sl, sl, #1
 800434a:	9304      	str	r3, [sp, #16]
 800434c:	9307      	str	r3, [sp, #28]
 800434e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004352:	931a      	str	r3, [sp, #104]	; 0x68
 8004354:	4654      	mov	r4, sl
 8004356:	2205      	movs	r2, #5
 8004358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800435c:	4851      	ldr	r0, [pc, #324]	; (80044a4 <_svfiprintf_r+0x1ec>)
 800435e:	f7ff fafd 	bl	800395c <memchr>
 8004362:	9a04      	ldr	r2, [sp, #16]
 8004364:	b9d8      	cbnz	r0, 800439e <_svfiprintf_r+0xe6>
 8004366:	06d0      	lsls	r0, r2, #27
 8004368:	bf44      	itt	mi
 800436a:	2320      	movmi	r3, #32
 800436c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004370:	0711      	lsls	r1, r2, #28
 8004372:	bf44      	itt	mi
 8004374:	232b      	movmi	r3, #43	; 0x2b
 8004376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800437a:	f89a 3000 	ldrb.w	r3, [sl]
 800437e:	2b2a      	cmp	r3, #42	; 0x2a
 8004380:	d015      	beq.n	80043ae <_svfiprintf_r+0xf6>
 8004382:	4654      	mov	r4, sl
 8004384:	2000      	movs	r0, #0
 8004386:	f04f 0c0a 	mov.w	ip, #10
 800438a:	9a07      	ldr	r2, [sp, #28]
 800438c:	4621      	mov	r1, r4
 800438e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004392:	3b30      	subs	r3, #48	; 0x30
 8004394:	2b09      	cmp	r3, #9
 8004396:	d94e      	bls.n	8004436 <_svfiprintf_r+0x17e>
 8004398:	b1b0      	cbz	r0, 80043c8 <_svfiprintf_r+0x110>
 800439a:	9207      	str	r2, [sp, #28]
 800439c:	e014      	b.n	80043c8 <_svfiprintf_r+0x110>
 800439e:	eba0 0308 	sub.w	r3, r0, r8
 80043a2:	fa09 f303 	lsl.w	r3, r9, r3
 80043a6:	4313      	orrs	r3, r2
 80043a8:	46a2      	mov	sl, r4
 80043aa:	9304      	str	r3, [sp, #16]
 80043ac:	e7d2      	b.n	8004354 <_svfiprintf_r+0x9c>
 80043ae:	9b03      	ldr	r3, [sp, #12]
 80043b0:	1d19      	adds	r1, r3, #4
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	9103      	str	r1, [sp, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	bfbb      	ittet	lt
 80043ba:	425b      	neglt	r3, r3
 80043bc:	f042 0202 	orrlt.w	r2, r2, #2
 80043c0:	9307      	strge	r3, [sp, #28]
 80043c2:	9307      	strlt	r3, [sp, #28]
 80043c4:	bfb8      	it	lt
 80043c6:	9204      	strlt	r2, [sp, #16]
 80043c8:	7823      	ldrb	r3, [r4, #0]
 80043ca:	2b2e      	cmp	r3, #46	; 0x2e
 80043cc:	d10c      	bne.n	80043e8 <_svfiprintf_r+0x130>
 80043ce:	7863      	ldrb	r3, [r4, #1]
 80043d0:	2b2a      	cmp	r3, #42	; 0x2a
 80043d2:	d135      	bne.n	8004440 <_svfiprintf_r+0x188>
 80043d4:	9b03      	ldr	r3, [sp, #12]
 80043d6:	3402      	adds	r4, #2
 80043d8:	1d1a      	adds	r2, r3, #4
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	9203      	str	r2, [sp, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	bfb8      	it	lt
 80043e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80043e6:	9305      	str	r3, [sp, #20]
 80043e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044b4 <_svfiprintf_r+0x1fc>
 80043ec:	2203      	movs	r2, #3
 80043ee:	4650      	mov	r0, sl
 80043f0:	7821      	ldrb	r1, [r4, #0]
 80043f2:	f7ff fab3 	bl	800395c <memchr>
 80043f6:	b140      	cbz	r0, 800440a <_svfiprintf_r+0x152>
 80043f8:	2340      	movs	r3, #64	; 0x40
 80043fa:	eba0 000a 	sub.w	r0, r0, sl
 80043fe:	fa03 f000 	lsl.w	r0, r3, r0
 8004402:	9b04      	ldr	r3, [sp, #16]
 8004404:	3401      	adds	r4, #1
 8004406:	4303      	orrs	r3, r0
 8004408:	9304      	str	r3, [sp, #16]
 800440a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800440e:	2206      	movs	r2, #6
 8004410:	4825      	ldr	r0, [pc, #148]	; (80044a8 <_svfiprintf_r+0x1f0>)
 8004412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004416:	f7ff faa1 	bl	800395c <memchr>
 800441a:	2800      	cmp	r0, #0
 800441c:	d038      	beq.n	8004490 <_svfiprintf_r+0x1d8>
 800441e:	4b23      	ldr	r3, [pc, #140]	; (80044ac <_svfiprintf_r+0x1f4>)
 8004420:	bb1b      	cbnz	r3, 800446a <_svfiprintf_r+0x1b2>
 8004422:	9b03      	ldr	r3, [sp, #12]
 8004424:	3307      	adds	r3, #7
 8004426:	f023 0307 	bic.w	r3, r3, #7
 800442a:	3308      	adds	r3, #8
 800442c:	9303      	str	r3, [sp, #12]
 800442e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004430:	4433      	add	r3, r6
 8004432:	9309      	str	r3, [sp, #36]	; 0x24
 8004434:	e767      	b.n	8004306 <_svfiprintf_r+0x4e>
 8004436:	460c      	mov	r4, r1
 8004438:	2001      	movs	r0, #1
 800443a:	fb0c 3202 	mla	r2, ip, r2, r3
 800443e:	e7a5      	b.n	800438c <_svfiprintf_r+0xd4>
 8004440:	2300      	movs	r3, #0
 8004442:	f04f 0c0a 	mov.w	ip, #10
 8004446:	4619      	mov	r1, r3
 8004448:	3401      	adds	r4, #1
 800444a:	9305      	str	r3, [sp, #20]
 800444c:	4620      	mov	r0, r4
 800444e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004452:	3a30      	subs	r2, #48	; 0x30
 8004454:	2a09      	cmp	r2, #9
 8004456:	d903      	bls.n	8004460 <_svfiprintf_r+0x1a8>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0c5      	beq.n	80043e8 <_svfiprintf_r+0x130>
 800445c:	9105      	str	r1, [sp, #20]
 800445e:	e7c3      	b.n	80043e8 <_svfiprintf_r+0x130>
 8004460:	4604      	mov	r4, r0
 8004462:	2301      	movs	r3, #1
 8004464:	fb0c 2101 	mla	r1, ip, r1, r2
 8004468:	e7f0      	b.n	800444c <_svfiprintf_r+0x194>
 800446a:	ab03      	add	r3, sp, #12
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	462a      	mov	r2, r5
 8004470:	4638      	mov	r0, r7
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <_svfiprintf_r+0x1f8>)
 8004474:	a904      	add	r1, sp, #16
 8004476:	f7fe f807 	bl	8002488 <_printf_float>
 800447a:	1c42      	adds	r2, r0, #1
 800447c:	4606      	mov	r6, r0
 800447e:	d1d6      	bne.n	800442e <_svfiprintf_r+0x176>
 8004480:	89ab      	ldrh	r3, [r5, #12]
 8004482:	065b      	lsls	r3, r3, #25
 8004484:	f53f af2c 	bmi.w	80042e0 <_svfiprintf_r+0x28>
 8004488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800448a:	b01d      	add	sp, #116	; 0x74
 800448c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004490:	ab03      	add	r3, sp, #12
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	462a      	mov	r2, r5
 8004496:	4638      	mov	r0, r7
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <_svfiprintf_r+0x1f8>)
 800449a:	a904      	add	r1, sp, #16
 800449c:	f7fe fa90 	bl	80029c0 <_printf_i>
 80044a0:	e7eb      	b.n	800447a <_svfiprintf_r+0x1c2>
 80044a2:	bf00      	nop
 80044a4:	0800530c 	.word	0x0800530c
 80044a8:	08005316 	.word	0x08005316
 80044ac:	08002489 	.word	0x08002489
 80044b0:	08004201 	.word	0x08004201
 80044b4:	08005312 	.word	0x08005312

080044b8 <_sbrk_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	2300      	movs	r3, #0
 80044bc:	4d05      	ldr	r5, [pc, #20]	; (80044d4 <_sbrk_r+0x1c>)
 80044be:	4604      	mov	r4, r0
 80044c0:	4608      	mov	r0, r1
 80044c2:	602b      	str	r3, [r5, #0]
 80044c4:	f7fc ff9c 	bl	8001400 <_sbrk>
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	d102      	bne.n	80044d2 <_sbrk_r+0x1a>
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	b103      	cbz	r3, 80044d2 <_sbrk_r+0x1a>
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	2000022c 	.word	0x2000022c

080044d8 <__assert_func>:
 80044d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80044da:	4614      	mov	r4, r2
 80044dc:	461a      	mov	r2, r3
 80044de:	4b09      	ldr	r3, [pc, #36]	; (8004504 <__assert_func+0x2c>)
 80044e0:	4605      	mov	r5, r0
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68d8      	ldr	r0, [r3, #12]
 80044e6:	b14c      	cbz	r4, 80044fc <__assert_func+0x24>
 80044e8:	4b07      	ldr	r3, [pc, #28]	; (8004508 <__assert_func+0x30>)
 80044ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80044ee:	9100      	str	r1, [sp, #0]
 80044f0:	462b      	mov	r3, r5
 80044f2:	4906      	ldr	r1, [pc, #24]	; (800450c <__assert_func+0x34>)
 80044f4:	f000 f80e 	bl	8004514 <fiprintf>
 80044f8:	f000 faa2 	bl	8004a40 <abort>
 80044fc:	4b04      	ldr	r3, [pc, #16]	; (8004510 <__assert_func+0x38>)
 80044fe:	461c      	mov	r4, r3
 8004500:	e7f3      	b.n	80044ea <__assert_func+0x12>
 8004502:	bf00      	nop
 8004504:	20000010 	.word	0x20000010
 8004508:	0800531d 	.word	0x0800531d
 800450c:	0800532a 	.word	0x0800532a
 8004510:	08005358 	.word	0x08005358

08004514 <fiprintf>:
 8004514:	b40e      	push	{r1, r2, r3}
 8004516:	b503      	push	{r0, r1, lr}
 8004518:	4601      	mov	r1, r0
 800451a:	ab03      	add	r3, sp, #12
 800451c:	4805      	ldr	r0, [pc, #20]	; (8004534 <fiprintf+0x20>)
 800451e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004522:	6800      	ldr	r0, [r0, #0]
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	f000 f88d 	bl	8004644 <_vfiprintf_r>
 800452a:	b002      	add	sp, #8
 800452c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004530:	b003      	add	sp, #12
 8004532:	4770      	bx	lr
 8004534:	20000010 	.word	0x20000010

08004538 <__ascii_mbtowc>:
 8004538:	b082      	sub	sp, #8
 800453a:	b901      	cbnz	r1, 800453e <__ascii_mbtowc+0x6>
 800453c:	a901      	add	r1, sp, #4
 800453e:	b142      	cbz	r2, 8004552 <__ascii_mbtowc+0x1a>
 8004540:	b14b      	cbz	r3, 8004556 <__ascii_mbtowc+0x1e>
 8004542:	7813      	ldrb	r3, [r2, #0]
 8004544:	600b      	str	r3, [r1, #0]
 8004546:	7812      	ldrb	r2, [r2, #0]
 8004548:	1e10      	subs	r0, r2, #0
 800454a:	bf18      	it	ne
 800454c:	2001      	movne	r0, #1
 800454e:	b002      	add	sp, #8
 8004550:	4770      	bx	lr
 8004552:	4610      	mov	r0, r2
 8004554:	e7fb      	b.n	800454e <__ascii_mbtowc+0x16>
 8004556:	f06f 0001 	mvn.w	r0, #1
 800455a:	e7f8      	b.n	800454e <__ascii_mbtowc+0x16>

0800455c <memmove>:
 800455c:	4288      	cmp	r0, r1
 800455e:	b510      	push	{r4, lr}
 8004560:	eb01 0402 	add.w	r4, r1, r2
 8004564:	d902      	bls.n	800456c <memmove+0x10>
 8004566:	4284      	cmp	r4, r0
 8004568:	4623      	mov	r3, r4
 800456a:	d807      	bhi.n	800457c <memmove+0x20>
 800456c:	1e43      	subs	r3, r0, #1
 800456e:	42a1      	cmp	r1, r4
 8004570:	d008      	beq.n	8004584 <memmove+0x28>
 8004572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800457a:	e7f8      	b.n	800456e <memmove+0x12>
 800457c:	4601      	mov	r1, r0
 800457e:	4402      	add	r2, r0
 8004580:	428a      	cmp	r2, r1
 8004582:	d100      	bne.n	8004586 <memmove+0x2a>
 8004584:	bd10      	pop	{r4, pc}
 8004586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800458a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800458e:	e7f7      	b.n	8004580 <memmove+0x24>

08004590 <__malloc_lock>:
 8004590:	4801      	ldr	r0, [pc, #4]	; (8004598 <__malloc_lock+0x8>)
 8004592:	f000 bc15 	b.w	8004dc0 <__retarget_lock_acquire_recursive>
 8004596:	bf00      	nop
 8004598:	20000234 	.word	0x20000234

0800459c <__malloc_unlock>:
 800459c:	4801      	ldr	r0, [pc, #4]	; (80045a4 <__malloc_unlock+0x8>)
 800459e:	f000 bc10 	b.w	8004dc2 <__retarget_lock_release_recursive>
 80045a2:	bf00      	nop
 80045a4:	20000234 	.word	0x20000234

080045a8 <_realloc_r>:
 80045a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045aa:	4607      	mov	r7, r0
 80045ac:	4614      	mov	r4, r2
 80045ae:	460e      	mov	r6, r1
 80045b0:	b921      	cbnz	r1, 80045bc <_realloc_r+0x14>
 80045b2:	4611      	mov	r1, r2
 80045b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045b8:	f7ff bdc8 	b.w	800414c <_malloc_r>
 80045bc:	b922      	cbnz	r2, 80045c8 <_realloc_r+0x20>
 80045be:	f7ff fd79 	bl	80040b4 <_free_r>
 80045c2:	4625      	mov	r5, r4
 80045c4:	4628      	mov	r0, r5
 80045c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c8:	f000 fc60 	bl	8004e8c <_malloc_usable_size_r>
 80045cc:	42a0      	cmp	r0, r4
 80045ce:	d20f      	bcs.n	80045f0 <_realloc_r+0x48>
 80045d0:	4621      	mov	r1, r4
 80045d2:	4638      	mov	r0, r7
 80045d4:	f7ff fdba 	bl	800414c <_malloc_r>
 80045d8:	4605      	mov	r5, r0
 80045da:	2800      	cmp	r0, #0
 80045dc:	d0f2      	beq.n	80045c4 <_realloc_r+0x1c>
 80045de:	4631      	mov	r1, r6
 80045e0:	4622      	mov	r2, r4
 80045e2:	f7ff f9c9 	bl	8003978 <memcpy>
 80045e6:	4631      	mov	r1, r6
 80045e8:	4638      	mov	r0, r7
 80045ea:	f7ff fd63 	bl	80040b4 <_free_r>
 80045ee:	e7e9      	b.n	80045c4 <_realloc_r+0x1c>
 80045f0:	4635      	mov	r5, r6
 80045f2:	e7e7      	b.n	80045c4 <_realloc_r+0x1c>

080045f4 <__sfputc_r>:
 80045f4:	6893      	ldr	r3, [r2, #8]
 80045f6:	b410      	push	{r4}
 80045f8:	3b01      	subs	r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	6093      	str	r3, [r2, #8]
 80045fe:	da07      	bge.n	8004610 <__sfputc_r+0x1c>
 8004600:	6994      	ldr	r4, [r2, #24]
 8004602:	42a3      	cmp	r3, r4
 8004604:	db01      	blt.n	800460a <__sfputc_r+0x16>
 8004606:	290a      	cmp	r1, #10
 8004608:	d102      	bne.n	8004610 <__sfputc_r+0x1c>
 800460a:	bc10      	pop	{r4}
 800460c:	f000 b94a 	b.w	80048a4 <__swbuf_r>
 8004610:	6813      	ldr	r3, [r2, #0]
 8004612:	1c58      	adds	r0, r3, #1
 8004614:	6010      	str	r0, [r2, #0]
 8004616:	7019      	strb	r1, [r3, #0]
 8004618:	4608      	mov	r0, r1
 800461a:	bc10      	pop	{r4}
 800461c:	4770      	bx	lr

0800461e <__sfputs_r>:
 800461e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004620:	4606      	mov	r6, r0
 8004622:	460f      	mov	r7, r1
 8004624:	4614      	mov	r4, r2
 8004626:	18d5      	adds	r5, r2, r3
 8004628:	42ac      	cmp	r4, r5
 800462a:	d101      	bne.n	8004630 <__sfputs_r+0x12>
 800462c:	2000      	movs	r0, #0
 800462e:	e007      	b.n	8004640 <__sfputs_r+0x22>
 8004630:	463a      	mov	r2, r7
 8004632:	4630      	mov	r0, r6
 8004634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004638:	f7ff ffdc 	bl	80045f4 <__sfputc_r>
 800463c:	1c43      	adds	r3, r0, #1
 800463e:	d1f3      	bne.n	8004628 <__sfputs_r+0xa>
 8004640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004644 <_vfiprintf_r>:
 8004644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004648:	460d      	mov	r5, r1
 800464a:	4614      	mov	r4, r2
 800464c:	4698      	mov	r8, r3
 800464e:	4606      	mov	r6, r0
 8004650:	b09d      	sub	sp, #116	; 0x74
 8004652:	b118      	cbz	r0, 800465c <_vfiprintf_r+0x18>
 8004654:	6983      	ldr	r3, [r0, #24]
 8004656:	b90b      	cbnz	r3, 800465c <_vfiprintf_r+0x18>
 8004658:	f000 fb14 	bl	8004c84 <__sinit>
 800465c:	4b89      	ldr	r3, [pc, #548]	; (8004884 <_vfiprintf_r+0x240>)
 800465e:	429d      	cmp	r5, r3
 8004660:	d11b      	bne.n	800469a <_vfiprintf_r+0x56>
 8004662:	6875      	ldr	r5, [r6, #4]
 8004664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004666:	07d9      	lsls	r1, r3, #31
 8004668:	d405      	bmi.n	8004676 <_vfiprintf_r+0x32>
 800466a:	89ab      	ldrh	r3, [r5, #12]
 800466c:	059a      	lsls	r2, r3, #22
 800466e:	d402      	bmi.n	8004676 <_vfiprintf_r+0x32>
 8004670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004672:	f000 fba5 	bl	8004dc0 <__retarget_lock_acquire_recursive>
 8004676:	89ab      	ldrh	r3, [r5, #12]
 8004678:	071b      	lsls	r3, r3, #28
 800467a:	d501      	bpl.n	8004680 <_vfiprintf_r+0x3c>
 800467c:	692b      	ldr	r3, [r5, #16]
 800467e:	b9eb      	cbnz	r3, 80046bc <_vfiprintf_r+0x78>
 8004680:	4629      	mov	r1, r5
 8004682:	4630      	mov	r0, r6
 8004684:	f000 f96e 	bl	8004964 <__swsetup_r>
 8004688:	b1c0      	cbz	r0, 80046bc <_vfiprintf_r+0x78>
 800468a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800468c:	07dc      	lsls	r4, r3, #31
 800468e:	d50e      	bpl.n	80046ae <_vfiprintf_r+0x6a>
 8004690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004694:	b01d      	add	sp, #116	; 0x74
 8004696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469a:	4b7b      	ldr	r3, [pc, #492]	; (8004888 <_vfiprintf_r+0x244>)
 800469c:	429d      	cmp	r5, r3
 800469e:	d101      	bne.n	80046a4 <_vfiprintf_r+0x60>
 80046a0:	68b5      	ldr	r5, [r6, #8]
 80046a2:	e7df      	b.n	8004664 <_vfiprintf_r+0x20>
 80046a4:	4b79      	ldr	r3, [pc, #484]	; (800488c <_vfiprintf_r+0x248>)
 80046a6:	429d      	cmp	r5, r3
 80046a8:	bf08      	it	eq
 80046aa:	68f5      	ldreq	r5, [r6, #12]
 80046ac:	e7da      	b.n	8004664 <_vfiprintf_r+0x20>
 80046ae:	89ab      	ldrh	r3, [r5, #12]
 80046b0:	0598      	lsls	r0, r3, #22
 80046b2:	d4ed      	bmi.n	8004690 <_vfiprintf_r+0x4c>
 80046b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046b6:	f000 fb84 	bl	8004dc2 <__retarget_lock_release_recursive>
 80046ba:	e7e9      	b.n	8004690 <_vfiprintf_r+0x4c>
 80046bc:	2300      	movs	r3, #0
 80046be:	9309      	str	r3, [sp, #36]	; 0x24
 80046c0:	2320      	movs	r3, #32
 80046c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046c6:	2330      	movs	r3, #48	; 0x30
 80046c8:	f04f 0901 	mov.w	r9, #1
 80046cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80046d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004890 <_vfiprintf_r+0x24c>
 80046d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046d8:	4623      	mov	r3, r4
 80046da:	469a      	mov	sl, r3
 80046dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046e0:	b10a      	cbz	r2, 80046e6 <_vfiprintf_r+0xa2>
 80046e2:	2a25      	cmp	r2, #37	; 0x25
 80046e4:	d1f9      	bne.n	80046da <_vfiprintf_r+0x96>
 80046e6:	ebba 0b04 	subs.w	fp, sl, r4
 80046ea:	d00b      	beq.n	8004704 <_vfiprintf_r+0xc0>
 80046ec:	465b      	mov	r3, fp
 80046ee:	4622      	mov	r2, r4
 80046f0:	4629      	mov	r1, r5
 80046f2:	4630      	mov	r0, r6
 80046f4:	f7ff ff93 	bl	800461e <__sfputs_r>
 80046f8:	3001      	adds	r0, #1
 80046fa:	f000 80aa 	beq.w	8004852 <_vfiprintf_r+0x20e>
 80046fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004700:	445a      	add	r2, fp
 8004702:	9209      	str	r2, [sp, #36]	; 0x24
 8004704:	f89a 3000 	ldrb.w	r3, [sl]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 80a2 	beq.w	8004852 <_vfiprintf_r+0x20e>
 800470e:	2300      	movs	r3, #0
 8004710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004718:	f10a 0a01 	add.w	sl, sl, #1
 800471c:	9304      	str	r3, [sp, #16]
 800471e:	9307      	str	r3, [sp, #28]
 8004720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004724:	931a      	str	r3, [sp, #104]	; 0x68
 8004726:	4654      	mov	r4, sl
 8004728:	2205      	movs	r2, #5
 800472a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800472e:	4858      	ldr	r0, [pc, #352]	; (8004890 <_vfiprintf_r+0x24c>)
 8004730:	f7ff f914 	bl	800395c <memchr>
 8004734:	9a04      	ldr	r2, [sp, #16]
 8004736:	b9d8      	cbnz	r0, 8004770 <_vfiprintf_r+0x12c>
 8004738:	06d1      	lsls	r1, r2, #27
 800473a:	bf44      	itt	mi
 800473c:	2320      	movmi	r3, #32
 800473e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004742:	0713      	lsls	r3, r2, #28
 8004744:	bf44      	itt	mi
 8004746:	232b      	movmi	r3, #43	; 0x2b
 8004748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800474c:	f89a 3000 	ldrb.w	r3, [sl]
 8004750:	2b2a      	cmp	r3, #42	; 0x2a
 8004752:	d015      	beq.n	8004780 <_vfiprintf_r+0x13c>
 8004754:	4654      	mov	r4, sl
 8004756:	2000      	movs	r0, #0
 8004758:	f04f 0c0a 	mov.w	ip, #10
 800475c:	9a07      	ldr	r2, [sp, #28]
 800475e:	4621      	mov	r1, r4
 8004760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004764:	3b30      	subs	r3, #48	; 0x30
 8004766:	2b09      	cmp	r3, #9
 8004768:	d94e      	bls.n	8004808 <_vfiprintf_r+0x1c4>
 800476a:	b1b0      	cbz	r0, 800479a <_vfiprintf_r+0x156>
 800476c:	9207      	str	r2, [sp, #28]
 800476e:	e014      	b.n	800479a <_vfiprintf_r+0x156>
 8004770:	eba0 0308 	sub.w	r3, r0, r8
 8004774:	fa09 f303 	lsl.w	r3, r9, r3
 8004778:	4313      	orrs	r3, r2
 800477a:	46a2      	mov	sl, r4
 800477c:	9304      	str	r3, [sp, #16]
 800477e:	e7d2      	b.n	8004726 <_vfiprintf_r+0xe2>
 8004780:	9b03      	ldr	r3, [sp, #12]
 8004782:	1d19      	adds	r1, r3, #4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	9103      	str	r1, [sp, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	bfbb      	ittet	lt
 800478c:	425b      	neglt	r3, r3
 800478e:	f042 0202 	orrlt.w	r2, r2, #2
 8004792:	9307      	strge	r3, [sp, #28]
 8004794:	9307      	strlt	r3, [sp, #28]
 8004796:	bfb8      	it	lt
 8004798:	9204      	strlt	r2, [sp, #16]
 800479a:	7823      	ldrb	r3, [r4, #0]
 800479c:	2b2e      	cmp	r3, #46	; 0x2e
 800479e:	d10c      	bne.n	80047ba <_vfiprintf_r+0x176>
 80047a0:	7863      	ldrb	r3, [r4, #1]
 80047a2:	2b2a      	cmp	r3, #42	; 0x2a
 80047a4:	d135      	bne.n	8004812 <_vfiprintf_r+0x1ce>
 80047a6:	9b03      	ldr	r3, [sp, #12]
 80047a8:	3402      	adds	r4, #2
 80047aa:	1d1a      	adds	r2, r3, #4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	9203      	str	r2, [sp, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bfb8      	it	lt
 80047b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80047b8:	9305      	str	r3, [sp, #20]
 80047ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80048a0 <_vfiprintf_r+0x25c>
 80047be:	2203      	movs	r2, #3
 80047c0:	4650      	mov	r0, sl
 80047c2:	7821      	ldrb	r1, [r4, #0]
 80047c4:	f7ff f8ca 	bl	800395c <memchr>
 80047c8:	b140      	cbz	r0, 80047dc <_vfiprintf_r+0x198>
 80047ca:	2340      	movs	r3, #64	; 0x40
 80047cc:	eba0 000a 	sub.w	r0, r0, sl
 80047d0:	fa03 f000 	lsl.w	r0, r3, r0
 80047d4:	9b04      	ldr	r3, [sp, #16]
 80047d6:	3401      	adds	r4, #1
 80047d8:	4303      	orrs	r3, r0
 80047da:	9304      	str	r3, [sp, #16]
 80047dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e0:	2206      	movs	r2, #6
 80047e2:	482c      	ldr	r0, [pc, #176]	; (8004894 <_vfiprintf_r+0x250>)
 80047e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047e8:	f7ff f8b8 	bl	800395c <memchr>
 80047ec:	2800      	cmp	r0, #0
 80047ee:	d03f      	beq.n	8004870 <_vfiprintf_r+0x22c>
 80047f0:	4b29      	ldr	r3, [pc, #164]	; (8004898 <_vfiprintf_r+0x254>)
 80047f2:	bb1b      	cbnz	r3, 800483c <_vfiprintf_r+0x1f8>
 80047f4:	9b03      	ldr	r3, [sp, #12]
 80047f6:	3307      	adds	r3, #7
 80047f8:	f023 0307 	bic.w	r3, r3, #7
 80047fc:	3308      	adds	r3, #8
 80047fe:	9303      	str	r3, [sp, #12]
 8004800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004802:	443b      	add	r3, r7
 8004804:	9309      	str	r3, [sp, #36]	; 0x24
 8004806:	e767      	b.n	80046d8 <_vfiprintf_r+0x94>
 8004808:	460c      	mov	r4, r1
 800480a:	2001      	movs	r0, #1
 800480c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004810:	e7a5      	b.n	800475e <_vfiprintf_r+0x11a>
 8004812:	2300      	movs	r3, #0
 8004814:	f04f 0c0a 	mov.w	ip, #10
 8004818:	4619      	mov	r1, r3
 800481a:	3401      	adds	r4, #1
 800481c:	9305      	str	r3, [sp, #20]
 800481e:	4620      	mov	r0, r4
 8004820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004824:	3a30      	subs	r2, #48	; 0x30
 8004826:	2a09      	cmp	r2, #9
 8004828:	d903      	bls.n	8004832 <_vfiprintf_r+0x1ee>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0c5      	beq.n	80047ba <_vfiprintf_r+0x176>
 800482e:	9105      	str	r1, [sp, #20]
 8004830:	e7c3      	b.n	80047ba <_vfiprintf_r+0x176>
 8004832:	4604      	mov	r4, r0
 8004834:	2301      	movs	r3, #1
 8004836:	fb0c 2101 	mla	r1, ip, r1, r2
 800483a:	e7f0      	b.n	800481e <_vfiprintf_r+0x1da>
 800483c:	ab03      	add	r3, sp, #12
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	462a      	mov	r2, r5
 8004842:	4630      	mov	r0, r6
 8004844:	4b15      	ldr	r3, [pc, #84]	; (800489c <_vfiprintf_r+0x258>)
 8004846:	a904      	add	r1, sp, #16
 8004848:	f7fd fe1e 	bl	8002488 <_printf_float>
 800484c:	4607      	mov	r7, r0
 800484e:	1c78      	adds	r0, r7, #1
 8004850:	d1d6      	bne.n	8004800 <_vfiprintf_r+0x1bc>
 8004852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004854:	07d9      	lsls	r1, r3, #31
 8004856:	d405      	bmi.n	8004864 <_vfiprintf_r+0x220>
 8004858:	89ab      	ldrh	r3, [r5, #12]
 800485a:	059a      	lsls	r2, r3, #22
 800485c:	d402      	bmi.n	8004864 <_vfiprintf_r+0x220>
 800485e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004860:	f000 faaf 	bl	8004dc2 <__retarget_lock_release_recursive>
 8004864:	89ab      	ldrh	r3, [r5, #12]
 8004866:	065b      	lsls	r3, r3, #25
 8004868:	f53f af12 	bmi.w	8004690 <_vfiprintf_r+0x4c>
 800486c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800486e:	e711      	b.n	8004694 <_vfiprintf_r+0x50>
 8004870:	ab03      	add	r3, sp, #12
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	462a      	mov	r2, r5
 8004876:	4630      	mov	r0, r6
 8004878:	4b08      	ldr	r3, [pc, #32]	; (800489c <_vfiprintf_r+0x258>)
 800487a:	a904      	add	r1, sp, #16
 800487c:	f7fe f8a0 	bl	80029c0 <_printf_i>
 8004880:	e7e4      	b.n	800484c <_vfiprintf_r+0x208>
 8004882:	bf00      	nop
 8004884:	08005484 	.word	0x08005484
 8004888:	080054a4 	.word	0x080054a4
 800488c:	08005464 	.word	0x08005464
 8004890:	0800530c 	.word	0x0800530c
 8004894:	08005316 	.word	0x08005316
 8004898:	08002489 	.word	0x08002489
 800489c:	0800461f 	.word	0x0800461f
 80048a0:	08005312 	.word	0x08005312

080048a4 <__swbuf_r>:
 80048a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a6:	460e      	mov	r6, r1
 80048a8:	4614      	mov	r4, r2
 80048aa:	4605      	mov	r5, r0
 80048ac:	b118      	cbz	r0, 80048b6 <__swbuf_r+0x12>
 80048ae:	6983      	ldr	r3, [r0, #24]
 80048b0:	b90b      	cbnz	r3, 80048b6 <__swbuf_r+0x12>
 80048b2:	f000 f9e7 	bl	8004c84 <__sinit>
 80048b6:	4b21      	ldr	r3, [pc, #132]	; (800493c <__swbuf_r+0x98>)
 80048b8:	429c      	cmp	r4, r3
 80048ba:	d12b      	bne.n	8004914 <__swbuf_r+0x70>
 80048bc:	686c      	ldr	r4, [r5, #4]
 80048be:	69a3      	ldr	r3, [r4, #24]
 80048c0:	60a3      	str	r3, [r4, #8]
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	071a      	lsls	r2, r3, #28
 80048c6:	d52f      	bpl.n	8004928 <__swbuf_r+0x84>
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	b36b      	cbz	r3, 8004928 <__swbuf_r+0x84>
 80048cc:	6923      	ldr	r3, [r4, #16]
 80048ce:	6820      	ldr	r0, [r4, #0]
 80048d0:	b2f6      	uxtb	r6, r6
 80048d2:	1ac0      	subs	r0, r0, r3
 80048d4:	6963      	ldr	r3, [r4, #20]
 80048d6:	4637      	mov	r7, r6
 80048d8:	4283      	cmp	r3, r0
 80048da:	dc04      	bgt.n	80048e6 <__swbuf_r+0x42>
 80048dc:	4621      	mov	r1, r4
 80048de:	4628      	mov	r0, r5
 80048e0:	f000 f93c 	bl	8004b5c <_fflush_r>
 80048e4:	bb30      	cbnz	r0, 8004934 <__swbuf_r+0x90>
 80048e6:	68a3      	ldr	r3, [r4, #8]
 80048e8:	3001      	adds	r0, #1
 80048ea:	3b01      	subs	r3, #1
 80048ec:	60a3      	str	r3, [r4, #8]
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	6022      	str	r2, [r4, #0]
 80048f4:	701e      	strb	r6, [r3, #0]
 80048f6:	6963      	ldr	r3, [r4, #20]
 80048f8:	4283      	cmp	r3, r0
 80048fa:	d004      	beq.n	8004906 <__swbuf_r+0x62>
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	07db      	lsls	r3, r3, #31
 8004900:	d506      	bpl.n	8004910 <__swbuf_r+0x6c>
 8004902:	2e0a      	cmp	r6, #10
 8004904:	d104      	bne.n	8004910 <__swbuf_r+0x6c>
 8004906:	4621      	mov	r1, r4
 8004908:	4628      	mov	r0, r5
 800490a:	f000 f927 	bl	8004b5c <_fflush_r>
 800490e:	b988      	cbnz	r0, 8004934 <__swbuf_r+0x90>
 8004910:	4638      	mov	r0, r7
 8004912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004914:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <__swbuf_r+0x9c>)
 8004916:	429c      	cmp	r4, r3
 8004918:	d101      	bne.n	800491e <__swbuf_r+0x7a>
 800491a:	68ac      	ldr	r4, [r5, #8]
 800491c:	e7cf      	b.n	80048be <__swbuf_r+0x1a>
 800491e:	4b09      	ldr	r3, [pc, #36]	; (8004944 <__swbuf_r+0xa0>)
 8004920:	429c      	cmp	r4, r3
 8004922:	bf08      	it	eq
 8004924:	68ec      	ldreq	r4, [r5, #12]
 8004926:	e7ca      	b.n	80048be <__swbuf_r+0x1a>
 8004928:	4621      	mov	r1, r4
 800492a:	4628      	mov	r0, r5
 800492c:	f000 f81a 	bl	8004964 <__swsetup_r>
 8004930:	2800      	cmp	r0, #0
 8004932:	d0cb      	beq.n	80048cc <__swbuf_r+0x28>
 8004934:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004938:	e7ea      	b.n	8004910 <__swbuf_r+0x6c>
 800493a:	bf00      	nop
 800493c:	08005484 	.word	0x08005484
 8004940:	080054a4 	.word	0x080054a4
 8004944:	08005464 	.word	0x08005464

08004948 <__ascii_wctomb>:
 8004948:	4603      	mov	r3, r0
 800494a:	4608      	mov	r0, r1
 800494c:	b141      	cbz	r1, 8004960 <__ascii_wctomb+0x18>
 800494e:	2aff      	cmp	r2, #255	; 0xff
 8004950:	d904      	bls.n	800495c <__ascii_wctomb+0x14>
 8004952:	228a      	movs	r2, #138	; 0x8a
 8004954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	4770      	bx	lr
 800495c:	2001      	movs	r0, #1
 800495e:	700a      	strb	r2, [r1, #0]
 8004960:	4770      	bx	lr
	...

08004964 <__swsetup_r>:
 8004964:	4b32      	ldr	r3, [pc, #200]	; (8004a30 <__swsetup_r+0xcc>)
 8004966:	b570      	push	{r4, r5, r6, lr}
 8004968:	681d      	ldr	r5, [r3, #0]
 800496a:	4606      	mov	r6, r0
 800496c:	460c      	mov	r4, r1
 800496e:	b125      	cbz	r5, 800497a <__swsetup_r+0x16>
 8004970:	69ab      	ldr	r3, [r5, #24]
 8004972:	b913      	cbnz	r3, 800497a <__swsetup_r+0x16>
 8004974:	4628      	mov	r0, r5
 8004976:	f000 f985 	bl	8004c84 <__sinit>
 800497a:	4b2e      	ldr	r3, [pc, #184]	; (8004a34 <__swsetup_r+0xd0>)
 800497c:	429c      	cmp	r4, r3
 800497e:	d10f      	bne.n	80049a0 <__swsetup_r+0x3c>
 8004980:	686c      	ldr	r4, [r5, #4]
 8004982:	89a3      	ldrh	r3, [r4, #12]
 8004984:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004988:	0719      	lsls	r1, r3, #28
 800498a:	d42c      	bmi.n	80049e6 <__swsetup_r+0x82>
 800498c:	06dd      	lsls	r5, r3, #27
 800498e:	d411      	bmi.n	80049b4 <__swsetup_r+0x50>
 8004990:	2309      	movs	r3, #9
 8004992:	6033      	str	r3, [r6, #0]
 8004994:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800499c:	81a3      	strh	r3, [r4, #12]
 800499e:	e03e      	b.n	8004a1e <__swsetup_r+0xba>
 80049a0:	4b25      	ldr	r3, [pc, #148]	; (8004a38 <__swsetup_r+0xd4>)
 80049a2:	429c      	cmp	r4, r3
 80049a4:	d101      	bne.n	80049aa <__swsetup_r+0x46>
 80049a6:	68ac      	ldr	r4, [r5, #8]
 80049a8:	e7eb      	b.n	8004982 <__swsetup_r+0x1e>
 80049aa:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <__swsetup_r+0xd8>)
 80049ac:	429c      	cmp	r4, r3
 80049ae:	bf08      	it	eq
 80049b0:	68ec      	ldreq	r4, [r5, #12]
 80049b2:	e7e6      	b.n	8004982 <__swsetup_r+0x1e>
 80049b4:	0758      	lsls	r0, r3, #29
 80049b6:	d512      	bpl.n	80049de <__swsetup_r+0x7a>
 80049b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049ba:	b141      	cbz	r1, 80049ce <__swsetup_r+0x6a>
 80049bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049c0:	4299      	cmp	r1, r3
 80049c2:	d002      	beq.n	80049ca <__swsetup_r+0x66>
 80049c4:	4630      	mov	r0, r6
 80049c6:	f7ff fb75 	bl	80040b4 <_free_r>
 80049ca:	2300      	movs	r3, #0
 80049cc:	6363      	str	r3, [r4, #52]	; 0x34
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	2300      	movs	r3, #0
 80049d8:	6063      	str	r3, [r4, #4]
 80049da:	6923      	ldr	r3, [r4, #16]
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	89a3      	ldrh	r3, [r4, #12]
 80049e0:	f043 0308 	orr.w	r3, r3, #8
 80049e4:	81a3      	strh	r3, [r4, #12]
 80049e6:	6923      	ldr	r3, [r4, #16]
 80049e8:	b94b      	cbnz	r3, 80049fe <__swsetup_r+0x9a>
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049f4:	d003      	beq.n	80049fe <__swsetup_r+0x9a>
 80049f6:	4621      	mov	r1, r4
 80049f8:	4630      	mov	r0, r6
 80049fa:	f000 fa07 	bl	8004e0c <__smakebuf_r>
 80049fe:	89a0      	ldrh	r0, [r4, #12]
 8004a00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a04:	f010 0301 	ands.w	r3, r0, #1
 8004a08:	d00a      	beq.n	8004a20 <__swsetup_r+0xbc>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60a3      	str	r3, [r4, #8]
 8004a0e:	6963      	ldr	r3, [r4, #20]
 8004a10:	425b      	negs	r3, r3
 8004a12:	61a3      	str	r3, [r4, #24]
 8004a14:	6923      	ldr	r3, [r4, #16]
 8004a16:	b943      	cbnz	r3, 8004a2a <__swsetup_r+0xc6>
 8004a18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a1c:	d1ba      	bne.n	8004994 <__swsetup_r+0x30>
 8004a1e:	bd70      	pop	{r4, r5, r6, pc}
 8004a20:	0781      	lsls	r1, r0, #30
 8004a22:	bf58      	it	pl
 8004a24:	6963      	ldrpl	r3, [r4, #20]
 8004a26:	60a3      	str	r3, [r4, #8]
 8004a28:	e7f4      	b.n	8004a14 <__swsetup_r+0xb0>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e7f7      	b.n	8004a1e <__swsetup_r+0xba>
 8004a2e:	bf00      	nop
 8004a30:	20000010 	.word	0x20000010
 8004a34:	08005484 	.word	0x08005484
 8004a38:	080054a4 	.word	0x080054a4
 8004a3c:	08005464 	.word	0x08005464

08004a40 <abort>:
 8004a40:	2006      	movs	r0, #6
 8004a42:	b508      	push	{r3, lr}
 8004a44:	f000 fa52 	bl	8004eec <raise>
 8004a48:	2001      	movs	r0, #1
 8004a4a:	f7fc fc65 	bl	8001318 <_exit>
	...

08004a50 <__sflush_r>:
 8004a50:	898a      	ldrh	r2, [r1, #12]
 8004a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a56:	4605      	mov	r5, r0
 8004a58:	0710      	lsls	r0, r2, #28
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	d458      	bmi.n	8004b10 <__sflush_r+0xc0>
 8004a5e:	684b      	ldr	r3, [r1, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	dc05      	bgt.n	8004a70 <__sflush_r+0x20>
 8004a64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	dc02      	bgt.n	8004a70 <__sflush_r+0x20>
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a72:	2e00      	cmp	r6, #0
 8004a74:	d0f9      	beq.n	8004a6a <__sflush_r+0x1a>
 8004a76:	2300      	movs	r3, #0
 8004a78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a7c:	682f      	ldr	r7, [r5, #0]
 8004a7e:	602b      	str	r3, [r5, #0]
 8004a80:	d032      	beq.n	8004ae8 <__sflush_r+0x98>
 8004a82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a84:	89a3      	ldrh	r3, [r4, #12]
 8004a86:	075a      	lsls	r2, r3, #29
 8004a88:	d505      	bpl.n	8004a96 <__sflush_r+0x46>
 8004a8a:	6863      	ldr	r3, [r4, #4]
 8004a8c:	1ac0      	subs	r0, r0, r3
 8004a8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a90:	b10b      	cbz	r3, 8004a96 <__sflush_r+0x46>
 8004a92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a94:	1ac0      	subs	r0, r0, r3
 8004a96:	2300      	movs	r3, #0
 8004a98:	4602      	mov	r2, r0
 8004a9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	6a21      	ldr	r1, [r4, #32]
 8004aa0:	47b0      	blx	r6
 8004aa2:	1c43      	adds	r3, r0, #1
 8004aa4:	89a3      	ldrh	r3, [r4, #12]
 8004aa6:	d106      	bne.n	8004ab6 <__sflush_r+0x66>
 8004aa8:	6829      	ldr	r1, [r5, #0]
 8004aaa:	291d      	cmp	r1, #29
 8004aac:	d82c      	bhi.n	8004b08 <__sflush_r+0xb8>
 8004aae:	4a2a      	ldr	r2, [pc, #168]	; (8004b58 <__sflush_r+0x108>)
 8004ab0:	40ca      	lsrs	r2, r1
 8004ab2:	07d6      	lsls	r6, r2, #31
 8004ab4:	d528      	bpl.n	8004b08 <__sflush_r+0xb8>
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	6062      	str	r2, [r4, #4]
 8004aba:	6922      	ldr	r2, [r4, #16]
 8004abc:	04d9      	lsls	r1, r3, #19
 8004abe:	6022      	str	r2, [r4, #0]
 8004ac0:	d504      	bpl.n	8004acc <__sflush_r+0x7c>
 8004ac2:	1c42      	adds	r2, r0, #1
 8004ac4:	d101      	bne.n	8004aca <__sflush_r+0x7a>
 8004ac6:	682b      	ldr	r3, [r5, #0]
 8004ac8:	b903      	cbnz	r3, 8004acc <__sflush_r+0x7c>
 8004aca:	6560      	str	r0, [r4, #84]	; 0x54
 8004acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ace:	602f      	str	r7, [r5, #0]
 8004ad0:	2900      	cmp	r1, #0
 8004ad2:	d0ca      	beq.n	8004a6a <__sflush_r+0x1a>
 8004ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ad8:	4299      	cmp	r1, r3
 8004ada:	d002      	beq.n	8004ae2 <__sflush_r+0x92>
 8004adc:	4628      	mov	r0, r5
 8004ade:	f7ff fae9 	bl	80040b4 <_free_r>
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	6360      	str	r0, [r4, #52]	; 0x34
 8004ae6:	e7c1      	b.n	8004a6c <__sflush_r+0x1c>
 8004ae8:	6a21      	ldr	r1, [r4, #32]
 8004aea:	2301      	movs	r3, #1
 8004aec:	4628      	mov	r0, r5
 8004aee:	47b0      	blx	r6
 8004af0:	1c41      	adds	r1, r0, #1
 8004af2:	d1c7      	bne.n	8004a84 <__sflush_r+0x34>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0c4      	beq.n	8004a84 <__sflush_r+0x34>
 8004afa:	2b1d      	cmp	r3, #29
 8004afc:	d001      	beq.n	8004b02 <__sflush_r+0xb2>
 8004afe:	2b16      	cmp	r3, #22
 8004b00:	d101      	bne.n	8004b06 <__sflush_r+0xb6>
 8004b02:	602f      	str	r7, [r5, #0]
 8004b04:	e7b1      	b.n	8004a6a <__sflush_r+0x1a>
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b0c:	81a3      	strh	r3, [r4, #12]
 8004b0e:	e7ad      	b.n	8004a6c <__sflush_r+0x1c>
 8004b10:	690f      	ldr	r7, [r1, #16]
 8004b12:	2f00      	cmp	r7, #0
 8004b14:	d0a9      	beq.n	8004a6a <__sflush_r+0x1a>
 8004b16:	0793      	lsls	r3, r2, #30
 8004b18:	bf18      	it	ne
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	680e      	ldr	r6, [r1, #0]
 8004b1e:	bf08      	it	eq
 8004b20:	694b      	ldreq	r3, [r1, #20]
 8004b22:	eba6 0807 	sub.w	r8, r6, r7
 8004b26:	600f      	str	r7, [r1, #0]
 8004b28:	608b      	str	r3, [r1, #8]
 8004b2a:	f1b8 0f00 	cmp.w	r8, #0
 8004b2e:	dd9c      	ble.n	8004a6a <__sflush_r+0x1a>
 8004b30:	4643      	mov	r3, r8
 8004b32:	463a      	mov	r2, r7
 8004b34:	4628      	mov	r0, r5
 8004b36:	6a21      	ldr	r1, [r4, #32]
 8004b38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b3a:	47b0      	blx	r6
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	dc06      	bgt.n	8004b4e <__sflush_r+0xfe>
 8004b40:	89a3      	ldrh	r3, [r4, #12]
 8004b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b4a:	81a3      	strh	r3, [r4, #12]
 8004b4c:	e78e      	b.n	8004a6c <__sflush_r+0x1c>
 8004b4e:	4407      	add	r7, r0
 8004b50:	eba8 0800 	sub.w	r8, r8, r0
 8004b54:	e7e9      	b.n	8004b2a <__sflush_r+0xda>
 8004b56:	bf00      	nop
 8004b58:	20400001 	.word	0x20400001

08004b5c <_fflush_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	690b      	ldr	r3, [r1, #16]
 8004b60:	4605      	mov	r5, r0
 8004b62:	460c      	mov	r4, r1
 8004b64:	b913      	cbnz	r3, 8004b6c <_fflush_r+0x10>
 8004b66:	2500      	movs	r5, #0
 8004b68:	4628      	mov	r0, r5
 8004b6a:	bd38      	pop	{r3, r4, r5, pc}
 8004b6c:	b118      	cbz	r0, 8004b76 <_fflush_r+0x1a>
 8004b6e:	6983      	ldr	r3, [r0, #24]
 8004b70:	b90b      	cbnz	r3, 8004b76 <_fflush_r+0x1a>
 8004b72:	f000 f887 	bl	8004c84 <__sinit>
 8004b76:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <_fflush_r+0x6c>)
 8004b78:	429c      	cmp	r4, r3
 8004b7a:	d11b      	bne.n	8004bb4 <_fflush_r+0x58>
 8004b7c:	686c      	ldr	r4, [r5, #4]
 8004b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0ef      	beq.n	8004b66 <_fflush_r+0xa>
 8004b86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b88:	07d0      	lsls	r0, r2, #31
 8004b8a:	d404      	bmi.n	8004b96 <_fflush_r+0x3a>
 8004b8c:	0599      	lsls	r1, r3, #22
 8004b8e:	d402      	bmi.n	8004b96 <_fflush_r+0x3a>
 8004b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b92:	f000 f915 	bl	8004dc0 <__retarget_lock_acquire_recursive>
 8004b96:	4628      	mov	r0, r5
 8004b98:	4621      	mov	r1, r4
 8004b9a:	f7ff ff59 	bl	8004a50 <__sflush_r>
 8004b9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ba0:	4605      	mov	r5, r0
 8004ba2:	07da      	lsls	r2, r3, #31
 8004ba4:	d4e0      	bmi.n	8004b68 <_fflush_r+0xc>
 8004ba6:	89a3      	ldrh	r3, [r4, #12]
 8004ba8:	059b      	lsls	r3, r3, #22
 8004baa:	d4dd      	bmi.n	8004b68 <_fflush_r+0xc>
 8004bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bae:	f000 f908 	bl	8004dc2 <__retarget_lock_release_recursive>
 8004bb2:	e7d9      	b.n	8004b68 <_fflush_r+0xc>
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <_fflush_r+0x70>)
 8004bb6:	429c      	cmp	r4, r3
 8004bb8:	d101      	bne.n	8004bbe <_fflush_r+0x62>
 8004bba:	68ac      	ldr	r4, [r5, #8]
 8004bbc:	e7df      	b.n	8004b7e <_fflush_r+0x22>
 8004bbe:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <_fflush_r+0x74>)
 8004bc0:	429c      	cmp	r4, r3
 8004bc2:	bf08      	it	eq
 8004bc4:	68ec      	ldreq	r4, [r5, #12]
 8004bc6:	e7da      	b.n	8004b7e <_fflush_r+0x22>
 8004bc8:	08005484 	.word	0x08005484
 8004bcc:	080054a4 	.word	0x080054a4
 8004bd0:	08005464 	.word	0x08005464

08004bd4 <std>:
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	b510      	push	{r4, lr}
 8004bd8:	4604      	mov	r4, r0
 8004bda:	e9c0 3300 	strd	r3, r3, [r0]
 8004bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004be2:	6083      	str	r3, [r0, #8]
 8004be4:	8181      	strh	r1, [r0, #12]
 8004be6:	6643      	str	r3, [r0, #100]	; 0x64
 8004be8:	81c2      	strh	r2, [r0, #14]
 8004bea:	6183      	str	r3, [r0, #24]
 8004bec:	4619      	mov	r1, r3
 8004bee:	2208      	movs	r2, #8
 8004bf0:	305c      	adds	r0, #92	; 0x5c
 8004bf2:	f7fd fba3 	bl	800233c <memset>
 8004bf6:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <std+0x38>)
 8004bf8:	6224      	str	r4, [r4, #32]
 8004bfa:	6263      	str	r3, [r4, #36]	; 0x24
 8004bfc:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <std+0x3c>)
 8004bfe:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c00:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <std+0x40>)
 8004c02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c04:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <std+0x44>)
 8004c06:	6323      	str	r3, [r4, #48]	; 0x30
 8004c08:	bd10      	pop	{r4, pc}
 8004c0a:	bf00      	nop
 8004c0c:	08004f25 	.word	0x08004f25
 8004c10:	08004f47 	.word	0x08004f47
 8004c14:	08004f7f 	.word	0x08004f7f
 8004c18:	08004fa3 	.word	0x08004fa3

08004c1c <_cleanup_r>:
 8004c1c:	4901      	ldr	r1, [pc, #4]	; (8004c24 <_cleanup_r+0x8>)
 8004c1e:	f000 b8af 	b.w	8004d80 <_fwalk_reent>
 8004c22:	bf00      	nop
 8004c24:	08004b5d 	.word	0x08004b5d

08004c28 <__sfmoreglue>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	2568      	movs	r5, #104	; 0x68
 8004c2c:	1e4a      	subs	r2, r1, #1
 8004c2e:	4355      	muls	r5, r2
 8004c30:	460e      	mov	r6, r1
 8004c32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c36:	f7ff fa89 	bl	800414c <_malloc_r>
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	b140      	cbz	r0, 8004c50 <__sfmoreglue+0x28>
 8004c3e:	2100      	movs	r1, #0
 8004c40:	e9c0 1600 	strd	r1, r6, [r0]
 8004c44:	300c      	adds	r0, #12
 8004c46:	60a0      	str	r0, [r4, #8]
 8004c48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c4c:	f7fd fb76 	bl	800233c <memset>
 8004c50:	4620      	mov	r0, r4
 8004c52:	bd70      	pop	{r4, r5, r6, pc}

08004c54 <__sfp_lock_acquire>:
 8004c54:	4801      	ldr	r0, [pc, #4]	; (8004c5c <__sfp_lock_acquire+0x8>)
 8004c56:	f000 b8b3 	b.w	8004dc0 <__retarget_lock_acquire_recursive>
 8004c5a:	bf00      	nop
 8004c5c:	20000238 	.word	0x20000238

08004c60 <__sfp_lock_release>:
 8004c60:	4801      	ldr	r0, [pc, #4]	; (8004c68 <__sfp_lock_release+0x8>)
 8004c62:	f000 b8ae 	b.w	8004dc2 <__retarget_lock_release_recursive>
 8004c66:	bf00      	nop
 8004c68:	20000238 	.word	0x20000238

08004c6c <__sinit_lock_acquire>:
 8004c6c:	4801      	ldr	r0, [pc, #4]	; (8004c74 <__sinit_lock_acquire+0x8>)
 8004c6e:	f000 b8a7 	b.w	8004dc0 <__retarget_lock_acquire_recursive>
 8004c72:	bf00      	nop
 8004c74:	20000233 	.word	0x20000233

08004c78 <__sinit_lock_release>:
 8004c78:	4801      	ldr	r0, [pc, #4]	; (8004c80 <__sinit_lock_release+0x8>)
 8004c7a:	f000 b8a2 	b.w	8004dc2 <__retarget_lock_release_recursive>
 8004c7e:	bf00      	nop
 8004c80:	20000233 	.word	0x20000233

08004c84 <__sinit>:
 8004c84:	b510      	push	{r4, lr}
 8004c86:	4604      	mov	r4, r0
 8004c88:	f7ff fff0 	bl	8004c6c <__sinit_lock_acquire>
 8004c8c:	69a3      	ldr	r3, [r4, #24]
 8004c8e:	b11b      	cbz	r3, 8004c98 <__sinit+0x14>
 8004c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c94:	f7ff bff0 	b.w	8004c78 <__sinit_lock_release>
 8004c98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c9c:	6523      	str	r3, [r4, #80]	; 0x50
 8004c9e:	4b13      	ldr	r3, [pc, #76]	; (8004cec <__sinit+0x68>)
 8004ca0:	4a13      	ldr	r2, [pc, #76]	; (8004cf0 <__sinit+0x6c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ca6:	42a3      	cmp	r3, r4
 8004ca8:	bf08      	it	eq
 8004caa:	2301      	moveq	r3, #1
 8004cac:	4620      	mov	r0, r4
 8004cae:	bf08      	it	eq
 8004cb0:	61a3      	streq	r3, [r4, #24]
 8004cb2:	f000 f81f 	bl	8004cf4 <__sfp>
 8004cb6:	6060      	str	r0, [r4, #4]
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f000 f81b 	bl	8004cf4 <__sfp>
 8004cbe:	60a0      	str	r0, [r4, #8]
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f000 f817 	bl	8004cf4 <__sfp>
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2104      	movs	r1, #4
 8004cca:	60e0      	str	r0, [r4, #12]
 8004ccc:	6860      	ldr	r0, [r4, #4]
 8004cce:	f7ff ff81 	bl	8004bd4 <std>
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	2109      	movs	r1, #9
 8004cd6:	68a0      	ldr	r0, [r4, #8]
 8004cd8:	f7ff ff7c 	bl	8004bd4 <std>
 8004cdc:	2202      	movs	r2, #2
 8004cde:	2112      	movs	r1, #18
 8004ce0:	68e0      	ldr	r0, [r4, #12]
 8004ce2:	f7ff ff77 	bl	8004bd4 <std>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	61a3      	str	r3, [r4, #24]
 8004cea:	e7d1      	b.n	8004c90 <__sinit+0xc>
 8004cec:	080050e0 	.word	0x080050e0
 8004cf0:	08004c1d 	.word	0x08004c1d

08004cf4 <__sfp>:
 8004cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf6:	4607      	mov	r7, r0
 8004cf8:	f7ff ffac 	bl	8004c54 <__sfp_lock_acquire>
 8004cfc:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <__sfp+0x84>)
 8004cfe:	681e      	ldr	r6, [r3, #0]
 8004d00:	69b3      	ldr	r3, [r6, #24]
 8004d02:	b913      	cbnz	r3, 8004d0a <__sfp+0x16>
 8004d04:	4630      	mov	r0, r6
 8004d06:	f7ff ffbd 	bl	8004c84 <__sinit>
 8004d0a:	3648      	adds	r6, #72	; 0x48
 8004d0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	d503      	bpl.n	8004d1c <__sfp+0x28>
 8004d14:	6833      	ldr	r3, [r6, #0]
 8004d16:	b30b      	cbz	r3, 8004d5c <__sfp+0x68>
 8004d18:	6836      	ldr	r6, [r6, #0]
 8004d1a:	e7f7      	b.n	8004d0c <__sfp+0x18>
 8004d1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d20:	b9d5      	cbnz	r5, 8004d58 <__sfp+0x64>
 8004d22:	4b16      	ldr	r3, [pc, #88]	; (8004d7c <__sfp+0x88>)
 8004d24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d28:	60e3      	str	r3, [r4, #12]
 8004d2a:	6665      	str	r5, [r4, #100]	; 0x64
 8004d2c:	f000 f847 	bl	8004dbe <__retarget_lock_init_recursive>
 8004d30:	f7ff ff96 	bl	8004c60 <__sfp_lock_release>
 8004d34:	2208      	movs	r2, #8
 8004d36:	4629      	mov	r1, r5
 8004d38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d40:	6025      	str	r5, [r4, #0]
 8004d42:	61a5      	str	r5, [r4, #24]
 8004d44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d48:	f7fd faf8 	bl	800233c <memset>
 8004d4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d54:	4620      	mov	r0, r4
 8004d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d58:	3468      	adds	r4, #104	; 0x68
 8004d5a:	e7d9      	b.n	8004d10 <__sfp+0x1c>
 8004d5c:	2104      	movs	r1, #4
 8004d5e:	4638      	mov	r0, r7
 8004d60:	f7ff ff62 	bl	8004c28 <__sfmoreglue>
 8004d64:	4604      	mov	r4, r0
 8004d66:	6030      	str	r0, [r6, #0]
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	d1d5      	bne.n	8004d18 <__sfp+0x24>
 8004d6c:	f7ff ff78 	bl	8004c60 <__sfp_lock_release>
 8004d70:	230c      	movs	r3, #12
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	e7ee      	b.n	8004d54 <__sfp+0x60>
 8004d76:	bf00      	nop
 8004d78:	080050e0 	.word	0x080050e0
 8004d7c:	ffff0001 	.word	0xffff0001

08004d80 <_fwalk_reent>:
 8004d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d84:	4606      	mov	r6, r0
 8004d86:	4688      	mov	r8, r1
 8004d88:	2700      	movs	r7, #0
 8004d8a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d92:	f1b9 0901 	subs.w	r9, r9, #1
 8004d96:	d505      	bpl.n	8004da4 <_fwalk_reent+0x24>
 8004d98:	6824      	ldr	r4, [r4, #0]
 8004d9a:	2c00      	cmp	r4, #0
 8004d9c:	d1f7      	bne.n	8004d8e <_fwalk_reent+0xe>
 8004d9e:	4638      	mov	r0, r7
 8004da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004da4:	89ab      	ldrh	r3, [r5, #12]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d907      	bls.n	8004dba <_fwalk_reent+0x3a>
 8004daa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dae:	3301      	adds	r3, #1
 8004db0:	d003      	beq.n	8004dba <_fwalk_reent+0x3a>
 8004db2:	4629      	mov	r1, r5
 8004db4:	4630      	mov	r0, r6
 8004db6:	47c0      	blx	r8
 8004db8:	4307      	orrs	r7, r0
 8004dba:	3568      	adds	r5, #104	; 0x68
 8004dbc:	e7e9      	b.n	8004d92 <_fwalk_reent+0x12>

08004dbe <__retarget_lock_init_recursive>:
 8004dbe:	4770      	bx	lr

08004dc0 <__retarget_lock_acquire_recursive>:
 8004dc0:	4770      	bx	lr

08004dc2 <__retarget_lock_release_recursive>:
 8004dc2:	4770      	bx	lr

08004dc4 <__swhatbuf_r>:
 8004dc4:	b570      	push	{r4, r5, r6, lr}
 8004dc6:	460e      	mov	r6, r1
 8004dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dcc:	4614      	mov	r4, r2
 8004dce:	2900      	cmp	r1, #0
 8004dd0:	461d      	mov	r5, r3
 8004dd2:	b096      	sub	sp, #88	; 0x58
 8004dd4:	da07      	bge.n	8004de6 <__swhatbuf_r+0x22>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	602b      	str	r3, [r5, #0]
 8004dda:	89b3      	ldrh	r3, [r6, #12]
 8004ddc:	061a      	lsls	r2, r3, #24
 8004dde:	d410      	bmi.n	8004e02 <__swhatbuf_r+0x3e>
 8004de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004de4:	e00e      	b.n	8004e04 <__swhatbuf_r+0x40>
 8004de6:	466a      	mov	r2, sp
 8004de8:	f000 f902 	bl	8004ff0 <_fstat_r>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	dbf2      	blt.n	8004dd6 <__swhatbuf_r+0x12>
 8004df0:	9a01      	ldr	r2, [sp, #4]
 8004df2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004df6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004dfa:	425a      	negs	r2, r3
 8004dfc:	415a      	adcs	r2, r3
 8004dfe:	602a      	str	r2, [r5, #0]
 8004e00:	e7ee      	b.n	8004de0 <__swhatbuf_r+0x1c>
 8004e02:	2340      	movs	r3, #64	; 0x40
 8004e04:	2000      	movs	r0, #0
 8004e06:	6023      	str	r3, [r4, #0]
 8004e08:	b016      	add	sp, #88	; 0x58
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}

08004e0c <__smakebuf_r>:
 8004e0c:	898b      	ldrh	r3, [r1, #12]
 8004e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e10:	079d      	lsls	r5, r3, #30
 8004e12:	4606      	mov	r6, r0
 8004e14:	460c      	mov	r4, r1
 8004e16:	d507      	bpl.n	8004e28 <__smakebuf_r+0x1c>
 8004e18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	6123      	str	r3, [r4, #16]
 8004e20:	2301      	movs	r3, #1
 8004e22:	6163      	str	r3, [r4, #20]
 8004e24:	b002      	add	sp, #8
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	466a      	mov	r2, sp
 8004e2a:	ab01      	add	r3, sp, #4
 8004e2c:	f7ff ffca 	bl	8004dc4 <__swhatbuf_r>
 8004e30:	9900      	ldr	r1, [sp, #0]
 8004e32:	4605      	mov	r5, r0
 8004e34:	4630      	mov	r0, r6
 8004e36:	f7ff f989 	bl	800414c <_malloc_r>
 8004e3a:	b948      	cbnz	r0, 8004e50 <__smakebuf_r+0x44>
 8004e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e40:	059a      	lsls	r2, r3, #22
 8004e42:	d4ef      	bmi.n	8004e24 <__smakebuf_r+0x18>
 8004e44:	f023 0303 	bic.w	r3, r3, #3
 8004e48:	f043 0302 	orr.w	r3, r3, #2
 8004e4c:	81a3      	strh	r3, [r4, #12]
 8004e4e:	e7e3      	b.n	8004e18 <__smakebuf_r+0xc>
 8004e50:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <__smakebuf_r+0x7c>)
 8004e52:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	6020      	str	r0, [r4, #0]
 8004e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5c:	81a3      	strh	r3, [r4, #12]
 8004e5e:	9b00      	ldr	r3, [sp, #0]
 8004e60:	6120      	str	r0, [r4, #16]
 8004e62:	6163      	str	r3, [r4, #20]
 8004e64:	9b01      	ldr	r3, [sp, #4]
 8004e66:	b15b      	cbz	r3, 8004e80 <__smakebuf_r+0x74>
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e6e:	f000 f8d1 	bl	8005014 <_isatty_r>
 8004e72:	b128      	cbz	r0, 8004e80 <__smakebuf_r+0x74>
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	f023 0303 	bic.w	r3, r3, #3
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	81a3      	strh	r3, [r4, #12]
 8004e80:	89a0      	ldrh	r0, [r4, #12]
 8004e82:	4305      	orrs	r5, r0
 8004e84:	81a5      	strh	r5, [r4, #12]
 8004e86:	e7cd      	b.n	8004e24 <__smakebuf_r+0x18>
 8004e88:	08004c1d 	.word	0x08004c1d

08004e8c <_malloc_usable_size_r>:
 8004e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e90:	1f18      	subs	r0, r3, #4
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bfbc      	itt	lt
 8004e96:	580b      	ldrlt	r3, [r1, r0]
 8004e98:	18c0      	addlt	r0, r0, r3
 8004e9a:	4770      	bx	lr

08004e9c <_raise_r>:
 8004e9c:	291f      	cmp	r1, #31
 8004e9e:	b538      	push	{r3, r4, r5, lr}
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	460d      	mov	r5, r1
 8004ea4:	d904      	bls.n	8004eb0 <_raise_r+0x14>
 8004ea6:	2316      	movs	r3, #22
 8004ea8:	6003      	str	r3, [r0, #0]
 8004eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004eb2:	b112      	cbz	r2, 8004eba <_raise_r+0x1e>
 8004eb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004eb8:	b94b      	cbnz	r3, 8004ece <_raise_r+0x32>
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f000 f830 	bl	8004f20 <_getpid_r>
 8004ec0:	462a      	mov	r2, r5
 8004ec2:	4601      	mov	r1, r0
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eca:	f000 b817 	b.w	8004efc <_kill_r>
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d00a      	beq.n	8004ee8 <_raise_r+0x4c>
 8004ed2:	1c59      	adds	r1, r3, #1
 8004ed4:	d103      	bne.n	8004ede <_raise_r+0x42>
 8004ed6:	2316      	movs	r3, #22
 8004ed8:	6003      	str	r3, [r0, #0]
 8004eda:	2001      	movs	r0, #1
 8004edc:	e7e7      	b.n	8004eae <_raise_r+0x12>
 8004ede:	2400      	movs	r4, #0
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004ee6:	4798      	blx	r3
 8004ee8:	2000      	movs	r0, #0
 8004eea:	e7e0      	b.n	8004eae <_raise_r+0x12>

08004eec <raise>:
 8004eec:	4b02      	ldr	r3, [pc, #8]	; (8004ef8 <raise+0xc>)
 8004eee:	4601      	mov	r1, r0
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	f7ff bfd3 	b.w	8004e9c <_raise_r>
 8004ef6:	bf00      	nop
 8004ef8:	20000010 	.word	0x20000010

08004efc <_kill_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	2300      	movs	r3, #0
 8004f00:	4d06      	ldr	r5, [pc, #24]	; (8004f1c <_kill_r+0x20>)
 8004f02:	4604      	mov	r4, r0
 8004f04:	4608      	mov	r0, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	602b      	str	r3, [r5, #0]
 8004f0a:	f7fc f9f5 	bl	80012f8 <_kill>
 8004f0e:	1c43      	adds	r3, r0, #1
 8004f10:	d102      	bne.n	8004f18 <_kill_r+0x1c>
 8004f12:	682b      	ldr	r3, [r5, #0]
 8004f14:	b103      	cbz	r3, 8004f18 <_kill_r+0x1c>
 8004f16:	6023      	str	r3, [r4, #0]
 8004f18:	bd38      	pop	{r3, r4, r5, pc}
 8004f1a:	bf00      	nop
 8004f1c:	2000022c 	.word	0x2000022c

08004f20 <_getpid_r>:
 8004f20:	f7fc b9e3 	b.w	80012ea <_getpid>

08004f24 <__sread>:
 8004f24:	b510      	push	{r4, lr}
 8004f26:	460c      	mov	r4, r1
 8004f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f2c:	f000 f894 	bl	8005058 <_read_r>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	bfab      	itete	ge
 8004f34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f36:	89a3      	ldrhlt	r3, [r4, #12]
 8004f38:	181b      	addge	r3, r3, r0
 8004f3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f3e:	bfac      	ite	ge
 8004f40:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f42:	81a3      	strhlt	r3, [r4, #12]
 8004f44:	bd10      	pop	{r4, pc}

08004f46 <__swrite>:
 8004f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f4a:	461f      	mov	r7, r3
 8004f4c:	898b      	ldrh	r3, [r1, #12]
 8004f4e:	4605      	mov	r5, r0
 8004f50:	05db      	lsls	r3, r3, #23
 8004f52:	460c      	mov	r4, r1
 8004f54:	4616      	mov	r6, r2
 8004f56:	d505      	bpl.n	8004f64 <__swrite+0x1e>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f60:	f000 f868 	bl	8005034 <_lseek_r>
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	4632      	mov	r2, r6
 8004f68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	4628      	mov	r0, r5
 8004f70:	463b      	mov	r3, r7
 8004f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f7a:	f000 b817 	b.w	8004fac <_write_r>

08004f7e <__sseek>:
 8004f7e:	b510      	push	{r4, lr}
 8004f80:	460c      	mov	r4, r1
 8004f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f86:	f000 f855 	bl	8005034 <_lseek_r>
 8004f8a:	1c43      	adds	r3, r0, #1
 8004f8c:	89a3      	ldrh	r3, [r4, #12]
 8004f8e:	bf15      	itete	ne
 8004f90:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f9a:	81a3      	strheq	r3, [r4, #12]
 8004f9c:	bf18      	it	ne
 8004f9e:	81a3      	strhne	r3, [r4, #12]
 8004fa0:	bd10      	pop	{r4, pc}

08004fa2 <__sclose>:
 8004fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa6:	f000 b813 	b.w	8004fd0 <_close_r>
	...

08004fac <_write_r>:
 8004fac:	b538      	push	{r3, r4, r5, lr}
 8004fae:	4604      	mov	r4, r0
 8004fb0:	4608      	mov	r0, r1
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	4d05      	ldr	r5, [pc, #20]	; (8004fcc <_write_r+0x20>)
 8004fb8:	602a      	str	r2, [r5, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f7fc f9d3 	bl	8001366 <_write>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d102      	bne.n	8004fca <_write_r+0x1e>
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	b103      	cbz	r3, 8004fca <_write_r+0x1e>
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	2000022c 	.word	0x2000022c

08004fd0 <_close_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	4d05      	ldr	r5, [pc, #20]	; (8004fec <_close_r+0x1c>)
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	4608      	mov	r0, r1
 8004fda:	602b      	str	r3, [r5, #0]
 8004fdc:	f7fc f9df 	bl	800139e <_close>
 8004fe0:	1c43      	adds	r3, r0, #1
 8004fe2:	d102      	bne.n	8004fea <_close_r+0x1a>
 8004fe4:	682b      	ldr	r3, [r5, #0]
 8004fe6:	b103      	cbz	r3, 8004fea <_close_r+0x1a>
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
 8004fec:	2000022c 	.word	0x2000022c

08004ff0 <_fstat_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	4d06      	ldr	r5, [pc, #24]	; (8005010 <_fstat_r+0x20>)
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	602b      	str	r3, [r5, #0]
 8004ffe:	f7fc f9d9 	bl	80013b4 <_fstat>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	d102      	bne.n	800500c <_fstat_r+0x1c>
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	b103      	cbz	r3, 800500c <_fstat_r+0x1c>
 800500a:	6023      	str	r3, [r4, #0]
 800500c:	bd38      	pop	{r3, r4, r5, pc}
 800500e:	bf00      	nop
 8005010:	2000022c 	.word	0x2000022c

08005014 <_isatty_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	2300      	movs	r3, #0
 8005018:	4d05      	ldr	r5, [pc, #20]	; (8005030 <_isatty_r+0x1c>)
 800501a:	4604      	mov	r4, r0
 800501c:	4608      	mov	r0, r1
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	f7fc f9d7 	bl	80013d2 <_isatty>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	d102      	bne.n	800502e <_isatty_r+0x1a>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	b103      	cbz	r3, 800502e <_isatty_r+0x1a>
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	2000022c 	.word	0x2000022c

08005034 <_lseek_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4604      	mov	r4, r0
 8005038:	4608      	mov	r0, r1
 800503a:	4611      	mov	r1, r2
 800503c:	2200      	movs	r2, #0
 800503e:	4d05      	ldr	r5, [pc, #20]	; (8005054 <_lseek_r+0x20>)
 8005040:	602a      	str	r2, [r5, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	f7fc f9cf 	bl	80013e6 <_lseek>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d102      	bne.n	8005052 <_lseek_r+0x1e>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b103      	cbz	r3, 8005052 <_lseek_r+0x1e>
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	2000022c 	.word	0x2000022c

08005058 <_read_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4604      	mov	r4, r0
 800505c:	4608      	mov	r0, r1
 800505e:	4611      	mov	r1, r2
 8005060:	2200      	movs	r2, #0
 8005062:	4d05      	ldr	r5, [pc, #20]	; (8005078 <_read_r+0x20>)
 8005064:	602a      	str	r2, [r5, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	f7fc f960 	bl	800132c <_read>
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	d102      	bne.n	8005076 <_read_r+0x1e>
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	b103      	cbz	r3, 8005076 <_read_r+0x1e>
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	bd38      	pop	{r3, r4, r5, pc}
 8005078:	2000022c 	.word	0x2000022c

0800507c <_init>:
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	bf00      	nop
 8005080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005082:	bc08      	pop	{r3}
 8005084:	469e      	mov	lr, r3
 8005086:	4770      	bx	lr

08005088 <_fini>:
 8005088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508a:	bf00      	nop
 800508c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508e:	bc08      	pop	{r3}
 8005090:	469e      	mov	lr, r3
 8005092:	4770      	bx	lr
