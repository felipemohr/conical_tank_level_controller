
tank_level_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008928  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08008a38  08008a38  00018a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f1c  08008f1c  000202a4  2**0
                  CONTENTS
  4 .ARM          00000000  08008f1c  08008f1c  000202a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f1c  08008f1c  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008f1c  08008f1c  00018f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008f24  08008f24  00018f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  08008f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200002a4  080091d0  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  080091d0  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd52  00000000  00000000  000202cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002682  00000000  00000000  0003001f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  000326a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  000335d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000031a7  00000000  00000000  00034410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea5c  00000000  00000000  000375b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092440  00000000  00000000  00046013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d8453  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052a4  00000000  00000000  000d84a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002a4 	.word	0x200002a4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008a20 	.word	0x08008a20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002a8 	.word	0x200002a8
 800014c:	08008a20 	.word	0x08008a20

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <_Z14FIRFilter_InitP9FIRFilter>:

#include "HeightSensor.h"


void FIRFilter_Init(FIRFilter *fir)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2b30      	cmp	r3, #48	; 0x30
 8001160:	d809      	bhi.n	8001176 <_Z14FIRFilter_InitP9FIRFilter+0x26>
    fir->buf[n] = 0.0f;
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0100 	mov.w	r1, #0
 800116a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e7f2      	b.n	800115c <_Z14FIRFilter_InitP9FIRFilter+0xc>
  fir->bufIndex = 0;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
  fir->out = 0.0f;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
	...

08001194 <_Z16FIRFilter_UpdateP9FIRFilterf>:


float FIRFilter_Update(FIRFilter *fir, float inp)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  fir->buf[fir->bufIndex] = inp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80011a4:	4619      	mov	r1, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

  fir->bufIndex++;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80011b4:	3301      	adds	r3, #1
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
  if(fir->bufIndex == FILTER_NUM_COEFFS)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80011c4:	2b31      	cmp	r3, #49	; 0x31
 80011c6:	d103      	bne.n	80011d0 <_Z16FIRFilter_UpdateP9FIRFilterf+0x3c>
    fir->bufIndex = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

  fir->out = 0.0f;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  uint8_t sumIndex = fir->bufIndex;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 80011e0:	73fb      	strb	r3, [r7, #15]

  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	73bb      	strb	r3, [r7, #14]
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	2b30      	cmp	r3, #48	; 0x30
 80011ea:	d824      	bhi.n	8001236 <_Z16FIRFilter_UpdateP9FIRFilterf+0xa2>
  {
    if (sumIndex > 0) sumIndex--;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <_Z16FIRFilter_UpdateP9FIRFilterf+0x66>
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e001      	b.n	80011fe <_Z16FIRFilter_UpdateP9FIRFilterf+0x6a>
    else sumIndex = FILTER_NUM_COEFFS - 1;
 80011fa:	2330      	movs	r3, #48	; 0x30
 80011fc:	73fb      	strb	r3, [r7, #15]
    fir->out += FIR_COEFFS[n] * fir->buf[sumIndex];
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <_Z16FIRFilter_UpdateP9FIRFilterf+0xb0>)
 8001208:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fdb5 	bl	8000d84 <__aeabi_fmul>
 800121a:	4603      	mov	r3, r0
 800121c:	4619      	mov	r1, r3
 800121e:	4620      	mov	r0, r4
 8001220:	f7ff fca8 	bl	8000b74 <__addsf3>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 800122e:	7bbb      	ldrb	r3, [r7, #14]
 8001230:	3301      	adds	r3, #1
 8001232:	73bb      	strb	r3, [r7, #14]
 8001234:	e7d7      	b.n	80011e6 <_Z16FIRFilter_UpdateP9FIRFilterf+0x52>
  }

  return fir->out;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8

}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	20000000 	.word	0x20000000

08001248 <_ZN12HeightSensorC1EP12GPIO_TypeDeftS1_t17TIM_HandleTypeDef>:


HeightSensor::HeightSensor(GPIO_TypeDef* TRIG_PORT, uint16_t TRIG_PIN,
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	4613      	mov	r3, r2
 8001256:	80fb      	strh	r3, [r7, #6]
	  	   	   	   	   	   GPIO_TypeDef* ECHO_PORT, uint16_t ECHO_PIN,
						   TIM_HandleTypeDef HTIM)
							: trig_port(TRIG_PORT), trig_pin(TRIG_PIN),
							  echo_port(ECHO_PORT), echo_pin(ECHO_PIN),
							  htim(HTIM){
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	88fa      	ldrh	r2, [r7, #6]
 8001262:	809a      	strh	r2, [r3, #4]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	609a      	str	r2, [r3, #8]
							  echo_port(ECHO_PORT), echo_pin(ECHO_PIN),
 800126a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
							  htim(HTIM){
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	819a      	strh	r2, [r3, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3310      	adds	r3, #16
 8001276:	f107 011c 	add.w	r1, r7, #28
 800127a:	2248      	movs	r2, #72	; 0x48
 800127c:	4618      	mov	r0, r3
 800127e:	f004 fd0f 	bl	8005ca0 <memcpy>
	FIRFilter_Init(&lpf);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3358      	adds	r3, #88	; 0x58
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff62 	bl	8001150 <_Z14FIRFilter_InitP9FIRFilter>

	HAL_TIM_Base_Start(&htim);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3310      	adds	r3, #16
 8001290:	4618      	mov	r0, r3
 8001292:	f003 fb7f 	bl	8004994 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	889b      	ldrh	r3, [r3, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	4619      	mov	r1, r3
 80012a2:	f002 fd40 	bl	8003d26 <HAL_GPIO_WritePin>
}
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_ZN12HeightSensor10getDistRawEv>:
	HAL_TIM_Base_Start(&htim);
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);
}

float HeightSensor::getDistRaw()
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	return dist_raw;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <_ZN12HeightSensor15getDistFilteredEv>:

float HeightSensor::getDistFiltered()
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	return dist_filtered;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <_ZN12HeightSensor14getWaterHeightEv>:

float HeightSensor::getWaterHeight()
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	return water_height;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <_ZN12HeightSensor10readSensorEv>:


void HeightSensor::readSensor()
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	889b      	ldrh	r3, [r3, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	4619      	mov	r1, r3
 800130c:	f002 fd0b 	bl	8003d26 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim, 0);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim) < 10);  // wait for 10 us
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	2b09      	cmp	r3, #9
 8001320:	bf94      	ite	ls
 8001322:	2301      	movls	r3, #1
 8001324:	2300      	movhi	r3, #0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	d000      	beq.n	800132e <_ZN12HeightSensor10readSensorEv+0x36>
 800132c:	e7f4      	b.n	8001318 <_ZN12HeightSensor10readSensorEv+0x20>
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	889b      	ldrh	r3, [r3, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	4619      	mov	r1, r3
 800133a:	f002 fcf4 	bl	8003d26 <HAL_GPIO_WritePin>

	uint32_t millis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 800133e:	f001 fdef 	bl	8002f20 <HAL_GetTick>
 8001342:	6178      	str	r0, [r7, #20]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (echo_port, echo_pin)) && millis + 10 >  HAL_GetTick());
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f002 fcd0 	bl	8003cf8 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <_ZN12HeightSensor10readSensorEv+0x7a>
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f103 040a 	add.w	r4, r3, #10
 8001364:	f001 fddc 	bl	8002f20 <HAL_GetTick>
 8001368:	4603      	mov	r3, r0
 800136a:	429c      	cmp	r4, r3
 800136c:	d901      	bls.n	8001372 <_ZN12HeightSensor10readSensorEv+0x7a>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <_ZN12HeightSensor10readSensorEv+0x7c>
 8001372:	2300      	movs	r3, #0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d000      	beq.n	800137a <_ZN12HeightSensor10readSensorEv+0x82>
 8001378:	e7e4      	b.n	8001344 <_ZN12HeightSensor10readSensorEv+0x4c>
	uint32_t time1 = __HAL_TIM_GET_COUNTER (&htim);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	613b      	str	r3, [r7, #16]

	millis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001382:	f001 fdcd 	bl	8002f20 <HAL_GetTick>
 8001386:	6178      	str	r0, [r7, #20]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (echo_port, echo_pin)) && millis + 50 > HAL_GetTick());
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001392:	b29b      	uxth	r3, r3
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f002 fcae 	bl	8003cf8 <HAL_GPIO_ReadPin>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <_ZN12HeightSensor10readSensorEv+0xbe>
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80013a8:	f001 fdba 	bl	8002f20 <HAL_GetTick>
 80013ac:	4603      	mov	r3, r0
 80013ae:	429c      	cmp	r4, r3
 80013b0:	d901      	bls.n	80013b6 <_ZN12HeightSensor10readSensorEv+0xbe>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <_ZN12HeightSensor10readSensorEv+0xc0>
 80013b6:	2300      	movs	r3, #0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d000      	beq.n	80013be <_ZN12HeightSensor10readSensorEv+0xc6>
 80013bc:	e7e4      	b.n	8001388 <_ZN12HeightSensor10readSensorEv+0x90>
	uint32_t time2 = __HAL_TIM_GET_COUNTER (&htim);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	60fb      	str	r3, [r7, #12]

	uint16_t distance_mm = (time2 - time1)* 0.34/2;
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f809 	bl	80003e4 <__aeabi_ui2d>
 80013d2:	a32f      	add	r3, pc, #188	; (adr r3, 8001490 <_ZN12HeightSensor10readSensorEv+0x198>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff f87e 	bl	80004d8 <__aeabi_dmul>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ec:	f7ff f99e 	bl	800072c <__aeabi_ddiv>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fb46 	bl	8000a88 <__aeabi_d2uiz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	817b      	strh	r3, [r7, #10]

	dist_raw = (distance_mm/10.0) < CONE_HEIGHT ? (distance_mm/10.0) : CONE_HEIGHT;
 8001400:	897b      	ldrh	r3, [r7, #10]
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe fffe 	bl	8000404 <__aeabi_i2d>
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <_ZN12HeightSensor10readSensorEv+0x1a8>)
 800140e:	f7ff f98d 	bl	800072c <__aeabi_ddiv>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	a31f      	add	r3, pc, #124	; (adr r3, 8001498 <_ZN12HeightSensor10readSensorEv+0x1a0>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff facc 	bl	80009bc <__aeabi_dcmplt>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d010      	beq.n	800144c <_ZN12HeightSensor10readSensorEv+0x154>
 800142a:	897b      	ldrh	r3, [r7, #10]
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe ffe9 	bl	8000404 <__aeabi_i2d>
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <_ZN12HeightSensor10readSensorEv+0x1a8>)
 8001438:	f7ff f978 	bl	800072c <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff fb40 	bl	8000ac8 <__aeabi_d2f>
 8001448:	4603      	mov	r3, r0
 800144a:	e000      	b.n	800144e <_ZN12HeightSensor10readSensorEv+0x156>
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <_ZN12HeightSensor10readSensorEv+0x1ac>)
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	dist_filtered = FIRFilter_Update(&lpf, dist_raw);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001460:	4619      	mov	r1, r3
 8001462:	4610      	mov	r0, r2
 8001464:	f7ff fe96 	bl	8001194 <_Z16FIRFilter_UpdateP9FIRFilterf>
 8001468:	4602      	mov	r2, r0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	water_height = CONE_HEIGHT - dist_filtered;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001476:	4619      	mov	r1, r3
 8001478:	480a      	ldr	r0, [pc, #40]	; (80014a4 <_ZN12HeightSensor10readSensorEv+0x1ac>)
 800147a:	f7ff fb79 	bl	8000b70 <__aeabi_fsub>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
}
 8001488:	bf00      	nop
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd90      	pop	{r4, r7, pc}
 8001490:	5c28f5c3 	.word	0x5c28f5c3
 8001494:	3fd5c28f 	.word	0x3fd5c28f
 8001498:	00000000 	.word	0x00000000
 800149c:	4050c000 	.word	0x4050c000
 80014a0:	40240000 	.word	0x40240000
 80014a4:	42860000 	.word	0x42860000

080014a8 <_ZL14DWT_Delay_Initv>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <_ZL14DWT_Delay_Initv+0x60>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	4a15      	ldr	r2, [pc, #84]	; (8001508 <_ZL14DWT_Delay_Initv+0x60>)
 80014b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014b6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <_ZL14DWT_Delay_Initv+0x60>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4a12      	ldr	r2, [pc, #72]	; (8001508 <_ZL14DWT_Delay_Initv+0x60>)
 80014be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014c2:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <_ZL14DWT_Delay_Initv+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a10      	ldr	r2, [pc, #64]	; (800150c <_ZL14DWT_Delay_Initv+0x64>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <_ZL14DWT_Delay_Initv+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <_ZL14DWT_Delay_Initv+0x64>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <_ZL14DWT_Delay_Initv+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 80014e2:	bf00      	nop
  __NOP();
 80014e4:	bf00      	nop
  __NOP();
 80014e6:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <_ZL14DWT_Delay_Initv+0x64>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf14      	ite	ne
 80014f0:	2301      	movne	r3, #1
 80014f2:	2300      	moveq	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <_ZL14DWT_Delay_Initv+0x56>
  {
    return 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e000      	b.n	8001500 <_ZL14DWT_Delay_Initv+0x58>
  }
  else
  {
    return 1;
 80014fe:	2301      	movs	r3, #1
  }
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	e000edf0 	.word	0xe000edf0
 800150c:	e0001000 	.word	0xe0001000

08001510 <_ZL12DWT_Delay_usm>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <_ZL12DWT_Delay_usm+0x48>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800151e:	f003 f81f 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 8001522:	4603      	mov	r3, r0
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <_ZL12DWT_Delay_usm+0x4c>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	0c9b      	lsrs	r3, r3, #18
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <_ZL12DWT_Delay_usm+0x48>)
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	1ad2      	subs	r2, r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	bf34      	ite	cc
 8001542:	2301      	movcc	r3, #1
 8001544:	2300      	movcs	r3, #0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d000      	beq.n	800154e <_ZL12DWT_Delay_usm+0x3e>
 800154c:	e7f2      	b.n	8001534 <_ZL12DWT_Delay_usm+0x24>
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e0001000 	.word	0xe0001000
 800155c:	431bde83 	.word	0x431bde83

08001560 <_ZL19lcd16x2_enablePulsev>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <_ZL19lcd16x2_enablePulsev+0x34>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <_ZL19lcd16x2_enablePulsev+0x38>)
 800156a:	8811      	ldrh	r1, [r2, #0]
 800156c:	2201      	movs	r2, #1
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fbd9 	bl	8003d26 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8001574:	2014      	movs	r0, #20
 8001576:	f7ff ffcb 	bl	8001510 <_ZL12DWT_Delay_usm>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <_ZL19lcd16x2_enablePulsev+0x34>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a06      	ldr	r2, [pc, #24]	; (8001598 <_ZL19lcd16x2_enablePulsev+0x38>)
 8001580:	8811      	ldrh	r1, [r2, #0]
 8001582:	2200      	movs	r2, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f002 fbce 	bl	8003d26 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 800158a:	203c      	movs	r0, #60	; 0x3c
 800158c:	f7ff ffc0 	bl	8001510 <_ZL12DWT_Delay_usm>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200002c0 	.word	0x200002c0
 8001598:	200002c6 	.word	0x200002c6

0800159c <_ZL10lcd16x2_rsb>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <_ZL10lcd16x2_rsb+0x24>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <_ZL10lcd16x2_rsb+0x28>)
 80015ac:	8811      	ldrh	r1, [r2, #0]
 80015ae:	79fa      	ldrb	r2, [r7, #7]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 fbb8 	bl	8003d26 <HAL_GPIO_WritePin>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200002c0 	.word	0x200002c0
 80015c4:	200002c4 	.word	0x200002c4

080015c8 <_ZL13lcd16x2_writeh>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 80015e0:	4b5f      	ldr	r3, [pc, #380]	; (8001760 <_ZL13lcd16x2_writeh+0x198>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d05a      	beq.n	800169e <_ZL13lcd16x2_writeh+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80015e8:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <_ZL13lcd16x2_writeh+0x19c>)
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	4b5e      	ldr	r3, [pc, #376]	; (8001768 <_ZL13lcd16x2_writeh+0x1a0>)
 80015ee:	8819      	ldrh	r1, [r3, #0]
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	f002 fb94 	bl	8003d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80015fe:	4b59      	ldr	r3, [pc, #356]	; (8001764 <_ZL13lcd16x2_writeh+0x19c>)
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	4b5a      	ldr	r3, [pc, #360]	; (800176c <_ZL13lcd16x2_writeh+0x1a4>)
 8001604:	8819      	ldrh	r1, [r3, #0]
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	b2db      	uxtb	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	f002 fb89 	bl	8003d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001614:	4b53      	ldr	r3, [pc, #332]	; (8001764 <_ZL13lcd16x2_writeh+0x19c>)
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	4b55      	ldr	r3, [pc, #340]	; (8001770 <_ZL13lcd16x2_writeh+0x1a8>)
 800161a:	8819      	ldrh	r1, [r3, #0]
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	f002 fb7e 	bl	8003d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800162a:	4b4e      	ldr	r3, [pc, #312]	; (8001764 <_ZL13lcd16x2_writeh+0x19c>)
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	4b51      	ldr	r3, [pc, #324]	; (8001774 <_ZL13lcd16x2_writeh+0x1ac>)
 8001630:	8819      	ldrh	r1, [r3, #0]
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	b2db      	uxtb	r3, r3
 800163a:	461a      	mov	r2, r3
 800163c:	f002 fb73 	bl	8003d26 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001640:	4b4d      	ldr	r3, [pc, #308]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	4b4d      	ldr	r3, [pc, #308]	; (800177c <_ZL13lcd16x2_writeh+0x1b4>)
 8001646:	8819      	ldrh	r1, [r3, #0]
 8001648:	7bbb      	ldrb	r3, [r7, #14]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	f002 fb68 	bl	8003d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001656:	4b48      	ldr	r3, [pc, #288]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	4b49      	ldr	r3, [pc, #292]	; (8001780 <_ZL13lcd16x2_writeh+0x1b8>)
 800165c:	8819      	ldrh	r1, [r3, #0]
 800165e:	7bbb      	ldrb	r3, [r7, #14]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	b2db      	uxtb	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	f002 fb5d 	bl	8003d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	4b44      	ldr	r3, [pc, #272]	; (8001784 <_ZL13lcd16x2_writeh+0x1bc>)
 8001672:	8819      	ldrh	r1, [r3, #0]
 8001674:	7bbb      	ldrb	r3, [r7, #14]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	f002 fb52 	bl	8003d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	4b40      	ldr	r3, [pc, #256]	; (8001788 <_ZL13lcd16x2_writeh+0x1c0>)
 8001688:	8819      	ldrh	r1, [r3, #0]
 800168a:	7bbb      	ldrb	r3, [r7, #14]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	b2db      	uxtb	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	f002 fb47 	bl	8003d26 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001698:	f7ff ff62 	bl	8001560 <_ZL19lcd16x2_enablePulsev>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 800169c:	e05b      	b.n	8001756 <_ZL13lcd16x2_writeh+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	4b36      	ldr	r3, [pc, #216]	; (800177c <_ZL13lcd16x2_writeh+0x1b4>)
 80016a4:	8819      	ldrh	r1, [r3, #0]
 80016a6:	7bbb      	ldrb	r3, [r7, #14]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	f002 fb39 	bl	8003d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	4b31      	ldr	r3, [pc, #196]	; (8001780 <_ZL13lcd16x2_writeh+0x1b8>)
 80016ba:	8819      	ldrh	r1, [r3, #0]
 80016bc:	7bbb      	ldrb	r3, [r7, #14]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	f002 fb2e 	bl	8003d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <_ZL13lcd16x2_writeh+0x1bc>)
 80016d0:	8819      	ldrh	r1, [r3, #0]
 80016d2:	7bbb      	ldrb	r3, [r7, #14]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	f002 fb23 	bl	8003d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80016e0:	4b25      	ldr	r3, [pc, #148]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	4b28      	ldr	r3, [pc, #160]	; (8001788 <_ZL13lcd16x2_writeh+0x1c0>)
 80016e6:	8819      	ldrh	r1, [r3, #0]
 80016e8:	7bbb      	ldrb	r3, [r7, #14]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	f002 fb18 	bl	8003d26 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80016f6:	f7ff ff33 	bl	8001560 <_ZL19lcd16x2_enablePulsev>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	4b1f      	ldr	r3, [pc, #124]	; (800177c <_ZL13lcd16x2_writeh+0x1b4>)
 8001700:	8819      	ldrh	r1, [r3, #0]
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	461a      	mov	r2, r3
 800170c:	f002 fb0b 	bl	8003d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <_ZL13lcd16x2_writeh+0x1b8>)
 8001716:	8819      	ldrh	r1, [r3, #0]
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	f002 fb00 	bl	8003d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <_ZL13lcd16x2_writeh+0x1bc>)
 800172c:	8819      	ldrh	r1, [r3, #0]
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	f002 faf5 	bl	8003d26 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <_ZL13lcd16x2_writeh+0x1c0>)
 8001742:	8819      	ldrh	r1, [r3, #0]
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	f002 faea 	bl	8003d26 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001752:	f7ff ff05 	bl	8001560 <_ZL19lcd16x2_enablePulsev>
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200000c4 	.word	0x200000c4
 8001764:	200002c8 	.word	0x200002c8
 8001768:	200002cc 	.word	0x200002cc
 800176c:	200002ce 	.word	0x200002ce
 8001770:	200002d0 	.word	0x200002d0
 8001774:	200002d2 	.word	0x200002d2
 8001778:	200002d4 	.word	0x200002d4
 800177c:	200002d8 	.word	0x200002d8
 8001780:	200002da 	.word	0x200002da
 8001784:	200002dc 	.word	0x200002dc
 8001788:	200002de 	.word	0x200002de

0800178c <_ZL20lcd16x2_writeCommandh>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8001796:	2000      	movs	r0, #0
 8001798:	f7ff ff00 	bl	800159c <_ZL10lcd16x2_rsb>
  lcd16x2_write(cmd);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff12 	bl	80015c8 <_ZL13lcd16x2_writeh>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_ZL17lcd16x2_writeDatah>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f7ff fef0 	bl	800159c <_ZL10lcd16x2_rsb>
  lcd16x2_write(data);
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff02 	bl	80015c8 <_ZL13lcd16x2_writeh>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_ZL14lcd16x2_write4h>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 80017de:	2000      	movs	r0, #0
 80017e0:	f7ff fedc 	bl	800159c <_ZL10lcd16x2_rsb>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <_ZL14lcd16x2_write4h+0x7c>)
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <_ZL14lcd16x2_write4h+0x80>)
 80017ea:	8819      	ldrh	r1, [r3, #0]
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	461a      	mov	r2, r3
 80017f6:	f002 fa96 	bl	8003d26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <_ZL14lcd16x2_write4h+0x7c>)
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <_ZL14lcd16x2_write4h+0x84>)
 8001800:	8819      	ldrh	r1, [r3, #0]
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	f002 fa8b 	bl	8003d26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <_ZL14lcd16x2_write4h+0x7c>)
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <_ZL14lcd16x2_write4h+0x88>)
 8001816:	8819      	ldrh	r1, [r3, #0]
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	f002 fa80 	bl	8003d26 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <_ZL14lcd16x2_write4h+0x7c>)
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <_ZL14lcd16x2_write4h+0x8c>)
 800182c:	8819      	ldrh	r1, [r3, #0]
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	b2db      	uxtb	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	f002 fa75 	bl	8003d26 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 800183c:	f7ff fe90 	bl	8001560 <_ZL19lcd16x2_enablePulsev>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200002d4 	.word	0x200002d4
 800184c:	200002d8 	.word	0x200002d8
 8001850:	200002da 	.word	0x200002da
 8001854:	200002dc 	.word	0x200002dc
 8001858:	200002de 	.word	0x200002de

0800185c <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	817b      	strh	r3, [r7, #10]
 800186a:	4613      	mov	r3, r2
 800186c:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 800186e:	f7ff fe1b 	bl	80014a8 <_ZL14DWT_Delay_Initv>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8001872:	4a24      	ldr	r2, [pc, #144]	; (8001904 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xa8>)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8001878:	4a23      	ldr	r2, [pc, #140]	; (8001908 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xac>)
 800187a:	897b      	ldrh	r3, [r7, #10]
 800187c:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 800187e:	4a23      	ldr	r2, [pc, #140]	; (800190c <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb0>)
 8001880:	893b      	ldrh	r3, [r7, #8]
 8001882:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8001884:	4a22      	ldr	r2, [pc, #136]	; (8001910 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb4>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 800188a:	4a22      	ldr	r2, [pc, #136]	; (8001914 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb8>)
 800188c:	8b3b      	ldrh	r3, [r7, #24]
 800188e:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8001890:	4a21      	ldr	r2, [pc, #132]	; (8001918 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xbc>)
 8001892:	8bbb      	ldrh	r3, [r7, #28]
 8001894:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8001896:	4a21      	ldr	r2, [pc, #132]	; (800191c <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc0>)
 8001898:	8c3b      	ldrh	r3, [r7, #32]
 800189a:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 800189c:	4a20      	ldr	r2, [pc, #128]	; (8001920 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc4>)
 800189e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018a0:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xcc>)
 80018aa:	2228      	movs	r2, #40	; 0x28
 80018ac:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 80018ae:	2014      	movs	r0, #20
 80018b0:	f001 fb40 	bl	8002f34 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 80018b4:	2003      	movs	r0, #3
 80018b6:	f7ff ff89 	bl	80017cc <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(5);
 80018ba:	2005      	movs	r0, #5
 80018bc:	f001 fb3a 	bl	8002f34 <HAL_Delay>
  lcd16x2_write4(0x3);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f7ff ff83 	bl	80017cc <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f001 fb34 	bl	8002f34 <HAL_Delay>
  lcd16x2_write4(0x3);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f7ff ff7d 	bl	80017cc <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f001 fb2e 	bl	8002f34 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 80018d8:	2002      	movs	r0, #2
 80018da:	f7ff ff77 	bl	80017cc <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 80018de:	2001      	movs	r0, #1
 80018e0:	f001 fb28 	bl	8002f34 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80018e4:	2028      	movs	r0, #40	; 0x28
 80018e6:	f7ff ff51 	bl	800178c <_ZL20lcd16x2_writeCommandh>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f7ff ff4e 	bl	800178c <_ZL20lcd16x2_writeCommandh>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f7ff ff4b 	bl	800178c <_ZL20lcd16x2_writeCommandh>
  LCD_MS_DELAY(3);
 80018f6:	2003      	movs	r0, #3
 80018f8:	f001 fb1c 	bl	8002f34 <HAL_Delay>
}
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200002c0 	.word	0x200002c0
 8001908:	200002c4 	.word	0x200002c4
 800190c:	200002c6 	.word	0x200002c6
 8001910:	200002d4 	.word	0x200002d4
 8001914:	200002d8 	.word	0x200002d8
 8001918:	200002da 	.word	0x200002da
 800191c:	200002dc 	.word	0x200002dc
 8001920:	200002de 	.word	0x200002de
 8001924:	200000c4 	.word	0x200000c4
 8001928:	200000c6 	.word	0x200000c6

0800192c <_Z17lcd16x2_setCursorhh>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	460a      	mov	r2, r1
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	4613      	mov	r3, r2
 800193a:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d108      	bne.n	800195c <_Z17lcd16x2_setCursorhh+0x30>
  {
    maskData |= (0x80);
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001950:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff19 	bl	800178c <_ZL20lcd16x2_writeCommandh>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 800195a:	e007      	b.n	800196c <_Z17lcd16x2_setCursorhh+0x40>
    maskData |= (0xc0);
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001962:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff10 	bl	800178c <_ZL20lcd16x2_writeCommandh>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_Z15lcd16x2_1stLinev>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 8001978:	2100      	movs	r1, #0
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff ffd6 	bl	800192c <_Z17lcd16x2_setCursorhh>
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <_Z15lcd16x2_2ndLinev>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8001988:	2100      	movs	r1, #0
 800198a:	2001      	movs	r0, #1
 800198c:	f7ff ffce 	bl	800192c <_Z17lcd16x2_setCursorhh>
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}

08001994 <_Z18lcd16x2_cursorShowb>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  if(state)
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00c      	beq.n	80019be <_Z18lcd16x2_cursorShowb+0x2a>
  {
    DisplayControl |= (0x03);
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <_Z18lcd16x2_cursorShowb+0x4c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	f043 0303 	orr.w	r3, r3, #3
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <_Z18lcd16x2_cursorShowb+0x4c>)
 80019b0:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <_Z18lcd16x2_cursorShowb+0x4c>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fee8 	bl	800178c <_ZL20lcd16x2_writeCommandh>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 80019bc:	e00b      	b.n	80019d6 <_Z18lcd16x2_cursorShowb+0x42>
    DisplayControl &= ~(0x03);
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <_Z18lcd16x2_cursorShowb+0x4c>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	f023 0303 	bic.w	r3, r3, #3
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <_Z18lcd16x2_cursorShowb+0x4c>)
 80019ca:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <_Z18lcd16x2_cursorShowb+0x4c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fedb 	bl	800178c <_ZL20lcd16x2_writeCommandh>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200000c5 	.word	0x200000c5

080019e4 <_Z13lcd16x2_clearv>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80019e8:	2001      	movs	r0, #1
 80019ea:	f7ff fecf 	bl	800178c <_ZL20lcd16x2_writeCommandh>
  LCD_MS_DELAY(3);
 80019ee:	2003      	movs	r0, #3
 80019f0:	f001 faa0 	bl	8002f34 <HAL_Delay>
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_Z14lcd16x2_printfPKcz>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 80019f8:	b40f      	push	{r0, r1, r2, r3}
 80019fa:	b590      	push	{r4, r7, lr}
 80019fc:	b089      	sub	sp, #36	; 0x24
 80019fe:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8001a00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a04:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 fdf2 	bl	80065f8 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	77fb      	strb	r3, [r7, #31]
 8001a18:	7ffc      	ldrb	r4, [r7, #31]
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fb96 	bl	8000150 <strlen>
 8001a24:	4603      	mov	r3, r0
 8001a26:	429c      	cmp	r4, r3
 8001a28:	d20f      	bcs.n	8001a4a <_Z14lcd16x2_printfPKcz+0x52>
 8001a2a:	7ffb      	ldrb	r3, [r7, #31]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80c      	bhi.n	8001a4a <_Z14lcd16x2_printfPKcz+0x52>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8001a30:	7ffb      	ldrb	r3, [r7, #31]
 8001a32:	f107 0220 	add.w	r2, r7, #32
 8001a36:	4413      	add	r3, r2
 8001a38:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff feb5 	bl	80017ac <_ZL17lcd16x2_writeDatah>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001a42:	7ffb      	ldrb	r3, [r7, #31]
 8001a44:	3301      	adds	r3, #1
 8001a46:	77fb      	strb	r3, [r7, #31]
 8001a48:	e7e6      	b.n	8001a18 <_Z14lcd16x2_printfPKcz+0x20>
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a54:	b004      	add	sp, #16
 8001a56:	4770      	bx	lr

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8001a5e:	af48      	add	r7, sp, #288	; 0x120
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a60:	f001 fa06 	bl	8002e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a64:	f000 f9ec 	bl	8001e40 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a68:	f000 fcb0 	bl	80023cc <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8001a6c:	f000 fb6c 	bl	8002148 <_ZL12MX_TIM2_Initv>
  MX_ADC1_Init();
 8001a70:	f000 fa50 	bl	8001f14 <_ZL12MX_ADC1_Initv>
  MX_TIM4_Init();
 8001a74:	f000 fc20 	bl	80022b8 <_ZL12MX_TIM4_Initv>
  MX_TIM1_Init();
 8001a78:	f000 fa94 	bl	8001fa4 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8001a7c:	f000 fbc0 	bl	8002200 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 8001a80:	f000 fc76 	bl	8002370 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

  lcd16x2_init_4bits(LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_EN_Pin,
 8001a84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a88:	9303      	str	r3, [sp, #12]
 8001a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	4b8e      	ldr	r3, [pc, #568]	; (8001cd8 <main+0x280>)
 8001a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa6:	488c      	ldr	r0, [pc, #560]	; (8001cd8 <main+0x280>)
 8001aa8:	f7ff fed8 	bl	800185c <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt>
		  	  	  	 LCD_D4_GPIO_Port, LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin);

  lcd16x2_cursorShow(false);
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff ff71 	bl	8001994 <_Z18lcd16x2_cursorShowb>

  HAL_ADC_Start(&hadc1);
 8001ab2:	488a      	ldr	r0, [pc, #552]	; (8001cdc <main+0x284>)
 8001ab4:	f001 fb3a 	bl	800312c <HAL_ADC_Start>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001ab8:	2108      	movs	r1, #8
 8001aba:	4889      	ldr	r0, [pc, #548]	; (8001ce0 <main+0x288>)
 8001abc:	f003 fd8c 	bl	80055d8 <HAL_TIMEx_PWMN_Start>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 8001ac0:	4b87      	ldr	r3, [pc, #540]	; (8001ce0 <main+0x288>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_GPIO_WritePin(PUMP_EN_GPIO_Port, PUMP_EN_Pin, GPIO_PIN_SET);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2120      	movs	r1, #32
 8001acc:	4885      	ldr	r0, [pc, #532]	; (8001ce4 <main+0x28c>)
 8001ace:	f002 f92a 	bl	8003d26 <HAL_GPIO_WritePin>

  while(!HAL_GPIO_ReadPin(SETPOINT_BUT_GPIO_Port, SETPOINT_BUT_Pin))
 8001ad2:	2108      	movs	r1, #8
 8001ad4:	4880      	ldr	r0, [pc, #512]	; (8001cd8 <main+0x280>)
 8001ad6:	f002 f90f 	bl	8003cf8 <HAL_GPIO_ReadPin>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf0c      	ite	eq
 8001ae0:	2301      	moveq	r3, #1
 8001ae2:	2300      	movne	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d04b      	beq.n	8001b82 <main+0x12a>
  {
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001aea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aee:	487b      	ldr	r0, [pc, #492]	; (8001cdc <main+0x284>)
 8001af0:	f001 fbca 	bl	8003288 <HAL_ADC_PollForConversion>
	  potVal = HAL_ADC_GetValue(&hadc1);
 8001af4:	4879      	ldr	r0, [pc, #484]	; (8001cdc <main+0x284>)
 8001af6:	f001 fccd 	bl	8003494 <HAL_ADC_GetValue>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b7a      	ldr	r3, [pc, #488]	; (8001ce8 <main+0x290>)
 8001b00:	801a      	strh	r2, [r3, #0]
	  setpoint = 0.3 + 0.32*(potVal/4036.0);
 8001b02:	4b79      	ldr	r3, [pc, #484]	; (8001ce8 <main+0x290>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fc7c 	bl	8000404 <__aeabi_i2d>
 8001b0c:	a36c      	add	r3, pc, #432	; (adr r3, 8001cc0 <main+0x268>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fe0b 	bl	800072c <__aeabi_ddiv>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	a36a      	add	r3, pc, #424	; (adr r3, 8001cc8 <main+0x270>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fcd8 	bl	80004d8 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	a367      	add	r3, pc, #412	; (adr r3, 8001cd0 <main+0x278>)
 8001b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b36:	f7fe fb19 	bl	800016c <__adddf3>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7fe ffc1 	bl	8000ac8 <__aeabi_d2f>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4a68      	ldr	r2, [pc, #416]	; (8001cec <main+0x294>)
 8001b4a:	6013      	str	r3, [r2, #0]
	  lcd16x2_clear();
 8001b4c:	f7ff ff4a 	bl	80019e4 <_Z13lcd16x2_clearv>
	  lcd16x2_printf("Setpoint: ");
 8001b50:	4867      	ldr	r0, [pc, #412]	; (8001cf0 <main+0x298>)
 8001b52:	f7ff ff51 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
	  lcd16x2_2ndLine();
 8001b56:	f7ff ff15 	bl	8001984 <_Z15lcd16x2_2ndLinev>
	  lcd16x2_printf("         %.1f cm", 100*setpoint);
 8001b5a:	4b64      	ldr	r3, [pc, #400]	; (8001cec <main+0x294>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4965      	ldr	r1, [pc, #404]	; (8001cf4 <main+0x29c>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff f90f 	bl	8000d84 <__aeabi_fmul>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fc5d 	bl	8000428 <__aeabi_f2d>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4861      	ldr	r0, [pc, #388]	; (8001cf8 <main+0x2a0>)
 8001b74:	f7ff ff40 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
	  HAL_Delay(300);
 8001b78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b7c:	f001 f9da 	bl	8002f34 <HAL_Delay>
  while(!HAL_GPIO_ReadPin(SETPOINT_BUT_GPIO_Port, SETPOINT_BUT_Pin))
 8001b80:	e7a7      	b.n	8001ad2 <main+0x7a>
  }

  HeightSensor usensor(TRIG_GPIO_Port, TRIG_Pin, ECHO_GPIO_Port, ECHO_Pin, htim2);
 8001b82:	1d3c      	adds	r4, r7, #4
 8001b84:	4a5d      	ldr	r2, [pc, #372]	; (8001cfc <main+0x2a4>)
 8001b86:	ab01      	add	r3, sp, #4
 8001b88:	4611      	mov	r1, r2
 8001b8a:	2248      	movs	r2, #72	; 0x48
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f004 f887 	bl	8005ca0 <memcpy>
 8001b92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	4b52      	ldr	r3, [pc, #328]	; (8001ce4 <main+0x28c>)
 8001b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b9e:	4951      	ldr	r1, [pc, #324]	; (8001ce4 <main+0x28c>)
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f7ff fb51 	bl	8001248 <_ZN12HeightSensorC1EP12GPIO_TypeDeftS1_t17TIM_HandleTypeDef>

  HAL_GPIO_WritePin(PUMP_EN_GPIO_Port, PUMP_EN_Pin, GPIO_PIN_SET);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2120      	movs	r1, #32
 8001baa:	484e      	ldr	r0, [pc, #312]	; (8001ce4 <main+0x28c>)
 8001bac:	f002 f8bb 	bl	8003d26 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim4);
 8001bb0:	4853      	ldr	r0, [pc, #332]	; (8001d00 <main+0x2a8>)
 8001bb2:	f002 ff39 	bl	8004a28 <HAL_TIM_Base_Start_IT>

  pump_pid_controller.setKPID(1.319, 0.02405, 10.785);
 8001bb6:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <main+0x2ac>)
 8001bb8:	4a53      	ldr	r2, [pc, #332]	; (8001d08 <main+0x2b0>)
 8001bba:	4954      	ldr	r1, [pc, #336]	; (8001d0c <main+0x2b4>)
 8001bbc:	4854      	ldr	r0, [pc, #336]	; (8001d10 <main+0x2b8>)
 8001bbe:	f001 f860 	bl	8002c82 <_ZN13PIDController7setKPIDEfff>
  pump_pid_controller.setPIDLimits(0.0f, 1.0f);
 8001bc2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bc6:	f04f 0100 	mov.w	r1, #0
 8001bca:	4851      	ldr	r0, [pc, #324]	; (8001d10 <main+0x2b8>)
 8001bcc:	f001 f87b 	bl	8002cc6 <_ZN13PIDController12setPIDLimitsEff>
  pump_pid_controller.setSetpoint(setpoint);
 8001bd0:	4b46      	ldr	r3, [pc, #280]	; (8001cec <main+0x294>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	484e      	ldr	r0, [pc, #312]	; (8001d10 <main+0x2b8>)
 8001bd8:	f001 f868 	bl	8002cac <_ZN13PIDController11setSetpointEf>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4840      	ldr	r0, [pc, #256]	; (8001ce0 <main+0x288>)
 8001be0:	f003 fcfa 	bl	80055d8 <HAL_TIMEx_PWMN_Start>

  closeValve();
 8001be4:	f000 fd3a 	bl	800265c <_Z10closeValvev>
  // if (setpoint > 0.55) fillTank();

  lcd16x2_clear();
 8001be8:	f7ff fefc 	bl	80019e4 <_Z13lcd16x2_clearv>
  lcd16x2_printf("Okay! Pressione");
 8001bec:	4849      	ldr	r0, [pc, #292]	; (8001d14 <main+0x2bc>)
 8001bee:	f7ff ff03 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
  lcd16x2_2ndLine();
 8001bf2:	f7ff fec7 	bl	8001984 <_Z15lcd16x2_2ndLinev>
  lcd16x2_printf("novamente");
 8001bf6:	4848      	ldr	r0, [pc, #288]	; (8001d18 <main+0x2c0>)
 8001bf8:	f7ff fefe 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
  while (!HAL_GPIO_ReadPin(SETPOINT_BUT_GPIO_Port, SETPOINT_BUT_Pin));
 8001bfc:	2108      	movs	r1, #8
 8001bfe:	4836      	ldr	r0, [pc, #216]	; (8001cd8 <main+0x280>)
 8001c00:	f002 f87a 	bl	8003cf8 <HAL_GPIO_ReadPin>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	bf0c      	ite	eq
 8001c0a:	2301      	moveq	r3, #1
 8001c0c:	2300      	movne	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d000      	beq.n	8001c16 <main+0x1be>
 8001c14:	e7f2      	b.n	8001bfc <main+0x1a4>
  lcd16x2_clear();
 8001c16:	f7ff fee5 	bl	80019e4 <_Z13lcd16x2_clearv>

  openValve();
 8001c1a:	f000 fd41 	bl	80026a0 <_Z9openValvev>

  lcd16x2_clear();
 8001c1e:	f7ff fee1 	bl	80019e4 <_Z13lcd16x2_clearv>
  lcd16x2_2ndLine();
 8001c22:	f7ff feaf 	bl	8001984 <_Z15lcd16x2_2ndLinev>
  lcd16x2_printf("Iniciando...");
 8001c26:	483d      	ldr	r0, [pc, #244]	; (8001d1c <main+0x2c4>)
 8001c28:	f7ff fee6 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
  for (int i=0; i<(FILTER_NUM_COEFFS-1)/2; i++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001c32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c36:	2b17      	cmp	r3, #23
 8001c38:	dc0c      	bgt.n	8001c54 <main+0x1fc>
  {
	  usensor.readSensor();
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff fb5b 	bl	80012f8 <_ZN12HeightSensor10readSensorEv>
	  HAL_Delay(1000/SAMPLING_FREQUENCY);
 8001c42:	2064      	movs	r0, #100	; 0x64
 8001c44:	f001 f976 	bl	8002f34 <HAL_Delay>
  for (int i=0; i<(FILTER_NUM_COEFFS-1)/2; i++)
 8001c48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001c52:	e7ee      	b.n	8001c32 <main+0x1da>
  }

  startMillis = HAL_GetTick();
 8001c54:	f001 f964 	bl	8002f20 <HAL_GetTick>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4a31      	ldr	r2, [pc, #196]	; (8001d20 <main+0x2c8>)
 8001c5c:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	startLoopMillis = HAL_GetTick();
 8001c5e:	f001 f95f 	bl	8002f20 <HAL_GetTick>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4a2f      	ldr	r2, [pc, #188]	; (8001d24 <main+0x2cc>)
 8001c66:	6013      	str	r3, [r2, #0]
	usensor.readSensor();
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fb44 	bl	80012f8 <_ZN12HeightSensor10readSensorEv>

	pidVal = pump_pid_controller.processPID(usensor.getWaterHeight()/100);
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fb34 	bl	80012e0 <_ZN12HeightSensor14getWaterHeightEv>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	491e      	ldr	r1, [pc, #120]	; (8001cf4 <main+0x29c>)
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f935 	bl	8000eec <__aeabi_fdiv>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4619      	mov	r1, r3
 8001c86:	4822      	ldr	r0, [pc, #136]	; (8001d10 <main+0x2b8>)
 8001c88:	f001 f82e 	bl	8002ce8 <_ZN13PIDController10processPIDEf>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4a26      	ldr	r2, [pc, #152]	; (8001d28 <main+0x2d0>)
 8001c90:	6013      	str	r3, [r2, #0]
	if (pidVal < 0.25)
 8001c92:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <main+0x2d0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fa10 	bl	80010c0 <__aeabi_fcmplt>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d042      	beq.n	8001d2c <main+0x2d4>
	{
		HAL_GPIO_WritePin(PUMP_EN_GPIO_Port, PUMP_EN_Pin, GPIO_PIN_RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2120      	movs	r1, #32
 8001caa:	480e      	ldr	r0, [pc, #56]	; (8001ce4 <main+0x28c>)
 8001cac:	f002 f83b 	bl	8003d26 <HAL_GPIO_WritePin>
		pidVal = 0.0;
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <main+0x2d0>)
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e04b      	b.n	8001d52 <main+0x2fa>
 8001cba:	bf00      	nop
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	40af8800 	.word	0x40af8800
 8001cc8:	47ae147b 	.word	0x47ae147b
 8001ccc:	3fd47ae1 	.word	0x3fd47ae1
 8001cd0:	33333333 	.word	0x33333333
 8001cd4:	3fd33333 	.word	0x3fd33333
 8001cd8:	40010800 	.word	0x40010800
 8001cdc:	200002e0 	.word	0x200002e0
 8001ce0:	20000310 	.word	0x20000310
 8001ce4:	40010c00 	.word	0x40010c00
 8001ce8:	200004b0 	.word	0x200004b0
 8001cec:	200004b4 	.word	0x200004b4
 8001cf0:	08008a38 	.word	0x08008a38
 8001cf4:	42c80000 	.word	0x42c80000
 8001cf8:	08008a44 	.word	0x08008a44
 8001cfc:	20000358 	.word	0x20000358
 8001d00:	200003e8 	.word	0x200003e8
 8001d04:	412c8f5c 	.word	0x412c8f5c
 8001d08:	3cc50481 	.word	0x3cc50481
 8001d0c:	3fa8d4fe 	.word	0x3fa8d4fe
 8001d10:	20000474 	.word	0x20000474
 8001d14:	08008a58 	.word	0x08008a58
 8001d18:	08008a68 	.word	0x08008a68
 8001d1c:	08008a74 	.word	0x08008a74
 8001d20:	200004c0 	.word	0x200004c0
 8001d24:	200004c4 	.word	0x200004c4
 8001d28:	200004b8 	.word	0x200004b8
	}
	else
	{
		HAL_GPIO_WritePin(PUMP_EN_GPIO_Port, PUMP_EN_Pin, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2120      	movs	r1, #32
 8001d30:	4838      	ldr	r0, [pc, #224]	; (8001e14 <main+0x3bc>)
 8001d32:	f001 fff8 	bl	8003d26 <HAL_GPIO_WritePin>
		pwmVal = 625*pidVal;
 8001d36:	4b38      	ldr	r3, [pc, #224]	; (8001e18 <main+0x3c0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4938      	ldr	r1, [pc, #224]	; (8001e1c <main+0x3c4>)
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff f821 	bl	8000d84 <__aeabi_fmul>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff f9e3 	bl	8001110 <__aeabi_f2uiz>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <main+0x3c8>)
 8001d50:	801a      	strh	r2, [r3, #0]
	}

	pwmVal = 625*pidVal;
 8001d52:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <main+0x3c0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4931      	ldr	r1, [pc, #196]	; (8001e1c <main+0x3c4>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff f813 	bl	8000d84 <__aeabi_fmul>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff f9d5 	bl	8001110 <__aeabi_f2uiz>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <main+0x3c8>)
 8001d6c:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, pwmVal);
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <main+0x3c8>)
 8001d70:	881a      	ldrh	r2, [r3, #0]
 8001d72:	4b2c      	ldr	r3, [pc, #176]	; (8001e24 <main+0x3cc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	63da      	str	r2, [r3, #60]	; 0x3c



	if (updateLCD)
 8001d78:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <main+0x3d0>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d024      	beq.n	8001dca <main+0x372>
	{
		lcd16x2_clear();
 8001d80:	f7ff fe30 	bl	80019e4 <_Z13lcd16x2_clearv>
		lcd16x2_1stLine();
 8001d84:	f7ff fdf6 	bl	8001974 <_Z15lcd16x2_1stLinev>
		lcd16x2_printf("Setpoint: %.1fcm", setpoint*100);
 8001d88:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <main+0x3d4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4928      	ldr	r1, [pc, #160]	; (8001e30 <main+0x3d8>)
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fff8 	bl	8000d84 <__aeabi_fmul>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fb46 	bl	8000428 <__aeabi_f2d>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4824      	ldr	r0, [pc, #144]	; (8001e34 <main+0x3dc>)
 8001da2:	f7ff fe29 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
		lcd16x2_2ndLine();
 8001da6:	f7ff fded 	bl	8001984 <_Z15lcd16x2_2ndLinev>
		lcd16x2_printf("H. atual: %.1fcm", usensor.getWaterHeight());
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fa97 	bl	80012e0 <_ZN12HeightSensor14getWaterHeightEv>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fb37 	bl	8000428 <__aeabi_f2d>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	481e      	ldr	r0, [pc, #120]	; (8001e38 <main+0x3e0>)
 8001dc0:	f7ff fe1a 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
		updateLCD = false;
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <main+0x3d0>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
	}

	sendData(usensor);
 8001dca:	1d3c      	adds	r4, r7, #4
 8001dcc:	4668      	mov	r0, sp
 8001dce:	f104 0310 	add.w	r3, r4, #16
 8001dd2:	f44f 7290 	mov.w	r2, #288	; 0x120
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f003 ff62 	bl	8005ca0 <memcpy>
 8001ddc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001de0:	f000 fbc2 	bl	8002568 <_Z8sendData12HeightSensor>
	HAL_Delay(1000/SAMPLING_FREQUENCY - (HAL_GetTick() - startLoopMillis));
 8001de4:	f001 f89c 	bl	8002f20 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <main+0x3e4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe ff6f 	bl	8000cd4 <__aeabi_ui2f>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4619      	mov	r1, r3
 8001dfa:	480d      	ldr	r0, [pc, #52]	; (8001e30 <main+0x3d8>)
 8001dfc:	f7fe feb8 	bl	8000b70 <__aeabi_fsub>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff f984 	bl	8001110 <__aeabi_f2uiz>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 f892 	bl	8002f34 <HAL_Delay>
	startLoopMillis = HAL_GetTick();
 8001e10:	e725      	b.n	8001c5e <main+0x206>
 8001e12:	bf00      	nop
 8001e14:	40010c00 	.word	0x40010c00
 8001e18:	200004b8 	.word	0x200004b8
 8001e1c:	441c4000 	.word	0x441c4000
 8001e20:	200004b2 	.word	0x200004b2
 8001e24:	20000310 	.word	0x20000310
 8001e28:	200000c7 	.word	0x200000c7
 8001e2c:	200004b4 	.word	0x200004b4
 8001e30:	42c80000 	.word	0x42c80000
 8001e34:	08008a84 	.word	0x08008a84
 8001e38:	08008a98 	.word	0x08008a98
 8001e3c:	200004c4 	.word	0x200004c4

08001e40 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b094      	sub	sp, #80	; 0x50
 8001e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e4a:	2228      	movs	r2, #40	; 0x28
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 ff34 	bl	8005cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e70:	2301      	movs	r3, #1
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e82:	2302      	movs	r3, #2
 8001e84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e8c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e96:	4618      	mov	r0, r3
 8001e98:	f001 ff98 	bl	8003dcc <HAL_RCC_OscConfig>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bf14      	ite	ne
 8001ea2:	2301      	movne	r3, #1
 8001ea4:	2300      	moveq	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001eac:	f000 fc1a 	bl	80026e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb0:	230f      	movs	r3, #15
 8001eb2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	2102      	movs	r1, #2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f002 f9fd 	bl	80042cc <HAL_RCC_ClockConfig>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bf14      	ite	ne
 8001ed8:	2301      	movne	r3, #1
 8001eda:	2300      	moveq	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8001ee2:	f000 fbff 	bl	80026e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f002 fb84 	bl	8004600 <HAL_RCCEx_PeriphCLKConfig>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	bf14      	ite	ne
 8001efe:	2301      	movne	r3, #1
 8001f00:	2300      	moveq	r3, #0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8001f08:	f000 fbec 	bl	80026e4 <Error_Handler>
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3750      	adds	r7, #80	; 0x50
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <_ZL12MX_ADC1_Initv+0x88>)
 8001f26:	4a1e      	ldr	r2, [pc, #120]	; (8001fa0 <_ZL12MX_ADC1_Initv+0x8c>)
 8001f28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <_ZL12MX_ADC1_Initv+0x88>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <_ZL12MX_ADC1_Initv+0x88>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <_ZL12MX_ADC1_Initv+0x88>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <_ZL12MX_ADC1_Initv+0x88>)
 8001f3e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f42:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <_ZL12MX_ADC1_Initv+0x88>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <_ZL12MX_ADC1_Initv+0x88>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f50:	4812      	ldr	r0, [pc, #72]	; (8001f9c <_ZL12MX_ADC1_Initv+0x88>)
 8001f52:	f001 f813 	bl	8002f7c <HAL_ADC_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf14      	ite	ne
 8001f5c:	2301      	movne	r3, #1
 8001f5e:	2300      	moveq	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8001f66:	f000 fbbd 	bl	80026e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4808      	ldr	r0, [pc, #32]	; (8001f9c <_ZL12MX_ADC1_Initv+0x88>)
 8001f7c:	f001 fa96 	bl	80034ac <HAL_ADC_ConfigChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bf14      	ite	ne
 8001f86:	2301      	movne	r3, #1
 8001f88:	2300      	moveq	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8001f90:	f000 fba8 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200002e0 	.word	0x200002e0
 8001fa0:	40012400 	.word	0x40012400

08001fa4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b096      	sub	sp, #88	; 0x58
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001faa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
 8001fd0:	611a      	str	r2, [r3, #16]
 8001fd2:	615a      	str	r2, [r3, #20]
 8001fd4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	2220      	movs	r2, #32
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 fe6d 	bl	8005cbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fe2:	4b57      	ldr	r3, [pc, #348]	; (8002140 <_ZL12MX_TIM1_Initv+0x19c>)
 8001fe4:	4a57      	ldr	r2, [pc, #348]	; (8002144 <_ZL12MX_TIM1_Initv+0x1a0>)
 8001fe6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 8001fe8:	4b55      	ldr	r3, [pc, #340]	; (8002140 <_ZL12MX_TIM1_Initv+0x19c>)
 8001fea:	227f      	movs	r2, #127	; 0x7f
 8001fec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fee:	4b54      	ldr	r3, [pc, #336]	; (8002140 <_ZL12MX_TIM1_Initv+0x19c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625;
 8001ff4:	4b52      	ldr	r3, [pc, #328]	; (8002140 <_ZL12MX_TIM1_Initv+0x19c>)
 8001ff6:	f240 2271 	movw	r2, #625	; 0x271
 8001ffa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffc:	4b50      	ldr	r3, [pc, #320]	; (8002140 <_ZL12MX_TIM1_Initv+0x19c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002002:	4b4f      	ldr	r3, [pc, #316]	; (8002140 <_ZL12MX_TIM1_Initv+0x19c>)
 8002004:	2200      	movs	r2, #0
 8002006:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002008:	4b4d      	ldr	r3, [pc, #308]	; (8002140 <_ZL12MX_TIM1_Initv+0x19c>)
 800200a:	2200      	movs	r2, #0
 800200c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800200e:	484c      	ldr	r0, [pc, #304]	; (8002140 <_ZL12MX_TIM1_Initv+0x19c>)
 8002010:	f002 fc70 	bl	80048f4 <HAL_TIM_Base_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	bf14      	ite	ne
 800201a:	2301      	movne	r3, #1
 800201c:	2300      	moveq	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8002024:	f000 fb5e 	bl	80026e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800202e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002032:	4619      	mov	r1, r3
 8002034:	4842      	ldr	r0, [pc, #264]	; (8002140 <_ZL12MX_TIM1_Initv+0x19c>)
 8002036:	f002 ff67 	bl	8004f08 <HAL_TIM_ConfigClockSource>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf14      	ite	ne
 8002040:	2301      	movne	r3, #1
 8002042:	2300      	moveq	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 800204a:	f000 fb4b 	bl	80026e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800204e:	483c      	ldr	r0, [pc, #240]	; (8002140 <_ZL12MX_TIM1_Initv+0x19c>)
 8002050:	f002 fd3c 	bl	8004acc <HAL_TIM_PWM_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8002064:	f000 fb3e 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002068:	2300      	movs	r3, #0
 800206a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002070:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002074:	4619      	mov	r1, r3
 8002076:	4832      	ldr	r0, [pc, #200]	; (8002140 <_ZL12MX_TIM1_Initv+0x19c>)
 8002078:	f003 fb4c 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	bf14      	ite	ne
 8002082:	2301      	movne	r3, #1
 8002084:	2300      	moveq	r3, #0
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 800208c:	f000 fb2a 	bl	80026e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002090:	2360      	movs	r3, #96	; 0x60
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002098:	2300      	movs	r3, #0
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800209c:	2300      	movs	r3, #0
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020a4:	2300      	movs	r3, #0
 80020a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b0:	2200      	movs	r2, #0
 80020b2:	4619      	mov	r1, r3
 80020b4:	4822      	ldr	r0, [pc, #136]	; (8002140 <_ZL12MX_TIM1_Initv+0x19c>)
 80020b6:	f002 fe69 	bl	8004d8c <HAL_TIM_PWM_ConfigChannel>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf14      	ite	ne
 80020c0:	2301      	movne	r3, #1
 80020c2:	2300      	moveq	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 80020ca:	f000 fb0b 	bl	80026e4 <Error_Handler>
  }
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80020ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d8:	2208      	movs	r2, #8
 80020da:	4619      	mov	r1, r3
 80020dc:	4818      	ldr	r0, [pc, #96]	; (8002140 <_ZL12MX_TIM1_Initv+0x19c>)
 80020de:	f002 fe55 	bl	8004d8c <HAL_TIM_PWM_ConfigChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 80020f2:	f000 faf7 	bl	80026e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800210a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800210e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002114:	1d3b      	adds	r3, r7, #4
 8002116:	4619      	mov	r1, r3
 8002118:	4809      	ldr	r0, [pc, #36]	; (8002140 <_ZL12MX_TIM1_Initv+0x19c>)
 800211a:	f003 fb59 	bl	80057d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <_ZL12MX_TIM1_Initv+0x18e>
  {
    Error_Handler();
 800212e:	f000 fad9 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002132:	4803      	ldr	r0, [pc, #12]	; (8002140 <_ZL12MX_TIM1_Initv+0x19c>)
 8002134:	f000 fbdc 	bl	80028f0 <HAL_TIM_MspPostInit>

}
 8002138:	bf00      	nop
 800213a:	3758      	adds	r7, #88	; 0x58
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000310 	.word	0x20000310
 8002144:	40012c00 	.word	0x40012c00

08002148 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214e:	f107 0308 	add.w	r3, r7, #8
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215c:	463b      	mov	r3, r7
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002164:	4b25      	ldr	r3, [pc, #148]	; (80021fc <_ZL12MX_TIM2_Initv+0xb4>)
 8002166:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800216a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800216c:	4b23      	ldr	r3, [pc, #140]	; (80021fc <_ZL12MX_TIM2_Initv+0xb4>)
 800216e:	2247      	movs	r2, #71	; 0x47
 8002170:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002172:	4b22      	ldr	r3, [pc, #136]	; (80021fc <_ZL12MX_TIM2_Initv+0xb4>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002178:	4b20      	ldr	r3, [pc, #128]	; (80021fc <_ZL12MX_TIM2_Initv+0xb4>)
 800217a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800217e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002180:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <_ZL12MX_TIM2_Initv+0xb4>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002186:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <_ZL12MX_TIM2_Initv+0xb4>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800218c:	481b      	ldr	r0, [pc, #108]	; (80021fc <_ZL12MX_TIM2_Initv+0xb4>)
 800218e:	f002 fbb1 	bl	80048f4 <HAL_TIM_Base_Init>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf14      	ite	ne
 8002198:	2301      	movne	r3, #1
 800219a:	2300      	moveq	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80021a2:	f000 fa9f 	bl	80026e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	4619      	mov	r1, r3
 80021b2:	4812      	ldr	r0, [pc, #72]	; (80021fc <_ZL12MX_TIM2_Initv+0xb4>)
 80021b4:	f002 fea8 	bl	8004f08 <HAL_TIM_ConfigClockSource>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	bf14      	ite	ne
 80021be:	2301      	movne	r3, #1
 80021c0:	2300      	moveq	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80021c8:	f000 fa8c 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021cc:	2300      	movs	r3, #0
 80021ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021d4:	463b      	mov	r3, r7
 80021d6:	4619      	mov	r1, r3
 80021d8:	4808      	ldr	r0, [pc, #32]	; (80021fc <_ZL12MX_TIM2_Initv+0xb4>)
 80021da:	f003 fa9b 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf14      	ite	ne
 80021e4:	2301      	movne	r3, #1
 80021e6:	2300      	moveq	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 80021ee:	f000 fa79 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000358 	.word	0x20000358

08002200 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002206:	f107 0308 	add.w	r3, r7, #8
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002214:	463b      	mov	r3, r7
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800221c:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <_ZL12MX_TIM3_Initv+0xb0>)
 800221e:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <_ZL12MX_TIM3_Initv+0xb4>)
 8002220:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <_ZL12MX_TIM3_Initv+0xb0>)
 8002224:	2200      	movs	r2, #0
 8002226:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002228:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <_ZL12MX_TIM3_Initv+0xb0>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800222e:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <_ZL12MX_TIM3_Initv+0xb0>)
 8002230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002234:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002236:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <_ZL12MX_TIM3_Initv+0xb0>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <_ZL12MX_TIM3_Initv+0xb0>)
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002242:	481b      	ldr	r0, [pc, #108]	; (80022b0 <_ZL12MX_TIM3_Initv+0xb0>)
 8002244:	f002 fb56 	bl	80048f4 <HAL_TIM_Base_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	bf14      	ite	ne
 800224e:	2301      	movne	r3, #1
 8002250:	2300      	moveq	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 8002258:	f000 fa44 	bl	80026e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800225c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002262:	f107 0308 	add.w	r3, r7, #8
 8002266:	4619      	mov	r1, r3
 8002268:	4811      	ldr	r0, [pc, #68]	; (80022b0 <_ZL12MX_TIM3_Initv+0xb0>)
 800226a:	f002 fe4d 	bl	8004f08 <HAL_TIM_ConfigClockSource>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf14      	ite	ne
 8002274:	2301      	movne	r3, #1
 8002276:	2300      	moveq	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 800227e:	f000 fa31 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800228a:	463b      	mov	r3, r7
 800228c:	4619      	mov	r1, r3
 800228e:	4808      	ldr	r0, [pc, #32]	; (80022b0 <_ZL12MX_TIM3_Initv+0xb0>)
 8002290:	f003 fa40 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	bf14      	ite	ne
 800229a:	2301      	movne	r3, #1
 800229c:	2300      	moveq	r3, #0
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 80022a4:	f000 fa1e 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022a8:	bf00      	nop
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200003a0 	.word	0x200003a0
 80022b4:	40000400 	.word	0x40000400

080022b8 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022cc:	463b      	mov	r3, r7
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022d4:	4b24      	ldr	r3, [pc, #144]	; (8002368 <_ZL12MX_TIM4_Initv+0xb0>)
 80022d6:	4a25      	ldr	r2, [pc, #148]	; (800236c <_ZL12MX_TIM4_Initv+0xb4>)
 80022d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <_ZL12MX_TIM4_Initv+0xb0>)
 80022dc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80022e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e2:	4b21      	ldr	r3, [pc, #132]	; (8002368 <_ZL12MX_TIM4_Initv+0xb0>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10 - 1;
 80022e8:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <_ZL12MX_TIM4_Initv+0xb0>)
 80022ea:	2209      	movs	r2, #9
 80022ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <_ZL12MX_TIM4_Initv+0xb0>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f4:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <_ZL12MX_TIM4_Initv+0xb0>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022fa:	481b      	ldr	r0, [pc, #108]	; (8002368 <_ZL12MX_TIM4_Initv+0xb0>)
 80022fc:	f002 fafa 	bl	80048f4 <HAL_TIM_Base_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	bf14      	ite	ne
 8002306:	2301      	movne	r3, #1
 8002308:	2300      	moveq	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8002310:	f000 f9e8 	bl	80026e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002318:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	4619      	mov	r1, r3
 8002320:	4811      	ldr	r0, [pc, #68]	; (8002368 <_ZL12MX_TIM4_Initv+0xb0>)
 8002322:	f002 fdf1 	bl	8004f08 <HAL_TIM_ConfigClockSource>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf14      	ite	ne
 800232c:	2301      	movne	r3, #1
 800232e:	2300      	moveq	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8002336:	f000 f9d5 	bl	80026e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002342:	463b      	mov	r3, r7
 8002344:	4619      	mov	r1, r3
 8002346:	4808      	ldr	r0, [pc, #32]	; (8002368 <_ZL12MX_TIM4_Initv+0xb0>)
 8002348:	f003 f9e4 	bl	8005714 <HAL_TIMEx_MasterConfigSynchronization>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 800235c:	f000 f9c2 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002360:	bf00      	nop
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	200003e8 	.word	0x200003e8
 800236c:	40000800 	.word	0x40000800

08002370 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002376:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002378:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800237c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002380:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002388:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002396:	220c      	movs	r2, #12
 8002398:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239a:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023a6:	4807      	ldr	r0, [pc, #28]	; (80023c4 <_ZL19MX_USART1_UART_Initv+0x54>)
 80023a8:	f003 fa99 	bl	80058de <HAL_UART_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf14      	ite	ne
 80023b2:	2301      	movne	r3, #1
 80023b4:	2300      	moveq	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80023bc:	f000 f992 	bl	80026e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000430 	.word	0x20000430
 80023c8:	40013800 	.word	0x40013800

080023cc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d2:	f107 0310 	add.w	r3, r7, #16
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e0:	4b45      	ldr	r3, [pc, #276]	; (80024f8 <_ZL12MX_GPIO_Initv+0x12c>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	4a44      	ldr	r2, [pc, #272]	; (80024f8 <_ZL12MX_GPIO_Initv+0x12c>)
 80023e6:	f043 0310 	orr.w	r3, r3, #16
 80023ea:	6193      	str	r3, [r2, #24]
 80023ec:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <_ZL12MX_GPIO_Initv+0x12c>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f8:	4b3f      	ldr	r3, [pc, #252]	; (80024f8 <_ZL12MX_GPIO_Initv+0x12c>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	4a3e      	ldr	r2, [pc, #248]	; (80024f8 <_ZL12MX_GPIO_Initv+0x12c>)
 80023fe:	f043 0320 	orr.w	r3, r3, #32
 8002402:	6193      	str	r3, [r2, #24]
 8002404:	4b3c      	ldr	r3, [pc, #240]	; (80024f8 <_ZL12MX_GPIO_Initv+0x12c>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002410:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <_ZL12MX_GPIO_Initv+0x12c>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	4a38      	ldr	r2, [pc, #224]	; (80024f8 <_ZL12MX_GPIO_Initv+0x12c>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	6193      	str	r3, [r2, #24]
 800241c:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <_ZL12MX_GPIO_Initv+0x12c>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002428:	4b33      	ldr	r3, [pc, #204]	; (80024f8 <_ZL12MX_GPIO_Initv+0x12c>)
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	4a32      	ldr	r2, [pc, #200]	; (80024f8 <_ZL12MX_GPIO_Initv+0x12c>)
 800242e:	f043 0308 	orr.w	r3, r3, #8
 8002432:	6193      	str	r3, [r2, #24]
 8002434:	4b30      	ldr	r3, [pc, #192]	; (80024f8 <_ZL12MX_GPIO_Initv+0x12c>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002440:	2200      	movs	r2, #0
 8002442:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002446:	482d      	ldr	r0, [pc, #180]	; (80024fc <_ZL12MX_GPIO_Initv+0x130>)
 8002448:	f001 fc6d 	bl	8003d26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG_Pin|VALVE_DIR_Pin|PUMP_EN_Pin, GPIO_PIN_RESET);
 800244c:	2200      	movs	r2, #0
 800244e:	f44f 51a1 	mov.w	r1, #5152	; 0x1420
 8002452:	482b      	ldr	r0, [pc, #172]	; (8002500 <_ZL12MX_GPIO_Initv+0x134>)
 8002454:	f001 fc67 	bl	8003d26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8002458:	2200      	movs	r2, #0
 800245a:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 800245e:	4829      	ldr	r0, [pc, #164]	; (8002504 <_ZL12MX_GPIO_Initv+0x138>)
 8002460:	f001 fc61 	bl	8003d26 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246a:	2301      	movs	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	2302      	movs	r3, #2
 8002474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002476:	f107 0310 	add.w	r3, r7, #16
 800247a:	4619      	mov	r1, r3
 800247c:	481f      	ldr	r0, [pc, #124]	; (80024fc <_ZL12MX_GPIO_Initv+0x130>)
 800247e:	f001 fab7 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SETPOINT_BUT_Pin */
  GPIO_InitStruct.Pin = SETPOINT_BUT_Pin;
 8002482:	2308      	movs	r3, #8
 8002484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SETPOINT_BUT_GPIO_Port, &GPIO_InitStruct);
 800248e:	f107 0310 	add.w	r3, r7, #16
 8002492:	4619      	mov	r1, r3
 8002494:	481b      	ldr	r0, [pc, #108]	; (8002504 <_ZL12MX_GPIO_Initv+0x138>)
 8002496:	f001 faab 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin VALVE_DIR_Pin PUMP_EN_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|VALVE_DIR_Pin|PUMP_EN_Pin;
 800249a:	f44f 53a1 	mov.w	r3, #5152	; 0x1420
 800249e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a0:	2301      	movs	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2302      	movs	r3, #2
 80024aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ac:	f107 0310 	add.w	r3, r7, #16
 80024b0:	4619      	mov	r1, r3
 80024b2:	4813      	ldr	r0, [pc, #76]	; (8002500 <_ZL12MX_GPIO_Initv+0x134>)
 80024b4:	f001 fa9c 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80024b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80024c6:	f107 0310 	add.w	r3, r7, #16
 80024ca:	4619      	mov	r1, r3
 80024cc:	480c      	ldr	r0, [pc, #48]	; (8002500 <_ZL12MX_GPIO_Initv+0x134>)
 80024ce:	f001 fa8f 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 80024d2:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 80024d6:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d8:	2301      	movs	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80024e0:	2301      	movs	r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	4619      	mov	r1, r3
 80024ea:	4806      	ldr	r0, [pc, #24]	; (8002504 <_ZL12MX_GPIO_Initv+0x138>)
 80024ec:	f001 fa80 	bl	80039f0 <HAL_GPIO_Init>

}
 80024f0:	bf00      	nop
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40011000 	.word	0x40011000
 8002500:	40010c00 	.word	0x40010c00
 8002504:	40010800 	.word	0x40010800

08002508 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	if (htim == &htim4)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a10      	ldr	r2, [pc, #64]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d118      	bne.n	800254a <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		pump_pid_controller.millisTicker();
 8002518:	480f      	ldr	r0, [pc, #60]	; (8002558 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800251a:	f000 fba4 	bl	8002c66 <_ZN13PIDController12millisTickerEv>
		LCDMillisCont++;
 800251e:	4b0f      	ldr	r3, [pc, #60]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002528:	801a      	strh	r2, [r3, #0]
		if (LCDMillisCont > 1000*int(LCD_UPDATE_TIME))
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002532:	d90a      	bls.n	800254a <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002538:	4809      	ldr	r0, [pc, #36]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800253a:	f001 fc0c 	bl	8003d56 <HAL_GPIO_TogglePin>
			updateLCD = true;
 800253e:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
			LCDMillisCont = 0;
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002546:	2200      	movs	r2, #0
 8002548:	801a      	strh	r2, [r3, #0]
		}
	}

}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200003e8 	.word	0x200003e8
 8002558:	20000474 	.word	0x20000474
 800255c:	200004bc 	.word	0x200004bc
 8002560:	40011000 	.word	0x40011000
 8002564:	200000c7 	.word	0x200000c7

08002568 <_Z8sendData12HeightSensor>:

void sendData(HeightSensor usensor)
{
 8002568:	b084      	sub	sp, #16
 800256a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800256e:	b098      	sub	sp, #96	; 0x60
 8002570:	af0a      	add	r7, sp, #40	; 0x28
 8002572:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char buffer[36];
	sprintf(buffer, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",
					(HAL_GetTick() - startMillis)/1000.0, usensor.getDistRaw(),
 800257a:	f000 fcd1 	bl	8002f20 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	4b30      	ldr	r3, [pc, #192]	; (8002644 <_Z8sendData12HeightSensor+0xdc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	1ad3      	subs	r3, r2, r3
	sprintf(buffer, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd ff2c 	bl	80003e4 <__aeabi_ui2d>
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <_Z8sendData12HeightSensor+0xe0>)
 8002592:	f7fe f8cb 	bl	800072c <__aeabi_ddiv>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	e9c7 2302 	strd	r2, r3, [r7, #8]
					(HAL_GetTick() - startMillis)/1000.0, usensor.getDistRaw(),
 800259e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80025a2:	f7fe fe85 	bl	80012b0 <_ZN12HeightSensor10getDistRawEv>
 80025a6:	4603      	mov	r3, r0
	sprintf(buffer, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ff3d 	bl	8000428 <__aeabi_f2d>
 80025ae:	4604      	mov	r4, r0
 80025b0:	460d      	mov	r5, r1
					usensor.getDistFiltered() ,usensor.getWaterHeight(),
 80025b2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80025b6:	f7fe fe87 	bl	80012c8 <_ZN12HeightSensor15getDistFilteredEv>
 80025ba:	4603      	mov	r3, r0
	sprintf(buffer, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ff33 	bl	8000428 <__aeabi_f2d>
 80025c2:	4680      	mov	r8, r0
 80025c4:	4689      	mov	r9, r1
					usensor.getDistFiltered() ,usensor.getWaterHeight(),
 80025c6:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80025ca:	f7fe fe89 	bl	80012e0 <_ZN12HeightSensor14getWaterHeightEv>
 80025ce:	4603      	mov	r3, r0
	sprintf(buffer, "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ff29 	bl	8000428 <__aeabi_f2d>
 80025d6:	4682      	mov	sl, r0
 80025d8:	468b      	mov	fp, r1
 80025da:	4b1c      	ldr	r3, [pc, #112]	; (800264c <_Z8sendData12HeightSensor+0xe4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd ff22 	bl	8000428 <__aeabi_f2d>
 80025e4:	e9c7 0100 	strd	r0, r1, [r7]
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <_Z8sendData12HeightSensor+0xe8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ff1b 	bl	8000428 <__aeabi_f2d>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	f107 0014 	add.w	r0, r7, #20
 80025fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80025fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002602:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8002606:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800260a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800260e:	e9cd 4500 	strd	r4, r5, [sp]
 8002612:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002616:	490f      	ldr	r1, [pc, #60]	; (8002654 <_Z8sendData12HeightSensor+0xec>)
 8002618:	f003 ffb8 	bl	800658c <siprintf>
					setpoint, pidVal);
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 100);
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd fd95 	bl	8000150 <strlen>
 8002626:	4603      	mov	r3, r0
 8002628:	b29a      	uxth	r2, r3
 800262a:	f107 0114 	add.w	r1, r7, #20
 800262e:	2364      	movs	r3, #100	; 0x64
 8002630:	4809      	ldr	r0, [pc, #36]	; (8002658 <_Z8sendData12HeightSensor+0xf0>)
 8002632:	f003 f9a1 	bl	8005978 <HAL_UART_Transmit>
}
 8002636:	bf00      	nop
 8002638:	3738      	adds	r7, #56	; 0x38
 800263a:	46bd      	mov	sp, r7
 800263c:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002640:	b004      	add	sp, #16
 8002642:	4770      	bx	lr
 8002644:	200004c0 	.word	0x200004c0
 8002648:	408f4000 	.word	0x408f4000
 800264c:	200004b4 	.word	0x200004b4
 8002650:	200004b8 	.word	0x200004b8
 8002654:	08008aac 	.word	0x08008aac
 8002658:	20000430 	.word	0x20000430

0800265c <_Z10closeValvev>:

void closeValve()
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
	lcd16x2_clear();
 8002660:	f7ff f9c0 	bl	80019e4 <_Z13lcd16x2_clearv>
	lcd16x2_printf("Fechando Valvula");
 8002664:	480b      	ldr	r0, [pc, #44]	; (8002694 <_Z10closeValvev+0x38>)
 8002666:	f7ff f9c7 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
	HAL_GPIO_WritePin(VALVE_DIR_GPIO_Port, VALVE_DIR_Pin, GPIO_PIN_RESET);
 800266a:	2200      	movs	r2, #0
 800266c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002670:	4809      	ldr	r0, [pc, #36]	; (8002698 <_Z10closeValvev+0x3c>)
 8002672:	f001 fb58 	bl	8003d26 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 625);
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <_Z10closeValvev+0x40>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f240 2271 	movw	r2, #625	; 0x271
 800267e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(4500);
 8002680:	f241 1094 	movw	r0, #4500	; 0x1194
 8002684:	f000 fc56 	bl	8002f34 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <_Z10closeValvev+0x40>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2200      	movs	r2, #0
 800268e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	08008acc 	.word	0x08008acc
 8002698:	40010c00 	.word	0x40010c00
 800269c:	20000310 	.word	0x20000310

080026a0 <_Z9openValvev>:
	HAL_Delay(6000);
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
}

void openValve()
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
	lcd16x2_clear();
 80026a4:	f7ff f99e 	bl	80019e4 <_Z13lcd16x2_clearv>
	lcd16x2_printf("Abrindo Valvula");
 80026a8:	480b      	ldr	r0, [pc, #44]	; (80026d8 <_Z9openValvev+0x38>)
 80026aa:	f7ff f9a5 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 625);
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <_Z9openValvev+0x3c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f240 2271 	movw	r2, #625	; 0x271
 80026b6:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(VALVE_DIR_GPIO_Port, VALVE_DIR_Pin, GPIO_PIN_SET);
 80026b8:	2201      	movs	r2, #1
 80026ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026be:	4808      	ldr	r0, [pc, #32]	; (80026e0 <_Z9openValvev+0x40>)
 80026c0:	f001 fb31 	bl	8003d26 <HAL_GPIO_WritePin>
	HAL_Delay(1600);
 80026c4:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80026c8:	f000 fc34 	bl	8002f34 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <_Z9openValvev+0x3c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	08008af0 	.word	0x08008af0
 80026dc:	20000310 	.word	0x20000310
 80026e0:	40010c00 	.word	0x40010c00

080026e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e8:	b672      	cpsid	i
}
 80026ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026ec:	e7fe      	b.n	80026ec <Error_Handler+0x8>
	...

080026f0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d107      	bne.n	8002710 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002706:	4293      	cmp	r3, r2
 8002708:	d102      	bne.n	8002710 <_Z41__static_initialization_and_destruction_0ii+0x20>
PIDController pump_pid_controller;
 800270a:	4809      	ldr	r0, [pc, #36]	; (8002730 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800270c:	f000 fa7c 	bl	8002c08 <_ZN13PIDControllerC1Ev>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d107      	bne.n	8002726 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800271c:	4293      	cmp	r3, r2
 800271e:	d102      	bne.n	8002726 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002720:	4803      	ldr	r0, [pc, #12]	; (8002730 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002722:	f000 fa96 	bl	8002c52 <_ZN13PIDControllerD1Ev>
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20000474 	.word	0x20000474

08002734 <_GLOBAL__sub_I__Z18lcd16x2_init_8bitsP12GPIO_TypeDefttS0_ttttS0_tttt>:
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
 8002738:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800273c:	2001      	movs	r0, #1
 800273e:	f7ff ffd7 	bl	80026f0 <_Z41__static_initialization_and_destruction_0ii>
 8002742:	bd80      	pop	{r7, pc}

08002744 <_GLOBAL__sub_D__Z18lcd16x2_init_8bitsP12GPIO_TypeDefttS0_ttttS0_tttt>:
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
 8002748:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800274c:	2000      	movs	r0, #0
 800274e:	f7ff ffcf 	bl	80026f0 <_Z41__static_initialization_and_destruction_0ii>
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <HAL_MspInit+0x5c>)
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	4a14      	ldr	r2, [pc, #80]	; (80027b0 <HAL_MspInit+0x5c>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6193      	str	r3, [r2, #24]
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_MspInit+0x5c>)
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_MspInit+0x5c>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <HAL_MspInit+0x5c>)
 8002778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277c:	61d3      	str	r3, [r2, #28]
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_MspInit+0x5c>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_MspInit+0x60>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <HAL_MspInit+0x60>)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40010000 	.word	0x40010000

080027b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a14      	ldr	r2, [pc, #80]	; (8002824 <HAL_ADC_MspInit+0x6c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d121      	bne.n	800281c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <HAL_ADC_MspInit+0x70>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4a12      	ldr	r2, [pc, #72]	; (8002828 <HAL_ADC_MspInit+0x70>)
 80027de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027e2:	6193      	str	r3, [r2, #24]
 80027e4:	4b10      	ldr	r3, [pc, #64]	; (8002828 <HAL_ADC_MspInit+0x70>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f0:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <HAL_ADC_MspInit+0x70>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4a0c      	ldr	r2, [pc, #48]	; (8002828 <HAL_ADC_MspInit+0x70>)
 80027f6:	f043 0304 	orr.w	r3, r3, #4
 80027fa:	6193      	str	r3, [r2, #24]
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <HAL_ADC_MspInit+0x70>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = SETPOINT_POT_Pin;
 8002808:	2301      	movs	r3, #1
 800280a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800280c:	2303      	movs	r3, #3
 800280e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SETPOINT_POT_GPIO_Port, &GPIO_InitStruct);
 8002810:	f107 0310 	add.w	r3, r7, #16
 8002814:	4619      	mov	r1, r3
 8002816:	4805      	ldr	r0, [pc, #20]	; (800282c <HAL_ADC_MspInit+0x74>)
 8002818:	f001 f8ea 	bl	80039f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800281c:	bf00      	nop
 800281e:	3720      	adds	r7, #32
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40012400 	.word	0x40012400
 8002828:	40021000 	.word	0x40021000
 800282c:	40010800 	.word	0x40010800

08002830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a28      	ldr	r2, [pc, #160]	; (80028e0 <HAL_TIM_Base_MspInit+0xb0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10c      	bne.n	800285c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002842:	4b28      	ldr	r3, [pc, #160]	; (80028e4 <HAL_TIM_Base_MspInit+0xb4>)
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	4a27      	ldr	r2, [pc, #156]	; (80028e4 <HAL_TIM_Base_MspInit+0xb4>)
 8002848:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800284c:	6193      	str	r3, [r2, #24]
 800284e:	4b25      	ldr	r3, [pc, #148]	; (80028e4 <HAL_TIM_Base_MspInit+0xb4>)
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002856:	617b      	str	r3, [r7, #20]
 8002858:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800285a:	e03c      	b.n	80028d6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002864:	d10c      	bne.n	8002880 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002866:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <HAL_TIM_Base_MspInit+0xb4>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4a1e      	ldr	r2, [pc, #120]	; (80028e4 <HAL_TIM_Base_MspInit+0xb4>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	61d3      	str	r3, [r2, #28]
 8002872:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <HAL_TIM_Base_MspInit+0xb4>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]
}
 800287e:	e02a      	b.n	80028d6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <HAL_TIM_Base_MspInit+0xb8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d10c      	bne.n	80028a4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800288a:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <HAL_TIM_Base_MspInit+0xb4>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	4a15      	ldr	r2, [pc, #84]	; (80028e4 <HAL_TIM_Base_MspInit+0xb4>)
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	61d3      	str	r3, [r2, #28]
 8002896:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_TIM_Base_MspInit+0xb4>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
}
 80028a2:	e018      	b.n	80028d6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a10      	ldr	r2, [pc, #64]	; (80028ec <HAL_TIM_Base_MspInit+0xbc>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d113      	bne.n	80028d6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_TIM_Base_MspInit+0xb4>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <HAL_TIM_Base_MspInit+0xb4>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	61d3      	str	r3, [r2, #28]
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_TIM_Base_MspInit+0xb4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	201e      	movs	r0, #30
 80028cc:	f001 f859 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028d0:	201e      	movs	r0, #30
 80028d2:	f001 f872 	bl	80039ba <HAL_NVIC_EnableIRQ>
}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40000800 	.word	0x40000800

080028f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 0310 	add.w	r3, r7, #16
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a10      	ldr	r2, [pc, #64]	; (800294c <HAL_TIM_MspPostInit+0x5c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d118      	bne.n	8002942 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002910:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <HAL_TIM_MspPostInit+0x60>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a0e      	ldr	r2, [pc, #56]	; (8002950 <HAL_TIM_MspPostInit+0x60>)
 8002916:	f043 0308 	orr.w	r3, r3, #8
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <HAL_TIM_MspPostInit+0x60>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = VALVE_PWM_Pin|PUMP_PWM_Pin;
 8002928:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800292c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002932:	2302      	movs	r3, #2
 8002934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002936:	f107 0310 	add.w	r3, r7, #16
 800293a:	4619      	mov	r1, r3
 800293c:	4805      	ldr	r0, [pc, #20]	; (8002954 <HAL_TIM_MspPostInit+0x64>)
 800293e:	f001 f857 	bl	80039f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002942:	bf00      	nop
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40012c00 	.word	0x40012c00
 8002950:	40021000 	.word	0x40021000
 8002954:	40010c00 	.word	0x40010c00

08002958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a22      	ldr	r2, [pc, #136]	; (80029fc <HAL_UART_MspInit+0xa4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d13d      	bne.n	80029f4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002978:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <HAL_UART_MspInit+0xa8>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <HAL_UART_MspInit+0xa8>)
 800297e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002982:	6193      	str	r3, [r2, #24]
 8002984:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <HAL_UART_MspInit+0xa8>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_UART_MspInit+0xa8>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a1a      	ldr	r2, [pc, #104]	; (8002a00 <HAL_UART_MspInit+0xa8>)
 8002996:	f043 0308 	orr.w	r3, r3, #8
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <HAL_UART_MspInit+0xa8>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029a8:	2340      	movs	r3, #64	; 0x40
 80029aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029b0:	2303      	movs	r3, #3
 80029b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	4619      	mov	r1, r3
 80029ba:	4812      	ldr	r0, [pc, #72]	; (8002a04 <HAL_UART_MspInit+0xac>)
 80029bc:	f001 f818 	bl	80039f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	4619      	mov	r1, r3
 80029d2:	480c      	ldr	r0, [pc, #48]	; (8002a04 <HAL_UART_MspInit+0xac>)
 80029d4:	f001 f80c 	bl	80039f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_UART_MspInit+0xb0>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f043 0304 	orr.w	r3, r3, #4
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
 80029ee:	4a06      	ldr	r2, [pc, #24]	; (8002a08 <HAL_UART_MspInit+0xb0>)
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80029f4:	bf00      	nop
 80029f6:	3728      	adds	r7, #40	; 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40013800 	.word	0x40013800
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40010c00 	.word	0x40010c00
 8002a08:	40010000 	.word	0x40010000

08002a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a10:	e7fe      	b.n	8002a10 <NMI_Handler+0x4>

08002a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a16:	e7fe      	b.n	8002a16 <HardFault_Handler+0x4>

08002a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <MemManage_Handler+0x4>

08002a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <BusFault_Handler+0x4>

08002a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <UsageFault_Handler+0x4>

08002a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a52:	f000 fa53 	bl	8002efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002a5e:	2002      	movs	r0, #2
 8002a60:	f001 f992 	bl	8003d88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a6c:	4802      	ldr	r0, [pc, #8]	; (8002a78 <TIM4_IRQHandler+0x10>)
 8002a6e:	f002 f885 	bl	8004b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200003e8 	.word	0x200003e8

08002a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
	return 1;
 8002a80:	2301      	movs	r3, #1
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr

08002a8a <_kill>:

int _kill(int pid, int sig)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a94:	f003 f8da 	bl	8005c4c <__errno>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2216      	movs	r2, #22
 8002a9c:	601a      	str	r2, [r3, #0]
	return -1;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <_exit>:

void _exit (int status)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ab2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffe7 	bl	8002a8a <_kill>
	while (1) {}		/* Make sure we hang here */
 8002abc:	e7fe      	b.n	8002abc <_exit+0x12>

08002abe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	e00a      	b.n	8002ae6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ad0:	f3af 8000 	nop.w
 8002ad4:	4601      	mov	r1, r0
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	60ba      	str	r2, [r7, #8]
 8002adc:	b2ca      	uxtb	r2, r1
 8002ade:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	dbf0      	blt.n	8002ad0 <_read+0x12>
	}

return len;
 8002aee:	687b      	ldr	r3, [r7, #4]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e009      	b.n	8002b1e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	60ba      	str	r2, [r7, #8]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	dbf1      	blt.n	8002b0a <_write+0x12>
	}
	return len;
 8002b26:	687b      	ldr	r3, [r7, #4]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <_close>:

int _close(int file)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	return -1;
 8002b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b56:	605a      	str	r2, [r3, #4]
	return 0;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <_isatty>:

int _isatty(int file)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	return 1;
 8002b6c:	2301      	movs	r3, #1
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
	return 0;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b98:	4a14      	ldr	r2, [pc, #80]	; (8002bec <_sbrk+0x5c>)
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <_sbrk+0x60>)
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <_sbrk+0x64>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d102      	bne.n	8002bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <_sbrk+0x64>)
 8002bae:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <_sbrk+0x68>)
 8002bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <_sbrk+0x64>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d207      	bcs.n	8002bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bc0:	f003 f844 	bl	8005c4c <__errno>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	220c      	movs	r2, #12
 8002bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bce:	e009      	b.n	8002be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <_sbrk+0x64>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <_sbrk+0x64>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <_sbrk+0x64>)
 8002be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002be2:	68fb      	ldr	r3, [r7, #12]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20005000 	.word	0x20005000
 8002bf0:	00000400 	.word	0x00000400
 8002bf4:	200004c8 	.word	0x200004c8
 8002bf8:	200004e8 	.word	0x200004e8

08002bfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <_ZN13PIDControllerC1Ev>:
 */

#include "PIDController.h"


PIDController::PIDController()
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	615a      	str	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	61da      	str	r2, [r3, #28]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	639a      	str	r2, [r3, #56]	; 0x38
{
}
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <_ZN13PIDControllerD1Ev>:
PIDController::PIDController(float kp, float ki, float kd)
  : _kp(kp), _ki(ki), _kd(kd)
{
}

PIDController::~PIDController()
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
{
}
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <_ZN13PIDController12millisTickerEv>:

void PIDController::millisTicker(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  this->_millis++;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <_ZN13PIDController7setKPIDEfff>:

void PIDController::setKPID(float kp, float ki, float kd)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b085      	sub	sp, #20
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	603b      	str	r3, [r7, #0]
  this->_kp = kp;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	601a      	str	r2, [r3, #0]
  this->_ki = ki;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	605a      	str	r2, [r3, #4]
  this->_kd = kd;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	609a      	str	r2, [r3, #8]
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <_ZN13PIDController11setSetpointEf>:
{
  this->_kd = kd;
}

void PIDController::setSetpoint(float setpoint)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  this->_setpoint = setpoint;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <_ZN13PIDController12setPIDLimitsEff>:

void PIDController::setPIDLimits(float min, float max)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
  this->_pid_min = min;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	635a      	str	r2, [r3, #52]	; 0x34
  this->_pid_max = max;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <_ZN13PIDController10processPIDEf>:
{
  return this->_error;
}

float PIDController::processPID(float curr_point)
{
 8002ce8:	b590      	push	{r4, r7, lr}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  this->_curr_time = this->_millis / 1000.0;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fb74 	bl	80003e4 <__aeabi_ui2d>
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	4b47      	ldr	r3, [pc, #284]	; (8002e20 <_ZN13PIDController10processPIDEf+0x138>)
 8002d02:	f7fd fd13 	bl	800072c <__aeabi_ddiv>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f7fd fedb 	bl	8000ac8 <__aeabi_d2f>
 8002d12:	4602      	mov	r2, r0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	621a      	str	r2, [r3, #32]
  this->_delta_time = this->_curr_time - this->_last_time;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1a      	ldr	r2, [r3, #32]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f7fd ff24 	bl	8000b70 <__aeabi_fsub>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24

  this->_error = this->_setpoint - curr_point;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	6839      	ldr	r1, [r7, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd ff1a 	bl	8000b70 <__aeabi_fsub>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	461a      	mov	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	60da      	str	r2, [r3, #12]
  this->_sum_error  += this->_error;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691a      	ldr	r2, [r3, #16]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f7fd ff10 	bl	8000b74 <__addsf3>
 8002d54:	4603      	mov	r3, r0
 8002d56:	461a      	mov	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	611a      	str	r2, [r3, #16]
  this->_delta_error = this->_last_error - this->_error;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4619      	mov	r1, r3
 8002d66:	4610      	mov	r0, r2
 8002d68:	f7fd ff02 	bl	8000b70 <__aeabi_fsub>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	619a      	str	r2, [r3, #24]

  this->_pid_result  = this->_kp * this->_error
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	f7fe f800 	bl	8000d84 <__aeabi_fmul>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461c      	mov	r4, r3
                     + this->_ki * this->_sum_error * this->_delta_time;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	4619      	mov	r1, r3
 8002d92:	4610      	mov	r0, r2
 8002d94:	f7fd fff6 	bl	8000d84 <__aeabi_fmul>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f7fd ffee 	bl	8000d84 <__aeabi_fmul>
 8002da8:	4603      	mov	r3, r0
 8002daa:	4619      	mov	r1, r3
 8002dac:	4620      	mov	r0, r4
 8002dae:	f7fd fee1 	bl	8000b74 <__addsf3>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
  this->_pid_result  = this->_kp * this->_error
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	62da      	str	r2, [r3, #44]	; 0x2c
                     + this->_kd * this->_delta_error / this->_delta_time;

  this->_last_time = this->_curr_time;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1a      	ldr	r2, [r3, #32]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	61da      	str	r2, [r3, #28]
  this->_last_error = this->_error;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	615a      	str	r2, [r3, #20]

  this->_pid_result = this->_pid_result < this->_pid_min ? this->_pid_min : this->_pid_result;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f7fe f973 	bl	80010c0 <__aeabi_fcmplt>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <_ZN13PIDController10processPIDEf+0xfe>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	e001      	b.n	8002dea <_ZN13PIDController10processPIDEf+0x102>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	62d3      	str	r3, [r2, #44]	; 0x2c
  this->_pid_result = this->_pid_result > this->_pid_max ? this->_pid_max : this->_pid_result;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4619      	mov	r1, r3
 8002df8:	4610      	mov	r0, r2
 8002dfa:	f7fe f97f 	bl	80010fc <__aeabi_fcmpgt>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <_ZN13PIDController10processPIDEf+0x122>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	e001      	b.n	8002e0e <_ZN13PIDController10processPIDEf+0x126>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	62d3      	str	r3, [r2, #44]	; 0x2c

  return this->_pid_result;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd90      	pop	{r4, r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	408f4000 	.word	0x408f4000

08002e24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e24:	480c      	ldr	r0, [pc, #48]	; (8002e58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e26:	490d      	ldr	r1, [pc, #52]	; (8002e5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e28:	4a0d      	ldr	r2, [pc, #52]	; (8002e60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e2c:	e002      	b.n	8002e34 <LoopCopyDataInit>

08002e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e32:	3304      	adds	r3, #4

08002e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e38:	d3f9      	bcc.n	8002e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e3c:	4c0a      	ldr	r4, [pc, #40]	; (8002e68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e40:	e001      	b.n	8002e46 <LoopFillZerobss>

08002e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e44:	3204      	adds	r2, #4

08002e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e48:	d3fb      	bcc.n	8002e42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e4a:	f7ff fed7 	bl	8002bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e4e:	f002 ff03 	bl	8005c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e52:	f7fe fe01 	bl	8001a58 <main>
  bx lr
 8002e56:	4770      	bx	lr
  ldr r0, =_sdata
 8002e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e5c:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 8002e60:	08008f2c 	.word	0x08008f2c
  ldr r2, =_sbss
 8002e64:	200002a4 	.word	0x200002a4
  ldr r4, =_ebss
 8002e68:	200004e8 	.word	0x200004e8

08002e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e6c:	e7fe      	b.n	8002e6c <ADC1_2_IRQHandler>
	...

08002e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <HAL_Init+0x28>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <HAL_Init+0x28>)
 8002e7a:	f043 0310 	orr.w	r3, r3, #16
 8002e7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e80:	2003      	movs	r0, #3
 8002e82:	f000 fd73 	bl	800396c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e86:	200f      	movs	r0, #15
 8002e88:	f000 f808 	bl	8002e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e8c:	f7ff fc62 	bl	8002754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40022000 	.word	0x40022000

08002e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <HAL_InitTick+0x54>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <HAL_InitTick+0x58>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	4619      	mov	r1, r3
 8002eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fd8b 	bl	80039d6 <HAL_SYSTICK_Config>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e00e      	b.n	8002ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b0f      	cmp	r3, #15
 8002ece:	d80a      	bhi.n	8002ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ed8:	f000 fd53 	bl	8003982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002edc:	4a06      	ldr	r2, [pc, #24]	; (8002ef8 <HAL_InitTick+0x5c>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e000      	b.n	8002ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	200000c8 	.word	0x200000c8
 8002ef4:	200000d0 	.word	0x200000d0
 8002ef8:	200000cc 	.word	0x200000cc

08002efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_IncTick+0x1c>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_IncTick+0x20>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	4a03      	ldr	r2, [pc, #12]	; (8002f1c <HAL_IncTick+0x20>)
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr
 8002f18:	200000d0 	.word	0x200000d0
 8002f1c:	200004d4 	.word	0x200004d4

08002f20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return uwTick;
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <HAL_GetTick+0x10>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr
 8002f30:	200004d4 	.word	0x200004d4

08002f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f3c:	f7ff fff0 	bl	8002f20 <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f4c:	d005      	beq.n	8002f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_Delay+0x44>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4413      	add	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f5a:	bf00      	nop
 8002f5c:	f7ff ffe0 	bl	8002f20 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d8f7      	bhi.n	8002f5c <HAL_Delay+0x28>
  {
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200000d0 	.word	0x200000d0

08002f7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e0be      	b.n	800311c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d109      	bne.n	8002fc0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff fbfc 	bl	80027b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 fbc5 	bl	8003750 <ADC_ConversionStop_Disable>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f040 8099 	bne.w	800310a <HAL_ADC_Init+0x18e>
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 8095 	bne.w	800310a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fe8:	f023 0302 	bic.w	r3, r3, #2
 8002fec:	f043 0202 	orr.w	r2, r3, #2
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ffc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7b1b      	ldrb	r3, [r3, #12]
 8003002:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003004:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	4313      	orrs	r3, r2
 800300a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003014:	d003      	beq.n	800301e <HAL_ADC_Init+0xa2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d102      	bne.n	8003024 <HAL_ADC_Init+0xa8>
 800301e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003022:	e000      	b.n	8003026 <HAL_ADC_Init+0xaa>
 8003024:	2300      	movs	r3, #0
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7d1b      	ldrb	r3, [r3, #20]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d119      	bne.n	8003068 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7b1b      	ldrb	r3, [r3, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d109      	bne.n	8003050 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	3b01      	subs	r3, #1
 8003042:	035a      	lsls	r2, r3, #13
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	e00b      	b.n	8003068 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	f043 0201 	orr.w	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	430a      	orrs	r2, r1
 800307a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	4b28      	ldr	r3, [pc, #160]	; (8003124 <HAL_ADC_Init+0x1a8>)
 8003084:	4013      	ands	r3, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	430b      	orrs	r3, r1
 800308e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003098:	d003      	beq.n	80030a2 <HAL_ADC_Init+0x126>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d104      	bne.n	80030ac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	051b      	lsls	r3, r3, #20
 80030aa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	430a      	orrs	r2, r1
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	4b18      	ldr	r3, [pc, #96]	; (8003128 <HAL_ADC_Init+0x1ac>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d10b      	bne.n	80030e8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	f023 0303 	bic.w	r3, r3, #3
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030e6:	e018      	b.n	800311a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	f023 0312 	bic.w	r3, r3, #18
 80030f0:	f043 0210 	orr.w	r2, r3, #16
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	f043 0201 	orr.w	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003108:	e007      	b.n	800311a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	f043 0210 	orr.w	r2, r3, #16
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800311a:	7dfb      	ldrb	r3, [r7, #23]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	ffe1f7fd 	.word	0xffe1f7fd
 8003128:	ff1f0efe 	.word	0xff1f0efe

0800312c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_ADC_Start+0x1a>
 8003142:	2302      	movs	r3, #2
 8003144:	e098      	b.n	8003278 <HAL_ADC_Start+0x14c>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 faa4 	bl	800369c <ADC_Enable>
 8003154:	4603      	mov	r3, r0
 8003156:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 8087 	bne.w	800326e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a41      	ldr	r2, [pc, #260]	; (8003280 <HAL_ADC_Start+0x154>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d105      	bne.n	800318a <HAL_ADC_Start+0x5e>
 800317e:	4b41      	ldr	r3, [pc, #260]	; (8003284 <HAL_ADC_Start+0x158>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d115      	bne.n	80031b6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d026      	beq.n	80031f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031b4:	e01d      	b.n	80031f2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a2f      	ldr	r2, [pc, #188]	; (8003284 <HAL_ADC_Start+0x158>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_ADC_Start+0xaa>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a2b      	ldr	r2, [pc, #172]	; (8003280 <HAL_ADC_Start+0x154>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d10d      	bne.n	80031f2 <HAL_ADC_Start+0xc6>
 80031d6:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_ADC_Start+0x158>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d006      	beq.n	800320c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	f023 0206 	bic.w	r2, r3, #6
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	62da      	str	r2, [r3, #44]	; 0x2c
 800320a:	e002      	b.n	8003212 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f06f 0202 	mvn.w	r2, #2
 8003222:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800322e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003232:	d113      	bne.n	800325c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003238:	4a11      	ldr	r2, [pc, #68]	; (8003280 <HAL_ADC_Start+0x154>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d105      	bne.n	800324a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_ADC_Start+0x158>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003246:	2b00      	cmp	r3, #0
 8003248:	d108      	bne.n	800325c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	e00c      	b.n	8003276 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	e003      	b.n	8003276 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003276:	7bfb      	ldrb	r3, [r7, #15]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40012800 	.word	0x40012800
 8003284:	40012400 	.word	0x40012400

08003288 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800329e:	f7ff fe3f 	bl	8002f20 <HAL_GetTick>
 80032a2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00b      	beq.n	80032ca <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	f043 0220 	orr.w	r2, r3, #32
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0d3      	b.n	8003472 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d131      	bne.n	800333c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d12a      	bne.n	800333c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032e6:	e021      	b.n	800332c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032ee:	d01d      	beq.n	800332c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <HAL_ADC_PollForConversion+0x7e>
 80032f6:	f7ff fe13 	bl	8002f20 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d212      	bcs.n	800332c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10b      	bne.n	800332c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	f043 0204 	orr.w	r2, r3, #4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0a2      	b.n	8003472 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0d6      	beq.n	80032e8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800333a:	e070      	b.n	800341e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800333c:	4b4f      	ldr	r3, [pc, #316]	; (800347c <HAL_ADC_PollForConversion+0x1f4>)
 800333e:	681c      	ldr	r4, [r3, #0]
 8003340:	2002      	movs	r0, #2
 8003342:	f001 fa13 	bl	800476c <HAL_RCCEx_GetPeriphCLKFreq>
 8003346:	4603      	mov	r3, r0
 8003348:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6919      	ldr	r1, [r3, #16]
 8003352:	4b4b      	ldr	r3, [pc, #300]	; (8003480 <HAL_ADC_PollForConversion+0x1f8>)
 8003354:	400b      	ands	r3, r1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d118      	bne.n	800338c <HAL_ADC_PollForConversion+0x104>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68d9      	ldr	r1, [r3, #12]
 8003360:	4b48      	ldr	r3, [pc, #288]	; (8003484 <HAL_ADC_PollForConversion+0x1fc>)
 8003362:	400b      	ands	r3, r1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d111      	bne.n	800338c <HAL_ADC_PollForConversion+0x104>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6919      	ldr	r1, [r3, #16]
 800336e:	4b46      	ldr	r3, [pc, #280]	; (8003488 <HAL_ADC_PollForConversion+0x200>)
 8003370:	400b      	ands	r3, r1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d108      	bne.n	8003388 <HAL_ADC_PollForConversion+0x100>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68d9      	ldr	r1, [r3, #12]
 800337c:	4b43      	ldr	r3, [pc, #268]	; (800348c <HAL_ADC_PollForConversion+0x204>)
 800337e:	400b      	ands	r3, r1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_ADC_PollForConversion+0x100>
 8003384:	2314      	movs	r3, #20
 8003386:	e020      	b.n	80033ca <HAL_ADC_PollForConversion+0x142>
 8003388:	2329      	movs	r3, #41	; 0x29
 800338a:	e01e      	b.n	80033ca <HAL_ADC_PollForConversion+0x142>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6919      	ldr	r1, [r3, #16]
 8003392:	4b3d      	ldr	r3, [pc, #244]	; (8003488 <HAL_ADC_PollForConversion+0x200>)
 8003394:	400b      	ands	r3, r1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_ADC_PollForConversion+0x120>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68d9      	ldr	r1, [r3, #12]
 80033a0:	4b3a      	ldr	r3, [pc, #232]	; (800348c <HAL_ADC_PollForConversion+0x204>)
 80033a2:	400b      	ands	r3, r1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00d      	beq.n	80033c4 <HAL_ADC_PollForConversion+0x13c>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6919      	ldr	r1, [r3, #16]
 80033ae:	4b38      	ldr	r3, [pc, #224]	; (8003490 <HAL_ADC_PollForConversion+0x208>)
 80033b0:	400b      	ands	r3, r1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d108      	bne.n	80033c8 <HAL_ADC_PollForConversion+0x140>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68d9      	ldr	r1, [r3, #12]
 80033bc:	4b34      	ldr	r3, [pc, #208]	; (8003490 <HAL_ADC_PollForConversion+0x208>)
 80033be:	400b      	ands	r3, r1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_ADC_PollForConversion+0x140>
 80033c4:	2354      	movs	r3, #84	; 0x54
 80033c6:	e000      	b.n	80033ca <HAL_ADC_PollForConversion+0x142>
 80033c8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033d0:	e021      	b.n	8003416 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033d8:	d01a      	beq.n	8003410 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_ADC_PollForConversion+0x168>
 80033e0:	f7ff fd9e 	bl	8002f20 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d20f      	bcs.n	8003410 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d90b      	bls.n	8003410 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	f043 0204 	orr.w	r2, r3, #4
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e030      	b.n	8003472 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3301      	adds	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	429a      	cmp	r2, r3
 800341c:	d8d9      	bhi.n	80033d2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f06f 0212 	mvn.w	r2, #18
 8003426:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800343e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003442:	d115      	bne.n	8003470 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003448:	2b00      	cmp	r3, #0
 800344a:	d111      	bne.n	8003470 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	f043 0201 	orr.w	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	bd90      	pop	{r4, r7, pc}
 800347a:	bf00      	nop
 800347c:	200000c8 	.word	0x200000c8
 8003480:	24924924 	.word	0x24924924
 8003484:	00924924 	.word	0x00924924
 8003488:	12492492 	.word	0x12492492
 800348c:	00492492 	.word	0x00492492
 8003490:	00249249 	.word	0x00249249

08003494 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x20>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e0dc      	b.n	8003686 <HAL_ADC_ConfigChannel+0x1da>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b06      	cmp	r3, #6
 80034da:	d81c      	bhi.n	8003516 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	3b05      	subs	r3, #5
 80034ee:	221f      	movs	r2, #31
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	4019      	ands	r1, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	3b05      	subs	r3, #5
 8003508:	fa00 f203 	lsl.w	r2, r0, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	635a      	str	r2, [r3, #52]	; 0x34
 8003514:	e03c      	b.n	8003590 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2b0c      	cmp	r3, #12
 800351c:	d81c      	bhi.n	8003558 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	3b23      	subs	r3, #35	; 0x23
 8003530:	221f      	movs	r2, #31
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	4019      	ands	r1, r3
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	3b23      	subs	r3, #35	; 0x23
 800354a:	fa00 f203 	lsl.w	r2, r0, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	631a      	str	r2, [r3, #48]	; 0x30
 8003556:	e01b      	b.n	8003590 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	3b41      	subs	r3, #65	; 0x41
 800356a:	221f      	movs	r2, #31
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	4019      	ands	r1, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	3b41      	subs	r3, #65	; 0x41
 8003584:	fa00 f203 	lsl.w	r2, r0, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b09      	cmp	r3, #9
 8003596:	d91c      	bls.n	80035d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68d9      	ldr	r1, [r3, #12]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	3b1e      	subs	r3, #30
 80035aa:	2207      	movs	r2, #7
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	4019      	ands	r1, r3
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6898      	ldr	r0, [r3, #8]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	4413      	add	r3, r2
 80035c2:	3b1e      	subs	r3, #30
 80035c4:	fa00 f203 	lsl.w	r2, r0, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	60da      	str	r2, [r3, #12]
 80035d0:	e019      	b.n	8003606 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6919      	ldr	r1, [r3, #16]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4613      	mov	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	2207      	movs	r2, #7
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	4019      	ands	r1, r3
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6898      	ldr	r0, [r3, #8]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	fa00 f203 	lsl.w	r2, r0, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b10      	cmp	r3, #16
 800360c:	d003      	beq.n	8003616 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003612:	2b11      	cmp	r3, #17
 8003614:	d132      	bne.n	800367c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <HAL_ADC_ConfigChannel+0x1e4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d125      	bne.n	800366c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d126      	bne.n	800367c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800363c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b10      	cmp	r3, #16
 8003644:	d11a      	bne.n	800367c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003646:	4b13      	ldr	r3, [pc, #76]	; (8003694 <HAL_ADC_ConfigChannel+0x1e8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a13      	ldr	r2, [pc, #76]	; (8003698 <HAL_ADC_ConfigChannel+0x1ec>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	0c9a      	lsrs	r2, r3, #18
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800365c:	e002      	b.n	8003664 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	3b01      	subs	r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f9      	bne.n	800365e <HAL_ADC_ConfigChannel+0x1b2>
 800366a:	e007      	b.n	800367c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	f043 0220 	orr.w	r2, r3, #32
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003684:	7bfb      	ldrb	r3, [r7, #15]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr
 8003690:	40012400 	.word	0x40012400
 8003694:	200000c8 	.word	0x200000c8
 8003698:	431bde83 	.word	0x431bde83

0800369c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d040      	beq.n	800373c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0201 	orr.w	r2, r2, #1
 80036c8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036ca:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <ADC_Enable+0xac>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1f      	ldr	r2, [pc, #124]	; (800374c <ADC_Enable+0xb0>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	0c9b      	lsrs	r3, r3, #18
 80036d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036d8:	e002      	b.n	80036e0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	3b01      	subs	r3, #1
 80036de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f9      	bne.n	80036da <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036e6:	f7ff fc1b 	bl	8002f20 <HAL_GetTick>
 80036ea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036ec:	e01f      	b.n	800372e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036ee:	f7ff fc17 	bl	8002f20 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d918      	bls.n	800372e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b01      	cmp	r3, #1
 8003708:	d011      	beq.n	800372e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	f043 0210 	orr.w	r2, r3, #16
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	f043 0201 	orr.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e007      	b.n	800373e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d1d8      	bne.n	80036ee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	200000c8 	.word	0x200000c8
 800374c:	431bde83 	.word	0x431bde83

08003750 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d12e      	bne.n	80037c8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0201 	bic.w	r2, r2, #1
 8003778:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800377a:	f7ff fbd1 	bl	8002f20 <HAL_GetTick>
 800377e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003780:	e01b      	b.n	80037ba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003782:	f7ff fbcd 	bl	8002f20 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d914      	bls.n	80037ba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b01      	cmp	r3, #1
 800379c:	d10d      	bne.n	80037ba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	f043 0210 	orr.w	r2, r3, #16
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	f043 0201 	orr.w	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e007      	b.n	80037ca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d0dc      	beq.n	8003782 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037f0:	4013      	ands	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003806:	4a04      	ldr	r2, [pc, #16]	; (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	60d3      	str	r3, [r2, #12]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <__NVIC_GetPriorityGrouping+0x18>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f003 0307 	and.w	r3, r3, #7
}
 800382a:	4618      	mov	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	2b00      	cmp	r3, #0
 8003848:	db0b      	blt.n	8003862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	f003 021f 	and.w	r2, r3, #31
 8003850:	4906      	ldr	r1, [pc, #24]	; (800386c <__NVIC_EnableIRQ+0x34>)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	2001      	movs	r0, #1
 800385a:	fa00 f202 	lsl.w	r2, r0, r2
 800385e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	e000e100 	.word	0xe000e100

08003870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003880:	2b00      	cmp	r3, #0
 8003882:	db0a      	blt.n	800389a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	490c      	ldr	r1, [pc, #48]	; (80038bc <__NVIC_SetPriority+0x4c>)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	0112      	lsls	r2, r2, #4
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	440b      	add	r3, r1
 8003894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003898:	e00a      	b.n	80038b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4908      	ldr	r1, [pc, #32]	; (80038c0 <__NVIC_SetPriority+0x50>)
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	3b04      	subs	r3, #4
 80038a8:	0112      	lsls	r2, r2, #4
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	440b      	add	r3, r1
 80038ae:	761a      	strb	r2, [r3, #24]
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000e100 	.word	0xe000e100
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b089      	sub	sp, #36	; 0x24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f1c3 0307 	rsb	r3, r3, #7
 80038de:	2b04      	cmp	r3, #4
 80038e0:	bf28      	it	cs
 80038e2:	2304      	movcs	r3, #4
 80038e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d902      	bls.n	80038f4 <NVIC_EncodePriority+0x30>
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3b03      	subs	r3, #3
 80038f2:	e000      	b.n	80038f6 <NVIC_EncodePriority+0x32>
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43da      	mvns	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	401a      	ands	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800390c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	fa01 f303 	lsl.w	r3, r1, r3
 8003916:	43d9      	mvns	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	4313      	orrs	r3, r2
         );
}
 800391e:	4618      	mov	r0, r3
 8003920:	3724      	adds	r7, #36	; 0x24
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003938:	d301      	bcc.n	800393e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800393a:	2301      	movs	r3, #1
 800393c:	e00f      	b.n	800395e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800393e:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <SysTick_Config+0x40>)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3b01      	subs	r3, #1
 8003944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003946:	210f      	movs	r1, #15
 8003948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800394c:	f7ff ff90 	bl	8003870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <SysTick_Config+0x40>)
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003956:	4b04      	ldr	r3, [pc, #16]	; (8003968 <SysTick_Config+0x40>)
 8003958:	2207      	movs	r2, #7
 800395a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	e000e010 	.word	0xe000e010

0800396c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff2d 	bl	80037d4 <__NVIC_SetPriorityGrouping>
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003994:	f7ff ff42 	bl	800381c <__NVIC_GetPriorityGrouping>
 8003998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	6978      	ldr	r0, [r7, #20]
 80039a0:	f7ff ff90 	bl	80038c4 <NVIC_EncodePriority>
 80039a4:	4602      	mov	r2, r0
 80039a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff5f 	bl	8003870 <__NVIC_SetPriority>
}
 80039b2:	bf00      	nop
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff35 	bl	8003838 <__NVIC_EnableIRQ>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff ffa2 	bl	8003928 <SysTick_Config>
 80039e4:	4603      	mov	r3, r0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b08b      	sub	sp, #44	; 0x2c
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039fa:	2300      	movs	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039fe:	2300      	movs	r3, #0
 8003a00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a02:	e169      	b.n	8003cd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a04:	2201      	movs	r2, #1
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69fa      	ldr	r2, [r7, #28]
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	f040 8158 	bne.w	8003cd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4a9a      	ldr	r2, [pc, #616]	; (8003c90 <HAL_GPIO_Init+0x2a0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d05e      	beq.n	8003aea <HAL_GPIO_Init+0xfa>
 8003a2c:	4a98      	ldr	r2, [pc, #608]	; (8003c90 <HAL_GPIO_Init+0x2a0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d875      	bhi.n	8003b1e <HAL_GPIO_Init+0x12e>
 8003a32:	4a98      	ldr	r2, [pc, #608]	; (8003c94 <HAL_GPIO_Init+0x2a4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d058      	beq.n	8003aea <HAL_GPIO_Init+0xfa>
 8003a38:	4a96      	ldr	r2, [pc, #600]	; (8003c94 <HAL_GPIO_Init+0x2a4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d86f      	bhi.n	8003b1e <HAL_GPIO_Init+0x12e>
 8003a3e:	4a96      	ldr	r2, [pc, #600]	; (8003c98 <HAL_GPIO_Init+0x2a8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d052      	beq.n	8003aea <HAL_GPIO_Init+0xfa>
 8003a44:	4a94      	ldr	r2, [pc, #592]	; (8003c98 <HAL_GPIO_Init+0x2a8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d869      	bhi.n	8003b1e <HAL_GPIO_Init+0x12e>
 8003a4a:	4a94      	ldr	r2, [pc, #592]	; (8003c9c <HAL_GPIO_Init+0x2ac>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d04c      	beq.n	8003aea <HAL_GPIO_Init+0xfa>
 8003a50:	4a92      	ldr	r2, [pc, #584]	; (8003c9c <HAL_GPIO_Init+0x2ac>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d863      	bhi.n	8003b1e <HAL_GPIO_Init+0x12e>
 8003a56:	4a92      	ldr	r2, [pc, #584]	; (8003ca0 <HAL_GPIO_Init+0x2b0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d046      	beq.n	8003aea <HAL_GPIO_Init+0xfa>
 8003a5c:	4a90      	ldr	r2, [pc, #576]	; (8003ca0 <HAL_GPIO_Init+0x2b0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d85d      	bhi.n	8003b1e <HAL_GPIO_Init+0x12e>
 8003a62:	2b12      	cmp	r3, #18
 8003a64:	d82a      	bhi.n	8003abc <HAL_GPIO_Init+0xcc>
 8003a66:	2b12      	cmp	r3, #18
 8003a68:	d859      	bhi.n	8003b1e <HAL_GPIO_Init+0x12e>
 8003a6a:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <HAL_GPIO_Init+0x80>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003aeb 	.word	0x08003aeb
 8003a74:	08003ac5 	.word	0x08003ac5
 8003a78:	08003ad7 	.word	0x08003ad7
 8003a7c:	08003b19 	.word	0x08003b19
 8003a80:	08003b1f 	.word	0x08003b1f
 8003a84:	08003b1f 	.word	0x08003b1f
 8003a88:	08003b1f 	.word	0x08003b1f
 8003a8c:	08003b1f 	.word	0x08003b1f
 8003a90:	08003b1f 	.word	0x08003b1f
 8003a94:	08003b1f 	.word	0x08003b1f
 8003a98:	08003b1f 	.word	0x08003b1f
 8003a9c:	08003b1f 	.word	0x08003b1f
 8003aa0:	08003b1f 	.word	0x08003b1f
 8003aa4:	08003b1f 	.word	0x08003b1f
 8003aa8:	08003b1f 	.word	0x08003b1f
 8003aac:	08003b1f 	.word	0x08003b1f
 8003ab0:	08003b1f 	.word	0x08003b1f
 8003ab4:	08003acd 	.word	0x08003acd
 8003ab8:	08003ae1 	.word	0x08003ae1
 8003abc:	4a79      	ldr	r2, [pc, #484]	; (8003ca4 <HAL_GPIO_Init+0x2b4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ac2:	e02c      	b.n	8003b1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	623b      	str	r3, [r7, #32]
          break;
 8003aca:	e029      	b.n	8003b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	623b      	str	r3, [r7, #32]
          break;
 8003ad4:	e024      	b.n	8003b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	3308      	adds	r3, #8
 8003adc:	623b      	str	r3, [r7, #32]
          break;
 8003ade:	e01f      	b.n	8003b20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	330c      	adds	r3, #12
 8003ae6:	623b      	str	r3, [r7, #32]
          break;
 8003ae8:	e01a      	b.n	8003b20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003af2:	2304      	movs	r3, #4
 8003af4:	623b      	str	r3, [r7, #32]
          break;
 8003af6:	e013      	b.n	8003b20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d105      	bne.n	8003b0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b00:	2308      	movs	r3, #8
 8003b02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	611a      	str	r2, [r3, #16]
          break;
 8003b0a:	e009      	b.n	8003b20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	615a      	str	r2, [r3, #20]
          break;
 8003b16:	e003      	b.n	8003b20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	623b      	str	r3, [r7, #32]
          break;
 8003b1c:	e000      	b.n	8003b20 <HAL_GPIO_Init+0x130>
          break;
 8003b1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2bff      	cmp	r3, #255	; 0xff
 8003b24:	d801      	bhi.n	8003b2a <HAL_GPIO_Init+0x13a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	e001      	b.n	8003b2e <HAL_GPIO_Init+0x13e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2bff      	cmp	r3, #255	; 0xff
 8003b34:	d802      	bhi.n	8003b3c <HAL_GPIO_Init+0x14c>
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	e002      	b.n	8003b42 <HAL_GPIO_Init+0x152>
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	3b08      	subs	r3, #8
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	210f      	movs	r1, #15
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	401a      	ands	r2, r3
 8003b54:	6a39      	ldr	r1, [r7, #32]
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80b1 	beq.w	8003cd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b70:	4b4d      	ldr	r3, [pc, #308]	; (8003ca8 <HAL_GPIO_Init+0x2b8>)
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	4a4c      	ldr	r2, [pc, #304]	; (8003ca8 <HAL_GPIO_Init+0x2b8>)
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	6193      	str	r3, [r2, #24]
 8003b7c:	4b4a      	ldr	r3, [pc, #296]	; (8003ca8 <HAL_GPIO_Init+0x2b8>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b88:	4a48      	ldr	r2, [pc, #288]	; (8003cac <HAL_GPIO_Init+0x2bc>)
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	089b      	lsrs	r3, r3, #2
 8003b8e:	3302      	adds	r3, #2
 8003b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	220f      	movs	r2, #15
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a40      	ldr	r2, [pc, #256]	; (8003cb0 <HAL_GPIO_Init+0x2c0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d013      	beq.n	8003bdc <HAL_GPIO_Init+0x1ec>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a3f      	ldr	r2, [pc, #252]	; (8003cb4 <HAL_GPIO_Init+0x2c4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00d      	beq.n	8003bd8 <HAL_GPIO_Init+0x1e8>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a3e      	ldr	r2, [pc, #248]	; (8003cb8 <HAL_GPIO_Init+0x2c8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d007      	beq.n	8003bd4 <HAL_GPIO_Init+0x1e4>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a3d      	ldr	r2, [pc, #244]	; (8003cbc <HAL_GPIO_Init+0x2cc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_GPIO_Init+0x1e0>
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e006      	b.n	8003bde <HAL_GPIO_Init+0x1ee>
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	e004      	b.n	8003bde <HAL_GPIO_Init+0x1ee>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e002      	b.n	8003bde <HAL_GPIO_Init+0x1ee>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <HAL_GPIO_Init+0x1ee>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be0:	f002 0203 	and.w	r2, r2, #3
 8003be4:	0092      	lsls	r2, r2, #2
 8003be6:	4093      	lsls	r3, r2
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bee:	492f      	ldr	r1, [pc, #188]	; (8003cac <HAL_GPIO_Init+0x2bc>)
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	089b      	lsrs	r3, r3, #2
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d006      	beq.n	8003c16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c08:	4b2d      	ldr	r3, [pc, #180]	; (8003cc0 <HAL_GPIO_Init+0x2d0>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	492c      	ldr	r1, [pc, #176]	; (8003cc0 <HAL_GPIO_Init+0x2d0>)
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	600b      	str	r3, [r1, #0]
 8003c14:	e006      	b.n	8003c24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c16:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <HAL_GPIO_Init+0x2d0>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	4928      	ldr	r1, [pc, #160]	; (8003cc0 <HAL_GPIO_Init+0x2d0>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d006      	beq.n	8003c3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c30:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <HAL_GPIO_Init+0x2d0>)
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	4922      	ldr	r1, [pc, #136]	; (8003cc0 <HAL_GPIO_Init+0x2d0>)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]
 8003c3c:	e006      	b.n	8003c4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c3e:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <HAL_GPIO_Init+0x2d0>)
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	43db      	mvns	r3, r3
 8003c46:	491e      	ldr	r1, [pc, #120]	; (8003cc0 <HAL_GPIO_Init+0x2d0>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d006      	beq.n	8003c66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c58:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <HAL_GPIO_Init+0x2d0>)
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	4918      	ldr	r1, [pc, #96]	; (8003cc0 <HAL_GPIO_Init+0x2d0>)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	608b      	str	r3, [r1, #8]
 8003c64:	e006      	b.n	8003c74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c66:	4b16      	ldr	r3, [pc, #88]	; (8003cc0 <HAL_GPIO_Init+0x2d0>)
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	4914      	ldr	r1, [pc, #80]	; (8003cc0 <HAL_GPIO_Init+0x2d0>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d021      	beq.n	8003cc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <HAL_GPIO_Init+0x2d0>)
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	490e      	ldr	r1, [pc, #56]	; (8003cc0 <HAL_GPIO_Init+0x2d0>)
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60cb      	str	r3, [r1, #12]
 8003c8c:	e021      	b.n	8003cd2 <HAL_GPIO_Init+0x2e2>
 8003c8e:	bf00      	nop
 8003c90:	10320000 	.word	0x10320000
 8003c94:	10310000 	.word	0x10310000
 8003c98:	10220000 	.word	0x10220000
 8003c9c:	10210000 	.word	0x10210000
 8003ca0:	10120000 	.word	0x10120000
 8003ca4:	10110000 	.word	0x10110000
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	40010800 	.word	0x40010800
 8003cb4:	40010c00 	.word	0x40010c00
 8003cb8:	40011000 	.word	0x40011000
 8003cbc:	40011400 	.word	0x40011400
 8003cc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	4909      	ldr	r1, [pc, #36]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f47f ae8e 	bne.w	8003a04 <HAL_GPIO_Init+0x14>
  }
}
 8003ce8:	bf00      	nop
 8003cea:	bf00      	nop
 8003cec:	372c      	adds	r7, #44	; 0x2c
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr
 8003cf4:	40010400 	.word	0x40010400

08003cf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	887b      	ldrh	r3, [r7, #2]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
 8003d14:	e001      	b.n	8003d1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d16:	2300      	movs	r3, #0
 8003d18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr

08003d26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	807b      	strh	r3, [r7, #2]
 8003d32:	4613      	mov	r3, r2
 8003d34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d36:	787b      	ldrb	r3, [r7, #1]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d3c:	887a      	ldrh	r2, [r7, #2]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d42:	e003      	b.n	8003d4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d44:	887b      	ldrh	r3, [r7, #2]
 8003d46:	041a      	lsls	r2, r3, #16
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	611a      	str	r2, [r3, #16]
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr

08003d56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b085      	sub	sp, #20
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d68:	887a      	ldrh	r2, [r7, #2]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	041a      	lsls	r2, r3, #16
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	43d9      	mvns	r1, r3
 8003d74:	887b      	ldrh	r3, [r7, #2]
 8003d76:	400b      	ands	r3, r1
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	611a      	str	r2, [r3, #16]
}
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d92:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d006      	beq.n	8003dac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d9e:	4a05      	ldr	r2, [pc, #20]	; (8003db4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f806 	bl	8003db8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003dac:	bf00      	nop
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40010400 	.word	0x40010400

08003db8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr

08003dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e26c      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 8087 	beq.w	8003efa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dec:	4b92      	ldr	r3, [pc, #584]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 030c 	and.w	r3, r3, #12
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d00c      	beq.n	8003e12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003df8:	4b8f      	ldr	r3, [pc, #572]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 030c 	and.w	r3, r3, #12
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d112      	bne.n	8003e2a <HAL_RCC_OscConfig+0x5e>
 8003e04:	4b8c      	ldr	r3, [pc, #560]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e10:	d10b      	bne.n	8003e2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e12:	4b89      	ldr	r3, [pc, #548]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d06c      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x12c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d168      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e246      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e32:	d106      	bne.n	8003e42 <HAL_RCC_OscConfig+0x76>
 8003e34:	4b80      	ldr	r3, [pc, #512]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a7f      	ldr	r2, [pc, #508]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	e02e      	b.n	8003ea0 <HAL_RCC_OscConfig+0xd4>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10c      	bne.n	8003e64 <HAL_RCC_OscConfig+0x98>
 8003e4a:	4b7b      	ldr	r3, [pc, #492]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a7a      	ldr	r2, [pc, #488]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	4b78      	ldr	r3, [pc, #480]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a77      	ldr	r2, [pc, #476]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e01d      	b.n	8003ea0 <HAL_RCC_OscConfig+0xd4>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e6c:	d10c      	bne.n	8003e88 <HAL_RCC_OscConfig+0xbc>
 8003e6e:	4b72      	ldr	r3, [pc, #456]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a71      	ldr	r2, [pc, #452]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	4b6f      	ldr	r3, [pc, #444]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a6e      	ldr	r2, [pc, #440]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	e00b      	b.n	8003ea0 <HAL_RCC_OscConfig+0xd4>
 8003e88:	4b6b      	ldr	r3, [pc, #428]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a6a      	ldr	r2, [pc, #424]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	4b68      	ldr	r3, [pc, #416]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a67      	ldr	r2, [pc, #412]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d013      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7ff f83a 	bl	8002f20 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb0:	f7ff f836 	bl	8002f20 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	; 0x64
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e1fa      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec2:	4b5d      	ldr	r3, [pc, #372]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0xe4>
 8003ece:	e014      	b.n	8003efa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7ff f826 	bl	8002f20 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed8:	f7ff f822 	bl	8002f20 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b64      	cmp	r3, #100	; 0x64
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e1e6      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eea:	4b53      	ldr	r3, [pc, #332]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x10c>
 8003ef6:	e000      	b.n	8003efa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d063      	beq.n	8003fce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f06:	4b4c      	ldr	r3, [pc, #304]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f12:	4b49      	ldr	r3, [pc, #292]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d11c      	bne.n	8003f58 <HAL_RCC_OscConfig+0x18c>
 8003f1e:	4b46      	ldr	r3, [pc, #280]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d116      	bne.n	8003f58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2a:	4b43      	ldr	r3, [pc, #268]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <HAL_RCC_OscConfig+0x176>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d001      	beq.n	8003f42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e1ba      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f42:	4b3d      	ldr	r3, [pc, #244]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4939      	ldr	r1, [pc, #228]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f56:	e03a      	b.n	8003fce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d020      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f60:	4b36      	ldr	r3, [pc, #216]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f66:	f7fe ffdb 	bl	8002f20 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f6e:	f7fe ffd7 	bl	8002f20 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e19b      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f80:	4b2d      	ldr	r3, [pc, #180]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0f0      	beq.n	8003f6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8c:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4927      	ldr	r1, [pc, #156]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	600b      	str	r3, [r1, #0]
 8003fa0:	e015      	b.n	8003fce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fa2:	4b26      	ldr	r3, [pc, #152]	; (800403c <HAL_RCC_OscConfig+0x270>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fe ffba 	bl	8002f20 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fb0:	f7fe ffb6 	bl	8002f20 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e17a      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d03a      	beq.n	8004050 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d019      	beq.n	8004016 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fe2:	4b17      	ldr	r3, [pc, #92]	; (8004040 <HAL_RCC_OscConfig+0x274>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe8:	f7fe ff9a 	bl	8002f20 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff0:	f7fe ff96 	bl	8002f20 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e15a      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004002:	4b0d      	ldr	r3, [pc, #52]	; (8004038 <HAL_RCC_OscConfig+0x26c>)
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800400e:	2001      	movs	r0, #1
 8004010:	f000 fad8 	bl	80045c4 <RCC_Delay>
 8004014:	e01c      	b.n	8004050 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004016:	4b0a      	ldr	r3, [pc, #40]	; (8004040 <HAL_RCC_OscConfig+0x274>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401c:	f7fe ff80 	bl	8002f20 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004022:	e00f      	b.n	8004044 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004024:	f7fe ff7c 	bl	8002f20 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d908      	bls.n	8004044 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e140      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000
 800403c:	42420000 	.word	0x42420000
 8004040:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004044:	4b9e      	ldr	r3, [pc, #632]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e9      	bne.n	8004024 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80a6 	beq.w	80041aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800405e:	2300      	movs	r3, #0
 8004060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004062:	4b97      	ldr	r3, [pc, #604]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10d      	bne.n	800408a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800406e:	4b94      	ldr	r3, [pc, #592]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	4a93      	ldr	r2, [pc, #588]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 8004074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004078:	61d3      	str	r3, [r2, #28]
 800407a:	4b91      	ldr	r3, [pc, #580]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004086:	2301      	movs	r3, #1
 8004088:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408a:	4b8e      	ldr	r3, [pc, #568]	; (80042c4 <HAL_RCC_OscConfig+0x4f8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d118      	bne.n	80040c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004096:	4b8b      	ldr	r3, [pc, #556]	; (80042c4 <HAL_RCC_OscConfig+0x4f8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a8a      	ldr	r2, [pc, #552]	; (80042c4 <HAL_RCC_OscConfig+0x4f8>)
 800409c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a2:	f7fe ff3d 	bl	8002f20 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040aa:	f7fe ff39 	bl	8002f20 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b64      	cmp	r3, #100	; 0x64
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e0fd      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040bc:	4b81      	ldr	r3, [pc, #516]	; (80042c4 <HAL_RCC_OscConfig+0x4f8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d106      	bne.n	80040de <HAL_RCC_OscConfig+0x312>
 80040d0:	4b7b      	ldr	r3, [pc, #492]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	4a7a      	ldr	r2, [pc, #488]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	6213      	str	r3, [r2, #32]
 80040dc:	e02d      	b.n	800413a <HAL_RCC_OscConfig+0x36e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10c      	bne.n	8004100 <HAL_RCC_OscConfig+0x334>
 80040e6:	4b76      	ldr	r3, [pc, #472]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	4a75      	ldr	r2, [pc, #468]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	6213      	str	r3, [r2, #32]
 80040f2:	4b73      	ldr	r3, [pc, #460]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	4a72      	ldr	r2, [pc, #456]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 80040f8:	f023 0304 	bic.w	r3, r3, #4
 80040fc:	6213      	str	r3, [r2, #32]
 80040fe:	e01c      	b.n	800413a <HAL_RCC_OscConfig+0x36e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	2b05      	cmp	r3, #5
 8004106:	d10c      	bne.n	8004122 <HAL_RCC_OscConfig+0x356>
 8004108:	4b6d      	ldr	r3, [pc, #436]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	4a6c      	ldr	r2, [pc, #432]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 800410e:	f043 0304 	orr.w	r3, r3, #4
 8004112:	6213      	str	r3, [r2, #32]
 8004114:	4b6a      	ldr	r3, [pc, #424]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	4a69      	ldr	r2, [pc, #420]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	6213      	str	r3, [r2, #32]
 8004120:	e00b      	b.n	800413a <HAL_RCC_OscConfig+0x36e>
 8004122:	4b67      	ldr	r3, [pc, #412]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	4a66      	ldr	r2, [pc, #408]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	6213      	str	r3, [r2, #32]
 800412e:	4b64      	ldr	r3, [pc, #400]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	4a63      	ldr	r2, [pc, #396]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 8004134:	f023 0304 	bic.w	r3, r3, #4
 8004138:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d015      	beq.n	800416e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004142:	f7fe feed 	bl	8002f20 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004148:	e00a      	b.n	8004160 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414a:	f7fe fee9 	bl	8002f20 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	f241 3288 	movw	r2, #5000	; 0x1388
 8004158:	4293      	cmp	r3, r2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e0ab      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004160:	4b57      	ldr	r3, [pc, #348]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0ee      	beq.n	800414a <HAL_RCC_OscConfig+0x37e>
 800416c:	e014      	b.n	8004198 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800416e:	f7fe fed7 	bl	8002f20 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004174:	e00a      	b.n	800418c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004176:	f7fe fed3 	bl	8002f20 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	f241 3288 	movw	r2, #5000	; 0x1388
 8004184:	4293      	cmp	r3, r2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e095      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418c:	4b4c      	ldr	r3, [pc, #304]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1ee      	bne.n	8004176 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004198:	7dfb      	ldrb	r3, [r7, #23]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d105      	bne.n	80041aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800419e:	4b48      	ldr	r3, [pc, #288]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	4a47      	ldr	r2, [pc, #284]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 80041a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 8081 	beq.w	80042b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041b4:	4b42      	ldr	r3, [pc, #264]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f003 030c 	and.w	r3, r3, #12
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d061      	beq.n	8004284 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d146      	bne.n	8004256 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c8:	4b3f      	ldr	r3, [pc, #252]	; (80042c8 <HAL_RCC_OscConfig+0x4fc>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ce:	f7fe fea7 	bl	8002f20 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d6:	f7fe fea3 	bl	8002f20 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e067      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e8:	4b35      	ldr	r3, [pc, #212]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f0      	bne.n	80041d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fc:	d108      	bne.n	8004210 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041fe:	4b30      	ldr	r3, [pc, #192]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	492d      	ldr	r1, [pc, #180]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 800420c:	4313      	orrs	r3, r2
 800420e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004210:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a19      	ldr	r1, [r3, #32]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	430b      	orrs	r3, r1
 8004222:	4927      	ldr	r1, [pc, #156]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 8004224:	4313      	orrs	r3, r2
 8004226:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004228:	4b27      	ldr	r3, [pc, #156]	; (80042c8 <HAL_RCC_OscConfig+0x4fc>)
 800422a:	2201      	movs	r2, #1
 800422c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422e:	f7fe fe77 	bl	8002f20 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004236:	f7fe fe73 	bl	8002f20 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e037      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004248:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x46a>
 8004254:	e02f      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004256:	4b1c      	ldr	r3, [pc, #112]	; (80042c8 <HAL_RCC_OscConfig+0x4fc>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425c:	f7fe fe60 	bl	8002f20 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004264:	f7fe fe5c 	bl	8002f20 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e020      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004276:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x498>
 8004282:	e018      	b.n	80042b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e013      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_RCC_OscConfig+0x4f4>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d106      	bne.n	80042b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d001      	beq.n	80042b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40021000 	.word	0x40021000
 80042c4:	40007000 	.word	0x40007000
 80042c8:	42420060 	.word	0x42420060

080042cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0d0      	b.n	8004482 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042e0:	4b6a      	ldr	r3, [pc, #424]	; (800448c <HAL_RCC_ClockConfig+0x1c0>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d910      	bls.n	8004310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b67      	ldr	r3, [pc, #412]	; (800448c <HAL_RCC_ClockConfig+0x1c0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 0207 	bic.w	r2, r3, #7
 80042f6:	4965      	ldr	r1, [pc, #404]	; (800448c <HAL_RCC_ClockConfig+0x1c0>)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fe:	4b63      	ldr	r3, [pc, #396]	; (800448c <HAL_RCC_ClockConfig+0x1c0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0b8      	b.n	8004482 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d020      	beq.n	800435e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004328:	4b59      	ldr	r3, [pc, #356]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	4a58      	ldr	r2, [pc, #352]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 800432e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004332:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d005      	beq.n	800434c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004340:	4b53      	ldr	r3, [pc, #332]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	4a52      	ldr	r2, [pc, #328]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 8004346:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800434a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434c:	4b50      	ldr	r3, [pc, #320]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	494d      	ldr	r1, [pc, #308]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 800435a:	4313      	orrs	r3, r2
 800435c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d040      	beq.n	80043ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d107      	bne.n	8004382 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004372:	4b47      	ldr	r3, [pc, #284]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d115      	bne.n	80043aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e07f      	b.n	8004482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d107      	bne.n	800439a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438a:	4b41      	ldr	r3, [pc, #260]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e073      	b.n	8004482 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439a:	4b3d      	ldr	r3, [pc, #244]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e06b      	b.n	8004482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043aa:	4b39      	ldr	r3, [pc, #228]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f023 0203 	bic.w	r2, r3, #3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4936      	ldr	r1, [pc, #216]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043bc:	f7fe fdb0 	bl	8002f20 <HAL_GetTick>
 80043c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c2:	e00a      	b.n	80043da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c4:	f7fe fdac 	bl	8002f20 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e053      	b.n	8004482 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043da:	4b2d      	ldr	r3, [pc, #180]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 020c 	and.w	r2, r3, #12
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d1eb      	bne.n	80043c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043ec:	4b27      	ldr	r3, [pc, #156]	; (800448c <HAL_RCC_ClockConfig+0x1c0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d210      	bcs.n	800441c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <HAL_RCC_ClockConfig+0x1c0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 0207 	bic.w	r2, r3, #7
 8004402:	4922      	ldr	r1, [pc, #136]	; (800448c <HAL_RCC_ClockConfig+0x1c0>)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	4313      	orrs	r3, r2
 8004408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800440a:	4b20      	ldr	r3, [pc, #128]	; (800448c <HAL_RCC_ClockConfig+0x1c0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d001      	beq.n	800441c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e032      	b.n	8004482 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004428:	4b19      	ldr	r3, [pc, #100]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4916      	ldr	r1, [pc, #88]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	490e      	ldr	r1, [pc, #56]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 8004456:	4313      	orrs	r3, r2
 8004458:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800445a:	f000 f821 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 800445e:	4602      	mov	r2, r0
 8004460:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	490a      	ldr	r1, [pc, #40]	; (8004494 <HAL_RCC_ClockConfig+0x1c8>)
 800446c:	5ccb      	ldrb	r3, [r1, r3]
 800446e:	fa22 f303 	lsr.w	r3, r2, r3
 8004472:	4a09      	ldr	r2, [pc, #36]	; (8004498 <HAL_RCC_ClockConfig+0x1cc>)
 8004474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004476:	4b09      	ldr	r3, [pc, #36]	; (800449c <HAL_RCC_ClockConfig+0x1d0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe fd0e 	bl	8002e9c <HAL_InitTick>

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40022000 	.word	0x40022000
 8004490:	40021000 	.word	0x40021000
 8004494:	08008b20 	.word	0x08008b20
 8004498:	200000c8 	.word	0x200000c8
 800449c:	200000cc 	.word	0x200000cc

080044a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a0:	b490      	push	{r4, r7}
 80044a2:	b08a      	sub	sp, #40	; 0x28
 80044a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80044a6:	4b2a      	ldr	r3, [pc, #168]	; (8004550 <HAL_RCC_GetSysClockFreq+0xb0>)
 80044a8:	1d3c      	adds	r4, r7, #4
 80044aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80044b0:	f240 2301 	movw	r3, #513	; 0x201
 80044b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
 80044ba:	2300      	movs	r3, #0
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	2300      	movs	r3, #0
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044ca:	4b22      	ldr	r3, [pc, #136]	; (8004554 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d002      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0x40>
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d003      	beq.n	80044e6 <HAL_RCC_GetSysClockFreq+0x46>
 80044de:	e02d      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044e0:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044e2:	623b      	str	r3, [r7, #32]
      break;
 80044e4:	e02d      	b.n	8004542 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	0c9b      	lsrs	r3, r3, #18
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044f2:	4413      	add	r3, r2
 80044f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d013      	beq.n	800452c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004504:	4b13      	ldr	r3, [pc, #76]	; (8004554 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	0c5b      	lsrs	r3, r3, #17
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004512:	4413      	add	r3, r2
 8004514:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004518:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	4a0e      	ldr	r2, [pc, #56]	; (8004558 <HAL_RCC_GetSysClockFreq+0xb8>)
 800451e:	fb02 f203 	mul.w	r2, r2, r3
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	fbb2 f3f3 	udiv	r3, r2, r3
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
 800452a:	e004      	b.n	8004536 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	4a0b      	ldr	r2, [pc, #44]	; (800455c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004530:	fb02 f303 	mul.w	r3, r2, r3
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	623b      	str	r3, [r7, #32]
      break;
 800453a:	e002      	b.n	8004542 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_RCC_GetSysClockFreq+0xb8>)
 800453e:	623b      	str	r3, [r7, #32]
      break;
 8004540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004542:	6a3b      	ldr	r3, [r7, #32]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3728      	adds	r7, #40	; 0x28
 8004548:	46bd      	mov	sp, r7
 800454a:	bc90      	pop	{r4, r7}
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	08008b00 	.word	0x08008b00
 8004554:	40021000 	.word	0x40021000
 8004558:	007a1200 	.word	0x007a1200
 800455c:	003d0900 	.word	0x003d0900

08004560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004564:	4b02      	ldr	r3, [pc, #8]	; (8004570 <HAL_RCC_GetHCLKFreq+0x10>)
 8004566:	681b      	ldr	r3, [r3, #0]
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr
 8004570:	200000c8 	.word	0x200000c8

08004574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004578:	f7ff fff2 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 800457c:	4602      	mov	r2, r0
 800457e:	4b05      	ldr	r3, [pc, #20]	; (8004594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	0a1b      	lsrs	r3, r3, #8
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	4903      	ldr	r1, [pc, #12]	; (8004598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800458a:	5ccb      	ldrb	r3, [r1, r3]
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004590:	4618      	mov	r0, r3
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40021000 	.word	0x40021000
 8004598:	08008b30 	.word	0x08008b30

0800459c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045a0:	f7ff ffde 	bl	8004560 <HAL_RCC_GetHCLKFreq>
 80045a4:	4602      	mov	r2, r0
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	0adb      	lsrs	r3, r3, #11
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	4903      	ldr	r1, [pc, #12]	; (80045c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b2:	5ccb      	ldrb	r3, [r1, r3]
 80045b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40021000 	.word	0x40021000
 80045c0:	08008b30 	.word	0x08008b30

080045c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045cc:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <RCC_Delay+0x34>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <RCC_Delay+0x38>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	0a5b      	lsrs	r3, r3, #9
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	fb02 f303 	mul.w	r3, r2, r3
 80045de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045e0:	bf00      	nop
  }
  while (Delay --);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	1e5a      	subs	r2, r3, #1
 80045e6:	60fa      	str	r2, [r7, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f9      	bne.n	80045e0 <RCC_Delay+0x1c>
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	200000c8 	.word	0x200000c8
 80045fc:	10624dd3 	.word	0x10624dd3

08004600 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d07d      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800461c:	2300      	movs	r3, #0
 800461e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004620:	4b4f      	ldr	r3, [pc, #316]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10d      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800462c:	4b4c      	ldr	r3, [pc, #304]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	4a4b      	ldr	r2, [pc, #300]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004636:	61d3      	str	r3, [r2, #28]
 8004638:	4b49      	ldr	r3, [pc, #292]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004640:	60bb      	str	r3, [r7, #8]
 8004642:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004644:	2301      	movs	r3, #1
 8004646:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004648:	4b46      	ldr	r3, [pc, #280]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004650:	2b00      	cmp	r3, #0
 8004652:	d118      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004654:	4b43      	ldr	r3, [pc, #268]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a42      	ldr	r2, [pc, #264]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800465a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004660:	f7fe fc5e 	bl	8002f20 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004666:	e008      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004668:	f7fe fc5a 	bl	8002f20 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b64      	cmp	r3, #100	; 0x64
 8004674:	d901      	bls.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e06d      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467a:	4b3a      	ldr	r3, [pc, #232]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0f0      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004686:	4b36      	ldr	r3, [pc, #216]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d02e      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d027      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046a4:	4b2e      	ldr	r3, [pc, #184]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ae:	4b2e      	ldr	r3, [pc, #184]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046b0:	2201      	movs	r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046b4:	4b2c      	ldr	r3, [pc, #176]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046ba:	4a29      	ldr	r2, [pc, #164]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d014      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fe fc29 	bl	8002f20 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d0:	e00a      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d2:	f7fe fc25 	bl	8002f20 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e036      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e8:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ee      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046f4:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4917      	ldr	r1, [pc, #92]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004702:	4313      	orrs	r3, r2
 8004704:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004706:	7dfb      	ldrb	r3, [r7, #23]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d105      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800470c:	4b14      	ldr	r3, [pc, #80]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	4a13      	ldr	r2, [pc, #76]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004716:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004724:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	490b      	ldr	r1, [pc, #44]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004732:	4313      	orrs	r3, r2
 8004734:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	4904      	ldr	r1, [pc, #16]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000
 8004764:	40007000 	.word	0x40007000
 8004768:	42420440 	.word	0x42420440

0800476c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800476c:	b590      	push	{r4, r7, lr}
 800476e:	b08d      	sub	sp, #52	; 0x34
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004774:	4b5a      	ldr	r3, [pc, #360]	; (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004776:	f107 040c 	add.w	r4, r7, #12
 800477a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800477c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004780:	f240 2301 	movw	r3, #513	; 0x201
 8004784:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
 800478a:	2300      	movs	r3, #0
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800478e:	2300      	movs	r3, #0
 8004790:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	61fb      	str	r3, [r7, #28]
 8004796:	2300      	movs	r3, #0
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b10      	cmp	r3, #16
 800479e:	d00a      	beq.n	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	f200 8091 	bhi.w	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d04c      	beq.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d07c      	beq.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80047b4:	e089      	b.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80047b6:	4b4b      	ldr	r3, [pc, #300]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80047bc:	4b49      	ldr	r3, [pc, #292]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8082 	beq.w	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	0c9b      	lsrs	r3, r3, #18
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80047d6:	4413      	add	r3, r2
 80047d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80047dc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d018      	beq.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047e8:	4b3e      	ldr	r3, [pc, #248]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	0c5b      	lsrs	r3, r3, #17
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80047f6:	4413      	add	r3, r2
 80047f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00d      	beq.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004808:	4a37      	ldr	r2, [pc, #220]	; (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004818:	e004      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	4a33      	ldr	r2, [pc, #204]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004824:	4b2f      	ldr	r3, [pc, #188]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800482c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004830:	d102      	bne.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004836:	e04a      	b.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4a2c      	ldr	r2, [pc, #176]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004846:	e042      	b.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004848:	4b26      	ldr	r3, [pc, #152]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004858:	d108      	bne.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
 800486a:	e01f      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004876:	d109      	bne.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004878:	4b1a      	ldr	r3, [pc, #104]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8004884:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004888:	62bb      	str	r3, [r7, #40]	; 0x28
 800488a:	e00f      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004896:	d11c      	bne.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004898:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d016      	beq.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80048a4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80048a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80048aa:	e012      	b.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80048ac:	e011      	b.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80048ae:	f7ff fe75 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 80048b2:	4602      	mov	r2, r0
 80048b4:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	0b9b      	lsrs	r3, r3, #14
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	3301      	adds	r3, #1
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80048c8:	e004      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80048ca:	bf00      	nop
 80048cc:	e002      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80048ce:	bf00      	nop
 80048d0:	e000      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80048d2:	bf00      	nop
    }
  }
  return (frequency);
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3734      	adds	r7, #52	; 0x34
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd90      	pop	{r4, r7, pc}
 80048de:	bf00      	nop
 80048e0:	08008b10 	.word	0x08008b10
 80048e4:	40021000 	.word	0x40021000
 80048e8:	007a1200 	.word	0x007a1200
 80048ec:	003d0900 	.word	0x003d0900
 80048f0:	aaaaaaab 	.word	0xaaaaaaab

080048f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e041      	b.n	800498a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fd ff88 	bl	8002830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f000 fbd0 	bl	80050d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d001      	beq.n	80049ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e032      	b.n	8004a12 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a18      	ldr	r2, [pc, #96]	; (8004a1c <HAL_TIM_Base_Start+0x88>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00e      	beq.n	80049dc <HAL_TIM_Base_Start+0x48>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c6:	d009      	beq.n	80049dc <HAL_TIM_Base_Start+0x48>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <HAL_TIM_Base_Start+0x8c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d004      	beq.n	80049dc <HAL_TIM_Base_Start+0x48>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a13      	ldr	r2, [pc, #76]	; (8004a24 <HAL_TIM_Base_Start+0x90>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d111      	bne.n	8004a00 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b06      	cmp	r3, #6
 80049ec:	d010      	beq.n	8004a10 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f042 0201 	orr.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fe:	e007      	b.n	8004a10 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40000800 	.word	0x40000800

08004a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d001      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e03a      	b.n	8004ab6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a18      	ldr	r2, [pc, #96]	; (8004ac0 <HAL_TIM_Base_Start_IT+0x98>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00e      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x58>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6a:	d009      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x58>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a14      	ldr	r2, [pc, #80]	; (8004ac4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <HAL_TIM_Base_Start_IT+0x58>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d111      	bne.n	8004aa4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b06      	cmp	r3, #6
 8004a90:	d010      	beq.n	8004ab4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa2:	e007      	b.n	8004ab4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40000400 	.word	0x40000400
 8004ac8:	40000800 	.word	0x40000800

08004acc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e041      	b.n	8004b62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f839 	bl	8004b6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f000 fae4 	bl	80050d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bc80      	pop	{r7}
 8004b7a:	4770      	bx	lr

08004b7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d122      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d11b      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0202 	mvn.w	r2, #2
 8004ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fa6f 	bl	80050a2 <HAL_TIM_IC_CaptureCallback>
 8004bc4:	e005      	b.n	8004bd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa62 	bl	8005090 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 fa71 	bl	80050b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d122      	bne.n	8004c2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d11b      	bne.n	8004c2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0204 	mvn.w	r2, #4
 8004bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2202      	movs	r2, #2
 8004c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fa45 	bl	80050a2 <HAL_TIM_IC_CaptureCallback>
 8004c18:	e005      	b.n	8004c26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fa38 	bl	8005090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fa47 	bl	80050b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d122      	bne.n	8004c80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d11b      	bne.n	8004c80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 0208 	mvn.w	r2, #8
 8004c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2204      	movs	r2, #4
 8004c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fa1b 	bl	80050a2 <HAL_TIM_IC_CaptureCallback>
 8004c6c:	e005      	b.n	8004c7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fa0e 	bl	8005090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fa1d 	bl	80050b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0310 	and.w	r3, r3, #16
 8004c8a:	2b10      	cmp	r3, #16
 8004c8c:	d122      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d11b      	bne.n	8004cd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0210 	mvn.w	r2, #16
 8004ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2208      	movs	r2, #8
 8004caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f9f1 	bl	80050a2 <HAL_TIM_IC_CaptureCallback>
 8004cc0:	e005      	b.n	8004cce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f9e4 	bl	8005090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f9f3 	bl	80050b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d10e      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d107      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0201 	mvn.w	r2, #1
 8004cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fd fc04 	bl	8002508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0a:	2b80      	cmp	r3, #128	; 0x80
 8004d0c:	d10e      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d18:	2b80      	cmp	r3, #128	; 0x80
 8004d1a:	d107      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fdac 	bl	8005884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d36:	2b40      	cmp	r3, #64	; 0x40
 8004d38:	d10e      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b40      	cmp	r3, #64	; 0x40
 8004d46:	d107      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f9b7 	bl	80050c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	d10e      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0320 	and.w	r3, r3, #32
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d107      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0220 	mvn.w	r2, #32
 8004d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fd77 	bl	8005872 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e0ac      	b.n	8004f00 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b0c      	cmp	r3, #12
 8004db2:	f200 809f 	bhi.w	8004ef4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004db6:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbc:	08004df1 	.word	0x08004df1
 8004dc0:	08004ef5 	.word	0x08004ef5
 8004dc4:	08004ef5 	.word	0x08004ef5
 8004dc8:	08004ef5 	.word	0x08004ef5
 8004dcc:	08004e31 	.word	0x08004e31
 8004dd0:	08004ef5 	.word	0x08004ef5
 8004dd4:	08004ef5 	.word	0x08004ef5
 8004dd8:	08004ef5 	.word	0x08004ef5
 8004ddc:	08004e73 	.word	0x08004e73
 8004de0:	08004ef5 	.word	0x08004ef5
 8004de4:	08004ef5 	.word	0x08004ef5
 8004de8:	08004ef5 	.word	0x08004ef5
 8004dec:	08004eb3 	.word	0x08004eb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 f9d0 	bl	800519c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0208 	orr.w	r2, r2, #8
 8004e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0204 	bic.w	r2, r2, #4
 8004e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6999      	ldr	r1, [r3, #24]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	619a      	str	r2, [r3, #24]
      break;
 8004e2e:	e062      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fa16 	bl	8005268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6999      	ldr	r1, [r3, #24]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	021a      	lsls	r2, r3, #8
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	619a      	str	r2, [r3, #24]
      break;
 8004e70:	e041      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fa5f 	bl	800533c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0208 	orr.w	r2, r2, #8
 8004e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0204 	bic.w	r2, r2, #4
 8004e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69d9      	ldr	r1, [r3, #28]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	61da      	str	r2, [r3, #28]
      break;
 8004eb0:	e021      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 faa9 	bl	8005410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69da      	ldr	r2, [r3, #28]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69d9      	ldr	r1, [r3, #28]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	021a      	lsls	r2, r3, #8
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	61da      	str	r2, [r3, #28]
      break;
 8004ef2:	e000      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004ef4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_TIM_ConfigClockSource+0x18>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	e0b3      	b.n	8005088 <HAL_TIM_ConfigClockSource+0x180>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f58:	d03e      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0xd0>
 8004f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f5e:	f200 8087 	bhi.w	8005070 <HAL_TIM_ConfigClockSource+0x168>
 8004f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f66:	f000 8085 	beq.w	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6e:	d87f      	bhi.n	8005070 <HAL_TIM_ConfigClockSource+0x168>
 8004f70:	2b70      	cmp	r3, #112	; 0x70
 8004f72:	d01a      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0xa2>
 8004f74:	2b70      	cmp	r3, #112	; 0x70
 8004f76:	d87b      	bhi.n	8005070 <HAL_TIM_ConfigClockSource+0x168>
 8004f78:	2b60      	cmp	r3, #96	; 0x60
 8004f7a:	d050      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x116>
 8004f7c:	2b60      	cmp	r3, #96	; 0x60
 8004f7e:	d877      	bhi.n	8005070 <HAL_TIM_ConfigClockSource+0x168>
 8004f80:	2b50      	cmp	r3, #80	; 0x50
 8004f82:	d03c      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0xf6>
 8004f84:	2b50      	cmp	r3, #80	; 0x50
 8004f86:	d873      	bhi.n	8005070 <HAL_TIM_ConfigClockSource+0x168>
 8004f88:	2b40      	cmp	r3, #64	; 0x40
 8004f8a:	d058      	beq.n	800503e <HAL_TIM_ConfigClockSource+0x136>
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d86f      	bhi.n	8005070 <HAL_TIM_ConfigClockSource+0x168>
 8004f90:	2b30      	cmp	r3, #48	; 0x30
 8004f92:	d064      	beq.n	800505e <HAL_TIM_ConfigClockSource+0x156>
 8004f94:	2b30      	cmp	r3, #48	; 0x30
 8004f96:	d86b      	bhi.n	8005070 <HAL_TIM_ConfigClockSource+0x168>
 8004f98:	2b20      	cmp	r3, #32
 8004f9a:	d060      	beq.n	800505e <HAL_TIM_ConfigClockSource+0x156>
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d867      	bhi.n	8005070 <HAL_TIM_ConfigClockSource+0x168>
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d05c      	beq.n	800505e <HAL_TIM_ConfigClockSource+0x156>
 8004fa4:	2b10      	cmp	r3, #16
 8004fa6:	d05a      	beq.n	800505e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004fa8:	e062      	b.n	8005070 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	6899      	ldr	r1, [r3, #8]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f000 faee 	bl	800559a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fcc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	609a      	str	r2, [r3, #8]
      break;
 8004fd6:	e04e      	b.n	8005076 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	6899      	ldr	r1, [r3, #8]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f000 fad7 	bl	800559a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ffa:	609a      	str	r2, [r3, #8]
      break;
 8004ffc:	e03b      	b.n	8005076 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6859      	ldr	r1, [r3, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	461a      	mov	r2, r3
 800500c:	f000 fa4e 	bl	80054ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2150      	movs	r1, #80	; 0x50
 8005016:	4618      	mov	r0, r3
 8005018:	f000 faa5 	bl	8005566 <TIM_ITRx_SetConfig>
      break;
 800501c:	e02b      	b.n	8005076 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6859      	ldr	r1, [r3, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	461a      	mov	r2, r3
 800502c:	f000 fa6c 	bl	8005508 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2160      	movs	r1, #96	; 0x60
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fa95 	bl	8005566 <TIM_ITRx_SetConfig>
      break;
 800503c:	e01b      	b.n	8005076 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	6859      	ldr	r1, [r3, #4]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	461a      	mov	r2, r3
 800504c:	f000 fa2e 	bl	80054ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2140      	movs	r1, #64	; 0x40
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fa85 	bl	8005566 <TIM_ITRx_SetConfig>
      break;
 800505c:	e00b      	b.n	8005076 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f000 fa7c 	bl	8005566 <TIM_ITRx_SetConfig>
        break;
 800506e:	e002      	b.n	8005076 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005070:	bf00      	nop
 8005072:	e000      	b.n	8005076 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005074:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bc80      	pop	{r7}
 80050b2:	4770      	bx	lr

080050b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr

080050c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr

080050d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a29      	ldr	r2, [pc, #164]	; (8005190 <TIM_Base_SetConfig+0xb8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d00b      	beq.n	8005108 <TIM_Base_SetConfig+0x30>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f6:	d007      	beq.n	8005108 <TIM_Base_SetConfig+0x30>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a26      	ldr	r2, [pc, #152]	; (8005194 <TIM_Base_SetConfig+0xbc>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_Base_SetConfig+0x30>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a25      	ldr	r2, [pc, #148]	; (8005198 <TIM_Base_SetConfig+0xc0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d108      	bne.n	800511a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a1c      	ldr	r2, [pc, #112]	; (8005190 <TIM_Base_SetConfig+0xb8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00b      	beq.n	800513a <TIM_Base_SetConfig+0x62>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005128:	d007      	beq.n	800513a <TIM_Base_SetConfig+0x62>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a19      	ldr	r2, [pc, #100]	; (8005194 <TIM_Base_SetConfig+0xbc>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d003      	beq.n	800513a <TIM_Base_SetConfig+0x62>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a18      	ldr	r2, [pc, #96]	; (8005198 <TIM_Base_SetConfig+0xc0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d108      	bne.n	800514c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a07      	ldr	r2, [pc, #28]	; (8005190 <TIM_Base_SetConfig+0xb8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d103      	bne.n	8005180 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	615a      	str	r2, [r3, #20]
}
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr
 8005190:	40012c00 	.word	0x40012c00
 8005194:	40000400 	.word	0x40000400
 8005198:	40000800 	.word	0x40000800

0800519c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0201 	bic.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0303 	bic.w	r3, r3, #3
 80051d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f023 0302 	bic.w	r3, r3, #2
 80051e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a1c      	ldr	r2, [pc, #112]	; (8005264 <TIM_OC1_SetConfig+0xc8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d10c      	bne.n	8005212 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f023 0308 	bic.w	r3, r3, #8
 80051fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f023 0304 	bic.w	r3, r3, #4
 8005210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a13      	ldr	r2, [pc, #76]	; (8005264 <TIM_OC1_SetConfig+0xc8>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d111      	bne.n	800523e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	621a      	str	r2, [r3, #32]
}
 8005258:	bf00      	nop
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40012c00 	.word	0x40012c00

08005268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f023 0210 	bic.w	r2, r3, #16
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800529e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f023 0320 	bic.w	r3, r3, #32
 80052b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a1d      	ldr	r2, [pc, #116]	; (8005338 <TIM_OC2_SetConfig+0xd0>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d10d      	bne.n	80052e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a14      	ldr	r2, [pc, #80]	; (8005338 <TIM_OC2_SetConfig+0xd0>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d113      	bne.n	8005314 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	621a      	str	r2, [r3, #32]
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr
 8005338:	40012c00 	.word	0x40012c00

0800533c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0303 	bic.w	r3, r3, #3
 8005372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a1d      	ldr	r2, [pc, #116]	; (800540c <TIM_OC3_SetConfig+0xd0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d10d      	bne.n	80053b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a14      	ldr	r2, [pc, #80]	; (800540c <TIM_OC3_SetConfig+0xd0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d113      	bne.n	80053e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	621a      	str	r2, [r3, #32]
}
 8005400:	bf00      	nop
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40012c00 	.word	0x40012c00

08005410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	021b      	lsls	r3, r3, #8
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800545a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	031b      	lsls	r3, r3, #12
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a0f      	ldr	r2, [pc, #60]	; (80054a8 <TIM_OC4_SetConfig+0x98>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d109      	bne.n	8005484 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005476:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	019b      	lsls	r3, r3, #6
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	621a      	str	r2, [r3, #32]
}
 800549e:	bf00      	nop
 80054a0:	371c      	adds	r7, #28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr
 80054a8:	40012c00 	.word	0x40012c00

080054ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f023 0201 	bic.w	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f023 030a 	bic.w	r3, r3, #10
 80054e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	f023 0210 	bic.w	r2, r3, #16
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005532:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	031b      	lsls	r3, r3, #12
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005544:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	621a      	str	r2, [r3, #32]
}
 800555c:	bf00      	nop
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr

08005566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	f043 0307 	orr.w	r3, r3, #7
 8005588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	609a      	str	r2, [r3, #8]
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr

0800559a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800559a:	b480      	push	{r7}
 800559c:	b087      	sub	sp, #28
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	021a      	lsls	r2, r3, #8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	431a      	orrs	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	609a      	str	r2, [r3, #8]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d109      	bne.n	80055fc <HAL_TIMEx_PWMN_Start+0x24>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	bf14      	ite	ne
 80055f4:	2301      	movne	r3, #1
 80055f6:	2300      	moveq	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	e022      	b.n	8005642 <HAL_TIMEx_PWMN_Start+0x6a>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d109      	bne.n	8005616 <HAL_TIMEx_PWMN_Start+0x3e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b01      	cmp	r3, #1
 800560c:	bf14      	ite	ne
 800560e:	2301      	movne	r3, #1
 8005610:	2300      	moveq	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	e015      	b.n	8005642 <HAL_TIMEx_PWMN_Start+0x6a>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b08      	cmp	r3, #8
 800561a:	d109      	bne.n	8005630 <HAL_TIMEx_PWMN_Start+0x58>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	bf14      	ite	ne
 8005628:	2301      	movne	r3, #1
 800562a:	2300      	moveq	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	e008      	b.n	8005642 <HAL_TIMEx_PWMN_Start+0x6a>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b01      	cmp	r3, #1
 800563a:	bf14      	ite	ne
 800563c:	2301      	movne	r3, #1
 800563e:	2300      	moveq	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e059      	b.n	80056fe <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d104      	bne.n	800565a <HAL_TIMEx_PWMN_Start+0x82>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005658:	e013      	b.n	8005682 <HAL_TIMEx_PWMN_Start+0xaa>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b04      	cmp	r3, #4
 800565e:	d104      	bne.n	800566a <HAL_TIMEx_PWMN_Start+0x92>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2202      	movs	r2, #2
 8005664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005668:	e00b      	b.n	8005682 <HAL_TIMEx_PWMN_Start+0xaa>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b08      	cmp	r3, #8
 800566e:	d104      	bne.n	800567a <HAL_TIMEx_PWMN_Start+0xa2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005678:	e003      	b.n	8005682 <HAL_TIMEx_PWMN_Start+0xaa>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2204      	movs	r2, #4
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f000 f903 	bl	8005896 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800569e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a18      	ldr	r2, [pc, #96]	; (8005708 <HAL_TIMEx_PWMN_Start+0x130>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00e      	beq.n	80056c8 <HAL_TIMEx_PWMN_Start+0xf0>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b2:	d009      	beq.n	80056c8 <HAL_TIMEx_PWMN_Start+0xf0>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a14      	ldr	r2, [pc, #80]	; (800570c <HAL_TIMEx_PWMN_Start+0x134>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d004      	beq.n	80056c8 <HAL_TIMEx_PWMN_Start+0xf0>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a13      	ldr	r2, [pc, #76]	; (8005710 <HAL_TIMEx_PWMN_Start+0x138>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d111      	bne.n	80056ec <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b06      	cmp	r3, #6
 80056d8:	d010      	beq.n	80056fc <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0201 	orr.w	r2, r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ea:	e007      	b.n	80056fc <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	40012c00 	.word	0x40012c00
 800570c:	40000400 	.word	0x40000400
 8005710:	40000800 	.word	0x40000800

08005714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005728:	2302      	movs	r3, #2
 800572a:	e046      	b.n	80057ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a16      	ldr	r2, [pc, #88]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00e      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005778:	d009      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a12      	ldr	r2, [pc, #72]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d004      	beq.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a10      	ldr	r2, [pc, #64]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d10c      	bne.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	4313      	orrs	r3, r2
 800579e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40000800 	.word	0x40000800

080057d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e03d      	b.n	8005868 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr

08005872 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	bc80      	pop	{r7}
 8005882:	4770      	bx	lr

08005884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	bc80      	pop	{r7}
 8005894:	4770      	bx	lr

08005896 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005896:	b480      	push	{r7}
 8005898:	b087      	sub	sp, #28
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f003 031f 	and.w	r3, r3, #31
 80058a8:	2204      	movs	r2, #4
 80058aa:	fa02 f303 	lsl.w	r3, r2, r3
 80058ae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a1a      	ldr	r2, [r3, #32]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	43db      	mvns	r3, r3
 80058b8:	401a      	ands	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6a1a      	ldr	r2, [r3, #32]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	f003 031f 	and.w	r3, r3, #31
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	fa01 f303 	lsl.w	r3, r1, r3
 80058ce:	431a      	orrs	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	621a      	str	r2, [r3, #32]
}
 80058d4:	bf00      	nop
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc80      	pop	{r7}
 80058dc:	4770      	bx	lr

080058de <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b082      	sub	sp, #8
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e03f      	b.n	8005970 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d106      	bne.n	800590a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7fd f827 	bl	8002958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2224      	movs	r2, #36	; 0x24
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68da      	ldr	r2, [r3, #12]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005920:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f904 	bl	8005b30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005936:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695a      	ldr	r2, [r3, #20]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005946:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005956:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b08a      	sub	sp, #40	; 0x28
 800597c:	af02      	add	r7, sp, #8
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	4613      	mov	r3, r2
 8005986:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005988:	2300      	movs	r3, #0
 800598a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b20      	cmp	r3, #32
 8005996:	d17c      	bne.n	8005a92 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <HAL_UART_Transmit+0x2c>
 800599e:	88fb      	ldrh	r3, [r7, #6]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e075      	b.n	8005a94 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_UART_Transmit+0x3e>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e06e      	b.n	8005a94 <HAL_UART_Transmit+0x11c>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2221      	movs	r2, #33	; 0x21
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059cc:	f7fd faa8 	bl	8002f20 <HAL_GetTick>
 80059d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	88fa      	ldrh	r2, [r7, #6]
 80059d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	88fa      	ldrh	r2, [r7, #6]
 80059dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e6:	d108      	bne.n	80059fa <HAL_UART_Transmit+0x82>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	61bb      	str	r3, [r7, #24]
 80059f8:	e003      	b.n	8005a02 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a0a:	e02a      	b.n	8005a62 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2200      	movs	r2, #0
 8005a14:	2180      	movs	r1, #128	; 0x80
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f840 	bl	8005a9c <UART_WaitOnFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e036      	b.n	8005a94 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10b      	bne.n	8005a44 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a3a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	3302      	adds	r3, #2
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	e007      	b.n	8005a54 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	781a      	ldrb	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	3301      	adds	r3, #1
 8005a52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1cf      	bne.n	8005a0c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2200      	movs	r2, #0
 8005a74:	2140      	movs	r1, #64	; 0x40
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f810 	bl	8005a9c <UART_WaitOnFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e006      	b.n	8005a94 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e000      	b.n	8005a94 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a92:	2302      	movs	r3, #2
  }
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3720      	adds	r7, #32
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aac:	e02c      	b.n	8005b08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab4:	d028      	beq.n	8005b08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d007      	beq.n	8005acc <UART_WaitOnFlagUntilTimeout+0x30>
 8005abc:	f7fd fa30 	bl	8002f20 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d21d      	bcs.n	8005b08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ada:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695a      	ldr	r2, [r3, #20]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0201 	bic.w	r2, r2, #1
 8005aea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e00f      	b.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	4013      	ands	r3, r2
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	bf0c      	ite	eq
 8005b18:	2301      	moveq	r3, #1
 8005b1a:	2300      	movne	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	461a      	mov	r2, r3
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d0c3      	beq.n	8005aae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b6a:	f023 030c 	bic.w	r3, r3, #12
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6812      	ldr	r2, [r2, #0]
 8005b72:	68b9      	ldr	r1, [r7, #8]
 8005b74:	430b      	orrs	r3, r1
 8005b76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a2c      	ldr	r2, [pc, #176]	; (8005c44 <UART_SetConfig+0x114>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d103      	bne.n	8005ba0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b98:	f7fe fd00 	bl	800459c <HAL_RCC_GetPCLK2Freq>
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	e002      	b.n	8005ba6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ba0:	f7fe fce8 	bl	8004574 <HAL_RCC_GetPCLK1Freq>
 8005ba4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	009a      	lsls	r2, r3, #2
 8005bb0:	441a      	add	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	4a22      	ldr	r2, [pc, #136]	; (8005c48 <UART_SetConfig+0x118>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	0119      	lsls	r1, r3, #4
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	009a      	lsls	r2, r3, #2
 8005bd0:	441a      	add	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bdc:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <UART_SetConfig+0x118>)
 8005bde:	fba3 0302 	umull	r0, r3, r3, r2
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	2064      	movs	r0, #100	; 0x64
 8005be6:	fb00 f303 	mul.w	r3, r0, r3
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	3332      	adds	r3, #50	; 0x32
 8005bf0:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <UART_SetConfig+0x118>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bfc:	4419      	add	r1, r3
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009a      	lsls	r2, r3, #2
 8005c08:	441a      	add	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c14:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <UART_SetConfig+0x118>)
 8005c16:	fba3 0302 	umull	r0, r3, r3, r2
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	2064      	movs	r0, #100	; 0x64
 8005c1e:	fb00 f303 	mul.w	r3, r0, r3
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	3332      	adds	r3, #50	; 0x32
 8005c28:	4a07      	ldr	r2, [pc, #28]	; (8005c48 <UART_SetConfig+0x118>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	f003 020f 	and.w	r2, r3, #15
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	440a      	add	r2, r1
 8005c3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c3c:	bf00      	nop
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40013800 	.word	0x40013800
 8005c48:	51eb851f 	.word	0x51eb851f

08005c4c <__errno>:
 8005c4c:	4b01      	ldr	r3, [pc, #4]	; (8005c54 <__errno+0x8>)
 8005c4e:	6818      	ldr	r0, [r3, #0]
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	200000d4 	.word	0x200000d4

08005c58 <__libc_init_array>:
 8005c58:	b570      	push	{r4, r5, r6, lr}
 8005c5a:	2600      	movs	r6, #0
 8005c5c:	4d0c      	ldr	r5, [pc, #48]	; (8005c90 <__libc_init_array+0x38>)
 8005c5e:	4c0d      	ldr	r4, [pc, #52]	; (8005c94 <__libc_init_array+0x3c>)
 8005c60:	1b64      	subs	r4, r4, r5
 8005c62:	10a4      	asrs	r4, r4, #2
 8005c64:	42a6      	cmp	r6, r4
 8005c66:	d109      	bne.n	8005c7c <__libc_init_array+0x24>
 8005c68:	f002 feda 	bl	8008a20 <_init>
 8005c6c:	2600      	movs	r6, #0
 8005c6e:	4d0a      	ldr	r5, [pc, #40]	; (8005c98 <__libc_init_array+0x40>)
 8005c70:	4c0a      	ldr	r4, [pc, #40]	; (8005c9c <__libc_init_array+0x44>)
 8005c72:	1b64      	subs	r4, r4, r5
 8005c74:	10a4      	asrs	r4, r4, #2
 8005c76:	42a6      	cmp	r6, r4
 8005c78:	d105      	bne.n	8005c86 <__libc_init_array+0x2e>
 8005c7a:	bd70      	pop	{r4, r5, r6, pc}
 8005c7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c80:	4798      	blx	r3
 8005c82:	3601      	adds	r6, #1
 8005c84:	e7ee      	b.n	8005c64 <__libc_init_array+0xc>
 8005c86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c8a:	4798      	blx	r3
 8005c8c:	3601      	adds	r6, #1
 8005c8e:	e7f2      	b.n	8005c76 <__libc_init_array+0x1e>
 8005c90:	08008f1c 	.word	0x08008f1c
 8005c94:	08008f1c 	.word	0x08008f1c
 8005c98:	08008f1c 	.word	0x08008f1c
 8005c9c:	08008f24 	.word	0x08008f24

08005ca0 <memcpy>:
 8005ca0:	440a      	add	r2, r1
 8005ca2:	4291      	cmp	r1, r2
 8005ca4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005ca8:	d100      	bne.n	8005cac <memcpy+0xc>
 8005caa:	4770      	bx	lr
 8005cac:	b510      	push	{r4, lr}
 8005cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cb2:	4291      	cmp	r1, r2
 8005cb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cb8:	d1f9      	bne.n	8005cae <memcpy+0xe>
 8005cba:	bd10      	pop	{r4, pc}

08005cbc <memset>:
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	4402      	add	r2, r0
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d100      	bne.n	8005cc6 <memset+0xa>
 8005cc4:	4770      	bx	lr
 8005cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cca:	e7f9      	b.n	8005cc0 <memset+0x4>

08005ccc <__cvt>:
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd2:	461f      	mov	r7, r3
 8005cd4:	bfbb      	ittet	lt
 8005cd6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005cda:	461f      	movlt	r7, r3
 8005cdc:	2300      	movge	r3, #0
 8005cde:	232d      	movlt	r3, #45	; 0x2d
 8005ce0:	b088      	sub	sp, #32
 8005ce2:	4614      	mov	r4, r2
 8005ce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ce6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005ce8:	7013      	strb	r3, [r2, #0]
 8005cea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005cec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005cf0:	f023 0820 	bic.w	r8, r3, #32
 8005cf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cf8:	d005      	beq.n	8005d06 <__cvt+0x3a>
 8005cfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005cfe:	d100      	bne.n	8005d02 <__cvt+0x36>
 8005d00:	3501      	adds	r5, #1
 8005d02:	2302      	movs	r3, #2
 8005d04:	e000      	b.n	8005d08 <__cvt+0x3c>
 8005d06:	2303      	movs	r3, #3
 8005d08:	aa07      	add	r2, sp, #28
 8005d0a:	9204      	str	r2, [sp, #16]
 8005d0c:	aa06      	add	r2, sp, #24
 8005d0e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005d12:	e9cd 3500 	strd	r3, r5, [sp]
 8005d16:	4622      	mov	r2, r4
 8005d18:	463b      	mov	r3, r7
 8005d1a:	f000 fd05 	bl	8006728 <_dtoa_r>
 8005d1e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d22:	4606      	mov	r6, r0
 8005d24:	d102      	bne.n	8005d2c <__cvt+0x60>
 8005d26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d28:	07db      	lsls	r3, r3, #31
 8005d2a:	d522      	bpl.n	8005d72 <__cvt+0xa6>
 8005d2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d30:	eb06 0905 	add.w	r9, r6, r5
 8005d34:	d110      	bne.n	8005d58 <__cvt+0x8c>
 8005d36:	7833      	ldrb	r3, [r6, #0]
 8005d38:	2b30      	cmp	r3, #48	; 0x30
 8005d3a:	d10a      	bne.n	8005d52 <__cvt+0x86>
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2300      	movs	r3, #0
 8005d40:	4620      	mov	r0, r4
 8005d42:	4639      	mov	r1, r7
 8005d44:	f7fa fe30 	bl	80009a8 <__aeabi_dcmpeq>
 8005d48:	b918      	cbnz	r0, 8005d52 <__cvt+0x86>
 8005d4a:	f1c5 0501 	rsb	r5, r5, #1
 8005d4e:	f8ca 5000 	str.w	r5, [sl]
 8005d52:	f8da 3000 	ldr.w	r3, [sl]
 8005d56:	4499      	add	r9, r3
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	4639      	mov	r1, r7
 8005d60:	f7fa fe22 	bl	80009a8 <__aeabi_dcmpeq>
 8005d64:	b108      	cbz	r0, 8005d6a <__cvt+0x9e>
 8005d66:	f8cd 901c 	str.w	r9, [sp, #28]
 8005d6a:	2230      	movs	r2, #48	; 0x30
 8005d6c:	9b07      	ldr	r3, [sp, #28]
 8005d6e:	454b      	cmp	r3, r9
 8005d70:	d307      	bcc.n	8005d82 <__cvt+0xb6>
 8005d72:	4630      	mov	r0, r6
 8005d74:	9b07      	ldr	r3, [sp, #28]
 8005d76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d78:	1b9b      	subs	r3, r3, r6
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	b008      	add	sp, #32
 8005d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d82:	1c59      	adds	r1, r3, #1
 8005d84:	9107      	str	r1, [sp, #28]
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	e7f0      	b.n	8005d6c <__cvt+0xa0>

08005d8a <__exponent>:
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d8e:	2900      	cmp	r1, #0
 8005d90:	f803 2b02 	strb.w	r2, [r3], #2
 8005d94:	bfb6      	itet	lt
 8005d96:	222d      	movlt	r2, #45	; 0x2d
 8005d98:	222b      	movge	r2, #43	; 0x2b
 8005d9a:	4249      	neglt	r1, r1
 8005d9c:	2909      	cmp	r1, #9
 8005d9e:	7042      	strb	r2, [r0, #1]
 8005da0:	dd2b      	ble.n	8005dfa <__exponent+0x70>
 8005da2:	f10d 0407 	add.w	r4, sp, #7
 8005da6:	46a4      	mov	ip, r4
 8005da8:	270a      	movs	r7, #10
 8005daa:	fb91 f6f7 	sdiv	r6, r1, r7
 8005dae:	460a      	mov	r2, r1
 8005db0:	46a6      	mov	lr, r4
 8005db2:	fb07 1516 	mls	r5, r7, r6, r1
 8005db6:	2a63      	cmp	r2, #99	; 0x63
 8005db8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005dbc:	4631      	mov	r1, r6
 8005dbe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005dc2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005dc6:	dcf0      	bgt.n	8005daa <__exponent+0x20>
 8005dc8:	3130      	adds	r1, #48	; 0x30
 8005dca:	f1ae 0502 	sub.w	r5, lr, #2
 8005dce:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	1c44      	adds	r4, r0, #1
 8005dd6:	4561      	cmp	r1, ip
 8005dd8:	d30a      	bcc.n	8005df0 <__exponent+0x66>
 8005dda:	f10d 0209 	add.w	r2, sp, #9
 8005dde:	eba2 020e 	sub.w	r2, r2, lr
 8005de2:	4565      	cmp	r5, ip
 8005de4:	bf88      	it	hi
 8005de6:	2200      	movhi	r2, #0
 8005de8:	4413      	add	r3, r2
 8005dea:	1a18      	subs	r0, r3, r0
 8005dec:	b003      	add	sp, #12
 8005dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005df0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005df4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005df8:	e7ed      	b.n	8005dd6 <__exponent+0x4c>
 8005dfa:	2330      	movs	r3, #48	; 0x30
 8005dfc:	3130      	adds	r1, #48	; 0x30
 8005dfe:	7083      	strb	r3, [r0, #2]
 8005e00:	70c1      	strb	r1, [r0, #3]
 8005e02:	1d03      	adds	r3, r0, #4
 8005e04:	e7f1      	b.n	8005dea <__exponent+0x60>
	...

08005e08 <_printf_float>:
 8005e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	b091      	sub	sp, #68	; 0x44
 8005e0e:	460c      	mov	r4, r1
 8005e10:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005e14:	4616      	mov	r6, r2
 8005e16:	461f      	mov	r7, r3
 8005e18:	4605      	mov	r5, r0
 8005e1a:	f001 fa73 	bl	8007304 <_localeconv_r>
 8005e1e:	6803      	ldr	r3, [r0, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	9309      	str	r3, [sp, #36]	; 0x24
 8005e24:	f7fa f994 	bl	8000150 <strlen>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	930e      	str	r3, [sp, #56]	; 0x38
 8005e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e30:	900a      	str	r0, [sp, #40]	; 0x28
 8005e32:	3307      	adds	r3, #7
 8005e34:	f023 0307 	bic.w	r3, r3, #7
 8005e38:	f103 0208 	add.w	r2, r3, #8
 8005e3c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005e40:	f8d4 b000 	ldr.w	fp, [r4]
 8005e44:	f8c8 2000 	str.w	r2, [r8]
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e50:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005e54:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005e58:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e5e:	4640      	mov	r0, r8
 8005e60:	4b9c      	ldr	r3, [pc, #624]	; (80060d4 <_printf_float+0x2cc>)
 8005e62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e64:	f7fa fdd2 	bl	8000a0c <__aeabi_dcmpun>
 8005e68:	bb70      	cbnz	r0, 8005ec8 <_printf_float+0xc0>
 8005e6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e6e:	4640      	mov	r0, r8
 8005e70:	4b98      	ldr	r3, [pc, #608]	; (80060d4 <_printf_float+0x2cc>)
 8005e72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e74:	f7fa fdac 	bl	80009d0 <__aeabi_dcmple>
 8005e78:	bb30      	cbnz	r0, 8005ec8 <_printf_float+0xc0>
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4640      	mov	r0, r8
 8005e80:	4651      	mov	r1, sl
 8005e82:	f7fa fd9b 	bl	80009bc <__aeabi_dcmplt>
 8005e86:	b110      	cbz	r0, 8005e8e <_printf_float+0x86>
 8005e88:	232d      	movs	r3, #45	; 0x2d
 8005e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e8e:	4b92      	ldr	r3, [pc, #584]	; (80060d8 <_printf_float+0x2d0>)
 8005e90:	4892      	ldr	r0, [pc, #584]	; (80060dc <_printf_float+0x2d4>)
 8005e92:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005e96:	bf94      	ite	ls
 8005e98:	4698      	movls	r8, r3
 8005e9a:	4680      	movhi	r8, r0
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	f04f 0a00 	mov.w	sl, #0
 8005ea2:	6123      	str	r3, [r4, #16]
 8005ea4:	f02b 0304 	bic.w	r3, fp, #4
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	4633      	mov	r3, r6
 8005eac:	4621      	mov	r1, r4
 8005eae:	4628      	mov	r0, r5
 8005eb0:	9700      	str	r7, [sp, #0]
 8005eb2:	aa0f      	add	r2, sp, #60	; 0x3c
 8005eb4:	f000 f9d4 	bl	8006260 <_printf_common>
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f040 8090 	bne.w	8005fde <_printf_float+0x1d6>
 8005ebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ec2:	b011      	add	sp, #68	; 0x44
 8005ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec8:	4642      	mov	r2, r8
 8005eca:	4653      	mov	r3, sl
 8005ecc:	4640      	mov	r0, r8
 8005ece:	4651      	mov	r1, sl
 8005ed0:	f7fa fd9c 	bl	8000a0c <__aeabi_dcmpun>
 8005ed4:	b148      	cbz	r0, 8005eea <_printf_float+0xe2>
 8005ed6:	f1ba 0f00 	cmp.w	sl, #0
 8005eda:	bfb8      	it	lt
 8005edc:	232d      	movlt	r3, #45	; 0x2d
 8005ede:	4880      	ldr	r0, [pc, #512]	; (80060e0 <_printf_float+0x2d8>)
 8005ee0:	bfb8      	it	lt
 8005ee2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ee6:	4b7f      	ldr	r3, [pc, #508]	; (80060e4 <_printf_float+0x2dc>)
 8005ee8:	e7d3      	b.n	8005e92 <_printf_float+0x8a>
 8005eea:	6863      	ldr	r3, [r4, #4]
 8005eec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	d142      	bne.n	8005f7a <_printf_float+0x172>
 8005ef4:	2306      	movs	r3, #6
 8005ef6:	6063      	str	r3, [r4, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	9206      	str	r2, [sp, #24]
 8005efc:	aa0e      	add	r2, sp, #56	; 0x38
 8005efe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005f02:	aa0d      	add	r2, sp, #52	; 0x34
 8005f04:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005f08:	9203      	str	r2, [sp, #12]
 8005f0a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005f0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005f12:	6023      	str	r3, [r4, #0]
 8005f14:	6863      	ldr	r3, [r4, #4]
 8005f16:	4642      	mov	r2, r8
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	4653      	mov	r3, sl
 8005f1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005f20:	f7ff fed4 	bl	8005ccc <__cvt>
 8005f24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f26:	4680      	mov	r8, r0
 8005f28:	2947      	cmp	r1, #71	; 0x47
 8005f2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f2c:	d108      	bne.n	8005f40 <_printf_float+0x138>
 8005f2e:	1cc8      	adds	r0, r1, #3
 8005f30:	db02      	blt.n	8005f38 <_printf_float+0x130>
 8005f32:	6863      	ldr	r3, [r4, #4]
 8005f34:	4299      	cmp	r1, r3
 8005f36:	dd40      	ble.n	8005fba <_printf_float+0x1b2>
 8005f38:	f1a9 0902 	sub.w	r9, r9, #2
 8005f3c:	fa5f f989 	uxtb.w	r9, r9
 8005f40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f44:	d81f      	bhi.n	8005f86 <_printf_float+0x17e>
 8005f46:	464a      	mov	r2, r9
 8005f48:	3901      	subs	r1, #1
 8005f4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f4e:	910d      	str	r1, [sp, #52]	; 0x34
 8005f50:	f7ff ff1b 	bl	8005d8a <__exponent>
 8005f54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f56:	4682      	mov	sl, r0
 8005f58:	1813      	adds	r3, r2, r0
 8005f5a:	2a01      	cmp	r2, #1
 8005f5c:	6123      	str	r3, [r4, #16]
 8005f5e:	dc02      	bgt.n	8005f66 <_printf_float+0x15e>
 8005f60:	6822      	ldr	r2, [r4, #0]
 8005f62:	07d2      	lsls	r2, r2, #31
 8005f64:	d501      	bpl.n	8005f6a <_printf_float+0x162>
 8005f66:	3301      	adds	r3, #1
 8005f68:	6123      	str	r3, [r4, #16]
 8005f6a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d09b      	beq.n	8005eaa <_printf_float+0xa2>
 8005f72:	232d      	movs	r3, #45	; 0x2d
 8005f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f78:	e797      	b.n	8005eaa <_printf_float+0xa2>
 8005f7a:	2947      	cmp	r1, #71	; 0x47
 8005f7c:	d1bc      	bne.n	8005ef8 <_printf_float+0xf0>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1ba      	bne.n	8005ef8 <_printf_float+0xf0>
 8005f82:	2301      	movs	r3, #1
 8005f84:	e7b7      	b.n	8005ef6 <_printf_float+0xee>
 8005f86:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005f8a:	d118      	bne.n	8005fbe <_printf_float+0x1b6>
 8005f8c:	2900      	cmp	r1, #0
 8005f8e:	6863      	ldr	r3, [r4, #4]
 8005f90:	dd0b      	ble.n	8005faa <_printf_float+0x1a2>
 8005f92:	6121      	str	r1, [r4, #16]
 8005f94:	b913      	cbnz	r3, 8005f9c <_printf_float+0x194>
 8005f96:	6822      	ldr	r2, [r4, #0]
 8005f98:	07d0      	lsls	r0, r2, #31
 8005f9a:	d502      	bpl.n	8005fa2 <_printf_float+0x19a>
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	440b      	add	r3, r1
 8005fa0:	6123      	str	r3, [r4, #16]
 8005fa2:	f04f 0a00 	mov.w	sl, #0
 8005fa6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fa8:	e7df      	b.n	8005f6a <_printf_float+0x162>
 8005faa:	b913      	cbnz	r3, 8005fb2 <_printf_float+0x1aa>
 8005fac:	6822      	ldr	r2, [r4, #0]
 8005fae:	07d2      	lsls	r2, r2, #31
 8005fb0:	d501      	bpl.n	8005fb6 <_printf_float+0x1ae>
 8005fb2:	3302      	adds	r3, #2
 8005fb4:	e7f4      	b.n	8005fa0 <_printf_float+0x198>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e7f2      	b.n	8005fa0 <_printf_float+0x198>
 8005fba:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fc0:	4299      	cmp	r1, r3
 8005fc2:	db05      	blt.n	8005fd0 <_printf_float+0x1c8>
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	6121      	str	r1, [r4, #16]
 8005fc8:	07d8      	lsls	r0, r3, #31
 8005fca:	d5ea      	bpl.n	8005fa2 <_printf_float+0x19a>
 8005fcc:	1c4b      	adds	r3, r1, #1
 8005fce:	e7e7      	b.n	8005fa0 <_printf_float+0x198>
 8005fd0:	2900      	cmp	r1, #0
 8005fd2:	bfcc      	ite	gt
 8005fd4:	2201      	movgt	r2, #1
 8005fd6:	f1c1 0202 	rsble	r2, r1, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	e7e0      	b.n	8005fa0 <_printf_float+0x198>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	055a      	lsls	r2, r3, #21
 8005fe2:	d407      	bmi.n	8005ff4 <_printf_float+0x1ec>
 8005fe4:	6923      	ldr	r3, [r4, #16]
 8005fe6:	4642      	mov	r2, r8
 8005fe8:	4631      	mov	r1, r6
 8005fea:	4628      	mov	r0, r5
 8005fec:	47b8      	blx	r7
 8005fee:	3001      	adds	r0, #1
 8005ff0:	d12b      	bne.n	800604a <_printf_float+0x242>
 8005ff2:	e764      	b.n	8005ebe <_printf_float+0xb6>
 8005ff4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ff8:	f240 80dd 	bls.w	80061b6 <_printf_float+0x3ae>
 8005ffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006000:	2200      	movs	r2, #0
 8006002:	2300      	movs	r3, #0
 8006004:	f7fa fcd0 	bl	80009a8 <__aeabi_dcmpeq>
 8006008:	2800      	cmp	r0, #0
 800600a:	d033      	beq.n	8006074 <_printf_float+0x26c>
 800600c:	2301      	movs	r3, #1
 800600e:	4631      	mov	r1, r6
 8006010:	4628      	mov	r0, r5
 8006012:	4a35      	ldr	r2, [pc, #212]	; (80060e8 <_printf_float+0x2e0>)
 8006014:	47b8      	blx	r7
 8006016:	3001      	adds	r0, #1
 8006018:	f43f af51 	beq.w	8005ebe <_printf_float+0xb6>
 800601c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006020:	429a      	cmp	r2, r3
 8006022:	db02      	blt.n	800602a <_printf_float+0x222>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	07d8      	lsls	r0, r3, #31
 8006028:	d50f      	bpl.n	800604a <_printf_float+0x242>
 800602a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800602e:	4631      	mov	r1, r6
 8006030:	4628      	mov	r0, r5
 8006032:	47b8      	blx	r7
 8006034:	3001      	adds	r0, #1
 8006036:	f43f af42 	beq.w	8005ebe <_printf_float+0xb6>
 800603a:	f04f 0800 	mov.w	r8, #0
 800603e:	f104 091a 	add.w	r9, r4, #26
 8006042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006044:	3b01      	subs	r3, #1
 8006046:	4543      	cmp	r3, r8
 8006048:	dc09      	bgt.n	800605e <_printf_float+0x256>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	079b      	lsls	r3, r3, #30
 800604e:	f100 8102 	bmi.w	8006256 <_printf_float+0x44e>
 8006052:	68e0      	ldr	r0, [r4, #12]
 8006054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006056:	4298      	cmp	r0, r3
 8006058:	bfb8      	it	lt
 800605a:	4618      	movlt	r0, r3
 800605c:	e731      	b.n	8005ec2 <_printf_float+0xba>
 800605e:	2301      	movs	r3, #1
 8006060:	464a      	mov	r2, r9
 8006062:	4631      	mov	r1, r6
 8006064:	4628      	mov	r0, r5
 8006066:	47b8      	blx	r7
 8006068:	3001      	adds	r0, #1
 800606a:	f43f af28 	beq.w	8005ebe <_printf_float+0xb6>
 800606e:	f108 0801 	add.w	r8, r8, #1
 8006072:	e7e6      	b.n	8006042 <_printf_float+0x23a>
 8006074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006076:	2b00      	cmp	r3, #0
 8006078:	dc38      	bgt.n	80060ec <_printf_float+0x2e4>
 800607a:	2301      	movs	r3, #1
 800607c:	4631      	mov	r1, r6
 800607e:	4628      	mov	r0, r5
 8006080:	4a19      	ldr	r2, [pc, #100]	; (80060e8 <_printf_float+0x2e0>)
 8006082:	47b8      	blx	r7
 8006084:	3001      	adds	r0, #1
 8006086:	f43f af1a 	beq.w	8005ebe <_printf_float+0xb6>
 800608a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800608e:	4313      	orrs	r3, r2
 8006090:	d102      	bne.n	8006098 <_printf_float+0x290>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	07d9      	lsls	r1, r3, #31
 8006096:	d5d8      	bpl.n	800604a <_printf_float+0x242>
 8006098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f af0b 	beq.w	8005ebe <_printf_float+0xb6>
 80060a8:	f04f 0900 	mov.w	r9, #0
 80060ac:	f104 0a1a 	add.w	sl, r4, #26
 80060b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060b2:	425b      	negs	r3, r3
 80060b4:	454b      	cmp	r3, r9
 80060b6:	dc01      	bgt.n	80060bc <_printf_float+0x2b4>
 80060b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060ba:	e794      	b.n	8005fe6 <_printf_float+0x1de>
 80060bc:	2301      	movs	r3, #1
 80060be:	4652      	mov	r2, sl
 80060c0:	4631      	mov	r1, r6
 80060c2:	4628      	mov	r0, r5
 80060c4:	47b8      	blx	r7
 80060c6:	3001      	adds	r0, #1
 80060c8:	f43f aef9 	beq.w	8005ebe <_printf_float+0xb6>
 80060cc:	f109 0901 	add.w	r9, r9, #1
 80060d0:	e7ee      	b.n	80060b0 <_printf_float+0x2a8>
 80060d2:	bf00      	nop
 80060d4:	7fefffff 	.word	0x7fefffff
 80060d8:	08008b3c 	.word	0x08008b3c
 80060dc:	08008b40 	.word	0x08008b40
 80060e0:	08008b48 	.word	0x08008b48
 80060e4:	08008b44 	.word	0x08008b44
 80060e8:	08008b4c 	.word	0x08008b4c
 80060ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060f0:	429a      	cmp	r2, r3
 80060f2:	bfa8      	it	ge
 80060f4:	461a      	movge	r2, r3
 80060f6:	2a00      	cmp	r2, #0
 80060f8:	4691      	mov	r9, r2
 80060fa:	dc37      	bgt.n	800616c <_printf_float+0x364>
 80060fc:	f04f 0b00 	mov.w	fp, #0
 8006100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006104:	f104 021a 	add.w	r2, r4, #26
 8006108:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800610c:	ebaa 0309 	sub.w	r3, sl, r9
 8006110:	455b      	cmp	r3, fp
 8006112:	dc33      	bgt.n	800617c <_printf_float+0x374>
 8006114:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006118:	429a      	cmp	r2, r3
 800611a:	db3b      	blt.n	8006194 <_printf_float+0x38c>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	07da      	lsls	r2, r3, #31
 8006120:	d438      	bmi.n	8006194 <_printf_float+0x38c>
 8006122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006124:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006126:	eba2 030a 	sub.w	r3, r2, sl
 800612a:	eba2 0901 	sub.w	r9, r2, r1
 800612e:	4599      	cmp	r9, r3
 8006130:	bfa8      	it	ge
 8006132:	4699      	movge	r9, r3
 8006134:	f1b9 0f00 	cmp.w	r9, #0
 8006138:	dc34      	bgt.n	80061a4 <_printf_float+0x39c>
 800613a:	f04f 0800 	mov.w	r8, #0
 800613e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006142:	f104 0a1a 	add.w	sl, r4, #26
 8006146:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800614a:	1a9b      	subs	r3, r3, r2
 800614c:	eba3 0309 	sub.w	r3, r3, r9
 8006150:	4543      	cmp	r3, r8
 8006152:	f77f af7a 	ble.w	800604a <_printf_float+0x242>
 8006156:	2301      	movs	r3, #1
 8006158:	4652      	mov	r2, sl
 800615a:	4631      	mov	r1, r6
 800615c:	4628      	mov	r0, r5
 800615e:	47b8      	blx	r7
 8006160:	3001      	adds	r0, #1
 8006162:	f43f aeac 	beq.w	8005ebe <_printf_float+0xb6>
 8006166:	f108 0801 	add.w	r8, r8, #1
 800616a:	e7ec      	b.n	8006146 <_printf_float+0x33e>
 800616c:	4613      	mov	r3, r2
 800616e:	4631      	mov	r1, r6
 8006170:	4642      	mov	r2, r8
 8006172:	4628      	mov	r0, r5
 8006174:	47b8      	blx	r7
 8006176:	3001      	adds	r0, #1
 8006178:	d1c0      	bne.n	80060fc <_printf_float+0x2f4>
 800617a:	e6a0      	b.n	8005ebe <_printf_float+0xb6>
 800617c:	2301      	movs	r3, #1
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	920b      	str	r2, [sp, #44]	; 0x2c
 8006184:	47b8      	blx	r7
 8006186:	3001      	adds	r0, #1
 8006188:	f43f ae99 	beq.w	8005ebe <_printf_float+0xb6>
 800618c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800618e:	f10b 0b01 	add.w	fp, fp, #1
 8006192:	e7b9      	b.n	8006108 <_printf_float+0x300>
 8006194:	4631      	mov	r1, r6
 8006196:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800619a:	4628      	mov	r0, r5
 800619c:	47b8      	blx	r7
 800619e:	3001      	adds	r0, #1
 80061a0:	d1bf      	bne.n	8006122 <_printf_float+0x31a>
 80061a2:	e68c      	b.n	8005ebe <_printf_float+0xb6>
 80061a4:	464b      	mov	r3, r9
 80061a6:	4631      	mov	r1, r6
 80061a8:	4628      	mov	r0, r5
 80061aa:	eb08 020a 	add.w	r2, r8, sl
 80061ae:	47b8      	blx	r7
 80061b0:	3001      	adds	r0, #1
 80061b2:	d1c2      	bne.n	800613a <_printf_float+0x332>
 80061b4:	e683      	b.n	8005ebe <_printf_float+0xb6>
 80061b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061b8:	2a01      	cmp	r2, #1
 80061ba:	dc01      	bgt.n	80061c0 <_printf_float+0x3b8>
 80061bc:	07db      	lsls	r3, r3, #31
 80061be:	d537      	bpl.n	8006230 <_printf_float+0x428>
 80061c0:	2301      	movs	r3, #1
 80061c2:	4642      	mov	r2, r8
 80061c4:	4631      	mov	r1, r6
 80061c6:	4628      	mov	r0, r5
 80061c8:	47b8      	blx	r7
 80061ca:	3001      	adds	r0, #1
 80061cc:	f43f ae77 	beq.w	8005ebe <_printf_float+0xb6>
 80061d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	47b8      	blx	r7
 80061da:	3001      	adds	r0, #1
 80061dc:	f43f ae6f 	beq.w	8005ebe <_printf_float+0xb6>
 80061e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80061e4:	2200      	movs	r2, #0
 80061e6:	2300      	movs	r3, #0
 80061e8:	f7fa fbde 	bl	80009a8 <__aeabi_dcmpeq>
 80061ec:	b9d8      	cbnz	r0, 8006226 <_printf_float+0x41e>
 80061ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061f0:	f108 0201 	add.w	r2, r8, #1
 80061f4:	3b01      	subs	r3, #1
 80061f6:	4631      	mov	r1, r6
 80061f8:	4628      	mov	r0, r5
 80061fa:	47b8      	blx	r7
 80061fc:	3001      	adds	r0, #1
 80061fe:	d10e      	bne.n	800621e <_printf_float+0x416>
 8006200:	e65d      	b.n	8005ebe <_printf_float+0xb6>
 8006202:	2301      	movs	r3, #1
 8006204:	464a      	mov	r2, r9
 8006206:	4631      	mov	r1, r6
 8006208:	4628      	mov	r0, r5
 800620a:	47b8      	blx	r7
 800620c:	3001      	adds	r0, #1
 800620e:	f43f ae56 	beq.w	8005ebe <_printf_float+0xb6>
 8006212:	f108 0801 	add.w	r8, r8, #1
 8006216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006218:	3b01      	subs	r3, #1
 800621a:	4543      	cmp	r3, r8
 800621c:	dcf1      	bgt.n	8006202 <_printf_float+0x3fa>
 800621e:	4653      	mov	r3, sl
 8006220:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006224:	e6e0      	b.n	8005fe8 <_printf_float+0x1e0>
 8006226:	f04f 0800 	mov.w	r8, #0
 800622a:	f104 091a 	add.w	r9, r4, #26
 800622e:	e7f2      	b.n	8006216 <_printf_float+0x40e>
 8006230:	2301      	movs	r3, #1
 8006232:	4642      	mov	r2, r8
 8006234:	e7df      	b.n	80061f6 <_printf_float+0x3ee>
 8006236:	2301      	movs	r3, #1
 8006238:	464a      	mov	r2, r9
 800623a:	4631      	mov	r1, r6
 800623c:	4628      	mov	r0, r5
 800623e:	47b8      	blx	r7
 8006240:	3001      	adds	r0, #1
 8006242:	f43f ae3c 	beq.w	8005ebe <_printf_float+0xb6>
 8006246:	f108 0801 	add.w	r8, r8, #1
 800624a:	68e3      	ldr	r3, [r4, #12]
 800624c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800624e:	1a5b      	subs	r3, r3, r1
 8006250:	4543      	cmp	r3, r8
 8006252:	dcf0      	bgt.n	8006236 <_printf_float+0x42e>
 8006254:	e6fd      	b.n	8006052 <_printf_float+0x24a>
 8006256:	f04f 0800 	mov.w	r8, #0
 800625a:	f104 0919 	add.w	r9, r4, #25
 800625e:	e7f4      	b.n	800624a <_printf_float+0x442>

08006260 <_printf_common>:
 8006260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006264:	4616      	mov	r6, r2
 8006266:	4699      	mov	r9, r3
 8006268:	688a      	ldr	r2, [r1, #8]
 800626a:	690b      	ldr	r3, [r1, #16]
 800626c:	4607      	mov	r7, r0
 800626e:	4293      	cmp	r3, r2
 8006270:	bfb8      	it	lt
 8006272:	4613      	movlt	r3, r2
 8006274:	6033      	str	r3, [r6, #0]
 8006276:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800627a:	460c      	mov	r4, r1
 800627c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006280:	b10a      	cbz	r2, 8006286 <_printf_common+0x26>
 8006282:	3301      	adds	r3, #1
 8006284:	6033      	str	r3, [r6, #0]
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	0699      	lsls	r1, r3, #26
 800628a:	bf42      	ittt	mi
 800628c:	6833      	ldrmi	r3, [r6, #0]
 800628e:	3302      	addmi	r3, #2
 8006290:	6033      	strmi	r3, [r6, #0]
 8006292:	6825      	ldr	r5, [r4, #0]
 8006294:	f015 0506 	ands.w	r5, r5, #6
 8006298:	d106      	bne.n	80062a8 <_printf_common+0x48>
 800629a:	f104 0a19 	add.w	sl, r4, #25
 800629e:	68e3      	ldr	r3, [r4, #12]
 80062a0:	6832      	ldr	r2, [r6, #0]
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	42ab      	cmp	r3, r5
 80062a6:	dc28      	bgt.n	80062fa <_printf_common+0x9a>
 80062a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062ac:	1e13      	subs	r3, r2, #0
 80062ae:	6822      	ldr	r2, [r4, #0]
 80062b0:	bf18      	it	ne
 80062b2:	2301      	movne	r3, #1
 80062b4:	0692      	lsls	r2, r2, #26
 80062b6:	d42d      	bmi.n	8006314 <_printf_common+0xb4>
 80062b8:	4649      	mov	r1, r9
 80062ba:	4638      	mov	r0, r7
 80062bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062c0:	47c0      	blx	r8
 80062c2:	3001      	adds	r0, #1
 80062c4:	d020      	beq.n	8006308 <_printf_common+0xa8>
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	68e5      	ldr	r5, [r4, #12]
 80062ca:	f003 0306 	and.w	r3, r3, #6
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	bf18      	it	ne
 80062d2:	2500      	movne	r5, #0
 80062d4:	6832      	ldr	r2, [r6, #0]
 80062d6:	f04f 0600 	mov.w	r6, #0
 80062da:	68a3      	ldr	r3, [r4, #8]
 80062dc:	bf08      	it	eq
 80062de:	1aad      	subeq	r5, r5, r2
 80062e0:	6922      	ldr	r2, [r4, #16]
 80062e2:	bf08      	it	eq
 80062e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062e8:	4293      	cmp	r3, r2
 80062ea:	bfc4      	itt	gt
 80062ec:	1a9b      	subgt	r3, r3, r2
 80062ee:	18ed      	addgt	r5, r5, r3
 80062f0:	341a      	adds	r4, #26
 80062f2:	42b5      	cmp	r5, r6
 80062f4:	d11a      	bne.n	800632c <_printf_common+0xcc>
 80062f6:	2000      	movs	r0, #0
 80062f8:	e008      	b.n	800630c <_printf_common+0xac>
 80062fa:	2301      	movs	r3, #1
 80062fc:	4652      	mov	r2, sl
 80062fe:	4649      	mov	r1, r9
 8006300:	4638      	mov	r0, r7
 8006302:	47c0      	blx	r8
 8006304:	3001      	adds	r0, #1
 8006306:	d103      	bne.n	8006310 <_printf_common+0xb0>
 8006308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800630c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006310:	3501      	adds	r5, #1
 8006312:	e7c4      	b.n	800629e <_printf_common+0x3e>
 8006314:	2030      	movs	r0, #48	; 0x30
 8006316:	18e1      	adds	r1, r4, r3
 8006318:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006322:	4422      	add	r2, r4
 8006324:	3302      	adds	r3, #2
 8006326:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800632a:	e7c5      	b.n	80062b8 <_printf_common+0x58>
 800632c:	2301      	movs	r3, #1
 800632e:	4622      	mov	r2, r4
 8006330:	4649      	mov	r1, r9
 8006332:	4638      	mov	r0, r7
 8006334:	47c0      	blx	r8
 8006336:	3001      	adds	r0, #1
 8006338:	d0e6      	beq.n	8006308 <_printf_common+0xa8>
 800633a:	3601      	adds	r6, #1
 800633c:	e7d9      	b.n	80062f2 <_printf_common+0x92>
	...

08006340 <_printf_i>:
 8006340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006344:	460c      	mov	r4, r1
 8006346:	7e27      	ldrb	r7, [r4, #24]
 8006348:	4691      	mov	r9, r2
 800634a:	2f78      	cmp	r7, #120	; 0x78
 800634c:	4680      	mov	r8, r0
 800634e:	469a      	mov	sl, r3
 8006350:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006352:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006356:	d807      	bhi.n	8006368 <_printf_i+0x28>
 8006358:	2f62      	cmp	r7, #98	; 0x62
 800635a:	d80a      	bhi.n	8006372 <_printf_i+0x32>
 800635c:	2f00      	cmp	r7, #0
 800635e:	f000 80d9 	beq.w	8006514 <_printf_i+0x1d4>
 8006362:	2f58      	cmp	r7, #88	; 0x58
 8006364:	f000 80a4 	beq.w	80064b0 <_printf_i+0x170>
 8006368:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800636c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006370:	e03a      	b.n	80063e8 <_printf_i+0xa8>
 8006372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006376:	2b15      	cmp	r3, #21
 8006378:	d8f6      	bhi.n	8006368 <_printf_i+0x28>
 800637a:	a001      	add	r0, pc, #4	; (adr r0, 8006380 <_printf_i+0x40>)
 800637c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006380:	080063d9 	.word	0x080063d9
 8006384:	080063ed 	.word	0x080063ed
 8006388:	08006369 	.word	0x08006369
 800638c:	08006369 	.word	0x08006369
 8006390:	08006369 	.word	0x08006369
 8006394:	08006369 	.word	0x08006369
 8006398:	080063ed 	.word	0x080063ed
 800639c:	08006369 	.word	0x08006369
 80063a0:	08006369 	.word	0x08006369
 80063a4:	08006369 	.word	0x08006369
 80063a8:	08006369 	.word	0x08006369
 80063ac:	080064fb 	.word	0x080064fb
 80063b0:	0800641d 	.word	0x0800641d
 80063b4:	080064dd 	.word	0x080064dd
 80063b8:	08006369 	.word	0x08006369
 80063bc:	08006369 	.word	0x08006369
 80063c0:	0800651d 	.word	0x0800651d
 80063c4:	08006369 	.word	0x08006369
 80063c8:	0800641d 	.word	0x0800641d
 80063cc:	08006369 	.word	0x08006369
 80063d0:	08006369 	.word	0x08006369
 80063d4:	080064e5 	.word	0x080064e5
 80063d8:	680b      	ldr	r3, [r1, #0]
 80063da:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80063de:	1d1a      	adds	r2, r3, #4
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	600a      	str	r2, [r1, #0]
 80063e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063e8:	2301      	movs	r3, #1
 80063ea:	e0a4      	b.n	8006536 <_printf_i+0x1f6>
 80063ec:	6825      	ldr	r5, [r4, #0]
 80063ee:	6808      	ldr	r0, [r1, #0]
 80063f0:	062e      	lsls	r6, r5, #24
 80063f2:	f100 0304 	add.w	r3, r0, #4
 80063f6:	d50a      	bpl.n	800640e <_printf_i+0xce>
 80063f8:	6805      	ldr	r5, [r0, #0]
 80063fa:	600b      	str	r3, [r1, #0]
 80063fc:	2d00      	cmp	r5, #0
 80063fe:	da03      	bge.n	8006408 <_printf_i+0xc8>
 8006400:	232d      	movs	r3, #45	; 0x2d
 8006402:	426d      	negs	r5, r5
 8006404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006408:	230a      	movs	r3, #10
 800640a:	485e      	ldr	r0, [pc, #376]	; (8006584 <_printf_i+0x244>)
 800640c:	e019      	b.n	8006442 <_printf_i+0x102>
 800640e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006412:	6805      	ldr	r5, [r0, #0]
 8006414:	600b      	str	r3, [r1, #0]
 8006416:	bf18      	it	ne
 8006418:	b22d      	sxthne	r5, r5
 800641a:	e7ef      	b.n	80063fc <_printf_i+0xbc>
 800641c:	680b      	ldr	r3, [r1, #0]
 800641e:	6825      	ldr	r5, [r4, #0]
 8006420:	1d18      	adds	r0, r3, #4
 8006422:	6008      	str	r0, [r1, #0]
 8006424:	0628      	lsls	r0, r5, #24
 8006426:	d501      	bpl.n	800642c <_printf_i+0xec>
 8006428:	681d      	ldr	r5, [r3, #0]
 800642a:	e002      	b.n	8006432 <_printf_i+0xf2>
 800642c:	0669      	lsls	r1, r5, #25
 800642e:	d5fb      	bpl.n	8006428 <_printf_i+0xe8>
 8006430:	881d      	ldrh	r5, [r3, #0]
 8006432:	2f6f      	cmp	r7, #111	; 0x6f
 8006434:	bf0c      	ite	eq
 8006436:	2308      	moveq	r3, #8
 8006438:	230a      	movne	r3, #10
 800643a:	4852      	ldr	r0, [pc, #328]	; (8006584 <_printf_i+0x244>)
 800643c:	2100      	movs	r1, #0
 800643e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006442:	6866      	ldr	r6, [r4, #4]
 8006444:	2e00      	cmp	r6, #0
 8006446:	bfa8      	it	ge
 8006448:	6821      	ldrge	r1, [r4, #0]
 800644a:	60a6      	str	r6, [r4, #8]
 800644c:	bfa4      	itt	ge
 800644e:	f021 0104 	bicge.w	r1, r1, #4
 8006452:	6021      	strge	r1, [r4, #0]
 8006454:	b90d      	cbnz	r5, 800645a <_printf_i+0x11a>
 8006456:	2e00      	cmp	r6, #0
 8006458:	d04d      	beq.n	80064f6 <_printf_i+0x1b6>
 800645a:	4616      	mov	r6, r2
 800645c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006460:	fb03 5711 	mls	r7, r3, r1, r5
 8006464:	5dc7      	ldrb	r7, [r0, r7]
 8006466:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800646a:	462f      	mov	r7, r5
 800646c:	42bb      	cmp	r3, r7
 800646e:	460d      	mov	r5, r1
 8006470:	d9f4      	bls.n	800645c <_printf_i+0x11c>
 8006472:	2b08      	cmp	r3, #8
 8006474:	d10b      	bne.n	800648e <_printf_i+0x14e>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	07df      	lsls	r7, r3, #31
 800647a:	d508      	bpl.n	800648e <_printf_i+0x14e>
 800647c:	6923      	ldr	r3, [r4, #16]
 800647e:	6861      	ldr	r1, [r4, #4]
 8006480:	4299      	cmp	r1, r3
 8006482:	bfde      	ittt	le
 8006484:	2330      	movle	r3, #48	; 0x30
 8006486:	f806 3c01 	strble.w	r3, [r6, #-1]
 800648a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800648e:	1b92      	subs	r2, r2, r6
 8006490:	6122      	str	r2, [r4, #16]
 8006492:	464b      	mov	r3, r9
 8006494:	4621      	mov	r1, r4
 8006496:	4640      	mov	r0, r8
 8006498:	f8cd a000 	str.w	sl, [sp]
 800649c:	aa03      	add	r2, sp, #12
 800649e:	f7ff fedf 	bl	8006260 <_printf_common>
 80064a2:	3001      	adds	r0, #1
 80064a4:	d14c      	bne.n	8006540 <_printf_i+0x200>
 80064a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064aa:	b004      	add	sp, #16
 80064ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b0:	4834      	ldr	r0, [pc, #208]	; (8006584 <_printf_i+0x244>)
 80064b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064b6:	680e      	ldr	r6, [r1, #0]
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80064be:	061f      	lsls	r7, r3, #24
 80064c0:	600e      	str	r6, [r1, #0]
 80064c2:	d514      	bpl.n	80064ee <_printf_i+0x1ae>
 80064c4:	07d9      	lsls	r1, r3, #31
 80064c6:	bf44      	itt	mi
 80064c8:	f043 0320 	orrmi.w	r3, r3, #32
 80064cc:	6023      	strmi	r3, [r4, #0]
 80064ce:	b91d      	cbnz	r5, 80064d8 <_printf_i+0x198>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	f023 0320 	bic.w	r3, r3, #32
 80064d6:	6023      	str	r3, [r4, #0]
 80064d8:	2310      	movs	r3, #16
 80064da:	e7af      	b.n	800643c <_printf_i+0xfc>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	f043 0320 	orr.w	r3, r3, #32
 80064e2:	6023      	str	r3, [r4, #0]
 80064e4:	2378      	movs	r3, #120	; 0x78
 80064e6:	4828      	ldr	r0, [pc, #160]	; (8006588 <_printf_i+0x248>)
 80064e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064ec:	e7e3      	b.n	80064b6 <_printf_i+0x176>
 80064ee:	065e      	lsls	r6, r3, #25
 80064f0:	bf48      	it	mi
 80064f2:	b2ad      	uxthmi	r5, r5
 80064f4:	e7e6      	b.n	80064c4 <_printf_i+0x184>
 80064f6:	4616      	mov	r6, r2
 80064f8:	e7bb      	b.n	8006472 <_printf_i+0x132>
 80064fa:	680b      	ldr	r3, [r1, #0]
 80064fc:	6826      	ldr	r6, [r4, #0]
 80064fe:	1d1d      	adds	r5, r3, #4
 8006500:	6960      	ldr	r0, [r4, #20]
 8006502:	600d      	str	r5, [r1, #0]
 8006504:	0635      	lsls	r5, r6, #24
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	d501      	bpl.n	800650e <_printf_i+0x1ce>
 800650a:	6018      	str	r0, [r3, #0]
 800650c:	e002      	b.n	8006514 <_printf_i+0x1d4>
 800650e:	0671      	lsls	r1, r6, #25
 8006510:	d5fb      	bpl.n	800650a <_printf_i+0x1ca>
 8006512:	8018      	strh	r0, [r3, #0]
 8006514:	2300      	movs	r3, #0
 8006516:	4616      	mov	r6, r2
 8006518:	6123      	str	r3, [r4, #16]
 800651a:	e7ba      	b.n	8006492 <_printf_i+0x152>
 800651c:	680b      	ldr	r3, [r1, #0]
 800651e:	1d1a      	adds	r2, r3, #4
 8006520:	600a      	str	r2, [r1, #0]
 8006522:	681e      	ldr	r6, [r3, #0]
 8006524:	2100      	movs	r1, #0
 8006526:	4630      	mov	r0, r6
 8006528:	6862      	ldr	r2, [r4, #4]
 800652a:	f000 fef7 	bl	800731c <memchr>
 800652e:	b108      	cbz	r0, 8006534 <_printf_i+0x1f4>
 8006530:	1b80      	subs	r0, r0, r6
 8006532:	6060      	str	r0, [r4, #4]
 8006534:	6863      	ldr	r3, [r4, #4]
 8006536:	6123      	str	r3, [r4, #16]
 8006538:	2300      	movs	r3, #0
 800653a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800653e:	e7a8      	b.n	8006492 <_printf_i+0x152>
 8006540:	4632      	mov	r2, r6
 8006542:	4649      	mov	r1, r9
 8006544:	4640      	mov	r0, r8
 8006546:	6923      	ldr	r3, [r4, #16]
 8006548:	47d0      	blx	sl
 800654a:	3001      	adds	r0, #1
 800654c:	d0ab      	beq.n	80064a6 <_printf_i+0x166>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	079b      	lsls	r3, r3, #30
 8006552:	d413      	bmi.n	800657c <_printf_i+0x23c>
 8006554:	68e0      	ldr	r0, [r4, #12]
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	4298      	cmp	r0, r3
 800655a:	bfb8      	it	lt
 800655c:	4618      	movlt	r0, r3
 800655e:	e7a4      	b.n	80064aa <_printf_i+0x16a>
 8006560:	2301      	movs	r3, #1
 8006562:	4632      	mov	r2, r6
 8006564:	4649      	mov	r1, r9
 8006566:	4640      	mov	r0, r8
 8006568:	47d0      	blx	sl
 800656a:	3001      	adds	r0, #1
 800656c:	d09b      	beq.n	80064a6 <_printf_i+0x166>
 800656e:	3501      	adds	r5, #1
 8006570:	68e3      	ldr	r3, [r4, #12]
 8006572:	9903      	ldr	r1, [sp, #12]
 8006574:	1a5b      	subs	r3, r3, r1
 8006576:	42ab      	cmp	r3, r5
 8006578:	dcf2      	bgt.n	8006560 <_printf_i+0x220>
 800657a:	e7eb      	b.n	8006554 <_printf_i+0x214>
 800657c:	2500      	movs	r5, #0
 800657e:	f104 0619 	add.w	r6, r4, #25
 8006582:	e7f5      	b.n	8006570 <_printf_i+0x230>
 8006584:	08008b4e 	.word	0x08008b4e
 8006588:	08008b5f 	.word	0x08008b5f

0800658c <siprintf>:
 800658c:	b40e      	push	{r1, r2, r3}
 800658e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006592:	b500      	push	{lr}
 8006594:	b09c      	sub	sp, #112	; 0x70
 8006596:	ab1d      	add	r3, sp, #116	; 0x74
 8006598:	9002      	str	r0, [sp, #8]
 800659a:	9006      	str	r0, [sp, #24]
 800659c:	9107      	str	r1, [sp, #28]
 800659e:	9104      	str	r1, [sp, #16]
 80065a0:	4808      	ldr	r0, [pc, #32]	; (80065c4 <siprintf+0x38>)
 80065a2:	4909      	ldr	r1, [pc, #36]	; (80065c8 <siprintf+0x3c>)
 80065a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065a8:	9105      	str	r1, [sp, #20]
 80065aa:	6800      	ldr	r0, [r0, #0]
 80065ac:	a902      	add	r1, sp, #8
 80065ae:	9301      	str	r3, [sp, #4]
 80065b0:	f001 fb54 	bl	8007c5c <_svfiprintf_r>
 80065b4:	2200      	movs	r2, #0
 80065b6:	9b02      	ldr	r3, [sp, #8]
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	b01c      	add	sp, #112	; 0x70
 80065bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80065c0:	b003      	add	sp, #12
 80065c2:	4770      	bx	lr
 80065c4:	200000d4 	.word	0x200000d4
 80065c8:	ffff0208 	.word	0xffff0208

080065cc <_vsiprintf_r>:
 80065cc:	b500      	push	{lr}
 80065ce:	b09b      	sub	sp, #108	; 0x6c
 80065d0:	9100      	str	r1, [sp, #0]
 80065d2:	9104      	str	r1, [sp, #16]
 80065d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065d8:	9105      	str	r1, [sp, #20]
 80065da:	9102      	str	r1, [sp, #8]
 80065dc:	4905      	ldr	r1, [pc, #20]	; (80065f4 <_vsiprintf_r+0x28>)
 80065de:	9103      	str	r1, [sp, #12]
 80065e0:	4669      	mov	r1, sp
 80065e2:	f001 fb3b 	bl	8007c5c <_svfiprintf_r>
 80065e6:	2200      	movs	r2, #0
 80065e8:	9b00      	ldr	r3, [sp, #0]
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	b01b      	add	sp, #108	; 0x6c
 80065ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80065f2:	bf00      	nop
 80065f4:	ffff0208 	.word	0xffff0208

080065f8 <vsiprintf>:
 80065f8:	4613      	mov	r3, r2
 80065fa:	460a      	mov	r2, r1
 80065fc:	4601      	mov	r1, r0
 80065fe:	4802      	ldr	r0, [pc, #8]	; (8006608 <vsiprintf+0x10>)
 8006600:	6800      	ldr	r0, [r0, #0]
 8006602:	f7ff bfe3 	b.w	80065cc <_vsiprintf_r>
 8006606:	bf00      	nop
 8006608:	200000d4 	.word	0x200000d4

0800660c <quorem>:
 800660c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006610:	6903      	ldr	r3, [r0, #16]
 8006612:	690c      	ldr	r4, [r1, #16]
 8006614:	4607      	mov	r7, r0
 8006616:	42a3      	cmp	r3, r4
 8006618:	f2c0 8083 	blt.w	8006722 <quorem+0x116>
 800661c:	3c01      	subs	r4, #1
 800661e:	f100 0514 	add.w	r5, r0, #20
 8006622:	f101 0814 	add.w	r8, r1, #20
 8006626:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800662a:	9301      	str	r3, [sp, #4]
 800662c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006630:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006634:	3301      	adds	r3, #1
 8006636:	429a      	cmp	r2, r3
 8006638:	fbb2 f6f3 	udiv	r6, r2, r3
 800663c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006640:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006644:	d332      	bcc.n	80066ac <quorem+0xa0>
 8006646:	f04f 0e00 	mov.w	lr, #0
 800664a:	4640      	mov	r0, r8
 800664c:	46ac      	mov	ip, r5
 800664e:	46f2      	mov	sl, lr
 8006650:	f850 2b04 	ldr.w	r2, [r0], #4
 8006654:	b293      	uxth	r3, r2
 8006656:	fb06 e303 	mla	r3, r6, r3, lr
 800665a:	0c12      	lsrs	r2, r2, #16
 800665c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006660:	fb06 e202 	mla	r2, r6, r2, lr
 8006664:	b29b      	uxth	r3, r3
 8006666:	ebaa 0303 	sub.w	r3, sl, r3
 800666a:	f8dc a000 	ldr.w	sl, [ip]
 800666e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006672:	fa1f fa8a 	uxth.w	sl, sl
 8006676:	4453      	add	r3, sl
 8006678:	fa1f fa82 	uxth.w	sl, r2
 800667c:	f8dc 2000 	ldr.w	r2, [ip]
 8006680:	4581      	cmp	r9, r0
 8006682:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006686:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800668a:	b29b      	uxth	r3, r3
 800668c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006690:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006694:	f84c 3b04 	str.w	r3, [ip], #4
 8006698:	d2da      	bcs.n	8006650 <quorem+0x44>
 800669a:	f855 300b 	ldr.w	r3, [r5, fp]
 800669e:	b92b      	cbnz	r3, 80066ac <quorem+0xa0>
 80066a0:	9b01      	ldr	r3, [sp, #4]
 80066a2:	3b04      	subs	r3, #4
 80066a4:	429d      	cmp	r5, r3
 80066a6:	461a      	mov	r2, r3
 80066a8:	d32f      	bcc.n	800670a <quorem+0xfe>
 80066aa:	613c      	str	r4, [r7, #16]
 80066ac:	4638      	mov	r0, r7
 80066ae:	f001 f8bd 	bl	800782c <__mcmp>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	db25      	blt.n	8006702 <quorem+0xf6>
 80066b6:	4628      	mov	r0, r5
 80066b8:	f04f 0c00 	mov.w	ip, #0
 80066bc:	3601      	adds	r6, #1
 80066be:	f858 1b04 	ldr.w	r1, [r8], #4
 80066c2:	f8d0 e000 	ldr.w	lr, [r0]
 80066c6:	b28b      	uxth	r3, r1
 80066c8:	ebac 0303 	sub.w	r3, ip, r3
 80066cc:	fa1f f28e 	uxth.w	r2, lr
 80066d0:	4413      	add	r3, r2
 80066d2:	0c0a      	lsrs	r2, r1, #16
 80066d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80066d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066dc:	b29b      	uxth	r3, r3
 80066de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066e2:	45c1      	cmp	r9, r8
 80066e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80066e8:	f840 3b04 	str.w	r3, [r0], #4
 80066ec:	d2e7      	bcs.n	80066be <quorem+0xb2>
 80066ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066f6:	b922      	cbnz	r2, 8006702 <quorem+0xf6>
 80066f8:	3b04      	subs	r3, #4
 80066fa:	429d      	cmp	r5, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	d30a      	bcc.n	8006716 <quorem+0x10a>
 8006700:	613c      	str	r4, [r7, #16]
 8006702:	4630      	mov	r0, r6
 8006704:	b003      	add	sp, #12
 8006706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800670a:	6812      	ldr	r2, [r2, #0]
 800670c:	3b04      	subs	r3, #4
 800670e:	2a00      	cmp	r2, #0
 8006710:	d1cb      	bne.n	80066aa <quorem+0x9e>
 8006712:	3c01      	subs	r4, #1
 8006714:	e7c6      	b.n	80066a4 <quorem+0x98>
 8006716:	6812      	ldr	r2, [r2, #0]
 8006718:	3b04      	subs	r3, #4
 800671a:	2a00      	cmp	r2, #0
 800671c:	d1f0      	bne.n	8006700 <quorem+0xf4>
 800671e:	3c01      	subs	r4, #1
 8006720:	e7eb      	b.n	80066fa <quorem+0xee>
 8006722:	2000      	movs	r0, #0
 8006724:	e7ee      	b.n	8006704 <quorem+0xf8>
	...

08006728 <_dtoa_r>:
 8006728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	4616      	mov	r6, r2
 800672e:	461f      	mov	r7, r3
 8006730:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006732:	b099      	sub	sp, #100	; 0x64
 8006734:	4605      	mov	r5, r0
 8006736:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800673a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800673e:	b974      	cbnz	r4, 800675e <_dtoa_r+0x36>
 8006740:	2010      	movs	r0, #16
 8006742:	f000 fde3 	bl	800730c <malloc>
 8006746:	4602      	mov	r2, r0
 8006748:	6268      	str	r0, [r5, #36]	; 0x24
 800674a:	b920      	cbnz	r0, 8006756 <_dtoa_r+0x2e>
 800674c:	21ea      	movs	r1, #234	; 0xea
 800674e:	4bae      	ldr	r3, [pc, #696]	; (8006a08 <_dtoa_r+0x2e0>)
 8006750:	48ae      	ldr	r0, [pc, #696]	; (8006a0c <_dtoa_r+0x2e4>)
 8006752:	f001 fb93 	bl	8007e7c <__assert_func>
 8006756:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800675a:	6004      	str	r4, [r0, #0]
 800675c:	60c4      	str	r4, [r0, #12]
 800675e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006760:	6819      	ldr	r1, [r3, #0]
 8006762:	b151      	cbz	r1, 800677a <_dtoa_r+0x52>
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	2301      	movs	r3, #1
 8006768:	4093      	lsls	r3, r2
 800676a:	604a      	str	r2, [r1, #4]
 800676c:	608b      	str	r3, [r1, #8]
 800676e:	4628      	mov	r0, r5
 8006770:	f000 fe22 	bl	80073b8 <_Bfree>
 8006774:	2200      	movs	r2, #0
 8006776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	1e3b      	subs	r3, r7, #0
 800677c:	bfaf      	iteee	ge
 800677e:	2300      	movge	r3, #0
 8006780:	2201      	movlt	r2, #1
 8006782:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006786:	9305      	strlt	r3, [sp, #20]
 8006788:	bfa8      	it	ge
 800678a:	f8c8 3000 	strge.w	r3, [r8]
 800678e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006792:	4b9f      	ldr	r3, [pc, #636]	; (8006a10 <_dtoa_r+0x2e8>)
 8006794:	bfb8      	it	lt
 8006796:	f8c8 2000 	strlt.w	r2, [r8]
 800679a:	ea33 0309 	bics.w	r3, r3, r9
 800679e:	d119      	bne.n	80067d4 <_dtoa_r+0xac>
 80067a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80067a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067ac:	4333      	orrs	r3, r6
 80067ae:	f000 8580 	beq.w	80072b2 <_dtoa_r+0xb8a>
 80067b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067b4:	b953      	cbnz	r3, 80067cc <_dtoa_r+0xa4>
 80067b6:	4b97      	ldr	r3, [pc, #604]	; (8006a14 <_dtoa_r+0x2ec>)
 80067b8:	e022      	b.n	8006800 <_dtoa_r+0xd8>
 80067ba:	4b97      	ldr	r3, [pc, #604]	; (8006a18 <_dtoa_r+0x2f0>)
 80067bc:	9308      	str	r3, [sp, #32]
 80067be:	3308      	adds	r3, #8
 80067c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	9808      	ldr	r0, [sp, #32]
 80067c6:	b019      	add	sp, #100	; 0x64
 80067c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067cc:	4b91      	ldr	r3, [pc, #580]	; (8006a14 <_dtoa_r+0x2ec>)
 80067ce:	9308      	str	r3, [sp, #32]
 80067d0:	3303      	adds	r3, #3
 80067d2:	e7f5      	b.n	80067c0 <_dtoa_r+0x98>
 80067d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80067d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80067dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067e0:	2200      	movs	r2, #0
 80067e2:	2300      	movs	r3, #0
 80067e4:	f7fa f8e0 	bl	80009a8 <__aeabi_dcmpeq>
 80067e8:	4680      	mov	r8, r0
 80067ea:	b158      	cbz	r0, 8006804 <_dtoa_r+0xdc>
 80067ec:	2301      	movs	r3, #1
 80067ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8559 	beq.w	80072ac <_dtoa_r+0xb84>
 80067fa:	4888      	ldr	r0, [pc, #544]	; (8006a1c <_dtoa_r+0x2f4>)
 80067fc:	6018      	str	r0, [r3, #0]
 80067fe:	1e43      	subs	r3, r0, #1
 8006800:	9308      	str	r3, [sp, #32]
 8006802:	e7df      	b.n	80067c4 <_dtoa_r+0x9c>
 8006804:	ab16      	add	r3, sp, #88	; 0x58
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	ab17      	add	r3, sp, #92	; 0x5c
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	4628      	mov	r0, r5
 800680e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006812:	f001 f8b7 	bl	8007984 <__d2b>
 8006816:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800681a:	4682      	mov	sl, r0
 800681c:	2c00      	cmp	r4, #0
 800681e:	d07e      	beq.n	800691e <_dtoa_r+0x1f6>
 8006820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006826:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800682a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800682e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006832:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006836:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800683a:	2200      	movs	r2, #0
 800683c:	4b78      	ldr	r3, [pc, #480]	; (8006a20 <_dtoa_r+0x2f8>)
 800683e:	f7f9 fc93 	bl	8000168 <__aeabi_dsub>
 8006842:	a36b      	add	r3, pc, #428	; (adr r3, 80069f0 <_dtoa_r+0x2c8>)
 8006844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006848:	f7f9 fe46 	bl	80004d8 <__aeabi_dmul>
 800684c:	a36a      	add	r3, pc, #424	; (adr r3, 80069f8 <_dtoa_r+0x2d0>)
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006852:	f7f9 fc8b 	bl	800016c <__adddf3>
 8006856:	4606      	mov	r6, r0
 8006858:	4620      	mov	r0, r4
 800685a:	460f      	mov	r7, r1
 800685c:	f7f9 fdd2 	bl	8000404 <__aeabi_i2d>
 8006860:	a367      	add	r3, pc, #412	; (adr r3, 8006a00 <_dtoa_r+0x2d8>)
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	f7f9 fe37 	bl	80004d8 <__aeabi_dmul>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	4630      	mov	r0, r6
 8006870:	4639      	mov	r1, r7
 8006872:	f7f9 fc7b 	bl	800016c <__adddf3>
 8006876:	4606      	mov	r6, r0
 8006878:	460f      	mov	r7, r1
 800687a:	f7fa f8dd 	bl	8000a38 <__aeabi_d2iz>
 800687e:	2200      	movs	r2, #0
 8006880:	4681      	mov	r9, r0
 8006882:	2300      	movs	r3, #0
 8006884:	4630      	mov	r0, r6
 8006886:	4639      	mov	r1, r7
 8006888:	f7fa f898 	bl	80009bc <__aeabi_dcmplt>
 800688c:	b148      	cbz	r0, 80068a2 <_dtoa_r+0x17a>
 800688e:	4648      	mov	r0, r9
 8006890:	f7f9 fdb8 	bl	8000404 <__aeabi_i2d>
 8006894:	4632      	mov	r2, r6
 8006896:	463b      	mov	r3, r7
 8006898:	f7fa f886 	bl	80009a8 <__aeabi_dcmpeq>
 800689c:	b908      	cbnz	r0, 80068a2 <_dtoa_r+0x17a>
 800689e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80068a2:	f1b9 0f16 	cmp.w	r9, #22
 80068a6:	d857      	bhi.n	8006958 <_dtoa_r+0x230>
 80068a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068ac:	4b5d      	ldr	r3, [pc, #372]	; (8006a24 <_dtoa_r+0x2fc>)
 80068ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f7fa f881 	bl	80009bc <__aeabi_dcmplt>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d04e      	beq.n	800695c <_dtoa_r+0x234>
 80068be:	2300      	movs	r3, #0
 80068c0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80068c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80068c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80068c8:	1b1c      	subs	r4, r3, r4
 80068ca:	1e63      	subs	r3, r4, #1
 80068cc:	9309      	str	r3, [sp, #36]	; 0x24
 80068ce:	bf49      	itett	mi
 80068d0:	f1c4 0301 	rsbmi	r3, r4, #1
 80068d4:	2300      	movpl	r3, #0
 80068d6:	9306      	strmi	r3, [sp, #24]
 80068d8:	2300      	movmi	r3, #0
 80068da:	bf54      	ite	pl
 80068dc:	9306      	strpl	r3, [sp, #24]
 80068de:	9309      	strmi	r3, [sp, #36]	; 0x24
 80068e0:	f1b9 0f00 	cmp.w	r9, #0
 80068e4:	db3c      	blt.n	8006960 <_dtoa_r+0x238>
 80068e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80068ec:	444b      	add	r3, r9
 80068ee:	9309      	str	r3, [sp, #36]	; 0x24
 80068f0:	2300      	movs	r3, #0
 80068f2:	930a      	str	r3, [sp, #40]	; 0x28
 80068f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068f6:	2b09      	cmp	r3, #9
 80068f8:	d86c      	bhi.n	80069d4 <_dtoa_r+0x2ac>
 80068fa:	2b05      	cmp	r3, #5
 80068fc:	bfc4      	itt	gt
 80068fe:	3b04      	subgt	r3, #4
 8006900:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006902:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006904:	bfc8      	it	gt
 8006906:	2400      	movgt	r4, #0
 8006908:	f1a3 0302 	sub.w	r3, r3, #2
 800690c:	bfd8      	it	le
 800690e:	2401      	movle	r4, #1
 8006910:	2b03      	cmp	r3, #3
 8006912:	f200 808b 	bhi.w	8006a2c <_dtoa_r+0x304>
 8006916:	e8df f003 	tbb	[pc, r3]
 800691a:	4f2d      	.short	0x4f2d
 800691c:	5b4d      	.short	0x5b4d
 800691e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006922:	441c      	add	r4, r3
 8006924:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006928:	2b20      	cmp	r3, #32
 800692a:	bfc3      	ittte	gt
 800692c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006930:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006934:	fa09 f303 	lslgt.w	r3, r9, r3
 8006938:	f1c3 0320 	rsble	r3, r3, #32
 800693c:	bfc6      	itte	gt
 800693e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006942:	4318      	orrgt	r0, r3
 8006944:	fa06 f003 	lslle.w	r0, r6, r3
 8006948:	f7f9 fd4c 	bl	80003e4 <__aeabi_ui2d>
 800694c:	2301      	movs	r3, #1
 800694e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006952:	3c01      	subs	r4, #1
 8006954:	9313      	str	r3, [sp, #76]	; 0x4c
 8006956:	e770      	b.n	800683a <_dtoa_r+0x112>
 8006958:	2301      	movs	r3, #1
 800695a:	e7b3      	b.n	80068c4 <_dtoa_r+0x19c>
 800695c:	900f      	str	r0, [sp, #60]	; 0x3c
 800695e:	e7b2      	b.n	80068c6 <_dtoa_r+0x19e>
 8006960:	9b06      	ldr	r3, [sp, #24]
 8006962:	eba3 0309 	sub.w	r3, r3, r9
 8006966:	9306      	str	r3, [sp, #24]
 8006968:	f1c9 0300 	rsb	r3, r9, #0
 800696c:	930a      	str	r3, [sp, #40]	; 0x28
 800696e:	2300      	movs	r3, #0
 8006970:	930e      	str	r3, [sp, #56]	; 0x38
 8006972:	e7bf      	b.n	80068f4 <_dtoa_r+0x1cc>
 8006974:	2300      	movs	r3, #0
 8006976:	930b      	str	r3, [sp, #44]	; 0x2c
 8006978:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800697a:	2b00      	cmp	r3, #0
 800697c:	dc59      	bgt.n	8006a32 <_dtoa_r+0x30a>
 800697e:	f04f 0b01 	mov.w	fp, #1
 8006982:	465b      	mov	r3, fp
 8006984:	f8cd b008 	str.w	fp, [sp, #8]
 8006988:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800698c:	2200      	movs	r2, #0
 800698e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006990:	6042      	str	r2, [r0, #4]
 8006992:	2204      	movs	r2, #4
 8006994:	f102 0614 	add.w	r6, r2, #20
 8006998:	429e      	cmp	r6, r3
 800699a:	6841      	ldr	r1, [r0, #4]
 800699c:	d94f      	bls.n	8006a3e <_dtoa_r+0x316>
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 fcca 	bl	8007338 <_Balloc>
 80069a4:	9008      	str	r0, [sp, #32]
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d14d      	bne.n	8006a46 <_dtoa_r+0x31e>
 80069aa:	4602      	mov	r2, r0
 80069ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80069b0:	4b1d      	ldr	r3, [pc, #116]	; (8006a28 <_dtoa_r+0x300>)
 80069b2:	e6cd      	b.n	8006750 <_dtoa_r+0x28>
 80069b4:	2301      	movs	r3, #1
 80069b6:	e7de      	b.n	8006976 <_dtoa_r+0x24e>
 80069b8:	2300      	movs	r3, #0
 80069ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80069bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069be:	eb09 0b03 	add.w	fp, r9, r3
 80069c2:	f10b 0301 	add.w	r3, fp, #1
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	9302      	str	r3, [sp, #8]
 80069ca:	bfb8      	it	lt
 80069cc:	2301      	movlt	r3, #1
 80069ce:	e7dd      	b.n	800698c <_dtoa_r+0x264>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e7f2      	b.n	80069ba <_dtoa_r+0x292>
 80069d4:	2401      	movs	r4, #1
 80069d6:	2300      	movs	r3, #0
 80069d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80069da:	9322      	str	r3, [sp, #136]	; 0x88
 80069dc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80069e0:	2200      	movs	r2, #0
 80069e2:	2312      	movs	r3, #18
 80069e4:	f8cd b008 	str.w	fp, [sp, #8]
 80069e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80069ea:	e7cf      	b.n	800698c <_dtoa_r+0x264>
 80069ec:	f3af 8000 	nop.w
 80069f0:	636f4361 	.word	0x636f4361
 80069f4:	3fd287a7 	.word	0x3fd287a7
 80069f8:	8b60c8b3 	.word	0x8b60c8b3
 80069fc:	3fc68a28 	.word	0x3fc68a28
 8006a00:	509f79fb 	.word	0x509f79fb
 8006a04:	3fd34413 	.word	0x3fd34413
 8006a08:	08008b7d 	.word	0x08008b7d
 8006a0c:	08008b94 	.word	0x08008b94
 8006a10:	7ff00000 	.word	0x7ff00000
 8006a14:	08008b79 	.word	0x08008b79
 8006a18:	08008b70 	.word	0x08008b70
 8006a1c:	08008b4d 	.word	0x08008b4d
 8006a20:	3ff80000 	.word	0x3ff80000
 8006a24:	08008c90 	.word	0x08008c90
 8006a28:	08008bf3 	.word	0x08008bf3
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a30:	e7d4      	b.n	80069dc <_dtoa_r+0x2b4>
 8006a32:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006a36:	465b      	mov	r3, fp
 8006a38:	f8cd b008 	str.w	fp, [sp, #8]
 8006a3c:	e7a6      	b.n	800698c <_dtoa_r+0x264>
 8006a3e:	3101      	adds	r1, #1
 8006a40:	6041      	str	r1, [r0, #4]
 8006a42:	0052      	lsls	r2, r2, #1
 8006a44:	e7a6      	b.n	8006994 <_dtoa_r+0x26c>
 8006a46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a48:	9a08      	ldr	r2, [sp, #32]
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	9b02      	ldr	r3, [sp, #8]
 8006a4e:	2b0e      	cmp	r3, #14
 8006a50:	f200 80a8 	bhi.w	8006ba4 <_dtoa_r+0x47c>
 8006a54:	2c00      	cmp	r4, #0
 8006a56:	f000 80a5 	beq.w	8006ba4 <_dtoa_r+0x47c>
 8006a5a:	f1b9 0f00 	cmp.w	r9, #0
 8006a5e:	dd34      	ble.n	8006aca <_dtoa_r+0x3a2>
 8006a60:	4a9a      	ldr	r2, [pc, #616]	; (8006ccc <_dtoa_r+0x5a4>)
 8006a62:	f009 030f 	and.w	r3, r9, #15
 8006a66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a6a:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006a6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006a76:	ea4f 1429 	mov.w	r4, r9, asr #4
 8006a7a:	d016      	beq.n	8006aaa <_dtoa_r+0x382>
 8006a7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a80:	4b93      	ldr	r3, [pc, #588]	; (8006cd0 <_dtoa_r+0x5a8>)
 8006a82:	2703      	movs	r7, #3
 8006a84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a88:	f7f9 fe50 	bl	800072c <__aeabi_ddiv>
 8006a8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a90:	f004 040f 	and.w	r4, r4, #15
 8006a94:	4e8e      	ldr	r6, [pc, #568]	; (8006cd0 <_dtoa_r+0x5a8>)
 8006a96:	b954      	cbnz	r4, 8006aae <_dtoa_r+0x386>
 8006a98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aa0:	f7f9 fe44 	bl	800072c <__aeabi_ddiv>
 8006aa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006aa8:	e029      	b.n	8006afe <_dtoa_r+0x3d6>
 8006aaa:	2702      	movs	r7, #2
 8006aac:	e7f2      	b.n	8006a94 <_dtoa_r+0x36c>
 8006aae:	07e1      	lsls	r1, r4, #31
 8006ab0:	d508      	bpl.n	8006ac4 <_dtoa_r+0x39c>
 8006ab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ab6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006aba:	f7f9 fd0d 	bl	80004d8 <__aeabi_dmul>
 8006abe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ac2:	3701      	adds	r7, #1
 8006ac4:	1064      	asrs	r4, r4, #1
 8006ac6:	3608      	adds	r6, #8
 8006ac8:	e7e5      	b.n	8006a96 <_dtoa_r+0x36e>
 8006aca:	f000 80a5 	beq.w	8006c18 <_dtoa_r+0x4f0>
 8006ace:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ad2:	f1c9 0400 	rsb	r4, r9, #0
 8006ad6:	4b7d      	ldr	r3, [pc, #500]	; (8006ccc <_dtoa_r+0x5a4>)
 8006ad8:	f004 020f 	and.w	r2, r4, #15
 8006adc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae4:	f7f9 fcf8 	bl	80004d8 <__aeabi_dmul>
 8006ae8:	2702      	movs	r7, #2
 8006aea:	2300      	movs	r3, #0
 8006aec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006af0:	4e77      	ldr	r6, [pc, #476]	; (8006cd0 <_dtoa_r+0x5a8>)
 8006af2:	1124      	asrs	r4, r4, #4
 8006af4:	2c00      	cmp	r4, #0
 8006af6:	f040 8084 	bne.w	8006c02 <_dtoa_r+0x4da>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1d2      	bne.n	8006aa4 <_dtoa_r+0x37c>
 8006afe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 808b 	beq.w	8006c1c <_dtoa_r+0x4f4>
 8006b06:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006b0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006b0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b12:	2200      	movs	r2, #0
 8006b14:	4b6f      	ldr	r3, [pc, #444]	; (8006cd4 <_dtoa_r+0x5ac>)
 8006b16:	f7f9 ff51 	bl	80009bc <__aeabi_dcmplt>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d07e      	beq.n	8006c1c <_dtoa_r+0x4f4>
 8006b1e:	9b02      	ldr	r3, [sp, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d07b      	beq.n	8006c1c <_dtoa_r+0x4f4>
 8006b24:	f1bb 0f00 	cmp.w	fp, #0
 8006b28:	dd38      	ble.n	8006b9c <_dtoa_r+0x474>
 8006b2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b2e:	2200      	movs	r2, #0
 8006b30:	4b69      	ldr	r3, [pc, #420]	; (8006cd8 <_dtoa_r+0x5b0>)
 8006b32:	f7f9 fcd1 	bl	80004d8 <__aeabi_dmul>
 8006b36:	465c      	mov	r4, fp
 8006b38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b3c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8006b40:	3701      	adds	r7, #1
 8006b42:	4638      	mov	r0, r7
 8006b44:	f7f9 fc5e 	bl	8000404 <__aeabi_i2d>
 8006b48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b4c:	f7f9 fcc4 	bl	80004d8 <__aeabi_dmul>
 8006b50:	2200      	movs	r2, #0
 8006b52:	4b62      	ldr	r3, [pc, #392]	; (8006cdc <_dtoa_r+0x5b4>)
 8006b54:	f7f9 fb0a 	bl	800016c <__adddf3>
 8006b58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006b5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b60:	9611      	str	r6, [sp, #68]	; 0x44
 8006b62:	2c00      	cmp	r4, #0
 8006b64:	d15d      	bne.n	8006c22 <_dtoa_r+0x4fa>
 8006b66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	4b5c      	ldr	r3, [pc, #368]	; (8006ce0 <_dtoa_r+0x5b8>)
 8006b6e:	f7f9 fafb 	bl	8000168 <__aeabi_dsub>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b7a:	4633      	mov	r3, r6
 8006b7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b7e:	f7f9 ff3b 	bl	80009f8 <__aeabi_dcmpgt>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	f040 829e 	bne.w	80070c4 <_dtoa_r+0x99c>
 8006b88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006b92:	f7f9 ff13 	bl	80009bc <__aeabi_dcmplt>
 8006b96:	2800      	cmp	r0, #0
 8006b98:	f040 8292 	bne.w	80070c0 <_dtoa_r+0x998>
 8006b9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006ba0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006ba4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f2c0 8153 	blt.w	8006e52 <_dtoa_r+0x72a>
 8006bac:	f1b9 0f0e 	cmp.w	r9, #14
 8006bb0:	f300 814f 	bgt.w	8006e52 <_dtoa_r+0x72a>
 8006bb4:	4b45      	ldr	r3, [pc, #276]	; (8006ccc <_dtoa_r+0x5a4>)
 8006bb6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006bba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006bbe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006bc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f280 80db 	bge.w	8006d80 <_dtoa_r+0x658>
 8006bca:	9b02      	ldr	r3, [sp, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f300 80d7 	bgt.w	8006d80 <_dtoa_r+0x658>
 8006bd2:	f040 8274 	bne.w	80070be <_dtoa_r+0x996>
 8006bd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4b40      	ldr	r3, [pc, #256]	; (8006ce0 <_dtoa_r+0x5b8>)
 8006bde:	f7f9 fc7b 	bl	80004d8 <__aeabi_dmul>
 8006be2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006be6:	f7f9 fefd 	bl	80009e4 <__aeabi_dcmpge>
 8006bea:	9c02      	ldr	r4, [sp, #8]
 8006bec:	4626      	mov	r6, r4
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f040 824a 	bne.w	8007088 <_dtoa_r+0x960>
 8006bf4:	2331      	movs	r3, #49	; 0x31
 8006bf6:	9f08      	ldr	r7, [sp, #32]
 8006bf8:	f109 0901 	add.w	r9, r9, #1
 8006bfc:	f807 3b01 	strb.w	r3, [r7], #1
 8006c00:	e246      	b.n	8007090 <_dtoa_r+0x968>
 8006c02:	07e2      	lsls	r2, r4, #31
 8006c04:	d505      	bpl.n	8006c12 <_dtoa_r+0x4ea>
 8006c06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c0a:	f7f9 fc65 	bl	80004d8 <__aeabi_dmul>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	3701      	adds	r7, #1
 8006c12:	1064      	asrs	r4, r4, #1
 8006c14:	3608      	adds	r6, #8
 8006c16:	e76d      	b.n	8006af4 <_dtoa_r+0x3cc>
 8006c18:	2702      	movs	r7, #2
 8006c1a:	e770      	b.n	8006afe <_dtoa_r+0x3d6>
 8006c1c:	46c8      	mov	r8, r9
 8006c1e:	9c02      	ldr	r4, [sp, #8]
 8006c20:	e78f      	b.n	8006b42 <_dtoa_r+0x41a>
 8006c22:	9908      	ldr	r1, [sp, #32]
 8006c24:	4b29      	ldr	r3, [pc, #164]	; (8006ccc <_dtoa_r+0x5a4>)
 8006c26:	4421      	add	r1, r4
 8006c28:	9112      	str	r1, [sp, #72]	; 0x48
 8006c2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c30:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006c34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c38:	2900      	cmp	r1, #0
 8006c3a:	d055      	beq.n	8006ce8 <_dtoa_r+0x5c0>
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	4929      	ldr	r1, [pc, #164]	; (8006ce4 <_dtoa_r+0x5bc>)
 8006c40:	f7f9 fd74 	bl	800072c <__aeabi_ddiv>
 8006c44:	463b      	mov	r3, r7
 8006c46:	4632      	mov	r2, r6
 8006c48:	f7f9 fa8e 	bl	8000168 <__aeabi_dsub>
 8006c4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c50:	9f08      	ldr	r7, [sp, #32]
 8006c52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c56:	f7f9 feef 	bl	8000a38 <__aeabi_d2iz>
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	f7f9 fbd2 	bl	8000404 <__aeabi_i2d>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c68:	f7f9 fa7e 	bl	8000168 <__aeabi_dsub>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	3430      	adds	r4, #48	; 0x30
 8006c72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c7a:	f807 4b01 	strb.w	r4, [r7], #1
 8006c7e:	f7f9 fe9d 	bl	80009bc <__aeabi_dcmplt>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d174      	bne.n	8006d70 <_dtoa_r+0x648>
 8006c86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	4911      	ldr	r1, [pc, #68]	; (8006cd4 <_dtoa_r+0x5ac>)
 8006c8e:	f7f9 fa6b 	bl	8000168 <__aeabi_dsub>
 8006c92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c96:	f7f9 fe91 	bl	80009bc <__aeabi_dcmplt>
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	f040 80b6 	bne.w	8006e0c <_dtoa_r+0x6e4>
 8006ca0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ca2:	429f      	cmp	r7, r3
 8006ca4:	f43f af7a 	beq.w	8006b9c <_dtoa_r+0x474>
 8006ca8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006cac:	2200      	movs	r2, #0
 8006cae:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <_dtoa_r+0x5b0>)
 8006cb0:	f7f9 fc12 	bl	80004d8 <__aeabi_dmul>
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006cba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cbe:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <_dtoa_r+0x5b0>)
 8006cc0:	f7f9 fc0a 	bl	80004d8 <__aeabi_dmul>
 8006cc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cc8:	e7c3      	b.n	8006c52 <_dtoa_r+0x52a>
 8006cca:	bf00      	nop
 8006ccc:	08008c90 	.word	0x08008c90
 8006cd0:	08008c68 	.word	0x08008c68
 8006cd4:	3ff00000 	.word	0x3ff00000
 8006cd8:	40240000 	.word	0x40240000
 8006cdc:	401c0000 	.word	0x401c0000
 8006ce0:	40140000 	.word	0x40140000
 8006ce4:	3fe00000 	.word	0x3fe00000
 8006ce8:	4630      	mov	r0, r6
 8006cea:	4639      	mov	r1, r7
 8006cec:	f7f9 fbf4 	bl	80004d8 <__aeabi_dmul>
 8006cf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cf2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006cf6:	9c08      	ldr	r4, [sp, #32]
 8006cf8:	9314      	str	r3, [sp, #80]	; 0x50
 8006cfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cfe:	f7f9 fe9b 	bl	8000a38 <__aeabi_d2iz>
 8006d02:	9015      	str	r0, [sp, #84]	; 0x54
 8006d04:	f7f9 fb7e 	bl	8000404 <__aeabi_i2d>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d10:	f7f9 fa2a 	bl	8000168 <__aeabi_dsub>
 8006d14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d16:	4606      	mov	r6, r0
 8006d18:	3330      	adds	r3, #48	; 0x30
 8006d1a:	f804 3b01 	strb.w	r3, [r4], #1
 8006d1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d20:	460f      	mov	r7, r1
 8006d22:	429c      	cmp	r4, r3
 8006d24:	f04f 0200 	mov.w	r2, #0
 8006d28:	d124      	bne.n	8006d74 <_dtoa_r+0x64c>
 8006d2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d2e:	4bb3      	ldr	r3, [pc, #716]	; (8006ffc <_dtoa_r+0x8d4>)
 8006d30:	f7f9 fa1c 	bl	800016c <__adddf3>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4630      	mov	r0, r6
 8006d3a:	4639      	mov	r1, r7
 8006d3c:	f7f9 fe5c 	bl	80009f8 <__aeabi_dcmpgt>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d162      	bne.n	8006e0a <_dtoa_r+0x6e2>
 8006d44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d48:	2000      	movs	r0, #0
 8006d4a:	49ac      	ldr	r1, [pc, #688]	; (8006ffc <_dtoa_r+0x8d4>)
 8006d4c:	f7f9 fa0c 	bl	8000168 <__aeabi_dsub>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4630      	mov	r0, r6
 8006d56:	4639      	mov	r1, r7
 8006d58:	f7f9 fe30 	bl	80009bc <__aeabi_dcmplt>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	f43f af1d 	beq.w	8006b9c <_dtoa_r+0x474>
 8006d62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006d64:	1e7b      	subs	r3, r7, #1
 8006d66:	9314      	str	r3, [sp, #80]	; 0x50
 8006d68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006d6c:	2b30      	cmp	r3, #48	; 0x30
 8006d6e:	d0f8      	beq.n	8006d62 <_dtoa_r+0x63a>
 8006d70:	46c1      	mov	r9, r8
 8006d72:	e03a      	b.n	8006dea <_dtoa_r+0x6c2>
 8006d74:	4ba2      	ldr	r3, [pc, #648]	; (8007000 <_dtoa_r+0x8d8>)
 8006d76:	f7f9 fbaf 	bl	80004d8 <__aeabi_dmul>
 8006d7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d7e:	e7bc      	b.n	8006cfa <_dtoa_r+0x5d2>
 8006d80:	9f08      	ldr	r7, [sp, #32]
 8006d82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d8a:	f7f9 fccf 	bl	800072c <__aeabi_ddiv>
 8006d8e:	f7f9 fe53 	bl	8000a38 <__aeabi_d2iz>
 8006d92:	4604      	mov	r4, r0
 8006d94:	f7f9 fb36 	bl	8000404 <__aeabi_i2d>
 8006d98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d9c:	f7f9 fb9c 	bl	80004d8 <__aeabi_dmul>
 8006da0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006da4:	460b      	mov	r3, r1
 8006da6:	4602      	mov	r2, r0
 8006da8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dac:	f7f9 f9dc 	bl	8000168 <__aeabi_dsub>
 8006db0:	f807 6b01 	strb.w	r6, [r7], #1
 8006db4:	9e08      	ldr	r6, [sp, #32]
 8006db6:	9b02      	ldr	r3, [sp, #8]
 8006db8:	1bbe      	subs	r6, r7, r6
 8006dba:	42b3      	cmp	r3, r6
 8006dbc:	d13a      	bne.n	8006e34 <_dtoa_r+0x70c>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	f7f9 f9d3 	bl	800016c <__adddf3>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006dce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dd2:	f7f9 fe11 	bl	80009f8 <__aeabi_dcmpgt>
 8006dd6:	bb58      	cbnz	r0, 8006e30 <_dtoa_r+0x708>
 8006dd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006de0:	f7f9 fde2 	bl	80009a8 <__aeabi_dcmpeq>
 8006de4:	b108      	cbz	r0, 8006dea <_dtoa_r+0x6c2>
 8006de6:	07e1      	lsls	r1, r4, #31
 8006de8:	d422      	bmi.n	8006e30 <_dtoa_r+0x708>
 8006dea:	4628      	mov	r0, r5
 8006dec:	4651      	mov	r1, sl
 8006dee:	f000 fae3 	bl	80073b8 <_Bfree>
 8006df2:	2300      	movs	r3, #0
 8006df4:	703b      	strb	r3, [r7, #0]
 8006df6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006df8:	f109 0001 	add.w	r0, r9, #1
 8006dfc:	6018      	str	r0, [r3, #0]
 8006dfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f43f acdf 	beq.w	80067c4 <_dtoa_r+0x9c>
 8006e06:	601f      	str	r7, [r3, #0]
 8006e08:	e4dc      	b.n	80067c4 <_dtoa_r+0x9c>
 8006e0a:	4627      	mov	r7, r4
 8006e0c:	463b      	mov	r3, r7
 8006e0e:	461f      	mov	r7, r3
 8006e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e14:	2a39      	cmp	r2, #57	; 0x39
 8006e16:	d107      	bne.n	8006e28 <_dtoa_r+0x700>
 8006e18:	9a08      	ldr	r2, [sp, #32]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d1f7      	bne.n	8006e0e <_dtoa_r+0x6e6>
 8006e1e:	2230      	movs	r2, #48	; 0x30
 8006e20:	9908      	ldr	r1, [sp, #32]
 8006e22:	f108 0801 	add.w	r8, r8, #1
 8006e26:	700a      	strb	r2, [r1, #0]
 8006e28:	781a      	ldrb	r2, [r3, #0]
 8006e2a:	3201      	adds	r2, #1
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	e79f      	b.n	8006d70 <_dtoa_r+0x648>
 8006e30:	46c8      	mov	r8, r9
 8006e32:	e7eb      	b.n	8006e0c <_dtoa_r+0x6e4>
 8006e34:	2200      	movs	r2, #0
 8006e36:	4b72      	ldr	r3, [pc, #456]	; (8007000 <_dtoa_r+0x8d8>)
 8006e38:	f7f9 fb4e 	bl	80004d8 <__aeabi_dmul>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e44:	2200      	movs	r2, #0
 8006e46:	2300      	movs	r3, #0
 8006e48:	f7f9 fdae 	bl	80009a8 <__aeabi_dcmpeq>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d098      	beq.n	8006d82 <_dtoa_r+0x65a>
 8006e50:	e7cb      	b.n	8006dea <_dtoa_r+0x6c2>
 8006e52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	f000 80cd 	beq.w	8006ff4 <_dtoa_r+0x8cc>
 8006e5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006e5c:	2a01      	cmp	r2, #1
 8006e5e:	f300 80af 	bgt.w	8006fc0 <_dtoa_r+0x898>
 8006e62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e64:	2a00      	cmp	r2, #0
 8006e66:	f000 80a7 	beq.w	8006fb8 <_dtoa_r+0x890>
 8006e6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e70:	9f06      	ldr	r7, [sp, #24]
 8006e72:	9a06      	ldr	r2, [sp, #24]
 8006e74:	2101      	movs	r1, #1
 8006e76:	441a      	add	r2, r3
 8006e78:	9206      	str	r2, [sp, #24]
 8006e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	441a      	add	r2, r3
 8006e80:	9209      	str	r2, [sp, #36]	; 0x24
 8006e82:	f000 fb53 	bl	800752c <__i2b>
 8006e86:	4606      	mov	r6, r0
 8006e88:	2f00      	cmp	r7, #0
 8006e8a:	dd0c      	ble.n	8006ea6 <_dtoa_r+0x77e>
 8006e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	dd09      	ble.n	8006ea6 <_dtoa_r+0x77e>
 8006e92:	42bb      	cmp	r3, r7
 8006e94:	bfa8      	it	ge
 8006e96:	463b      	movge	r3, r7
 8006e98:	9a06      	ldr	r2, [sp, #24]
 8006e9a:	1aff      	subs	r7, r7, r3
 8006e9c:	1ad2      	subs	r2, r2, r3
 8006e9e:	9206      	str	r2, [sp, #24]
 8006ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea8:	b1f3      	cbz	r3, 8006ee8 <_dtoa_r+0x7c0>
 8006eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 80a9 	beq.w	8007004 <_dtoa_r+0x8dc>
 8006eb2:	2c00      	cmp	r4, #0
 8006eb4:	dd10      	ble.n	8006ed8 <_dtoa_r+0x7b0>
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4622      	mov	r2, r4
 8006eba:	4628      	mov	r0, r5
 8006ebc:	f000 fbf0 	bl	80076a0 <__pow5mult>
 8006ec0:	4652      	mov	r2, sl
 8006ec2:	4601      	mov	r1, r0
 8006ec4:	4606      	mov	r6, r0
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f000 fb46 	bl	8007558 <__multiply>
 8006ecc:	4680      	mov	r8, r0
 8006ece:	4651      	mov	r1, sl
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f000 fa71 	bl	80073b8 <_Bfree>
 8006ed6:	46c2      	mov	sl, r8
 8006ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eda:	1b1a      	subs	r2, r3, r4
 8006edc:	d004      	beq.n	8006ee8 <_dtoa_r+0x7c0>
 8006ede:	4651      	mov	r1, sl
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	f000 fbdd 	bl	80076a0 <__pow5mult>
 8006ee6:	4682      	mov	sl, r0
 8006ee8:	2101      	movs	r1, #1
 8006eea:	4628      	mov	r0, r5
 8006eec:	f000 fb1e 	bl	800752c <__i2b>
 8006ef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f340 8087 	ble.w	8007008 <_dtoa_r+0x8e0>
 8006efa:	461a      	mov	r2, r3
 8006efc:	4601      	mov	r1, r0
 8006efe:	4628      	mov	r0, r5
 8006f00:	f000 fbce 	bl	80076a0 <__pow5mult>
 8006f04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f06:	4604      	mov	r4, r0
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	f340 8080 	ble.w	800700e <_dtoa_r+0x8e6>
 8006f0e:	f04f 0800 	mov.w	r8, #0
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f18:	6918      	ldr	r0, [r3, #16]
 8006f1a:	f000 fab9 	bl	8007490 <__hi0bits>
 8006f1e:	f1c0 0020 	rsb	r0, r0, #32
 8006f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f24:	4418      	add	r0, r3
 8006f26:	f010 001f 	ands.w	r0, r0, #31
 8006f2a:	f000 8092 	beq.w	8007052 <_dtoa_r+0x92a>
 8006f2e:	f1c0 0320 	rsb	r3, r0, #32
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	f340 808a 	ble.w	800704c <_dtoa_r+0x924>
 8006f38:	f1c0 001c 	rsb	r0, r0, #28
 8006f3c:	9b06      	ldr	r3, [sp, #24]
 8006f3e:	4407      	add	r7, r0
 8006f40:	4403      	add	r3, r0
 8006f42:	9306      	str	r3, [sp, #24]
 8006f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f46:	4403      	add	r3, r0
 8006f48:	9309      	str	r3, [sp, #36]	; 0x24
 8006f4a:	9b06      	ldr	r3, [sp, #24]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dd05      	ble.n	8006f5c <_dtoa_r+0x834>
 8006f50:	4651      	mov	r1, sl
 8006f52:	461a      	mov	r2, r3
 8006f54:	4628      	mov	r0, r5
 8006f56:	f000 fbfd 	bl	8007754 <__lshift>
 8006f5a:	4682      	mov	sl, r0
 8006f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	dd05      	ble.n	8006f6e <_dtoa_r+0x846>
 8006f62:	4621      	mov	r1, r4
 8006f64:	461a      	mov	r2, r3
 8006f66:	4628      	mov	r0, r5
 8006f68:	f000 fbf4 	bl	8007754 <__lshift>
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d070      	beq.n	8007056 <_dtoa_r+0x92e>
 8006f74:	4621      	mov	r1, r4
 8006f76:	4650      	mov	r0, sl
 8006f78:	f000 fc58 	bl	800782c <__mcmp>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	da6a      	bge.n	8007056 <_dtoa_r+0x92e>
 8006f80:	2300      	movs	r3, #0
 8006f82:	4651      	mov	r1, sl
 8006f84:	220a      	movs	r2, #10
 8006f86:	4628      	mov	r0, r5
 8006f88:	f000 fa38 	bl	80073fc <__multadd>
 8006f8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f8e:	4682      	mov	sl, r0
 8006f90:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8193 	beq.w	80072c0 <_dtoa_r+0xb98>
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	220a      	movs	r2, #10
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	f000 fa2b 	bl	80073fc <__multadd>
 8006fa6:	f1bb 0f00 	cmp.w	fp, #0
 8006faa:	4606      	mov	r6, r0
 8006fac:	f300 8093 	bgt.w	80070d6 <_dtoa_r+0x9ae>
 8006fb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	dc57      	bgt.n	8007066 <_dtoa_r+0x93e>
 8006fb6:	e08e      	b.n	80070d6 <_dtoa_r+0x9ae>
 8006fb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006fba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006fbe:	e756      	b.n	8006e6e <_dtoa_r+0x746>
 8006fc0:	9b02      	ldr	r3, [sp, #8]
 8006fc2:	1e5c      	subs	r4, r3, #1
 8006fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc6:	42a3      	cmp	r3, r4
 8006fc8:	bfb7      	itett	lt
 8006fca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006fcc:	1b1c      	subge	r4, r3, r4
 8006fce:	1ae2      	sublt	r2, r4, r3
 8006fd0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006fd2:	bfbe      	ittt	lt
 8006fd4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006fd6:	189b      	addlt	r3, r3, r2
 8006fd8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006fda:	9b02      	ldr	r3, [sp, #8]
 8006fdc:	bfb8      	it	lt
 8006fde:	2400      	movlt	r4, #0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bfbb      	ittet	lt
 8006fe4:	9b06      	ldrlt	r3, [sp, #24]
 8006fe6:	9a02      	ldrlt	r2, [sp, #8]
 8006fe8:	9f06      	ldrge	r7, [sp, #24]
 8006fea:	1a9f      	sublt	r7, r3, r2
 8006fec:	bfac      	ite	ge
 8006fee:	9b02      	ldrge	r3, [sp, #8]
 8006ff0:	2300      	movlt	r3, #0
 8006ff2:	e73e      	b.n	8006e72 <_dtoa_r+0x74a>
 8006ff4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ff6:	9f06      	ldr	r7, [sp, #24]
 8006ff8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006ffa:	e745      	b.n	8006e88 <_dtoa_r+0x760>
 8006ffc:	3fe00000 	.word	0x3fe00000
 8007000:	40240000 	.word	0x40240000
 8007004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007006:	e76a      	b.n	8006ede <_dtoa_r+0x7b6>
 8007008:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800700a:	2b01      	cmp	r3, #1
 800700c:	dc19      	bgt.n	8007042 <_dtoa_r+0x91a>
 800700e:	9b04      	ldr	r3, [sp, #16]
 8007010:	b9bb      	cbnz	r3, 8007042 <_dtoa_r+0x91a>
 8007012:	9b05      	ldr	r3, [sp, #20]
 8007014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007018:	b99b      	cbnz	r3, 8007042 <_dtoa_r+0x91a>
 800701a:	9b05      	ldr	r3, [sp, #20]
 800701c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007020:	0d1b      	lsrs	r3, r3, #20
 8007022:	051b      	lsls	r3, r3, #20
 8007024:	b183      	cbz	r3, 8007048 <_dtoa_r+0x920>
 8007026:	f04f 0801 	mov.w	r8, #1
 800702a:	9b06      	ldr	r3, [sp, #24]
 800702c:	3301      	adds	r3, #1
 800702e:	9306      	str	r3, [sp, #24]
 8007030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007032:	3301      	adds	r3, #1
 8007034:	9309      	str	r3, [sp, #36]	; 0x24
 8007036:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007038:	2b00      	cmp	r3, #0
 800703a:	f47f af6a 	bne.w	8006f12 <_dtoa_r+0x7ea>
 800703e:	2001      	movs	r0, #1
 8007040:	e76f      	b.n	8006f22 <_dtoa_r+0x7fa>
 8007042:	f04f 0800 	mov.w	r8, #0
 8007046:	e7f6      	b.n	8007036 <_dtoa_r+0x90e>
 8007048:	4698      	mov	r8, r3
 800704a:	e7f4      	b.n	8007036 <_dtoa_r+0x90e>
 800704c:	f43f af7d 	beq.w	8006f4a <_dtoa_r+0x822>
 8007050:	4618      	mov	r0, r3
 8007052:	301c      	adds	r0, #28
 8007054:	e772      	b.n	8006f3c <_dtoa_r+0x814>
 8007056:	9b02      	ldr	r3, [sp, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	dc36      	bgt.n	80070ca <_dtoa_r+0x9a2>
 800705c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800705e:	2b02      	cmp	r3, #2
 8007060:	dd33      	ble.n	80070ca <_dtoa_r+0x9a2>
 8007062:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007066:	f1bb 0f00 	cmp.w	fp, #0
 800706a:	d10d      	bne.n	8007088 <_dtoa_r+0x960>
 800706c:	4621      	mov	r1, r4
 800706e:	465b      	mov	r3, fp
 8007070:	2205      	movs	r2, #5
 8007072:	4628      	mov	r0, r5
 8007074:	f000 f9c2 	bl	80073fc <__multadd>
 8007078:	4601      	mov	r1, r0
 800707a:	4604      	mov	r4, r0
 800707c:	4650      	mov	r0, sl
 800707e:	f000 fbd5 	bl	800782c <__mcmp>
 8007082:	2800      	cmp	r0, #0
 8007084:	f73f adb6 	bgt.w	8006bf4 <_dtoa_r+0x4cc>
 8007088:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800708a:	9f08      	ldr	r7, [sp, #32]
 800708c:	ea6f 0903 	mvn.w	r9, r3
 8007090:	f04f 0800 	mov.w	r8, #0
 8007094:	4621      	mov	r1, r4
 8007096:	4628      	mov	r0, r5
 8007098:	f000 f98e 	bl	80073b8 <_Bfree>
 800709c:	2e00      	cmp	r6, #0
 800709e:	f43f aea4 	beq.w	8006dea <_dtoa_r+0x6c2>
 80070a2:	f1b8 0f00 	cmp.w	r8, #0
 80070a6:	d005      	beq.n	80070b4 <_dtoa_r+0x98c>
 80070a8:	45b0      	cmp	r8, r6
 80070aa:	d003      	beq.n	80070b4 <_dtoa_r+0x98c>
 80070ac:	4641      	mov	r1, r8
 80070ae:	4628      	mov	r0, r5
 80070b0:	f000 f982 	bl	80073b8 <_Bfree>
 80070b4:	4631      	mov	r1, r6
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 f97e 	bl	80073b8 <_Bfree>
 80070bc:	e695      	b.n	8006dea <_dtoa_r+0x6c2>
 80070be:	2400      	movs	r4, #0
 80070c0:	4626      	mov	r6, r4
 80070c2:	e7e1      	b.n	8007088 <_dtoa_r+0x960>
 80070c4:	46c1      	mov	r9, r8
 80070c6:	4626      	mov	r6, r4
 80070c8:	e594      	b.n	8006bf4 <_dtoa_r+0x4cc>
 80070ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070cc:	f8dd b008 	ldr.w	fp, [sp, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 80fc 	beq.w	80072ce <_dtoa_r+0xba6>
 80070d6:	2f00      	cmp	r7, #0
 80070d8:	dd05      	ble.n	80070e6 <_dtoa_r+0x9be>
 80070da:	4631      	mov	r1, r6
 80070dc:	463a      	mov	r2, r7
 80070de:	4628      	mov	r0, r5
 80070e0:	f000 fb38 	bl	8007754 <__lshift>
 80070e4:	4606      	mov	r6, r0
 80070e6:	f1b8 0f00 	cmp.w	r8, #0
 80070ea:	d05c      	beq.n	80071a6 <_dtoa_r+0xa7e>
 80070ec:	4628      	mov	r0, r5
 80070ee:	6871      	ldr	r1, [r6, #4]
 80070f0:	f000 f922 	bl	8007338 <_Balloc>
 80070f4:	4607      	mov	r7, r0
 80070f6:	b928      	cbnz	r0, 8007104 <_dtoa_r+0x9dc>
 80070f8:	4602      	mov	r2, r0
 80070fa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80070fe:	4b7e      	ldr	r3, [pc, #504]	; (80072f8 <_dtoa_r+0xbd0>)
 8007100:	f7ff bb26 	b.w	8006750 <_dtoa_r+0x28>
 8007104:	6932      	ldr	r2, [r6, #16]
 8007106:	f106 010c 	add.w	r1, r6, #12
 800710a:	3202      	adds	r2, #2
 800710c:	0092      	lsls	r2, r2, #2
 800710e:	300c      	adds	r0, #12
 8007110:	f7fe fdc6 	bl	8005ca0 <memcpy>
 8007114:	2201      	movs	r2, #1
 8007116:	4639      	mov	r1, r7
 8007118:	4628      	mov	r0, r5
 800711a:	f000 fb1b 	bl	8007754 <__lshift>
 800711e:	46b0      	mov	r8, r6
 8007120:	4606      	mov	r6, r0
 8007122:	9b08      	ldr	r3, [sp, #32]
 8007124:	3301      	adds	r3, #1
 8007126:	9302      	str	r3, [sp, #8]
 8007128:	9b08      	ldr	r3, [sp, #32]
 800712a:	445b      	add	r3, fp
 800712c:	930a      	str	r3, [sp, #40]	; 0x28
 800712e:	9b04      	ldr	r3, [sp, #16]
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	9309      	str	r3, [sp, #36]	; 0x24
 8007136:	9b02      	ldr	r3, [sp, #8]
 8007138:	4621      	mov	r1, r4
 800713a:	4650      	mov	r0, sl
 800713c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007140:	f7ff fa64 	bl	800660c <quorem>
 8007144:	4603      	mov	r3, r0
 8007146:	4641      	mov	r1, r8
 8007148:	3330      	adds	r3, #48	; 0x30
 800714a:	9004      	str	r0, [sp, #16]
 800714c:	4650      	mov	r0, sl
 800714e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007150:	f000 fb6c 	bl	800782c <__mcmp>
 8007154:	4632      	mov	r2, r6
 8007156:	9006      	str	r0, [sp, #24]
 8007158:	4621      	mov	r1, r4
 800715a:	4628      	mov	r0, r5
 800715c:	f000 fb82 	bl	8007864 <__mdiff>
 8007160:	68c2      	ldr	r2, [r0, #12]
 8007162:	4607      	mov	r7, r0
 8007164:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007166:	bb02      	cbnz	r2, 80071aa <_dtoa_r+0xa82>
 8007168:	4601      	mov	r1, r0
 800716a:	4650      	mov	r0, sl
 800716c:	f000 fb5e 	bl	800782c <__mcmp>
 8007170:	4602      	mov	r2, r0
 8007172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007174:	4639      	mov	r1, r7
 8007176:	4628      	mov	r0, r5
 8007178:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800717c:	f000 f91c 	bl	80073b8 <_Bfree>
 8007180:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007184:	9f02      	ldr	r7, [sp, #8]
 8007186:	ea43 0102 	orr.w	r1, r3, r2
 800718a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718c:	430b      	orrs	r3, r1
 800718e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007190:	d10d      	bne.n	80071ae <_dtoa_r+0xa86>
 8007192:	2b39      	cmp	r3, #57	; 0x39
 8007194:	d027      	beq.n	80071e6 <_dtoa_r+0xabe>
 8007196:	9a06      	ldr	r2, [sp, #24]
 8007198:	2a00      	cmp	r2, #0
 800719a:	dd01      	ble.n	80071a0 <_dtoa_r+0xa78>
 800719c:	9b04      	ldr	r3, [sp, #16]
 800719e:	3331      	adds	r3, #49	; 0x31
 80071a0:	f88b 3000 	strb.w	r3, [fp]
 80071a4:	e776      	b.n	8007094 <_dtoa_r+0x96c>
 80071a6:	4630      	mov	r0, r6
 80071a8:	e7b9      	b.n	800711e <_dtoa_r+0x9f6>
 80071aa:	2201      	movs	r2, #1
 80071ac:	e7e2      	b.n	8007174 <_dtoa_r+0xa4c>
 80071ae:	9906      	ldr	r1, [sp, #24]
 80071b0:	2900      	cmp	r1, #0
 80071b2:	db04      	blt.n	80071be <_dtoa_r+0xa96>
 80071b4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80071b6:	4301      	orrs	r1, r0
 80071b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ba:	4301      	orrs	r1, r0
 80071bc:	d120      	bne.n	8007200 <_dtoa_r+0xad8>
 80071be:	2a00      	cmp	r2, #0
 80071c0:	ddee      	ble.n	80071a0 <_dtoa_r+0xa78>
 80071c2:	4651      	mov	r1, sl
 80071c4:	2201      	movs	r2, #1
 80071c6:	4628      	mov	r0, r5
 80071c8:	9302      	str	r3, [sp, #8]
 80071ca:	f000 fac3 	bl	8007754 <__lshift>
 80071ce:	4621      	mov	r1, r4
 80071d0:	4682      	mov	sl, r0
 80071d2:	f000 fb2b 	bl	800782c <__mcmp>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	9b02      	ldr	r3, [sp, #8]
 80071da:	dc02      	bgt.n	80071e2 <_dtoa_r+0xaba>
 80071dc:	d1e0      	bne.n	80071a0 <_dtoa_r+0xa78>
 80071de:	07da      	lsls	r2, r3, #31
 80071e0:	d5de      	bpl.n	80071a0 <_dtoa_r+0xa78>
 80071e2:	2b39      	cmp	r3, #57	; 0x39
 80071e4:	d1da      	bne.n	800719c <_dtoa_r+0xa74>
 80071e6:	2339      	movs	r3, #57	; 0x39
 80071e8:	f88b 3000 	strb.w	r3, [fp]
 80071ec:	463b      	mov	r3, r7
 80071ee:	461f      	mov	r7, r3
 80071f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80071f4:	3b01      	subs	r3, #1
 80071f6:	2a39      	cmp	r2, #57	; 0x39
 80071f8:	d050      	beq.n	800729c <_dtoa_r+0xb74>
 80071fa:	3201      	adds	r2, #1
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	e749      	b.n	8007094 <_dtoa_r+0x96c>
 8007200:	2a00      	cmp	r2, #0
 8007202:	dd03      	ble.n	800720c <_dtoa_r+0xae4>
 8007204:	2b39      	cmp	r3, #57	; 0x39
 8007206:	d0ee      	beq.n	80071e6 <_dtoa_r+0xabe>
 8007208:	3301      	adds	r3, #1
 800720a:	e7c9      	b.n	80071a0 <_dtoa_r+0xa78>
 800720c:	9a02      	ldr	r2, [sp, #8]
 800720e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007210:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007214:	428a      	cmp	r2, r1
 8007216:	d02a      	beq.n	800726e <_dtoa_r+0xb46>
 8007218:	4651      	mov	r1, sl
 800721a:	2300      	movs	r3, #0
 800721c:	220a      	movs	r2, #10
 800721e:	4628      	mov	r0, r5
 8007220:	f000 f8ec 	bl	80073fc <__multadd>
 8007224:	45b0      	cmp	r8, r6
 8007226:	4682      	mov	sl, r0
 8007228:	f04f 0300 	mov.w	r3, #0
 800722c:	f04f 020a 	mov.w	r2, #10
 8007230:	4641      	mov	r1, r8
 8007232:	4628      	mov	r0, r5
 8007234:	d107      	bne.n	8007246 <_dtoa_r+0xb1e>
 8007236:	f000 f8e1 	bl	80073fc <__multadd>
 800723a:	4680      	mov	r8, r0
 800723c:	4606      	mov	r6, r0
 800723e:	9b02      	ldr	r3, [sp, #8]
 8007240:	3301      	adds	r3, #1
 8007242:	9302      	str	r3, [sp, #8]
 8007244:	e777      	b.n	8007136 <_dtoa_r+0xa0e>
 8007246:	f000 f8d9 	bl	80073fc <__multadd>
 800724a:	4631      	mov	r1, r6
 800724c:	4680      	mov	r8, r0
 800724e:	2300      	movs	r3, #0
 8007250:	220a      	movs	r2, #10
 8007252:	4628      	mov	r0, r5
 8007254:	f000 f8d2 	bl	80073fc <__multadd>
 8007258:	4606      	mov	r6, r0
 800725a:	e7f0      	b.n	800723e <_dtoa_r+0xb16>
 800725c:	f1bb 0f00 	cmp.w	fp, #0
 8007260:	bfcc      	ite	gt
 8007262:	465f      	movgt	r7, fp
 8007264:	2701      	movle	r7, #1
 8007266:	f04f 0800 	mov.w	r8, #0
 800726a:	9a08      	ldr	r2, [sp, #32]
 800726c:	4417      	add	r7, r2
 800726e:	4651      	mov	r1, sl
 8007270:	2201      	movs	r2, #1
 8007272:	4628      	mov	r0, r5
 8007274:	9302      	str	r3, [sp, #8]
 8007276:	f000 fa6d 	bl	8007754 <__lshift>
 800727a:	4621      	mov	r1, r4
 800727c:	4682      	mov	sl, r0
 800727e:	f000 fad5 	bl	800782c <__mcmp>
 8007282:	2800      	cmp	r0, #0
 8007284:	dcb2      	bgt.n	80071ec <_dtoa_r+0xac4>
 8007286:	d102      	bne.n	800728e <_dtoa_r+0xb66>
 8007288:	9b02      	ldr	r3, [sp, #8]
 800728a:	07db      	lsls	r3, r3, #31
 800728c:	d4ae      	bmi.n	80071ec <_dtoa_r+0xac4>
 800728e:	463b      	mov	r3, r7
 8007290:	461f      	mov	r7, r3
 8007292:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007296:	2a30      	cmp	r2, #48	; 0x30
 8007298:	d0fa      	beq.n	8007290 <_dtoa_r+0xb68>
 800729a:	e6fb      	b.n	8007094 <_dtoa_r+0x96c>
 800729c:	9a08      	ldr	r2, [sp, #32]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d1a5      	bne.n	80071ee <_dtoa_r+0xac6>
 80072a2:	2331      	movs	r3, #49	; 0x31
 80072a4:	f109 0901 	add.w	r9, r9, #1
 80072a8:	7013      	strb	r3, [r2, #0]
 80072aa:	e6f3      	b.n	8007094 <_dtoa_r+0x96c>
 80072ac:	4b13      	ldr	r3, [pc, #76]	; (80072fc <_dtoa_r+0xbd4>)
 80072ae:	f7ff baa7 	b.w	8006800 <_dtoa_r+0xd8>
 80072b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f47f aa80 	bne.w	80067ba <_dtoa_r+0x92>
 80072ba:	4b11      	ldr	r3, [pc, #68]	; (8007300 <_dtoa_r+0xbd8>)
 80072bc:	f7ff baa0 	b.w	8006800 <_dtoa_r+0xd8>
 80072c0:	f1bb 0f00 	cmp.w	fp, #0
 80072c4:	dc03      	bgt.n	80072ce <_dtoa_r+0xba6>
 80072c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	f73f aecc 	bgt.w	8007066 <_dtoa_r+0x93e>
 80072ce:	9f08      	ldr	r7, [sp, #32]
 80072d0:	4621      	mov	r1, r4
 80072d2:	4650      	mov	r0, sl
 80072d4:	f7ff f99a 	bl	800660c <quorem>
 80072d8:	9a08      	ldr	r2, [sp, #32]
 80072da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80072de:	f807 3b01 	strb.w	r3, [r7], #1
 80072e2:	1aba      	subs	r2, r7, r2
 80072e4:	4593      	cmp	fp, r2
 80072e6:	ddb9      	ble.n	800725c <_dtoa_r+0xb34>
 80072e8:	4651      	mov	r1, sl
 80072ea:	2300      	movs	r3, #0
 80072ec:	220a      	movs	r2, #10
 80072ee:	4628      	mov	r0, r5
 80072f0:	f000 f884 	bl	80073fc <__multadd>
 80072f4:	4682      	mov	sl, r0
 80072f6:	e7eb      	b.n	80072d0 <_dtoa_r+0xba8>
 80072f8:	08008bf3 	.word	0x08008bf3
 80072fc:	08008b4c 	.word	0x08008b4c
 8007300:	08008b70 	.word	0x08008b70

08007304 <_localeconv_r>:
 8007304:	4800      	ldr	r0, [pc, #0]	; (8007308 <_localeconv_r+0x4>)
 8007306:	4770      	bx	lr
 8007308:	20000228 	.word	0x20000228

0800730c <malloc>:
 800730c:	4b02      	ldr	r3, [pc, #8]	; (8007318 <malloc+0xc>)
 800730e:	4601      	mov	r1, r0
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	f000 bbed 	b.w	8007af0 <_malloc_r>
 8007316:	bf00      	nop
 8007318:	200000d4 	.word	0x200000d4

0800731c <memchr>:
 800731c:	4603      	mov	r3, r0
 800731e:	b510      	push	{r4, lr}
 8007320:	b2c9      	uxtb	r1, r1
 8007322:	4402      	add	r2, r0
 8007324:	4293      	cmp	r3, r2
 8007326:	4618      	mov	r0, r3
 8007328:	d101      	bne.n	800732e <memchr+0x12>
 800732a:	2000      	movs	r0, #0
 800732c:	e003      	b.n	8007336 <memchr+0x1a>
 800732e:	7804      	ldrb	r4, [r0, #0]
 8007330:	3301      	adds	r3, #1
 8007332:	428c      	cmp	r4, r1
 8007334:	d1f6      	bne.n	8007324 <memchr+0x8>
 8007336:	bd10      	pop	{r4, pc}

08007338 <_Balloc>:
 8007338:	b570      	push	{r4, r5, r6, lr}
 800733a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800733c:	4604      	mov	r4, r0
 800733e:	460d      	mov	r5, r1
 8007340:	b976      	cbnz	r6, 8007360 <_Balloc+0x28>
 8007342:	2010      	movs	r0, #16
 8007344:	f7ff ffe2 	bl	800730c <malloc>
 8007348:	4602      	mov	r2, r0
 800734a:	6260      	str	r0, [r4, #36]	; 0x24
 800734c:	b920      	cbnz	r0, 8007358 <_Balloc+0x20>
 800734e:	2166      	movs	r1, #102	; 0x66
 8007350:	4b17      	ldr	r3, [pc, #92]	; (80073b0 <_Balloc+0x78>)
 8007352:	4818      	ldr	r0, [pc, #96]	; (80073b4 <_Balloc+0x7c>)
 8007354:	f000 fd92 	bl	8007e7c <__assert_func>
 8007358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800735c:	6006      	str	r6, [r0, #0]
 800735e:	60c6      	str	r6, [r0, #12]
 8007360:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007362:	68f3      	ldr	r3, [r6, #12]
 8007364:	b183      	cbz	r3, 8007388 <_Balloc+0x50>
 8007366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800736e:	b9b8      	cbnz	r0, 80073a0 <_Balloc+0x68>
 8007370:	2101      	movs	r1, #1
 8007372:	fa01 f605 	lsl.w	r6, r1, r5
 8007376:	1d72      	adds	r2, r6, #5
 8007378:	4620      	mov	r0, r4
 800737a:	0092      	lsls	r2, r2, #2
 800737c:	f000 fb5e 	bl	8007a3c <_calloc_r>
 8007380:	b160      	cbz	r0, 800739c <_Balloc+0x64>
 8007382:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007386:	e00e      	b.n	80073a6 <_Balloc+0x6e>
 8007388:	2221      	movs	r2, #33	; 0x21
 800738a:	2104      	movs	r1, #4
 800738c:	4620      	mov	r0, r4
 800738e:	f000 fb55 	bl	8007a3c <_calloc_r>
 8007392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007394:	60f0      	str	r0, [r6, #12]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e4      	bne.n	8007366 <_Balloc+0x2e>
 800739c:	2000      	movs	r0, #0
 800739e:	bd70      	pop	{r4, r5, r6, pc}
 80073a0:	6802      	ldr	r2, [r0, #0]
 80073a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073a6:	2300      	movs	r3, #0
 80073a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073ac:	e7f7      	b.n	800739e <_Balloc+0x66>
 80073ae:	bf00      	nop
 80073b0:	08008b7d 	.word	0x08008b7d
 80073b4:	08008c04 	.word	0x08008c04

080073b8 <_Bfree>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80073bc:	4605      	mov	r5, r0
 80073be:	460c      	mov	r4, r1
 80073c0:	b976      	cbnz	r6, 80073e0 <_Bfree+0x28>
 80073c2:	2010      	movs	r0, #16
 80073c4:	f7ff ffa2 	bl	800730c <malloc>
 80073c8:	4602      	mov	r2, r0
 80073ca:	6268      	str	r0, [r5, #36]	; 0x24
 80073cc:	b920      	cbnz	r0, 80073d8 <_Bfree+0x20>
 80073ce:	218a      	movs	r1, #138	; 0x8a
 80073d0:	4b08      	ldr	r3, [pc, #32]	; (80073f4 <_Bfree+0x3c>)
 80073d2:	4809      	ldr	r0, [pc, #36]	; (80073f8 <_Bfree+0x40>)
 80073d4:	f000 fd52 	bl	8007e7c <__assert_func>
 80073d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073dc:	6006      	str	r6, [r0, #0]
 80073de:	60c6      	str	r6, [r0, #12]
 80073e0:	b13c      	cbz	r4, 80073f2 <_Bfree+0x3a>
 80073e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073e4:	6862      	ldr	r2, [r4, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073ec:	6021      	str	r1, [r4, #0]
 80073ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	08008b7d 	.word	0x08008b7d
 80073f8:	08008c04 	.word	0x08008c04

080073fc <__multadd>:
 80073fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007400:	4698      	mov	r8, r3
 8007402:	460c      	mov	r4, r1
 8007404:	2300      	movs	r3, #0
 8007406:	690e      	ldr	r6, [r1, #16]
 8007408:	4607      	mov	r7, r0
 800740a:	f101 0014 	add.w	r0, r1, #20
 800740e:	6805      	ldr	r5, [r0, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	b2a9      	uxth	r1, r5
 8007414:	fb02 8101 	mla	r1, r2, r1, r8
 8007418:	0c2d      	lsrs	r5, r5, #16
 800741a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800741e:	fb02 c505 	mla	r5, r2, r5, ip
 8007422:	b289      	uxth	r1, r1
 8007424:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007428:	429e      	cmp	r6, r3
 800742a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800742e:	f840 1b04 	str.w	r1, [r0], #4
 8007432:	dcec      	bgt.n	800740e <__multadd+0x12>
 8007434:	f1b8 0f00 	cmp.w	r8, #0
 8007438:	d022      	beq.n	8007480 <__multadd+0x84>
 800743a:	68a3      	ldr	r3, [r4, #8]
 800743c:	42b3      	cmp	r3, r6
 800743e:	dc19      	bgt.n	8007474 <__multadd+0x78>
 8007440:	6861      	ldr	r1, [r4, #4]
 8007442:	4638      	mov	r0, r7
 8007444:	3101      	adds	r1, #1
 8007446:	f7ff ff77 	bl	8007338 <_Balloc>
 800744a:	4605      	mov	r5, r0
 800744c:	b928      	cbnz	r0, 800745a <__multadd+0x5e>
 800744e:	4602      	mov	r2, r0
 8007450:	21b5      	movs	r1, #181	; 0xb5
 8007452:	4b0d      	ldr	r3, [pc, #52]	; (8007488 <__multadd+0x8c>)
 8007454:	480d      	ldr	r0, [pc, #52]	; (800748c <__multadd+0x90>)
 8007456:	f000 fd11 	bl	8007e7c <__assert_func>
 800745a:	6922      	ldr	r2, [r4, #16]
 800745c:	f104 010c 	add.w	r1, r4, #12
 8007460:	3202      	adds	r2, #2
 8007462:	0092      	lsls	r2, r2, #2
 8007464:	300c      	adds	r0, #12
 8007466:	f7fe fc1b 	bl	8005ca0 <memcpy>
 800746a:	4621      	mov	r1, r4
 800746c:	4638      	mov	r0, r7
 800746e:	f7ff ffa3 	bl	80073b8 <_Bfree>
 8007472:	462c      	mov	r4, r5
 8007474:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007478:	3601      	adds	r6, #1
 800747a:	f8c3 8014 	str.w	r8, [r3, #20]
 800747e:	6126      	str	r6, [r4, #16]
 8007480:	4620      	mov	r0, r4
 8007482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007486:	bf00      	nop
 8007488:	08008bf3 	.word	0x08008bf3
 800748c:	08008c04 	.word	0x08008c04

08007490 <__hi0bits>:
 8007490:	0c02      	lsrs	r2, r0, #16
 8007492:	0412      	lsls	r2, r2, #16
 8007494:	4603      	mov	r3, r0
 8007496:	b9ca      	cbnz	r2, 80074cc <__hi0bits+0x3c>
 8007498:	0403      	lsls	r3, r0, #16
 800749a:	2010      	movs	r0, #16
 800749c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80074a0:	bf04      	itt	eq
 80074a2:	021b      	lsleq	r3, r3, #8
 80074a4:	3008      	addeq	r0, #8
 80074a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80074aa:	bf04      	itt	eq
 80074ac:	011b      	lsleq	r3, r3, #4
 80074ae:	3004      	addeq	r0, #4
 80074b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80074b4:	bf04      	itt	eq
 80074b6:	009b      	lsleq	r3, r3, #2
 80074b8:	3002      	addeq	r0, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	db05      	blt.n	80074ca <__hi0bits+0x3a>
 80074be:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80074c2:	f100 0001 	add.w	r0, r0, #1
 80074c6:	bf08      	it	eq
 80074c8:	2020      	moveq	r0, #32
 80074ca:	4770      	bx	lr
 80074cc:	2000      	movs	r0, #0
 80074ce:	e7e5      	b.n	800749c <__hi0bits+0xc>

080074d0 <__lo0bits>:
 80074d0:	6803      	ldr	r3, [r0, #0]
 80074d2:	4602      	mov	r2, r0
 80074d4:	f013 0007 	ands.w	r0, r3, #7
 80074d8:	d00b      	beq.n	80074f2 <__lo0bits+0x22>
 80074da:	07d9      	lsls	r1, r3, #31
 80074dc:	d422      	bmi.n	8007524 <__lo0bits+0x54>
 80074de:	0798      	lsls	r0, r3, #30
 80074e0:	bf49      	itett	mi
 80074e2:	085b      	lsrmi	r3, r3, #1
 80074e4:	089b      	lsrpl	r3, r3, #2
 80074e6:	2001      	movmi	r0, #1
 80074e8:	6013      	strmi	r3, [r2, #0]
 80074ea:	bf5c      	itt	pl
 80074ec:	2002      	movpl	r0, #2
 80074ee:	6013      	strpl	r3, [r2, #0]
 80074f0:	4770      	bx	lr
 80074f2:	b299      	uxth	r1, r3
 80074f4:	b909      	cbnz	r1, 80074fa <__lo0bits+0x2a>
 80074f6:	2010      	movs	r0, #16
 80074f8:	0c1b      	lsrs	r3, r3, #16
 80074fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80074fe:	bf04      	itt	eq
 8007500:	0a1b      	lsreq	r3, r3, #8
 8007502:	3008      	addeq	r0, #8
 8007504:	0719      	lsls	r1, r3, #28
 8007506:	bf04      	itt	eq
 8007508:	091b      	lsreq	r3, r3, #4
 800750a:	3004      	addeq	r0, #4
 800750c:	0799      	lsls	r1, r3, #30
 800750e:	bf04      	itt	eq
 8007510:	089b      	lsreq	r3, r3, #2
 8007512:	3002      	addeq	r0, #2
 8007514:	07d9      	lsls	r1, r3, #31
 8007516:	d403      	bmi.n	8007520 <__lo0bits+0x50>
 8007518:	085b      	lsrs	r3, r3, #1
 800751a:	f100 0001 	add.w	r0, r0, #1
 800751e:	d003      	beq.n	8007528 <__lo0bits+0x58>
 8007520:	6013      	str	r3, [r2, #0]
 8007522:	4770      	bx	lr
 8007524:	2000      	movs	r0, #0
 8007526:	4770      	bx	lr
 8007528:	2020      	movs	r0, #32
 800752a:	4770      	bx	lr

0800752c <__i2b>:
 800752c:	b510      	push	{r4, lr}
 800752e:	460c      	mov	r4, r1
 8007530:	2101      	movs	r1, #1
 8007532:	f7ff ff01 	bl	8007338 <_Balloc>
 8007536:	4602      	mov	r2, r0
 8007538:	b928      	cbnz	r0, 8007546 <__i2b+0x1a>
 800753a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800753e:	4b04      	ldr	r3, [pc, #16]	; (8007550 <__i2b+0x24>)
 8007540:	4804      	ldr	r0, [pc, #16]	; (8007554 <__i2b+0x28>)
 8007542:	f000 fc9b 	bl	8007e7c <__assert_func>
 8007546:	2301      	movs	r3, #1
 8007548:	6144      	str	r4, [r0, #20]
 800754a:	6103      	str	r3, [r0, #16]
 800754c:	bd10      	pop	{r4, pc}
 800754e:	bf00      	nop
 8007550:	08008bf3 	.word	0x08008bf3
 8007554:	08008c04 	.word	0x08008c04

08007558 <__multiply>:
 8007558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800755c:	4614      	mov	r4, r2
 800755e:	690a      	ldr	r2, [r1, #16]
 8007560:	6923      	ldr	r3, [r4, #16]
 8007562:	460d      	mov	r5, r1
 8007564:	429a      	cmp	r2, r3
 8007566:	bfbe      	ittt	lt
 8007568:	460b      	movlt	r3, r1
 800756a:	4625      	movlt	r5, r4
 800756c:	461c      	movlt	r4, r3
 800756e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007572:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007576:	68ab      	ldr	r3, [r5, #8]
 8007578:	6869      	ldr	r1, [r5, #4]
 800757a:	eb0a 0709 	add.w	r7, sl, r9
 800757e:	42bb      	cmp	r3, r7
 8007580:	b085      	sub	sp, #20
 8007582:	bfb8      	it	lt
 8007584:	3101      	addlt	r1, #1
 8007586:	f7ff fed7 	bl	8007338 <_Balloc>
 800758a:	b930      	cbnz	r0, 800759a <__multiply+0x42>
 800758c:	4602      	mov	r2, r0
 800758e:	f240 115d 	movw	r1, #349	; 0x15d
 8007592:	4b41      	ldr	r3, [pc, #260]	; (8007698 <__multiply+0x140>)
 8007594:	4841      	ldr	r0, [pc, #260]	; (800769c <__multiply+0x144>)
 8007596:	f000 fc71 	bl	8007e7c <__assert_func>
 800759a:	f100 0614 	add.w	r6, r0, #20
 800759e:	4633      	mov	r3, r6
 80075a0:	2200      	movs	r2, #0
 80075a2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80075a6:	4543      	cmp	r3, r8
 80075a8:	d31e      	bcc.n	80075e8 <__multiply+0x90>
 80075aa:	f105 0c14 	add.w	ip, r5, #20
 80075ae:	f104 0314 	add.w	r3, r4, #20
 80075b2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80075b6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80075ba:	9202      	str	r2, [sp, #8]
 80075bc:	ebac 0205 	sub.w	r2, ip, r5
 80075c0:	3a15      	subs	r2, #21
 80075c2:	f022 0203 	bic.w	r2, r2, #3
 80075c6:	3204      	adds	r2, #4
 80075c8:	f105 0115 	add.w	r1, r5, #21
 80075cc:	458c      	cmp	ip, r1
 80075ce:	bf38      	it	cc
 80075d0:	2204      	movcc	r2, #4
 80075d2:	9201      	str	r2, [sp, #4]
 80075d4:	9a02      	ldr	r2, [sp, #8]
 80075d6:	9303      	str	r3, [sp, #12]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d808      	bhi.n	80075ee <__multiply+0x96>
 80075dc:	2f00      	cmp	r7, #0
 80075de:	dc55      	bgt.n	800768c <__multiply+0x134>
 80075e0:	6107      	str	r7, [r0, #16]
 80075e2:	b005      	add	sp, #20
 80075e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e8:	f843 2b04 	str.w	r2, [r3], #4
 80075ec:	e7db      	b.n	80075a6 <__multiply+0x4e>
 80075ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80075f2:	f1ba 0f00 	cmp.w	sl, #0
 80075f6:	d020      	beq.n	800763a <__multiply+0xe2>
 80075f8:	46b1      	mov	r9, r6
 80075fa:	2200      	movs	r2, #0
 80075fc:	f105 0e14 	add.w	lr, r5, #20
 8007600:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007604:	f8d9 b000 	ldr.w	fp, [r9]
 8007608:	b2a1      	uxth	r1, r4
 800760a:	fa1f fb8b 	uxth.w	fp, fp
 800760e:	fb0a b101 	mla	r1, sl, r1, fp
 8007612:	4411      	add	r1, r2
 8007614:	f8d9 2000 	ldr.w	r2, [r9]
 8007618:	0c24      	lsrs	r4, r4, #16
 800761a:	0c12      	lsrs	r2, r2, #16
 800761c:	fb0a 2404 	mla	r4, sl, r4, r2
 8007620:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007624:	b289      	uxth	r1, r1
 8007626:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800762a:	45f4      	cmp	ip, lr
 800762c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007630:	f849 1b04 	str.w	r1, [r9], #4
 8007634:	d8e4      	bhi.n	8007600 <__multiply+0xa8>
 8007636:	9901      	ldr	r1, [sp, #4]
 8007638:	5072      	str	r2, [r6, r1]
 800763a:	9a03      	ldr	r2, [sp, #12]
 800763c:	3304      	adds	r3, #4
 800763e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007642:	f1b9 0f00 	cmp.w	r9, #0
 8007646:	d01f      	beq.n	8007688 <__multiply+0x130>
 8007648:	46b6      	mov	lr, r6
 800764a:	f04f 0a00 	mov.w	sl, #0
 800764e:	6834      	ldr	r4, [r6, #0]
 8007650:	f105 0114 	add.w	r1, r5, #20
 8007654:	880a      	ldrh	r2, [r1, #0]
 8007656:	f8be b002 	ldrh.w	fp, [lr, #2]
 800765a:	b2a4      	uxth	r4, r4
 800765c:	fb09 b202 	mla	r2, r9, r2, fp
 8007660:	4492      	add	sl, r2
 8007662:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007666:	f84e 4b04 	str.w	r4, [lr], #4
 800766a:	f851 4b04 	ldr.w	r4, [r1], #4
 800766e:	f8be 2000 	ldrh.w	r2, [lr]
 8007672:	0c24      	lsrs	r4, r4, #16
 8007674:	fb09 2404 	mla	r4, r9, r4, r2
 8007678:	458c      	cmp	ip, r1
 800767a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800767e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007682:	d8e7      	bhi.n	8007654 <__multiply+0xfc>
 8007684:	9a01      	ldr	r2, [sp, #4]
 8007686:	50b4      	str	r4, [r6, r2]
 8007688:	3604      	adds	r6, #4
 800768a:	e7a3      	b.n	80075d4 <__multiply+0x7c>
 800768c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1a5      	bne.n	80075e0 <__multiply+0x88>
 8007694:	3f01      	subs	r7, #1
 8007696:	e7a1      	b.n	80075dc <__multiply+0x84>
 8007698:	08008bf3 	.word	0x08008bf3
 800769c:	08008c04 	.word	0x08008c04

080076a0 <__pow5mult>:
 80076a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076a4:	4615      	mov	r5, r2
 80076a6:	f012 0203 	ands.w	r2, r2, #3
 80076aa:	4606      	mov	r6, r0
 80076ac:	460f      	mov	r7, r1
 80076ae:	d007      	beq.n	80076c0 <__pow5mult+0x20>
 80076b0:	4c25      	ldr	r4, [pc, #148]	; (8007748 <__pow5mult+0xa8>)
 80076b2:	3a01      	subs	r2, #1
 80076b4:	2300      	movs	r3, #0
 80076b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076ba:	f7ff fe9f 	bl	80073fc <__multadd>
 80076be:	4607      	mov	r7, r0
 80076c0:	10ad      	asrs	r5, r5, #2
 80076c2:	d03d      	beq.n	8007740 <__pow5mult+0xa0>
 80076c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80076c6:	b97c      	cbnz	r4, 80076e8 <__pow5mult+0x48>
 80076c8:	2010      	movs	r0, #16
 80076ca:	f7ff fe1f 	bl	800730c <malloc>
 80076ce:	4602      	mov	r2, r0
 80076d0:	6270      	str	r0, [r6, #36]	; 0x24
 80076d2:	b928      	cbnz	r0, 80076e0 <__pow5mult+0x40>
 80076d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80076d8:	4b1c      	ldr	r3, [pc, #112]	; (800774c <__pow5mult+0xac>)
 80076da:	481d      	ldr	r0, [pc, #116]	; (8007750 <__pow5mult+0xb0>)
 80076dc:	f000 fbce 	bl	8007e7c <__assert_func>
 80076e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076e4:	6004      	str	r4, [r0, #0]
 80076e6:	60c4      	str	r4, [r0, #12]
 80076e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80076ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076f0:	b94c      	cbnz	r4, 8007706 <__pow5mult+0x66>
 80076f2:	f240 2171 	movw	r1, #625	; 0x271
 80076f6:	4630      	mov	r0, r6
 80076f8:	f7ff ff18 	bl	800752c <__i2b>
 80076fc:	2300      	movs	r3, #0
 80076fe:	4604      	mov	r4, r0
 8007700:	f8c8 0008 	str.w	r0, [r8, #8]
 8007704:	6003      	str	r3, [r0, #0]
 8007706:	f04f 0900 	mov.w	r9, #0
 800770a:	07eb      	lsls	r3, r5, #31
 800770c:	d50a      	bpl.n	8007724 <__pow5mult+0x84>
 800770e:	4639      	mov	r1, r7
 8007710:	4622      	mov	r2, r4
 8007712:	4630      	mov	r0, r6
 8007714:	f7ff ff20 	bl	8007558 <__multiply>
 8007718:	4680      	mov	r8, r0
 800771a:	4639      	mov	r1, r7
 800771c:	4630      	mov	r0, r6
 800771e:	f7ff fe4b 	bl	80073b8 <_Bfree>
 8007722:	4647      	mov	r7, r8
 8007724:	106d      	asrs	r5, r5, #1
 8007726:	d00b      	beq.n	8007740 <__pow5mult+0xa0>
 8007728:	6820      	ldr	r0, [r4, #0]
 800772a:	b938      	cbnz	r0, 800773c <__pow5mult+0x9c>
 800772c:	4622      	mov	r2, r4
 800772e:	4621      	mov	r1, r4
 8007730:	4630      	mov	r0, r6
 8007732:	f7ff ff11 	bl	8007558 <__multiply>
 8007736:	6020      	str	r0, [r4, #0]
 8007738:	f8c0 9000 	str.w	r9, [r0]
 800773c:	4604      	mov	r4, r0
 800773e:	e7e4      	b.n	800770a <__pow5mult+0x6a>
 8007740:	4638      	mov	r0, r7
 8007742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007746:	bf00      	nop
 8007748:	08008d58 	.word	0x08008d58
 800774c:	08008b7d 	.word	0x08008b7d
 8007750:	08008c04 	.word	0x08008c04

08007754 <__lshift>:
 8007754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007758:	460c      	mov	r4, r1
 800775a:	4607      	mov	r7, r0
 800775c:	4691      	mov	r9, r2
 800775e:	6923      	ldr	r3, [r4, #16]
 8007760:	6849      	ldr	r1, [r1, #4]
 8007762:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007766:	68a3      	ldr	r3, [r4, #8]
 8007768:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800776c:	f108 0601 	add.w	r6, r8, #1
 8007770:	42b3      	cmp	r3, r6
 8007772:	db0b      	blt.n	800778c <__lshift+0x38>
 8007774:	4638      	mov	r0, r7
 8007776:	f7ff fddf 	bl	8007338 <_Balloc>
 800777a:	4605      	mov	r5, r0
 800777c:	b948      	cbnz	r0, 8007792 <__lshift+0x3e>
 800777e:	4602      	mov	r2, r0
 8007780:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007784:	4b27      	ldr	r3, [pc, #156]	; (8007824 <__lshift+0xd0>)
 8007786:	4828      	ldr	r0, [pc, #160]	; (8007828 <__lshift+0xd4>)
 8007788:	f000 fb78 	bl	8007e7c <__assert_func>
 800778c:	3101      	adds	r1, #1
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	e7ee      	b.n	8007770 <__lshift+0x1c>
 8007792:	2300      	movs	r3, #0
 8007794:	f100 0114 	add.w	r1, r0, #20
 8007798:	f100 0210 	add.w	r2, r0, #16
 800779c:	4618      	mov	r0, r3
 800779e:	4553      	cmp	r3, sl
 80077a0:	db33      	blt.n	800780a <__lshift+0xb6>
 80077a2:	6920      	ldr	r0, [r4, #16]
 80077a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077a8:	f104 0314 	add.w	r3, r4, #20
 80077ac:	f019 091f 	ands.w	r9, r9, #31
 80077b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077b8:	d02b      	beq.n	8007812 <__lshift+0xbe>
 80077ba:	468a      	mov	sl, r1
 80077bc:	2200      	movs	r2, #0
 80077be:	f1c9 0e20 	rsb	lr, r9, #32
 80077c2:	6818      	ldr	r0, [r3, #0]
 80077c4:	fa00 f009 	lsl.w	r0, r0, r9
 80077c8:	4302      	orrs	r2, r0
 80077ca:	f84a 2b04 	str.w	r2, [sl], #4
 80077ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80077d2:	459c      	cmp	ip, r3
 80077d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80077d8:	d8f3      	bhi.n	80077c2 <__lshift+0x6e>
 80077da:	ebac 0304 	sub.w	r3, ip, r4
 80077de:	3b15      	subs	r3, #21
 80077e0:	f023 0303 	bic.w	r3, r3, #3
 80077e4:	3304      	adds	r3, #4
 80077e6:	f104 0015 	add.w	r0, r4, #21
 80077ea:	4584      	cmp	ip, r0
 80077ec:	bf38      	it	cc
 80077ee:	2304      	movcc	r3, #4
 80077f0:	50ca      	str	r2, [r1, r3]
 80077f2:	b10a      	cbz	r2, 80077f8 <__lshift+0xa4>
 80077f4:	f108 0602 	add.w	r6, r8, #2
 80077f8:	3e01      	subs	r6, #1
 80077fa:	4638      	mov	r0, r7
 80077fc:	4621      	mov	r1, r4
 80077fe:	612e      	str	r6, [r5, #16]
 8007800:	f7ff fdda 	bl	80073b8 <_Bfree>
 8007804:	4628      	mov	r0, r5
 8007806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800780a:	f842 0f04 	str.w	r0, [r2, #4]!
 800780e:	3301      	adds	r3, #1
 8007810:	e7c5      	b.n	800779e <__lshift+0x4a>
 8007812:	3904      	subs	r1, #4
 8007814:	f853 2b04 	ldr.w	r2, [r3], #4
 8007818:	459c      	cmp	ip, r3
 800781a:	f841 2f04 	str.w	r2, [r1, #4]!
 800781e:	d8f9      	bhi.n	8007814 <__lshift+0xc0>
 8007820:	e7ea      	b.n	80077f8 <__lshift+0xa4>
 8007822:	bf00      	nop
 8007824:	08008bf3 	.word	0x08008bf3
 8007828:	08008c04 	.word	0x08008c04

0800782c <__mcmp>:
 800782c:	4603      	mov	r3, r0
 800782e:	690a      	ldr	r2, [r1, #16]
 8007830:	6900      	ldr	r0, [r0, #16]
 8007832:	b530      	push	{r4, r5, lr}
 8007834:	1a80      	subs	r0, r0, r2
 8007836:	d10d      	bne.n	8007854 <__mcmp+0x28>
 8007838:	3314      	adds	r3, #20
 800783a:	3114      	adds	r1, #20
 800783c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007840:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007844:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007848:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800784c:	4295      	cmp	r5, r2
 800784e:	d002      	beq.n	8007856 <__mcmp+0x2a>
 8007850:	d304      	bcc.n	800785c <__mcmp+0x30>
 8007852:	2001      	movs	r0, #1
 8007854:	bd30      	pop	{r4, r5, pc}
 8007856:	42a3      	cmp	r3, r4
 8007858:	d3f4      	bcc.n	8007844 <__mcmp+0x18>
 800785a:	e7fb      	b.n	8007854 <__mcmp+0x28>
 800785c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007860:	e7f8      	b.n	8007854 <__mcmp+0x28>
	...

08007864 <__mdiff>:
 8007864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007868:	460c      	mov	r4, r1
 800786a:	4606      	mov	r6, r0
 800786c:	4611      	mov	r1, r2
 800786e:	4620      	mov	r0, r4
 8007870:	4692      	mov	sl, r2
 8007872:	f7ff ffdb 	bl	800782c <__mcmp>
 8007876:	1e05      	subs	r5, r0, #0
 8007878:	d111      	bne.n	800789e <__mdiff+0x3a>
 800787a:	4629      	mov	r1, r5
 800787c:	4630      	mov	r0, r6
 800787e:	f7ff fd5b 	bl	8007338 <_Balloc>
 8007882:	4602      	mov	r2, r0
 8007884:	b928      	cbnz	r0, 8007892 <__mdiff+0x2e>
 8007886:	f240 2132 	movw	r1, #562	; 0x232
 800788a:	4b3c      	ldr	r3, [pc, #240]	; (800797c <__mdiff+0x118>)
 800788c:	483c      	ldr	r0, [pc, #240]	; (8007980 <__mdiff+0x11c>)
 800788e:	f000 faf5 	bl	8007e7c <__assert_func>
 8007892:	2301      	movs	r3, #1
 8007894:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007898:	4610      	mov	r0, r2
 800789a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800789e:	bfa4      	itt	ge
 80078a0:	4653      	movge	r3, sl
 80078a2:	46a2      	movge	sl, r4
 80078a4:	4630      	mov	r0, r6
 80078a6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80078aa:	bfa6      	itte	ge
 80078ac:	461c      	movge	r4, r3
 80078ae:	2500      	movge	r5, #0
 80078b0:	2501      	movlt	r5, #1
 80078b2:	f7ff fd41 	bl	8007338 <_Balloc>
 80078b6:	4602      	mov	r2, r0
 80078b8:	b918      	cbnz	r0, 80078c2 <__mdiff+0x5e>
 80078ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 80078be:	4b2f      	ldr	r3, [pc, #188]	; (800797c <__mdiff+0x118>)
 80078c0:	e7e4      	b.n	800788c <__mdiff+0x28>
 80078c2:	f100 0814 	add.w	r8, r0, #20
 80078c6:	f8da 7010 	ldr.w	r7, [sl, #16]
 80078ca:	60c5      	str	r5, [r0, #12]
 80078cc:	f04f 0c00 	mov.w	ip, #0
 80078d0:	f10a 0514 	add.w	r5, sl, #20
 80078d4:	f10a 0010 	add.w	r0, sl, #16
 80078d8:	46c2      	mov	sl, r8
 80078da:	6926      	ldr	r6, [r4, #16]
 80078dc:	f104 0914 	add.w	r9, r4, #20
 80078e0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80078e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80078e8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80078ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80078f0:	fa1f f18b 	uxth.w	r1, fp
 80078f4:	4461      	add	r1, ip
 80078f6:	fa1f fc83 	uxth.w	ip, r3
 80078fa:	0c1b      	lsrs	r3, r3, #16
 80078fc:	eba1 010c 	sub.w	r1, r1, ip
 8007900:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007904:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007908:	b289      	uxth	r1, r1
 800790a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800790e:	454e      	cmp	r6, r9
 8007910:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007914:	f84a 3b04 	str.w	r3, [sl], #4
 8007918:	d8e6      	bhi.n	80078e8 <__mdiff+0x84>
 800791a:	1b33      	subs	r3, r6, r4
 800791c:	3b15      	subs	r3, #21
 800791e:	f023 0303 	bic.w	r3, r3, #3
 8007922:	3415      	adds	r4, #21
 8007924:	3304      	adds	r3, #4
 8007926:	42a6      	cmp	r6, r4
 8007928:	bf38      	it	cc
 800792a:	2304      	movcc	r3, #4
 800792c:	441d      	add	r5, r3
 800792e:	4443      	add	r3, r8
 8007930:	461e      	mov	r6, r3
 8007932:	462c      	mov	r4, r5
 8007934:	4574      	cmp	r4, lr
 8007936:	d30e      	bcc.n	8007956 <__mdiff+0xf2>
 8007938:	f10e 0103 	add.w	r1, lr, #3
 800793c:	1b49      	subs	r1, r1, r5
 800793e:	f021 0103 	bic.w	r1, r1, #3
 8007942:	3d03      	subs	r5, #3
 8007944:	45ae      	cmp	lr, r5
 8007946:	bf38      	it	cc
 8007948:	2100      	movcc	r1, #0
 800794a:	4419      	add	r1, r3
 800794c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007950:	b18b      	cbz	r3, 8007976 <__mdiff+0x112>
 8007952:	6117      	str	r7, [r2, #16]
 8007954:	e7a0      	b.n	8007898 <__mdiff+0x34>
 8007956:	f854 8b04 	ldr.w	r8, [r4], #4
 800795a:	fa1f f188 	uxth.w	r1, r8
 800795e:	4461      	add	r1, ip
 8007960:	1408      	asrs	r0, r1, #16
 8007962:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007966:	b289      	uxth	r1, r1
 8007968:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800796c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007970:	f846 1b04 	str.w	r1, [r6], #4
 8007974:	e7de      	b.n	8007934 <__mdiff+0xd0>
 8007976:	3f01      	subs	r7, #1
 8007978:	e7e8      	b.n	800794c <__mdiff+0xe8>
 800797a:	bf00      	nop
 800797c:	08008bf3 	.word	0x08008bf3
 8007980:	08008c04 	.word	0x08008c04

08007984 <__d2b>:
 8007984:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007988:	2101      	movs	r1, #1
 800798a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800798e:	4690      	mov	r8, r2
 8007990:	461d      	mov	r5, r3
 8007992:	f7ff fcd1 	bl	8007338 <_Balloc>
 8007996:	4604      	mov	r4, r0
 8007998:	b930      	cbnz	r0, 80079a8 <__d2b+0x24>
 800799a:	4602      	mov	r2, r0
 800799c:	f240 310a 	movw	r1, #778	; 0x30a
 80079a0:	4b24      	ldr	r3, [pc, #144]	; (8007a34 <__d2b+0xb0>)
 80079a2:	4825      	ldr	r0, [pc, #148]	; (8007a38 <__d2b+0xb4>)
 80079a4:	f000 fa6a 	bl	8007e7c <__assert_func>
 80079a8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80079ac:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80079b0:	bb2d      	cbnz	r5, 80079fe <__d2b+0x7a>
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	f1b8 0300 	subs.w	r3, r8, #0
 80079b8:	d026      	beq.n	8007a08 <__d2b+0x84>
 80079ba:	4668      	mov	r0, sp
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	f7ff fd87 	bl	80074d0 <__lo0bits>
 80079c2:	9900      	ldr	r1, [sp, #0]
 80079c4:	b1f0      	cbz	r0, 8007a04 <__d2b+0x80>
 80079c6:	9a01      	ldr	r2, [sp, #4]
 80079c8:	f1c0 0320 	rsb	r3, r0, #32
 80079cc:	fa02 f303 	lsl.w	r3, r2, r3
 80079d0:	430b      	orrs	r3, r1
 80079d2:	40c2      	lsrs	r2, r0
 80079d4:	6163      	str	r3, [r4, #20]
 80079d6:	9201      	str	r2, [sp, #4]
 80079d8:	9b01      	ldr	r3, [sp, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	bf14      	ite	ne
 80079de:	2102      	movne	r1, #2
 80079e0:	2101      	moveq	r1, #1
 80079e2:	61a3      	str	r3, [r4, #24]
 80079e4:	6121      	str	r1, [r4, #16]
 80079e6:	b1c5      	cbz	r5, 8007a1a <__d2b+0x96>
 80079e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80079ec:	4405      	add	r5, r0
 80079ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079f2:	603d      	str	r5, [r7, #0]
 80079f4:	6030      	str	r0, [r6, #0]
 80079f6:	4620      	mov	r0, r4
 80079f8:	b002      	add	sp, #8
 80079fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a02:	e7d6      	b.n	80079b2 <__d2b+0x2e>
 8007a04:	6161      	str	r1, [r4, #20]
 8007a06:	e7e7      	b.n	80079d8 <__d2b+0x54>
 8007a08:	a801      	add	r0, sp, #4
 8007a0a:	f7ff fd61 	bl	80074d0 <__lo0bits>
 8007a0e:	2101      	movs	r1, #1
 8007a10:	9b01      	ldr	r3, [sp, #4]
 8007a12:	6121      	str	r1, [r4, #16]
 8007a14:	6163      	str	r3, [r4, #20]
 8007a16:	3020      	adds	r0, #32
 8007a18:	e7e5      	b.n	80079e6 <__d2b+0x62>
 8007a1a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007a1e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a22:	6038      	str	r0, [r7, #0]
 8007a24:	6918      	ldr	r0, [r3, #16]
 8007a26:	f7ff fd33 	bl	8007490 <__hi0bits>
 8007a2a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007a2e:	6031      	str	r1, [r6, #0]
 8007a30:	e7e1      	b.n	80079f6 <__d2b+0x72>
 8007a32:	bf00      	nop
 8007a34:	08008bf3 	.word	0x08008bf3
 8007a38:	08008c04 	.word	0x08008c04

08007a3c <_calloc_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	fb02 f501 	mul.w	r5, r2, r1
 8007a42:	4629      	mov	r1, r5
 8007a44:	f000 f854 	bl	8007af0 <_malloc_r>
 8007a48:	4604      	mov	r4, r0
 8007a4a:	b118      	cbz	r0, 8007a54 <_calloc_r+0x18>
 8007a4c:	462a      	mov	r2, r5
 8007a4e:	2100      	movs	r1, #0
 8007a50:	f7fe f934 	bl	8005cbc <memset>
 8007a54:	4620      	mov	r0, r4
 8007a56:	bd38      	pop	{r3, r4, r5, pc}

08007a58 <_free_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	2900      	cmp	r1, #0
 8007a5e:	d043      	beq.n	8007ae8 <_free_r+0x90>
 8007a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a64:	1f0c      	subs	r4, r1, #4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	bfb8      	it	lt
 8007a6a:	18e4      	addlt	r4, r4, r3
 8007a6c:	f000 fa62 	bl	8007f34 <__malloc_lock>
 8007a70:	4a1e      	ldr	r2, [pc, #120]	; (8007aec <_free_r+0x94>)
 8007a72:	6813      	ldr	r3, [r2, #0]
 8007a74:	4610      	mov	r0, r2
 8007a76:	b933      	cbnz	r3, 8007a86 <_free_r+0x2e>
 8007a78:	6063      	str	r3, [r4, #4]
 8007a7a:	6014      	str	r4, [r2, #0]
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a82:	f000 ba5d 	b.w	8007f40 <__malloc_unlock>
 8007a86:	42a3      	cmp	r3, r4
 8007a88:	d90a      	bls.n	8007aa0 <_free_r+0x48>
 8007a8a:	6821      	ldr	r1, [r4, #0]
 8007a8c:	1862      	adds	r2, r4, r1
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	bf01      	itttt	eq
 8007a92:	681a      	ldreq	r2, [r3, #0]
 8007a94:	685b      	ldreq	r3, [r3, #4]
 8007a96:	1852      	addeq	r2, r2, r1
 8007a98:	6022      	streq	r2, [r4, #0]
 8007a9a:	6063      	str	r3, [r4, #4]
 8007a9c:	6004      	str	r4, [r0, #0]
 8007a9e:	e7ed      	b.n	8007a7c <_free_r+0x24>
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	b10b      	cbz	r3, 8007aaa <_free_r+0x52>
 8007aa6:	42a3      	cmp	r3, r4
 8007aa8:	d9fa      	bls.n	8007aa0 <_free_r+0x48>
 8007aaa:	6811      	ldr	r1, [r2, #0]
 8007aac:	1850      	adds	r0, r2, r1
 8007aae:	42a0      	cmp	r0, r4
 8007ab0:	d10b      	bne.n	8007aca <_free_r+0x72>
 8007ab2:	6820      	ldr	r0, [r4, #0]
 8007ab4:	4401      	add	r1, r0
 8007ab6:	1850      	adds	r0, r2, r1
 8007ab8:	4283      	cmp	r3, r0
 8007aba:	6011      	str	r1, [r2, #0]
 8007abc:	d1de      	bne.n	8007a7c <_free_r+0x24>
 8007abe:	6818      	ldr	r0, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	4401      	add	r1, r0
 8007ac4:	6011      	str	r1, [r2, #0]
 8007ac6:	6053      	str	r3, [r2, #4]
 8007ac8:	e7d8      	b.n	8007a7c <_free_r+0x24>
 8007aca:	d902      	bls.n	8007ad2 <_free_r+0x7a>
 8007acc:	230c      	movs	r3, #12
 8007ace:	602b      	str	r3, [r5, #0]
 8007ad0:	e7d4      	b.n	8007a7c <_free_r+0x24>
 8007ad2:	6820      	ldr	r0, [r4, #0]
 8007ad4:	1821      	adds	r1, r4, r0
 8007ad6:	428b      	cmp	r3, r1
 8007ad8:	bf01      	itttt	eq
 8007ada:	6819      	ldreq	r1, [r3, #0]
 8007adc:	685b      	ldreq	r3, [r3, #4]
 8007ade:	1809      	addeq	r1, r1, r0
 8007ae0:	6021      	streq	r1, [r4, #0]
 8007ae2:	6063      	str	r3, [r4, #4]
 8007ae4:	6054      	str	r4, [r2, #4]
 8007ae6:	e7c9      	b.n	8007a7c <_free_r+0x24>
 8007ae8:	bd38      	pop	{r3, r4, r5, pc}
 8007aea:	bf00      	nop
 8007aec:	200004cc 	.word	0x200004cc

08007af0 <_malloc_r>:
 8007af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af2:	1ccd      	adds	r5, r1, #3
 8007af4:	f025 0503 	bic.w	r5, r5, #3
 8007af8:	3508      	adds	r5, #8
 8007afa:	2d0c      	cmp	r5, #12
 8007afc:	bf38      	it	cc
 8007afe:	250c      	movcc	r5, #12
 8007b00:	2d00      	cmp	r5, #0
 8007b02:	4606      	mov	r6, r0
 8007b04:	db01      	blt.n	8007b0a <_malloc_r+0x1a>
 8007b06:	42a9      	cmp	r1, r5
 8007b08:	d903      	bls.n	8007b12 <_malloc_r+0x22>
 8007b0a:	230c      	movs	r3, #12
 8007b0c:	6033      	str	r3, [r6, #0]
 8007b0e:	2000      	movs	r0, #0
 8007b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b12:	f000 fa0f 	bl	8007f34 <__malloc_lock>
 8007b16:	4921      	ldr	r1, [pc, #132]	; (8007b9c <_malloc_r+0xac>)
 8007b18:	680a      	ldr	r2, [r1, #0]
 8007b1a:	4614      	mov	r4, r2
 8007b1c:	b99c      	cbnz	r4, 8007b46 <_malloc_r+0x56>
 8007b1e:	4f20      	ldr	r7, [pc, #128]	; (8007ba0 <_malloc_r+0xb0>)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	b923      	cbnz	r3, 8007b2e <_malloc_r+0x3e>
 8007b24:	4621      	mov	r1, r4
 8007b26:	4630      	mov	r0, r6
 8007b28:	f000 f998 	bl	8007e5c <_sbrk_r>
 8007b2c:	6038      	str	r0, [r7, #0]
 8007b2e:	4629      	mov	r1, r5
 8007b30:	4630      	mov	r0, r6
 8007b32:	f000 f993 	bl	8007e5c <_sbrk_r>
 8007b36:	1c43      	adds	r3, r0, #1
 8007b38:	d123      	bne.n	8007b82 <_malloc_r+0x92>
 8007b3a:	230c      	movs	r3, #12
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	6033      	str	r3, [r6, #0]
 8007b40:	f000 f9fe 	bl	8007f40 <__malloc_unlock>
 8007b44:	e7e3      	b.n	8007b0e <_malloc_r+0x1e>
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	1b5b      	subs	r3, r3, r5
 8007b4a:	d417      	bmi.n	8007b7c <_malloc_r+0x8c>
 8007b4c:	2b0b      	cmp	r3, #11
 8007b4e:	d903      	bls.n	8007b58 <_malloc_r+0x68>
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	441c      	add	r4, r3
 8007b54:	6025      	str	r5, [r4, #0]
 8007b56:	e004      	b.n	8007b62 <_malloc_r+0x72>
 8007b58:	6863      	ldr	r3, [r4, #4]
 8007b5a:	42a2      	cmp	r2, r4
 8007b5c:	bf0c      	ite	eq
 8007b5e:	600b      	streq	r3, [r1, #0]
 8007b60:	6053      	strne	r3, [r2, #4]
 8007b62:	4630      	mov	r0, r6
 8007b64:	f000 f9ec 	bl	8007f40 <__malloc_unlock>
 8007b68:	f104 000b 	add.w	r0, r4, #11
 8007b6c:	1d23      	adds	r3, r4, #4
 8007b6e:	f020 0007 	bic.w	r0, r0, #7
 8007b72:	1ac2      	subs	r2, r0, r3
 8007b74:	d0cc      	beq.n	8007b10 <_malloc_r+0x20>
 8007b76:	1a1b      	subs	r3, r3, r0
 8007b78:	50a3      	str	r3, [r4, r2]
 8007b7a:	e7c9      	b.n	8007b10 <_malloc_r+0x20>
 8007b7c:	4622      	mov	r2, r4
 8007b7e:	6864      	ldr	r4, [r4, #4]
 8007b80:	e7cc      	b.n	8007b1c <_malloc_r+0x2c>
 8007b82:	1cc4      	adds	r4, r0, #3
 8007b84:	f024 0403 	bic.w	r4, r4, #3
 8007b88:	42a0      	cmp	r0, r4
 8007b8a:	d0e3      	beq.n	8007b54 <_malloc_r+0x64>
 8007b8c:	1a21      	subs	r1, r4, r0
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f000 f964 	bl	8007e5c <_sbrk_r>
 8007b94:	3001      	adds	r0, #1
 8007b96:	d1dd      	bne.n	8007b54 <_malloc_r+0x64>
 8007b98:	e7cf      	b.n	8007b3a <_malloc_r+0x4a>
 8007b9a:	bf00      	nop
 8007b9c:	200004cc 	.word	0x200004cc
 8007ba0:	200004d0 	.word	0x200004d0

08007ba4 <__ssputs_r>:
 8007ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba8:	688e      	ldr	r6, [r1, #8]
 8007baa:	4682      	mov	sl, r0
 8007bac:	429e      	cmp	r6, r3
 8007bae:	460c      	mov	r4, r1
 8007bb0:	4690      	mov	r8, r2
 8007bb2:	461f      	mov	r7, r3
 8007bb4:	d838      	bhi.n	8007c28 <__ssputs_r+0x84>
 8007bb6:	898a      	ldrh	r2, [r1, #12]
 8007bb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bbc:	d032      	beq.n	8007c24 <__ssputs_r+0x80>
 8007bbe:	6825      	ldr	r5, [r4, #0]
 8007bc0:	6909      	ldr	r1, [r1, #16]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	eba5 0901 	sub.w	r9, r5, r1
 8007bc8:	6965      	ldr	r5, [r4, #20]
 8007bca:	444b      	add	r3, r9
 8007bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bd4:	106d      	asrs	r5, r5, #1
 8007bd6:	429d      	cmp	r5, r3
 8007bd8:	bf38      	it	cc
 8007bda:	461d      	movcc	r5, r3
 8007bdc:	0553      	lsls	r3, r2, #21
 8007bde:	d531      	bpl.n	8007c44 <__ssputs_r+0xa0>
 8007be0:	4629      	mov	r1, r5
 8007be2:	f7ff ff85 	bl	8007af0 <_malloc_r>
 8007be6:	4606      	mov	r6, r0
 8007be8:	b950      	cbnz	r0, 8007c00 <__ssputs_r+0x5c>
 8007bea:	230c      	movs	r3, #12
 8007bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bf0:	f8ca 3000 	str.w	r3, [sl]
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bfa:	81a3      	strh	r3, [r4, #12]
 8007bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c00:	464a      	mov	r2, r9
 8007c02:	6921      	ldr	r1, [r4, #16]
 8007c04:	f7fe f84c 	bl	8005ca0 <memcpy>
 8007c08:	89a3      	ldrh	r3, [r4, #12]
 8007c0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c12:	81a3      	strh	r3, [r4, #12]
 8007c14:	6126      	str	r6, [r4, #16]
 8007c16:	444e      	add	r6, r9
 8007c18:	6026      	str	r6, [r4, #0]
 8007c1a:	463e      	mov	r6, r7
 8007c1c:	6165      	str	r5, [r4, #20]
 8007c1e:	eba5 0509 	sub.w	r5, r5, r9
 8007c22:	60a5      	str	r5, [r4, #8]
 8007c24:	42be      	cmp	r6, r7
 8007c26:	d900      	bls.n	8007c2a <__ssputs_r+0x86>
 8007c28:	463e      	mov	r6, r7
 8007c2a:	4632      	mov	r2, r6
 8007c2c:	4641      	mov	r1, r8
 8007c2e:	6820      	ldr	r0, [r4, #0]
 8007c30:	f000 f966 	bl	8007f00 <memmove>
 8007c34:	68a3      	ldr	r3, [r4, #8]
 8007c36:	6822      	ldr	r2, [r4, #0]
 8007c38:	1b9b      	subs	r3, r3, r6
 8007c3a:	4432      	add	r2, r6
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	60a3      	str	r3, [r4, #8]
 8007c40:	6022      	str	r2, [r4, #0]
 8007c42:	e7db      	b.n	8007bfc <__ssputs_r+0x58>
 8007c44:	462a      	mov	r2, r5
 8007c46:	f000 f981 	bl	8007f4c <_realloc_r>
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d1e1      	bne.n	8007c14 <__ssputs_r+0x70>
 8007c50:	4650      	mov	r0, sl
 8007c52:	6921      	ldr	r1, [r4, #16]
 8007c54:	f7ff ff00 	bl	8007a58 <_free_r>
 8007c58:	e7c7      	b.n	8007bea <__ssputs_r+0x46>
	...

08007c5c <_svfiprintf_r>:
 8007c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c60:	4698      	mov	r8, r3
 8007c62:	898b      	ldrh	r3, [r1, #12]
 8007c64:	4607      	mov	r7, r0
 8007c66:	061b      	lsls	r3, r3, #24
 8007c68:	460d      	mov	r5, r1
 8007c6a:	4614      	mov	r4, r2
 8007c6c:	b09d      	sub	sp, #116	; 0x74
 8007c6e:	d50e      	bpl.n	8007c8e <_svfiprintf_r+0x32>
 8007c70:	690b      	ldr	r3, [r1, #16]
 8007c72:	b963      	cbnz	r3, 8007c8e <_svfiprintf_r+0x32>
 8007c74:	2140      	movs	r1, #64	; 0x40
 8007c76:	f7ff ff3b 	bl	8007af0 <_malloc_r>
 8007c7a:	6028      	str	r0, [r5, #0]
 8007c7c:	6128      	str	r0, [r5, #16]
 8007c7e:	b920      	cbnz	r0, 8007c8a <_svfiprintf_r+0x2e>
 8007c80:	230c      	movs	r3, #12
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c88:	e0d1      	b.n	8007e2e <_svfiprintf_r+0x1d2>
 8007c8a:	2340      	movs	r3, #64	; 0x40
 8007c8c:	616b      	str	r3, [r5, #20]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	9309      	str	r3, [sp, #36]	; 0x24
 8007c92:	2320      	movs	r3, #32
 8007c94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c98:	2330      	movs	r3, #48	; 0x30
 8007c9a:	f04f 0901 	mov.w	r9, #1
 8007c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ca2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007e48 <_svfiprintf_r+0x1ec>
 8007ca6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007caa:	4623      	mov	r3, r4
 8007cac:	469a      	mov	sl, r3
 8007cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cb2:	b10a      	cbz	r2, 8007cb8 <_svfiprintf_r+0x5c>
 8007cb4:	2a25      	cmp	r2, #37	; 0x25
 8007cb6:	d1f9      	bne.n	8007cac <_svfiprintf_r+0x50>
 8007cb8:	ebba 0b04 	subs.w	fp, sl, r4
 8007cbc:	d00b      	beq.n	8007cd6 <_svfiprintf_r+0x7a>
 8007cbe:	465b      	mov	r3, fp
 8007cc0:	4622      	mov	r2, r4
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f7ff ff6d 	bl	8007ba4 <__ssputs_r>
 8007cca:	3001      	adds	r0, #1
 8007ccc:	f000 80aa 	beq.w	8007e24 <_svfiprintf_r+0x1c8>
 8007cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cd2:	445a      	add	r2, fp
 8007cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 80a2 	beq.w	8007e24 <_svfiprintf_r+0x1c8>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cea:	f10a 0a01 	add.w	sl, sl, #1
 8007cee:	9304      	str	r3, [sp, #16]
 8007cf0:	9307      	str	r3, [sp, #28]
 8007cf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cf6:	931a      	str	r3, [sp, #104]	; 0x68
 8007cf8:	4654      	mov	r4, sl
 8007cfa:	2205      	movs	r2, #5
 8007cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d00:	4851      	ldr	r0, [pc, #324]	; (8007e48 <_svfiprintf_r+0x1ec>)
 8007d02:	f7ff fb0b 	bl	800731c <memchr>
 8007d06:	9a04      	ldr	r2, [sp, #16]
 8007d08:	b9d8      	cbnz	r0, 8007d42 <_svfiprintf_r+0xe6>
 8007d0a:	06d0      	lsls	r0, r2, #27
 8007d0c:	bf44      	itt	mi
 8007d0e:	2320      	movmi	r3, #32
 8007d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d14:	0711      	lsls	r1, r2, #28
 8007d16:	bf44      	itt	mi
 8007d18:	232b      	movmi	r3, #43	; 0x2b
 8007d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d22:	2b2a      	cmp	r3, #42	; 0x2a
 8007d24:	d015      	beq.n	8007d52 <_svfiprintf_r+0xf6>
 8007d26:	4654      	mov	r4, sl
 8007d28:	2000      	movs	r0, #0
 8007d2a:	f04f 0c0a 	mov.w	ip, #10
 8007d2e:	9a07      	ldr	r2, [sp, #28]
 8007d30:	4621      	mov	r1, r4
 8007d32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d36:	3b30      	subs	r3, #48	; 0x30
 8007d38:	2b09      	cmp	r3, #9
 8007d3a:	d94e      	bls.n	8007dda <_svfiprintf_r+0x17e>
 8007d3c:	b1b0      	cbz	r0, 8007d6c <_svfiprintf_r+0x110>
 8007d3e:	9207      	str	r2, [sp, #28]
 8007d40:	e014      	b.n	8007d6c <_svfiprintf_r+0x110>
 8007d42:	eba0 0308 	sub.w	r3, r0, r8
 8007d46:	fa09 f303 	lsl.w	r3, r9, r3
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	46a2      	mov	sl, r4
 8007d4e:	9304      	str	r3, [sp, #16]
 8007d50:	e7d2      	b.n	8007cf8 <_svfiprintf_r+0x9c>
 8007d52:	9b03      	ldr	r3, [sp, #12]
 8007d54:	1d19      	adds	r1, r3, #4
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	9103      	str	r1, [sp, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bfbb      	ittet	lt
 8007d5e:	425b      	neglt	r3, r3
 8007d60:	f042 0202 	orrlt.w	r2, r2, #2
 8007d64:	9307      	strge	r3, [sp, #28]
 8007d66:	9307      	strlt	r3, [sp, #28]
 8007d68:	bfb8      	it	lt
 8007d6a:	9204      	strlt	r2, [sp, #16]
 8007d6c:	7823      	ldrb	r3, [r4, #0]
 8007d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d70:	d10c      	bne.n	8007d8c <_svfiprintf_r+0x130>
 8007d72:	7863      	ldrb	r3, [r4, #1]
 8007d74:	2b2a      	cmp	r3, #42	; 0x2a
 8007d76:	d135      	bne.n	8007de4 <_svfiprintf_r+0x188>
 8007d78:	9b03      	ldr	r3, [sp, #12]
 8007d7a:	3402      	adds	r4, #2
 8007d7c:	1d1a      	adds	r2, r3, #4
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	9203      	str	r2, [sp, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	bfb8      	it	lt
 8007d86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007d8a:	9305      	str	r3, [sp, #20]
 8007d8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e58 <_svfiprintf_r+0x1fc>
 8007d90:	2203      	movs	r2, #3
 8007d92:	4650      	mov	r0, sl
 8007d94:	7821      	ldrb	r1, [r4, #0]
 8007d96:	f7ff fac1 	bl	800731c <memchr>
 8007d9a:	b140      	cbz	r0, 8007dae <_svfiprintf_r+0x152>
 8007d9c:	2340      	movs	r3, #64	; 0x40
 8007d9e:	eba0 000a 	sub.w	r0, r0, sl
 8007da2:	fa03 f000 	lsl.w	r0, r3, r0
 8007da6:	9b04      	ldr	r3, [sp, #16]
 8007da8:	3401      	adds	r4, #1
 8007daa:	4303      	orrs	r3, r0
 8007dac:	9304      	str	r3, [sp, #16]
 8007dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007db2:	2206      	movs	r2, #6
 8007db4:	4825      	ldr	r0, [pc, #148]	; (8007e4c <_svfiprintf_r+0x1f0>)
 8007db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dba:	f7ff faaf 	bl	800731c <memchr>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d038      	beq.n	8007e34 <_svfiprintf_r+0x1d8>
 8007dc2:	4b23      	ldr	r3, [pc, #140]	; (8007e50 <_svfiprintf_r+0x1f4>)
 8007dc4:	bb1b      	cbnz	r3, 8007e0e <_svfiprintf_r+0x1b2>
 8007dc6:	9b03      	ldr	r3, [sp, #12]
 8007dc8:	3307      	adds	r3, #7
 8007dca:	f023 0307 	bic.w	r3, r3, #7
 8007dce:	3308      	adds	r3, #8
 8007dd0:	9303      	str	r3, [sp, #12]
 8007dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd4:	4433      	add	r3, r6
 8007dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd8:	e767      	b.n	8007caa <_svfiprintf_r+0x4e>
 8007dda:	460c      	mov	r4, r1
 8007ddc:	2001      	movs	r0, #1
 8007dde:	fb0c 3202 	mla	r2, ip, r2, r3
 8007de2:	e7a5      	b.n	8007d30 <_svfiprintf_r+0xd4>
 8007de4:	2300      	movs	r3, #0
 8007de6:	f04f 0c0a 	mov.w	ip, #10
 8007dea:	4619      	mov	r1, r3
 8007dec:	3401      	adds	r4, #1
 8007dee:	9305      	str	r3, [sp, #20]
 8007df0:	4620      	mov	r0, r4
 8007df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007df6:	3a30      	subs	r2, #48	; 0x30
 8007df8:	2a09      	cmp	r2, #9
 8007dfa:	d903      	bls.n	8007e04 <_svfiprintf_r+0x1a8>
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0c5      	beq.n	8007d8c <_svfiprintf_r+0x130>
 8007e00:	9105      	str	r1, [sp, #20]
 8007e02:	e7c3      	b.n	8007d8c <_svfiprintf_r+0x130>
 8007e04:	4604      	mov	r4, r0
 8007e06:	2301      	movs	r3, #1
 8007e08:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e0c:	e7f0      	b.n	8007df0 <_svfiprintf_r+0x194>
 8007e0e:	ab03      	add	r3, sp, #12
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	462a      	mov	r2, r5
 8007e14:	4638      	mov	r0, r7
 8007e16:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <_svfiprintf_r+0x1f8>)
 8007e18:	a904      	add	r1, sp, #16
 8007e1a:	f7fd fff5 	bl	8005e08 <_printf_float>
 8007e1e:	1c42      	adds	r2, r0, #1
 8007e20:	4606      	mov	r6, r0
 8007e22:	d1d6      	bne.n	8007dd2 <_svfiprintf_r+0x176>
 8007e24:	89ab      	ldrh	r3, [r5, #12]
 8007e26:	065b      	lsls	r3, r3, #25
 8007e28:	f53f af2c 	bmi.w	8007c84 <_svfiprintf_r+0x28>
 8007e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e2e:	b01d      	add	sp, #116	; 0x74
 8007e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e34:	ab03      	add	r3, sp, #12
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	462a      	mov	r2, r5
 8007e3a:	4638      	mov	r0, r7
 8007e3c:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <_svfiprintf_r+0x1f8>)
 8007e3e:	a904      	add	r1, sp, #16
 8007e40:	f7fe fa7e 	bl	8006340 <_printf_i>
 8007e44:	e7eb      	b.n	8007e1e <_svfiprintf_r+0x1c2>
 8007e46:	bf00      	nop
 8007e48:	08008d64 	.word	0x08008d64
 8007e4c:	08008d6e 	.word	0x08008d6e
 8007e50:	08005e09 	.word	0x08005e09
 8007e54:	08007ba5 	.word	0x08007ba5
 8007e58:	08008d6a 	.word	0x08008d6a

08007e5c <_sbrk_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	2300      	movs	r3, #0
 8007e60:	4d05      	ldr	r5, [pc, #20]	; (8007e78 <_sbrk_r+0x1c>)
 8007e62:	4604      	mov	r4, r0
 8007e64:	4608      	mov	r0, r1
 8007e66:	602b      	str	r3, [r5, #0]
 8007e68:	f7fa fe92 	bl	8002b90 <_sbrk>
 8007e6c:	1c43      	adds	r3, r0, #1
 8007e6e:	d102      	bne.n	8007e76 <_sbrk_r+0x1a>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	b103      	cbz	r3, 8007e76 <_sbrk_r+0x1a>
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	bd38      	pop	{r3, r4, r5, pc}
 8007e78:	200004d8 	.word	0x200004d8

08007e7c <__assert_func>:
 8007e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e7e:	4614      	mov	r4, r2
 8007e80:	461a      	mov	r2, r3
 8007e82:	4b09      	ldr	r3, [pc, #36]	; (8007ea8 <__assert_func+0x2c>)
 8007e84:	4605      	mov	r5, r0
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68d8      	ldr	r0, [r3, #12]
 8007e8a:	b14c      	cbz	r4, 8007ea0 <__assert_func+0x24>
 8007e8c:	4b07      	ldr	r3, [pc, #28]	; (8007eac <__assert_func+0x30>)
 8007e8e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e92:	9100      	str	r1, [sp, #0]
 8007e94:	462b      	mov	r3, r5
 8007e96:	4906      	ldr	r1, [pc, #24]	; (8007eb0 <__assert_func+0x34>)
 8007e98:	f000 f80e 	bl	8007eb8 <fiprintf>
 8007e9c:	f000 faa2 	bl	80083e4 <abort>
 8007ea0:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <__assert_func+0x38>)
 8007ea2:	461c      	mov	r4, r3
 8007ea4:	e7f3      	b.n	8007e8e <__assert_func+0x12>
 8007ea6:	bf00      	nop
 8007ea8:	200000d4 	.word	0x200000d4
 8007eac:	08008d75 	.word	0x08008d75
 8007eb0:	08008d82 	.word	0x08008d82
 8007eb4:	08008db0 	.word	0x08008db0

08007eb8 <fiprintf>:
 8007eb8:	b40e      	push	{r1, r2, r3}
 8007eba:	b503      	push	{r0, r1, lr}
 8007ebc:	4601      	mov	r1, r0
 8007ebe:	ab03      	add	r3, sp, #12
 8007ec0:	4805      	ldr	r0, [pc, #20]	; (8007ed8 <fiprintf+0x20>)
 8007ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec6:	6800      	ldr	r0, [r0, #0]
 8007ec8:	9301      	str	r3, [sp, #4]
 8007eca:	f000 f88d 	bl	8007fe8 <_vfiprintf_r>
 8007ece:	b002      	add	sp, #8
 8007ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ed4:	b003      	add	sp, #12
 8007ed6:	4770      	bx	lr
 8007ed8:	200000d4 	.word	0x200000d4

08007edc <__ascii_mbtowc>:
 8007edc:	b082      	sub	sp, #8
 8007ede:	b901      	cbnz	r1, 8007ee2 <__ascii_mbtowc+0x6>
 8007ee0:	a901      	add	r1, sp, #4
 8007ee2:	b142      	cbz	r2, 8007ef6 <__ascii_mbtowc+0x1a>
 8007ee4:	b14b      	cbz	r3, 8007efa <__ascii_mbtowc+0x1e>
 8007ee6:	7813      	ldrb	r3, [r2, #0]
 8007ee8:	600b      	str	r3, [r1, #0]
 8007eea:	7812      	ldrb	r2, [r2, #0]
 8007eec:	1e10      	subs	r0, r2, #0
 8007eee:	bf18      	it	ne
 8007ef0:	2001      	movne	r0, #1
 8007ef2:	b002      	add	sp, #8
 8007ef4:	4770      	bx	lr
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	e7fb      	b.n	8007ef2 <__ascii_mbtowc+0x16>
 8007efa:	f06f 0001 	mvn.w	r0, #1
 8007efe:	e7f8      	b.n	8007ef2 <__ascii_mbtowc+0x16>

08007f00 <memmove>:
 8007f00:	4288      	cmp	r0, r1
 8007f02:	b510      	push	{r4, lr}
 8007f04:	eb01 0402 	add.w	r4, r1, r2
 8007f08:	d902      	bls.n	8007f10 <memmove+0x10>
 8007f0a:	4284      	cmp	r4, r0
 8007f0c:	4623      	mov	r3, r4
 8007f0e:	d807      	bhi.n	8007f20 <memmove+0x20>
 8007f10:	1e43      	subs	r3, r0, #1
 8007f12:	42a1      	cmp	r1, r4
 8007f14:	d008      	beq.n	8007f28 <memmove+0x28>
 8007f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f1e:	e7f8      	b.n	8007f12 <memmove+0x12>
 8007f20:	4601      	mov	r1, r0
 8007f22:	4402      	add	r2, r0
 8007f24:	428a      	cmp	r2, r1
 8007f26:	d100      	bne.n	8007f2a <memmove+0x2a>
 8007f28:	bd10      	pop	{r4, pc}
 8007f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f32:	e7f7      	b.n	8007f24 <memmove+0x24>

08007f34 <__malloc_lock>:
 8007f34:	4801      	ldr	r0, [pc, #4]	; (8007f3c <__malloc_lock+0x8>)
 8007f36:	f000 bc15 	b.w	8008764 <__retarget_lock_acquire_recursive>
 8007f3a:	bf00      	nop
 8007f3c:	200004e0 	.word	0x200004e0

08007f40 <__malloc_unlock>:
 8007f40:	4801      	ldr	r0, [pc, #4]	; (8007f48 <__malloc_unlock+0x8>)
 8007f42:	f000 bc10 	b.w	8008766 <__retarget_lock_release_recursive>
 8007f46:	bf00      	nop
 8007f48:	200004e0 	.word	0x200004e0

08007f4c <_realloc_r>:
 8007f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4e:	4607      	mov	r7, r0
 8007f50:	4614      	mov	r4, r2
 8007f52:	460e      	mov	r6, r1
 8007f54:	b921      	cbnz	r1, 8007f60 <_realloc_r+0x14>
 8007f56:	4611      	mov	r1, r2
 8007f58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007f5c:	f7ff bdc8 	b.w	8007af0 <_malloc_r>
 8007f60:	b922      	cbnz	r2, 8007f6c <_realloc_r+0x20>
 8007f62:	f7ff fd79 	bl	8007a58 <_free_r>
 8007f66:	4625      	mov	r5, r4
 8007f68:	4628      	mov	r0, r5
 8007f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f6c:	f000 fc60 	bl	8008830 <_malloc_usable_size_r>
 8007f70:	42a0      	cmp	r0, r4
 8007f72:	d20f      	bcs.n	8007f94 <_realloc_r+0x48>
 8007f74:	4621      	mov	r1, r4
 8007f76:	4638      	mov	r0, r7
 8007f78:	f7ff fdba 	bl	8007af0 <_malloc_r>
 8007f7c:	4605      	mov	r5, r0
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d0f2      	beq.n	8007f68 <_realloc_r+0x1c>
 8007f82:	4631      	mov	r1, r6
 8007f84:	4622      	mov	r2, r4
 8007f86:	f7fd fe8b 	bl	8005ca0 <memcpy>
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	f7ff fd63 	bl	8007a58 <_free_r>
 8007f92:	e7e9      	b.n	8007f68 <_realloc_r+0x1c>
 8007f94:	4635      	mov	r5, r6
 8007f96:	e7e7      	b.n	8007f68 <_realloc_r+0x1c>

08007f98 <__sfputc_r>:
 8007f98:	6893      	ldr	r3, [r2, #8]
 8007f9a:	b410      	push	{r4}
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	6093      	str	r3, [r2, #8]
 8007fa2:	da07      	bge.n	8007fb4 <__sfputc_r+0x1c>
 8007fa4:	6994      	ldr	r4, [r2, #24]
 8007fa6:	42a3      	cmp	r3, r4
 8007fa8:	db01      	blt.n	8007fae <__sfputc_r+0x16>
 8007faa:	290a      	cmp	r1, #10
 8007fac:	d102      	bne.n	8007fb4 <__sfputc_r+0x1c>
 8007fae:	bc10      	pop	{r4}
 8007fb0:	f000 b94a 	b.w	8008248 <__swbuf_r>
 8007fb4:	6813      	ldr	r3, [r2, #0]
 8007fb6:	1c58      	adds	r0, r3, #1
 8007fb8:	6010      	str	r0, [r2, #0]
 8007fba:	7019      	strb	r1, [r3, #0]
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	bc10      	pop	{r4}
 8007fc0:	4770      	bx	lr

08007fc2 <__sfputs_r>:
 8007fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc4:	4606      	mov	r6, r0
 8007fc6:	460f      	mov	r7, r1
 8007fc8:	4614      	mov	r4, r2
 8007fca:	18d5      	adds	r5, r2, r3
 8007fcc:	42ac      	cmp	r4, r5
 8007fce:	d101      	bne.n	8007fd4 <__sfputs_r+0x12>
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	e007      	b.n	8007fe4 <__sfputs_r+0x22>
 8007fd4:	463a      	mov	r2, r7
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fdc:	f7ff ffdc 	bl	8007f98 <__sfputc_r>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d1f3      	bne.n	8007fcc <__sfputs_r+0xa>
 8007fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fe8 <_vfiprintf_r>:
 8007fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	460d      	mov	r5, r1
 8007fee:	4614      	mov	r4, r2
 8007ff0:	4698      	mov	r8, r3
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	b09d      	sub	sp, #116	; 0x74
 8007ff6:	b118      	cbz	r0, 8008000 <_vfiprintf_r+0x18>
 8007ff8:	6983      	ldr	r3, [r0, #24]
 8007ffa:	b90b      	cbnz	r3, 8008000 <_vfiprintf_r+0x18>
 8007ffc:	f000 fb14 	bl	8008628 <__sinit>
 8008000:	4b89      	ldr	r3, [pc, #548]	; (8008228 <_vfiprintf_r+0x240>)
 8008002:	429d      	cmp	r5, r3
 8008004:	d11b      	bne.n	800803e <_vfiprintf_r+0x56>
 8008006:	6875      	ldr	r5, [r6, #4]
 8008008:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800800a:	07d9      	lsls	r1, r3, #31
 800800c:	d405      	bmi.n	800801a <_vfiprintf_r+0x32>
 800800e:	89ab      	ldrh	r3, [r5, #12]
 8008010:	059a      	lsls	r2, r3, #22
 8008012:	d402      	bmi.n	800801a <_vfiprintf_r+0x32>
 8008014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008016:	f000 fba5 	bl	8008764 <__retarget_lock_acquire_recursive>
 800801a:	89ab      	ldrh	r3, [r5, #12]
 800801c:	071b      	lsls	r3, r3, #28
 800801e:	d501      	bpl.n	8008024 <_vfiprintf_r+0x3c>
 8008020:	692b      	ldr	r3, [r5, #16]
 8008022:	b9eb      	cbnz	r3, 8008060 <_vfiprintf_r+0x78>
 8008024:	4629      	mov	r1, r5
 8008026:	4630      	mov	r0, r6
 8008028:	f000 f96e 	bl	8008308 <__swsetup_r>
 800802c:	b1c0      	cbz	r0, 8008060 <_vfiprintf_r+0x78>
 800802e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008030:	07dc      	lsls	r4, r3, #31
 8008032:	d50e      	bpl.n	8008052 <_vfiprintf_r+0x6a>
 8008034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008038:	b01d      	add	sp, #116	; 0x74
 800803a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803e:	4b7b      	ldr	r3, [pc, #492]	; (800822c <_vfiprintf_r+0x244>)
 8008040:	429d      	cmp	r5, r3
 8008042:	d101      	bne.n	8008048 <_vfiprintf_r+0x60>
 8008044:	68b5      	ldr	r5, [r6, #8]
 8008046:	e7df      	b.n	8008008 <_vfiprintf_r+0x20>
 8008048:	4b79      	ldr	r3, [pc, #484]	; (8008230 <_vfiprintf_r+0x248>)
 800804a:	429d      	cmp	r5, r3
 800804c:	bf08      	it	eq
 800804e:	68f5      	ldreq	r5, [r6, #12]
 8008050:	e7da      	b.n	8008008 <_vfiprintf_r+0x20>
 8008052:	89ab      	ldrh	r3, [r5, #12]
 8008054:	0598      	lsls	r0, r3, #22
 8008056:	d4ed      	bmi.n	8008034 <_vfiprintf_r+0x4c>
 8008058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800805a:	f000 fb84 	bl	8008766 <__retarget_lock_release_recursive>
 800805e:	e7e9      	b.n	8008034 <_vfiprintf_r+0x4c>
 8008060:	2300      	movs	r3, #0
 8008062:	9309      	str	r3, [sp, #36]	; 0x24
 8008064:	2320      	movs	r3, #32
 8008066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800806a:	2330      	movs	r3, #48	; 0x30
 800806c:	f04f 0901 	mov.w	r9, #1
 8008070:	f8cd 800c 	str.w	r8, [sp, #12]
 8008074:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008234 <_vfiprintf_r+0x24c>
 8008078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800807c:	4623      	mov	r3, r4
 800807e:	469a      	mov	sl, r3
 8008080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008084:	b10a      	cbz	r2, 800808a <_vfiprintf_r+0xa2>
 8008086:	2a25      	cmp	r2, #37	; 0x25
 8008088:	d1f9      	bne.n	800807e <_vfiprintf_r+0x96>
 800808a:	ebba 0b04 	subs.w	fp, sl, r4
 800808e:	d00b      	beq.n	80080a8 <_vfiprintf_r+0xc0>
 8008090:	465b      	mov	r3, fp
 8008092:	4622      	mov	r2, r4
 8008094:	4629      	mov	r1, r5
 8008096:	4630      	mov	r0, r6
 8008098:	f7ff ff93 	bl	8007fc2 <__sfputs_r>
 800809c:	3001      	adds	r0, #1
 800809e:	f000 80aa 	beq.w	80081f6 <_vfiprintf_r+0x20e>
 80080a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a4:	445a      	add	r2, fp
 80080a6:	9209      	str	r2, [sp, #36]	; 0x24
 80080a8:	f89a 3000 	ldrb.w	r3, [sl]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 80a2 	beq.w	80081f6 <_vfiprintf_r+0x20e>
 80080b2:	2300      	movs	r3, #0
 80080b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080bc:	f10a 0a01 	add.w	sl, sl, #1
 80080c0:	9304      	str	r3, [sp, #16]
 80080c2:	9307      	str	r3, [sp, #28]
 80080c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080c8:	931a      	str	r3, [sp, #104]	; 0x68
 80080ca:	4654      	mov	r4, sl
 80080cc:	2205      	movs	r2, #5
 80080ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080d2:	4858      	ldr	r0, [pc, #352]	; (8008234 <_vfiprintf_r+0x24c>)
 80080d4:	f7ff f922 	bl	800731c <memchr>
 80080d8:	9a04      	ldr	r2, [sp, #16]
 80080da:	b9d8      	cbnz	r0, 8008114 <_vfiprintf_r+0x12c>
 80080dc:	06d1      	lsls	r1, r2, #27
 80080de:	bf44      	itt	mi
 80080e0:	2320      	movmi	r3, #32
 80080e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080e6:	0713      	lsls	r3, r2, #28
 80080e8:	bf44      	itt	mi
 80080ea:	232b      	movmi	r3, #43	; 0x2b
 80080ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080f0:	f89a 3000 	ldrb.w	r3, [sl]
 80080f4:	2b2a      	cmp	r3, #42	; 0x2a
 80080f6:	d015      	beq.n	8008124 <_vfiprintf_r+0x13c>
 80080f8:	4654      	mov	r4, sl
 80080fa:	2000      	movs	r0, #0
 80080fc:	f04f 0c0a 	mov.w	ip, #10
 8008100:	9a07      	ldr	r2, [sp, #28]
 8008102:	4621      	mov	r1, r4
 8008104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008108:	3b30      	subs	r3, #48	; 0x30
 800810a:	2b09      	cmp	r3, #9
 800810c:	d94e      	bls.n	80081ac <_vfiprintf_r+0x1c4>
 800810e:	b1b0      	cbz	r0, 800813e <_vfiprintf_r+0x156>
 8008110:	9207      	str	r2, [sp, #28]
 8008112:	e014      	b.n	800813e <_vfiprintf_r+0x156>
 8008114:	eba0 0308 	sub.w	r3, r0, r8
 8008118:	fa09 f303 	lsl.w	r3, r9, r3
 800811c:	4313      	orrs	r3, r2
 800811e:	46a2      	mov	sl, r4
 8008120:	9304      	str	r3, [sp, #16]
 8008122:	e7d2      	b.n	80080ca <_vfiprintf_r+0xe2>
 8008124:	9b03      	ldr	r3, [sp, #12]
 8008126:	1d19      	adds	r1, r3, #4
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	9103      	str	r1, [sp, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	bfbb      	ittet	lt
 8008130:	425b      	neglt	r3, r3
 8008132:	f042 0202 	orrlt.w	r2, r2, #2
 8008136:	9307      	strge	r3, [sp, #28]
 8008138:	9307      	strlt	r3, [sp, #28]
 800813a:	bfb8      	it	lt
 800813c:	9204      	strlt	r2, [sp, #16]
 800813e:	7823      	ldrb	r3, [r4, #0]
 8008140:	2b2e      	cmp	r3, #46	; 0x2e
 8008142:	d10c      	bne.n	800815e <_vfiprintf_r+0x176>
 8008144:	7863      	ldrb	r3, [r4, #1]
 8008146:	2b2a      	cmp	r3, #42	; 0x2a
 8008148:	d135      	bne.n	80081b6 <_vfiprintf_r+0x1ce>
 800814a:	9b03      	ldr	r3, [sp, #12]
 800814c:	3402      	adds	r4, #2
 800814e:	1d1a      	adds	r2, r3, #4
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	9203      	str	r2, [sp, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	bfb8      	it	lt
 8008158:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800815c:	9305      	str	r3, [sp, #20]
 800815e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008244 <_vfiprintf_r+0x25c>
 8008162:	2203      	movs	r2, #3
 8008164:	4650      	mov	r0, sl
 8008166:	7821      	ldrb	r1, [r4, #0]
 8008168:	f7ff f8d8 	bl	800731c <memchr>
 800816c:	b140      	cbz	r0, 8008180 <_vfiprintf_r+0x198>
 800816e:	2340      	movs	r3, #64	; 0x40
 8008170:	eba0 000a 	sub.w	r0, r0, sl
 8008174:	fa03 f000 	lsl.w	r0, r3, r0
 8008178:	9b04      	ldr	r3, [sp, #16]
 800817a:	3401      	adds	r4, #1
 800817c:	4303      	orrs	r3, r0
 800817e:	9304      	str	r3, [sp, #16]
 8008180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008184:	2206      	movs	r2, #6
 8008186:	482c      	ldr	r0, [pc, #176]	; (8008238 <_vfiprintf_r+0x250>)
 8008188:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800818c:	f7ff f8c6 	bl	800731c <memchr>
 8008190:	2800      	cmp	r0, #0
 8008192:	d03f      	beq.n	8008214 <_vfiprintf_r+0x22c>
 8008194:	4b29      	ldr	r3, [pc, #164]	; (800823c <_vfiprintf_r+0x254>)
 8008196:	bb1b      	cbnz	r3, 80081e0 <_vfiprintf_r+0x1f8>
 8008198:	9b03      	ldr	r3, [sp, #12]
 800819a:	3307      	adds	r3, #7
 800819c:	f023 0307 	bic.w	r3, r3, #7
 80081a0:	3308      	adds	r3, #8
 80081a2:	9303      	str	r3, [sp, #12]
 80081a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a6:	443b      	add	r3, r7
 80081a8:	9309      	str	r3, [sp, #36]	; 0x24
 80081aa:	e767      	b.n	800807c <_vfiprintf_r+0x94>
 80081ac:	460c      	mov	r4, r1
 80081ae:	2001      	movs	r0, #1
 80081b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80081b4:	e7a5      	b.n	8008102 <_vfiprintf_r+0x11a>
 80081b6:	2300      	movs	r3, #0
 80081b8:	f04f 0c0a 	mov.w	ip, #10
 80081bc:	4619      	mov	r1, r3
 80081be:	3401      	adds	r4, #1
 80081c0:	9305      	str	r3, [sp, #20]
 80081c2:	4620      	mov	r0, r4
 80081c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081c8:	3a30      	subs	r2, #48	; 0x30
 80081ca:	2a09      	cmp	r2, #9
 80081cc:	d903      	bls.n	80081d6 <_vfiprintf_r+0x1ee>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0c5      	beq.n	800815e <_vfiprintf_r+0x176>
 80081d2:	9105      	str	r1, [sp, #20]
 80081d4:	e7c3      	b.n	800815e <_vfiprintf_r+0x176>
 80081d6:	4604      	mov	r4, r0
 80081d8:	2301      	movs	r3, #1
 80081da:	fb0c 2101 	mla	r1, ip, r1, r2
 80081de:	e7f0      	b.n	80081c2 <_vfiprintf_r+0x1da>
 80081e0:	ab03      	add	r3, sp, #12
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	462a      	mov	r2, r5
 80081e6:	4630      	mov	r0, r6
 80081e8:	4b15      	ldr	r3, [pc, #84]	; (8008240 <_vfiprintf_r+0x258>)
 80081ea:	a904      	add	r1, sp, #16
 80081ec:	f7fd fe0c 	bl	8005e08 <_printf_float>
 80081f0:	4607      	mov	r7, r0
 80081f2:	1c78      	adds	r0, r7, #1
 80081f4:	d1d6      	bne.n	80081a4 <_vfiprintf_r+0x1bc>
 80081f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081f8:	07d9      	lsls	r1, r3, #31
 80081fa:	d405      	bmi.n	8008208 <_vfiprintf_r+0x220>
 80081fc:	89ab      	ldrh	r3, [r5, #12]
 80081fe:	059a      	lsls	r2, r3, #22
 8008200:	d402      	bmi.n	8008208 <_vfiprintf_r+0x220>
 8008202:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008204:	f000 faaf 	bl	8008766 <__retarget_lock_release_recursive>
 8008208:	89ab      	ldrh	r3, [r5, #12]
 800820a:	065b      	lsls	r3, r3, #25
 800820c:	f53f af12 	bmi.w	8008034 <_vfiprintf_r+0x4c>
 8008210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008212:	e711      	b.n	8008038 <_vfiprintf_r+0x50>
 8008214:	ab03      	add	r3, sp, #12
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	462a      	mov	r2, r5
 800821a:	4630      	mov	r0, r6
 800821c:	4b08      	ldr	r3, [pc, #32]	; (8008240 <_vfiprintf_r+0x258>)
 800821e:	a904      	add	r1, sp, #16
 8008220:	f7fe f88e 	bl	8006340 <_printf_i>
 8008224:	e7e4      	b.n	80081f0 <_vfiprintf_r+0x208>
 8008226:	bf00      	nop
 8008228:	08008edc 	.word	0x08008edc
 800822c:	08008efc 	.word	0x08008efc
 8008230:	08008ebc 	.word	0x08008ebc
 8008234:	08008d64 	.word	0x08008d64
 8008238:	08008d6e 	.word	0x08008d6e
 800823c:	08005e09 	.word	0x08005e09
 8008240:	08007fc3 	.word	0x08007fc3
 8008244:	08008d6a 	.word	0x08008d6a

08008248 <__swbuf_r>:
 8008248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824a:	460e      	mov	r6, r1
 800824c:	4614      	mov	r4, r2
 800824e:	4605      	mov	r5, r0
 8008250:	b118      	cbz	r0, 800825a <__swbuf_r+0x12>
 8008252:	6983      	ldr	r3, [r0, #24]
 8008254:	b90b      	cbnz	r3, 800825a <__swbuf_r+0x12>
 8008256:	f000 f9e7 	bl	8008628 <__sinit>
 800825a:	4b21      	ldr	r3, [pc, #132]	; (80082e0 <__swbuf_r+0x98>)
 800825c:	429c      	cmp	r4, r3
 800825e:	d12b      	bne.n	80082b8 <__swbuf_r+0x70>
 8008260:	686c      	ldr	r4, [r5, #4]
 8008262:	69a3      	ldr	r3, [r4, #24]
 8008264:	60a3      	str	r3, [r4, #8]
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	071a      	lsls	r2, r3, #28
 800826a:	d52f      	bpl.n	80082cc <__swbuf_r+0x84>
 800826c:	6923      	ldr	r3, [r4, #16]
 800826e:	b36b      	cbz	r3, 80082cc <__swbuf_r+0x84>
 8008270:	6923      	ldr	r3, [r4, #16]
 8008272:	6820      	ldr	r0, [r4, #0]
 8008274:	b2f6      	uxtb	r6, r6
 8008276:	1ac0      	subs	r0, r0, r3
 8008278:	6963      	ldr	r3, [r4, #20]
 800827a:	4637      	mov	r7, r6
 800827c:	4283      	cmp	r3, r0
 800827e:	dc04      	bgt.n	800828a <__swbuf_r+0x42>
 8008280:	4621      	mov	r1, r4
 8008282:	4628      	mov	r0, r5
 8008284:	f000 f93c 	bl	8008500 <_fflush_r>
 8008288:	bb30      	cbnz	r0, 80082d8 <__swbuf_r+0x90>
 800828a:	68a3      	ldr	r3, [r4, #8]
 800828c:	3001      	adds	r0, #1
 800828e:	3b01      	subs	r3, #1
 8008290:	60a3      	str	r3, [r4, #8]
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	6022      	str	r2, [r4, #0]
 8008298:	701e      	strb	r6, [r3, #0]
 800829a:	6963      	ldr	r3, [r4, #20]
 800829c:	4283      	cmp	r3, r0
 800829e:	d004      	beq.n	80082aa <__swbuf_r+0x62>
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	07db      	lsls	r3, r3, #31
 80082a4:	d506      	bpl.n	80082b4 <__swbuf_r+0x6c>
 80082a6:	2e0a      	cmp	r6, #10
 80082a8:	d104      	bne.n	80082b4 <__swbuf_r+0x6c>
 80082aa:	4621      	mov	r1, r4
 80082ac:	4628      	mov	r0, r5
 80082ae:	f000 f927 	bl	8008500 <_fflush_r>
 80082b2:	b988      	cbnz	r0, 80082d8 <__swbuf_r+0x90>
 80082b4:	4638      	mov	r0, r7
 80082b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b8:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <__swbuf_r+0x9c>)
 80082ba:	429c      	cmp	r4, r3
 80082bc:	d101      	bne.n	80082c2 <__swbuf_r+0x7a>
 80082be:	68ac      	ldr	r4, [r5, #8]
 80082c0:	e7cf      	b.n	8008262 <__swbuf_r+0x1a>
 80082c2:	4b09      	ldr	r3, [pc, #36]	; (80082e8 <__swbuf_r+0xa0>)
 80082c4:	429c      	cmp	r4, r3
 80082c6:	bf08      	it	eq
 80082c8:	68ec      	ldreq	r4, [r5, #12]
 80082ca:	e7ca      	b.n	8008262 <__swbuf_r+0x1a>
 80082cc:	4621      	mov	r1, r4
 80082ce:	4628      	mov	r0, r5
 80082d0:	f000 f81a 	bl	8008308 <__swsetup_r>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d0cb      	beq.n	8008270 <__swbuf_r+0x28>
 80082d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80082dc:	e7ea      	b.n	80082b4 <__swbuf_r+0x6c>
 80082de:	bf00      	nop
 80082e0:	08008edc 	.word	0x08008edc
 80082e4:	08008efc 	.word	0x08008efc
 80082e8:	08008ebc 	.word	0x08008ebc

080082ec <__ascii_wctomb>:
 80082ec:	4603      	mov	r3, r0
 80082ee:	4608      	mov	r0, r1
 80082f0:	b141      	cbz	r1, 8008304 <__ascii_wctomb+0x18>
 80082f2:	2aff      	cmp	r2, #255	; 0xff
 80082f4:	d904      	bls.n	8008300 <__ascii_wctomb+0x14>
 80082f6:	228a      	movs	r2, #138	; 0x8a
 80082f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	4770      	bx	lr
 8008300:	2001      	movs	r0, #1
 8008302:	700a      	strb	r2, [r1, #0]
 8008304:	4770      	bx	lr
	...

08008308 <__swsetup_r>:
 8008308:	4b32      	ldr	r3, [pc, #200]	; (80083d4 <__swsetup_r+0xcc>)
 800830a:	b570      	push	{r4, r5, r6, lr}
 800830c:	681d      	ldr	r5, [r3, #0]
 800830e:	4606      	mov	r6, r0
 8008310:	460c      	mov	r4, r1
 8008312:	b125      	cbz	r5, 800831e <__swsetup_r+0x16>
 8008314:	69ab      	ldr	r3, [r5, #24]
 8008316:	b913      	cbnz	r3, 800831e <__swsetup_r+0x16>
 8008318:	4628      	mov	r0, r5
 800831a:	f000 f985 	bl	8008628 <__sinit>
 800831e:	4b2e      	ldr	r3, [pc, #184]	; (80083d8 <__swsetup_r+0xd0>)
 8008320:	429c      	cmp	r4, r3
 8008322:	d10f      	bne.n	8008344 <__swsetup_r+0x3c>
 8008324:	686c      	ldr	r4, [r5, #4]
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800832c:	0719      	lsls	r1, r3, #28
 800832e:	d42c      	bmi.n	800838a <__swsetup_r+0x82>
 8008330:	06dd      	lsls	r5, r3, #27
 8008332:	d411      	bmi.n	8008358 <__swsetup_r+0x50>
 8008334:	2309      	movs	r3, #9
 8008336:	6033      	str	r3, [r6, #0]
 8008338:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800833c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008340:	81a3      	strh	r3, [r4, #12]
 8008342:	e03e      	b.n	80083c2 <__swsetup_r+0xba>
 8008344:	4b25      	ldr	r3, [pc, #148]	; (80083dc <__swsetup_r+0xd4>)
 8008346:	429c      	cmp	r4, r3
 8008348:	d101      	bne.n	800834e <__swsetup_r+0x46>
 800834a:	68ac      	ldr	r4, [r5, #8]
 800834c:	e7eb      	b.n	8008326 <__swsetup_r+0x1e>
 800834e:	4b24      	ldr	r3, [pc, #144]	; (80083e0 <__swsetup_r+0xd8>)
 8008350:	429c      	cmp	r4, r3
 8008352:	bf08      	it	eq
 8008354:	68ec      	ldreq	r4, [r5, #12]
 8008356:	e7e6      	b.n	8008326 <__swsetup_r+0x1e>
 8008358:	0758      	lsls	r0, r3, #29
 800835a:	d512      	bpl.n	8008382 <__swsetup_r+0x7a>
 800835c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800835e:	b141      	cbz	r1, 8008372 <__swsetup_r+0x6a>
 8008360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008364:	4299      	cmp	r1, r3
 8008366:	d002      	beq.n	800836e <__swsetup_r+0x66>
 8008368:	4630      	mov	r0, r6
 800836a:	f7ff fb75 	bl	8007a58 <_free_r>
 800836e:	2300      	movs	r3, #0
 8008370:	6363      	str	r3, [r4, #52]	; 0x34
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008378:	81a3      	strh	r3, [r4, #12]
 800837a:	2300      	movs	r3, #0
 800837c:	6063      	str	r3, [r4, #4]
 800837e:	6923      	ldr	r3, [r4, #16]
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	f043 0308 	orr.w	r3, r3, #8
 8008388:	81a3      	strh	r3, [r4, #12]
 800838a:	6923      	ldr	r3, [r4, #16]
 800838c:	b94b      	cbnz	r3, 80083a2 <__swsetup_r+0x9a>
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008398:	d003      	beq.n	80083a2 <__swsetup_r+0x9a>
 800839a:	4621      	mov	r1, r4
 800839c:	4630      	mov	r0, r6
 800839e:	f000 fa07 	bl	80087b0 <__smakebuf_r>
 80083a2:	89a0      	ldrh	r0, [r4, #12]
 80083a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083a8:	f010 0301 	ands.w	r3, r0, #1
 80083ac:	d00a      	beq.n	80083c4 <__swsetup_r+0xbc>
 80083ae:	2300      	movs	r3, #0
 80083b0:	60a3      	str	r3, [r4, #8]
 80083b2:	6963      	ldr	r3, [r4, #20]
 80083b4:	425b      	negs	r3, r3
 80083b6:	61a3      	str	r3, [r4, #24]
 80083b8:	6923      	ldr	r3, [r4, #16]
 80083ba:	b943      	cbnz	r3, 80083ce <__swsetup_r+0xc6>
 80083bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083c0:	d1ba      	bne.n	8008338 <__swsetup_r+0x30>
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	0781      	lsls	r1, r0, #30
 80083c6:	bf58      	it	pl
 80083c8:	6963      	ldrpl	r3, [r4, #20]
 80083ca:	60a3      	str	r3, [r4, #8]
 80083cc:	e7f4      	b.n	80083b8 <__swsetup_r+0xb0>
 80083ce:	2000      	movs	r0, #0
 80083d0:	e7f7      	b.n	80083c2 <__swsetup_r+0xba>
 80083d2:	bf00      	nop
 80083d4:	200000d4 	.word	0x200000d4
 80083d8:	08008edc 	.word	0x08008edc
 80083dc:	08008efc 	.word	0x08008efc
 80083e0:	08008ebc 	.word	0x08008ebc

080083e4 <abort>:
 80083e4:	2006      	movs	r0, #6
 80083e6:	b508      	push	{r3, lr}
 80083e8:	f000 fa52 	bl	8008890 <raise>
 80083ec:	2001      	movs	r0, #1
 80083ee:	f7fa fb5c 	bl	8002aaa <_exit>
	...

080083f4 <__sflush_r>:
 80083f4:	898a      	ldrh	r2, [r1, #12]
 80083f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fa:	4605      	mov	r5, r0
 80083fc:	0710      	lsls	r0, r2, #28
 80083fe:	460c      	mov	r4, r1
 8008400:	d458      	bmi.n	80084b4 <__sflush_r+0xc0>
 8008402:	684b      	ldr	r3, [r1, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	dc05      	bgt.n	8008414 <__sflush_r+0x20>
 8008408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800840a:	2b00      	cmp	r3, #0
 800840c:	dc02      	bgt.n	8008414 <__sflush_r+0x20>
 800840e:	2000      	movs	r0, #0
 8008410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008416:	2e00      	cmp	r6, #0
 8008418:	d0f9      	beq.n	800840e <__sflush_r+0x1a>
 800841a:	2300      	movs	r3, #0
 800841c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008420:	682f      	ldr	r7, [r5, #0]
 8008422:	602b      	str	r3, [r5, #0]
 8008424:	d032      	beq.n	800848c <__sflush_r+0x98>
 8008426:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	075a      	lsls	r2, r3, #29
 800842c:	d505      	bpl.n	800843a <__sflush_r+0x46>
 800842e:	6863      	ldr	r3, [r4, #4]
 8008430:	1ac0      	subs	r0, r0, r3
 8008432:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008434:	b10b      	cbz	r3, 800843a <__sflush_r+0x46>
 8008436:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008438:	1ac0      	subs	r0, r0, r3
 800843a:	2300      	movs	r3, #0
 800843c:	4602      	mov	r2, r0
 800843e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008440:	4628      	mov	r0, r5
 8008442:	6a21      	ldr	r1, [r4, #32]
 8008444:	47b0      	blx	r6
 8008446:	1c43      	adds	r3, r0, #1
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	d106      	bne.n	800845a <__sflush_r+0x66>
 800844c:	6829      	ldr	r1, [r5, #0]
 800844e:	291d      	cmp	r1, #29
 8008450:	d82c      	bhi.n	80084ac <__sflush_r+0xb8>
 8008452:	4a2a      	ldr	r2, [pc, #168]	; (80084fc <__sflush_r+0x108>)
 8008454:	40ca      	lsrs	r2, r1
 8008456:	07d6      	lsls	r6, r2, #31
 8008458:	d528      	bpl.n	80084ac <__sflush_r+0xb8>
 800845a:	2200      	movs	r2, #0
 800845c:	6062      	str	r2, [r4, #4]
 800845e:	6922      	ldr	r2, [r4, #16]
 8008460:	04d9      	lsls	r1, r3, #19
 8008462:	6022      	str	r2, [r4, #0]
 8008464:	d504      	bpl.n	8008470 <__sflush_r+0x7c>
 8008466:	1c42      	adds	r2, r0, #1
 8008468:	d101      	bne.n	800846e <__sflush_r+0x7a>
 800846a:	682b      	ldr	r3, [r5, #0]
 800846c:	b903      	cbnz	r3, 8008470 <__sflush_r+0x7c>
 800846e:	6560      	str	r0, [r4, #84]	; 0x54
 8008470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008472:	602f      	str	r7, [r5, #0]
 8008474:	2900      	cmp	r1, #0
 8008476:	d0ca      	beq.n	800840e <__sflush_r+0x1a>
 8008478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800847c:	4299      	cmp	r1, r3
 800847e:	d002      	beq.n	8008486 <__sflush_r+0x92>
 8008480:	4628      	mov	r0, r5
 8008482:	f7ff fae9 	bl	8007a58 <_free_r>
 8008486:	2000      	movs	r0, #0
 8008488:	6360      	str	r0, [r4, #52]	; 0x34
 800848a:	e7c1      	b.n	8008410 <__sflush_r+0x1c>
 800848c:	6a21      	ldr	r1, [r4, #32]
 800848e:	2301      	movs	r3, #1
 8008490:	4628      	mov	r0, r5
 8008492:	47b0      	blx	r6
 8008494:	1c41      	adds	r1, r0, #1
 8008496:	d1c7      	bne.n	8008428 <__sflush_r+0x34>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0c4      	beq.n	8008428 <__sflush_r+0x34>
 800849e:	2b1d      	cmp	r3, #29
 80084a0:	d001      	beq.n	80084a6 <__sflush_r+0xb2>
 80084a2:	2b16      	cmp	r3, #22
 80084a4:	d101      	bne.n	80084aa <__sflush_r+0xb6>
 80084a6:	602f      	str	r7, [r5, #0]
 80084a8:	e7b1      	b.n	800840e <__sflush_r+0x1a>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084b0:	81a3      	strh	r3, [r4, #12]
 80084b2:	e7ad      	b.n	8008410 <__sflush_r+0x1c>
 80084b4:	690f      	ldr	r7, [r1, #16]
 80084b6:	2f00      	cmp	r7, #0
 80084b8:	d0a9      	beq.n	800840e <__sflush_r+0x1a>
 80084ba:	0793      	lsls	r3, r2, #30
 80084bc:	bf18      	it	ne
 80084be:	2300      	movne	r3, #0
 80084c0:	680e      	ldr	r6, [r1, #0]
 80084c2:	bf08      	it	eq
 80084c4:	694b      	ldreq	r3, [r1, #20]
 80084c6:	eba6 0807 	sub.w	r8, r6, r7
 80084ca:	600f      	str	r7, [r1, #0]
 80084cc:	608b      	str	r3, [r1, #8]
 80084ce:	f1b8 0f00 	cmp.w	r8, #0
 80084d2:	dd9c      	ble.n	800840e <__sflush_r+0x1a>
 80084d4:	4643      	mov	r3, r8
 80084d6:	463a      	mov	r2, r7
 80084d8:	4628      	mov	r0, r5
 80084da:	6a21      	ldr	r1, [r4, #32]
 80084dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084de:	47b0      	blx	r6
 80084e0:	2800      	cmp	r0, #0
 80084e2:	dc06      	bgt.n	80084f2 <__sflush_r+0xfe>
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ee:	81a3      	strh	r3, [r4, #12]
 80084f0:	e78e      	b.n	8008410 <__sflush_r+0x1c>
 80084f2:	4407      	add	r7, r0
 80084f4:	eba8 0800 	sub.w	r8, r8, r0
 80084f8:	e7e9      	b.n	80084ce <__sflush_r+0xda>
 80084fa:	bf00      	nop
 80084fc:	20400001 	.word	0x20400001

08008500 <_fflush_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	690b      	ldr	r3, [r1, #16]
 8008504:	4605      	mov	r5, r0
 8008506:	460c      	mov	r4, r1
 8008508:	b913      	cbnz	r3, 8008510 <_fflush_r+0x10>
 800850a:	2500      	movs	r5, #0
 800850c:	4628      	mov	r0, r5
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	b118      	cbz	r0, 800851a <_fflush_r+0x1a>
 8008512:	6983      	ldr	r3, [r0, #24]
 8008514:	b90b      	cbnz	r3, 800851a <_fflush_r+0x1a>
 8008516:	f000 f887 	bl	8008628 <__sinit>
 800851a:	4b14      	ldr	r3, [pc, #80]	; (800856c <_fflush_r+0x6c>)
 800851c:	429c      	cmp	r4, r3
 800851e:	d11b      	bne.n	8008558 <_fflush_r+0x58>
 8008520:	686c      	ldr	r4, [r5, #4]
 8008522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0ef      	beq.n	800850a <_fflush_r+0xa>
 800852a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800852c:	07d0      	lsls	r0, r2, #31
 800852e:	d404      	bmi.n	800853a <_fflush_r+0x3a>
 8008530:	0599      	lsls	r1, r3, #22
 8008532:	d402      	bmi.n	800853a <_fflush_r+0x3a>
 8008534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008536:	f000 f915 	bl	8008764 <__retarget_lock_acquire_recursive>
 800853a:	4628      	mov	r0, r5
 800853c:	4621      	mov	r1, r4
 800853e:	f7ff ff59 	bl	80083f4 <__sflush_r>
 8008542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008544:	4605      	mov	r5, r0
 8008546:	07da      	lsls	r2, r3, #31
 8008548:	d4e0      	bmi.n	800850c <_fflush_r+0xc>
 800854a:	89a3      	ldrh	r3, [r4, #12]
 800854c:	059b      	lsls	r3, r3, #22
 800854e:	d4dd      	bmi.n	800850c <_fflush_r+0xc>
 8008550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008552:	f000 f908 	bl	8008766 <__retarget_lock_release_recursive>
 8008556:	e7d9      	b.n	800850c <_fflush_r+0xc>
 8008558:	4b05      	ldr	r3, [pc, #20]	; (8008570 <_fflush_r+0x70>)
 800855a:	429c      	cmp	r4, r3
 800855c:	d101      	bne.n	8008562 <_fflush_r+0x62>
 800855e:	68ac      	ldr	r4, [r5, #8]
 8008560:	e7df      	b.n	8008522 <_fflush_r+0x22>
 8008562:	4b04      	ldr	r3, [pc, #16]	; (8008574 <_fflush_r+0x74>)
 8008564:	429c      	cmp	r4, r3
 8008566:	bf08      	it	eq
 8008568:	68ec      	ldreq	r4, [r5, #12]
 800856a:	e7da      	b.n	8008522 <_fflush_r+0x22>
 800856c:	08008edc 	.word	0x08008edc
 8008570:	08008efc 	.word	0x08008efc
 8008574:	08008ebc 	.word	0x08008ebc

08008578 <std>:
 8008578:	2300      	movs	r3, #0
 800857a:	b510      	push	{r4, lr}
 800857c:	4604      	mov	r4, r0
 800857e:	e9c0 3300 	strd	r3, r3, [r0]
 8008582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008586:	6083      	str	r3, [r0, #8]
 8008588:	8181      	strh	r1, [r0, #12]
 800858a:	6643      	str	r3, [r0, #100]	; 0x64
 800858c:	81c2      	strh	r2, [r0, #14]
 800858e:	6183      	str	r3, [r0, #24]
 8008590:	4619      	mov	r1, r3
 8008592:	2208      	movs	r2, #8
 8008594:	305c      	adds	r0, #92	; 0x5c
 8008596:	f7fd fb91 	bl	8005cbc <memset>
 800859a:	4b05      	ldr	r3, [pc, #20]	; (80085b0 <std+0x38>)
 800859c:	6224      	str	r4, [r4, #32]
 800859e:	6263      	str	r3, [r4, #36]	; 0x24
 80085a0:	4b04      	ldr	r3, [pc, #16]	; (80085b4 <std+0x3c>)
 80085a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80085a4:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <std+0x40>)
 80085a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085a8:	4b04      	ldr	r3, [pc, #16]	; (80085bc <std+0x44>)
 80085aa:	6323      	str	r3, [r4, #48]	; 0x30
 80085ac:	bd10      	pop	{r4, pc}
 80085ae:	bf00      	nop
 80085b0:	080088c9 	.word	0x080088c9
 80085b4:	080088eb 	.word	0x080088eb
 80085b8:	08008923 	.word	0x08008923
 80085bc:	08008947 	.word	0x08008947

080085c0 <_cleanup_r>:
 80085c0:	4901      	ldr	r1, [pc, #4]	; (80085c8 <_cleanup_r+0x8>)
 80085c2:	f000 b8af 	b.w	8008724 <_fwalk_reent>
 80085c6:	bf00      	nop
 80085c8:	08008501 	.word	0x08008501

080085cc <__sfmoreglue>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	2568      	movs	r5, #104	; 0x68
 80085d0:	1e4a      	subs	r2, r1, #1
 80085d2:	4355      	muls	r5, r2
 80085d4:	460e      	mov	r6, r1
 80085d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085da:	f7ff fa89 	bl	8007af0 <_malloc_r>
 80085de:	4604      	mov	r4, r0
 80085e0:	b140      	cbz	r0, 80085f4 <__sfmoreglue+0x28>
 80085e2:	2100      	movs	r1, #0
 80085e4:	e9c0 1600 	strd	r1, r6, [r0]
 80085e8:	300c      	adds	r0, #12
 80085ea:	60a0      	str	r0, [r4, #8]
 80085ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085f0:	f7fd fb64 	bl	8005cbc <memset>
 80085f4:	4620      	mov	r0, r4
 80085f6:	bd70      	pop	{r4, r5, r6, pc}

080085f8 <__sfp_lock_acquire>:
 80085f8:	4801      	ldr	r0, [pc, #4]	; (8008600 <__sfp_lock_acquire+0x8>)
 80085fa:	f000 b8b3 	b.w	8008764 <__retarget_lock_acquire_recursive>
 80085fe:	bf00      	nop
 8008600:	200004e4 	.word	0x200004e4

08008604 <__sfp_lock_release>:
 8008604:	4801      	ldr	r0, [pc, #4]	; (800860c <__sfp_lock_release+0x8>)
 8008606:	f000 b8ae 	b.w	8008766 <__retarget_lock_release_recursive>
 800860a:	bf00      	nop
 800860c:	200004e4 	.word	0x200004e4

08008610 <__sinit_lock_acquire>:
 8008610:	4801      	ldr	r0, [pc, #4]	; (8008618 <__sinit_lock_acquire+0x8>)
 8008612:	f000 b8a7 	b.w	8008764 <__retarget_lock_acquire_recursive>
 8008616:	bf00      	nop
 8008618:	200004df 	.word	0x200004df

0800861c <__sinit_lock_release>:
 800861c:	4801      	ldr	r0, [pc, #4]	; (8008624 <__sinit_lock_release+0x8>)
 800861e:	f000 b8a2 	b.w	8008766 <__retarget_lock_release_recursive>
 8008622:	bf00      	nop
 8008624:	200004df 	.word	0x200004df

08008628 <__sinit>:
 8008628:	b510      	push	{r4, lr}
 800862a:	4604      	mov	r4, r0
 800862c:	f7ff fff0 	bl	8008610 <__sinit_lock_acquire>
 8008630:	69a3      	ldr	r3, [r4, #24]
 8008632:	b11b      	cbz	r3, 800863c <__sinit+0x14>
 8008634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008638:	f7ff bff0 	b.w	800861c <__sinit_lock_release>
 800863c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008640:	6523      	str	r3, [r4, #80]	; 0x50
 8008642:	4b13      	ldr	r3, [pc, #76]	; (8008690 <__sinit+0x68>)
 8008644:	4a13      	ldr	r2, [pc, #76]	; (8008694 <__sinit+0x6c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	62a2      	str	r2, [r4, #40]	; 0x28
 800864a:	42a3      	cmp	r3, r4
 800864c:	bf08      	it	eq
 800864e:	2301      	moveq	r3, #1
 8008650:	4620      	mov	r0, r4
 8008652:	bf08      	it	eq
 8008654:	61a3      	streq	r3, [r4, #24]
 8008656:	f000 f81f 	bl	8008698 <__sfp>
 800865a:	6060      	str	r0, [r4, #4]
 800865c:	4620      	mov	r0, r4
 800865e:	f000 f81b 	bl	8008698 <__sfp>
 8008662:	60a0      	str	r0, [r4, #8]
 8008664:	4620      	mov	r0, r4
 8008666:	f000 f817 	bl	8008698 <__sfp>
 800866a:	2200      	movs	r2, #0
 800866c:	2104      	movs	r1, #4
 800866e:	60e0      	str	r0, [r4, #12]
 8008670:	6860      	ldr	r0, [r4, #4]
 8008672:	f7ff ff81 	bl	8008578 <std>
 8008676:	2201      	movs	r2, #1
 8008678:	2109      	movs	r1, #9
 800867a:	68a0      	ldr	r0, [r4, #8]
 800867c:	f7ff ff7c 	bl	8008578 <std>
 8008680:	2202      	movs	r2, #2
 8008682:	2112      	movs	r1, #18
 8008684:	68e0      	ldr	r0, [r4, #12]
 8008686:	f7ff ff77 	bl	8008578 <std>
 800868a:	2301      	movs	r3, #1
 800868c:	61a3      	str	r3, [r4, #24]
 800868e:	e7d1      	b.n	8008634 <__sinit+0xc>
 8008690:	08008b38 	.word	0x08008b38
 8008694:	080085c1 	.word	0x080085c1

08008698 <__sfp>:
 8008698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869a:	4607      	mov	r7, r0
 800869c:	f7ff ffac 	bl	80085f8 <__sfp_lock_acquire>
 80086a0:	4b1e      	ldr	r3, [pc, #120]	; (800871c <__sfp+0x84>)
 80086a2:	681e      	ldr	r6, [r3, #0]
 80086a4:	69b3      	ldr	r3, [r6, #24]
 80086a6:	b913      	cbnz	r3, 80086ae <__sfp+0x16>
 80086a8:	4630      	mov	r0, r6
 80086aa:	f7ff ffbd 	bl	8008628 <__sinit>
 80086ae:	3648      	adds	r6, #72	; 0x48
 80086b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	d503      	bpl.n	80086c0 <__sfp+0x28>
 80086b8:	6833      	ldr	r3, [r6, #0]
 80086ba:	b30b      	cbz	r3, 8008700 <__sfp+0x68>
 80086bc:	6836      	ldr	r6, [r6, #0]
 80086be:	e7f7      	b.n	80086b0 <__sfp+0x18>
 80086c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086c4:	b9d5      	cbnz	r5, 80086fc <__sfp+0x64>
 80086c6:	4b16      	ldr	r3, [pc, #88]	; (8008720 <__sfp+0x88>)
 80086c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086cc:	60e3      	str	r3, [r4, #12]
 80086ce:	6665      	str	r5, [r4, #100]	; 0x64
 80086d0:	f000 f847 	bl	8008762 <__retarget_lock_init_recursive>
 80086d4:	f7ff ff96 	bl	8008604 <__sfp_lock_release>
 80086d8:	2208      	movs	r2, #8
 80086da:	4629      	mov	r1, r5
 80086dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086e4:	6025      	str	r5, [r4, #0]
 80086e6:	61a5      	str	r5, [r4, #24]
 80086e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086ec:	f7fd fae6 	bl	8005cbc <memset>
 80086f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086f8:	4620      	mov	r0, r4
 80086fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086fc:	3468      	adds	r4, #104	; 0x68
 80086fe:	e7d9      	b.n	80086b4 <__sfp+0x1c>
 8008700:	2104      	movs	r1, #4
 8008702:	4638      	mov	r0, r7
 8008704:	f7ff ff62 	bl	80085cc <__sfmoreglue>
 8008708:	4604      	mov	r4, r0
 800870a:	6030      	str	r0, [r6, #0]
 800870c:	2800      	cmp	r0, #0
 800870e:	d1d5      	bne.n	80086bc <__sfp+0x24>
 8008710:	f7ff ff78 	bl	8008604 <__sfp_lock_release>
 8008714:	230c      	movs	r3, #12
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	e7ee      	b.n	80086f8 <__sfp+0x60>
 800871a:	bf00      	nop
 800871c:	08008b38 	.word	0x08008b38
 8008720:	ffff0001 	.word	0xffff0001

08008724 <_fwalk_reent>:
 8008724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008728:	4606      	mov	r6, r0
 800872a:	4688      	mov	r8, r1
 800872c:	2700      	movs	r7, #0
 800872e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008732:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008736:	f1b9 0901 	subs.w	r9, r9, #1
 800873a:	d505      	bpl.n	8008748 <_fwalk_reent+0x24>
 800873c:	6824      	ldr	r4, [r4, #0]
 800873e:	2c00      	cmp	r4, #0
 8008740:	d1f7      	bne.n	8008732 <_fwalk_reent+0xe>
 8008742:	4638      	mov	r0, r7
 8008744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008748:	89ab      	ldrh	r3, [r5, #12]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d907      	bls.n	800875e <_fwalk_reent+0x3a>
 800874e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008752:	3301      	adds	r3, #1
 8008754:	d003      	beq.n	800875e <_fwalk_reent+0x3a>
 8008756:	4629      	mov	r1, r5
 8008758:	4630      	mov	r0, r6
 800875a:	47c0      	blx	r8
 800875c:	4307      	orrs	r7, r0
 800875e:	3568      	adds	r5, #104	; 0x68
 8008760:	e7e9      	b.n	8008736 <_fwalk_reent+0x12>

08008762 <__retarget_lock_init_recursive>:
 8008762:	4770      	bx	lr

08008764 <__retarget_lock_acquire_recursive>:
 8008764:	4770      	bx	lr

08008766 <__retarget_lock_release_recursive>:
 8008766:	4770      	bx	lr

08008768 <__swhatbuf_r>:
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	460e      	mov	r6, r1
 800876c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008770:	4614      	mov	r4, r2
 8008772:	2900      	cmp	r1, #0
 8008774:	461d      	mov	r5, r3
 8008776:	b096      	sub	sp, #88	; 0x58
 8008778:	da07      	bge.n	800878a <__swhatbuf_r+0x22>
 800877a:	2300      	movs	r3, #0
 800877c:	602b      	str	r3, [r5, #0]
 800877e:	89b3      	ldrh	r3, [r6, #12]
 8008780:	061a      	lsls	r2, r3, #24
 8008782:	d410      	bmi.n	80087a6 <__swhatbuf_r+0x3e>
 8008784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008788:	e00e      	b.n	80087a8 <__swhatbuf_r+0x40>
 800878a:	466a      	mov	r2, sp
 800878c:	f000 f902 	bl	8008994 <_fstat_r>
 8008790:	2800      	cmp	r0, #0
 8008792:	dbf2      	blt.n	800877a <__swhatbuf_r+0x12>
 8008794:	9a01      	ldr	r2, [sp, #4]
 8008796:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800879a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800879e:	425a      	negs	r2, r3
 80087a0:	415a      	adcs	r2, r3
 80087a2:	602a      	str	r2, [r5, #0]
 80087a4:	e7ee      	b.n	8008784 <__swhatbuf_r+0x1c>
 80087a6:	2340      	movs	r3, #64	; 0x40
 80087a8:	2000      	movs	r0, #0
 80087aa:	6023      	str	r3, [r4, #0]
 80087ac:	b016      	add	sp, #88	; 0x58
 80087ae:	bd70      	pop	{r4, r5, r6, pc}

080087b0 <__smakebuf_r>:
 80087b0:	898b      	ldrh	r3, [r1, #12]
 80087b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087b4:	079d      	lsls	r5, r3, #30
 80087b6:	4606      	mov	r6, r0
 80087b8:	460c      	mov	r4, r1
 80087ba:	d507      	bpl.n	80087cc <__smakebuf_r+0x1c>
 80087bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	6123      	str	r3, [r4, #16]
 80087c4:	2301      	movs	r3, #1
 80087c6:	6163      	str	r3, [r4, #20]
 80087c8:	b002      	add	sp, #8
 80087ca:	bd70      	pop	{r4, r5, r6, pc}
 80087cc:	466a      	mov	r2, sp
 80087ce:	ab01      	add	r3, sp, #4
 80087d0:	f7ff ffca 	bl	8008768 <__swhatbuf_r>
 80087d4:	9900      	ldr	r1, [sp, #0]
 80087d6:	4605      	mov	r5, r0
 80087d8:	4630      	mov	r0, r6
 80087da:	f7ff f989 	bl	8007af0 <_malloc_r>
 80087de:	b948      	cbnz	r0, 80087f4 <__smakebuf_r+0x44>
 80087e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e4:	059a      	lsls	r2, r3, #22
 80087e6:	d4ef      	bmi.n	80087c8 <__smakebuf_r+0x18>
 80087e8:	f023 0303 	bic.w	r3, r3, #3
 80087ec:	f043 0302 	orr.w	r3, r3, #2
 80087f0:	81a3      	strh	r3, [r4, #12]
 80087f2:	e7e3      	b.n	80087bc <__smakebuf_r+0xc>
 80087f4:	4b0d      	ldr	r3, [pc, #52]	; (800882c <__smakebuf_r+0x7c>)
 80087f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	6020      	str	r0, [r4, #0]
 80087fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008800:	81a3      	strh	r3, [r4, #12]
 8008802:	9b00      	ldr	r3, [sp, #0]
 8008804:	6120      	str	r0, [r4, #16]
 8008806:	6163      	str	r3, [r4, #20]
 8008808:	9b01      	ldr	r3, [sp, #4]
 800880a:	b15b      	cbz	r3, 8008824 <__smakebuf_r+0x74>
 800880c:	4630      	mov	r0, r6
 800880e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008812:	f000 f8d1 	bl	80089b8 <_isatty_r>
 8008816:	b128      	cbz	r0, 8008824 <__smakebuf_r+0x74>
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	f023 0303 	bic.w	r3, r3, #3
 800881e:	f043 0301 	orr.w	r3, r3, #1
 8008822:	81a3      	strh	r3, [r4, #12]
 8008824:	89a0      	ldrh	r0, [r4, #12]
 8008826:	4305      	orrs	r5, r0
 8008828:	81a5      	strh	r5, [r4, #12]
 800882a:	e7cd      	b.n	80087c8 <__smakebuf_r+0x18>
 800882c:	080085c1 	.word	0x080085c1

08008830 <_malloc_usable_size_r>:
 8008830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008834:	1f18      	subs	r0, r3, #4
 8008836:	2b00      	cmp	r3, #0
 8008838:	bfbc      	itt	lt
 800883a:	580b      	ldrlt	r3, [r1, r0]
 800883c:	18c0      	addlt	r0, r0, r3
 800883e:	4770      	bx	lr

08008840 <_raise_r>:
 8008840:	291f      	cmp	r1, #31
 8008842:	b538      	push	{r3, r4, r5, lr}
 8008844:	4604      	mov	r4, r0
 8008846:	460d      	mov	r5, r1
 8008848:	d904      	bls.n	8008854 <_raise_r+0x14>
 800884a:	2316      	movs	r3, #22
 800884c:	6003      	str	r3, [r0, #0]
 800884e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008856:	b112      	cbz	r2, 800885e <_raise_r+0x1e>
 8008858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800885c:	b94b      	cbnz	r3, 8008872 <_raise_r+0x32>
 800885e:	4620      	mov	r0, r4
 8008860:	f000 f830 	bl	80088c4 <_getpid_r>
 8008864:	462a      	mov	r2, r5
 8008866:	4601      	mov	r1, r0
 8008868:	4620      	mov	r0, r4
 800886a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800886e:	f000 b817 	b.w	80088a0 <_kill_r>
 8008872:	2b01      	cmp	r3, #1
 8008874:	d00a      	beq.n	800888c <_raise_r+0x4c>
 8008876:	1c59      	adds	r1, r3, #1
 8008878:	d103      	bne.n	8008882 <_raise_r+0x42>
 800887a:	2316      	movs	r3, #22
 800887c:	6003      	str	r3, [r0, #0]
 800887e:	2001      	movs	r0, #1
 8008880:	e7e7      	b.n	8008852 <_raise_r+0x12>
 8008882:	2400      	movs	r4, #0
 8008884:	4628      	mov	r0, r5
 8008886:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800888a:	4798      	blx	r3
 800888c:	2000      	movs	r0, #0
 800888e:	e7e0      	b.n	8008852 <_raise_r+0x12>

08008890 <raise>:
 8008890:	4b02      	ldr	r3, [pc, #8]	; (800889c <raise+0xc>)
 8008892:	4601      	mov	r1, r0
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	f7ff bfd3 	b.w	8008840 <_raise_r>
 800889a:	bf00      	nop
 800889c:	200000d4 	.word	0x200000d4

080088a0 <_kill_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	2300      	movs	r3, #0
 80088a4:	4d06      	ldr	r5, [pc, #24]	; (80088c0 <_kill_r+0x20>)
 80088a6:	4604      	mov	r4, r0
 80088a8:	4608      	mov	r0, r1
 80088aa:	4611      	mov	r1, r2
 80088ac:	602b      	str	r3, [r5, #0]
 80088ae:	f7fa f8ec 	bl	8002a8a <_kill>
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	d102      	bne.n	80088bc <_kill_r+0x1c>
 80088b6:	682b      	ldr	r3, [r5, #0]
 80088b8:	b103      	cbz	r3, 80088bc <_kill_r+0x1c>
 80088ba:	6023      	str	r3, [r4, #0]
 80088bc:	bd38      	pop	{r3, r4, r5, pc}
 80088be:	bf00      	nop
 80088c0:	200004d8 	.word	0x200004d8

080088c4 <_getpid_r>:
 80088c4:	f7fa b8da 	b.w	8002a7c <_getpid>

080088c8 <__sread>:
 80088c8:	b510      	push	{r4, lr}
 80088ca:	460c      	mov	r4, r1
 80088cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d0:	f000 f894 	bl	80089fc <_read_r>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	bfab      	itete	ge
 80088d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088da:	89a3      	ldrhlt	r3, [r4, #12]
 80088dc:	181b      	addge	r3, r3, r0
 80088de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088e2:	bfac      	ite	ge
 80088e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80088e6:	81a3      	strhlt	r3, [r4, #12]
 80088e8:	bd10      	pop	{r4, pc}

080088ea <__swrite>:
 80088ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ee:	461f      	mov	r7, r3
 80088f0:	898b      	ldrh	r3, [r1, #12]
 80088f2:	4605      	mov	r5, r0
 80088f4:	05db      	lsls	r3, r3, #23
 80088f6:	460c      	mov	r4, r1
 80088f8:	4616      	mov	r6, r2
 80088fa:	d505      	bpl.n	8008908 <__swrite+0x1e>
 80088fc:	2302      	movs	r3, #2
 80088fe:	2200      	movs	r2, #0
 8008900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008904:	f000 f868 	bl	80089d8 <_lseek_r>
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	4632      	mov	r2, r6
 800890c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008910:	81a3      	strh	r3, [r4, #12]
 8008912:	4628      	mov	r0, r5
 8008914:	463b      	mov	r3, r7
 8008916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800891a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800891e:	f000 b817 	b.w	8008950 <_write_r>

08008922 <__sseek>:
 8008922:	b510      	push	{r4, lr}
 8008924:	460c      	mov	r4, r1
 8008926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800892a:	f000 f855 	bl	80089d8 <_lseek_r>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	bf15      	itete	ne
 8008934:	6560      	strne	r0, [r4, #84]	; 0x54
 8008936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800893a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800893e:	81a3      	strheq	r3, [r4, #12]
 8008940:	bf18      	it	ne
 8008942:	81a3      	strhne	r3, [r4, #12]
 8008944:	bd10      	pop	{r4, pc}

08008946 <__sclose>:
 8008946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800894a:	f000 b813 	b.w	8008974 <_close_r>
	...

08008950 <_write_r>:
 8008950:	b538      	push	{r3, r4, r5, lr}
 8008952:	4604      	mov	r4, r0
 8008954:	4608      	mov	r0, r1
 8008956:	4611      	mov	r1, r2
 8008958:	2200      	movs	r2, #0
 800895a:	4d05      	ldr	r5, [pc, #20]	; (8008970 <_write_r+0x20>)
 800895c:	602a      	str	r2, [r5, #0]
 800895e:	461a      	mov	r2, r3
 8008960:	f7fa f8ca 	bl	8002af8 <_write>
 8008964:	1c43      	adds	r3, r0, #1
 8008966:	d102      	bne.n	800896e <_write_r+0x1e>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	b103      	cbz	r3, 800896e <_write_r+0x1e>
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	200004d8 	.word	0x200004d8

08008974 <_close_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	2300      	movs	r3, #0
 8008978:	4d05      	ldr	r5, [pc, #20]	; (8008990 <_close_r+0x1c>)
 800897a:	4604      	mov	r4, r0
 800897c:	4608      	mov	r0, r1
 800897e:	602b      	str	r3, [r5, #0]
 8008980:	f7fa f8d6 	bl	8002b30 <_close>
 8008984:	1c43      	adds	r3, r0, #1
 8008986:	d102      	bne.n	800898e <_close_r+0x1a>
 8008988:	682b      	ldr	r3, [r5, #0]
 800898a:	b103      	cbz	r3, 800898e <_close_r+0x1a>
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	bd38      	pop	{r3, r4, r5, pc}
 8008990:	200004d8 	.word	0x200004d8

08008994 <_fstat_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	2300      	movs	r3, #0
 8008998:	4d06      	ldr	r5, [pc, #24]	; (80089b4 <_fstat_r+0x20>)
 800899a:	4604      	mov	r4, r0
 800899c:	4608      	mov	r0, r1
 800899e:	4611      	mov	r1, r2
 80089a0:	602b      	str	r3, [r5, #0]
 80089a2:	f7fa f8d0 	bl	8002b46 <_fstat>
 80089a6:	1c43      	adds	r3, r0, #1
 80089a8:	d102      	bne.n	80089b0 <_fstat_r+0x1c>
 80089aa:	682b      	ldr	r3, [r5, #0]
 80089ac:	b103      	cbz	r3, 80089b0 <_fstat_r+0x1c>
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	bd38      	pop	{r3, r4, r5, pc}
 80089b2:	bf00      	nop
 80089b4:	200004d8 	.word	0x200004d8

080089b8 <_isatty_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	2300      	movs	r3, #0
 80089bc:	4d05      	ldr	r5, [pc, #20]	; (80089d4 <_isatty_r+0x1c>)
 80089be:	4604      	mov	r4, r0
 80089c0:	4608      	mov	r0, r1
 80089c2:	602b      	str	r3, [r5, #0]
 80089c4:	f7fa f8ce 	bl	8002b64 <_isatty>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d102      	bne.n	80089d2 <_isatty_r+0x1a>
 80089cc:	682b      	ldr	r3, [r5, #0]
 80089ce:	b103      	cbz	r3, 80089d2 <_isatty_r+0x1a>
 80089d0:	6023      	str	r3, [r4, #0]
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	200004d8 	.word	0x200004d8

080089d8 <_lseek_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4604      	mov	r4, r0
 80089dc:	4608      	mov	r0, r1
 80089de:	4611      	mov	r1, r2
 80089e0:	2200      	movs	r2, #0
 80089e2:	4d05      	ldr	r5, [pc, #20]	; (80089f8 <_lseek_r+0x20>)
 80089e4:	602a      	str	r2, [r5, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	f7fa f8c6 	bl	8002b78 <_lseek>
 80089ec:	1c43      	adds	r3, r0, #1
 80089ee:	d102      	bne.n	80089f6 <_lseek_r+0x1e>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	b103      	cbz	r3, 80089f6 <_lseek_r+0x1e>
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	bd38      	pop	{r3, r4, r5, pc}
 80089f8:	200004d8 	.word	0x200004d8

080089fc <_read_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	4604      	mov	r4, r0
 8008a00:	4608      	mov	r0, r1
 8008a02:	4611      	mov	r1, r2
 8008a04:	2200      	movs	r2, #0
 8008a06:	4d05      	ldr	r5, [pc, #20]	; (8008a1c <_read_r+0x20>)
 8008a08:	602a      	str	r2, [r5, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	f7fa f857 	bl	8002abe <_read>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d102      	bne.n	8008a1a <_read_r+0x1e>
 8008a14:	682b      	ldr	r3, [r5, #0]
 8008a16:	b103      	cbz	r3, 8008a1a <_read_r+0x1e>
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	bd38      	pop	{r3, r4, r5, pc}
 8008a1c:	200004d8 	.word	0x200004d8

08008a20 <_init>:
 8008a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a22:	bf00      	nop
 8008a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a26:	bc08      	pop	{r3}
 8008a28:	469e      	mov	lr, r3
 8008a2a:	4770      	bx	lr

08008a2c <_fini>:
 8008a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2e:	bf00      	nop
 8008a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a32:	bc08      	pop	{r3}
 8008a34:	469e      	mov	lr, r3
 8008a36:	4770      	bx	lr
