
tank_level_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e78  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08005f88  08005f88  00015f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063b4  080063b4  000202dc  2**0
                  CONTENTS
  4 .ARM          00000000  080063b4  080063b4  000202dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063b4  080063b4  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063b4  080063b4  000163b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063b8  080063b8  000163b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  080063bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  200002dc  08006698  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08006698  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b52d  00000000  00000000  00020305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4f  00000000  00000000  0002b832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002d588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002e068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180bb  00000000  00000000  0002ea70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad00  00000000  00000000  00046b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9fb  00000000  00000000  0005182b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc226  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb4  00000000  00000000  000dc27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002dc 	.word	0x200002dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f70 	.word	0x08005f70

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002e0 	.word	0x200002e0
 800014c:	08005f70 	.word	0x08005f70

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <_Z14FIRFilter_InitP9FIRFilter>:

#include "HeightSensor.h"


void FIRFilter_Init(FIRFilter *fir)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2b3e      	cmp	r3, #62	; 0x3e
 8000efc:	d809      	bhi.n	8000f12 <_Z14FIRFilter_InitP9FIRFilter+0x26>
    fir->buf[n] = 0.0f;
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f04f 0100 	mov.w	r1, #0
 8000f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e7f2      	b.n	8000ef8 <_Z14FIRFilter_InitP9FIRFilter+0xc>
  fir->bufIndex = 0;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  fir->out = 0.0f;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
	...

08000f30 <_Z16FIRFilter_UpdateP9FIRFilterf>:


float FIRFilter_Update(FIRFilter *fir, float inp)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  fir->buf[fir->bufIndex] = inp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000f40:	4619      	mov	r1, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

  fir->bufIndex++;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000f50:	3301      	adds	r3, #1
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  if(fir->bufIndex == FILTER_NUM_COEFFS)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000f60:	2b3f      	cmp	r3, #63	; 0x3f
 8000f62:	d103      	bne.n	8000f6c <_Z16FIRFilter_UpdateP9FIRFilterf+0x3c>
    fir->bufIndex = 0;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc

  fir->out = 0.0f;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  uint8_t sumIndex = fir->bufIndex;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000f7c:	73fb      	strb	r3, [r7, #15]

  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73bb      	strb	r3, [r7, #14]
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	2b3e      	cmp	r3, #62	; 0x3e
 8000f86:	d824      	bhi.n	8000fd2 <_Z16FIRFilter_UpdateP9FIRFilterf+0xa2>
  {
    if (sumIndex > 0) sumIndex--;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <_Z16FIRFilter_UpdateP9FIRFilterf+0x66>
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	e001      	b.n	8000f9a <_Z16FIRFilter_UpdateP9FIRFilterf+0x6a>
    else sumIndex = FILTER_NUM_COEFFS - 1;
 8000f96:	233e      	movs	r3, #62	; 0x3e
 8000f98:	73fb      	strb	r3, [r7, #15]
    fir->out += FIR_COEFFS[n] * fir->buf[sumIndex];
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <_Z16FIRFilter_UpdateP9FIRFilterf+0xb0>)
 8000fa4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fa8:	7bfa      	ldrb	r2, [r7, #15]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f7ff f8d5 	bl	8000160 <__aeabi_fmul>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f7ff fe8e 	bl	8000cdc <__addsf3>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	73bb      	strb	r3, [r7, #14]
 8000fd0:	e7d7      	b.n	8000f82 <_Z16FIRFilter_UpdateP9FIRFilterf+0x52>
  }

  return fir->out;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd90      	pop	{r4, r7, pc}
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <_ZN12HeightSensorC1EP12GPIO_TypeDeftS1_t17TIM_HandleTypeDef>:


HeightSensor::HeightSensor(GPIO_TypeDef* TRIG_PORT, uint16_t TRIG_PIN,
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	80fb      	strh	r3, [r7, #6]
	  	   	   	   	   	   GPIO_TypeDef* ECHO_PORT, uint16_t ECHO_PIN,
						   TIM_HandleTypeDef HTIM)
							: trig_port(TRIG_PORT), trig_pin(TRIG_PIN),
							  echo_port(ECHO_PORT), echo_pin(ECHO_PIN),
							  htim(HTIM){
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	2248      	movs	r2, #72	; 0x48
 8000ffe:	4619      	mov	r1, r3
 8001000:	f002 f916 	bl	8003230 <memcpy>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	649a      	str	r2, [r3, #72]	; 0x48
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	88fa      	ldrh	r2, [r7, #6]
 8001014:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
							  echo_port(ECHO_PORT), echo_pin(ECHO_PIN),
 8001018:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
							  htim(HTIM){
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	FIRFilter_Init(&lpf);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3354      	adds	r3, #84	; 0x54
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff60 	bl	8000eec <_Z14FIRFilter_InitP9FIRFilter>

	HAL_TIM_Base_Start(&htim);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4618      	mov	r0, r3
 8001030:	f001 fe70 	bl	8002d14 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800103e:	2200      	movs	r2, #0
 8001040:	4619      	mov	r1, r3
 8001042:	f001 f9f4 	bl	800242e <HAL_GPIO_WritePin>
}
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_ZN12HeightSensor10getDistRawEv>:

float HeightSensor::getDistRaw()
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	return dist_raw;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <_ZN12HeightSensor15getDistFilteredEv>:

float HeightSensor::getDistFiltered()
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	return dist_filtered;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <_ZN12HeightSensor10readSensorEv>:
	return water_height;
}


void HeightSensor::readSensor()
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b087      	sub	sp, #28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001092:	2201      	movs	r2, #1
 8001094:	4619      	mov	r1, r3
 8001096:	f001 f9ca 	bl	800242e <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim, 0);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim) < 10);  // wait for 10 us
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	2b09      	cmp	r3, #9
 80010aa:	bf94      	ite	ls
 80010ac:	2301      	movls	r3, #1
 80010ae:	2300      	movhi	r3, #0
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d000      	beq.n	80010b8 <_ZN12HeightSensor10readSensorEv+0x38>
 80010b6:	e7f4      	b.n	80010a2 <_ZN12HeightSensor10readSensorEv+0x22>
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	f001 f9b2 	bl	800242e <HAL_GPIO_WritePin>

	uint32_t millis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80010ca:	f000 ff03 	bl	8001ed4 <HAL_GetTick>
 80010ce:	6178      	str	r0, [r7, #20]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (echo_port, echo_pin)) && millis + 10 >  HAL_GetTick());
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4619      	mov	r1, r3
 80010de:	4610      	mov	r0, r2
 80010e0:	f001 f98e 	bl	8002400 <HAL_GPIO_ReadPin>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d109      	bne.n	80010fe <_ZN12HeightSensor10readSensorEv+0x7e>
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f103 040a 	add.w	r4, r3, #10
 80010f0:	f000 fef0 	bl	8001ed4 <HAL_GetTick>
 80010f4:	4603      	mov	r3, r0
 80010f6:	429c      	cmp	r4, r3
 80010f8:	d901      	bls.n	80010fe <_ZN12HeightSensor10readSensorEv+0x7e>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <_ZN12HeightSensor10readSensorEv+0x80>
 80010fe:	2300      	movs	r3, #0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d000      	beq.n	8001106 <_ZN12HeightSensor10readSensorEv+0x86>
 8001104:	e7e4      	b.n	80010d0 <_ZN12HeightSensor10readSensorEv+0x50>
	uint32_t time1 = __HAL_TIM_GET_COUNTER (&htim);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	613b      	str	r3, [r7, #16]

	millis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 800110e:	f000 fee1 	bl	8001ed4 <HAL_GetTick>
 8001112:	6178      	str	r0, [r7, #20]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (echo_port, echo_pin)) && millis + 50 > HAL_GetTick());
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800111e:	b29b      	uxth	r3, r3
 8001120:	4619      	mov	r1, r3
 8001122:	4610      	mov	r0, r2
 8001124:	f001 f96c 	bl	8002400 <HAL_GPIO_ReadPin>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d009      	beq.n	8001142 <_ZN12HeightSensor10readSensorEv+0xc2>
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001134:	f000 fece 	bl	8001ed4 <HAL_GetTick>
 8001138:	4603      	mov	r3, r0
 800113a:	429c      	cmp	r4, r3
 800113c:	d901      	bls.n	8001142 <_ZN12HeightSensor10readSensorEv+0xc2>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <_ZN12HeightSensor10readSensorEv+0xc4>
 8001142:	2300      	movs	r3, #0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d000      	beq.n	800114a <_ZN12HeightSensor10readSensorEv+0xca>
 8001148:	e7e4      	b.n	8001114 <_ZN12HeightSensor10readSensorEv+0x94>
	uint32_t time2 = __HAL_TIM_GET_COUNTER (&htim);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	60fb      	str	r3, [r7, #12]

	uint16_t distance_mm = (time2 - time1)* 0.34/2;
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9f7 	bl	800054c <__aeabi_ui2d>
 800115e:	a330      	add	r3, pc, #192	; (adr r3, 8001220 <_ZN12HeightSensor10readSensorEv+0x1a0>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fa6c 	bl	8000640 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001178:	f7ff fb8c 	bl	8000894 <__aeabi_ddiv>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f7ff fd34 	bl	8000bf0 <__aeabi_d2uiz>
 8001188:	4603      	mov	r3, r0
 800118a:	817b      	strh	r3, [r7, #10]

	dist_raw = (distance_mm/10.0) < CONE_HEIGHT ? (distance_mm/10.0) : CONE_HEIGHT;
 800118c:	897b      	ldrh	r3, [r7, #10]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9ec 	bl	800056c <__aeabi_i2d>
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <_ZN12HeightSensor10readSensorEv+0x1a8>)
 800119a:	f7ff fb7b 	bl	8000894 <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <_ZN12HeightSensor10readSensorEv+0x1ac>)
 80011ac:	f7ff fcba 	bl	8000b24 <__aeabi_dcmplt>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d010      	beq.n	80011d8 <_ZN12HeightSensor10readSensorEv+0x158>
 80011b6:	897b      	ldrh	r3, [r7, #10]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9d7 	bl	800056c <__aeabi_i2d>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <_ZN12HeightSensor10readSensorEv+0x1a8>)
 80011c4:	f7ff fb66 	bl	8000894 <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fd2e 	bl	8000c30 <__aeabi_d2f>
 80011d4:	4603      	mov	r3, r0
 80011d6:	e000      	b.n	80011da <_ZN12HeightSensor10readSensorEv+0x15a>
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <_ZN12HeightSensor10readSensorEv+0x1b0>)
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
	dist_filtered = FIRFilter_Update(&lpf, dist_raw);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80011ec:	4619      	mov	r1, r3
 80011ee:	4610      	mov	r0, r2
 80011f0:	f7ff fe9e 	bl	8000f30 <_Z16FIRFilter_UpdateP9FIRFilterf>
 80011f4:	4602      	mov	r2, r0
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	water_height = CONE_HEIGHT - dist_filtered;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8001202:	4619      	mov	r1, r3
 8001204:	480a      	ldr	r0, [pc, #40]	; (8001230 <_ZN12HeightSensor10readSensorEv+0x1b0>)
 8001206:	f7ff fd67 	bl	8000cd8 <__aeabi_fsub>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
}
 8001214:	bf00      	nop
 8001216:	371c      	adds	r7, #28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd90      	pop	{r4, r7, pc}
 800121c:	f3af 8000 	nop.w
 8001220:	5c28f5c3 	.word	0x5c28f5c3
 8001224:	3fd5c28f 	.word	0x3fd5c28f
 8001228:	40240000 	.word	0x40240000
 800122c:	40518000 	.word	0x40518000
 8001230:	428c0000 	.word	0x428c0000

08001234 <_ZL14DWT_Delay_Initv>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <_ZL14DWT_Delay_Initv+0x60>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4a15      	ldr	r2, [pc, #84]	; (8001294 <_ZL14DWT_Delay_Initv+0x60>)
 800123e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001242:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <_ZL14DWT_Delay_Initv+0x60>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <_ZL14DWT_Delay_Initv+0x60>)
 800124a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800124e:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <_ZL14DWT_Delay_Initv+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a10      	ldr	r2, [pc, #64]	; (8001298 <_ZL14DWT_Delay_Initv+0x64>)
 8001256:	f023 0301 	bic.w	r3, r3, #1
 800125a:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <_ZL14DWT_Delay_Initv+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0d      	ldr	r2, [pc, #52]	; (8001298 <_ZL14DWT_Delay_Initv+0x64>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <_ZL14DWT_Delay_Initv+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 800126e:	bf00      	nop
  __NOP();
 8001270:	bf00      	nop
  __NOP();
 8001272:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <_ZL14DWT_Delay_Initv+0x64>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	bf14      	ite	ne
 800127c:	2301      	movne	r3, #1
 800127e:	2300      	moveq	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <_ZL14DWT_Delay_Initv+0x56>
  {
    return 0;
 8001286:	2300      	movs	r3, #0
 8001288:	e000      	b.n	800128c <_ZL14DWT_Delay_Initv+0x58>
  }
  else
  {
    return 1;
 800128a:	2301      	movs	r3, #1
  }
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	e000edf0 	.word	0xe000edf0
 8001298:	e0001000 	.word	0xe0001000

0800129c <_ZL12DWT_Delay_usm>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <_ZL12DWT_Delay_usm+0x48>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80012aa:	f001 fcbb 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <_ZL12DWT_Delay_usm+0x4c>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	0c9b      	lsrs	r3, r3, #18
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <_ZL12DWT_Delay_usm+0x48>)
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	1ad2      	subs	r2, r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	bf34      	ite	cc
 80012ce:	2301      	movcc	r3, #1
 80012d0:	2300      	movcs	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d000      	beq.n	80012da <_ZL12DWT_Delay_usm+0x3e>
 80012d8:	e7f2      	b.n	80012c0 <_ZL12DWT_Delay_usm+0x24>
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e0001000 	.word	0xe0001000
 80012e8:	431bde83 	.word	0x431bde83

080012ec <_ZL19lcd16x2_enablePulsev>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <_ZL19lcd16x2_enablePulsev+0x34>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <_ZL19lcd16x2_enablePulsev+0x38>)
 80012f6:	8811      	ldrh	r1, [r2, #0]
 80012f8:	2201      	movs	r2, #1
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 f897 	bl	800242e <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8001300:	2014      	movs	r0, #20
 8001302:	f7ff ffcb 	bl	800129c <_ZL12DWT_Delay_usm>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <_ZL19lcd16x2_enablePulsev+0x34>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a06      	ldr	r2, [pc, #24]	; (8001324 <_ZL19lcd16x2_enablePulsev+0x38>)
 800130c:	8811      	ldrh	r1, [r2, #0]
 800130e:	2200      	movs	r2, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f001 f88c 	bl	800242e <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 8001316:	203c      	movs	r0, #60	; 0x3c
 8001318:	f7ff ffc0 	bl	800129c <_ZL12DWT_Delay_usm>
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200002f8 	.word	0x200002f8
 8001324:	200002fe 	.word	0x200002fe

08001328 <_ZL10lcd16x2_rsb>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <_ZL10lcd16x2_rsb+0x24>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a06      	ldr	r2, [pc, #24]	; (8001350 <_ZL10lcd16x2_rsb+0x28>)
 8001338:	8811      	ldrh	r1, [r2, #0]
 800133a:	79fa      	ldrb	r2, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f001 f876 	bl	800242e <HAL_GPIO_WritePin>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200002f8 	.word	0x200002f8
 8001350:	200002fc 	.word	0x200002fc

08001354 <_ZL13lcd16x2_writeh>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f003 030f 	and.w	r3, r3, #15
 8001364:	73fb      	strb	r3, [r7, #15]
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 800136c:	4b5f      	ldr	r3, [pc, #380]	; (80014ec <_ZL13lcd16x2_writeh+0x198>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d05a      	beq.n	800142a <_ZL13lcd16x2_writeh+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001374:	4b5e      	ldr	r3, [pc, #376]	; (80014f0 <_ZL13lcd16x2_writeh+0x19c>)
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	4b5e      	ldr	r3, [pc, #376]	; (80014f4 <_ZL13lcd16x2_writeh+0x1a0>)
 800137a:	8819      	ldrh	r1, [r3, #0]
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	f001 f852 	bl	800242e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800138a:	4b59      	ldr	r3, [pc, #356]	; (80014f0 <_ZL13lcd16x2_writeh+0x19c>)
 800138c:	6818      	ldr	r0, [r3, #0]
 800138e:	4b5a      	ldr	r3, [pc, #360]	; (80014f8 <_ZL13lcd16x2_writeh+0x1a4>)
 8001390:	8819      	ldrh	r1, [r3, #0]
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	b2db      	uxtb	r3, r3
 800139a:	461a      	mov	r2, r3
 800139c:	f001 f847 	bl	800242e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80013a0:	4b53      	ldr	r3, [pc, #332]	; (80014f0 <_ZL13lcd16x2_writeh+0x19c>)
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	4b55      	ldr	r3, [pc, #340]	; (80014fc <_ZL13lcd16x2_writeh+0x1a8>)
 80013a6:	8819      	ldrh	r1, [r3, #0]
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	f003 0304 	and.w	r3, r3, #4
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	f001 f83c 	bl	800242e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80013b6:	4b4e      	ldr	r3, [pc, #312]	; (80014f0 <_ZL13lcd16x2_writeh+0x19c>)
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	4b51      	ldr	r3, [pc, #324]	; (8001500 <_ZL13lcd16x2_writeh+0x1ac>)
 80013bc:	8819      	ldrh	r1, [r3, #0]
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	f001 f831 	bl	800242e <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80013cc:	4b4d      	ldr	r3, [pc, #308]	; (8001504 <_ZL13lcd16x2_writeh+0x1b0>)
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	4b4d      	ldr	r3, [pc, #308]	; (8001508 <_ZL13lcd16x2_writeh+0x1b4>)
 80013d2:	8819      	ldrh	r1, [r3, #0]
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	f001 f826 	bl	800242e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80013e2:	4b48      	ldr	r3, [pc, #288]	; (8001504 <_ZL13lcd16x2_writeh+0x1b0>)
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	4b49      	ldr	r3, [pc, #292]	; (800150c <_ZL13lcd16x2_writeh+0x1b8>)
 80013e8:	8819      	ldrh	r1, [r3, #0]
 80013ea:	7bbb      	ldrb	r3, [r7, #14]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	461a      	mov	r2, r3
 80013f4:	f001 f81b 	bl	800242e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80013f8:	4b42      	ldr	r3, [pc, #264]	; (8001504 <_ZL13lcd16x2_writeh+0x1b0>)
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	4b44      	ldr	r3, [pc, #272]	; (8001510 <_ZL13lcd16x2_writeh+0x1bc>)
 80013fe:	8819      	ldrh	r1, [r3, #0]
 8001400:	7bbb      	ldrb	r3, [r7, #14]
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	b2db      	uxtb	r3, r3
 8001408:	461a      	mov	r2, r3
 800140a:	f001 f810 	bl	800242e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800140e:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <_ZL13lcd16x2_writeh+0x1b0>)
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	4b40      	ldr	r3, [pc, #256]	; (8001514 <_ZL13lcd16x2_writeh+0x1c0>)
 8001414:	8819      	ldrh	r1, [r3, #0]
 8001416:	7bbb      	ldrb	r3, [r7, #14]
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	b2db      	uxtb	r3, r3
 800141e:	461a      	mov	r2, r3
 8001420:	f001 f805 	bl	800242e <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001424:	f7ff ff62 	bl	80012ec <_ZL19lcd16x2_enablePulsev>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8001428:	e05b      	b.n	80014e2 <_ZL13lcd16x2_writeh+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800142a:	4b36      	ldr	r3, [pc, #216]	; (8001504 <_ZL13lcd16x2_writeh+0x1b0>)
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	4b36      	ldr	r3, [pc, #216]	; (8001508 <_ZL13lcd16x2_writeh+0x1b4>)
 8001430:	8819      	ldrh	r1, [r3, #0]
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	b2db      	uxtb	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	f000 fff7 	bl	800242e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <_ZL13lcd16x2_writeh+0x1b0>)
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	4b31      	ldr	r3, [pc, #196]	; (800150c <_ZL13lcd16x2_writeh+0x1b8>)
 8001446:	8819      	ldrh	r1, [r3, #0]
 8001448:	7bbb      	ldrb	r3, [r7, #14]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	b2db      	uxtb	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	f000 ffec 	bl	800242e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001456:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <_ZL13lcd16x2_writeh+0x1b0>)
 8001458:	6818      	ldr	r0, [r3, #0]
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <_ZL13lcd16x2_writeh+0x1bc>)
 800145c:	8819      	ldrh	r1, [r3, #0]
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	b2db      	uxtb	r3, r3
 8001466:	461a      	mov	r2, r3
 8001468:	f000 ffe1 	bl	800242e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800146c:	4b25      	ldr	r3, [pc, #148]	; (8001504 <_ZL13lcd16x2_writeh+0x1b0>)
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	4b28      	ldr	r3, [pc, #160]	; (8001514 <_ZL13lcd16x2_writeh+0x1c0>)
 8001472:	8819      	ldrh	r1, [r3, #0]
 8001474:	7bbb      	ldrb	r3, [r7, #14]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	f000 ffd6 	bl	800242e <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001482:	f7ff ff33 	bl	80012ec <_ZL19lcd16x2_enablePulsev>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <_ZL13lcd16x2_writeh+0x1b0>)
 8001488:	6818      	ldr	r0, [r3, #0]
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <_ZL13lcd16x2_writeh+0x1b4>)
 800148c:	8819      	ldrh	r1, [r3, #0]
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	461a      	mov	r2, r3
 8001498:	f000 ffc9 	bl	800242e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <_ZL13lcd16x2_writeh+0x1b0>)
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <_ZL13lcd16x2_writeh+0x1b8>)
 80014a2:	8819      	ldrh	r1, [r3, #0]
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	f000 ffbe 	bl	800242e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <_ZL13lcd16x2_writeh+0x1b0>)
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <_ZL13lcd16x2_writeh+0x1bc>)
 80014b8:	8819      	ldrh	r1, [r3, #0]
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	f000 ffb3 	bl	800242e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <_ZL13lcd16x2_writeh+0x1b0>)
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <_ZL13lcd16x2_writeh+0x1c0>)
 80014ce:	8819      	ldrh	r1, [r3, #0]
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	f000 ffa8 	bl	800242e <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80014de:	f7ff ff05 	bl	80012ec <_ZL19lcd16x2_enablePulsev>
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200000fc 	.word	0x200000fc
 80014f0:	20000300 	.word	0x20000300
 80014f4:	20000304 	.word	0x20000304
 80014f8:	20000306 	.word	0x20000306
 80014fc:	20000308 	.word	0x20000308
 8001500:	2000030a 	.word	0x2000030a
 8001504:	2000030c 	.word	0x2000030c
 8001508:	20000310 	.word	0x20000310
 800150c:	20000312 	.word	0x20000312
 8001510:	20000314 	.word	0x20000314
 8001514:	20000316 	.word	0x20000316

08001518 <_ZL20lcd16x2_writeCommandh>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff ff00 	bl	8001328 <_ZL10lcd16x2_rsb>
  lcd16x2_write(cmd);
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff12 	bl	8001354 <_ZL13lcd16x2_writeh>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <_ZL17lcd16x2_writeDatah>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 8001542:	2001      	movs	r0, #1
 8001544:	f7ff fef0 	bl	8001328 <_ZL10lcd16x2_rsb>
  lcd16x2_write(data);
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff ff02 	bl	8001354 <_ZL13lcd16x2_writeh>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <_ZL14lcd16x2_write4h>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff fedc 	bl	8001328 <_ZL10lcd16x2_rsb>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <_ZL14lcd16x2_write4h+0x7c>)
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <_ZL14lcd16x2_write4h+0x80>)
 8001576:	8819      	ldrh	r1, [r3, #0]
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	f000 ff54 	bl	800242e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <_ZL14lcd16x2_write4h+0x7c>)
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <_ZL14lcd16x2_write4h+0x84>)
 800158c:	8819      	ldrh	r1, [r3, #0]
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	b2db      	uxtb	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	f000 ff49 	bl	800242e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <_ZL14lcd16x2_write4h+0x7c>)
 800159e:	6818      	ldr	r0, [r3, #0]
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <_ZL14lcd16x2_write4h+0x88>)
 80015a2:	8819      	ldrh	r1, [r3, #0]
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	f000 ff3e 	bl	800242e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <_ZL14lcd16x2_write4h+0x7c>)
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <_ZL14lcd16x2_write4h+0x8c>)
 80015b8:	8819      	ldrh	r1, [r3, #0]
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	461a      	mov	r2, r3
 80015c4:	f000 ff33 	bl	800242e <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 80015c8:	f7ff fe90 	bl	80012ec <_ZL19lcd16x2_enablePulsev>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000030c 	.word	0x2000030c
 80015d8:	20000310 	.word	0x20000310
 80015dc:	20000312 	.word	0x20000312
 80015e0:	20000314 	.word	0x20000314
 80015e4:	20000316 	.word	0x20000316

080015e8 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	817b      	strh	r3, [r7, #10]
 80015f6:	4613      	mov	r3, r2
 80015f8:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 80015fa:	f7ff fe1b 	bl	8001234 <_ZL14DWT_Delay_Initv>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 80015fe:	4a24      	ldr	r2, [pc, #144]	; (8001690 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xa8>)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8001604:	4a23      	ldr	r2, [pc, #140]	; (8001694 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xac>)
 8001606:	897b      	ldrh	r3, [r7, #10]
 8001608:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 800160a:	4a23      	ldr	r2, [pc, #140]	; (8001698 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb0>)
 800160c:	893b      	ldrh	r3, [r7, #8]
 800160e:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8001610:	4a22      	ldr	r2, [pc, #136]	; (800169c <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb4>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8001616:	4a22      	ldr	r2, [pc, #136]	; (80016a0 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb8>)
 8001618:	8b3b      	ldrh	r3, [r7, #24]
 800161a:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 800161c:	4a21      	ldr	r2, [pc, #132]	; (80016a4 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xbc>)
 800161e:	8bbb      	ldrh	r3, [r7, #28]
 8001620:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8001622:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc0>)
 8001624:	8c3b      	ldrh	r3, [r7, #32]
 8001626:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8001628:	4a20      	ldr	r2, [pc, #128]	; (80016ac <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc4>)
 800162a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800162c:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc8>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xcc>)
 8001636:	2228      	movs	r2, #40	; 0x28
 8001638:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 800163a:	2014      	movs	r0, #20
 800163c:	f000 fc54 	bl	8001ee8 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8001640:	2003      	movs	r0, #3
 8001642:	f7ff ff89 	bl	8001558 <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(5);
 8001646:	2005      	movs	r0, #5
 8001648:	f000 fc4e 	bl	8001ee8 <HAL_Delay>
  lcd16x2_write4(0x3);
 800164c:	2003      	movs	r0, #3
 800164e:	f7ff ff83 	bl	8001558 <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 8001652:	2001      	movs	r0, #1
 8001654:	f000 fc48 	bl	8001ee8 <HAL_Delay>
  lcd16x2_write4(0x3);
 8001658:	2003      	movs	r0, #3
 800165a:	f7ff ff7d 	bl	8001558 <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 800165e:	2001      	movs	r0, #1
 8001660:	f000 fc42 	bl	8001ee8 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8001664:	2002      	movs	r0, #2
 8001666:	f7ff ff77 	bl	8001558 <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 800166a:	2001      	movs	r0, #1
 800166c:	f000 fc3c 	bl	8001ee8 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001670:	2028      	movs	r0, #40	; 0x28
 8001672:	f7ff ff51 	bl	8001518 <_ZL20lcd16x2_writeCommandh>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8001676:	200f      	movs	r0, #15
 8001678:	f7ff ff4e 	bl	8001518 <_ZL20lcd16x2_writeCommandh>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 800167c:	2001      	movs	r0, #1
 800167e:	f7ff ff4b 	bl	8001518 <_ZL20lcd16x2_writeCommandh>
  LCD_MS_DELAY(3);
 8001682:	2003      	movs	r0, #3
 8001684:	f000 fc30 	bl	8001ee8 <HAL_Delay>
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	200002f8 	.word	0x200002f8
 8001694:	200002fc 	.word	0x200002fc
 8001698:	200002fe 	.word	0x200002fe
 800169c:	2000030c 	.word	0x2000030c
 80016a0:	20000310 	.word	0x20000310
 80016a4:	20000312 	.word	0x20000312
 80016a8:	20000314 	.word	0x20000314
 80016ac:	20000316 	.word	0x20000316
 80016b0:	200000fc 	.word	0x200000fc
 80016b4:	200000fe 	.word	0x200000fe

080016b8 <_Z17lcd16x2_setCursorhh>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	460a      	mov	r2, r1
 80016c2:	71fb      	strb	r3, [r7, #7]
 80016c4:	4613      	mov	r3, r2
 80016c6:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 80016c8:	79bb      	ldrb	r3, [r7, #6]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d108      	bne.n	80016e8 <_Z17lcd16x2_setCursorhh+0x30>
  {
    maskData |= (0x80);
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016dc:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff19 	bl	8001518 <_ZL20lcd16x2_writeCommandh>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 80016e6:	e007      	b.n	80016f8 <_Z17lcd16x2_setCursorhh+0x40>
    maskData |= (0xc0);
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80016ee:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff10 	bl	8001518 <_ZL20lcd16x2_writeCommandh>
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_Z15lcd16x2_1stLinev>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 8001704:	2100      	movs	r1, #0
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff ffd6 	bl	80016b8 <_Z17lcd16x2_setCursorhh>
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <_Z15lcd16x2_2ndLinev>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8001714:	2100      	movs	r1, #0
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff ffce 	bl	80016b8 <_Z17lcd16x2_setCursorhh>
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}

08001720 <_Z18lcd16x2_cursorShowb>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
  if(state)
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00c      	beq.n	800174a <_Z18lcd16x2_cursorShowb+0x2a>
  {
    DisplayControl |= (0x03);
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <_Z18lcd16x2_cursorShowb+0x4c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	f043 0303 	orr.w	r3, r3, #3
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <_Z18lcd16x2_cursorShowb+0x4c>)
 800173c:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <_Z18lcd16x2_cursorShowb+0x4c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fee8 	bl	8001518 <_ZL20lcd16x2_writeCommandh>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 8001748:	e00b      	b.n	8001762 <_Z18lcd16x2_cursorShowb+0x42>
    DisplayControl &= ~(0x03);
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <_Z18lcd16x2_cursorShowb+0x4c>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	f023 0303 	bic.w	r3, r3, #3
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <_Z18lcd16x2_cursorShowb+0x4c>)
 8001756:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <_Z18lcd16x2_cursorShowb+0x4c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fedb 	bl	8001518 <_ZL20lcd16x2_writeCommandh>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200000fd 	.word	0x200000fd

08001770 <_Z13lcd16x2_clearv>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff fecf 	bl	8001518 <_ZL20lcd16x2_writeCommandh>
  LCD_MS_DELAY(3);
 800177a:	2003      	movs	r0, #3
 800177c:	f000 fbb4 	bl	8001ee8 <HAL_Delay>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}

08001784 <_Z14lcd16x2_printfPKcz>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8001784:	b40f      	push	{r0, r1, r2, r3}
 8001786:	b590      	push	{r4, r7, lr}
 8001788:	b089      	sub	sp, #36	; 0x24
 800178a:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 800178c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001790:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800179a:	4618      	mov	r0, r3
 800179c:	f002 f9d4 	bl	8003b48 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	77fb      	strb	r3, [r7, #31]
 80017a4:	7ffc      	ldrb	r4, [r7, #31]
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fcd0 	bl	8000150 <strlen>
 80017b0:	4603      	mov	r3, r0
 80017b2:	429c      	cmp	r4, r3
 80017b4:	d20f      	bcs.n	80017d6 <_Z14lcd16x2_printfPKcz+0x52>
 80017b6:	7ffb      	ldrb	r3, [r7, #31]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d80c      	bhi.n	80017d6 <_Z14lcd16x2_printfPKcz+0x52>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 80017bc:	7ffb      	ldrb	r3, [r7, #31]
 80017be:	f107 0220 	add.w	r2, r7, #32
 80017c2:	4413      	add	r3, r2
 80017c4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff feb5 	bl	8001538 <_ZL17lcd16x2_writeDatah>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80017ce:	7ffb      	ldrb	r3, [r7, #31]
 80017d0:	3301      	adds	r3, #1
 80017d2:	77fb      	strb	r3, [r7, #31]
 80017d4:	e7e6      	b.n	80017a4 <_Z14lcd16x2_printfPKcz+0x20>
  }
}
 80017d6:	bf00      	nop
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80017e0:	b004      	add	sp, #16
 80017e2:	4770      	bx	lr

080017e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 80017ea:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ec:	f000 fb1a 	bl	8001e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f0:	f000 f872 	bl	80018d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f4:	f000 f91c 	bl	8001a30 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 80017f8:	f000 f8be 	bl	8001978 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start(&htim2);
  //HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);

  lcd16x2_init_4bits(LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_EN_Pin,
 80017fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001800:	9303      	str	r3, [sp, #12]
 8001802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001806:	9302      	str	r3, [sp, #8]
 8001808:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <main+0xd8>)
 8001816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800181a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800181e:	4827      	ldr	r0, [pc, #156]	; (80018bc <main+0xd8>)
 8001820:	f7ff fee2 	bl	80015e8 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt>
		  	  	  	 LCD_D4_GPIO_Port, LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin);

  lcd16x2_printf("Hello world!!");
 8001824:	4826      	ldr	r0, [pc, #152]	; (80018c0 <main+0xdc>)
 8001826:	f7ff ffad 	bl	8001784 <_Z14lcd16x2_printfPKcz>
  HAL_Delay(1000);
 800182a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800182e:	f000 fb5b 	bl	8001ee8 <HAL_Delay>
  FIRFilter lpf;
  HeightSensor usensor(TRIG_GPIO_Port, TRIG_Pin, ECHO_GPIO_Port, ECHO_Pin, htim2);
 8001832:	463c      	mov	r4, r7
 8001834:	4a23      	ldr	r2, [pc, #140]	; (80018c4 <main+0xe0>)
 8001836:	ab01      	add	r3, sp, #4
 8001838:	4611      	mov	r1, r2
 800183a:	2248      	movs	r2, #72	; 0x48
 800183c:	4618      	mov	r0, r3
 800183e:	f001 fcf7 	bl	8003230 <memcpy>
 8001842:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <main+0xe4>)
 800184a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184e:	491e      	ldr	r1, [pc, #120]	; (80018c8 <main+0xe4>)
 8001850:	4620      	mov	r0, r4
 8001852:	f7ff fbc7 	bl	8000fe4 <_ZN12HeightSensorC1EP12GPIO_TypeDeftS1_t17TIM_HandleTypeDef>
  lcd16x2_clear();
 8001856:	f7ff ff8b 	bl	8001770 <_Z13lcd16x2_clearv>
  lcd16x2_cursorShow(false);
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff ff60 	bl	8001720 <_Z18lcd16x2_cursorShowb>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001864:	4819      	ldr	r0, [pc, #100]	; (80018cc <main+0xe8>)
 8001866:	f000 fdfa 	bl	800245e <HAL_GPIO_TogglePin>

	usensor.readSensor();
 800186a:	463b      	mov	r3, r7
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fc07 	bl	8001080 <_ZN12HeightSensor10readSensorEv>
	lcd16x2_clear();
 8001872:	f7ff ff7d 	bl	8001770 <_Z13lcd16x2_clearv>
	lcd16x2_1stLine();
 8001876:	f7ff ff43 	bl	8001700 <_Z15lcd16x2_1stLinev>
	lcd16x2_printf("Raw: %.1f cm", usensor.getDistRaw());
 800187a:	463b      	mov	r3, r7
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fbe7 	bl	8001050 <_ZN12HeightSensor10getDistRawEv>
 8001882:	4603      	mov	r3, r0
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe83 	bl	8000590 <__aeabi_f2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4810      	ldr	r0, [pc, #64]	; (80018d0 <main+0xec>)
 8001890:	f7ff ff78 	bl	8001784 <_Z14lcd16x2_printfPKcz>
	lcd16x2_2ndLine();
 8001894:	f7ff ff3c 	bl	8001710 <_Z15lcd16x2_2ndLinev>
	lcd16x2_printf("%.1f cm", usensor.getDistFiltered());
 8001898:	463b      	mov	r3, r7
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fbe4 	bl	8001068 <_ZN12HeightSensor15getDistFilteredEv>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fe74 	bl	8000590 <__aeabi_f2d>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <main+0xf0>)
 80018ae:	f7ff ff69 	bl	8001784 <_Z14lcd16x2_printfPKcz>
	HAL_Delay(10);
 80018b2:	200a      	movs	r0, #10
 80018b4:	f000 fb18 	bl	8001ee8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80018b8:	e7d2      	b.n	8001860 <main+0x7c>
 80018ba:	bf00      	nop
 80018bc:	40010800 	.word	0x40010800
 80018c0:	08005f88 	.word	0x08005f88
 80018c4:	20000318 	.word	0x20000318
 80018c8:	40010c00 	.word	0x40010c00
 80018cc:	40011000 	.word	0x40011000
 80018d0:	08005f98 	.word	0x08005f98
 80018d4:	08005fa8 	.word	0x08005fa8

080018d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b090      	sub	sp, #64	; 0x40
 80018dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018de:	f107 0318 	add.w	r3, r7, #24
 80018e2:	2228      	movs	r2, #40	; 0x28
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f001 fcb0 	bl	800324c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001902:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001908:	2301      	movs	r3, #1
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800190c:	2302      	movs	r3, #2
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001914:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001916:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191c:	f107 0318 	add.w	r3, r7, #24
 8001920:	4618      	mov	r0, r3
 8001922:	f000 fdb5 	bl	8002490 <HAL_RCC_OscConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	bf14      	ite	ne
 800192c:	2301      	movne	r3, #1
 800192e:	2300      	moveq	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8001936:	f000 f90d 	bl	8001b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800193a:	230f      	movs	r3, #15
 800193c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193e:	2302      	movs	r3, #2
 8001940:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800194a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001950:	1d3b      	adds	r3, r7, #4
 8001952:	2102      	movs	r1, #2
 8001954:	4618      	mov	r0, r3
 8001956:	f001 f81b 	bl	8002990 <HAL_RCC_ClockConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf14      	ite	ne
 8001960:	2301      	movne	r3, #1
 8001962:	2300      	moveq	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800196a:	f000 f8f3 	bl	8001b54 <Error_Handler>
  }
}
 800196e:	bf00      	nop
 8001970:	3740      	adds	r7, #64	; 0x40
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001994:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <_ZL12MX_TIM2_Initv+0xb4>)
 8001996:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800199a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <_ZL12MX_TIM2_Initv+0xb4>)
 800199e:	2247      	movs	r2, #71	; 0x47
 80019a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <_ZL12MX_TIM2_Initv+0xb4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80019a8:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <_ZL12MX_TIM2_Initv+0xb4>)
 80019aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <_ZL12MX_TIM2_Initv+0xb4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b6:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <_ZL12MX_TIM2_Initv+0xb4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019bc:	481b      	ldr	r0, [pc, #108]	; (8001a2c <_ZL12MX_TIM2_Initv+0xb4>)
 80019be:	f001 f959 	bl	8002c74 <HAL_TIM_Base_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf14      	ite	ne
 80019c8:	2301      	movne	r3, #1
 80019ca:	2300      	moveq	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80019d2:	f000 f8bf 	bl	8001b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019dc:	f107 0308 	add.w	r3, r7, #8
 80019e0:	4619      	mov	r1, r3
 80019e2:	4812      	ldr	r0, [pc, #72]	; (8001a2c <_ZL12MX_TIM2_Initv+0xb4>)
 80019e4:	f001 f9e0 	bl	8002da8 <HAL_TIM_ConfigClockSource>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf14      	ite	ne
 80019ee:	2301      	movne	r3, #1
 80019f0:	2300      	moveq	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80019f8:	f000 f8ac 	bl	8001b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019fc:	2300      	movs	r3, #0
 80019fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a04:	463b      	mov	r3, r7
 8001a06:	4619      	mov	r1, r3
 8001a08:	4808      	ldr	r0, [pc, #32]	; (8001a2c <_ZL12MX_TIM2_Initv+0xb4>)
 8001a0a:	f001 fb89 	bl	8003120 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf14      	ite	ne
 8001a14:	2301      	movne	r3, #1
 8001a16:	2300      	moveq	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001a1e:	f000 f899 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000318 	.word	0x20000318

08001a30 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a44:	4b3f      	ldr	r3, [pc, #252]	; (8001b44 <_ZL12MX_GPIO_Initv+0x114>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a3e      	ldr	r2, [pc, #248]	; (8001b44 <_ZL12MX_GPIO_Initv+0x114>)
 8001a4a:	f043 0310 	orr.w	r3, r3, #16
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b3c      	ldr	r3, [pc, #240]	; (8001b44 <_ZL12MX_GPIO_Initv+0x114>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5c:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <_ZL12MX_GPIO_Initv+0x114>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a38      	ldr	r2, [pc, #224]	; (8001b44 <_ZL12MX_GPIO_Initv+0x114>)
 8001a62:	f043 0320 	orr.w	r3, r3, #32
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <_ZL12MX_GPIO_Initv+0x114>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a74:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <_ZL12MX_GPIO_Initv+0x114>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a32      	ldr	r2, [pc, #200]	; (8001b44 <_ZL12MX_GPIO_Initv+0x114>)
 8001a7a:	f043 0308 	orr.w	r3, r3, #8
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <_ZL12MX_GPIO_Initv+0x114>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <_ZL12MX_GPIO_Initv+0x114>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a2c      	ldr	r2, [pc, #176]	; (8001b44 <_ZL12MX_GPIO_Initv+0x114>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <_ZL12MX_GPIO_Initv+0x114>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aaa:	4827      	ldr	r0, [pc, #156]	; (8001b48 <_ZL12MX_GPIO_Initv+0x118>)
 8001aac:	f000 fcbf 	bl	800242e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ab6:	4825      	ldr	r0, [pc, #148]	; (8001b4c <_ZL12MX_GPIO_Initv+0x11c>)
 8001ab8:	f000 fcb9 	bl	800242e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8001abc:	2200      	movs	r2, #0
 8001abe:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 8001ac2:	4823      	ldr	r0, [pc, #140]	; (8001b50 <_ZL12MX_GPIO_Initv+0x120>)
 8001ac4:	f000 fcb3 	bl	800242e <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4819      	ldr	r0, [pc, #100]	; (8001b48 <_ZL12MX_GPIO_Initv+0x118>)
 8001ae2:	f000 fb09 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aec:	2301      	movs	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2302      	movs	r3, #2
 8001af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	4619      	mov	r1, r3
 8001afe:	4813      	ldr	r0, [pc, #76]	; (8001b4c <_ZL12MX_GPIO_Initv+0x11c>)
 8001b00:	f000 fafa 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001b04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	4619      	mov	r1, r3
 8001b18:	480c      	ldr	r0, [pc, #48]	; (8001b4c <_ZL12MX_GPIO_Initv+0x11c>)
 8001b1a:	f000 faed 	bl	80020f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8001b1e:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 8001b22:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b24:	2301      	movs	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4619      	mov	r1, r3
 8001b36:	4806      	ldr	r0, [pc, #24]	; (8001b50 <_ZL12MX_GPIO_Initv+0x120>)
 8001b38:	f000 fade 	bl	80020f8 <HAL_GPIO_Init>

}
 8001b3c:	bf00      	nop
 8001b3e:	3720      	adds	r7, #32
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40011000 	.word	0x40011000
 8001b4c:	40010c00 	.word	0x40010c00
 8001b50:	40010800 	.word	0x40010800

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
}
 8001b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <Error_Handler+0x8>
	...

08001b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_MspInit+0x5c>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	4a14      	ldr	r2, [pc, #80]	; (8001bbc <HAL_MspInit+0x5c>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6193      	str	r3, [r2, #24]
 8001b72:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_MspInit+0x5c>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_MspInit+0x5c>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_MspInit+0x5c>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_MspInit+0x5c>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_MspInit+0x60>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_MspInit+0x60>)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40010000 	.word	0x40010000

08001bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd4:	d10b      	bne.n	8001bee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_TIM_Base_MspInit+0x34>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_TIM_Base_MspInit+0x34>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	61d3      	str	r3, [r2, #28]
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_TIM_Base_MspInit+0x34>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	40021000 	.word	0x40021000

08001bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <NMI_Handler+0x4>

08001c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <HardFault_Handler+0x4>

08001c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <MemManage_Handler+0x4>

08001c0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <BusFault_Handler+0x4>

08001c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <UsageFault_Handler+0x4>

08001c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c42:	f000 f935 	bl	8001eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
	return 1;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <_kill>:

int _kill(int pid, int sig)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c62:	f001 fabb 	bl	80031dc <__errno>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2216      	movs	r2, #22
 8001c6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_exit>:

void _exit (int status)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ffe7 	bl	8001c58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c8a:	e7fe      	b.n	8001c8a <_exit+0x12>

08001c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	e00a      	b.n	8001cb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c9e:	f3af 8000 	nop.w
 8001ca2:	4601      	mov	r1, r0
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	60ba      	str	r2, [r7, #8]
 8001caa:	b2ca      	uxtb	r2, r1
 8001cac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	dbf0      	blt.n	8001c9e <_read+0x12>
	}

return len;
 8001cbc:	687b      	ldr	r3, [r7, #4]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e009      	b.n	8001cec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	60ba      	str	r2, [r7, #8]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbf1      	blt.n	8001cd8 <_write+0x12>
	}
	return len;
 8001cf4:	687b      	ldr	r3, [r7, #4]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_close>:

int _close(int file)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
	return -1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d24:	605a      	str	r2, [r3, #4]
	return 0;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <_isatty>:

int _isatty(int file)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
	return 1;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b085      	sub	sp, #20
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
	return 0;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
	...

08001d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <_sbrk+0x5c>)
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <_sbrk+0x60>)
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <_sbrk+0x64>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <_sbrk+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d207      	bcs.n	8001da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d90:	f001 fa24 	bl	80031dc <__errno>
 8001d94:	4603      	mov	r3, r0
 8001d96:	220c      	movs	r2, #12
 8001d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d9e:	e009      	b.n	8001db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <_sbrk+0x64>)
 8001db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20005000 	.word	0x20005000
 8001dc0:	00000400 	.word	0x00000400
 8001dc4:	20000360 	.word	0x20000360
 8001dc8:	20000380 	.word	0x20000380

08001dcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd8:	480c      	ldr	r0, [pc, #48]	; (8001e0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dda:	490d      	ldr	r1, [pc, #52]	; (8001e10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de0:	e002      	b.n	8001de8 <LoopCopyDataInit>

08001de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de6:	3304      	adds	r3, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dec:	d3f9      	bcc.n	8001de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001df0:	4c0a      	ldr	r4, [pc, #40]	; (8001e1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df4:	e001      	b.n	8001dfa <LoopFillZerobss>

08001df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df8:	3204      	adds	r2, #4

08001dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dfc:	d3fb      	bcc.n	8001df6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dfe:	f7ff ffe5 	bl	8001dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e02:	f001 f9f1 	bl	80031e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e06:	f7ff fced 	bl	80017e4 <main>
  bx lr
 8001e0a:	4770      	bx	lr
  ldr r0, =_sdata
 8001e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e10:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8001e14:	080063bc 	.word	0x080063bc
  ldr r2, =_sbss
 8001e18:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8001e1c:	20000380 	.word	0x20000380

08001e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e20:	e7fe      	b.n	8001e20 <ADC1_2_IRQHandler>
	...

08001e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_Init+0x28>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_Init+0x28>)
 8001e2e:	f043 0310 	orr.w	r3, r3, #16
 8001e32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f000 f92b 	bl	8002090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3a:	200f      	movs	r0, #15
 8001e3c:	f000 f808 	bl	8001e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e40:	f7ff fe8e 	bl	8001b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40022000 	.word	0x40022000

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x54>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_InitTick+0x58>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 f935 	bl	80020de <HAL_SYSTICK_Config>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00e      	b.n	8001e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b0f      	cmp	r3, #15
 8001e82:	d80a      	bhi.n	8001e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e84:	2200      	movs	r2, #0
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e8c:	f000 f90b 	bl	80020a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e90:	4a06      	ldr	r2, [pc, #24]	; (8001eac <HAL_InitTick+0x5c>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000100 	.word	0x20000100
 8001ea8:	20000108 	.word	0x20000108
 8001eac:	20000104 	.word	0x20000104

08001eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_IncTick+0x1c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_IncTick+0x20>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a03      	ldr	r2, [pc, #12]	; (8001ed0 <HAL_IncTick+0x20>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000108 	.word	0x20000108
 8001ed0:	2000036c 	.word	0x2000036c

08001ed4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b02      	ldr	r3, [pc, #8]	; (8001ee4 <HAL_GetTick+0x10>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	2000036c 	.word	0x2000036c

08001ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef0:	f7ff fff0 	bl	8001ed4 <HAL_GetTick>
 8001ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f00:	d005      	beq.n	8001f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f02:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_Delay+0x44>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f0e:	bf00      	nop
 8001f10:	f7ff ffe0 	bl	8001ed4 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d8f7      	bhi.n	8001f10 <HAL_Delay+0x28>
  {
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000108 	.word	0x20000108

08001f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <__NVIC_SetPriorityGrouping+0x44>)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	60d3      	str	r3, [r2, #12]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <__NVIC_GetPriorityGrouping+0x18>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0307 	and.w	r3, r3, #7
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	db0a      	blt.n	8001fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	490c      	ldr	r1, [pc, #48]	; (8001fe0 <__NVIC_SetPriority+0x4c>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	0112      	lsls	r2, r2, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fbc:	e00a      	b.n	8001fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4908      	ldr	r1, [pc, #32]	; (8001fe4 <__NVIC_SetPriority+0x50>)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	3b04      	subs	r3, #4
 8001fcc:	0112      	lsls	r2, r2, #4
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	761a      	strb	r2, [r3, #24]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e100 	.word	0xe000e100
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f1c3 0307 	rsb	r3, r3, #7
 8002002:	2b04      	cmp	r3, #4
 8002004:	bf28      	it	cs
 8002006:	2304      	movcs	r3, #4
 8002008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3304      	adds	r3, #4
 800200e:	2b06      	cmp	r3, #6
 8002010:	d902      	bls.n	8002018 <NVIC_EncodePriority+0x30>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3b03      	subs	r3, #3
 8002016:	e000      	b.n	800201a <NVIC_EncodePriority+0x32>
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	401a      	ands	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002030:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43d9      	mvns	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	4313      	orrs	r3, r2
         );
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3b01      	subs	r3, #1
 8002058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800205c:	d301      	bcc.n	8002062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800205e:	2301      	movs	r3, #1
 8002060:	e00f      	b.n	8002082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <SysTick_Config+0x40>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3b01      	subs	r3, #1
 8002068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206a:	210f      	movs	r1, #15
 800206c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002070:	f7ff ff90 	bl	8001f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <SysTick_Config+0x40>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <SysTick_Config+0x40>)
 800207c:	2207      	movs	r2, #7
 800207e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	e000e010 	.word	0xe000e010

08002090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff ff49 	bl	8001f30 <__NVIC_SetPriorityGrouping>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b8:	f7ff ff5e 	bl	8001f78 <__NVIC_GetPriorityGrouping>
 80020bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	6978      	ldr	r0, [r7, #20]
 80020c4:	f7ff ff90 	bl	8001fe8 <NVIC_EncodePriority>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ff5f 	bl	8001f94 <__NVIC_SetPriority>
}
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ffb0 	bl	800204c <SysTick_Config>
 80020ec:	4603      	mov	r3, r0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b08b      	sub	sp, #44	; 0x2c
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210a:	e169      	b.n	80023e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800210c:	2201      	movs	r2, #1
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	69fa      	ldr	r2, [r7, #28]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	429a      	cmp	r2, r3
 8002126:	f040 8158 	bne.w	80023da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4a9a      	ldr	r2, [pc, #616]	; (8002398 <HAL_GPIO_Init+0x2a0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d05e      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002134:	4a98      	ldr	r2, [pc, #608]	; (8002398 <HAL_GPIO_Init+0x2a0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d875      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 800213a:	4a98      	ldr	r2, [pc, #608]	; (800239c <HAL_GPIO_Init+0x2a4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d058      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002140:	4a96      	ldr	r2, [pc, #600]	; (800239c <HAL_GPIO_Init+0x2a4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d86f      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 8002146:	4a96      	ldr	r2, [pc, #600]	; (80023a0 <HAL_GPIO_Init+0x2a8>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d052      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 800214c:	4a94      	ldr	r2, [pc, #592]	; (80023a0 <HAL_GPIO_Init+0x2a8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d869      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 8002152:	4a94      	ldr	r2, [pc, #592]	; (80023a4 <HAL_GPIO_Init+0x2ac>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d04c      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002158:	4a92      	ldr	r2, [pc, #584]	; (80023a4 <HAL_GPIO_Init+0x2ac>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d863      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 800215e:	4a92      	ldr	r2, [pc, #584]	; (80023a8 <HAL_GPIO_Init+0x2b0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d046      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
 8002164:	4a90      	ldr	r2, [pc, #576]	; (80023a8 <HAL_GPIO_Init+0x2b0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d85d      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 800216a:	2b12      	cmp	r3, #18
 800216c:	d82a      	bhi.n	80021c4 <HAL_GPIO_Init+0xcc>
 800216e:	2b12      	cmp	r3, #18
 8002170:	d859      	bhi.n	8002226 <HAL_GPIO_Init+0x12e>
 8002172:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <HAL_GPIO_Init+0x80>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	080021f3 	.word	0x080021f3
 800217c:	080021cd 	.word	0x080021cd
 8002180:	080021df 	.word	0x080021df
 8002184:	08002221 	.word	0x08002221
 8002188:	08002227 	.word	0x08002227
 800218c:	08002227 	.word	0x08002227
 8002190:	08002227 	.word	0x08002227
 8002194:	08002227 	.word	0x08002227
 8002198:	08002227 	.word	0x08002227
 800219c:	08002227 	.word	0x08002227
 80021a0:	08002227 	.word	0x08002227
 80021a4:	08002227 	.word	0x08002227
 80021a8:	08002227 	.word	0x08002227
 80021ac:	08002227 	.word	0x08002227
 80021b0:	08002227 	.word	0x08002227
 80021b4:	08002227 	.word	0x08002227
 80021b8:	08002227 	.word	0x08002227
 80021bc:	080021d5 	.word	0x080021d5
 80021c0:	080021e9 	.word	0x080021e9
 80021c4:	4a79      	ldr	r2, [pc, #484]	; (80023ac <HAL_GPIO_Init+0x2b4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021ca:	e02c      	b.n	8002226 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	623b      	str	r3, [r7, #32]
          break;
 80021d2:	e029      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	3304      	adds	r3, #4
 80021da:	623b      	str	r3, [r7, #32]
          break;
 80021dc:	e024      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	3308      	adds	r3, #8
 80021e4:	623b      	str	r3, [r7, #32]
          break;
 80021e6:	e01f      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	330c      	adds	r3, #12
 80021ee:	623b      	str	r3, [r7, #32]
          break;
 80021f0:	e01a      	b.n	8002228 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021fa:	2304      	movs	r3, #4
 80021fc:	623b      	str	r3, [r7, #32]
          break;
 80021fe:	e013      	b.n	8002228 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002208:	2308      	movs	r3, #8
 800220a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	611a      	str	r2, [r3, #16]
          break;
 8002212:	e009      	b.n	8002228 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002214:	2308      	movs	r3, #8
 8002216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	615a      	str	r2, [r3, #20]
          break;
 800221e:	e003      	b.n	8002228 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
          break;
 8002224:	e000      	b.n	8002228 <HAL_GPIO_Init+0x130>
          break;
 8002226:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2bff      	cmp	r3, #255	; 0xff
 800222c:	d801      	bhi.n	8002232 <HAL_GPIO_Init+0x13a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	e001      	b.n	8002236 <HAL_GPIO_Init+0x13e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3304      	adds	r3, #4
 8002236:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2bff      	cmp	r3, #255	; 0xff
 800223c:	d802      	bhi.n	8002244 <HAL_GPIO_Init+0x14c>
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	e002      	b.n	800224a <HAL_GPIO_Init+0x152>
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	3b08      	subs	r3, #8
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	210f      	movs	r1, #15
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	401a      	ands	r2, r3
 800225c:	6a39      	ldr	r1, [r7, #32]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	fa01 f303 	lsl.w	r3, r1, r3
 8002264:	431a      	orrs	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80b1 	beq.w	80023da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002278:	4b4d      	ldr	r3, [pc, #308]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4a4c      	ldr	r2, [pc, #304]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6193      	str	r3, [r2, #24]
 8002284:	4b4a      	ldr	r3, [pc, #296]	; (80023b0 <HAL_GPIO_Init+0x2b8>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002290:	4a48      	ldr	r2, [pc, #288]	; (80023b4 <HAL_GPIO_Init+0x2bc>)
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	3302      	adds	r3, #2
 8002298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	220f      	movs	r2, #15
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4013      	ands	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a40      	ldr	r2, [pc, #256]	; (80023b8 <HAL_GPIO_Init+0x2c0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d013      	beq.n	80022e4 <HAL_GPIO_Init+0x1ec>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a3f      	ldr	r2, [pc, #252]	; (80023bc <HAL_GPIO_Init+0x2c4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d00d      	beq.n	80022e0 <HAL_GPIO_Init+0x1e8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a3e      	ldr	r2, [pc, #248]	; (80023c0 <HAL_GPIO_Init+0x2c8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d007      	beq.n	80022dc <HAL_GPIO_Init+0x1e4>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a3d      	ldr	r2, [pc, #244]	; (80023c4 <HAL_GPIO_Init+0x2cc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d101      	bne.n	80022d8 <HAL_GPIO_Init+0x1e0>
 80022d4:	2303      	movs	r3, #3
 80022d6:	e006      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022d8:	2304      	movs	r3, #4
 80022da:	e004      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022dc:	2302      	movs	r3, #2
 80022de:	e002      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_GPIO_Init+0x1ee>
 80022e4:	2300      	movs	r3, #0
 80022e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e8:	f002 0203 	and.w	r2, r2, #3
 80022ec:	0092      	lsls	r2, r2, #2
 80022ee:	4093      	lsls	r3, r2
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022f6:	492f      	ldr	r1, [pc, #188]	; (80023b4 <HAL_GPIO_Init+0x2bc>)
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	089b      	lsrs	r3, r3, #2
 80022fc:	3302      	adds	r3, #2
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d006      	beq.n	800231e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002310:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	492c      	ldr	r1, [pc, #176]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800231e:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	43db      	mvns	r3, r3
 8002326:	4928      	ldr	r1, [pc, #160]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002328:	4013      	ands	r3, r2
 800232a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d006      	beq.n	8002346 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002338:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4922      	ldr	r1, [pc, #136]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	43db      	mvns	r3, r3
 800234e:	491e      	ldr	r1, [pc, #120]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002350:	4013      	ands	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d006      	beq.n	800236e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	4918      	ldr	r1, [pc, #96]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	43db      	mvns	r3, r3
 8002376:	4914      	ldr	r1, [pc, #80]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 8002378:	4013      	ands	r3, r2
 800237a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d021      	beq.n	80023cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002388:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	490e      	ldr	r1, [pc, #56]	; (80023c8 <HAL_GPIO_Init+0x2d0>)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	60cb      	str	r3, [r1, #12]
 8002394:	e021      	b.n	80023da <HAL_GPIO_Init+0x2e2>
 8002396:	bf00      	nop
 8002398:	10320000 	.word	0x10320000
 800239c:	10310000 	.word	0x10310000
 80023a0:	10220000 	.word	0x10220000
 80023a4:	10210000 	.word	0x10210000
 80023a8:	10120000 	.word	0x10120000
 80023ac:	10110000 	.word	0x10110000
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40010000 	.word	0x40010000
 80023b8:	40010800 	.word	0x40010800
 80023bc:	40010c00 	.word	0x40010c00
 80023c0:	40011000 	.word	0x40011000
 80023c4:	40011400 	.word	0x40011400
 80023c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_GPIO_Init+0x304>)
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	4909      	ldr	r1, [pc, #36]	; (80023fc <HAL_GPIO_Init+0x304>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	3301      	adds	r3, #1
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f47f ae8e 	bne.w	800210c <HAL_GPIO_Init+0x14>
  }
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	372c      	adds	r7, #44	; 0x2c
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	40010400 	.word	0x40010400

08002400 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	887b      	ldrh	r3, [r7, #2]
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
 800241c:	e001      	b.n	8002422 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002422:	7bfb      	ldrb	r3, [r7, #15]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	460b      	mov	r3, r1
 8002438:	807b      	strh	r3, [r7, #2]
 800243a:	4613      	mov	r3, r2
 800243c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800243e:	787b      	ldrb	r3, [r7, #1]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002444:	887a      	ldrh	r2, [r7, #2]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800244a:	e003      	b.n	8002454 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800244c:	887b      	ldrh	r3, [r7, #2]
 800244e:	041a      	lsls	r2, r3, #16
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	611a      	str	r2, [r3, #16]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800245e:	b480      	push	{r7}
 8002460:	b085      	sub	sp, #20
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002470:	887a      	ldrh	r2, [r7, #2]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4013      	ands	r3, r2
 8002476:	041a      	lsls	r2, r3, #16
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	43d9      	mvns	r1, r3
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	400b      	ands	r3, r1
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	611a      	str	r2, [r3, #16]
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e26c      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8087 	beq.w	80025be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024b0:	4b92      	ldr	r3, [pc, #584]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	d00c      	beq.n	80024d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024bc:	4b8f      	ldr	r3, [pc, #572]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d112      	bne.n	80024ee <HAL_RCC_OscConfig+0x5e>
 80024c8:	4b8c      	ldr	r3, [pc, #560]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d4:	d10b      	bne.n	80024ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d6:	4b89      	ldr	r3, [pc, #548]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d06c      	beq.n	80025bc <HAL_RCC_OscConfig+0x12c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d168      	bne.n	80025bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e246      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x76>
 80024f8:	4b80      	ldr	r3, [pc, #512]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a7f      	ldr	r2, [pc, #508]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80024fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	e02e      	b.n	8002564 <HAL_RCC_OscConfig+0xd4>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x98>
 800250e:	4b7b      	ldr	r3, [pc, #492]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a7a      	ldr	r2, [pc, #488]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b78      	ldr	r3, [pc, #480]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a77      	ldr	r2, [pc, #476]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e01d      	b.n	8002564 <HAL_RCC_OscConfig+0xd4>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002530:	d10c      	bne.n	800254c <HAL_RCC_OscConfig+0xbc>
 8002532:	4b72      	ldr	r3, [pc, #456]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a71      	ldr	r2, [pc, #452]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b6f      	ldr	r3, [pc, #444]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6e      	ldr	r2, [pc, #440]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	e00b      	b.n	8002564 <HAL_RCC_OscConfig+0xd4>
 800254c:	4b6b      	ldr	r3, [pc, #428]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a6a      	ldr	r2, [pc, #424]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	4b68      	ldr	r3, [pc, #416]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a67      	ldr	r2, [pc, #412]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 800255e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002562:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7ff fcb2 	bl	8001ed4 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002574:	f7ff fcae 	bl	8001ed4 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b64      	cmp	r3, #100	; 0x64
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e1fa      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	4b5d      	ldr	r3, [pc, #372]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0xe4>
 8002592:	e014      	b.n	80025be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7ff fc9e 	bl	8001ed4 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800259c:	f7ff fc9a 	bl	8001ed4 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1e6      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x10c>
 80025ba:	e000      	b.n	80025be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d063      	beq.n	8002692 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ca:	4b4c      	ldr	r3, [pc, #304]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025d6:	4b49      	ldr	r3, [pc, #292]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d11c      	bne.n	800261c <HAL_RCC_OscConfig+0x18c>
 80025e2:	4b46      	ldr	r3, [pc, #280]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d116      	bne.n	800261c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ee:	4b43      	ldr	r3, [pc, #268]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_RCC_OscConfig+0x176>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e1ba      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002606:	4b3d      	ldr	r3, [pc, #244]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4939      	ldr	r1, [pc, #228]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	e03a      	b.n	8002692 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d020      	beq.n	8002666 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002624:	4b36      	ldr	r3, [pc, #216]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262a:	f7ff fc53 	bl	8001ed4 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002632:	f7ff fc4f 	bl	8001ed4 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e19b      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002650:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4927      	ldr	r1, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]
 8002664:	e015      	b.n	8002692 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7ff fc32 	bl	8001ed4 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002674:	f7ff fc2e 	bl	8001ed4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e17a      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d03a      	beq.n	8002714 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d019      	beq.n	80026da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ac:	f7ff fc12 	bl	8001ed4 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b4:	f7ff fc0e 	bl	8001ed4 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e15a      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <HAL_RCC_OscConfig+0x26c>)
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f000 fab0 	bl	8002c38 <RCC_Delay>
 80026d8:	e01c      	b.n	8002714 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e0:	f7ff fbf8 	bl	8001ed4 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e6:	e00f      	b.n	8002708 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e8:	f7ff fbf4 	bl	8001ed4 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d908      	bls.n	8002708 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e140      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
 8002700:	42420000 	.word	0x42420000
 8002704:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002708:	4b9e      	ldr	r3, [pc, #632]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e9      	bne.n	80026e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80a6 	beq.w	800286e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002726:	4b97      	ldr	r3, [pc, #604]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10d      	bne.n	800274e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	4b94      	ldr	r3, [pc, #592]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	4a93      	ldr	r2, [pc, #588]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	61d3      	str	r3, [r2, #28]
 800273e:	4b91      	ldr	r3, [pc, #580]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274a:	2301      	movs	r3, #1
 800274c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274e:	4b8e      	ldr	r3, [pc, #568]	; (8002988 <HAL_RCC_OscConfig+0x4f8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d118      	bne.n	800278c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800275a:	4b8b      	ldr	r3, [pc, #556]	; (8002988 <HAL_RCC_OscConfig+0x4f8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a8a      	ldr	r2, [pc, #552]	; (8002988 <HAL_RCC_OscConfig+0x4f8>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002766:	f7ff fbb5 	bl	8001ed4 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276e:	f7ff fbb1 	bl	8001ed4 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b64      	cmp	r3, #100	; 0x64
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0fd      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002780:	4b81      	ldr	r3, [pc, #516]	; (8002988 <HAL_RCC_OscConfig+0x4f8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d106      	bne.n	80027a2 <HAL_RCC_OscConfig+0x312>
 8002794:	4b7b      	ldr	r3, [pc, #492]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4a7a      	ldr	r2, [pc, #488]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6213      	str	r3, [r2, #32]
 80027a0:	e02d      	b.n	80027fe <HAL_RCC_OscConfig+0x36e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x334>
 80027aa:	4b76      	ldr	r3, [pc, #472]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4a75      	ldr	r2, [pc, #468]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6213      	str	r3, [r2, #32]
 80027b6:	4b73      	ldr	r3, [pc, #460]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	4a72      	ldr	r2, [pc, #456]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	f023 0304 	bic.w	r3, r3, #4
 80027c0:	6213      	str	r3, [r2, #32]
 80027c2:	e01c      	b.n	80027fe <HAL_RCC_OscConfig+0x36e>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d10c      	bne.n	80027e6 <HAL_RCC_OscConfig+0x356>
 80027cc:	4b6d      	ldr	r3, [pc, #436]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	4a6c      	ldr	r2, [pc, #432]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027d2:	f043 0304 	orr.w	r3, r3, #4
 80027d6:	6213      	str	r3, [r2, #32]
 80027d8:	4b6a      	ldr	r3, [pc, #424]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4a69      	ldr	r2, [pc, #420]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6213      	str	r3, [r2, #32]
 80027e4:	e00b      	b.n	80027fe <HAL_RCC_OscConfig+0x36e>
 80027e6:	4b67      	ldr	r3, [pc, #412]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4a66      	ldr	r2, [pc, #408]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	6213      	str	r3, [r2, #32]
 80027f2:	4b64      	ldr	r3, [pc, #400]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	4a63      	ldr	r2, [pc, #396]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	f023 0304 	bic.w	r3, r3, #4
 80027fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d015      	beq.n	8002832 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002806:	f7ff fb65 	bl	8001ed4 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7ff fb61 	bl	8001ed4 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	; 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0ab      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002824:	4b57      	ldr	r3, [pc, #348]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ee      	beq.n	800280e <HAL_RCC_OscConfig+0x37e>
 8002830:	e014      	b.n	800285c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002832:	f7ff fb4f 	bl	8001ed4 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7ff fb4b 	bl	8001ed4 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e095      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002850:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1ee      	bne.n	800283a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4b48      	ldr	r3, [pc, #288]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	4a47      	ldr	r2, [pc, #284]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 8081 	beq.w	800297a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002878:	4b42      	ldr	r3, [pc, #264]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b08      	cmp	r3, #8
 8002882:	d061      	beq.n	8002948 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d146      	bne.n	800291a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_RCC_OscConfig+0x4fc>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7ff fb1f 	bl	8001ed4 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289a:	f7ff fb1b 	bl	8001ed4 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e067      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ac:	4b35      	ldr	r3, [pc, #212]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1f0      	bne.n	800289a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c0:	d108      	bne.n	80028d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028c2:	4b30      	ldr	r3, [pc, #192]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	492d      	ldr	r1, [pc, #180]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d4:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a19      	ldr	r1, [r3, #32]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	430b      	orrs	r3, r1
 80028e6:	4927      	ldr	r1, [pc, #156]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ec:	4b27      	ldr	r3, [pc, #156]	; (800298c <HAL_RCC_OscConfig+0x4fc>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7ff faef 	bl	8001ed4 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fa:	f7ff faeb 	bl	8001ed4 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e037      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x46a>
 8002918:	e02f      	b.n	800297a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291a:	4b1c      	ldr	r3, [pc, #112]	; (800298c <HAL_RCC_OscConfig+0x4fc>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7ff fad8 	bl	8001ed4 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7ff fad4 	bl	8001ed4 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e020      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x498>
 8002946:	e018      	b.n	800297a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d101      	bne.n	8002954 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e013      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_OscConfig+0x4f4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	429a      	cmp	r2, r3
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	429a      	cmp	r2, r3
 8002974:	d001      	beq.n	800297a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000
 8002988:	40007000 	.word	0x40007000
 800298c:	42420060 	.word	0x42420060

08002990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0d0      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a4:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d910      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b67      	ldr	r3, [pc, #412]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 0207 	bic.w	r2, r3, #7
 80029ba:	4965      	ldr	r1, [pc, #404]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0b8      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d020      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ec:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a58      	ldr	r2, [pc, #352]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a04:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4a52      	ldr	r2, [pc, #328]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	494d      	ldr	r1, [pc, #308]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d040      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d115      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e07f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4e:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e073      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e06b      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6e:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f023 0203 	bic.w	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4936      	ldr	r1, [pc, #216]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a80:	f7ff fa28 	bl	8001ed4 <HAL_GetTick>
 8002a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a88:	f7ff fa24 	bl	8001ed4 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e053      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 020c 	and.w	r2, r3, #12
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d1eb      	bne.n	8002a88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d210      	bcs.n	8002ae0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 0207 	bic.w	r2, r3, #7
 8002ac6:	4922      	ldr	r1, [pc, #136]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e032      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4916      	ldr	r1, [pc, #88]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	490e      	ldr	r1, [pc, #56]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b1e:	f000 f821 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8002b22:	4602      	mov	r2, r0
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	490a      	ldr	r1, [pc, #40]	; (8002b58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b30:	5ccb      	ldrb	r3, [r1, r3]
 8002b32:	fa22 f303 	lsr.w	r3, r2, r3
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1cc>)
 8002b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_RCC_ClockConfig+0x1d0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff f986 	bl	8001e50 <HAL_InitTick>

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40022000 	.word	0x40022000
 8002b54:	40021000 	.word	0x40021000
 8002b58:	08005fc0 	.word	0x08005fc0
 8002b5c:	20000100 	.word	0x20000100
 8002b60:	20000104 	.word	0x20000104

08002b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b64:	b490      	push	{r4, r7}
 8002b66:	b08a      	sub	sp, #40	; 0x28
 8002b68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b6c:	1d3c      	adds	r4, r7, #4
 8002b6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b74:	f240 2301 	movw	r3, #513	; 0x201
 8002b78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b8e:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d002      	beq.n	8002ba4 <HAL_RCC_GetSysClockFreq+0x40>
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_GetSysClockFreq+0x46>
 8002ba2:	e02d      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ba6:	623b      	str	r3, [r7, #32]
      break;
 8002ba8:	e02d      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	0c9b      	lsrs	r3, r3, #18
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bbc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d013      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bc8:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	0c5b      	lsrs	r3, r3, #17
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bdc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	4a0e      	ldr	r2, [pc, #56]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be2:	fb02 f203 	mul.w	r2, r2, r3
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
 8002bee:	e004      	b.n	8002bfa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	4a0b      	ldr	r2, [pc, #44]	; (8002c20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bf4:	fb02 f303 	mul.w	r3, r2, r3
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	623b      	str	r3, [r7, #32]
      break;
 8002bfe:	e002      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c02:	623b      	str	r3, [r7, #32]
      break;
 8002c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c06:	6a3b      	ldr	r3, [r7, #32]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3728      	adds	r7, #40	; 0x28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc90      	pop	{r4, r7}
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	08005fb0 	.word	0x08005fb0
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	007a1200 	.word	0x007a1200
 8002c20:	003d0900 	.word	0x003d0900

08002c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c28:	4b02      	ldr	r3, [pc, #8]	; (8002c34 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr
 8002c34:	20000100 	.word	0x20000100

08002c38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c40:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <RCC_Delay+0x34>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <RCC_Delay+0x38>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	0a5b      	lsrs	r3, r3, #9
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c54:	bf00      	nop
  }
  while (Delay --);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1e5a      	subs	r2, r3, #1
 8002c5a:	60fa      	str	r2, [r7, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f9      	bne.n	8002c54 <RCC_Delay+0x1c>
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	20000100 	.word	0x20000100
 8002c70:	10624dd3 	.word	0x10624dd3

08002c74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e041      	b.n	8002d0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe ff92 	bl	8001bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	f000 f93c 	bl	8002f30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d001      	beq.n	8002d2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e032      	b.n	8002d92 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a18      	ldr	r2, [pc, #96]	; (8002d9c <HAL_TIM_Base_Start+0x88>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00e      	beq.n	8002d5c <HAL_TIM_Base_Start+0x48>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d46:	d009      	beq.n	8002d5c <HAL_TIM_Base_Start+0x48>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a14      	ldr	r2, [pc, #80]	; (8002da0 <HAL_TIM_Base_Start+0x8c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d004      	beq.n	8002d5c <HAL_TIM_Base_Start+0x48>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <HAL_TIM_Base_Start+0x90>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d111      	bne.n	8002d80 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d010      	beq.n	8002d90 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0201 	orr.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7e:	e007      	b.n	8002d90 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40000800 	.word	0x40000800

08002da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_TIM_ConfigClockSource+0x18>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e0b3      	b.n	8002f28 <HAL_TIM_ConfigClockSource+0x180>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df8:	d03e      	beq.n	8002e78 <HAL_TIM_ConfigClockSource+0xd0>
 8002dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfe:	f200 8087 	bhi.w	8002f10 <HAL_TIM_ConfigClockSource+0x168>
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e06:	f000 8085 	beq.w	8002f14 <HAL_TIM_ConfigClockSource+0x16c>
 8002e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0e:	d87f      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x168>
 8002e10:	2b70      	cmp	r3, #112	; 0x70
 8002e12:	d01a      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0xa2>
 8002e14:	2b70      	cmp	r3, #112	; 0x70
 8002e16:	d87b      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x168>
 8002e18:	2b60      	cmp	r3, #96	; 0x60
 8002e1a:	d050      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x116>
 8002e1c:	2b60      	cmp	r3, #96	; 0x60
 8002e1e:	d877      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x168>
 8002e20:	2b50      	cmp	r3, #80	; 0x50
 8002e22:	d03c      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0xf6>
 8002e24:	2b50      	cmp	r3, #80	; 0x50
 8002e26:	d873      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x168>
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d058      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0x136>
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d86f      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x168>
 8002e30:	2b30      	cmp	r3, #48	; 0x30
 8002e32:	d064      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x156>
 8002e34:	2b30      	cmp	r3, #48	; 0x30
 8002e36:	d86b      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x168>
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d060      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x156>
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d867      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x168>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d05c      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x156>
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d05a      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e48:	e062      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6899      	ldr	r1, [r3, #8]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f000 f942 	bl	80030e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	609a      	str	r2, [r3, #8]
      break;
 8002e76:	e04e      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6899      	ldr	r1, [r3, #8]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f000 f92b 	bl	80030e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e9a:	609a      	str	r2, [r3, #8]
      break;
 8002e9c:	e03b      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6859      	ldr	r1, [r3, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f000 f8a2 	bl	8002ff4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2150      	movs	r1, #80	; 0x50
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f8f9 	bl	80030ae <TIM_ITRx_SetConfig>
      break;
 8002ebc:	e02b      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6859      	ldr	r1, [r3, #4]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f000 f8c0 	bl	8003050 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2160      	movs	r1, #96	; 0x60
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 f8e9 	bl	80030ae <TIM_ITRx_SetConfig>
      break;
 8002edc:	e01b      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f000 f882 	bl	8002ff4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2140      	movs	r1, #64	; 0x40
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 f8d9 	bl	80030ae <TIM_ITRx_SetConfig>
      break;
 8002efc:	e00b      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f000 f8d0 	bl	80030ae <TIM_ITRx_SetConfig>
        break;
 8002f0e:	e002      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f10:	bf00      	nop
 8002f12:	e000      	b.n	8002f16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a29      	ldr	r2, [pc, #164]	; (8002fe8 <TIM_Base_SetConfig+0xb8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d00b      	beq.n	8002f60 <TIM_Base_SetConfig+0x30>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4e:	d007      	beq.n	8002f60 <TIM_Base_SetConfig+0x30>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a26      	ldr	r2, [pc, #152]	; (8002fec <TIM_Base_SetConfig+0xbc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d003      	beq.n	8002f60 <TIM_Base_SetConfig+0x30>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a25      	ldr	r2, [pc, #148]	; (8002ff0 <TIM_Base_SetConfig+0xc0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d108      	bne.n	8002f72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a1c      	ldr	r2, [pc, #112]	; (8002fe8 <TIM_Base_SetConfig+0xb8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d00b      	beq.n	8002f92 <TIM_Base_SetConfig+0x62>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f80:	d007      	beq.n	8002f92 <TIM_Base_SetConfig+0x62>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a19      	ldr	r2, [pc, #100]	; (8002fec <TIM_Base_SetConfig+0xbc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d003      	beq.n	8002f92 <TIM_Base_SetConfig+0x62>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a18      	ldr	r2, [pc, #96]	; (8002ff0 <TIM_Base_SetConfig+0xc0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d108      	bne.n	8002fa4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a07      	ldr	r2, [pc, #28]	; (8002fe8 <TIM_Base_SetConfig+0xb8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d103      	bne.n	8002fd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	615a      	str	r2, [r3, #20]
}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40000400 	.word	0x40000400
 8002ff0:	40000800 	.word	0x40000800

08002ff4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f023 0201 	bic.w	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800301e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f023 030a 	bic.w	r3, r3, #10
 8003030:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	621a      	str	r2, [r3, #32]
}
 8003046:	bf00      	nop
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f023 0210 	bic.w	r2, r3, #16
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800307a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	031b      	lsls	r3, r3, #12
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800308c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	621a      	str	r2, [r3, #32]
}
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f043 0307 	orr.w	r3, r3, #7
 80030d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	609a      	str	r2, [r3, #8]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b087      	sub	sp, #28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	021a      	lsls	r2, r3, #8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	431a      	orrs	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4313      	orrs	r3, r2
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	609a      	str	r2, [r3, #8]
}
 8003116:	bf00      	nop
 8003118:	371c      	adds	r7, #28
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003134:	2302      	movs	r3, #2
 8003136:	e046      	b.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00e      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d009      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a12      	ldr	r2, [pc, #72]	; (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d004      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a10      	ldr	r2, [pc, #64]	; (80031d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d10c      	bne.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800

080031dc <__errno>:
 80031dc:	4b01      	ldr	r3, [pc, #4]	; (80031e4 <__errno+0x8>)
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	2000010c 	.word	0x2000010c

080031e8 <__libc_init_array>:
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	2600      	movs	r6, #0
 80031ec:	4d0c      	ldr	r5, [pc, #48]	; (8003220 <__libc_init_array+0x38>)
 80031ee:	4c0d      	ldr	r4, [pc, #52]	; (8003224 <__libc_init_array+0x3c>)
 80031f0:	1b64      	subs	r4, r4, r5
 80031f2:	10a4      	asrs	r4, r4, #2
 80031f4:	42a6      	cmp	r6, r4
 80031f6:	d109      	bne.n	800320c <__libc_init_array+0x24>
 80031f8:	f002 feba 	bl	8005f70 <_init>
 80031fc:	2600      	movs	r6, #0
 80031fe:	4d0a      	ldr	r5, [pc, #40]	; (8003228 <__libc_init_array+0x40>)
 8003200:	4c0a      	ldr	r4, [pc, #40]	; (800322c <__libc_init_array+0x44>)
 8003202:	1b64      	subs	r4, r4, r5
 8003204:	10a4      	asrs	r4, r4, #2
 8003206:	42a6      	cmp	r6, r4
 8003208:	d105      	bne.n	8003216 <__libc_init_array+0x2e>
 800320a:	bd70      	pop	{r4, r5, r6, pc}
 800320c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003210:	4798      	blx	r3
 8003212:	3601      	adds	r6, #1
 8003214:	e7ee      	b.n	80031f4 <__libc_init_array+0xc>
 8003216:	f855 3b04 	ldr.w	r3, [r5], #4
 800321a:	4798      	blx	r3
 800321c:	3601      	adds	r6, #1
 800321e:	e7f2      	b.n	8003206 <__libc_init_array+0x1e>
 8003220:	080063b4 	.word	0x080063b4
 8003224:	080063b4 	.word	0x080063b4
 8003228:	080063b4 	.word	0x080063b4
 800322c:	080063b8 	.word	0x080063b8

08003230 <memcpy>:
 8003230:	440a      	add	r2, r1
 8003232:	4291      	cmp	r1, r2
 8003234:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003238:	d100      	bne.n	800323c <memcpy+0xc>
 800323a:	4770      	bx	lr
 800323c:	b510      	push	{r4, lr}
 800323e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003242:	4291      	cmp	r1, r2
 8003244:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003248:	d1f9      	bne.n	800323e <memcpy+0xe>
 800324a:	bd10      	pop	{r4, pc}

0800324c <memset>:
 800324c:	4603      	mov	r3, r0
 800324e:	4402      	add	r2, r0
 8003250:	4293      	cmp	r3, r2
 8003252:	d100      	bne.n	8003256 <memset+0xa>
 8003254:	4770      	bx	lr
 8003256:	f803 1b01 	strb.w	r1, [r3], #1
 800325a:	e7f9      	b.n	8003250 <memset+0x4>

0800325c <__cvt>:
 800325c:	2b00      	cmp	r3, #0
 800325e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003262:	461f      	mov	r7, r3
 8003264:	bfbb      	ittet	lt
 8003266:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800326a:	461f      	movlt	r7, r3
 800326c:	2300      	movge	r3, #0
 800326e:	232d      	movlt	r3, #45	; 0x2d
 8003270:	b088      	sub	sp, #32
 8003272:	4614      	mov	r4, r2
 8003274:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003276:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003278:	7013      	strb	r3, [r2, #0]
 800327a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800327c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003280:	f023 0820 	bic.w	r8, r3, #32
 8003284:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003288:	d005      	beq.n	8003296 <__cvt+0x3a>
 800328a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800328e:	d100      	bne.n	8003292 <__cvt+0x36>
 8003290:	3501      	adds	r5, #1
 8003292:	2302      	movs	r3, #2
 8003294:	e000      	b.n	8003298 <__cvt+0x3c>
 8003296:	2303      	movs	r3, #3
 8003298:	aa07      	add	r2, sp, #28
 800329a:	9204      	str	r2, [sp, #16]
 800329c:	aa06      	add	r2, sp, #24
 800329e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80032a2:	e9cd 3500 	strd	r3, r5, [sp]
 80032a6:	4622      	mov	r2, r4
 80032a8:	463b      	mov	r3, r7
 80032aa:	f000 fce5 	bl	8003c78 <_dtoa_r>
 80032ae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80032b2:	4606      	mov	r6, r0
 80032b4:	d102      	bne.n	80032bc <__cvt+0x60>
 80032b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80032b8:	07db      	lsls	r3, r3, #31
 80032ba:	d522      	bpl.n	8003302 <__cvt+0xa6>
 80032bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032c0:	eb06 0905 	add.w	r9, r6, r5
 80032c4:	d110      	bne.n	80032e8 <__cvt+0x8c>
 80032c6:	7833      	ldrb	r3, [r6, #0]
 80032c8:	2b30      	cmp	r3, #48	; 0x30
 80032ca:	d10a      	bne.n	80032e2 <__cvt+0x86>
 80032cc:	2200      	movs	r2, #0
 80032ce:	2300      	movs	r3, #0
 80032d0:	4620      	mov	r0, r4
 80032d2:	4639      	mov	r1, r7
 80032d4:	f7fd fc1c 	bl	8000b10 <__aeabi_dcmpeq>
 80032d8:	b918      	cbnz	r0, 80032e2 <__cvt+0x86>
 80032da:	f1c5 0501 	rsb	r5, r5, #1
 80032de:	f8ca 5000 	str.w	r5, [sl]
 80032e2:	f8da 3000 	ldr.w	r3, [sl]
 80032e6:	4499      	add	r9, r3
 80032e8:	2200      	movs	r2, #0
 80032ea:	2300      	movs	r3, #0
 80032ec:	4620      	mov	r0, r4
 80032ee:	4639      	mov	r1, r7
 80032f0:	f7fd fc0e 	bl	8000b10 <__aeabi_dcmpeq>
 80032f4:	b108      	cbz	r0, 80032fa <__cvt+0x9e>
 80032f6:	f8cd 901c 	str.w	r9, [sp, #28]
 80032fa:	2230      	movs	r2, #48	; 0x30
 80032fc:	9b07      	ldr	r3, [sp, #28]
 80032fe:	454b      	cmp	r3, r9
 8003300:	d307      	bcc.n	8003312 <__cvt+0xb6>
 8003302:	4630      	mov	r0, r6
 8003304:	9b07      	ldr	r3, [sp, #28]
 8003306:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003308:	1b9b      	subs	r3, r3, r6
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	b008      	add	sp, #32
 800330e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003312:	1c59      	adds	r1, r3, #1
 8003314:	9107      	str	r1, [sp, #28]
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e7f0      	b.n	80032fc <__cvt+0xa0>

0800331a <__exponent>:
 800331a:	4603      	mov	r3, r0
 800331c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800331e:	2900      	cmp	r1, #0
 8003320:	f803 2b02 	strb.w	r2, [r3], #2
 8003324:	bfb6      	itet	lt
 8003326:	222d      	movlt	r2, #45	; 0x2d
 8003328:	222b      	movge	r2, #43	; 0x2b
 800332a:	4249      	neglt	r1, r1
 800332c:	2909      	cmp	r1, #9
 800332e:	7042      	strb	r2, [r0, #1]
 8003330:	dd2b      	ble.n	800338a <__exponent+0x70>
 8003332:	f10d 0407 	add.w	r4, sp, #7
 8003336:	46a4      	mov	ip, r4
 8003338:	270a      	movs	r7, #10
 800333a:	fb91 f6f7 	sdiv	r6, r1, r7
 800333e:	460a      	mov	r2, r1
 8003340:	46a6      	mov	lr, r4
 8003342:	fb07 1516 	mls	r5, r7, r6, r1
 8003346:	2a63      	cmp	r2, #99	; 0x63
 8003348:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800334c:	4631      	mov	r1, r6
 800334e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003352:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003356:	dcf0      	bgt.n	800333a <__exponent+0x20>
 8003358:	3130      	adds	r1, #48	; 0x30
 800335a:	f1ae 0502 	sub.w	r5, lr, #2
 800335e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003362:	4629      	mov	r1, r5
 8003364:	1c44      	adds	r4, r0, #1
 8003366:	4561      	cmp	r1, ip
 8003368:	d30a      	bcc.n	8003380 <__exponent+0x66>
 800336a:	f10d 0209 	add.w	r2, sp, #9
 800336e:	eba2 020e 	sub.w	r2, r2, lr
 8003372:	4565      	cmp	r5, ip
 8003374:	bf88      	it	hi
 8003376:	2200      	movhi	r2, #0
 8003378:	4413      	add	r3, r2
 800337a:	1a18      	subs	r0, r3, r0
 800337c:	b003      	add	sp, #12
 800337e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003380:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003384:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003388:	e7ed      	b.n	8003366 <__exponent+0x4c>
 800338a:	2330      	movs	r3, #48	; 0x30
 800338c:	3130      	adds	r1, #48	; 0x30
 800338e:	7083      	strb	r3, [r0, #2]
 8003390:	70c1      	strb	r1, [r0, #3]
 8003392:	1d03      	adds	r3, r0, #4
 8003394:	e7f1      	b.n	800337a <__exponent+0x60>
	...

08003398 <_printf_float>:
 8003398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800339c:	b091      	sub	sp, #68	; 0x44
 800339e:	460c      	mov	r4, r1
 80033a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80033a4:	4616      	mov	r6, r2
 80033a6:	461f      	mov	r7, r3
 80033a8:	4605      	mov	r5, r0
 80033aa:	f001 fa53 	bl	8004854 <_localeconv_r>
 80033ae:	6803      	ldr	r3, [r0, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	9309      	str	r3, [sp, #36]	; 0x24
 80033b4:	f7fc fecc 	bl	8000150 <strlen>
 80033b8:	2300      	movs	r3, #0
 80033ba:	930e      	str	r3, [sp, #56]	; 0x38
 80033bc:	f8d8 3000 	ldr.w	r3, [r8]
 80033c0:	900a      	str	r0, [sp, #40]	; 0x28
 80033c2:	3307      	adds	r3, #7
 80033c4:	f023 0307 	bic.w	r3, r3, #7
 80033c8:	f103 0208 	add.w	r2, r3, #8
 80033cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80033d0:	f8d4 b000 	ldr.w	fp, [r4]
 80033d4:	f8c8 2000 	str.w	r2, [r8]
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80033e0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80033e4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80033e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80033ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033ee:	4640      	mov	r0, r8
 80033f0:	4b9c      	ldr	r3, [pc, #624]	; (8003664 <_printf_float+0x2cc>)
 80033f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033f4:	f7fd fbbe 	bl	8000b74 <__aeabi_dcmpun>
 80033f8:	bb70      	cbnz	r0, 8003458 <_printf_float+0xc0>
 80033fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033fe:	4640      	mov	r0, r8
 8003400:	4b98      	ldr	r3, [pc, #608]	; (8003664 <_printf_float+0x2cc>)
 8003402:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003404:	f7fd fb98 	bl	8000b38 <__aeabi_dcmple>
 8003408:	bb30      	cbnz	r0, 8003458 <_printf_float+0xc0>
 800340a:	2200      	movs	r2, #0
 800340c:	2300      	movs	r3, #0
 800340e:	4640      	mov	r0, r8
 8003410:	4651      	mov	r1, sl
 8003412:	f7fd fb87 	bl	8000b24 <__aeabi_dcmplt>
 8003416:	b110      	cbz	r0, 800341e <_printf_float+0x86>
 8003418:	232d      	movs	r3, #45	; 0x2d
 800341a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800341e:	4b92      	ldr	r3, [pc, #584]	; (8003668 <_printf_float+0x2d0>)
 8003420:	4892      	ldr	r0, [pc, #584]	; (800366c <_printf_float+0x2d4>)
 8003422:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003426:	bf94      	ite	ls
 8003428:	4698      	movls	r8, r3
 800342a:	4680      	movhi	r8, r0
 800342c:	2303      	movs	r3, #3
 800342e:	f04f 0a00 	mov.w	sl, #0
 8003432:	6123      	str	r3, [r4, #16]
 8003434:	f02b 0304 	bic.w	r3, fp, #4
 8003438:	6023      	str	r3, [r4, #0]
 800343a:	4633      	mov	r3, r6
 800343c:	4621      	mov	r1, r4
 800343e:	4628      	mov	r0, r5
 8003440:	9700      	str	r7, [sp, #0]
 8003442:	aa0f      	add	r2, sp, #60	; 0x3c
 8003444:	f000 f9d4 	bl	80037f0 <_printf_common>
 8003448:	3001      	adds	r0, #1
 800344a:	f040 8090 	bne.w	800356e <_printf_float+0x1d6>
 800344e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003452:	b011      	add	sp, #68	; 0x44
 8003454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003458:	4642      	mov	r2, r8
 800345a:	4653      	mov	r3, sl
 800345c:	4640      	mov	r0, r8
 800345e:	4651      	mov	r1, sl
 8003460:	f7fd fb88 	bl	8000b74 <__aeabi_dcmpun>
 8003464:	b148      	cbz	r0, 800347a <_printf_float+0xe2>
 8003466:	f1ba 0f00 	cmp.w	sl, #0
 800346a:	bfb8      	it	lt
 800346c:	232d      	movlt	r3, #45	; 0x2d
 800346e:	4880      	ldr	r0, [pc, #512]	; (8003670 <_printf_float+0x2d8>)
 8003470:	bfb8      	it	lt
 8003472:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003476:	4b7f      	ldr	r3, [pc, #508]	; (8003674 <_printf_float+0x2dc>)
 8003478:	e7d3      	b.n	8003422 <_printf_float+0x8a>
 800347a:	6863      	ldr	r3, [r4, #4]
 800347c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	d142      	bne.n	800350a <_printf_float+0x172>
 8003484:	2306      	movs	r3, #6
 8003486:	6063      	str	r3, [r4, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	9206      	str	r2, [sp, #24]
 800348c:	aa0e      	add	r2, sp, #56	; 0x38
 800348e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003492:	aa0d      	add	r2, sp, #52	; 0x34
 8003494:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003498:	9203      	str	r2, [sp, #12]
 800349a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800349e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80034a2:	6023      	str	r3, [r4, #0]
 80034a4:	6863      	ldr	r3, [r4, #4]
 80034a6:	4642      	mov	r2, r8
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	4628      	mov	r0, r5
 80034ac:	4653      	mov	r3, sl
 80034ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80034b0:	f7ff fed4 	bl	800325c <__cvt>
 80034b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80034b6:	4680      	mov	r8, r0
 80034b8:	2947      	cmp	r1, #71	; 0x47
 80034ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80034bc:	d108      	bne.n	80034d0 <_printf_float+0x138>
 80034be:	1cc8      	adds	r0, r1, #3
 80034c0:	db02      	blt.n	80034c8 <_printf_float+0x130>
 80034c2:	6863      	ldr	r3, [r4, #4]
 80034c4:	4299      	cmp	r1, r3
 80034c6:	dd40      	ble.n	800354a <_printf_float+0x1b2>
 80034c8:	f1a9 0902 	sub.w	r9, r9, #2
 80034cc:	fa5f f989 	uxtb.w	r9, r9
 80034d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80034d4:	d81f      	bhi.n	8003516 <_printf_float+0x17e>
 80034d6:	464a      	mov	r2, r9
 80034d8:	3901      	subs	r1, #1
 80034da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80034de:	910d      	str	r1, [sp, #52]	; 0x34
 80034e0:	f7ff ff1b 	bl	800331a <__exponent>
 80034e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034e6:	4682      	mov	sl, r0
 80034e8:	1813      	adds	r3, r2, r0
 80034ea:	2a01      	cmp	r2, #1
 80034ec:	6123      	str	r3, [r4, #16]
 80034ee:	dc02      	bgt.n	80034f6 <_printf_float+0x15e>
 80034f0:	6822      	ldr	r2, [r4, #0]
 80034f2:	07d2      	lsls	r2, r2, #31
 80034f4:	d501      	bpl.n	80034fa <_printf_float+0x162>
 80034f6:	3301      	adds	r3, #1
 80034f8:	6123      	str	r3, [r4, #16]
 80034fa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d09b      	beq.n	800343a <_printf_float+0xa2>
 8003502:	232d      	movs	r3, #45	; 0x2d
 8003504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003508:	e797      	b.n	800343a <_printf_float+0xa2>
 800350a:	2947      	cmp	r1, #71	; 0x47
 800350c:	d1bc      	bne.n	8003488 <_printf_float+0xf0>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1ba      	bne.n	8003488 <_printf_float+0xf0>
 8003512:	2301      	movs	r3, #1
 8003514:	e7b7      	b.n	8003486 <_printf_float+0xee>
 8003516:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800351a:	d118      	bne.n	800354e <_printf_float+0x1b6>
 800351c:	2900      	cmp	r1, #0
 800351e:	6863      	ldr	r3, [r4, #4]
 8003520:	dd0b      	ble.n	800353a <_printf_float+0x1a2>
 8003522:	6121      	str	r1, [r4, #16]
 8003524:	b913      	cbnz	r3, 800352c <_printf_float+0x194>
 8003526:	6822      	ldr	r2, [r4, #0]
 8003528:	07d0      	lsls	r0, r2, #31
 800352a:	d502      	bpl.n	8003532 <_printf_float+0x19a>
 800352c:	3301      	adds	r3, #1
 800352e:	440b      	add	r3, r1
 8003530:	6123      	str	r3, [r4, #16]
 8003532:	f04f 0a00 	mov.w	sl, #0
 8003536:	65a1      	str	r1, [r4, #88]	; 0x58
 8003538:	e7df      	b.n	80034fa <_printf_float+0x162>
 800353a:	b913      	cbnz	r3, 8003542 <_printf_float+0x1aa>
 800353c:	6822      	ldr	r2, [r4, #0]
 800353e:	07d2      	lsls	r2, r2, #31
 8003540:	d501      	bpl.n	8003546 <_printf_float+0x1ae>
 8003542:	3302      	adds	r3, #2
 8003544:	e7f4      	b.n	8003530 <_printf_float+0x198>
 8003546:	2301      	movs	r3, #1
 8003548:	e7f2      	b.n	8003530 <_printf_float+0x198>
 800354a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800354e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003550:	4299      	cmp	r1, r3
 8003552:	db05      	blt.n	8003560 <_printf_float+0x1c8>
 8003554:	6823      	ldr	r3, [r4, #0]
 8003556:	6121      	str	r1, [r4, #16]
 8003558:	07d8      	lsls	r0, r3, #31
 800355a:	d5ea      	bpl.n	8003532 <_printf_float+0x19a>
 800355c:	1c4b      	adds	r3, r1, #1
 800355e:	e7e7      	b.n	8003530 <_printf_float+0x198>
 8003560:	2900      	cmp	r1, #0
 8003562:	bfcc      	ite	gt
 8003564:	2201      	movgt	r2, #1
 8003566:	f1c1 0202 	rsble	r2, r1, #2
 800356a:	4413      	add	r3, r2
 800356c:	e7e0      	b.n	8003530 <_printf_float+0x198>
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	055a      	lsls	r2, r3, #21
 8003572:	d407      	bmi.n	8003584 <_printf_float+0x1ec>
 8003574:	6923      	ldr	r3, [r4, #16]
 8003576:	4642      	mov	r2, r8
 8003578:	4631      	mov	r1, r6
 800357a:	4628      	mov	r0, r5
 800357c:	47b8      	blx	r7
 800357e:	3001      	adds	r0, #1
 8003580:	d12b      	bne.n	80035da <_printf_float+0x242>
 8003582:	e764      	b.n	800344e <_printf_float+0xb6>
 8003584:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003588:	f240 80dd 	bls.w	8003746 <_printf_float+0x3ae>
 800358c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003590:	2200      	movs	r2, #0
 8003592:	2300      	movs	r3, #0
 8003594:	f7fd fabc 	bl	8000b10 <__aeabi_dcmpeq>
 8003598:	2800      	cmp	r0, #0
 800359a:	d033      	beq.n	8003604 <_printf_float+0x26c>
 800359c:	2301      	movs	r3, #1
 800359e:	4631      	mov	r1, r6
 80035a0:	4628      	mov	r0, r5
 80035a2:	4a35      	ldr	r2, [pc, #212]	; (8003678 <_printf_float+0x2e0>)
 80035a4:	47b8      	blx	r7
 80035a6:	3001      	adds	r0, #1
 80035a8:	f43f af51 	beq.w	800344e <_printf_float+0xb6>
 80035ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035b0:	429a      	cmp	r2, r3
 80035b2:	db02      	blt.n	80035ba <_printf_float+0x222>
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	07d8      	lsls	r0, r3, #31
 80035b8:	d50f      	bpl.n	80035da <_printf_float+0x242>
 80035ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035be:	4631      	mov	r1, r6
 80035c0:	4628      	mov	r0, r5
 80035c2:	47b8      	blx	r7
 80035c4:	3001      	adds	r0, #1
 80035c6:	f43f af42 	beq.w	800344e <_printf_float+0xb6>
 80035ca:	f04f 0800 	mov.w	r8, #0
 80035ce:	f104 091a 	add.w	r9, r4, #26
 80035d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035d4:	3b01      	subs	r3, #1
 80035d6:	4543      	cmp	r3, r8
 80035d8:	dc09      	bgt.n	80035ee <_printf_float+0x256>
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	079b      	lsls	r3, r3, #30
 80035de:	f100 8102 	bmi.w	80037e6 <_printf_float+0x44e>
 80035e2:	68e0      	ldr	r0, [r4, #12]
 80035e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80035e6:	4298      	cmp	r0, r3
 80035e8:	bfb8      	it	lt
 80035ea:	4618      	movlt	r0, r3
 80035ec:	e731      	b.n	8003452 <_printf_float+0xba>
 80035ee:	2301      	movs	r3, #1
 80035f0:	464a      	mov	r2, r9
 80035f2:	4631      	mov	r1, r6
 80035f4:	4628      	mov	r0, r5
 80035f6:	47b8      	blx	r7
 80035f8:	3001      	adds	r0, #1
 80035fa:	f43f af28 	beq.w	800344e <_printf_float+0xb6>
 80035fe:	f108 0801 	add.w	r8, r8, #1
 8003602:	e7e6      	b.n	80035d2 <_printf_float+0x23a>
 8003604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003606:	2b00      	cmp	r3, #0
 8003608:	dc38      	bgt.n	800367c <_printf_float+0x2e4>
 800360a:	2301      	movs	r3, #1
 800360c:	4631      	mov	r1, r6
 800360e:	4628      	mov	r0, r5
 8003610:	4a19      	ldr	r2, [pc, #100]	; (8003678 <_printf_float+0x2e0>)
 8003612:	47b8      	blx	r7
 8003614:	3001      	adds	r0, #1
 8003616:	f43f af1a 	beq.w	800344e <_printf_float+0xb6>
 800361a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800361e:	4313      	orrs	r3, r2
 8003620:	d102      	bne.n	8003628 <_printf_float+0x290>
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	07d9      	lsls	r1, r3, #31
 8003626:	d5d8      	bpl.n	80035da <_printf_float+0x242>
 8003628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800362c:	4631      	mov	r1, r6
 800362e:	4628      	mov	r0, r5
 8003630:	47b8      	blx	r7
 8003632:	3001      	adds	r0, #1
 8003634:	f43f af0b 	beq.w	800344e <_printf_float+0xb6>
 8003638:	f04f 0900 	mov.w	r9, #0
 800363c:	f104 0a1a 	add.w	sl, r4, #26
 8003640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003642:	425b      	negs	r3, r3
 8003644:	454b      	cmp	r3, r9
 8003646:	dc01      	bgt.n	800364c <_printf_float+0x2b4>
 8003648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800364a:	e794      	b.n	8003576 <_printf_float+0x1de>
 800364c:	2301      	movs	r3, #1
 800364e:	4652      	mov	r2, sl
 8003650:	4631      	mov	r1, r6
 8003652:	4628      	mov	r0, r5
 8003654:	47b8      	blx	r7
 8003656:	3001      	adds	r0, #1
 8003658:	f43f aef9 	beq.w	800344e <_printf_float+0xb6>
 800365c:	f109 0901 	add.w	r9, r9, #1
 8003660:	e7ee      	b.n	8003640 <_printf_float+0x2a8>
 8003662:	bf00      	nop
 8003664:	7fefffff 	.word	0x7fefffff
 8003668:	08005fd4 	.word	0x08005fd4
 800366c:	08005fd8 	.word	0x08005fd8
 8003670:	08005fe0 	.word	0x08005fe0
 8003674:	08005fdc 	.word	0x08005fdc
 8003678:	08005fe4 	.word	0x08005fe4
 800367c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800367e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003680:	429a      	cmp	r2, r3
 8003682:	bfa8      	it	ge
 8003684:	461a      	movge	r2, r3
 8003686:	2a00      	cmp	r2, #0
 8003688:	4691      	mov	r9, r2
 800368a:	dc37      	bgt.n	80036fc <_printf_float+0x364>
 800368c:	f04f 0b00 	mov.w	fp, #0
 8003690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003694:	f104 021a 	add.w	r2, r4, #26
 8003698:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800369c:	ebaa 0309 	sub.w	r3, sl, r9
 80036a0:	455b      	cmp	r3, fp
 80036a2:	dc33      	bgt.n	800370c <_printf_float+0x374>
 80036a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036a8:	429a      	cmp	r2, r3
 80036aa:	db3b      	blt.n	8003724 <_printf_float+0x38c>
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	07da      	lsls	r2, r3, #31
 80036b0:	d438      	bmi.n	8003724 <_printf_float+0x38c>
 80036b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80036b6:	eba2 030a 	sub.w	r3, r2, sl
 80036ba:	eba2 0901 	sub.w	r9, r2, r1
 80036be:	4599      	cmp	r9, r3
 80036c0:	bfa8      	it	ge
 80036c2:	4699      	movge	r9, r3
 80036c4:	f1b9 0f00 	cmp.w	r9, #0
 80036c8:	dc34      	bgt.n	8003734 <_printf_float+0x39c>
 80036ca:	f04f 0800 	mov.w	r8, #0
 80036ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036d2:	f104 0a1a 	add.w	sl, r4, #26
 80036d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	eba3 0309 	sub.w	r3, r3, r9
 80036e0:	4543      	cmp	r3, r8
 80036e2:	f77f af7a 	ble.w	80035da <_printf_float+0x242>
 80036e6:	2301      	movs	r3, #1
 80036e8:	4652      	mov	r2, sl
 80036ea:	4631      	mov	r1, r6
 80036ec:	4628      	mov	r0, r5
 80036ee:	47b8      	blx	r7
 80036f0:	3001      	adds	r0, #1
 80036f2:	f43f aeac 	beq.w	800344e <_printf_float+0xb6>
 80036f6:	f108 0801 	add.w	r8, r8, #1
 80036fa:	e7ec      	b.n	80036d6 <_printf_float+0x33e>
 80036fc:	4613      	mov	r3, r2
 80036fe:	4631      	mov	r1, r6
 8003700:	4642      	mov	r2, r8
 8003702:	4628      	mov	r0, r5
 8003704:	47b8      	blx	r7
 8003706:	3001      	adds	r0, #1
 8003708:	d1c0      	bne.n	800368c <_printf_float+0x2f4>
 800370a:	e6a0      	b.n	800344e <_printf_float+0xb6>
 800370c:	2301      	movs	r3, #1
 800370e:	4631      	mov	r1, r6
 8003710:	4628      	mov	r0, r5
 8003712:	920b      	str	r2, [sp, #44]	; 0x2c
 8003714:	47b8      	blx	r7
 8003716:	3001      	adds	r0, #1
 8003718:	f43f ae99 	beq.w	800344e <_printf_float+0xb6>
 800371c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800371e:	f10b 0b01 	add.w	fp, fp, #1
 8003722:	e7b9      	b.n	8003698 <_printf_float+0x300>
 8003724:	4631      	mov	r1, r6
 8003726:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800372a:	4628      	mov	r0, r5
 800372c:	47b8      	blx	r7
 800372e:	3001      	adds	r0, #1
 8003730:	d1bf      	bne.n	80036b2 <_printf_float+0x31a>
 8003732:	e68c      	b.n	800344e <_printf_float+0xb6>
 8003734:	464b      	mov	r3, r9
 8003736:	4631      	mov	r1, r6
 8003738:	4628      	mov	r0, r5
 800373a:	eb08 020a 	add.w	r2, r8, sl
 800373e:	47b8      	blx	r7
 8003740:	3001      	adds	r0, #1
 8003742:	d1c2      	bne.n	80036ca <_printf_float+0x332>
 8003744:	e683      	b.n	800344e <_printf_float+0xb6>
 8003746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003748:	2a01      	cmp	r2, #1
 800374a:	dc01      	bgt.n	8003750 <_printf_float+0x3b8>
 800374c:	07db      	lsls	r3, r3, #31
 800374e:	d537      	bpl.n	80037c0 <_printf_float+0x428>
 8003750:	2301      	movs	r3, #1
 8003752:	4642      	mov	r2, r8
 8003754:	4631      	mov	r1, r6
 8003756:	4628      	mov	r0, r5
 8003758:	47b8      	blx	r7
 800375a:	3001      	adds	r0, #1
 800375c:	f43f ae77 	beq.w	800344e <_printf_float+0xb6>
 8003760:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003764:	4631      	mov	r1, r6
 8003766:	4628      	mov	r0, r5
 8003768:	47b8      	blx	r7
 800376a:	3001      	adds	r0, #1
 800376c:	f43f ae6f 	beq.w	800344e <_printf_float+0xb6>
 8003770:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003774:	2200      	movs	r2, #0
 8003776:	2300      	movs	r3, #0
 8003778:	f7fd f9ca 	bl	8000b10 <__aeabi_dcmpeq>
 800377c:	b9d8      	cbnz	r0, 80037b6 <_printf_float+0x41e>
 800377e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003780:	f108 0201 	add.w	r2, r8, #1
 8003784:	3b01      	subs	r3, #1
 8003786:	4631      	mov	r1, r6
 8003788:	4628      	mov	r0, r5
 800378a:	47b8      	blx	r7
 800378c:	3001      	adds	r0, #1
 800378e:	d10e      	bne.n	80037ae <_printf_float+0x416>
 8003790:	e65d      	b.n	800344e <_printf_float+0xb6>
 8003792:	2301      	movs	r3, #1
 8003794:	464a      	mov	r2, r9
 8003796:	4631      	mov	r1, r6
 8003798:	4628      	mov	r0, r5
 800379a:	47b8      	blx	r7
 800379c:	3001      	adds	r0, #1
 800379e:	f43f ae56 	beq.w	800344e <_printf_float+0xb6>
 80037a2:	f108 0801 	add.w	r8, r8, #1
 80037a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037a8:	3b01      	subs	r3, #1
 80037aa:	4543      	cmp	r3, r8
 80037ac:	dcf1      	bgt.n	8003792 <_printf_float+0x3fa>
 80037ae:	4653      	mov	r3, sl
 80037b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80037b4:	e6e0      	b.n	8003578 <_printf_float+0x1e0>
 80037b6:	f04f 0800 	mov.w	r8, #0
 80037ba:	f104 091a 	add.w	r9, r4, #26
 80037be:	e7f2      	b.n	80037a6 <_printf_float+0x40e>
 80037c0:	2301      	movs	r3, #1
 80037c2:	4642      	mov	r2, r8
 80037c4:	e7df      	b.n	8003786 <_printf_float+0x3ee>
 80037c6:	2301      	movs	r3, #1
 80037c8:	464a      	mov	r2, r9
 80037ca:	4631      	mov	r1, r6
 80037cc:	4628      	mov	r0, r5
 80037ce:	47b8      	blx	r7
 80037d0:	3001      	adds	r0, #1
 80037d2:	f43f ae3c 	beq.w	800344e <_printf_float+0xb6>
 80037d6:	f108 0801 	add.w	r8, r8, #1
 80037da:	68e3      	ldr	r3, [r4, #12]
 80037dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80037de:	1a5b      	subs	r3, r3, r1
 80037e0:	4543      	cmp	r3, r8
 80037e2:	dcf0      	bgt.n	80037c6 <_printf_float+0x42e>
 80037e4:	e6fd      	b.n	80035e2 <_printf_float+0x24a>
 80037e6:	f04f 0800 	mov.w	r8, #0
 80037ea:	f104 0919 	add.w	r9, r4, #25
 80037ee:	e7f4      	b.n	80037da <_printf_float+0x442>

080037f0 <_printf_common>:
 80037f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037f4:	4616      	mov	r6, r2
 80037f6:	4699      	mov	r9, r3
 80037f8:	688a      	ldr	r2, [r1, #8]
 80037fa:	690b      	ldr	r3, [r1, #16]
 80037fc:	4607      	mov	r7, r0
 80037fe:	4293      	cmp	r3, r2
 8003800:	bfb8      	it	lt
 8003802:	4613      	movlt	r3, r2
 8003804:	6033      	str	r3, [r6, #0]
 8003806:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800380a:	460c      	mov	r4, r1
 800380c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003810:	b10a      	cbz	r2, 8003816 <_printf_common+0x26>
 8003812:	3301      	adds	r3, #1
 8003814:	6033      	str	r3, [r6, #0]
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	0699      	lsls	r1, r3, #26
 800381a:	bf42      	ittt	mi
 800381c:	6833      	ldrmi	r3, [r6, #0]
 800381e:	3302      	addmi	r3, #2
 8003820:	6033      	strmi	r3, [r6, #0]
 8003822:	6825      	ldr	r5, [r4, #0]
 8003824:	f015 0506 	ands.w	r5, r5, #6
 8003828:	d106      	bne.n	8003838 <_printf_common+0x48>
 800382a:	f104 0a19 	add.w	sl, r4, #25
 800382e:	68e3      	ldr	r3, [r4, #12]
 8003830:	6832      	ldr	r2, [r6, #0]
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	42ab      	cmp	r3, r5
 8003836:	dc28      	bgt.n	800388a <_printf_common+0x9a>
 8003838:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800383c:	1e13      	subs	r3, r2, #0
 800383e:	6822      	ldr	r2, [r4, #0]
 8003840:	bf18      	it	ne
 8003842:	2301      	movne	r3, #1
 8003844:	0692      	lsls	r2, r2, #26
 8003846:	d42d      	bmi.n	80038a4 <_printf_common+0xb4>
 8003848:	4649      	mov	r1, r9
 800384a:	4638      	mov	r0, r7
 800384c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003850:	47c0      	blx	r8
 8003852:	3001      	adds	r0, #1
 8003854:	d020      	beq.n	8003898 <_printf_common+0xa8>
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	68e5      	ldr	r5, [r4, #12]
 800385a:	f003 0306 	and.w	r3, r3, #6
 800385e:	2b04      	cmp	r3, #4
 8003860:	bf18      	it	ne
 8003862:	2500      	movne	r5, #0
 8003864:	6832      	ldr	r2, [r6, #0]
 8003866:	f04f 0600 	mov.w	r6, #0
 800386a:	68a3      	ldr	r3, [r4, #8]
 800386c:	bf08      	it	eq
 800386e:	1aad      	subeq	r5, r5, r2
 8003870:	6922      	ldr	r2, [r4, #16]
 8003872:	bf08      	it	eq
 8003874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003878:	4293      	cmp	r3, r2
 800387a:	bfc4      	itt	gt
 800387c:	1a9b      	subgt	r3, r3, r2
 800387e:	18ed      	addgt	r5, r5, r3
 8003880:	341a      	adds	r4, #26
 8003882:	42b5      	cmp	r5, r6
 8003884:	d11a      	bne.n	80038bc <_printf_common+0xcc>
 8003886:	2000      	movs	r0, #0
 8003888:	e008      	b.n	800389c <_printf_common+0xac>
 800388a:	2301      	movs	r3, #1
 800388c:	4652      	mov	r2, sl
 800388e:	4649      	mov	r1, r9
 8003890:	4638      	mov	r0, r7
 8003892:	47c0      	blx	r8
 8003894:	3001      	adds	r0, #1
 8003896:	d103      	bne.n	80038a0 <_printf_common+0xb0>
 8003898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800389c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a0:	3501      	adds	r5, #1
 80038a2:	e7c4      	b.n	800382e <_printf_common+0x3e>
 80038a4:	2030      	movs	r0, #48	; 0x30
 80038a6:	18e1      	adds	r1, r4, r3
 80038a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038b2:	4422      	add	r2, r4
 80038b4:	3302      	adds	r3, #2
 80038b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038ba:	e7c5      	b.n	8003848 <_printf_common+0x58>
 80038bc:	2301      	movs	r3, #1
 80038be:	4622      	mov	r2, r4
 80038c0:	4649      	mov	r1, r9
 80038c2:	4638      	mov	r0, r7
 80038c4:	47c0      	blx	r8
 80038c6:	3001      	adds	r0, #1
 80038c8:	d0e6      	beq.n	8003898 <_printf_common+0xa8>
 80038ca:	3601      	adds	r6, #1
 80038cc:	e7d9      	b.n	8003882 <_printf_common+0x92>
	...

080038d0 <_printf_i>:
 80038d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038d4:	460c      	mov	r4, r1
 80038d6:	7e27      	ldrb	r7, [r4, #24]
 80038d8:	4691      	mov	r9, r2
 80038da:	2f78      	cmp	r7, #120	; 0x78
 80038dc:	4680      	mov	r8, r0
 80038de:	469a      	mov	sl, r3
 80038e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80038e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038e6:	d807      	bhi.n	80038f8 <_printf_i+0x28>
 80038e8:	2f62      	cmp	r7, #98	; 0x62
 80038ea:	d80a      	bhi.n	8003902 <_printf_i+0x32>
 80038ec:	2f00      	cmp	r7, #0
 80038ee:	f000 80d9 	beq.w	8003aa4 <_printf_i+0x1d4>
 80038f2:	2f58      	cmp	r7, #88	; 0x58
 80038f4:	f000 80a4 	beq.w	8003a40 <_printf_i+0x170>
 80038f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80038fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003900:	e03a      	b.n	8003978 <_printf_i+0xa8>
 8003902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003906:	2b15      	cmp	r3, #21
 8003908:	d8f6      	bhi.n	80038f8 <_printf_i+0x28>
 800390a:	a001      	add	r0, pc, #4	; (adr r0, 8003910 <_printf_i+0x40>)
 800390c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003910:	08003969 	.word	0x08003969
 8003914:	0800397d 	.word	0x0800397d
 8003918:	080038f9 	.word	0x080038f9
 800391c:	080038f9 	.word	0x080038f9
 8003920:	080038f9 	.word	0x080038f9
 8003924:	080038f9 	.word	0x080038f9
 8003928:	0800397d 	.word	0x0800397d
 800392c:	080038f9 	.word	0x080038f9
 8003930:	080038f9 	.word	0x080038f9
 8003934:	080038f9 	.word	0x080038f9
 8003938:	080038f9 	.word	0x080038f9
 800393c:	08003a8b 	.word	0x08003a8b
 8003940:	080039ad 	.word	0x080039ad
 8003944:	08003a6d 	.word	0x08003a6d
 8003948:	080038f9 	.word	0x080038f9
 800394c:	080038f9 	.word	0x080038f9
 8003950:	08003aad 	.word	0x08003aad
 8003954:	080038f9 	.word	0x080038f9
 8003958:	080039ad 	.word	0x080039ad
 800395c:	080038f9 	.word	0x080038f9
 8003960:	080038f9 	.word	0x080038f9
 8003964:	08003a75 	.word	0x08003a75
 8003968:	680b      	ldr	r3, [r1, #0]
 800396a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800396e:	1d1a      	adds	r2, r3, #4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	600a      	str	r2, [r1, #0]
 8003974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003978:	2301      	movs	r3, #1
 800397a:	e0a4      	b.n	8003ac6 <_printf_i+0x1f6>
 800397c:	6825      	ldr	r5, [r4, #0]
 800397e:	6808      	ldr	r0, [r1, #0]
 8003980:	062e      	lsls	r6, r5, #24
 8003982:	f100 0304 	add.w	r3, r0, #4
 8003986:	d50a      	bpl.n	800399e <_printf_i+0xce>
 8003988:	6805      	ldr	r5, [r0, #0]
 800398a:	600b      	str	r3, [r1, #0]
 800398c:	2d00      	cmp	r5, #0
 800398e:	da03      	bge.n	8003998 <_printf_i+0xc8>
 8003990:	232d      	movs	r3, #45	; 0x2d
 8003992:	426d      	negs	r5, r5
 8003994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003998:	230a      	movs	r3, #10
 800399a:	485e      	ldr	r0, [pc, #376]	; (8003b14 <_printf_i+0x244>)
 800399c:	e019      	b.n	80039d2 <_printf_i+0x102>
 800399e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039a2:	6805      	ldr	r5, [r0, #0]
 80039a4:	600b      	str	r3, [r1, #0]
 80039a6:	bf18      	it	ne
 80039a8:	b22d      	sxthne	r5, r5
 80039aa:	e7ef      	b.n	800398c <_printf_i+0xbc>
 80039ac:	680b      	ldr	r3, [r1, #0]
 80039ae:	6825      	ldr	r5, [r4, #0]
 80039b0:	1d18      	adds	r0, r3, #4
 80039b2:	6008      	str	r0, [r1, #0]
 80039b4:	0628      	lsls	r0, r5, #24
 80039b6:	d501      	bpl.n	80039bc <_printf_i+0xec>
 80039b8:	681d      	ldr	r5, [r3, #0]
 80039ba:	e002      	b.n	80039c2 <_printf_i+0xf2>
 80039bc:	0669      	lsls	r1, r5, #25
 80039be:	d5fb      	bpl.n	80039b8 <_printf_i+0xe8>
 80039c0:	881d      	ldrh	r5, [r3, #0]
 80039c2:	2f6f      	cmp	r7, #111	; 0x6f
 80039c4:	bf0c      	ite	eq
 80039c6:	2308      	moveq	r3, #8
 80039c8:	230a      	movne	r3, #10
 80039ca:	4852      	ldr	r0, [pc, #328]	; (8003b14 <_printf_i+0x244>)
 80039cc:	2100      	movs	r1, #0
 80039ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039d2:	6866      	ldr	r6, [r4, #4]
 80039d4:	2e00      	cmp	r6, #0
 80039d6:	bfa8      	it	ge
 80039d8:	6821      	ldrge	r1, [r4, #0]
 80039da:	60a6      	str	r6, [r4, #8]
 80039dc:	bfa4      	itt	ge
 80039de:	f021 0104 	bicge.w	r1, r1, #4
 80039e2:	6021      	strge	r1, [r4, #0]
 80039e4:	b90d      	cbnz	r5, 80039ea <_printf_i+0x11a>
 80039e6:	2e00      	cmp	r6, #0
 80039e8:	d04d      	beq.n	8003a86 <_printf_i+0x1b6>
 80039ea:	4616      	mov	r6, r2
 80039ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80039f0:	fb03 5711 	mls	r7, r3, r1, r5
 80039f4:	5dc7      	ldrb	r7, [r0, r7]
 80039f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039fa:	462f      	mov	r7, r5
 80039fc:	42bb      	cmp	r3, r7
 80039fe:	460d      	mov	r5, r1
 8003a00:	d9f4      	bls.n	80039ec <_printf_i+0x11c>
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d10b      	bne.n	8003a1e <_printf_i+0x14e>
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	07df      	lsls	r7, r3, #31
 8003a0a:	d508      	bpl.n	8003a1e <_printf_i+0x14e>
 8003a0c:	6923      	ldr	r3, [r4, #16]
 8003a0e:	6861      	ldr	r1, [r4, #4]
 8003a10:	4299      	cmp	r1, r3
 8003a12:	bfde      	ittt	le
 8003a14:	2330      	movle	r3, #48	; 0x30
 8003a16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a1a:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003a1e:	1b92      	subs	r2, r2, r6
 8003a20:	6122      	str	r2, [r4, #16]
 8003a22:	464b      	mov	r3, r9
 8003a24:	4621      	mov	r1, r4
 8003a26:	4640      	mov	r0, r8
 8003a28:	f8cd a000 	str.w	sl, [sp]
 8003a2c:	aa03      	add	r2, sp, #12
 8003a2e:	f7ff fedf 	bl	80037f0 <_printf_common>
 8003a32:	3001      	adds	r0, #1
 8003a34:	d14c      	bne.n	8003ad0 <_printf_i+0x200>
 8003a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a3a:	b004      	add	sp, #16
 8003a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a40:	4834      	ldr	r0, [pc, #208]	; (8003b14 <_printf_i+0x244>)
 8003a42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a46:	680e      	ldr	r6, [r1, #0]
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8003a4e:	061f      	lsls	r7, r3, #24
 8003a50:	600e      	str	r6, [r1, #0]
 8003a52:	d514      	bpl.n	8003a7e <_printf_i+0x1ae>
 8003a54:	07d9      	lsls	r1, r3, #31
 8003a56:	bf44      	itt	mi
 8003a58:	f043 0320 	orrmi.w	r3, r3, #32
 8003a5c:	6023      	strmi	r3, [r4, #0]
 8003a5e:	b91d      	cbnz	r5, 8003a68 <_printf_i+0x198>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	f023 0320 	bic.w	r3, r3, #32
 8003a66:	6023      	str	r3, [r4, #0]
 8003a68:	2310      	movs	r3, #16
 8003a6a:	e7af      	b.n	80039cc <_printf_i+0xfc>
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	f043 0320 	orr.w	r3, r3, #32
 8003a72:	6023      	str	r3, [r4, #0]
 8003a74:	2378      	movs	r3, #120	; 0x78
 8003a76:	4828      	ldr	r0, [pc, #160]	; (8003b18 <_printf_i+0x248>)
 8003a78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a7c:	e7e3      	b.n	8003a46 <_printf_i+0x176>
 8003a7e:	065e      	lsls	r6, r3, #25
 8003a80:	bf48      	it	mi
 8003a82:	b2ad      	uxthmi	r5, r5
 8003a84:	e7e6      	b.n	8003a54 <_printf_i+0x184>
 8003a86:	4616      	mov	r6, r2
 8003a88:	e7bb      	b.n	8003a02 <_printf_i+0x132>
 8003a8a:	680b      	ldr	r3, [r1, #0]
 8003a8c:	6826      	ldr	r6, [r4, #0]
 8003a8e:	1d1d      	adds	r5, r3, #4
 8003a90:	6960      	ldr	r0, [r4, #20]
 8003a92:	600d      	str	r5, [r1, #0]
 8003a94:	0635      	lsls	r5, r6, #24
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	d501      	bpl.n	8003a9e <_printf_i+0x1ce>
 8003a9a:	6018      	str	r0, [r3, #0]
 8003a9c:	e002      	b.n	8003aa4 <_printf_i+0x1d4>
 8003a9e:	0671      	lsls	r1, r6, #25
 8003aa0:	d5fb      	bpl.n	8003a9a <_printf_i+0x1ca>
 8003aa2:	8018      	strh	r0, [r3, #0]
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	4616      	mov	r6, r2
 8003aa8:	6123      	str	r3, [r4, #16]
 8003aaa:	e7ba      	b.n	8003a22 <_printf_i+0x152>
 8003aac:	680b      	ldr	r3, [r1, #0]
 8003aae:	1d1a      	adds	r2, r3, #4
 8003ab0:	600a      	str	r2, [r1, #0]
 8003ab2:	681e      	ldr	r6, [r3, #0]
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	6862      	ldr	r2, [r4, #4]
 8003aba:	f000 fed7 	bl	800486c <memchr>
 8003abe:	b108      	cbz	r0, 8003ac4 <_printf_i+0x1f4>
 8003ac0:	1b80      	subs	r0, r0, r6
 8003ac2:	6060      	str	r0, [r4, #4]
 8003ac4:	6863      	ldr	r3, [r4, #4]
 8003ac6:	6123      	str	r3, [r4, #16]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ace:	e7a8      	b.n	8003a22 <_printf_i+0x152>
 8003ad0:	4632      	mov	r2, r6
 8003ad2:	4649      	mov	r1, r9
 8003ad4:	4640      	mov	r0, r8
 8003ad6:	6923      	ldr	r3, [r4, #16]
 8003ad8:	47d0      	blx	sl
 8003ada:	3001      	adds	r0, #1
 8003adc:	d0ab      	beq.n	8003a36 <_printf_i+0x166>
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	079b      	lsls	r3, r3, #30
 8003ae2:	d413      	bmi.n	8003b0c <_printf_i+0x23c>
 8003ae4:	68e0      	ldr	r0, [r4, #12]
 8003ae6:	9b03      	ldr	r3, [sp, #12]
 8003ae8:	4298      	cmp	r0, r3
 8003aea:	bfb8      	it	lt
 8003aec:	4618      	movlt	r0, r3
 8003aee:	e7a4      	b.n	8003a3a <_printf_i+0x16a>
 8003af0:	2301      	movs	r3, #1
 8003af2:	4632      	mov	r2, r6
 8003af4:	4649      	mov	r1, r9
 8003af6:	4640      	mov	r0, r8
 8003af8:	47d0      	blx	sl
 8003afa:	3001      	adds	r0, #1
 8003afc:	d09b      	beq.n	8003a36 <_printf_i+0x166>
 8003afe:	3501      	adds	r5, #1
 8003b00:	68e3      	ldr	r3, [r4, #12]
 8003b02:	9903      	ldr	r1, [sp, #12]
 8003b04:	1a5b      	subs	r3, r3, r1
 8003b06:	42ab      	cmp	r3, r5
 8003b08:	dcf2      	bgt.n	8003af0 <_printf_i+0x220>
 8003b0a:	e7eb      	b.n	8003ae4 <_printf_i+0x214>
 8003b0c:	2500      	movs	r5, #0
 8003b0e:	f104 0619 	add.w	r6, r4, #25
 8003b12:	e7f5      	b.n	8003b00 <_printf_i+0x230>
 8003b14:	08005fe6 	.word	0x08005fe6
 8003b18:	08005ff7 	.word	0x08005ff7

08003b1c <_vsiprintf_r>:
 8003b1c:	b500      	push	{lr}
 8003b1e:	b09b      	sub	sp, #108	; 0x6c
 8003b20:	9100      	str	r1, [sp, #0]
 8003b22:	9104      	str	r1, [sp, #16]
 8003b24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b28:	9105      	str	r1, [sp, #20]
 8003b2a:	9102      	str	r1, [sp, #8]
 8003b2c:	4905      	ldr	r1, [pc, #20]	; (8003b44 <_vsiprintf_r+0x28>)
 8003b2e:	9103      	str	r1, [sp, #12]
 8003b30:	4669      	mov	r1, sp
 8003b32:	f001 fb3b 	bl	80051ac <_svfiprintf_r>
 8003b36:	2200      	movs	r2, #0
 8003b38:	9b00      	ldr	r3, [sp, #0]
 8003b3a:	701a      	strb	r2, [r3, #0]
 8003b3c:	b01b      	add	sp, #108	; 0x6c
 8003b3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b42:	bf00      	nop
 8003b44:	ffff0208 	.word	0xffff0208

08003b48 <vsiprintf>:
 8003b48:	4613      	mov	r3, r2
 8003b4a:	460a      	mov	r2, r1
 8003b4c:	4601      	mov	r1, r0
 8003b4e:	4802      	ldr	r0, [pc, #8]	; (8003b58 <vsiprintf+0x10>)
 8003b50:	6800      	ldr	r0, [r0, #0]
 8003b52:	f7ff bfe3 	b.w	8003b1c <_vsiprintf_r>
 8003b56:	bf00      	nop
 8003b58:	2000010c 	.word	0x2000010c

08003b5c <quorem>:
 8003b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b60:	6903      	ldr	r3, [r0, #16]
 8003b62:	690c      	ldr	r4, [r1, #16]
 8003b64:	4607      	mov	r7, r0
 8003b66:	42a3      	cmp	r3, r4
 8003b68:	f2c0 8083 	blt.w	8003c72 <quorem+0x116>
 8003b6c:	3c01      	subs	r4, #1
 8003b6e:	f100 0514 	add.w	r5, r0, #20
 8003b72:	f101 0814 	add.w	r8, r1, #20
 8003b76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b7a:	9301      	str	r3, [sp, #4]
 8003b7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003b80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b84:	3301      	adds	r3, #1
 8003b86:	429a      	cmp	r2, r3
 8003b88:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003b90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003b94:	d332      	bcc.n	8003bfc <quorem+0xa0>
 8003b96:	f04f 0e00 	mov.w	lr, #0
 8003b9a:	4640      	mov	r0, r8
 8003b9c:	46ac      	mov	ip, r5
 8003b9e:	46f2      	mov	sl, lr
 8003ba0:	f850 2b04 	ldr.w	r2, [r0], #4
 8003ba4:	b293      	uxth	r3, r2
 8003ba6:	fb06 e303 	mla	r3, r6, r3, lr
 8003baa:	0c12      	lsrs	r2, r2, #16
 8003bac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003bb0:	fb06 e202 	mla	r2, r6, r2, lr
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	ebaa 0303 	sub.w	r3, sl, r3
 8003bba:	f8dc a000 	ldr.w	sl, [ip]
 8003bbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003bc2:	fa1f fa8a 	uxth.w	sl, sl
 8003bc6:	4453      	add	r3, sl
 8003bc8:	fa1f fa82 	uxth.w	sl, r2
 8003bcc:	f8dc 2000 	ldr.w	r2, [ip]
 8003bd0:	4581      	cmp	r9, r0
 8003bd2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003bd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003be0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003be4:	f84c 3b04 	str.w	r3, [ip], #4
 8003be8:	d2da      	bcs.n	8003ba0 <quorem+0x44>
 8003bea:	f855 300b 	ldr.w	r3, [r5, fp]
 8003bee:	b92b      	cbnz	r3, 8003bfc <quorem+0xa0>
 8003bf0:	9b01      	ldr	r3, [sp, #4]
 8003bf2:	3b04      	subs	r3, #4
 8003bf4:	429d      	cmp	r5, r3
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	d32f      	bcc.n	8003c5a <quorem+0xfe>
 8003bfa:	613c      	str	r4, [r7, #16]
 8003bfc:	4638      	mov	r0, r7
 8003bfe:	f001 f8bd 	bl	8004d7c <__mcmp>
 8003c02:	2800      	cmp	r0, #0
 8003c04:	db25      	blt.n	8003c52 <quorem+0xf6>
 8003c06:	4628      	mov	r0, r5
 8003c08:	f04f 0c00 	mov.w	ip, #0
 8003c0c:	3601      	adds	r6, #1
 8003c0e:	f858 1b04 	ldr.w	r1, [r8], #4
 8003c12:	f8d0 e000 	ldr.w	lr, [r0]
 8003c16:	b28b      	uxth	r3, r1
 8003c18:	ebac 0303 	sub.w	r3, ip, r3
 8003c1c:	fa1f f28e 	uxth.w	r2, lr
 8003c20:	4413      	add	r3, r2
 8003c22:	0c0a      	lsrs	r2, r1, #16
 8003c24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003c28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c32:	45c1      	cmp	r9, r8
 8003c34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003c38:	f840 3b04 	str.w	r3, [r0], #4
 8003c3c:	d2e7      	bcs.n	8003c0e <quorem+0xb2>
 8003c3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c46:	b922      	cbnz	r2, 8003c52 <quorem+0xf6>
 8003c48:	3b04      	subs	r3, #4
 8003c4a:	429d      	cmp	r5, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	d30a      	bcc.n	8003c66 <quorem+0x10a>
 8003c50:	613c      	str	r4, [r7, #16]
 8003c52:	4630      	mov	r0, r6
 8003c54:	b003      	add	sp, #12
 8003c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	3b04      	subs	r3, #4
 8003c5e:	2a00      	cmp	r2, #0
 8003c60:	d1cb      	bne.n	8003bfa <quorem+0x9e>
 8003c62:	3c01      	subs	r4, #1
 8003c64:	e7c6      	b.n	8003bf4 <quorem+0x98>
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	3b04      	subs	r3, #4
 8003c6a:	2a00      	cmp	r2, #0
 8003c6c:	d1f0      	bne.n	8003c50 <quorem+0xf4>
 8003c6e:	3c01      	subs	r4, #1
 8003c70:	e7eb      	b.n	8003c4a <quorem+0xee>
 8003c72:	2000      	movs	r0, #0
 8003c74:	e7ee      	b.n	8003c54 <quorem+0xf8>
	...

08003c78 <_dtoa_r>:
 8003c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c7c:	4616      	mov	r6, r2
 8003c7e:	461f      	mov	r7, r3
 8003c80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003c82:	b099      	sub	sp, #100	; 0x64
 8003c84:	4605      	mov	r5, r0
 8003c86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003c8a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003c8e:	b974      	cbnz	r4, 8003cae <_dtoa_r+0x36>
 8003c90:	2010      	movs	r0, #16
 8003c92:	f000 fde3 	bl	800485c <malloc>
 8003c96:	4602      	mov	r2, r0
 8003c98:	6268      	str	r0, [r5, #36]	; 0x24
 8003c9a:	b920      	cbnz	r0, 8003ca6 <_dtoa_r+0x2e>
 8003c9c:	21ea      	movs	r1, #234	; 0xea
 8003c9e:	4bae      	ldr	r3, [pc, #696]	; (8003f58 <_dtoa_r+0x2e0>)
 8003ca0:	48ae      	ldr	r0, [pc, #696]	; (8003f5c <_dtoa_r+0x2e4>)
 8003ca2:	f001 fb93 	bl	80053cc <__assert_func>
 8003ca6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003caa:	6004      	str	r4, [r0, #0]
 8003cac:	60c4      	str	r4, [r0, #12]
 8003cae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003cb0:	6819      	ldr	r1, [r3, #0]
 8003cb2:	b151      	cbz	r1, 8003cca <_dtoa_r+0x52>
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	4093      	lsls	r3, r2
 8003cba:	604a      	str	r2, [r1, #4]
 8003cbc:	608b      	str	r3, [r1, #8]
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f000 fe22 	bl	8004908 <_Bfree>
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	1e3b      	subs	r3, r7, #0
 8003ccc:	bfaf      	iteee	ge
 8003cce:	2300      	movge	r3, #0
 8003cd0:	2201      	movlt	r2, #1
 8003cd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003cd6:	9305      	strlt	r3, [sp, #20]
 8003cd8:	bfa8      	it	ge
 8003cda:	f8c8 3000 	strge.w	r3, [r8]
 8003cde:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003ce2:	4b9f      	ldr	r3, [pc, #636]	; (8003f60 <_dtoa_r+0x2e8>)
 8003ce4:	bfb8      	it	lt
 8003ce6:	f8c8 2000 	strlt.w	r2, [r8]
 8003cea:	ea33 0309 	bics.w	r3, r3, r9
 8003cee:	d119      	bne.n	8003d24 <_dtoa_r+0xac>
 8003cf0:	f242 730f 	movw	r3, #9999	; 0x270f
 8003cf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003cfc:	4333      	orrs	r3, r6
 8003cfe:	f000 8580 	beq.w	8004802 <_dtoa_r+0xb8a>
 8003d02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d04:	b953      	cbnz	r3, 8003d1c <_dtoa_r+0xa4>
 8003d06:	4b97      	ldr	r3, [pc, #604]	; (8003f64 <_dtoa_r+0x2ec>)
 8003d08:	e022      	b.n	8003d50 <_dtoa_r+0xd8>
 8003d0a:	4b97      	ldr	r3, [pc, #604]	; (8003f68 <_dtoa_r+0x2f0>)
 8003d0c:	9308      	str	r3, [sp, #32]
 8003d0e:	3308      	adds	r3, #8
 8003d10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	9808      	ldr	r0, [sp, #32]
 8003d16:	b019      	add	sp, #100	; 0x64
 8003d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1c:	4b91      	ldr	r3, [pc, #580]	; (8003f64 <_dtoa_r+0x2ec>)
 8003d1e:	9308      	str	r3, [sp, #32]
 8003d20:	3303      	adds	r3, #3
 8003d22:	e7f5      	b.n	8003d10 <_dtoa_r+0x98>
 8003d24:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003d28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003d2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d30:	2200      	movs	r2, #0
 8003d32:	2300      	movs	r3, #0
 8003d34:	f7fc feec 	bl	8000b10 <__aeabi_dcmpeq>
 8003d38:	4680      	mov	r8, r0
 8003d3a:	b158      	cbz	r0, 8003d54 <_dtoa_r+0xdc>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8559 	beq.w	80047fc <_dtoa_r+0xb84>
 8003d4a:	4888      	ldr	r0, [pc, #544]	; (8003f6c <_dtoa_r+0x2f4>)
 8003d4c:	6018      	str	r0, [r3, #0]
 8003d4e:	1e43      	subs	r3, r0, #1
 8003d50:	9308      	str	r3, [sp, #32]
 8003d52:	e7df      	b.n	8003d14 <_dtoa_r+0x9c>
 8003d54:	ab16      	add	r3, sp, #88	; 0x58
 8003d56:	9301      	str	r3, [sp, #4]
 8003d58:	ab17      	add	r3, sp, #92	; 0x5c
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003d62:	f001 f8b7 	bl	8004ed4 <__d2b>
 8003d66:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003d6a:	4682      	mov	sl, r0
 8003d6c:	2c00      	cmp	r4, #0
 8003d6e:	d07e      	beq.n	8003e6e <_dtoa_r+0x1f6>
 8003d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d76:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d7e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003d82:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003d86:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	4b78      	ldr	r3, [pc, #480]	; (8003f70 <_dtoa_r+0x2f8>)
 8003d8e:	f7fc fa9f 	bl	80002d0 <__aeabi_dsub>
 8003d92:	a36b      	add	r3, pc, #428	; (adr r3, 8003f40 <_dtoa_r+0x2c8>)
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	f7fc fc52 	bl	8000640 <__aeabi_dmul>
 8003d9c:	a36a      	add	r3, pc, #424	; (adr r3, 8003f48 <_dtoa_r+0x2d0>)
 8003d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da2:	f7fc fa97 	bl	80002d4 <__adddf3>
 8003da6:	4606      	mov	r6, r0
 8003da8:	4620      	mov	r0, r4
 8003daa:	460f      	mov	r7, r1
 8003dac:	f7fc fbde 	bl	800056c <__aeabi_i2d>
 8003db0:	a367      	add	r3, pc, #412	; (adr r3, 8003f50 <_dtoa_r+0x2d8>)
 8003db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db6:	f7fc fc43 	bl	8000640 <__aeabi_dmul>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	4639      	mov	r1, r7
 8003dc2:	f7fc fa87 	bl	80002d4 <__adddf3>
 8003dc6:	4606      	mov	r6, r0
 8003dc8:	460f      	mov	r7, r1
 8003dca:	f7fc fee9 	bl	8000ba0 <__aeabi_d2iz>
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4681      	mov	r9, r0
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	4639      	mov	r1, r7
 8003dd8:	f7fc fea4 	bl	8000b24 <__aeabi_dcmplt>
 8003ddc:	b148      	cbz	r0, 8003df2 <_dtoa_r+0x17a>
 8003dde:	4648      	mov	r0, r9
 8003de0:	f7fc fbc4 	bl	800056c <__aeabi_i2d>
 8003de4:	4632      	mov	r2, r6
 8003de6:	463b      	mov	r3, r7
 8003de8:	f7fc fe92 	bl	8000b10 <__aeabi_dcmpeq>
 8003dec:	b908      	cbnz	r0, 8003df2 <_dtoa_r+0x17a>
 8003dee:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003df2:	f1b9 0f16 	cmp.w	r9, #22
 8003df6:	d857      	bhi.n	8003ea8 <_dtoa_r+0x230>
 8003df8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003dfc:	4b5d      	ldr	r3, [pc, #372]	; (8003f74 <_dtoa_r+0x2fc>)
 8003dfe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	f7fc fe8d 	bl	8000b24 <__aeabi_dcmplt>
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	d04e      	beq.n	8003eac <_dtoa_r+0x234>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003e14:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003e18:	1b1c      	subs	r4, r3, r4
 8003e1a:	1e63      	subs	r3, r4, #1
 8003e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e1e:	bf49      	itett	mi
 8003e20:	f1c4 0301 	rsbmi	r3, r4, #1
 8003e24:	2300      	movpl	r3, #0
 8003e26:	9306      	strmi	r3, [sp, #24]
 8003e28:	2300      	movmi	r3, #0
 8003e2a:	bf54      	ite	pl
 8003e2c:	9306      	strpl	r3, [sp, #24]
 8003e2e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003e30:	f1b9 0f00 	cmp.w	r9, #0
 8003e34:	db3c      	blt.n	8003eb0 <_dtoa_r+0x238>
 8003e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e38:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003e3c:	444b      	add	r3, r9
 8003e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e40:	2300      	movs	r3, #0
 8003e42:	930a      	str	r3, [sp, #40]	; 0x28
 8003e44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e46:	2b09      	cmp	r3, #9
 8003e48:	d86c      	bhi.n	8003f24 <_dtoa_r+0x2ac>
 8003e4a:	2b05      	cmp	r3, #5
 8003e4c:	bfc4      	itt	gt
 8003e4e:	3b04      	subgt	r3, #4
 8003e50:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003e52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e54:	bfc8      	it	gt
 8003e56:	2400      	movgt	r4, #0
 8003e58:	f1a3 0302 	sub.w	r3, r3, #2
 8003e5c:	bfd8      	it	le
 8003e5e:	2401      	movle	r4, #1
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	f200 808b 	bhi.w	8003f7c <_dtoa_r+0x304>
 8003e66:	e8df f003 	tbb	[pc, r3]
 8003e6a:	4f2d      	.short	0x4f2d
 8003e6c:	5b4d      	.short	0x5b4d
 8003e6e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003e72:	441c      	add	r4, r3
 8003e74:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	bfc3      	ittte	gt
 8003e7c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003e80:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003e84:	fa09 f303 	lslgt.w	r3, r9, r3
 8003e88:	f1c3 0320 	rsble	r3, r3, #32
 8003e8c:	bfc6      	itte	gt
 8003e8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003e92:	4318      	orrgt	r0, r3
 8003e94:	fa06 f003 	lslle.w	r0, r6, r3
 8003e98:	f7fc fb58 	bl	800054c <__aeabi_ui2d>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003ea2:	3c01      	subs	r4, #1
 8003ea4:	9313      	str	r3, [sp, #76]	; 0x4c
 8003ea6:	e770      	b.n	8003d8a <_dtoa_r+0x112>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e7b3      	b.n	8003e14 <_dtoa_r+0x19c>
 8003eac:	900f      	str	r0, [sp, #60]	; 0x3c
 8003eae:	e7b2      	b.n	8003e16 <_dtoa_r+0x19e>
 8003eb0:	9b06      	ldr	r3, [sp, #24]
 8003eb2:	eba3 0309 	sub.w	r3, r3, r9
 8003eb6:	9306      	str	r3, [sp, #24]
 8003eb8:	f1c9 0300 	rsb	r3, r9, #0
 8003ebc:	930a      	str	r3, [sp, #40]	; 0x28
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	930e      	str	r3, [sp, #56]	; 0x38
 8003ec2:	e7bf      	b.n	8003e44 <_dtoa_r+0x1cc>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ec8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	dc59      	bgt.n	8003f82 <_dtoa_r+0x30a>
 8003ece:	f04f 0b01 	mov.w	fp, #1
 8003ed2:	465b      	mov	r3, fp
 8003ed4:	f8cd b008 	str.w	fp, [sp, #8]
 8003ed8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003edc:	2200      	movs	r2, #0
 8003ede:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003ee0:	6042      	str	r2, [r0, #4]
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	f102 0614 	add.w	r6, r2, #20
 8003ee8:	429e      	cmp	r6, r3
 8003eea:	6841      	ldr	r1, [r0, #4]
 8003eec:	d94f      	bls.n	8003f8e <_dtoa_r+0x316>
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f000 fcca 	bl	8004888 <_Balloc>
 8003ef4:	9008      	str	r0, [sp, #32]
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	d14d      	bne.n	8003f96 <_dtoa_r+0x31e>
 8003efa:	4602      	mov	r2, r0
 8003efc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003f00:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <_dtoa_r+0x300>)
 8003f02:	e6cd      	b.n	8003ca0 <_dtoa_r+0x28>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e7de      	b.n	8003ec6 <_dtoa_r+0x24e>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f0e:	eb09 0b03 	add.w	fp, r9, r3
 8003f12:	f10b 0301 	add.w	r3, fp, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	9302      	str	r3, [sp, #8]
 8003f1a:	bfb8      	it	lt
 8003f1c:	2301      	movlt	r3, #1
 8003f1e:	e7dd      	b.n	8003edc <_dtoa_r+0x264>
 8003f20:	2301      	movs	r3, #1
 8003f22:	e7f2      	b.n	8003f0a <_dtoa_r+0x292>
 8003f24:	2401      	movs	r4, #1
 8003f26:	2300      	movs	r3, #0
 8003f28:	940b      	str	r4, [sp, #44]	; 0x2c
 8003f2a:	9322      	str	r3, [sp, #136]	; 0x88
 8003f2c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003f30:	2200      	movs	r2, #0
 8003f32:	2312      	movs	r3, #18
 8003f34:	f8cd b008 	str.w	fp, [sp, #8]
 8003f38:	9223      	str	r2, [sp, #140]	; 0x8c
 8003f3a:	e7cf      	b.n	8003edc <_dtoa_r+0x264>
 8003f3c:	f3af 8000 	nop.w
 8003f40:	636f4361 	.word	0x636f4361
 8003f44:	3fd287a7 	.word	0x3fd287a7
 8003f48:	8b60c8b3 	.word	0x8b60c8b3
 8003f4c:	3fc68a28 	.word	0x3fc68a28
 8003f50:	509f79fb 	.word	0x509f79fb
 8003f54:	3fd34413 	.word	0x3fd34413
 8003f58:	08006015 	.word	0x08006015
 8003f5c:	0800602c 	.word	0x0800602c
 8003f60:	7ff00000 	.word	0x7ff00000
 8003f64:	08006011 	.word	0x08006011
 8003f68:	08006008 	.word	0x08006008
 8003f6c:	08005fe5 	.word	0x08005fe5
 8003f70:	3ff80000 	.word	0x3ff80000
 8003f74:	08006128 	.word	0x08006128
 8003f78:	0800608b 	.word	0x0800608b
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f80:	e7d4      	b.n	8003f2c <_dtoa_r+0x2b4>
 8003f82:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8003f86:	465b      	mov	r3, fp
 8003f88:	f8cd b008 	str.w	fp, [sp, #8]
 8003f8c:	e7a6      	b.n	8003edc <_dtoa_r+0x264>
 8003f8e:	3101      	adds	r1, #1
 8003f90:	6041      	str	r1, [r0, #4]
 8003f92:	0052      	lsls	r2, r2, #1
 8003f94:	e7a6      	b.n	8003ee4 <_dtoa_r+0x26c>
 8003f96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003f98:	9a08      	ldr	r2, [sp, #32]
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	9b02      	ldr	r3, [sp, #8]
 8003f9e:	2b0e      	cmp	r3, #14
 8003fa0:	f200 80a8 	bhi.w	80040f4 <_dtoa_r+0x47c>
 8003fa4:	2c00      	cmp	r4, #0
 8003fa6:	f000 80a5 	beq.w	80040f4 <_dtoa_r+0x47c>
 8003faa:	f1b9 0f00 	cmp.w	r9, #0
 8003fae:	dd34      	ble.n	800401a <_dtoa_r+0x3a2>
 8003fb0:	4a9a      	ldr	r2, [pc, #616]	; (800421c <_dtoa_r+0x5a4>)
 8003fb2:	f009 030f 	and.w	r3, r9, #15
 8003fb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003fba:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003fbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fc2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003fc6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003fca:	d016      	beq.n	8003ffa <_dtoa_r+0x382>
 8003fcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003fd0:	4b93      	ldr	r3, [pc, #588]	; (8004220 <_dtoa_r+0x5a8>)
 8003fd2:	2703      	movs	r7, #3
 8003fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003fd8:	f7fc fc5c 	bl	8000894 <__aeabi_ddiv>
 8003fdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003fe0:	f004 040f 	and.w	r4, r4, #15
 8003fe4:	4e8e      	ldr	r6, [pc, #568]	; (8004220 <_dtoa_r+0x5a8>)
 8003fe6:	b954      	cbnz	r4, 8003ffe <_dtoa_r+0x386>
 8003fe8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003fec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ff0:	f7fc fc50 	bl	8000894 <__aeabi_ddiv>
 8003ff4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ff8:	e029      	b.n	800404e <_dtoa_r+0x3d6>
 8003ffa:	2702      	movs	r7, #2
 8003ffc:	e7f2      	b.n	8003fe4 <_dtoa_r+0x36c>
 8003ffe:	07e1      	lsls	r1, r4, #31
 8004000:	d508      	bpl.n	8004014 <_dtoa_r+0x39c>
 8004002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004006:	e9d6 2300 	ldrd	r2, r3, [r6]
 800400a:	f7fc fb19 	bl	8000640 <__aeabi_dmul>
 800400e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004012:	3701      	adds	r7, #1
 8004014:	1064      	asrs	r4, r4, #1
 8004016:	3608      	adds	r6, #8
 8004018:	e7e5      	b.n	8003fe6 <_dtoa_r+0x36e>
 800401a:	f000 80a5 	beq.w	8004168 <_dtoa_r+0x4f0>
 800401e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004022:	f1c9 0400 	rsb	r4, r9, #0
 8004026:	4b7d      	ldr	r3, [pc, #500]	; (800421c <_dtoa_r+0x5a4>)
 8004028:	f004 020f 	and.w	r2, r4, #15
 800402c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f7fc fb04 	bl	8000640 <__aeabi_dmul>
 8004038:	2702      	movs	r7, #2
 800403a:	2300      	movs	r3, #0
 800403c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004040:	4e77      	ldr	r6, [pc, #476]	; (8004220 <_dtoa_r+0x5a8>)
 8004042:	1124      	asrs	r4, r4, #4
 8004044:	2c00      	cmp	r4, #0
 8004046:	f040 8084 	bne.w	8004152 <_dtoa_r+0x4da>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1d2      	bne.n	8003ff4 <_dtoa_r+0x37c>
 800404e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 808b 	beq.w	800416c <_dtoa_r+0x4f4>
 8004056:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800405a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800405e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004062:	2200      	movs	r2, #0
 8004064:	4b6f      	ldr	r3, [pc, #444]	; (8004224 <_dtoa_r+0x5ac>)
 8004066:	f7fc fd5d 	bl	8000b24 <__aeabi_dcmplt>
 800406a:	2800      	cmp	r0, #0
 800406c:	d07e      	beq.n	800416c <_dtoa_r+0x4f4>
 800406e:	9b02      	ldr	r3, [sp, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d07b      	beq.n	800416c <_dtoa_r+0x4f4>
 8004074:	f1bb 0f00 	cmp.w	fp, #0
 8004078:	dd38      	ble.n	80040ec <_dtoa_r+0x474>
 800407a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800407e:	2200      	movs	r2, #0
 8004080:	4b69      	ldr	r3, [pc, #420]	; (8004228 <_dtoa_r+0x5b0>)
 8004082:	f7fc fadd 	bl	8000640 <__aeabi_dmul>
 8004086:	465c      	mov	r4, fp
 8004088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800408c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8004090:	3701      	adds	r7, #1
 8004092:	4638      	mov	r0, r7
 8004094:	f7fc fa6a 	bl	800056c <__aeabi_i2d>
 8004098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800409c:	f7fc fad0 	bl	8000640 <__aeabi_dmul>
 80040a0:	2200      	movs	r2, #0
 80040a2:	4b62      	ldr	r3, [pc, #392]	; (800422c <_dtoa_r+0x5b4>)
 80040a4:	f7fc f916 	bl	80002d4 <__adddf3>
 80040a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80040ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040b0:	9611      	str	r6, [sp, #68]	; 0x44
 80040b2:	2c00      	cmp	r4, #0
 80040b4:	d15d      	bne.n	8004172 <_dtoa_r+0x4fa>
 80040b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040ba:	2200      	movs	r2, #0
 80040bc:	4b5c      	ldr	r3, [pc, #368]	; (8004230 <_dtoa_r+0x5b8>)
 80040be:	f7fc f907 	bl	80002d0 <__aeabi_dsub>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80040ca:	4633      	mov	r3, r6
 80040cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80040ce:	f7fc fd47 	bl	8000b60 <__aeabi_dcmpgt>
 80040d2:	2800      	cmp	r0, #0
 80040d4:	f040 829e 	bne.w	8004614 <_dtoa_r+0x99c>
 80040d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80040de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80040e2:	f7fc fd1f 	bl	8000b24 <__aeabi_dcmplt>
 80040e6:	2800      	cmp	r0, #0
 80040e8:	f040 8292 	bne.w	8004610 <_dtoa_r+0x998>
 80040ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80040f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80040f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f2c0 8153 	blt.w	80043a2 <_dtoa_r+0x72a>
 80040fc:	f1b9 0f0e 	cmp.w	r9, #14
 8004100:	f300 814f 	bgt.w	80043a2 <_dtoa_r+0x72a>
 8004104:	4b45      	ldr	r3, [pc, #276]	; (800421c <_dtoa_r+0x5a4>)
 8004106:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800410a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800410e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004112:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004114:	2b00      	cmp	r3, #0
 8004116:	f280 80db 	bge.w	80042d0 <_dtoa_r+0x658>
 800411a:	9b02      	ldr	r3, [sp, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f300 80d7 	bgt.w	80042d0 <_dtoa_r+0x658>
 8004122:	f040 8274 	bne.w	800460e <_dtoa_r+0x996>
 8004126:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800412a:	2200      	movs	r2, #0
 800412c:	4b40      	ldr	r3, [pc, #256]	; (8004230 <_dtoa_r+0x5b8>)
 800412e:	f7fc fa87 	bl	8000640 <__aeabi_dmul>
 8004132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004136:	f7fc fd09 	bl	8000b4c <__aeabi_dcmpge>
 800413a:	9c02      	ldr	r4, [sp, #8]
 800413c:	4626      	mov	r6, r4
 800413e:	2800      	cmp	r0, #0
 8004140:	f040 824a 	bne.w	80045d8 <_dtoa_r+0x960>
 8004144:	2331      	movs	r3, #49	; 0x31
 8004146:	9f08      	ldr	r7, [sp, #32]
 8004148:	f109 0901 	add.w	r9, r9, #1
 800414c:	f807 3b01 	strb.w	r3, [r7], #1
 8004150:	e246      	b.n	80045e0 <_dtoa_r+0x968>
 8004152:	07e2      	lsls	r2, r4, #31
 8004154:	d505      	bpl.n	8004162 <_dtoa_r+0x4ea>
 8004156:	e9d6 2300 	ldrd	r2, r3, [r6]
 800415a:	f7fc fa71 	bl	8000640 <__aeabi_dmul>
 800415e:	2301      	movs	r3, #1
 8004160:	3701      	adds	r7, #1
 8004162:	1064      	asrs	r4, r4, #1
 8004164:	3608      	adds	r6, #8
 8004166:	e76d      	b.n	8004044 <_dtoa_r+0x3cc>
 8004168:	2702      	movs	r7, #2
 800416a:	e770      	b.n	800404e <_dtoa_r+0x3d6>
 800416c:	46c8      	mov	r8, r9
 800416e:	9c02      	ldr	r4, [sp, #8]
 8004170:	e78f      	b.n	8004092 <_dtoa_r+0x41a>
 8004172:	9908      	ldr	r1, [sp, #32]
 8004174:	4b29      	ldr	r3, [pc, #164]	; (800421c <_dtoa_r+0x5a4>)
 8004176:	4421      	add	r1, r4
 8004178:	9112      	str	r1, [sp, #72]	; 0x48
 800417a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800417c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004180:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004184:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004188:	2900      	cmp	r1, #0
 800418a:	d055      	beq.n	8004238 <_dtoa_r+0x5c0>
 800418c:	2000      	movs	r0, #0
 800418e:	4929      	ldr	r1, [pc, #164]	; (8004234 <_dtoa_r+0x5bc>)
 8004190:	f7fc fb80 	bl	8000894 <__aeabi_ddiv>
 8004194:	463b      	mov	r3, r7
 8004196:	4632      	mov	r2, r6
 8004198:	f7fc f89a 	bl	80002d0 <__aeabi_dsub>
 800419c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80041a0:	9f08      	ldr	r7, [sp, #32]
 80041a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041a6:	f7fc fcfb 	bl	8000ba0 <__aeabi_d2iz>
 80041aa:	4604      	mov	r4, r0
 80041ac:	f7fc f9de 	bl	800056c <__aeabi_i2d>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041b8:	f7fc f88a 	bl	80002d0 <__aeabi_dsub>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	3430      	adds	r4, #48	; 0x30
 80041c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041ca:	f807 4b01 	strb.w	r4, [r7], #1
 80041ce:	f7fc fca9 	bl	8000b24 <__aeabi_dcmplt>
 80041d2:	2800      	cmp	r0, #0
 80041d4:	d174      	bne.n	80042c0 <_dtoa_r+0x648>
 80041d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041da:	2000      	movs	r0, #0
 80041dc:	4911      	ldr	r1, [pc, #68]	; (8004224 <_dtoa_r+0x5ac>)
 80041de:	f7fc f877 	bl	80002d0 <__aeabi_dsub>
 80041e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041e6:	f7fc fc9d 	bl	8000b24 <__aeabi_dcmplt>
 80041ea:	2800      	cmp	r0, #0
 80041ec:	f040 80b6 	bne.w	800435c <_dtoa_r+0x6e4>
 80041f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80041f2:	429f      	cmp	r7, r3
 80041f4:	f43f af7a 	beq.w	80040ec <_dtoa_r+0x474>
 80041f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041fc:	2200      	movs	r2, #0
 80041fe:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <_dtoa_r+0x5b0>)
 8004200:	f7fc fa1e 	bl	8000640 <__aeabi_dmul>
 8004204:	2200      	movs	r2, #0
 8004206:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800420a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <_dtoa_r+0x5b0>)
 8004210:	f7fc fa16 	bl	8000640 <__aeabi_dmul>
 8004214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004218:	e7c3      	b.n	80041a2 <_dtoa_r+0x52a>
 800421a:	bf00      	nop
 800421c:	08006128 	.word	0x08006128
 8004220:	08006100 	.word	0x08006100
 8004224:	3ff00000 	.word	0x3ff00000
 8004228:	40240000 	.word	0x40240000
 800422c:	401c0000 	.word	0x401c0000
 8004230:	40140000 	.word	0x40140000
 8004234:	3fe00000 	.word	0x3fe00000
 8004238:	4630      	mov	r0, r6
 800423a:	4639      	mov	r1, r7
 800423c:	f7fc fa00 	bl	8000640 <__aeabi_dmul>
 8004240:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004242:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004246:	9c08      	ldr	r4, [sp, #32]
 8004248:	9314      	str	r3, [sp, #80]	; 0x50
 800424a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800424e:	f7fc fca7 	bl	8000ba0 <__aeabi_d2iz>
 8004252:	9015      	str	r0, [sp, #84]	; 0x54
 8004254:	f7fc f98a 	bl	800056c <__aeabi_i2d>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004260:	f7fc f836 	bl	80002d0 <__aeabi_dsub>
 8004264:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004266:	4606      	mov	r6, r0
 8004268:	3330      	adds	r3, #48	; 0x30
 800426a:	f804 3b01 	strb.w	r3, [r4], #1
 800426e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004270:	460f      	mov	r7, r1
 8004272:	429c      	cmp	r4, r3
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	d124      	bne.n	80042c4 <_dtoa_r+0x64c>
 800427a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800427e:	4bb3      	ldr	r3, [pc, #716]	; (800454c <_dtoa_r+0x8d4>)
 8004280:	f7fc f828 	bl	80002d4 <__adddf3>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4630      	mov	r0, r6
 800428a:	4639      	mov	r1, r7
 800428c:	f7fc fc68 	bl	8000b60 <__aeabi_dcmpgt>
 8004290:	2800      	cmp	r0, #0
 8004292:	d162      	bne.n	800435a <_dtoa_r+0x6e2>
 8004294:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004298:	2000      	movs	r0, #0
 800429a:	49ac      	ldr	r1, [pc, #688]	; (800454c <_dtoa_r+0x8d4>)
 800429c:	f7fc f818 	bl	80002d0 <__aeabi_dsub>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4630      	mov	r0, r6
 80042a6:	4639      	mov	r1, r7
 80042a8:	f7fc fc3c 	bl	8000b24 <__aeabi_dcmplt>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	f43f af1d 	beq.w	80040ec <_dtoa_r+0x474>
 80042b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80042b4:	1e7b      	subs	r3, r7, #1
 80042b6:	9314      	str	r3, [sp, #80]	; 0x50
 80042b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80042bc:	2b30      	cmp	r3, #48	; 0x30
 80042be:	d0f8      	beq.n	80042b2 <_dtoa_r+0x63a>
 80042c0:	46c1      	mov	r9, r8
 80042c2:	e03a      	b.n	800433a <_dtoa_r+0x6c2>
 80042c4:	4ba2      	ldr	r3, [pc, #648]	; (8004550 <_dtoa_r+0x8d8>)
 80042c6:	f7fc f9bb 	bl	8000640 <__aeabi_dmul>
 80042ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042ce:	e7bc      	b.n	800424a <_dtoa_r+0x5d2>
 80042d0:	9f08      	ldr	r7, [sp, #32]
 80042d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042da:	f7fc fadb 	bl	8000894 <__aeabi_ddiv>
 80042de:	f7fc fc5f 	bl	8000ba0 <__aeabi_d2iz>
 80042e2:	4604      	mov	r4, r0
 80042e4:	f7fc f942 	bl	800056c <__aeabi_i2d>
 80042e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042ec:	f7fc f9a8 	bl	8000640 <__aeabi_dmul>
 80042f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80042f4:	460b      	mov	r3, r1
 80042f6:	4602      	mov	r2, r0
 80042f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042fc:	f7fb ffe8 	bl	80002d0 <__aeabi_dsub>
 8004300:	f807 6b01 	strb.w	r6, [r7], #1
 8004304:	9e08      	ldr	r6, [sp, #32]
 8004306:	9b02      	ldr	r3, [sp, #8]
 8004308:	1bbe      	subs	r6, r7, r6
 800430a:	42b3      	cmp	r3, r6
 800430c:	d13a      	bne.n	8004384 <_dtoa_r+0x70c>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	f7fb ffdf 	bl	80002d4 <__adddf3>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800431e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004322:	f7fc fc1d 	bl	8000b60 <__aeabi_dcmpgt>
 8004326:	bb58      	cbnz	r0, 8004380 <_dtoa_r+0x708>
 8004328:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800432c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004330:	f7fc fbee 	bl	8000b10 <__aeabi_dcmpeq>
 8004334:	b108      	cbz	r0, 800433a <_dtoa_r+0x6c2>
 8004336:	07e1      	lsls	r1, r4, #31
 8004338:	d422      	bmi.n	8004380 <_dtoa_r+0x708>
 800433a:	4628      	mov	r0, r5
 800433c:	4651      	mov	r1, sl
 800433e:	f000 fae3 	bl	8004908 <_Bfree>
 8004342:	2300      	movs	r3, #0
 8004344:	703b      	strb	r3, [r7, #0]
 8004346:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004348:	f109 0001 	add.w	r0, r9, #1
 800434c:	6018      	str	r0, [r3, #0]
 800434e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004350:	2b00      	cmp	r3, #0
 8004352:	f43f acdf 	beq.w	8003d14 <_dtoa_r+0x9c>
 8004356:	601f      	str	r7, [r3, #0]
 8004358:	e4dc      	b.n	8003d14 <_dtoa_r+0x9c>
 800435a:	4627      	mov	r7, r4
 800435c:	463b      	mov	r3, r7
 800435e:	461f      	mov	r7, r3
 8004360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004364:	2a39      	cmp	r2, #57	; 0x39
 8004366:	d107      	bne.n	8004378 <_dtoa_r+0x700>
 8004368:	9a08      	ldr	r2, [sp, #32]
 800436a:	429a      	cmp	r2, r3
 800436c:	d1f7      	bne.n	800435e <_dtoa_r+0x6e6>
 800436e:	2230      	movs	r2, #48	; 0x30
 8004370:	9908      	ldr	r1, [sp, #32]
 8004372:	f108 0801 	add.w	r8, r8, #1
 8004376:	700a      	strb	r2, [r1, #0]
 8004378:	781a      	ldrb	r2, [r3, #0]
 800437a:	3201      	adds	r2, #1
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	e79f      	b.n	80042c0 <_dtoa_r+0x648>
 8004380:	46c8      	mov	r8, r9
 8004382:	e7eb      	b.n	800435c <_dtoa_r+0x6e4>
 8004384:	2200      	movs	r2, #0
 8004386:	4b72      	ldr	r3, [pc, #456]	; (8004550 <_dtoa_r+0x8d8>)
 8004388:	f7fc f95a 	bl	8000640 <__aeabi_dmul>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004394:	2200      	movs	r2, #0
 8004396:	2300      	movs	r3, #0
 8004398:	f7fc fbba 	bl	8000b10 <__aeabi_dcmpeq>
 800439c:	2800      	cmp	r0, #0
 800439e:	d098      	beq.n	80042d2 <_dtoa_r+0x65a>
 80043a0:	e7cb      	b.n	800433a <_dtoa_r+0x6c2>
 80043a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043a4:	2a00      	cmp	r2, #0
 80043a6:	f000 80cd 	beq.w	8004544 <_dtoa_r+0x8cc>
 80043aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80043ac:	2a01      	cmp	r2, #1
 80043ae:	f300 80af 	bgt.w	8004510 <_dtoa_r+0x898>
 80043b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80043b4:	2a00      	cmp	r2, #0
 80043b6:	f000 80a7 	beq.w	8004508 <_dtoa_r+0x890>
 80043ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80043be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80043c0:	9f06      	ldr	r7, [sp, #24]
 80043c2:	9a06      	ldr	r2, [sp, #24]
 80043c4:	2101      	movs	r1, #1
 80043c6:	441a      	add	r2, r3
 80043c8:	9206      	str	r2, [sp, #24]
 80043ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043cc:	4628      	mov	r0, r5
 80043ce:	441a      	add	r2, r3
 80043d0:	9209      	str	r2, [sp, #36]	; 0x24
 80043d2:	f000 fb53 	bl	8004a7c <__i2b>
 80043d6:	4606      	mov	r6, r0
 80043d8:	2f00      	cmp	r7, #0
 80043da:	dd0c      	ble.n	80043f6 <_dtoa_r+0x77e>
 80043dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043de:	2b00      	cmp	r3, #0
 80043e0:	dd09      	ble.n	80043f6 <_dtoa_r+0x77e>
 80043e2:	42bb      	cmp	r3, r7
 80043e4:	bfa8      	it	ge
 80043e6:	463b      	movge	r3, r7
 80043e8:	9a06      	ldr	r2, [sp, #24]
 80043ea:	1aff      	subs	r7, r7, r3
 80043ec:	1ad2      	subs	r2, r2, r3
 80043ee:	9206      	str	r2, [sp, #24]
 80043f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	9309      	str	r3, [sp, #36]	; 0x24
 80043f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043f8:	b1f3      	cbz	r3, 8004438 <_dtoa_r+0x7c0>
 80043fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80a9 	beq.w	8004554 <_dtoa_r+0x8dc>
 8004402:	2c00      	cmp	r4, #0
 8004404:	dd10      	ble.n	8004428 <_dtoa_r+0x7b0>
 8004406:	4631      	mov	r1, r6
 8004408:	4622      	mov	r2, r4
 800440a:	4628      	mov	r0, r5
 800440c:	f000 fbf0 	bl	8004bf0 <__pow5mult>
 8004410:	4652      	mov	r2, sl
 8004412:	4601      	mov	r1, r0
 8004414:	4606      	mov	r6, r0
 8004416:	4628      	mov	r0, r5
 8004418:	f000 fb46 	bl	8004aa8 <__multiply>
 800441c:	4680      	mov	r8, r0
 800441e:	4651      	mov	r1, sl
 8004420:	4628      	mov	r0, r5
 8004422:	f000 fa71 	bl	8004908 <_Bfree>
 8004426:	46c2      	mov	sl, r8
 8004428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800442a:	1b1a      	subs	r2, r3, r4
 800442c:	d004      	beq.n	8004438 <_dtoa_r+0x7c0>
 800442e:	4651      	mov	r1, sl
 8004430:	4628      	mov	r0, r5
 8004432:	f000 fbdd 	bl	8004bf0 <__pow5mult>
 8004436:	4682      	mov	sl, r0
 8004438:	2101      	movs	r1, #1
 800443a:	4628      	mov	r0, r5
 800443c:	f000 fb1e 	bl	8004a7c <__i2b>
 8004440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004442:	4604      	mov	r4, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	f340 8087 	ble.w	8004558 <_dtoa_r+0x8e0>
 800444a:	461a      	mov	r2, r3
 800444c:	4601      	mov	r1, r0
 800444e:	4628      	mov	r0, r5
 8004450:	f000 fbce 	bl	8004bf0 <__pow5mult>
 8004454:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004456:	4604      	mov	r4, r0
 8004458:	2b01      	cmp	r3, #1
 800445a:	f340 8080 	ble.w	800455e <_dtoa_r+0x8e6>
 800445e:	f04f 0800 	mov.w	r8, #0
 8004462:	6923      	ldr	r3, [r4, #16]
 8004464:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004468:	6918      	ldr	r0, [r3, #16]
 800446a:	f000 fab9 	bl	80049e0 <__hi0bits>
 800446e:	f1c0 0020 	rsb	r0, r0, #32
 8004472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004474:	4418      	add	r0, r3
 8004476:	f010 001f 	ands.w	r0, r0, #31
 800447a:	f000 8092 	beq.w	80045a2 <_dtoa_r+0x92a>
 800447e:	f1c0 0320 	rsb	r3, r0, #32
 8004482:	2b04      	cmp	r3, #4
 8004484:	f340 808a 	ble.w	800459c <_dtoa_r+0x924>
 8004488:	f1c0 001c 	rsb	r0, r0, #28
 800448c:	9b06      	ldr	r3, [sp, #24]
 800448e:	4407      	add	r7, r0
 8004490:	4403      	add	r3, r0
 8004492:	9306      	str	r3, [sp, #24]
 8004494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004496:	4403      	add	r3, r0
 8004498:	9309      	str	r3, [sp, #36]	; 0x24
 800449a:	9b06      	ldr	r3, [sp, #24]
 800449c:	2b00      	cmp	r3, #0
 800449e:	dd05      	ble.n	80044ac <_dtoa_r+0x834>
 80044a0:	4651      	mov	r1, sl
 80044a2:	461a      	mov	r2, r3
 80044a4:	4628      	mov	r0, r5
 80044a6:	f000 fbfd 	bl	8004ca4 <__lshift>
 80044aa:	4682      	mov	sl, r0
 80044ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	dd05      	ble.n	80044be <_dtoa_r+0x846>
 80044b2:	4621      	mov	r1, r4
 80044b4:	461a      	mov	r2, r3
 80044b6:	4628      	mov	r0, r5
 80044b8:	f000 fbf4 	bl	8004ca4 <__lshift>
 80044bc:	4604      	mov	r4, r0
 80044be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d070      	beq.n	80045a6 <_dtoa_r+0x92e>
 80044c4:	4621      	mov	r1, r4
 80044c6:	4650      	mov	r0, sl
 80044c8:	f000 fc58 	bl	8004d7c <__mcmp>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	da6a      	bge.n	80045a6 <_dtoa_r+0x92e>
 80044d0:	2300      	movs	r3, #0
 80044d2:	4651      	mov	r1, sl
 80044d4:	220a      	movs	r2, #10
 80044d6:	4628      	mov	r0, r5
 80044d8:	f000 fa38 	bl	800494c <__multadd>
 80044dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044de:	4682      	mov	sl, r0
 80044e0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8193 	beq.w	8004810 <_dtoa_r+0xb98>
 80044ea:	4631      	mov	r1, r6
 80044ec:	2300      	movs	r3, #0
 80044ee:	220a      	movs	r2, #10
 80044f0:	4628      	mov	r0, r5
 80044f2:	f000 fa2b 	bl	800494c <__multadd>
 80044f6:	f1bb 0f00 	cmp.w	fp, #0
 80044fa:	4606      	mov	r6, r0
 80044fc:	f300 8093 	bgt.w	8004626 <_dtoa_r+0x9ae>
 8004500:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004502:	2b02      	cmp	r3, #2
 8004504:	dc57      	bgt.n	80045b6 <_dtoa_r+0x93e>
 8004506:	e08e      	b.n	8004626 <_dtoa_r+0x9ae>
 8004508:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800450a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800450e:	e756      	b.n	80043be <_dtoa_r+0x746>
 8004510:	9b02      	ldr	r3, [sp, #8]
 8004512:	1e5c      	subs	r4, r3, #1
 8004514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004516:	42a3      	cmp	r3, r4
 8004518:	bfb7      	itett	lt
 800451a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800451c:	1b1c      	subge	r4, r3, r4
 800451e:	1ae2      	sublt	r2, r4, r3
 8004520:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004522:	bfbe      	ittt	lt
 8004524:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004526:	189b      	addlt	r3, r3, r2
 8004528:	930e      	strlt	r3, [sp, #56]	; 0x38
 800452a:	9b02      	ldr	r3, [sp, #8]
 800452c:	bfb8      	it	lt
 800452e:	2400      	movlt	r4, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	bfbb      	ittet	lt
 8004534:	9b06      	ldrlt	r3, [sp, #24]
 8004536:	9a02      	ldrlt	r2, [sp, #8]
 8004538:	9f06      	ldrge	r7, [sp, #24]
 800453a:	1a9f      	sublt	r7, r3, r2
 800453c:	bfac      	ite	ge
 800453e:	9b02      	ldrge	r3, [sp, #8]
 8004540:	2300      	movlt	r3, #0
 8004542:	e73e      	b.n	80043c2 <_dtoa_r+0x74a>
 8004544:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004546:	9f06      	ldr	r7, [sp, #24]
 8004548:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800454a:	e745      	b.n	80043d8 <_dtoa_r+0x760>
 800454c:	3fe00000 	.word	0x3fe00000
 8004550:	40240000 	.word	0x40240000
 8004554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004556:	e76a      	b.n	800442e <_dtoa_r+0x7b6>
 8004558:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800455a:	2b01      	cmp	r3, #1
 800455c:	dc19      	bgt.n	8004592 <_dtoa_r+0x91a>
 800455e:	9b04      	ldr	r3, [sp, #16]
 8004560:	b9bb      	cbnz	r3, 8004592 <_dtoa_r+0x91a>
 8004562:	9b05      	ldr	r3, [sp, #20]
 8004564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004568:	b99b      	cbnz	r3, 8004592 <_dtoa_r+0x91a>
 800456a:	9b05      	ldr	r3, [sp, #20]
 800456c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004570:	0d1b      	lsrs	r3, r3, #20
 8004572:	051b      	lsls	r3, r3, #20
 8004574:	b183      	cbz	r3, 8004598 <_dtoa_r+0x920>
 8004576:	f04f 0801 	mov.w	r8, #1
 800457a:	9b06      	ldr	r3, [sp, #24]
 800457c:	3301      	adds	r3, #1
 800457e:	9306      	str	r3, [sp, #24]
 8004580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004582:	3301      	adds	r3, #1
 8004584:	9309      	str	r3, [sp, #36]	; 0x24
 8004586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004588:	2b00      	cmp	r3, #0
 800458a:	f47f af6a 	bne.w	8004462 <_dtoa_r+0x7ea>
 800458e:	2001      	movs	r0, #1
 8004590:	e76f      	b.n	8004472 <_dtoa_r+0x7fa>
 8004592:	f04f 0800 	mov.w	r8, #0
 8004596:	e7f6      	b.n	8004586 <_dtoa_r+0x90e>
 8004598:	4698      	mov	r8, r3
 800459a:	e7f4      	b.n	8004586 <_dtoa_r+0x90e>
 800459c:	f43f af7d 	beq.w	800449a <_dtoa_r+0x822>
 80045a0:	4618      	mov	r0, r3
 80045a2:	301c      	adds	r0, #28
 80045a4:	e772      	b.n	800448c <_dtoa_r+0x814>
 80045a6:	9b02      	ldr	r3, [sp, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	dc36      	bgt.n	800461a <_dtoa_r+0x9a2>
 80045ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	dd33      	ble.n	800461a <_dtoa_r+0x9a2>
 80045b2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80045b6:	f1bb 0f00 	cmp.w	fp, #0
 80045ba:	d10d      	bne.n	80045d8 <_dtoa_r+0x960>
 80045bc:	4621      	mov	r1, r4
 80045be:	465b      	mov	r3, fp
 80045c0:	2205      	movs	r2, #5
 80045c2:	4628      	mov	r0, r5
 80045c4:	f000 f9c2 	bl	800494c <__multadd>
 80045c8:	4601      	mov	r1, r0
 80045ca:	4604      	mov	r4, r0
 80045cc:	4650      	mov	r0, sl
 80045ce:	f000 fbd5 	bl	8004d7c <__mcmp>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	f73f adb6 	bgt.w	8004144 <_dtoa_r+0x4cc>
 80045d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045da:	9f08      	ldr	r7, [sp, #32]
 80045dc:	ea6f 0903 	mvn.w	r9, r3
 80045e0:	f04f 0800 	mov.w	r8, #0
 80045e4:	4621      	mov	r1, r4
 80045e6:	4628      	mov	r0, r5
 80045e8:	f000 f98e 	bl	8004908 <_Bfree>
 80045ec:	2e00      	cmp	r6, #0
 80045ee:	f43f aea4 	beq.w	800433a <_dtoa_r+0x6c2>
 80045f2:	f1b8 0f00 	cmp.w	r8, #0
 80045f6:	d005      	beq.n	8004604 <_dtoa_r+0x98c>
 80045f8:	45b0      	cmp	r8, r6
 80045fa:	d003      	beq.n	8004604 <_dtoa_r+0x98c>
 80045fc:	4641      	mov	r1, r8
 80045fe:	4628      	mov	r0, r5
 8004600:	f000 f982 	bl	8004908 <_Bfree>
 8004604:	4631      	mov	r1, r6
 8004606:	4628      	mov	r0, r5
 8004608:	f000 f97e 	bl	8004908 <_Bfree>
 800460c:	e695      	b.n	800433a <_dtoa_r+0x6c2>
 800460e:	2400      	movs	r4, #0
 8004610:	4626      	mov	r6, r4
 8004612:	e7e1      	b.n	80045d8 <_dtoa_r+0x960>
 8004614:	46c1      	mov	r9, r8
 8004616:	4626      	mov	r6, r4
 8004618:	e594      	b.n	8004144 <_dtoa_r+0x4cc>
 800461a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800461c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80fc 	beq.w	800481e <_dtoa_r+0xba6>
 8004626:	2f00      	cmp	r7, #0
 8004628:	dd05      	ble.n	8004636 <_dtoa_r+0x9be>
 800462a:	4631      	mov	r1, r6
 800462c:	463a      	mov	r2, r7
 800462e:	4628      	mov	r0, r5
 8004630:	f000 fb38 	bl	8004ca4 <__lshift>
 8004634:	4606      	mov	r6, r0
 8004636:	f1b8 0f00 	cmp.w	r8, #0
 800463a:	d05c      	beq.n	80046f6 <_dtoa_r+0xa7e>
 800463c:	4628      	mov	r0, r5
 800463e:	6871      	ldr	r1, [r6, #4]
 8004640:	f000 f922 	bl	8004888 <_Balloc>
 8004644:	4607      	mov	r7, r0
 8004646:	b928      	cbnz	r0, 8004654 <_dtoa_r+0x9dc>
 8004648:	4602      	mov	r2, r0
 800464a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800464e:	4b7e      	ldr	r3, [pc, #504]	; (8004848 <_dtoa_r+0xbd0>)
 8004650:	f7ff bb26 	b.w	8003ca0 <_dtoa_r+0x28>
 8004654:	6932      	ldr	r2, [r6, #16]
 8004656:	f106 010c 	add.w	r1, r6, #12
 800465a:	3202      	adds	r2, #2
 800465c:	0092      	lsls	r2, r2, #2
 800465e:	300c      	adds	r0, #12
 8004660:	f7fe fde6 	bl	8003230 <memcpy>
 8004664:	2201      	movs	r2, #1
 8004666:	4639      	mov	r1, r7
 8004668:	4628      	mov	r0, r5
 800466a:	f000 fb1b 	bl	8004ca4 <__lshift>
 800466e:	46b0      	mov	r8, r6
 8004670:	4606      	mov	r6, r0
 8004672:	9b08      	ldr	r3, [sp, #32]
 8004674:	3301      	adds	r3, #1
 8004676:	9302      	str	r3, [sp, #8]
 8004678:	9b08      	ldr	r3, [sp, #32]
 800467a:	445b      	add	r3, fp
 800467c:	930a      	str	r3, [sp, #40]	; 0x28
 800467e:	9b04      	ldr	r3, [sp, #16]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	9309      	str	r3, [sp, #36]	; 0x24
 8004686:	9b02      	ldr	r3, [sp, #8]
 8004688:	4621      	mov	r1, r4
 800468a:	4650      	mov	r0, sl
 800468c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8004690:	f7ff fa64 	bl	8003b5c <quorem>
 8004694:	4603      	mov	r3, r0
 8004696:	4641      	mov	r1, r8
 8004698:	3330      	adds	r3, #48	; 0x30
 800469a:	9004      	str	r0, [sp, #16]
 800469c:	4650      	mov	r0, sl
 800469e:	930b      	str	r3, [sp, #44]	; 0x2c
 80046a0:	f000 fb6c 	bl	8004d7c <__mcmp>
 80046a4:	4632      	mov	r2, r6
 80046a6:	9006      	str	r0, [sp, #24]
 80046a8:	4621      	mov	r1, r4
 80046aa:	4628      	mov	r0, r5
 80046ac:	f000 fb82 	bl	8004db4 <__mdiff>
 80046b0:	68c2      	ldr	r2, [r0, #12]
 80046b2:	4607      	mov	r7, r0
 80046b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046b6:	bb02      	cbnz	r2, 80046fa <_dtoa_r+0xa82>
 80046b8:	4601      	mov	r1, r0
 80046ba:	4650      	mov	r0, sl
 80046bc:	f000 fb5e 	bl	8004d7c <__mcmp>
 80046c0:	4602      	mov	r2, r0
 80046c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046c4:	4639      	mov	r1, r7
 80046c6:	4628      	mov	r0, r5
 80046c8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80046cc:	f000 f91c 	bl	8004908 <_Bfree>
 80046d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80046d4:	9f02      	ldr	r7, [sp, #8]
 80046d6:	ea43 0102 	orr.w	r1, r3, r2
 80046da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046dc:	430b      	orrs	r3, r1
 80046de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046e0:	d10d      	bne.n	80046fe <_dtoa_r+0xa86>
 80046e2:	2b39      	cmp	r3, #57	; 0x39
 80046e4:	d027      	beq.n	8004736 <_dtoa_r+0xabe>
 80046e6:	9a06      	ldr	r2, [sp, #24]
 80046e8:	2a00      	cmp	r2, #0
 80046ea:	dd01      	ble.n	80046f0 <_dtoa_r+0xa78>
 80046ec:	9b04      	ldr	r3, [sp, #16]
 80046ee:	3331      	adds	r3, #49	; 0x31
 80046f0:	f88b 3000 	strb.w	r3, [fp]
 80046f4:	e776      	b.n	80045e4 <_dtoa_r+0x96c>
 80046f6:	4630      	mov	r0, r6
 80046f8:	e7b9      	b.n	800466e <_dtoa_r+0x9f6>
 80046fa:	2201      	movs	r2, #1
 80046fc:	e7e2      	b.n	80046c4 <_dtoa_r+0xa4c>
 80046fe:	9906      	ldr	r1, [sp, #24]
 8004700:	2900      	cmp	r1, #0
 8004702:	db04      	blt.n	800470e <_dtoa_r+0xa96>
 8004704:	9822      	ldr	r0, [sp, #136]	; 0x88
 8004706:	4301      	orrs	r1, r0
 8004708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800470a:	4301      	orrs	r1, r0
 800470c:	d120      	bne.n	8004750 <_dtoa_r+0xad8>
 800470e:	2a00      	cmp	r2, #0
 8004710:	ddee      	ble.n	80046f0 <_dtoa_r+0xa78>
 8004712:	4651      	mov	r1, sl
 8004714:	2201      	movs	r2, #1
 8004716:	4628      	mov	r0, r5
 8004718:	9302      	str	r3, [sp, #8]
 800471a:	f000 fac3 	bl	8004ca4 <__lshift>
 800471e:	4621      	mov	r1, r4
 8004720:	4682      	mov	sl, r0
 8004722:	f000 fb2b 	bl	8004d7c <__mcmp>
 8004726:	2800      	cmp	r0, #0
 8004728:	9b02      	ldr	r3, [sp, #8]
 800472a:	dc02      	bgt.n	8004732 <_dtoa_r+0xaba>
 800472c:	d1e0      	bne.n	80046f0 <_dtoa_r+0xa78>
 800472e:	07da      	lsls	r2, r3, #31
 8004730:	d5de      	bpl.n	80046f0 <_dtoa_r+0xa78>
 8004732:	2b39      	cmp	r3, #57	; 0x39
 8004734:	d1da      	bne.n	80046ec <_dtoa_r+0xa74>
 8004736:	2339      	movs	r3, #57	; 0x39
 8004738:	f88b 3000 	strb.w	r3, [fp]
 800473c:	463b      	mov	r3, r7
 800473e:	461f      	mov	r7, r3
 8004740:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004744:	3b01      	subs	r3, #1
 8004746:	2a39      	cmp	r2, #57	; 0x39
 8004748:	d050      	beq.n	80047ec <_dtoa_r+0xb74>
 800474a:	3201      	adds	r2, #1
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	e749      	b.n	80045e4 <_dtoa_r+0x96c>
 8004750:	2a00      	cmp	r2, #0
 8004752:	dd03      	ble.n	800475c <_dtoa_r+0xae4>
 8004754:	2b39      	cmp	r3, #57	; 0x39
 8004756:	d0ee      	beq.n	8004736 <_dtoa_r+0xabe>
 8004758:	3301      	adds	r3, #1
 800475a:	e7c9      	b.n	80046f0 <_dtoa_r+0xa78>
 800475c:	9a02      	ldr	r2, [sp, #8]
 800475e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004760:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004764:	428a      	cmp	r2, r1
 8004766:	d02a      	beq.n	80047be <_dtoa_r+0xb46>
 8004768:	4651      	mov	r1, sl
 800476a:	2300      	movs	r3, #0
 800476c:	220a      	movs	r2, #10
 800476e:	4628      	mov	r0, r5
 8004770:	f000 f8ec 	bl	800494c <__multadd>
 8004774:	45b0      	cmp	r8, r6
 8004776:	4682      	mov	sl, r0
 8004778:	f04f 0300 	mov.w	r3, #0
 800477c:	f04f 020a 	mov.w	r2, #10
 8004780:	4641      	mov	r1, r8
 8004782:	4628      	mov	r0, r5
 8004784:	d107      	bne.n	8004796 <_dtoa_r+0xb1e>
 8004786:	f000 f8e1 	bl	800494c <__multadd>
 800478a:	4680      	mov	r8, r0
 800478c:	4606      	mov	r6, r0
 800478e:	9b02      	ldr	r3, [sp, #8]
 8004790:	3301      	adds	r3, #1
 8004792:	9302      	str	r3, [sp, #8]
 8004794:	e777      	b.n	8004686 <_dtoa_r+0xa0e>
 8004796:	f000 f8d9 	bl	800494c <__multadd>
 800479a:	4631      	mov	r1, r6
 800479c:	4680      	mov	r8, r0
 800479e:	2300      	movs	r3, #0
 80047a0:	220a      	movs	r2, #10
 80047a2:	4628      	mov	r0, r5
 80047a4:	f000 f8d2 	bl	800494c <__multadd>
 80047a8:	4606      	mov	r6, r0
 80047aa:	e7f0      	b.n	800478e <_dtoa_r+0xb16>
 80047ac:	f1bb 0f00 	cmp.w	fp, #0
 80047b0:	bfcc      	ite	gt
 80047b2:	465f      	movgt	r7, fp
 80047b4:	2701      	movle	r7, #1
 80047b6:	f04f 0800 	mov.w	r8, #0
 80047ba:	9a08      	ldr	r2, [sp, #32]
 80047bc:	4417      	add	r7, r2
 80047be:	4651      	mov	r1, sl
 80047c0:	2201      	movs	r2, #1
 80047c2:	4628      	mov	r0, r5
 80047c4:	9302      	str	r3, [sp, #8]
 80047c6:	f000 fa6d 	bl	8004ca4 <__lshift>
 80047ca:	4621      	mov	r1, r4
 80047cc:	4682      	mov	sl, r0
 80047ce:	f000 fad5 	bl	8004d7c <__mcmp>
 80047d2:	2800      	cmp	r0, #0
 80047d4:	dcb2      	bgt.n	800473c <_dtoa_r+0xac4>
 80047d6:	d102      	bne.n	80047de <_dtoa_r+0xb66>
 80047d8:	9b02      	ldr	r3, [sp, #8]
 80047da:	07db      	lsls	r3, r3, #31
 80047dc:	d4ae      	bmi.n	800473c <_dtoa_r+0xac4>
 80047de:	463b      	mov	r3, r7
 80047e0:	461f      	mov	r7, r3
 80047e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047e6:	2a30      	cmp	r2, #48	; 0x30
 80047e8:	d0fa      	beq.n	80047e0 <_dtoa_r+0xb68>
 80047ea:	e6fb      	b.n	80045e4 <_dtoa_r+0x96c>
 80047ec:	9a08      	ldr	r2, [sp, #32]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d1a5      	bne.n	800473e <_dtoa_r+0xac6>
 80047f2:	2331      	movs	r3, #49	; 0x31
 80047f4:	f109 0901 	add.w	r9, r9, #1
 80047f8:	7013      	strb	r3, [r2, #0]
 80047fa:	e6f3      	b.n	80045e4 <_dtoa_r+0x96c>
 80047fc:	4b13      	ldr	r3, [pc, #76]	; (800484c <_dtoa_r+0xbd4>)
 80047fe:	f7ff baa7 	b.w	8003d50 <_dtoa_r+0xd8>
 8004802:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004804:	2b00      	cmp	r3, #0
 8004806:	f47f aa80 	bne.w	8003d0a <_dtoa_r+0x92>
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <_dtoa_r+0xbd8>)
 800480c:	f7ff baa0 	b.w	8003d50 <_dtoa_r+0xd8>
 8004810:	f1bb 0f00 	cmp.w	fp, #0
 8004814:	dc03      	bgt.n	800481e <_dtoa_r+0xba6>
 8004816:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004818:	2b02      	cmp	r3, #2
 800481a:	f73f aecc 	bgt.w	80045b6 <_dtoa_r+0x93e>
 800481e:	9f08      	ldr	r7, [sp, #32]
 8004820:	4621      	mov	r1, r4
 8004822:	4650      	mov	r0, sl
 8004824:	f7ff f99a 	bl	8003b5c <quorem>
 8004828:	9a08      	ldr	r2, [sp, #32]
 800482a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800482e:	f807 3b01 	strb.w	r3, [r7], #1
 8004832:	1aba      	subs	r2, r7, r2
 8004834:	4593      	cmp	fp, r2
 8004836:	ddb9      	ble.n	80047ac <_dtoa_r+0xb34>
 8004838:	4651      	mov	r1, sl
 800483a:	2300      	movs	r3, #0
 800483c:	220a      	movs	r2, #10
 800483e:	4628      	mov	r0, r5
 8004840:	f000 f884 	bl	800494c <__multadd>
 8004844:	4682      	mov	sl, r0
 8004846:	e7eb      	b.n	8004820 <_dtoa_r+0xba8>
 8004848:	0800608b 	.word	0x0800608b
 800484c:	08005fe4 	.word	0x08005fe4
 8004850:	08006008 	.word	0x08006008

08004854 <_localeconv_r>:
 8004854:	4800      	ldr	r0, [pc, #0]	; (8004858 <_localeconv_r+0x4>)
 8004856:	4770      	bx	lr
 8004858:	20000260 	.word	0x20000260

0800485c <malloc>:
 800485c:	4b02      	ldr	r3, [pc, #8]	; (8004868 <malloc+0xc>)
 800485e:	4601      	mov	r1, r0
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	f000 bbed 	b.w	8005040 <_malloc_r>
 8004866:	bf00      	nop
 8004868:	2000010c 	.word	0x2000010c

0800486c <memchr>:
 800486c:	4603      	mov	r3, r0
 800486e:	b510      	push	{r4, lr}
 8004870:	b2c9      	uxtb	r1, r1
 8004872:	4402      	add	r2, r0
 8004874:	4293      	cmp	r3, r2
 8004876:	4618      	mov	r0, r3
 8004878:	d101      	bne.n	800487e <memchr+0x12>
 800487a:	2000      	movs	r0, #0
 800487c:	e003      	b.n	8004886 <memchr+0x1a>
 800487e:	7804      	ldrb	r4, [r0, #0]
 8004880:	3301      	adds	r3, #1
 8004882:	428c      	cmp	r4, r1
 8004884:	d1f6      	bne.n	8004874 <memchr+0x8>
 8004886:	bd10      	pop	{r4, pc}

08004888 <_Balloc>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800488c:	4604      	mov	r4, r0
 800488e:	460d      	mov	r5, r1
 8004890:	b976      	cbnz	r6, 80048b0 <_Balloc+0x28>
 8004892:	2010      	movs	r0, #16
 8004894:	f7ff ffe2 	bl	800485c <malloc>
 8004898:	4602      	mov	r2, r0
 800489a:	6260      	str	r0, [r4, #36]	; 0x24
 800489c:	b920      	cbnz	r0, 80048a8 <_Balloc+0x20>
 800489e:	2166      	movs	r1, #102	; 0x66
 80048a0:	4b17      	ldr	r3, [pc, #92]	; (8004900 <_Balloc+0x78>)
 80048a2:	4818      	ldr	r0, [pc, #96]	; (8004904 <_Balloc+0x7c>)
 80048a4:	f000 fd92 	bl	80053cc <__assert_func>
 80048a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80048ac:	6006      	str	r6, [r0, #0]
 80048ae:	60c6      	str	r6, [r0, #12]
 80048b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80048b2:	68f3      	ldr	r3, [r6, #12]
 80048b4:	b183      	cbz	r3, 80048d8 <_Balloc+0x50>
 80048b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80048be:	b9b8      	cbnz	r0, 80048f0 <_Balloc+0x68>
 80048c0:	2101      	movs	r1, #1
 80048c2:	fa01 f605 	lsl.w	r6, r1, r5
 80048c6:	1d72      	adds	r2, r6, #5
 80048c8:	4620      	mov	r0, r4
 80048ca:	0092      	lsls	r2, r2, #2
 80048cc:	f000 fb5e 	bl	8004f8c <_calloc_r>
 80048d0:	b160      	cbz	r0, 80048ec <_Balloc+0x64>
 80048d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80048d6:	e00e      	b.n	80048f6 <_Balloc+0x6e>
 80048d8:	2221      	movs	r2, #33	; 0x21
 80048da:	2104      	movs	r1, #4
 80048dc:	4620      	mov	r0, r4
 80048de:	f000 fb55 	bl	8004f8c <_calloc_r>
 80048e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048e4:	60f0      	str	r0, [r6, #12]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e4      	bne.n	80048b6 <_Balloc+0x2e>
 80048ec:	2000      	movs	r0, #0
 80048ee:	bd70      	pop	{r4, r5, r6, pc}
 80048f0:	6802      	ldr	r2, [r0, #0]
 80048f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80048f6:	2300      	movs	r3, #0
 80048f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80048fc:	e7f7      	b.n	80048ee <_Balloc+0x66>
 80048fe:	bf00      	nop
 8004900:	08006015 	.word	0x08006015
 8004904:	0800609c 	.word	0x0800609c

08004908 <_Bfree>:
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800490c:	4605      	mov	r5, r0
 800490e:	460c      	mov	r4, r1
 8004910:	b976      	cbnz	r6, 8004930 <_Bfree+0x28>
 8004912:	2010      	movs	r0, #16
 8004914:	f7ff ffa2 	bl	800485c <malloc>
 8004918:	4602      	mov	r2, r0
 800491a:	6268      	str	r0, [r5, #36]	; 0x24
 800491c:	b920      	cbnz	r0, 8004928 <_Bfree+0x20>
 800491e:	218a      	movs	r1, #138	; 0x8a
 8004920:	4b08      	ldr	r3, [pc, #32]	; (8004944 <_Bfree+0x3c>)
 8004922:	4809      	ldr	r0, [pc, #36]	; (8004948 <_Bfree+0x40>)
 8004924:	f000 fd52 	bl	80053cc <__assert_func>
 8004928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800492c:	6006      	str	r6, [r0, #0]
 800492e:	60c6      	str	r6, [r0, #12]
 8004930:	b13c      	cbz	r4, 8004942 <_Bfree+0x3a>
 8004932:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004934:	6862      	ldr	r2, [r4, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800493c:	6021      	str	r1, [r4, #0]
 800493e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004942:	bd70      	pop	{r4, r5, r6, pc}
 8004944:	08006015 	.word	0x08006015
 8004948:	0800609c 	.word	0x0800609c

0800494c <__multadd>:
 800494c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004950:	4698      	mov	r8, r3
 8004952:	460c      	mov	r4, r1
 8004954:	2300      	movs	r3, #0
 8004956:	690e      	ldr	r6, [r1, #16]
 8004958:	4607      	mov	r7, r0
 800495a:	f101 0014 	add.w	r0, r1, #20
 800495e:	6805      	ldr	r5, [r0, #0]
 8004960:	3301      	adds	r3, #1
 8004962:	b2a9      	uxth	r1, r5
 8004964:	fb02 8101 	mla	r1, r2, r1, r8
 8004968:	0c2d      	lsrs	r5, r5, #16
 800496a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800496e:	fb02 c505 	mla	r5, r2, r5, ip
 8004972:	b289      	uxth	r1, r1
 8004974:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004978:	429e      	cmp	r6, r3
 800497a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800497e:	f840 1b04 	str.w	r1, [r0], #4
 8004982:	dcec      	bgt.n	800495e <__multadd+0x12>
 8004984:	f1b8 0f00 	cmp.w	r8, #0
 8004988:	d022      	beq.n	80049d0 <__multadd+0x84>
 800498a:	68a3      	ldr	r3, [r4, #8]
 800498c:	42b3      	cmp	r3, r6
 800498e:	dc19      	bgt.n	80049c4 <__multadd+0x78>
 8004990:	6861      	ldr	r1, [r4, #4]
 8004992:	4638      	mov	r0, r7
 8004994:	3101      	adds	r1, #1
 8004996:	f7ff ff77 	bl	8004888 <_Balloc>
 800499a:	4605      	mov	r5, r0
 800499c:	b928      	cbnz	r0, 80049aa <__multadd+0x5e>
 800499e:	4602      	mov	r2, r0
 80049a0:	21b5      	movs	r1, #181	; 0xb5
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <__multadd+0x8c>)
 80049a4:	480d      	ldr	r0, [pc, #52]	; (80049dc <__multadd+0x90>)
 80049a6:	f000 fd11 	bl	80053cc <__assert_func>
 80049aa:	6922      	ldr	r2, [r4, #16]
 80049ac:	f104 010c 	add.w	r1, r4, #12
 80049b0:	3202      	adds	r2, #2
 80049b2:	0092      	lsls	r2, r2, #2
 80049b4:	300c      	adds	r0, #12
 80049b6:	f7fe fc3b 	bl	8003230 <memcpy>
 80049ba:	4621      	mov	r1, r4
 80049bc:	4638      	mov	r0, r7
 80049be:	f7ff ffa3 	bl	8004908 <_Bfree>
 80049c2:	462c      	mov	r4, r5
 80049c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80049c8:	3601      	adds	r6, #1
 80049ca:	f8c3 8014 	str.w	r8, [r3, #20]
 80049ce:	6126      	str	r6, [r4, #16]
 80049d0:	4620      	mov	r0, r4
 80049d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049d6:	bf00      	nop
 80049d8:	0800608b 	.word	0x0800608b
 80049dc:	0800609c 	.word	0x0800609c

080049e0 <__hi0bits>:
 80049e0:	0c02      	lsrs	r2, r0, #16
 80049e2:	0412      	lsls	r2, r2, #16
 80049e4:	4603      	mov	r3, r0
 80049e6:	b9ca      	cbnz	r2, 8004a1c <__hi0bits+0x3c>
 80049e8:	0403      	lsls	r3, r0, #16
 80049ea:	2010      	movs	r0, #16
 80049ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80049f0:	bf04      	itt	eq
 80049f2:	021b      	lsleq	r3, r3, #8
 80049f4:	3008      	addeq	r0, #8
 80049f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80049fa:	bf04      	itt	eq
 80049fc:	011b      	lsleq	r3, r3, #4
 80049fe:	3004      	addeq	r0, #4
 8004a00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004a04:	bf04      	itt	eq
 8004a06:	009b      	lsleq	r3, r3, #2
 8004a08:	3002      	addeq	r0, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	db05      	blt.n	8004a1a <__hi0bits+0x3a>
 8004a0e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004a12:	f100 0001 	add.w	r0, r0, #1
 8004a16:	bf08      	it	eq
 8004a18:	2020      	moveq	r0, #32
 8004a1a:	4770      	bx	lr
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e7e5      	b.n	80049ec <__hi0bits+0xc>

08004a20 <__lo0bits>:
 8004a20:	6803      	ldr	r3, [r0, #0]
 8004a22:	4602      	mov	r2, r0
 8004a24:	f013 0007 	ands.w	r0, r3, #7
 8004a28:	d00b      	beq.n	8004a42 <__lo0bits+0x22>
 8004a2a:	07d9      	lsls	r1, r3, #31
 8004a2c:	d422      	bmi.n	8004a74 <__lo0bits+0x54>
 8004a2e:	0798      	lsls	r0, r3, #30
 8004a30:	bf49      	itett	mi
 8004a32:	085b      	lsrmi	r3, r3, #1
 8004a34:	089b      	lsrpl	r3, r3, #2
 8004a36:	2001      	movmi	r0, #1
 8004a38:	6013      	strmi	r3, [r2, #0]
 8004a3a:	bf5c      	itt	pl
 8004a3c:	2002      	movpl	r0, #2
 8004a3e:	6013      	strpl	r3, [r2, #0]
 8004a40:	4770      	bx	lr
 8004a42:	b299      	uxth	r1, r3
 8004a44:	b909      	cbnz	r1, 8004a4a <__lo0bits+0x2a>
 8004a46:	2010      	movs	r0, #16
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004a4e:	bf04      	itt	eq
 8004a50:	0a1b      	lsreq	r3, r3, #8
 8004a52:	3008      	addeq	r0, #8
 8004a54:	0719      	lsls	r1, r3, #28
 8004a56:	bf04      	itt	eq
 8004a58:	091b      	lsreq	r3, r3, #4
 8004a5a:	3004      	addeq	r0, #4
 8004a5c:	0799      	lsls	r1, r3, #30
 8004a5e:	bf04      	itt	eq
 8004a60:	089b      	lsreq	r3, r3, #2
 8004a62:	3002      	addeq	r0, #2
 8004a64:	07d9      	lsls	r1, r3, #31
 8004a66:	d403      	bmi.n	8004a70 <__lo0bits+0x50>
 8004a68:	085b      	lsrs	r3, r3, #1
 8004a6a:	f100 0001 	add.w	r0, r0, #1
 8004a6e:	d003      	beq.n	8004a78 <__lo0bits+0x58>
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	4770      	bx	lr
 8004a74:	2000      	movs	r0, #0
 8004a76:	4770      	bx	lr
 8004a78:	2020      	movs	r0, #32
 8004a7a:	4770      	bx	lr

08004a7c <__i2b>:
 8004a7c:	b510      	push	{r4, lr}
 8004a7e:	460c      	mov	r4, r1
 8004a80:	2101      	movs	r1, #1
 8004a82:	f7ff ff01 	bl	8004888 <_Balloc>
 8004a86:	4602      	mov	r2, r0
 8004a88:	b928      	cbnz	r0, 8004a96 <__i2b+0x1a>
 8004a8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004a8e:	4b04      	ldr	r3, [pc, #16]	; (8004aa0 <__i2b+0x24>)
 8004a90:	4804      	ldr	r0, [pc, #16]	; (8004aa4 <__i2b+0x28>)
 8004a92:	f000 fc9b 	bl	80053cc <__assert_func>
 8004a96:	2301      	movs	r3, #1
 8004a98:	6144      	str	r4, [r0, #20]
 8004a9a:	6103      	str	r3, [r0, #16]
 8004a9c:	bd10      	pop	{r4, pc}
 8004a9e:	bf00      	nop
 8004aa0:	0800608b 	.word	0x0800608b
 8004aa4:	0800609c 	.word	0x0800609c

08004aa8 <__multiply>:
 8004aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aac:	4614      	mov	r4, r2
 8004aae:	690a      	ldr	r2, [r1, #16]
 8004ab0:	6923      	ldr	r3, [r4, #16]
 8004ab2:	460d      	mov	r5, r1
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	bfbe      	ittt	lt
 8004ab8:	460b      	movlt	r3, r1
 8004aba:	4625      	movlt	r5, r4
 8004abc:	461c      	movlt	r4, r3
 8004abe:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004ac2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004ac6:	68ab      	ldr	r3, [r5, #8]
 8004ac8:	6869      	ldr	r1, [r5, #4]
 8004aca:	eb0a 0709 	add.w	r7, sl, r9
 8004ace:	42bb      	cmp	r3, r7
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	bfb8      	it	lt
 8004ad4:	3101      	addlt	r1, #1
 8004ad6:	f7ff fed7 	bl	8004888 <_Balloc>
 8004ada:	b930      	cbnz	r0, 8004aea <__multiply+0x42>
 8004adc:	4602      	mov	r2, r0
 8004ade:	f240 115d 	movw	r1, #349	; 0x15d
 8004ae2:	4b41      	ldr	r3, [pc, #260]	; (8004be8 <__multiply+0x140>)
 8004ae4:	4841      	ldr	r0, [pc, #260]	; (8004bec <__multiply+0x144>)
 8004ae6:	f000 fc71 	bl	80053cc <__assert_func>
 8004aea:	f100 0614 	add.w	r6, r0, #20
 8004aee:	4633      	mov	r3, r6
 8004af0:	2200      	movs	r2, #0
 8004af2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004af6:	4543      	cmp	r3, r8
 8004af8:	d31e      	bcc.n	8004b38 <__multiply+0x90>
 8004afa:	f105 0c14 	add.w	ip, r5, #20
 8004afe:	f104 0314 	add.w	r3, r4, #20
 8004b02:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004b06:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004b0a:	9202      	str	r2, [sp, #8]
 8004b0c:	ebac 0205 	sub.w	r2, ip, r5
 8004b10:	3a15      	subs	r2, #21
 8004b12:	f022 0203 	bic.w	r2, r2, #3
 8004b16:	3204      	adds	r2, #4
 8004b18:	f105 0115 	add.w	r1, r5, #21
 8004b1c:	458c      	cmp	ip, r1
 8004b1e:	bf38      	it	cc
 8004b20:	2204      	movcc	r2, #4
 8004b22:	9201      	str	r2, [sp, #4]
 8004b24:	9a02      	ldr	r2, [sp, #8]
 8004b26:	9303      	str	r3, [sp, #12]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d808      	bhi.n	8004b3e <__multiply+0x96>
 8004b2c:	2f00      	cmp	r7, #0
 8004b2e:	dc55      	bgt.n	8004bdc <__multiply+0x134>
 8004b30:	6107      	str	r7, [r0, #16]
 8004b32:	b005      	add	sp, #20
 8004b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b38:	f843 2b04 	str.w	r2, [r3], #4
 8004b3c:	e7db      	b.n	8004af6 <__multiply+0x4e>
 8004b3e:	f8b3 a000 	ldrh.w	sl, [r3]
 8004b42:	f1ba 0f00 	cmp.w	sl, #0
 8004b46:	d020      	beq.n	8004b8a <__multiply+0xe2>
 8004b48:	46b1      	mov	r9, r6
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f105 0e14 	add.w	lr, r5, #20
 8004b50:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004b54:	f8d9 b000 	ldr.w	fp, [r9]
 8004b58:	b2a1      	uxth	r1, r4
 8004b5a:	fa1f fb8b 	uxth.w	fp, fp
 8004b5e:	fb0a b101 	mla	r1, sl, r1, fp
 8004b62:	4411      	add	r1, r2
 8004b64:	f8d9 2000 	ldr.w	r2, [r9]
 8004b68:	0c24      	lsrs	r4, r4, #16
 8004b6a:	0c12      	lsrs	r2, r2, #16
 8004b6c:	fb0a 2404 	mla	r4, sl, r4, r2
 8004b70:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8004b74:	b289      	uxth	r1, r1
 8004b76:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004b7a:	45f4      	cmp	ip, lr
 8004b7c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8004b80:	f849 1b04 	str.w	r1, [r9], #4
 8004b84:	d8e4      	bhi.n	8004b50 <__multiply+0xa8>
 8004b86:	9901      	ldr	r1, [sp, #4]
 8004b88:	5072      	str	r2, [r6, r1]
 8004b8a:	9a03      	ldr	r2, [sp, #12]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004b92:	f1b9 0f00 	cmp.w	r9, #0
 8004b96:	d01f      	beq.n	8004bd8 <__multiply+0x130>
 8004b98:	46b6      	mov	lr, r6
 8004b9a:	f04f 0a00 	mov.w	sl, #0
 8004b9e:	6834      	ldr	r4, [r6, #0]
 8004ba0:	f105 0114 	add.w	r1, r5, #20
 8004ba4:	880a      	ldrh	r2, [r1, #0]
 8004ba6:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004baa:	b2a4      	uxth	r4, r4
 8004bac:	fb09 b202 	mla	r2, r9, r2, fp
 8004bb0:	4492      	add	sl, r2
 8004bb2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004bb6:	f84e 4b04 	str.w	r4, [lr], #4
 8004bba:	f851 4b04 	ldr.w	r4, [r1], #4
 8004bbe:	f8be 2000 	ldrh.w	r2, [lr]
 8004bc2:	0c24      	lsrs	r4, r4, #16
 8004bc4:	fb09 2404 	mla	r4, r9, r4, r2
 8004bc8:	458c      	cmp	ip, r1
 8004bca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004bce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004bd2:	d8e7      	bhi.n	8004ba4 <__multiply+0xfc>
 8004bd4:	9a01      	ldr	r2, [sp, #4]
 8004bd6:	50b4      	str	r4, [r6, r2]
 8004bd8:	3604      	adds	r6, #4
 8004bda:	e7a3      	b.n	8004b24 <__multiply+0x7c>
 8004bdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1a5      	bne.n	8004b30 <__multiply+0x88>
 8004be4:	3f01      	subs	r7, #1
 8004be6:	e7a1      	b.n	8004b2c <__multiply+0x84>
 8004be8:	0800608b 	.word	0x0800608b
 8004bec:	0800609c 	.word	0x0800609c

08004bf0 <__pow5mult>:
 8004bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bf4:	4615      	mov	r5, r2
 8004bf6:	f012 0203 	ands.w	r2, r2, #3
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	460f      	mov	r7, r1
 8004bfe:	d007      	beq.n	8004c10 <__pow5mult+0x20>
 8004c00:	4c25      	ldr	r4, [pc, #148]	; (8004c98 <__pow5mult+0xa8>)
 8004c02:	3a01      	subs	r2, #1
 8004c04:	2300      	movs	r3, #0
 8004c06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004c0a:	f7ff fe9f 	bl	800494c <__multadd>
 8004c0e:	4607      	mov	r7, r0
 8004c10:	10ad      	asrs	r5, r5, #2
 8004c12:	d03d      	beq.n	8004c90 <__pow5mult+0xa0>
 8004c14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004c16:	b97c      	cbnz	r4, 8004c38 <__pow5mult+0x48>
 8004c18:	2010      	movs	r0, #16
 8004c1a:	f7ff fe1f 	bl	800485c <malloc>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	6270      	str	r0, [r6, #36]	; 0x24
 8004c22:	b928      	cbnz	r0, 8004c30 <__pow5mult+0x40>
 8004c24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004c28:	4b1c      	ldr	r3, [pc, #112]	; (8004c9c <__pow5mult+0xac>)
 8004c2a:	481d      	ldr	r0, [pc, #116]	; (8004ca0 <__pow5mult+0xb0>)
 8004c2c:	f000 fbce 	bl	80053cc <__assert_func>
 8004c30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c34:	6004      	str	r4, [r0, #0]
 8004c36:	60c4      	str	r4, [r0, #12]
 8004c38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004c3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c40:	b94c      	cbnz	r4, 8004c56 <__pow5mult+0x66>
 8004c42:	f240 2171 	movw	r1, #625	; 0x271
 8004c46:	4630      	mov	r0, r6
 8004c48:	f7ff ff18 	bl	8004a7c <__i2b>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4604      	mov	r4, r0
 8004c50:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c54:	6003      	str	r3, [r0, #0]
 8004c56:	f04f 0900 	mov.w	r9, #0
 8004c5a:	07eb      	lsls	r3, r5, #31
 8004c5c:	d50a      	bpl.n	8004c74 <__pow5mult+0x84>
 8004c5e:	4639      	mov	r1, r7
 8004c60:	4622      	mov	r2, r4
 8004c62:	4630      	mov	r0, r6
 8004c64:	f7ff ff20 	bl	8004aa8 <__multiply>
 8004c68:	4680      	mov	r8, r0
 8004c6a:	4639      	mov	r1, r7
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	f7ff fe4b 	bl	8004908 <_Bfree>
 8004c72:	4647      	mov	r7, r8
 8004c74:	106d      	asrs	r5, r5, #1
 8004c76:	d00b      	beq.n	8004c90 <__pow5mult+0xa0>
 8004c78:	6820      	ldr	r0, [r4, #0]
 8004c7a:	b938      	cbnz	r0, 8004c8c <__pow5mult+0x9c>
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	4621      	mov	r1, r4
 8004c80:	4630      	mov	r0, r6
 8004c82:	f7ff ff11 	bl	8004aa8 <__multiply>
 8004c86:	6020      	str	r0, [r4, #0]
 8004c88:	f8c0 9000 	str.w	r9, [r0]
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	e7e4      	b.n	8004c5a <__pow5mult+0x6a>
 8004c90:	4638      	mov	r0, r7
 8004c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c96:	bf00      	nop
 8004c98:	080061f0 	.word	0x080061f0
 8004c9c:	08006015 	.word	0x08006015
 8004ca0:	0800609c 	.word	0x0800609c

08004ca4 <__lshift>:
 8004ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca8:	460c      	mov	r4, r1
 8004caa:	4607      	mov	r7, r0
 8004cac:	4691      	mov	r9, r2
 8004cae:	6923      	ldr	r3, [r4, #16]
 8004cb0:	6849      	ldr	r1, [r1, #4]
 8004cb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004cb6:	68a3      	ldr	r3, [r4, #8]
 8004cb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004cbc:	f108 0601 	add.w	r6, r8, #1
 8004cc0:	42b3      	cmp	r3, r6
 8004cc2:	db0b      	blt.n	8004cdc <__lshift+0x38>
 8004cc4:	4638      	mov	r0, r7
 8004cc6:	f7ff fddf 	bl	8004888 <_Balloc>
 8004cca:	4605      	mov	r5, r0
 8004ccc:	b948      	cbnz	r0, 8004ce2 <__lshift+0x3e>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004cd4:	4b27      	ldr	r3, [pc, #156]	; (8004d74 <__lshift+0xd0>)
 8004cd6:	4828      	ldr	r0, [pc, #160]	; (8004d78 <__lshift+0xd4>)
 8004cd8:	f000 fb78 	bl	80053cc <__assert_func>
 8004cdc:	3101      	adds	r1, #1
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	e7ee      	b.n	8004cc0 <__lshift+0x1c>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f100 0114 	add.w	r1, r0, #20
 8004ce8:	f100 0210 	add.w	r2, r0, #16
 8004cec:	4618      	mov	r0, r3
 8004cee:	4553      	cmp	r3, sl
 8004cf0:	db33      	blt.n	8004d5a <__lshift+0xb6>
 8004cf2:	6920      	ldr	r0, [r4, #16]
 8004cf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004cf8:	f104 0314 	add.w	r3, r4, #20
 8004cfc:	f019 091f 	ands.w	r9, r9, #31
 8004d00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004d04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004d08:	d02b      	beq.n	8004d62 <__lshift+0xbe>
 8004d0a:	468a      	mov	sl, r1
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f1c9 0e20 	rsb	lr, r9, #32
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	fa00 f009 	lsl.w	r0, r0, r9
 8004d18:	4302      	orrs	r2, r0
 8004d1a:	f84a 2b04 	str.w	r2, [sl], #4
 8004d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d22:	459c      	cmp	ip, r3
 8004d24:	fa22 f20e 	lsr.w	r2, r2, lr
 8004d28:	d8f3      	bhi.n	8004d12 <__lshift+0x6e>
 8004d2a:	ebac 0304 	sub.w	r3, ip, r4
 8004d2e:	3b15      	subs	r3, #21
 8004d30:	f023 0303 	bic.w	r3, r3, #3
 8004d34:	3304      	adds	r3, #4
 8004d36:	f104 0015 	add.w	r0, r4, #21
 8004d3a:	4584      	cmp	ip, r0
 8004d3c:	bf38      	it	cc
 8004d3e:	2304      	movcc	r3, #4
 8004d40:	50ca      	str	r2, [r1, r3]
 8004d42:	b10a      	cbz	r2, 8004d48 <__lshift+0xa4>
 8004d44:	f108 0602 	add.w	r6, r8, #2
 8004d48:	3e01      	subs	r6, #1
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	4621      	mov	r1, r4
 8004d4e:	612e      	str	r6, [r5, #16]
 8004d50:	f7ff fdda 	bl	8004908 <_Bfree>
 8004d54:	4628      	mov	r0, r5
 8004d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004d5e:	3301      	adds	r3, #1
 8004d60:	e7c5      	b.n	8004cee <__lshift+0x4a>
 8004d62:	3904      	subs	r1, #4
 8004d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d68:	459c      	cmp	ip, r3
 8004d6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8004d6e:	d8f9      	bhi.n	8004d64 <__lshift+0xc0>
 8004d70:	e7ea      	b.n	8004d48 <__lshift+0xa4>
 8004d72:	bf00      	nop
 8004d74:	0800608b 	.word	0x0800608b
 8004d78:	0800609c 	.word	0x0800609c

08004d7c <__mcmp>:
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	690a      	ldr	r2, [r1, #16]
 8004d80:	6900      	ldr	r0, [r0, #16]
 8004d82:	b530      	push	{r4, r5, lr}
 8004d84:	1a80      	subs	r0, r0, r2
 8004d86:	d10d      	bne.n	8004da4 <__mcmp+0x28>
 8004d88:	3314      	adds	r3, #20
 8004d8a:	3114      	adds	r1, #20
 8004d8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004d90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004d94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004d98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004d9c:	4295      	cmp	r5, r2
 8004d9e:	d002      	beq.n	8004da6 <__mcmp+0x2a>
 8004da0:	d304      	bcc.n	8004dac <__mcmp+0x30>
 8004da2:	2001      	movs	r0, #1
 8004da4:	bd30      	pop	{r4, r5, pc}
 8004da6:	42a3      	cmp	r3, r4
 8004da8:	d3f4      	bcc.n	8004d94 <__mcmp+0x18>
 8004daa:	e7fb      	b.n	8004da4 <__mcmp+0x28>
 8004dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004db0:	e7f8      	b.n	8004da4 <__mcmp+0x28>
	...

08004db4 <__mdiff>:
 8004db4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db8:	460c      	mov	r4, r1
 8004dba:	4606      	mov	r6, r0
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	4692      	mov	sl, r2
 8004dc2:	f7ff ffdb 	bl	8004d7c <__mcmp>
 8004dc6:	1e05      	subs	r5, r0, #0
 8004dc8:	d111      	bne.n	8004dee <__mdiff+0x3a>
 8004dca:	4629      	mov	r1, r5
 8004dcc:	4630      	mov	r0, r6
 8004dce:	f7ff fd5b 	bl	8004888 <_Balloc>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	b928      	cbnz	r0, 8004de2 <__mdiff+0x2e>
 8004dd6:	f240 2132 	movw	r1, #562	; 0x232
 8004dda:	4b3c      	ldr	r3, [pc, #240]	; (8004ecc <__mdiff+0x118>)
 8004ddc:	483c      	ldr	r0, [pc, #240]	; (8004ed0 <__mdiff+0x11c>)
 8004dde:	f000 faf5 	bl	80053cc <__assert_func>
 8004de2:	2301      	movs	r3, #1
 8004de4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004de8:	4610      	mov	r0, r2
 8004dea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dee:	bfa4      	itt	ge
 8004df0:	4653      	movge	r3, sl
 8004df2:	46a2      	movge	sl, r4
 8004df4:	4630      	mov	r0, r6
 8004df6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004dfa:	bfa6      	itte	ge
 8004dfc:	461c      	movge	r4, r3
 8004dfe:	2500      	movge	r5, #0
 8004e00:	2501      	movlt	r5, #1
 8004e02:	f7ff fd41 	bl	8004888 <_Balloc>
 8004e06:	4602      	mov	r2, r0
 8004e08:	b918      	cbnz	r0, 8004e12 <__mdiff+0x5e>
 8004e0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004e0e:	4b2f      	ldr	r3, [pc, #188]	; (8004ecc <__mdiff+0x118>)
 8004e10:	e7e4      	b.n	8004ddc <__mdiff+0x28>
 8004e12:	f100 0814 	add.w	r8, r0, #20
 8004e16:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004e1a:	60c5      	str	r5, [r0, #12]
 8004e1c:	f04f 0c00 	mov.w	ip, #0
 8004e20:	f10a 0514 	add.w	r5, sl, #20
 8004e24:	f10a 0010 	add.w	r0, sl, #16
 8004e28:	46c2      	mov	sl, r8
 8004e2a:	6926      	ldr	r6, [r4, #16]
 8004e2c:	f104 0914 	add.w	r9, r4, #20
 8004e30:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004e34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004e38:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004e3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004e40:	fa1f f18b 	uxth.w	r1, fp
 8004e44:	4461      	add	r1, ip
 8004e46:	fa1f fc83 	uxth.w	ip, r3
 8004e4a:	0c1b      	lsrs	r3, r3, #16
 8004e4c:	eba1 010c 	sub.w	r1, r1, ip
 8004e50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004e54:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004e58:	b289      	uxth	r1, r1
 8004e5a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004e5e:	454e      	cmp	r6, r9
 8004e60:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004e64:	f84a 3b04 	str.w	r3, [sl], #4
 8004e68:	d8e6      	bhi.n	8004e38 <__mdiff+0x84>
 8004e6a:	1b33      	subs	r3, r6, r4
 8004e6c:	3b15      	subs	r3, #21
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	3415      	adds	r4, #21
 8004e74:	3304      	adds	r3, #4
 8004e76:	42a6      	cmp	r6, r4
 8004e78:	bf38      	it	cc
 8004e7a:	2304      	movcc	r3, #4
 8004e7c:	441d      	add	r5, r3
 8004e7e:	4443      	add	r3, r8
 8004e80:	461e      	mov	r6, r3
 8004e82:	462c      	mov	r4, r5
 8004e84:	4574      	cmp	r4, lr
 8004e86:	d30e      	bcc.n	8004ea6 <__mdiff+0xf2>
 8004e88:	f10e 0103 	add.w	r1, lr, #3
 8004e8c:	1b49      	subs	r1, r1, r5
 8004e8e:	f021 0103 	bic.w	r1, r1, #3
 8004e92:	3d03      	subs	r5, #3
 8004e94:	45ae      	cmp	lr, r5
 8004e96:	bf38      	it	cc
 8004e98:	2100      	movcc	r1, #0
 8004e9a:	4419      	add	r1, r3
 8004e9c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004ea0:	b18b      	cbz	r3, 8004ec6 <__mdiff+0x112>
 8004ea2:	6117      	str	r7, [r2, #16]
 8004ea4:	e7a0      	b.n	8004de8 <__mdiff+0x34>
 8004ea6:	f854 8b04 	ldr.w	r8, [r4], #4
 8004eaa:	fa1f f188 	uxth.w	r1, r8
 8004eae:	4461      	add	r1, ip
 8004eb0:	1408      	asrs	r0, r1, #16
 8004eb2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004eb6:	b289      	uxth	r1, r1
 8004eb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004ebc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004ec0:	f846 1b04 	str.w	r1, [r6], #4
 8004ec4:	e7de      	b.n	8004e84 <__mdiff+0xd0>
 8004ec6:	3f01      	subs	r7, #1
 8004ec8:	e7e8      	b.n	8004e9c <__mdiff+0xe8>
 8004eca:	bf00      	nop
 8004ecc:	0800608b 	.word	0x0800608b
 8004ed0:	0800609c 	.word	0x0800609c

08004ed4 <__d2b>:
 8004ed4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004ed8:	2101      	movs	r1, #1
 8004eda:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004ede:	4690      	mov	r8, r2
 8004ee0:	461d      	mov	r5, r3
 8004ee2:	f7ff fcd1 	bl	8004888 <_Balloc>
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	b930      	cbnz	r0, 8004ef8 <__d2b+0x24>
 8004eea:	4602      	mov	r2, r0
 8004eec:	f240 310a 	movw	r1, #778	; 0x30a
 8004ef0:	4b24      	ldr	r3, [pc, #144]	; (8004f84 <__d2b+0xb0>)
 8004ef2:	4825      	ldr	r0, [pc, #148]	; (8004f88 <__d2b+0xb4>)
 8004ef4:	f000 fa6a 	bl	80053cc <__assert_func>
 8004ef8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004efc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004f00:	bb2d      	cbnz	r5, 8004f4e <__d2b+0x7a>
 8004f02:	9301      	str	r3, [sp, #4]
 8004f04:	f1b8 0300 	subs.w	r3, r8, #0
 8004f08:	d026      	beq.n	8004f58 <__d2b+0x84>
 8004f0a:	4668      	mov	r0, sp
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	f7ff fd87 	bl	8004a20 <__lo0bits>
 8004f12:	9900      	ldr	r1, [sp, #0]
 8004f14:	b1f0      	cbz	r0, 8004f54 <__d2b+0x80>
 8004f16:	9a01      	ldr	r2, [sp, #4]
 8004f18:	f1c0 0320 	rsb	r3, r0, #32
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	430b      	orrs	r3, r1
 8004f22:	40c2      	lsrs	r2, r0
 8004f24:	6163      	str	r3, [r4, #20]
 8004f26:	9201      	str	r2, [sp, #4]
 8004f28:	9b01      	ldr	r3, [sp, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bf14      	ite	ne
 8004f2e:	2102      	movne	r1, #2
 8004f30:	2101      	moveq	r1, #1
 8004f32:	61a3      	str	r3, [r4, #24]
 8004f34:	6121      	str	r1, [r4, #16]
 8004f36:	b1c5      	cbz	r5, 8004f6a <__d2b+0x96>
 8004f38:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004f3c:	4405      	add	r5, r0
 8004f3e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004f42:	603d      	str	r5, [r7, #0]
 8004f44:	6030      	str	r0, [r6, #0]
 8004f46:	4620      	mov	r0, r4
 8004f48:	b002      	add	sp, #8
 8004f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f52:	e7d6      	b.n	8004f02 <__d2b+0x2e>
 8004f54:	6161      	str	r1, [r4, #20]
 8004f56:	e7e7      	b.n	8004f28 <__d2b+0x54>
 8004f58:	a801      	add	r0, sp, #4
 8004f5a:	f7ff fd61 	bl	8004a20 <__lo0bits>
 8004f5e:	2101      	movs	r1, #1
 8004f60:	9b01      	ldr	r3, [sp, #4]
 8004f62:	6121      	str	r1, [r4, #16]
 8004f64:	6163      	str	r3, [r4, #20]
 8004f66:	3020      	adds	r0, #32
 8004f68:	e7e5      	b.n	8004f36 <__d2b+0x62>
 8004f6a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004f6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004f72:	6038      	str	r0, [r7, #0]
 8004f74:	6918      	ldr	r0, [r3, #16]
 8004f76:	f7ff fd33 	bl	80049e0 <__hi0bits>
 8004f7a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004f7e:	6031      	str	r1, [r6, #0]
 8004f80:	e7e1      	b.n	8004f46 <__d2b+0x72>
 8004f82:	bf00      	nop
 8004f84:	0800608b 	.word	0x0800608b
 8004f88:	0800609c 	.word	0x0800609c

08004f8c <_calloc_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	fb02 f501 	mul.w	r5, r2, r1
 8004f92:	4629      	mov	r1, r5
 8004f94:	f000 f854 	bl	8005040 <_malloc_r>
 8004f98:	4604      	mov	r4, r0
 8004f9a:	b118      	cbz	r0, 8004fa4 <_calloc_r+0x18>
 8004f9c:	462a      	mov	r2, r5
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	f7fe f954 	bl	800324c <memset>
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	bd38      	pop	{r3, r4, r5, pc}

08004fa8 <_free_r>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4605      	mov	r5, r0
 8004fac:	2900      	cmp	r1, #0
 8004fae:	d043      	beq.n	8005038 <_free_r+0x90>
 8004fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fb4:	1f0c      	subs	r4, r1, #4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bfb8      	it	lt
 8004fba:	18e4      	addlt	r4, r4, r3
 8004fbc:	f000 fa62 	bl	8005484 <__malloc_lock>
 8004fc0:	4a1e      	ldr	r2, [pc, #120]	; (800503c <_free_r+0x94>)
 8004fc2:	6813      	ldr	r3, [r2, #0]
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	b933      	cbnz	r3, 8004fd6 <_free_r+0x2e>
 8004fc8:	6063      	str	r3, [r4, #4]
 8004fca:	6014      	str	r4, [r2, #0]
 8004fcc:	4628      	mov	r0, r5
 8004fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fd2:	f000 ba5d 	b.w	8005490 <__malloc_unlock>
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	d90a      	bls.n	8004ff0 <_free_r+0x48>
 8004fda:	6821      	ldr	r1, [r4, #0]
 8004fdc:	1862      	adds	r2, r4, r1
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	bf01      	itttt	eq
 8004fe2:	681a      	ldreq	r2, [r3, #0]
 8004fe4:	685b      	ldreq	r3, [r3, #4]
 8004fe6:	1852      	addeq	r2, r2, r1
 8004fe8:	6022      	streq	r2, [r4, #0]
 8004fea:	6063      	str	r3, [r4, #4]
 8004fec:	6004      	str	r4, [r0, #0]
 8004fee:	e7ed      	b.n	8004fcc <_free_r+0x24>
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	b10b      	cbz	r3, 8004ffa <_free_r+0x52>
 8004ff6:	42a3      	cmp	r3, r4
 8004ff8:	d9fa      	bls.n	8004ff0 <_free_r+0x48>
 8004ffa:	6811      	ldr	r1, [r2, #0]
 8004ffc:	1850      	adds	r0, r2, r1
 8004ffe:	42a0      	cmp	r0, r4
 8005000:	d10b      	bne.n	800501a <_free_r+0x72>
 8005002:	6820      	ldr	r0, [r4, #0]
 8005004:	4401      	add	r1, r0
 8005006:	1850      	adds	r0, r2, r1
 8005008:	4283      	cmp	r3, r0
 800500a:	6011      	str	r1, [r2, #0]
 800500c:	d1de      	bne.n	8004fcc <_free_r+0x24>
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4401      	add	r1, r0
 8005014:	6011      	str	r1, [r2, #0]
 8005016:	6053      	str	r3, [r2, #4]
 8005018:	e7d8      	b.n	8004fcc <_free_r+0x24>
 800501a:	d902      	bls.n	8005022 <_free_r+0x7a>
 800501c:	230c      	movs	r3, #12
 800501e:	602b      	str	r3, [r5, #0]
 8005020:	e7d4      	b.n	8004fcc <_free_r+0x24>
 8005022:	6820      	ldr	r0, [r4, #0]
 8005024:	1821      	adds	r1, r4, r0
 8005026:	428b      	cmp	r3, r1
 8005028:	bf01      	itttt	eq
 800502a:	6819      	ldreq	r1, [r3, #0]
 800502c:	685b      	ldreq	r3, [r3, #4]
 800502e:	1809      	addeq	r1, r1, r0
 8005030:	6021      	streq	r1, [r4, #0]
 8005032:	6063      	str	r3, [r4, #4]
 8005034:	6054      	str	r4, [r2, #4]
 8005036:	e7c9      	b.n	8004fcc <_free_r+0x24>
 8005038:	bd38      	pop	{r3, r4, r5, pc}
 800503a:	bf00      	nop
 800503c:	20000364 	.word	0x20000364

08005040 <_malloc_r>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	1ccd      	adds	r5, r1, #3
 8005044:	f025 0503 	bic.w	r5, r5, #3
 8005048:	3508      	adds	r5, #8
 800504a:	2d0c      	cmp	r5, #12
 800504c:	bf38      	it	cc
 800504e:	250c      	movcc	r5, #12
 8005050:	2d00      	cmp	r5, #0
 8005052:	4606      	mov	r6, r0
 8005054:	db01      	blt.n	800505a <_malloc_r+0x1a>
 8005056:	42a9      	cmp	r1, r5
 8005058:	d903      	bls.n	8005062 <_malloc_r+0x22>
 800505a:	230c      	movs	r3, #12
 800505c:	6033      	str	r3, [r6, #0]
 800505e:	2000      	movs	r0, #0
 8005060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005062:	f000 fa0f 	bl	8005484 <__malloc_lock>
 8005066:	4921      	ldr	r1, [pc, #132]	; (80050ec <_malloc_r+0xac>)
 8005068:	680a      	ldr	r2, [r1, #0]
 800506a:	4614      	mov	r4, r2
 800506c:	b99c      	cbnz	r4, 8005096 <_malloc_r+0x56>
 800506e:	4f20      	ldr	r7, [pc, #128]	; (80050f0 <_malloc_r+0xb0>)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	b923      	cbnz	r3, 800507e <_malloc_r+0x3e>
 8005074:	4621      	mov	r1, r4
 8005076:	4630      	mov	r0, r6
 8005078:	f000 f998 	bl	80053ac <_sbrk_r>
 800507c:	6038      	str	r0, [r7, #0]
 800507e:	4629      	mov	r1, r5
 8005080:	4630      	mov	r0, r6
 8005082:	f000 f993 	bl	80053ac <_sbrk_r>
 8005086:	1c43      	adds	r3, r0, #1
 8005088:	d123      	bne.n	80050d2 <_malloc_r+0x92>
 800508a:	230c      	movs	r3, #12
 800508c:	4630      	mov	r0, r6
 800508e:	6033      	str	r3, [r6, #0]
 8005090:	f000 f9fe 	bl	8005490 <__malloc_unlock>
 8005094:	e7e3      	b.n	800505e <_malloc_r+0x1e>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	1b5b      	subs	r3, r3, r5
 800509a:	d417      	bmi.n	80050cc <_malloc_r+0x8c>
 800509c:	2b0b      	cmp	r3, #11
 800509e:	d903      	bls.n	80050a8 <_malloc_r+0x68>
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	441c      	add	r4, r3
 80050a4:	6025      	str	r5, [r4, #0]
 80050a6:	e004      	b.n	80050b2 <_malloc_r+0x72>
 80050a8:	6863      	ldr	r3, [r4, #4]
 80050aa:	42a2      	cmp	r2, r4
 80050ac:	bf0c      	ite	eq
 80050ae:	600b      	streq	r3, [r1, #0]
 80050b0:	6053      	strne	r3, [r2, #4]
 80050b2:	4630      	mov	r0, r6
 80050b4:	f000 f9ec 	bl	8005490 <__malloc_unlock>
 80050b8:	f104 000b 	add.w	r0, r4, #11
 80050bc:	1d23      	adds	r3, r4, #4
 80050be:	f020 0007 	bic.w	r0, r0, #7
 80050c2:	1ac2      	subs	r2, r0, r3
 80050c4:	d0cc      	beq.n	8005060 <_malloc_r+0x20>
 80050c6:	1a1b      	subs	r3, r3, r0
 80050c8:	50a3      	str	r3, [r4, r2]
 80050ca:	e7c9      	b.n	8005060 <_malloc_r+0x20>
 80050cc:	4622      	mov	r2, r4
 80050ce:	6864      	ldr	r4, [r4, #4]
 80050d0:	e7cc      	b.n	800506c <_malloc_r+0x2c>
 80050d2:	1cc4      	adds	r4, r0, #3
 80050d4:	f024 0403 	bic.w	r4, r4, #3
 80050d8:	42a0      	cmp	r0, r4
 80050da:	d0e3      	beq.n	80050a4 <_malloc_r+0x64>
 80050dc:	1a21      	subs	r1, r4, r0
 80050de:	4630      	mov	r0, r6
 80050e0:	f000 f964 	bl	80053ac <_sbrk_r>
 80050e4:	3001      	adds	r0, #1
 80050e6:	d1dd      	bne.n	80050a4 <_malloc_r+0x64>
 80050e8:	e7cf      	b.n	800508a <_malloc_r+0x4a>
 80050ea:	bf00      	nop
 80050ec:	20000364 	.word	0x20000364
 80050f0:	20000368 	.word	0x20000368

080050f4 <__ssputs_r>:
 80050f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050f8:	688e      	ldr	r6, [r1, #8]
 80050fa:	4682      	mov	sl, r0
 80050fc:	429e      	cmp	r6, r3
 80050fe:	460c      	mov	r4, r1
 8005100:	4690      	mov	r8, r2
 8005102:	461f      	mov	r7, r3
 8005104:	d838      	bhi.n	8005178 <__ssputs_r+0x84>
 8005106:	898a      	ldrh	r2, [r1, #12]
 8005108:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800510c:	d032      	beq.n	8005174 <__ssputs_r+0x80>
 800510e:	6825      	ldr	r5, [r4, #0]
 8005110:	6909      	ldr	r1, [r1, #16]
 8005112:	3301      	adds	r3, #1
 8005114:	eba5 0901 	sub.w	r9, r5, r1
 8005118:	6965      	ldr	r5, [r4, #20]
 800511a:	444b      	add	r3, r9
 800511c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005120:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005124:	106d      	asrs	r5, r5, #1
 8005126:	429d      	cmp	r5, r3
 8005128:	bf38      	it	cc
 800512a:	461d      	movcc	r5, r3
 800512c:	0553      	lsls	r3, r2, #21
 800512e:	d531      	bpl.n	8005194 <__ssputs_r+0xa0>
 8005130:	4629      	mov	r1, r5
 8005132:	f7ff ff85 	bl	8005040 <_malloc_r>
 8005136:	4606      	mov	r6, r0
 8005138:	b950      	cbnz	r0, 8005150 <__ssputs_r+0x5c>
 800513a:	230c      	movs	r3, #12
 800513c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005140:	f8ca 3000 	str.w	r3, [sl]
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800514a:	81a3      	strh	r3, [r4, #12]
 800514c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005150:	464a      	mov	r2, r9
 8005152:	6921      	ldr	r1, [r4, #16]
 8005154:	f7fe f86c 	bl	8003230 <memcpy>
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800515e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005162:	81a3      	strh	r3, [r4, #12]
 8005164:	6126      	str	r6, [r4, #16]
 8005166:	444e      	add	r6, r9
 8005168:	6026      	str	r6, [r4, #0]
 800516a:	463e      	mov	r6, r7
 800516c:	6165      	str	r5, [r4, #20]
 800516e:	eba5 0509 	sub.w	r5, r5, r9
 8005172:	60a5      	str	r5, [r4, #8]
 8005174:	42be      	cmp	r6, r7
 8005176:	d900      	bls.n	800517a <__ssputs_r+0x86>
 8005178:	463e      	mov	r6, r7
 800517a:	4632      	mov	r2, r6
 800517c:	4641      	mov	r1, r8
 800517e:	6820      	ldr	r0, [r4, #0]
 8005180:	f000 f966 	bl	8005450 <memmove>
 8005184:	68a3      	ldr	r3, [r4, #8]
 8005186:	6822      	ldr	r2, [r4, #0]
 8005188:	1b9b      	subs	r3, r3, r6
 800518a:	4432      	add	r2, r6
 800518c:	2000      	movs	r0, #0
 800518e:	60a3      	str	r3, [r4, #8]
 8005190:	6022      	str	r2, [r4, #0]
 8005192:	e7db      	b.n	800514c <__ssputs_r+0x58>
 8005194:	462a      	mov	r2, r5
 8005196:	f000 f981 	bl	800549c <_realloc_r>
 800519a:	4606      	mov	r6, r0
 800519c:	2800      	cmp	r0, #0
 800519e:	d1e1      	bne.n	8005164 <__ssputs_r+0x70>
 80051a0:	4650      	mov	r0, sl
 80051a2:	6921      	ldr	r1, [r4, #16]
 80051a4:	f7ff ff00 	bl	8004fa8 <_free_r>
 80051a8:	e7c7      	b.n	800513a <__ssputs_r+0x46>
	...

080051ac <_svfiprintf_r>:
 80051ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b0:	4698      	mov	r8, r3
 80051b2:	898b      	ldrh	r3, [r1, #12]
 80051b4:	4607      	mov	r7, r0
 80051b6:	061b      	lsls	r3, r3, #24
 80051b8:	460d      	mov	r5, r1
 80051ba:	4614      	mov	r4, r2
 80051bc:	b09d      	sub	sp, #116	; 0x74
 80051be:	d50e      	bpl.n	80051de <_svfiprintf_r+0x32>
 80051c0:	690b      	ldr	r3, [r1, #16]
 80051c2:	b963      	cbnz	r3, 80051de <_svfiprintf_r+0x32>
 80051c4:	2140      	movs	r1, #64	; 0x40
 80051c6:	f7ff ff3b 	bl	8005040 <_malloc_r>
 80051ca:	6028      	str	r0, [r5, #0]
 80051cc:	6128      	str	r0, [r5, #16]
 80051ce:	b920      	cbnz	r0, 80051da <_svfiprintf_r+0x2e>
 80051d0:	230c      	movs	r3, #12
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051d8:	e0d1      	b.n	800537e <_svfiprintf_r+0x1d2>
 80051da:	2340      	movs	r3, #64	; 0x40
 80051dc:	616b      	str	r3, [r5, #20]
 80051de:	2300      	movs	r3, #0
 80051e0:	9309      	str	r3, [sp, #36]	; 0x24
 80051e2:	2320      	movs	r3, #32
 80051e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051e8:	2330      	movs	r3, #48	; 0x30
 80051ea:	f04f 0901 	mov.w	r9, #1
 80051ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80051f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005398 <_svfiprintf_r+0x1ec>
 80051f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051fa:	4623      	mov	r3, r4
 80051fc:	469a      	mov	sl, r3
 80051fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005202:	b10a      	cbz	r2, 8005208 <_svfiprintf_r+0x5c>
 8005204:	2a25      	cmp	r2, #37	; 0x25
 8005206:	d1f9      	bne.n	80051fc <_svfiprintf_r+0x50>
 8005208:	ebba 0b04 	subs.w	fp, sl, r4
 800520c:	d00b      	beq.n	8005226 <_svfiprintf_r+0x7a>
 800520e:	465b      	mov	r3, fp
 8005210:	4622      	mov	r2, r4
 8005212:	4629      	mov	r1, r5
 8005214:	4638      	mov	r0, r7
 8005216:	f7ff ff6d 	bl	80050f4 <__ssputs_r>
 800521a:	3001      	adds	r0, #1
 800521c:	f000 80aa 	beq.w	8005374 <_svfiprintf_r+0x1c8>
 8005220:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005222:	445a      	add	r2, fp
 8005224:	9209      	str	r2, [sp, #36]	; 0x24
 8005226:	f89a 3000 	ldrb.w	r3, [sl]
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 80a2 	beq.w	8005374 <_svfiprintf_r+0x1c8>
 8005230:	2300      	movs	r3, #0
 8005232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800523a:	f10a 0a01 	add.w	sl, sl, #1
 800523e:	9304      	str	r3, [sp, #16]
 8005240:	9307      	str	r3, [sp, #28]
 8005242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005246:	931a      	str	r3, [sp, #104]	; 0x68
 8005248:	4654      	mov	r4, sl
 800524a:	2205      	movs	r2, #5
 800524c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005250:	4851      	ldr	r0, [pc, #324]	; (8005398 <_svfiprintf_r+0x1ec>)
 8005252:	f7ff fb0b 	bl	800486c <memchr>
 8005256:	9a04      	ldr	r2, [sp, #16]
 8005258:	b9d8      	cbnz	r0, 8005292 <_svfiprintf_r+0xe6>
 800525a:	06d0      	lsls	r0, r2, #27
 800525c:	bf44      	itt	mi
 800525e:	2320      	movmi	r3, #32
 8005260:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005264:	0711      	lsls	r1, r2, #28
 8005266:	bf44      	itt	mi
 8005268:	232b      	movmi	r3, #43	; 0x2b
 800526a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800526e:	f89a 3000 	ldrb.w	r3, [sl]
 8005272:	2b2a      	cmp	r3, #42	; 0x2a
 8005274:	d015      	beq.n	80052a2 <_svfiprintf_r+0xf6>
 8005276:	4654      	mov	r4, sl
 8005278:	2000      	movs	r0, #0
 800527a:	f04f 0c0a 	mov.w	ip, #10
 800527e:	9a07      	ldr	r2, [sp, #28]
 8005280:	4621      	mov	r1, r4
 8005282:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005286:	3b30      	subs	r3, #48	; 0x30
 8005288:	2b09      	cmp	r3, #9
 800528a:	d94e      	bls.n	800532a <_svfiprintf_r+0x17e>
 800528c:	b1b0      	cbz	r0, 80052bc <_svfiprintf_r+0x110>
 800528e:	9207      	str	r2, [sp, #28]
 8005290:	e014      	b.n	80052bc <_svfiprintf_r+0x110>
 8005292:	eba0 0308 	sub.w	r3, r0, r8
 8005296:	fa09 f303 	lsl.w	r3, r9, r3
 800529a:	4313      	orrs	r3, r2
 800529c:	46a2      	mov	sl, r4
 800529e:	9304      	str	r3, [sp, #16]
 80052a0:	e7d2      	b.n	8005248 <_svfiprintf_r+0x9c>
 80052a2:	9b03      	ldr	r3, [sp, #12]
 80052a4:	1d19      	adds	r1, r3, #4
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	9103      	str	r1, [sp, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	bfbb      	ittet	lt
 80052ae:	425b      	neglt	r3, r3
 80052b0:	f042 0202 	orrlt.w	r2, r2, #2
 80052b4:	9307      	strge	r3, [sp, #28]
 80052b6:	9307      	strlt	r3, [sp, #28]
 80052b8:	bfb8      	it	lt
 80052ba:	9204      	strlt	r2, [sp, #16]
 80052bc:	7823      	ldrb	r3, [r4, #0]
 80052be:	2b2e      	cmp	r3, #46	; 0x2e
 80052c0:	d10c      	bne.n	80052dc <_svfiprintf_r+0x130>
 80052c2:	7863      	ldrb	r3, [r4, #1]
 80052c4:	2b2a      	cmp	r3, #42	; 0x2a
 80052c6:	d135      	bne.n	8005334 <_svfiprintf_r+0x188>
 80052c8:	9b03      	ldr	r3, [sp, #12]
 80052ca:	3402      	adds	r4, #2
 80052cc:	1d1a      	adds	r2, r3, #4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	9203      	str	r2, [sp, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bfb8      	it	lt
 80052d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80052da:	9305      	str	r3, [sp, #20]
 80052dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80053a8 <_svfiprintf_r+0x1fc>
 80052e0:	2203      	movs	r2, #3
 80052e2:	4650      	mov	r0, sl
 80052e4:	7821      	ldrb	r1, [r4, #0]
 80052e6:	f7ff fac1 	bl	800486c <memchr>
 80052ea:	b140      	cbz	r0, 80052fe <_svfiprintf_r+0x152>
 80052ec:	2340      	movs	r3, #64	; 0x40
 80052ee:	eba0 000a 	sub.w	r0, r0, sl
 80052f2:	fa03 f000 	lsl.w	r0, r3, r0
 80052f6:	9b04      	ldr	r3, [sp, #16]
 80052f8:	3401      	adds	r4, #1
 80052fa:	4303      	orrs	r3, r0
 80052fc:	9304      	str	r3, [sp, #16]
 80052fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005302:	2206      	movs	r2, #6
 8005304:	4825      	ldr	r0, [pc, #148]	; (800539c <_svfiprintf_r+0x1f0>)
 8005306:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800530a:	f7ff faaf 	bl	800486c <memchr>
 800530e:	2800      	cmp	r0, #0
 8005310:	d038      	beq.n	8005384 <_svfiprintf_r+0x1d8>
 8005312:	4b23      	ldr	r3, [pc, #140]	; (80053a0 <_svfiprintf_r+0x1f4>)
 8005314:	bb1b      	cbnz	r3, 800535e <_svfiprintf_r+0x1b2>
 8005316:	9b03      	ldr	r3, [sp, #12]
 8005318:	3307      	adds	r3, #7
 800531a:	f023 0307 	bic.w	r3, r3, #7
 800531e:	3308      	adds	r3, #8
 8005320:	9303      	str	r3, [sp, #12]
 8005322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005324:	4433      	add	r3, r6
 8005326:	9309      	str	r3, [sp, #36]	; 0x24
 8005328:	e767      	b.n	80051fa <_svfiprintf_r+0x4e>
 800532a:	460c      	mov	r4, r1
 800532c:	2001      	movs	r0, #1
 800532e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005332:	e7a5      	b.n	8005280 <_svfiprintf_r+0xd4>
 8005334:	2300      	movs	r3, #0
 8005336:	f04f 0c0a 	mov.w	ip, #10
 800533a:	4619      	mov	r1, r3
 800533c:	3401      	adds	r4, #1
 800533e:	9305      	str	r3, [sp, #20]
 8005340:	4620      	mov	r0, r4
 8005342:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005346:	3a30      	subs	r2, #48	; 0x30
 8005348:	2a09      	cmp	r2, #9
 800534a:	d903      	bls.n	8005354 <_svfiprintf_r+0x1a8>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0c5      	beq.n	80052dc <_svfiprintf_r+0x130>
 8005350:	9105      	str	r1, [sp, #20]
 8005352:	e7c3      	b.n	80052dc <_svfiprintf_r+0x130>
 8005354:	4604      	mov	r4, r0
 8005356:	2301      	movs	r3, #1
 8005358:	fb0c 2101 	mla	r1, ip, r1, r2
 800535c:	e7f0      	b.n	8005340 <_svfiprintf_r+0x194>
 800535e:	ab03      	add	r3, sp, #12
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	462a      	mov	r2, r5
 8005364:	4638      	mov	r0, r7
 8005366:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <_svfiprintf_r+0x1f8>)
 8005368:	a904      	add	r1, sp, #16
 800536a:	f7fe f815 	bl	8003398 <_printf_float>
 800536e:	1c42      	adds	r2, r0, #1
 8005370:	4606      	mov	r6, r0
 8005372:	d1d6      	bne.n	8005322 <_svfiprintf_r+0x176>
 8005374:	89ab      	ldrh	r3, [r5, #12]
 8005376:	065b      	lsls	r3, r3, #25
 8005378:	f53f af2c 	bmi.w	80051d4 <_svfiprintf_r+0x28>
 800537c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800537e:	b01d      	add	sp, #116	; 0x74
 8005380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005384:	ab03      	add	r3, sp, #12
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	462a      	mov	r2, r5
 800538a:	4638      	mov	r0, r7
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <_svfiprintf_r+0x1f8>)
 800538e:	a904      	add	r1, sp, #16
 8005390:	f7fe fa9e 	bl	80038d0 <_printf_i>
 8005394:	e7eb      	b.n	800536e <_svfiprintf_r+0x1c2>
 8005396:	bf00      	nop
 8005398:	080061fc 	.word	0x080061fc
 800539c:	08006206 	.word	0x08006206
 80053a0:	08003399 	.word	0x08003399
 80053a4:	080050f5 	.word	0x080050f5
 80053a8:	08006202 	.word	0x08006202

080053ac <_sbrk_r>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	2300      	movs	r3, #0
 80053b0:	4d05      	ldr	r5, [pc, #20]	; (80053c8 <_sbrk_r+0x1c>)
 80053b2:	4604      	mov	r4, r0
 80053b4:	4608      	mov	r0, r1
 80053b6:	602b      	str	r3, [r5, #0]
 80053b8:	f7fc fcd2 	bl	8001d60 <_sbrk>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d102      	bne.n	80053c6 <_sbrk_r+0x1a>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	b103      	cbz	r3, 80053c6 <_sbrk_r+0x1a>
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	20000370 	.word	0x20000370

080053cc <__assert_func>:
 80053cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053ce:	4614      	mov	r4, r2
 80053d0:	461a      	mov	r2, r3
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <__assert_func+0x2c>)
 80053d4:	4605      	mov	r5, r0
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68d8      	ldr	r0, [r3, #12]
 80053da:	b14c      	cbz	r4, 80053f0 <__assert_func+0x24>
 80053dc:	4b07      	ldr	r3, [pc, #28]	; (80053fc <__assert_func+0x30>)
 80053de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80053e2:	9100      	str	r1, [sp, #0]
 80053e4:	462b      	mov	r3, r5
 80053e6:	4906      	ldr	r1, [pc, #24]	; (8005400 <__assert_func+0x34>)
 80053e8:	f000 f80e 	bl	8005408 <fiprintf>
 80053ec:	f000 faa2 	bl	8005934 <abort>
 80053f0:	4b04      	ldr	r3, [pc, #16]	; (8005404 <__assert_func+0x38>)
 80053f2:	461c      	mov	r4, r3
 80053f4:	e7f3      	b.n	80053de <__assert_func+0x12>
 80053f6:	bf00      	nop
 80053f8:	2000010c 	.word	0x2000010c
 80053fc:	0800620d 	.word	0x0800620d
 8005400:	0800621a 	.word	0x0800621a
 8005404:	08006248 	.word	0x08006248

08005408 <fiprintf>:
 8005408:	b40e      	push	{r1, r2, r3}
 800540a:	b503      	push	{r0, r1, lr}
 800540c:	4601      	mov	r1, r0
 800540e:	ab03      	add	r3, sp, #12
 8005410:	4805      	ldr	r0, [pc, #20]	; (8005428 <fiprintf+0x20>)
 8005412:	f853 2b04 	ldr.w	r2, [r3], #4
 8005416:	6800      	ldr	r0, [r0, #0]
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	f000 f88d 	bl	8005538 <_vfiprintf_r>
 800541e:	b002      	add	sp, #8
 8005420:	f85d eb04 	ldr.w	lr, [sp], #4
 8005424:	b003      	add	sp, #12
 8005426:	4770      	bx	lr
 8005428:	2000010c 	.word	0x2000010c

0800542c <__ascii_mbtowc>:
 800542c:	b082      	sub	sp, #8
 800542e:	b901      	cbnz	r1, 8005432 <__ascii_mbtowc+0x6>
 8005430:	a901      	add	r1, sp, #4
 8005432:	b142      	cbz	r2, 8005446 <__ascii_mbtowc+0x1a>
 8005434:	b14b      	cbz	r3, 800544a <__ascii_mbtowc+0x1e>
 8005436:	7813      	ldrb	r3, [r2, #0]
 8005438:	600b      	str	r3, [r1, #0]
 800543a:	7812      	ldrb	r2, [r2, #0]
 800543c:	1e10      	subs	r0, r2, #0
 800543e:	bf18      	it	ne
 8005440:	2001      	movne	r0, #1
 8005442:	b002      	add	sp, #8
 8005444:	4770      	bx	lr
 8005446:	4610      	mov	r0, r2
 8005448:	e7fb      	b.n	8005442 <__ascii_mbtowc+0x16>
 800544a:	f06f 0001 	mvn.w	r0, #1
 800544e:	e7f8      	b.n	8005442 <__ascii_mbtowc+0x16>

08005450 <memmove>:
 8005450:	4288      	cmp	r0, r1
 8005452:	b510      	push	{r4, lr}
 8005454:	eb01 0402 	add.w	r4, r1, r2
 8005458:	d902      	bls.n	8005460 <memmove+0x10>
 800545a:	4284      	cmp	r4, r0
 800545c:	4623      	mov	r3, r4
 800545e:	d807      	bhi.n	8005470 <memmove+0x20>
 8005460:	1e43      	subs	r3, r0, #1
 8005462:	42a1      	cmp	r1, r4
 8005464:	d008      	beq.n	8005478 <memmove+0x28>
 8005466:	f811 2b01 	ldrb.w	r2, [r1], #1
 800546a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800546e:	e7f8      	b.n	8005462 <memmove+0x12>
 8005470:	4601      	mov	r1, r0
 8005472:	4402      	add	r2, r0
 8005474:	428a      	cmp	r2, r1
 8005476:	d100      	bne.n	800547a <memmove+0x2a>
 8005478:	bd10      	pop	{r4, pc}
 800547a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800547e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005482:	e7f7      	b.n	8005474 <memmove+0x24>

08005484 <__malloc_lock>:
 8005484:	4801      	ldr	r0, [pc, #4]	; (800548c <__malloc_lock+0x8>)
 8005486:	f000 bc15 	b.w	8005cb4 <__retarget_lock_acquire_recursive>
 800548a:	bf00      	nop
 800548c:	20000378 	.word	0x20000378

08005490 <__malloc_unlock>:
 8005490:	4801      	ldr	r0, [pc, #4]	; (8005498 <__malloc_unlock+0x8>)
 8005492:	f000 bc10 	b.w	8005cb6 <__retarget_lock_release_recursive>
 8005496:	bf00      	nop
 8005498:	20000378 	.word	0x20000378

0800549c <_realloc_r>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	4607      	mov	r7, r0
 80054a0:	4614      	mov	r4, r2
 80054a2:	460e      	mov	r6, r1
 80054a4:	b921      	cbnz	r1, 80054b0 <_realloc_r+0x14>
 80054a6:	4611      	mov	r1, r2
 80054a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054ac:	f7ff bdc8 	b.w	8005040 <_malloc_r>
 80054b0:	b922      	cbnz	r2, 80054bc <_realloc_r+0x20>
 80054b2:	f7ff fd79 	bl	8004fa8 <_free_r>
 80054b6:	4625      	mov	r5, r4
 80054b8:	4628      	mov	r0, r5
 80054ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054bc:	f000 fc60 	bl	8005d80 <_malloc_usable_size_r>
 80054c0:	42a0      	cmp	r0, r4
 80054c2:	d20f      	bcs.n	80054e4 <_realloc_r+0x48>
 80054c4:	4621      	mov	r1, r4
 80054c6:	4638      	mov	r0, r7
 80054c8:	f7ff fdba 	bl	8005040 <_malloc_r>
 80054cc:	4605      	mov	r5, r0
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d0f2      	beq.n	80054b8 <_realloc_r+0x1c>
 80054d2:	4631      	mov	r1, r6
 80054d4:	4622      	mov	r2, r4
 80054d6:	f7fd feab 	bl	8003230 <memcpy>
 80054da:	4631      	mov	r1, r6
 80054dc:	4638      	mov	r0, r7
 80054de:	f7ff fd63 	bl	8004fa8 <_free_r>
 80054e2:	e7e9      	b.n	80054b8 <_realloc_r+0x1c>
 80054e4:	4635      	mov	r5, r6
 80054e6:	e7e7      	b.n	80054b8 <_realloc_r+0x1c>

080054e8 <__sfputc_r>:
 80054e8:	6893      	ldr	r3, [r2, #8]
 80054ea:	b410      	push	{r4}
 80054ec:	3b01      	subs	r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	6093      	str	r3, [r2, #8]
 80054f2:	da07      	bge.n	8005504 <__sfputc_r+0x1c>
 80054f4:	6994      	ldr	r4, [r2, #24]
 80054f6:	42a3      	cmp	r3, r4
 80054f8:	db01      	blt.n	80054fe <__sfputc_r+0x16>
 80054fa:	290a      	cmp	r1, #10
 80054fc:	d102      	bne.n	8005504 <__sfputc_r+0x1c>
 80054fe:	bc10      	pop	{r4}
 8005500:	f000 b94a 	b.w	8005798 <__swbuf_r>
 8005504:	6813      	ldr	r3, [r2, #0]
 8005506:	1c58      	adds	r0, r3, #1
 8005508:	6010      	str	r0, [r2, #0]
 800550a:	7019      	strb	r1, [r3, #0]
 800550c:	4608      	mov	r0, r1
 800550e:	bc10      	pop	{r4}
 8005510:	4770      	bx	lr

08005512 <__sfputs_r>:
 8005512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005514:	4606      	mov	r6, r0
 8005516:	460f      	mov	r7, r1
 8005518:	4614      	mov	r4, r2
 800551a:	18d5      	adds	r5, r2, r3
 800551c:	42ac      	cmp	r4, r5
 800551e:	d101      	bne.n	8005524 <__sfputs_r+0x12>
 8005520:	2000      	movs	r0, #0
 8005522:	e007      	b.n	8005534 <__sfputs_r+0x22>
 8005524:	463a      	mov	r2, r7
 8005526:	4630      	mov	r0, r6
 8005528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800552c:	f7ff ffdc 	bl	80054e8 <__sfputc_r>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d1f3      	bne.n	800551c <__sfputs_r+0xa>
 8005534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005538 <_vfiprintf_r>:
 8005538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553c:	460d      	mov	r5, r1
 800553e:	4614      	mov	r4, r2
 8005540:	4698      	mov	r8, r3
 8005542:	4606      	mov	r6, r0
 8005544:	b09d      	sub	sp, #116	; 0x74
 8005546:	b118      	cbz	r0, 8005550 <_vfiprintf_r+0x18>
 8005548:	6983      	ldr	r3, [r0, #24]
 800554a:	b90b      	cbnz	r3, 8005550 <_vfiprintf_r+0x18>
 800554c:	f000 fb14 	bl	8005b78 <__sinit>
 8005550:	4b89      	ldr	r3, [pc, #548]	; (8005778 <_vfiprintf_r+0x240>)
 8005552:	429d      	cmp	r5, r3
 8005554:	d11b      	bne.n	800558e <_vfiprintf_r+0x56>
 8005556:	6875      	ldr	r5, [r6, #4]
 8005558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800555a:	07d9      	lsls	r1, r3, #31
 800555c:	d405      	bmi.n	800556a <_vfiprintf_r+0x32>
 800555e:	89ab      	ldrh	r3, [r5, #12]
 8005560:	059a      	lsls	r2, r3, #22
 8005562:	d402      	bmi.n	800556a <_vfiprintf_r+0x32>
 8005564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005566:	f000 fba5 	bl	8005cb4 <__retarget_lock_acquire_recursive>
 800556a:	89ab      	ldrh	r3, [r5, #12]
 800556c:	071b      	lsls	r3, r3, #28
 800556e:	d501      	bpl.n	8005574 <_vfiprintf_r+0x3c>
 8005570:	692b      	ldr	r3, [r5, #16]
 8005572:	b9eb      	cbnz	r3, 80055b0 <_vfiprintf_r+0x78>
 8005574:	4629      	mov	r1, r5
 8005576:	4630      	mov	r0, r6
 8005578:	f000 f96e 	bl	8005858 <__swsetup_r>
 800557c:	b1c0      	cbz	r0, 80055b0 <_vfiprintf_r+0x78>
 800557e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005580:	07dc      	lsls	r4, r3, #31
 8005582:	d50e      	bpl.n	80055a2 <_vfiprintf_r+0x6a>
 8005584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005588:	b01d      	add	sp, #116	; 0x74
 800558a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800558e:	4b7b      	ldr	r3, [pc, #492]	; (800577c <_vfiprintf_r+0x244>)
 8005590:	429d      	cmp	r5, r3
 8005592:	d101      	bne.n	8005598 <_vfiprintf_r+0x60>
 8005594:	68b5      	ldr	r5, [r6, #8]
 8005596:	e7df      	b.n	8005558 <_vfiprintf_r+0x20>
 8005598:	4b79      	ldr	r3, [pc, #484]	; (8005780 <_vfiprintf_r+0x248>)
 800559a:	429d      	cmp	r5, r3
 800559c:	bf08      	it	eq
 800559e:	68f5      	ldreq	r5, [r6, #12]
 80055a0:	e7da      	b.n	8005558 <_vfiprintf_r+0x20>
 80055a2:	89ab      	ldrh	r3, [r5, #12]
 80055a4:	0598      	lsls	r0, r3, #22
 80055a6:	d4ed      	bmi.n	8005584 <_vfiprintf_r+0x4c>
 80055a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055aa:	f000 fb84 	bl	8005cb6 <__retarget_lock_release_recursive>
 80055ae:	e7e9      	b.n	8005584 <_vfiprintf_r+0x4c>
 80055b0:	2300      	movs	r3, #0
 80055b2:	9309      	str	r3, [sp, #36]	; 0x24
 80055b4:	2320      	movs	r3, #32
 80055b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055ba:	2330      	movs	r3, #48	; 0x30
 80055bc:	f04f 0901 	mov.w	r9, #1
 80055c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80055c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005784 <_vfiprintf_r+0x24c>
 80055c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055cc:	4623      	mov	r3, r4
 80055ce:	469a      	mov	sl, r3
 80055d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055d4:	b10a      	cbz	r2, 80055da <_vfiprintf_r+0xa2>
 80055d6:	2a25      	cmp	r2, #37	; 0x25
 80055d8:	d1f9      	bne.n	80055ce <_vfiprintf_r+0x96>
 80055da:	ebba 0b04 	subs.w	fp, sl, r4
 80055de:	d00b      	beq.n	80055f8 <_vfiprintf_r+0xc0>
 80055e0:	465b      	mov	r3, fp
 80055e2:	4622      	mov	r2, r4
 80055e4:	4629      	mov	r1, r5
 80055e6:	4630      	mov	r0, r6
 80055e8:	f7ff ff93 	bl	8005512 <__sfputs_r>
 80055ec:	3001      	adds	r0, #1
 80055ee:	f000 80aa 	beq.w	8005746 <_vfiprintf_r+0x20e>
 80055f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055f4:	445a      	add	r2, fp
 80055f6:	9209      	str	r2, [sp, #36]	; 0x24
 80055f8:	f89a 3000 	ldrb.w	r3, [sl]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80a2 	beq.w	8005746 <_vfiprintf_r+0x20e>
 8005602:	2300      	movs	r3, #0
 8005604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800560c:	f10a 0a01 	add.w	sl, sl, #1
 8005610:	9304      	str	r3, [sp, #16]
 8005612:	9307      	str	r3, [sp, #28]
 8005614:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005618:	931a      	str	r3, [sp, #104]	; 0x68
 800561a:	4654      	mov	r4, sl
 800561c:	2205      	movs	r2, #5
 800561e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005622:	4858      	ldr	r0, [pc, #352]	; (8005784 <_vfiprintf_r+0x24c>)
 8005624:	f7ff f922 	bl	800486c <memchr>
 8005628:	9a04      	ldr	r2, [sp, #16]
 800562a:	b9d8      	cbnz	r0, 8005664 <_vfiprintf_r+0x12c>
 800562c:	06d1      	lsls	r1, r2, #27
 800562e:	bf44      	itt	mi
 8005630:	2320      	movmi	r3, #32
 8005632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005636:	0713      	lsls	r3, r2, #28
 8005638:	bf44      	itt	mi
 800563a:	232b      	movmi	r3, #43	; 0x2b
 800563c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005640:	f89a 3000 	ldrb.w	r3, [sl]
 8005644:	2b2a      	cmp	r3, #42	; 0x2a
 8005646:	d015      	beq.n	8005674 <_vfiprintf_r+0x13c>
 8005648:	4654      	mov	r4, sl
 800564a:	2000      	movs	r0, #0
 800564c:	f04f 0c0a 	mov.w	ip, #10
 8005650:	9a07      	ldr	r2, [sp, #28]
 8005652:	4621      	mov	r1, r4
 8005654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005658:	3b30      	subs	r3, #48	; 0x30
 800565a:	2b09      	cmp	r3, #9
 800565c:	d94e      	bls.n	80056fc <_vfiprintf_r+0x1c4>
 800565e:	b1b0      	cbz	r0, 800568e <_vfiprintf_r+0x156>
 8005660:	9207      	str	r2, [sp, #28]
 8005662:	e014      	b.n	800568e <_vfiprintf_r+0x156>
 8005664:	eba0 0308 	sub.w	r3, r0, r8
 8005668:	fa09 f303 	lsl.w	r3, r9, r3
 800566c:	4313      	orrs	r3, r2
 800566e:	46a2      	mov	sl, r4
 8005670:	9304      	str	r3, [sp, #16]
 8005672:	e7d2      	b.n	800561a <_vfiprintf_r+0xe2>
 8005674:	9b03      	ldr	r3, [sp, #12]
 8005676:	1d19      	adds	r1, r3, #4
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	9103      	str	r1, [sp, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	bfbb      	ittet	lt
 8005680:	425b      	neglt	r3, r3
 8005682:	f042 0202 	orrlt.w	r2, r2, #2
 8005686:	9307      	strge	r3, [sp, #28]
 8005688:	9307      	strlt	r3, [sp, #28]
 800568a:	bfb8      	it	lt
 800568c:	9204      	strlt	r2, [sp, #16]
 800568e:	7823      	ldrb	r3, [r4, #0]
 8005690:	2b2e      	cmp	r3, #46	; 0x2e
 8005692:	d10c      	bne.n	80056ae <_vfiprintf_r+0x176>
 8005694:	7863      	ldrb	r3, [r4, #1]
 8005696:	2b2a      	cmp	r3, #42	; 0x2a
 8005698:	d135      	bne.n	8005706 <_vfiprintf_r+0x1ce>
 800569a:	9b03      	ldr	r3, [sp, #12]
 800569c:	3402      	adds	r4, #2
 800569e:	1d1a      	adds	r2, r3, #4
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	9203      	str	r2, [sp, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	bfb8      	it	lt
 80056a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80056ac:	9305      	str	r3, [sp, #20]
 80056ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005794 <_vfiprintf_r+0x25c>
 80056b2:	2203      	movs	r2, #3
 80056b4:	4650      	mov	r0, sl
 80056b6:	7821      	ldrb	r1, [r4, #0]
 80056b8:	f7ff f8d8 	bl	800486c <memchr>
 80056bc:	b140      	cbz	r0, 80056d0 <_vfiprintf_r+0x198>
 80056be:	2340      	movs	r3, #64	; 0x40
 80056c0:	eba0 000a 	sub.w	r0, r0, sl
 80056c4:	fa03 f000 	lsl.w	r0, r3, r0
 80056c8:	9b04      	ldr	r3, [sp, #16]
 80056ca:	3401      	adds	r4, #1
 80056cc:	4303      	orrs	r3, r0
 80056ce:	9304      	str	r3, [sp, #16]
 80056d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d4:	2206      	movs	r2, #6
 80056d6:	482c      	ldr	r0, [pc, #176]	; (8005788 <_vfiprintf_r+0x250>)
 80056d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056dc:	f7ff f8c6 	bl	800486c <memchr>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d03f      	beq.n	8005764 <_vfiprintf_r+0x22c>
 80056e4:	4b29      	ldr	r3, [pc, #164]	; (800578c <_vfiprintf_r+0x254>)
 80056e6:	bb1b      	cbnz	r3, 8005730 <_vfiprintf_r+0x1f8>
 80056e8:	9b03      	ldr	r3, [sp, #12]
 80056ea:	3307      	adds	r3, #7
 80056ec:	f023 0307 	bic.w	r3, r3, #7
 80056f0:	3308      	adds	r3, #8
 80056f2:	9303      	str	r3, [sp, #12]
 80056f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f6:	443b      	add	r3, r7
 80056f8:	9309      	str	r3, [sp, #36]	; 0x24
 80056fa:	e767      	b.n	80055cc <_vfiprintf_r+0x94>
 80056fc:	460c      	mov	r4, r1
 80056fe:	2001      	movs	r0, #1
 8005700:	fb0c 3202 	mla	r2, ip, r2, r3
 8005704:	e7a5      	b.n	8005652 <_vfiprintf_r+0x11a>
 8005706:	2300      	movs	r3, #0
 8005708:	f04f 0c0a 	mov.w	ip, #10
 800570c:	4619      	mov	r1, r3
 800570e:	3401      	adds	r4, #1
 8005710:	9305      	str	r3, [sp, #20]
 8005712:	4620      	mov	r0, r4
 8005714:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005718:	3a30      	subs	r2, #48	; 0x30
 800571a:	2a09      	cmp	r2, #9
 800571c:	d903      	bls.n	8005726 <_vfiprintf_r+0x1ee>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0c5      	beq.n	80056ae <_vfiprintf_r+0x176>
 8005722:	9105      	str	r1, [sp, #20]
 8005724:	e7c3      	b.n	80056ae <_vfiprintf_r+0x176>
 8005726:	4604      	mov	r4, r0
 8005728:	2301      	movs	r3, #1
 800572a:	fb0c 2101 	mla	r1, ip, r1, r2
 800572e:	e7f0      	b.n	8005712 <_vfiprintf_r+0x1da>
 8005730:	ab03      	add	r3, sp, #12
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	462a      	mov	r2, r5
 8005736:	4630      	mov	r0, r6
 8005738:	4b15      	ldr	r3, [pc, #84]	; (8005790 <_vfiprintf_r+0x258>)
 800573a:	a904      	add	r1, sp, #16
 800573c:	f7fd fe2c 	bl	8003398 <_printf_float>
 8005740:	4607      	mov	r7, r0
 8005742:	1c78      	adds	r0, r7, #1
 8005744:	d1d6      	bne.n	80056f4 <_vfiprintf_r+0x1bc>
 8005746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005748:	07d9      	lsls	r1, r3, #31
 800574a:	d405      	bmi.n	8005758 <_vfiprintf_r+0x220>
 800574c:	89ab      	ldrh	r3, [r5, #12]
 800574e:	059a      	lsls	r2, r3, #22
 8005750:	d402      	bmi.n	8005758 <_vfiprintf_r+0x220>
 8005752:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005754:	f000 faaf 	bl	8005cb6 <__retarget_lock_release_recursive>
 8005758:	89ab      	ldrh	r3, [r5, #12]
 800575a:	065b      	lsls	r3, r3, #25
 800575c:	f53f af12 	bmi.w	8005584 <_vfiprintf_r+0x4c>
 8005760:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005762:	e711      	b.n	8005588 <_vfiprintf_r+0x50>
 8005764:	ab03      	add	r3, sp, #12
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	462a      	mov	r2, r5
 800576a:	4630      	mov	r0, r6
 800576c:	4b08      	ldr	r3, [pc, #32]	; (8005790 <_vfiprintf_r+0x258>)
 800576e:	a904      	add	r1, sp, #16
 8005770:	f7fe f8ae 	bl	80038d0 <_printf_i>
 8005774:	e7e4      	b.n	8005740 <_vfiprintf_r+0x208>
 8005776:	bf00      	nop
 8005778:	08006374 	.word	0x08006374
 800577c:	08006394 	.word	0x08006394
 8005780:	08006354 	.word	0x08006354
 8005784:	080061fc 	.word	0x080061fc
 8005788:	08006206 	.word	0x08006206
 800578c:	08003399 	.word	0x08003399
 8005790:	08005513 	.word	0x08005513
 8005794:	08006202 	.word	0x08006202

08005798 <__swbuf_r>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	460e      	mov	r6, r1
 800579c:	4614      	mov	r4, r2
 800579e:	4605      	mov	r5, r0
 80057a0:	b118      	cbz	r0, 80057aa <__swbuf_r+0x12>
 80057a2:	6983      	ldr	r3, [r0, #24]
 80057a4:	b90b      	cbnz	r3, 80057aa <__swbuf_r+0x12>
 80057a6:	f000 f9e7 	bl	8005b78 <__sinit>
 80057aa:	4b21      	ldr	r3, [pc, #132]	; (8005830 <__swbuf_r+0x98>)
 80057ac:	429c      	cmp	r4, r3
 80057ae:	d12b      	bne.n	8005808 <__swbuf_r+0x70>
 80057b0:	686c      	ldr	r4, [r5, #4]
 80057b2:	69a3      	ldr	r3, [r4, #24]
 80057b4:	60a3      	str	r3, [r4, #8]
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	071a      	lsls	r2, r3, #28
 80057ba:	d52f      	bpl.n	800581c <__swbuf_r+0x84>
 80057bc:	6923      	ldr	r3, [r4, #16]
 80057be:	b36b      	cbz	r3, 800581c <__swbuf_r+0x84>
 80057c0:	6923      	ldr	r3, [r4, #16]
 80057c2:	6820      	ldr	r0, [r4, #0]
 80057c4:	b2f6      	uxtb	r6, r6
 80057c6:	1ac0      	subs	r0, r0, r3
 80057c8:	6963      	ldr	r3, [r4, #20]
 80057ca:	4637      	mov	r7, r6
 80057cc:	4283      	cmp	r3, r0
 80057ce:	dc04      	bgt.n	80057da <__swbuf_r+0x42>
 80057d0:	4621      	mov	r1, r4
 80057d2:	4628      	mov	r0, r5
 80057d4:	f000 f93c 	bl	8005a50 <_fflush_r>
 80057d8:	bb30      	cbnz	r0, 8005828 <__swbuf_r+0x90>
 80057da:	68a3      	ldr	r3, [r4, #8]
 80057dc:	3001      	adds	r0, #1
 80057de:	3b01      	subs	r3, #1
 80057e0:	60a3      	str	r3, [r4, #8]
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	6022      	str	r2, [r4, #0]
 80057e8:	701e      	strb	r6, [r3, #0]
 80057ea:	6963      	ldr	r3, [r4, #20]
 80057ec:	4283      	cmp	r3, r0
 80057ee:	d004      	beq.n	80057fa <__swbuf_r+0x62>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	07db      	lsls	r3, r3, #31
 80057f4:	d506      	bpl.n	8005804 <__swbuf_r+0x6c>
 80057f6:	2e0a      	cmp	r6, #10
 80057f8:	d104      	bne.n	8005804 <__swbuf_r+0x6c>
 80057fa:	4621      	mov	r1, r4
 80057fc:	4628      	mov	r0, r5
 80057fe:	f000 f927 	bl	8005a50 <_fflush_r>
 8005802:	b988      	cbnz	r0, 8005828 <__swbuf_r+0x90>
 8005804:	4638      	mov	r0, r7
 8005806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <__swbuf_r+0x9c>)
 800580a:	429c      	cmp	r4, r3
 800580c:	d101      	bne.n	8005812 <__swbuf_r+0x7a>
 800580e:	68ac      	ldr	r4, [r5, #8]
 8005810:	e7cf      	b.n	80057b2 <__swbuf_r+0x1a>
 8005812:	4b09      	ldr	r3, [pc, #36]	; (8005838 <__swbuf_r+0xa0>)
 8005814:	429c      	cmp	r4, r3
 8005816:	bf08      	it	eq
 8005818:	68ec      	ldreq	r4, [r5, #12]
 800581a:	e7ca      	b.n	80057b2 <__swbuf_r+0x1a>
 800581c:	4621      	mov	r1, r4
 800581e:	4628      	mov	r0, r5
 8005820:	f000 f81a 	bl	8005858 <__swsetup_r>
 8005824:	2800      	cmp	r0, #0
 8005826:	d0cb      	beq.n	80057c0 <__swbuf_r+0x28>
 8005828:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800582c:	e7ea      	b.n	8005804 <__swbuf_r+0x6c>
 800582e:	bf00      	nop
 8005830:	08006374 	.word	0x08006374
 8005834:	08006394 	.word	0x08006394
 8005838:	08006354 	.word	0x08006354

0800583c <__ascii_wctomb>:
 800583c:	4603      	mov	r3, r0
 800583e:	4608      	mov	r0, r1
 8005840:	b141      	cbz	r1, 8005854 <__ascii_wctomb+0x18>
 8005842:	2aff      	cmp	r2, #255	; 0xff
 8005844:	d904      	bls.n	8005850 <__ascii_wctomb+0x14>
 8005846:	228a      	movs	r2, #138	; 0x8a
 8005848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	4770      	bx	lr
 8005850:	2001      	movs	r0, #1
 8005852:	700a      	strb	r2, [r1, #0]
 8005854:	4770      	bx	lr
	...

08005858 <__swsetup_r>:
 8005858:	4b32      	ldr	r3, [pc, #200]	; (8005924 <__swsetup_r+0xcc>)
 800585a:	b570      	push	{r4, r5, r6, lr}
 800585c:	681d      	ldr	r5, [r3, #0]
 800585e:	4606      	mov	r6, r0
 8005860:	460c      	mov	r4, r1
 8005862:	b125      	cbz	r5, 800586e <__swsetup_r+0x16>
 8005864:	69ab      	ldr	r3, [r5, #24]
 8005866:	b913      	cbnz	r3, 800586e <__swsetup_r+0x16>
 8005868:	4628      	mov	r0, r5
 800586a:	f000 f985 	bl	8005b78 <__sinit>
 800586e:	4b2e      	ldr	r3, [pc, #184]	; (8005928 <__swsetup_r+0xd0>)
 8005870:	429c      	cmp	r4, r3
 8005872:	d10f      	bne.n	8005894 <__swsetup_r+0x3c>
 8005874:	686c      	ldr	r4, [r5, #4]
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800587c:	0719      	lsls	r1, r3, #28
 800587e:	d42c      	bmi.n	80058da <__swsetup_r+0x82>
 8005880:	06dd      	lsls	r5, r3, #27
 8005882:	d411      	bmi.n	80058a8 <__swsetup_r+0x50>
 8005884:	2309      	movs	r3, #9
 8005886:	6033      	str	r3, [r6, #0]
 8005888:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800588c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005890:	81a3      	strh	r3, [r4, #12]
 8005892:	e03e      	b.n	8005912 <__swsetup_r+0xba>
 8005894:	4b25      	ldr	r3, [pc, #148]	; (800592c <__swsetup_r+0xd4>)
 8005896:	429c      	cmp	r4, r3
 8005898:	d101      	bne.n	800589e <__swsetup_r+0x46>
 800589a:	68ac      	ldr	r4, [r5, #8]
 800589c:	e7eb      	b.n	8005876 <__swsetup_r+0x1e>
 800589e:	4b24      	ldr	r3, [pc, #144]	; (8005930 <__swsetup_r+0xd8>)
 80058a0:	429c      	cmp	r4, r3
 80058a2:	bf08      	it	eq
 80058a4:	68ec      	ldreq	r4, [r5, #12]
 80058a6:	e7e6      	b.n	8005876 <__swsetup_r+0x1e>
 80058a8:	0758      	lsls	r0, r3, #29
 80058aa:	d512      	bpl.n	80058d2 <__swsetup_r+0x7a>
 80058ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058ae:	b141      	cbz	r1, 80058c2 <__swsetup_r+0x6a>
 80058b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058b4:	4299      	cmp	r1, r3
 80058b6:	d002      	beq.n	80058be <__swsetup_r+0x66>
 80058b8:	4630      	mov	r0, r6
 80058ba:	f7ff fb75 	bl	8004fa8 <_free_r>
 80058be:	2300      	movs	r3, #0
 80058c0:	6363      	str	r3, [r4, #52]	; 0x34
 80058c2:	89a3      	ldrh	r3, [r4, #12]
 80058c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058c8:	81a3      	strh	r3, [r4, #12]
 80058ca:	2300      	movs	r3, #0
 80058cc:	6063      	str	r3, [r4, #4]
 80058ce:	6923      	ldr	r3, [r4, #16]
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	89a3      	ldrh	r3, [r4, #12]
 80058d4:	f043 0308 	orr.w	r3, r3, #8
 80058d8:	81a3      	strh	r3, [r4, #12]
 80058da:	6923      	ldr	r3, [r4, #16]
 80058dc:	b94b      	cbnz	r3, 80058f2 <__swsetup_r+0x9a>
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e8:	d003      	beq.n	80058f2 <__swsetup_r+0x9a>
 80058ea:	4621      	mov	r1, r4
 80058ec:	4630      	mov	r0, r6
 80058ee:	f000 fa07 	bl	8005d00 <__smakebuf_r>
 80058f2:	89a0      	ldrh	r0, [r4, #12]
 80058f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058f8:	f010 0301 	ands.w	r3, r0, #1
 80058fc:	d00a      	beq.n	8005914 <__swsetup_r+0xbc>
 80058fe:	2300      	movs	r3, #0
 8005900:	60a3      	str	r3, [r4, #8]
 8005902:	6963      	ldr	r3, [r4, #20]
 8005904:	425b      	negs	r3, r3
 8005906:	61a3      	str	r3, [r4, #24]
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	b943      	cbnz	r3, 800591e <__swsetup_r+0xc6>
 800590c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005910:	d1ba      	bne.n	8005888 <__swsetup_r+0x30>
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	0781      	lsls	r1, r0, #30
 8005916:	bf58      	it	pl
 8005918:	6963      	ldrpl	r3, [r4, #20]
 800591a:	60a3      	str	r3, [r4, #8]
 800591c:	e7f4      	b.n	8005908 <__swsetup_r+0xb0>
 800591e:	2000      	movs	r0, #0
 8005920:	e7f7      	b.n	8005912 <__swsetup_r+0xba>
 8005922:	bf00      	nop
 8005924:	2000010c 	.word	0x2000010c
 8005928:	08006374 	.word	0x08006374
 800592c:	08006394 	.word	0x08006394
 8005930:	08006354 	.word	0x08006354

08005934 <abort>:
 8005934:	2006      	movs	r0, #6
 8005936:	b508      	push	{r3, lr}
 8005938:	f000 fa52 	bl	8005de0 <raise>
 800593c:	2001      	movs	r0, #1
 800593e:	f7fc f99b 	bl	8001c78 <_exit>
	...

08005944 <__sflush_r>:
 8005944:	898a      	ldrh	r2, [r1, #12]
 8005946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800594a:	4605      	mov	r5, r0
 800594c:	0710      	lsls	r0, r2, #28
 800594e:	460c      	mov	r4, r1
 8005950:	d458      	bmi.n	8005a04 <__sflush_r+0xc0>
 8005952:	684b      	ldr	r3, [r1, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	dc05      	bgt.n	8005964 <__sflush_r+0x20>
 8005958:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800595a:	2b00      	cmp	r3, #0
 800595c:	dc02      	bgt.n	8005964 <__sflush_r+0x20>
 800595e:	2000      	movs	r0, #0
 8005960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005966:	2e00      	cmp	r6, #0
 8005968:	d0f9      	beq.n	800595e <__sflush_r+0x1a>
 800596a:	2300      	movs	r3, #0
 800596c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005970:	682f      	ldr	r7, [r5, #0]
 8005972:	602b      	str	r3, [r5, #0]
 8005974:	d032      	beq.n	80059dc <__sflush_r+0x98>
 8005976:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	075a      	lsls	r2, r3, #29
 800597c:	d505      	bpl.n	800598a <__sflush_r+0x46>
 800597e:	6863      	ldr	r3, [r4, #4]
 8005980:	1ac0      	subs	r0, r0, r3
 8005982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005984:	b10b      	cbz	r3, 800598a <__sflush_r+0x46>
 8005986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005988:	1ac0      	subs	r0, r0, r3
 800598a:	2300      	movs	r3, #0
 800598c:	4602      	mov	r2, r0
 800598e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005990:	4628      	mov	r0, r5
 8005992:	6a21      	ldr	r1, [r4, #32]
 8005994:	47b0      	blx	r6
 8005996:	1c43      	adds	r3, r0, #1
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	d106      	bne.n	80059aa <__sflush_r+0x66>
 800599c:	6829      	ldr	r1, [r5, #0]
 800599e:	291d      	cmp	r1, #29
 80059a0:	d82c      	bhi.n	80059fc <__sflush_r+0xb8>
 80059a2:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <__sflush_r+0x108>)
 80059a4:	40ca      	lsrs	r2, r1
 80059a6:	07d6      	lsls	r6, r2, #31
 80059a8:	d528      	bpl.n	80059fc <__sflush_r+0xb8>
 80059aa:	2200      	movs	r2, #0
 80059ac:	6062      	str	r2, [r4, #4]
 80059ae:	6922      	ldr	r2, [r4, #16]
 80059b0:	04d9      	lsls	r1, r3, #19
 80059b2:	6022      	str	r2, [r4, #0]
 80059b4:	d504      	bpl.n	80059c0 <__sflush_r+0x7c>
 80059b6:	1c42      	adds	r2, r0, #1
 80059b8:	d101      	bne.n	80059be <__sflush_r+0x7a>
 80059ba:	682b      	ldr	r3, [r5, #0]
 80059bc:	b903      	cbnz	r3, 80059c0 <__sflush_r+0x7c>
 80059be:	6560      	str	r0, [r4, #84]	; 0x54
 80059c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059c2:	602f      	str	r7, [r5, #0]
 80059c4:	2900      	cmp	r1, #0
 80059c6:	d0ca      	beq.n	800595e <__sflush_r+0x1a>
 80059c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059cc:	4299      	cmp	r1, r3
 80059ce:	d002      	beq.n	80059d6 <__sflush_r+0x92>
 80059d0:	4628      	mov	r0, r5
 80059d2:	f7ff fae9 	bl	8004fa8 <_free_r>
 80059d6:	2000      	movs	r0, #0
 80059d8:	6360      	str	r0, [r4, #52]	; 0x34
 80059da:	e7c1      	b.n	8005960 <__sflush_r+0x1c>
 80059dc:	6a21      	ldr	r1, [r4, #32]
 80059de:	2301      	movs	r3, #1
 80059e0:	4628      	mov	r0, r5
 80059e2:	47b0      	blx	r6
 80059e4:	1c41      	adds	r1, r0, #1
 80059e6:	d1c7      	bne.n	8005978 <__sflush_r+0x34>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0c4      	beq.n	8005978 <__sflush_r+0x34>
 80059ee:	2b1d      	cmp	r3, #29
 80059f0:	d001      	beq.n	80059f6 <__sflush_r+0xb2>
 80059f2:	2b16      	cmp	r3, #22
 80059f4:	d101      	bne.n	80059fa <__sflush_r+0xb6>
 80059f6:	602f      	str	r7, [r5, #0]
 80059f8:	e7b1      	b.n	800595e <__sflush_r+0x1a>
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a00:	81a3      	strh	r3, [r4, #12]
 8005a02:	e7ad      	b.n	8005960 <__sflush_r+0x1c>
 8005a04:	690f      	ldr	r7, [r1, #16]
 8005a06:	2f00      	cmp	r7, #0
 8005a08:	d0a9      	beq.n	800595e <__sflush_r+0x1a>
 8005a0a:	0793      	lsls	r3, r2, #30
 8005a0c:	bf18      	it	ne
 8005a0e:	2300      	movne	r3, #0
 8005a10:	680e      	ldr	r6, [r1, #0]
 8005a12:	bf08      	it	eq
 8005a14:	694b      	ldreq	r3, [r1, #20]
 8005a16:	eba6 0807 	sub.w	r8, r6, r7
 8005a1a:	600f      	str	r7, [r1, #0]
 8005a1c:	608b      	str	r3, [r1, #8]
 8005a1e:	f1b8 0f00 	cmp.w	r8, #0
 8005a22:	dd9c      	ble.n	800595e <__sflush_r+0x1a>
 8005a24:	4643      	mov	r3, r8
 8005a26:	463a      	mov	r2, r7
 8005a28:	4628      	mov	r0, r5
 8005a2a:	6a21      	ldr	r1, [r4, #32]
 8005a2c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a2e:	47b0      	blx	r6
 8005a30:	2800      	cmp	r0, #0
 8005a32:	dc06      	bgt.n	8005a42 <__sflush_r+0xfe>
 8005a34:	89a3      	ldrh	r3, [r4, #12]
 8005a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a3e:	81a3      	strh	r3, [r4, #12]
 8005a40:	e78e      	b.n	8005960 <__sflush_r+0x1c>
 8005a42:	4407      	add	r7, r0
 8005a44:	eba8 0800 	sub.w	r8, r8, r0
 8005a48:	e7e9      	b.n	8005a1e <__sflush_r+0xda>
 8005a4a:	bf00      	nop
 8005a4c:	20400001 	.word	0x20400001

08005a50 <_fflush_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	690b      	ldr	r3, [r1, #16]
 8005a54:	4605      	mov	r5, r0
 8005a56:	460c      	mov	r4, r1
 8005a58:	b913      	cbnz	r3, 8005a60 <_fflush_r+0x10>
 8005a5a:	2500      	movs	r5, #0
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	b118      	cbz	r0, 8005a6a <_fflush_r+0x1a>
 8005a62:	6983      	ldr	r3, [r0, #24]
 8005a64:	b90b      	cbnz	r3, 8005a6a <_fflush_r+0x1a>
 8005a66:	f000 f887 	bl	8005b78 <__sinit>
 8005a6a:	4b14      	ldr	r3, [pc, #80]	; (8005abc <_fflush_r+0x6c>)
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	d11b      	bne.n	8005aa8 <_fflush_r+0x58>
 8005a70:	686c      	ldr	r4, [r5, #4]
 8005a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0ef      	beq.n	8005a5a <_fflush_r+0xa>
 8005a7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a7c:	07d0      	lsls	r0, r2, #31
 8005a7e:	d404      	bmi.n	8005a8a <_fflush_r+0x3a>
 8005a80:	0599      	lsls	r1, r3, #22
 8005a82:	d402      	bmi.n	8005a8a <_fflush_r+0x3a>
 8005a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a86:	f000 f915 	bl	8005cb4 <__retarget_lock_acquire_recursive>
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	f7ff ff59 	bl	8005944 <__sflush_r>
 8005a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a94:	4605      	mov	r5, r0
 8005a96:	07da      	lsls	r2, r3, #31
 8005a98:	d4e0      	bmi.n	8005a5c <_fflush_r+0xc>
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	059b      	lsls	r3, r3, #22
 8005a9e:	d4dd      	bmi.n	8005a5c <_fflush_r+0xc>
 8005aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aa2:	f000 f908 	bl	8005cb6 <__retarget_lock_release_recursive>
 8005aa6:	e7d9      	b.n	8005a5c <_fflush_r+0xc>
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <_fflush_r+0x70>)
 8005aaa:	429c      	cmp	r4, r3
 8005aac:	d101      	bne.n	8005ab2 <_fflush_r+0x62>
 8005aae:	68ac      	ldr	r4, [r5, #8]
 8005ab0:	e7df      	b.n	8005a72 <_fflush_r+0x22>
 8005ab2:	4b04      	ldr	r3, [pc, #16]	; (8005ac4 <_fflush_r+0x74>)
 8005ab4:	429c      	cmp	r4, r3
 8005ab6:	bf08      	it	eq
 8005ab8:	68ec      	ldreq	r4, [r5, #12]
 8005aba:	e7da      	b.n	8005a72 <_fflush_r+0x22>
 8005abc:	08006374 	.word	0x08006374
 8005ac0:	08006394 	.word	0x08006394
 8005ac4:	08006354 	.word	0x08006354

08005ac8 <std>:
 8005ac8:	2300      	movs	r3, #0
 8005aca:	b510      	push	{r4, lr}
 8005acc:	4604      	mov	r4, r0
 8005ace:	e9c0 3300 	strd	r3, r3, [r0]
 8005ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ad6:	6083      	str	r3, [r0, #8]
 8005ad8:	8181      	strh	r1, [r0, #12]
 8005ada:	6643      	str	r3, [r0, #100]	; 0x64
 8005adc:	81c2      	strh	r2, [r0, #14]
 8005ade:	6183      	str	r3, [r0, #24]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	305c      	adds	r0, #92	; 0x5c
 8005ae6:	f7fd fbb1 	bl	800324c <memset>
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <std+0x38>)
 8005aec:	6224      	str	r4, [r4, #32]
 8005aee:	6263      	str	r3, [r4, #36]	; 0x24
 8005af0:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <std+0x3c>)
 8005af2:	62a3      	str	r3, [r4, #40]	; 0x28
 8005af4:	4b04      	ldr	r3, [pc, #16]	; (8005b08 <std+0x40>)
 8005af6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005af8:	4b04      	ldr	r3, [pc, #16]	; (8005b0c <std+0x44>)
 8005afa:	6323      	str	r3, [r4, #48]	; 0x30
 8005afc:	bd10      	pop	{r4, pc}
 8005afe:	bf00      	nop
 8005b00:	08005e19 	.word	0x08005e19
 8005b04:	08005e3b 	.word	0x08005e3b
 8005b08:	08005e73 	.word	0x08005e73
 8005b0c:	08005e97 	.word	0x08005e97

08005b10 <_cleanup_r>:
 8005b10:	4901      	ldr	r1, [pc, #4]	; (8005b18 <_cleanup_r+0x8>)
 8005b12:	f000 b8af 	b.w	8005c74 <_fwalk_reent>
 8005b16:	bf00      	nop
 8005b18:	08005a51 	.word	0x08005a51

08005b1c <__sfmoreglue>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	2568      	movs	r5, #104	; 0x68
 8005b20:	1e4a      	subs	r2, r1, #1
 8005b22:	4355      	muls	r5, r2
 8005b24:	460e      	mov	r6, r1
 8005b26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b2a:	f7ff fa89 	bl	8005040 <_malloc_r>
 8005b2e:	4604      	mov	r4, r0
 8005b30:	b140      	cbz	r0, 8005b44 <__sfmoreglue+0x28>
 8005b32:	2100      	movs	r1, #0
 8005b34:	e9c0 1600 	strd	r1, r6, [r0]
 8005b38:	300c      	adds	r0, #12
 8005b3a:	60a0      	str	r0, [r4, #8]
 8005b3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b40:	f7fd fb84 	bl	800324c <memset>
 8005b44:	4620      	mov	r0, r4
 8005b46:	bd70      	pop	{r4, r5, r6, pc}

08005b48 <__sfp_lock_acquire>:
 8005b48:	4801      	ldr	r0, [pc, #4]	; (8005b50 <__sfp_lock_acquire+0x8>)
 8005b4a:	f000 b8b3 	b.w	8005cb4 <__retarget_lock_acquire_recursive>
 8005b4e:	bf00      	nop
 8005b50:	2000037c 	.word	0x2000037c

08005b54 <__sfp_lock_release>:
 8005b54:	4801      	ldr	r0, [pc, #4]	; (8005b5c <__sfp_lock_release+0x8>)
 8005b56:	f000 b8ae 	b.w	8005cb6 <__retarget_lock_release_recursive>
 8005b5a:	bf00      	nop
 8005b5c:	2000037c 	.word	0x2000037c

08005b60 <__sinit_lock_acquire>:
 8005b60:	4801      	ldr	r0, [pc, #4]	; (8005b68 <__sinit_lock_acquire+0x8>)
 8005b62:	f000 b8a7 	b.w	8005cb4 <__retarget_lock_acquire_recursive>
 8005b66:	bf00      	nop
 8005b68:	20000377 	.word	0x20000377

08005b6c <__sinit_lock_release>:
 8005b6c:	4801      	ldr	r0, [pc, #4]	; (8005b74 <__sinit_lock_release+0x8>)
 8005b6e:	f000 b8a2 	b.w	8005cb6 <__retarget_lock_release_recursive>
 8005b72:	bf00      	nop
 8005b74:	20000377 	.word	0x20000377

08005b78 <__sinit>:
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	f7ff fff0 	bl	8005b60 <__sinit_lock_acquire>
 8005b80:	69a3      	ldr	r3, [r4, #24]
 8005b82:	b11b      	cbz	r3, 8005b8c <__sinit+0x14>
 8005b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b88:	f7ff bff0 	b.w	8005b6c <__sinit_lock_release>
 8005b8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b90:	6523      	str	r3, [r4, #80]	; 0x50
 8005b92:	4b13      	ldr	r3, [pc, #76]	; (8005be0 <__sinit+0x68>)
 8005b94:	4a13      	ldr	r2, [pc, #76]	; (8005be4 <__sinit+0x6c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b9a:	42a3      	cmp	r3, r4
 8005b9c:	bf08      	it	eq
 8005b9e:	2301      	moveq	r3, #1
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	bf08      	it	eq
 8005ba4:	61a3      	streq	r3, [r4, #24]
 8005ba6:	f000 f81f 	bl	8005be8 <__sfp>
 8005baa:	6060      	str	r0, [r4, #4]
 8005bac:	4620      	mov	r0, r4
 8005bae:	f000 f81b 	bl	8005be8 <__sfp>
 8005bb2:	60a0      	str	r0, [r4, #8]
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f000 f817 	bl	8005be8 <__sfp>
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2104      	movs	r1, #4
 8005bbe:	60e0      	str	r0, [r4, #12]
 8005bc0:	6860      	ldr	r0, [r4, #4]
 8005bc2:	f7ff ff81 	bl	8005ac8 <std>
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	2109      	movs	r1, #9
 8005bca:	68a0      	ldr	r0, [r4, #8]
 8005bcc:	f7ff ff7c 	bl	8005ac8 <std>
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	2112      	movs	r1, #18
 8005bd4:	68e0      	ldr	r0, [r4, #12]
 8005bd6:	f7ff ff77 	bl	8005ac8 <std>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	61a3      	str	r3, [r4, #24]
 8005bde:	e7d1      	b.n	8005b84 <__sinit+0xc>
 8005be0:	08005fd0 	.word	0x08005fd0
 8005be4:	08005b11 	.word	0x08005b11

08005be8 <__sfp>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	4607      	mov	r7, r0
 8005bec:	f7ff ffac 	bl	8005b48 <__sfp_lock_acquire>
 8005bf0:	4b1e      	ldr	r3, [pc, #120]	; (8005c6c <__sfp+0x84>)
 8005bf2:	681e      	ldr	r6, [r3, #0]
 8005bf4:	69b3      	ldr	r3, [r6, #24]
 8005bf6:	b913      	cbnz	r3, 8005bfe <__sfp+0x16>
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f7ff ffbd 	bl	8005b78 <__sinit>
 8005bfe:	3648      	adds	r6, #72	; 0x48
 8005c00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	d503      	bpl.n	8005c10 <__sfp+0x28>
 8005c08:	6833      	ldr	r3, [r6, #0]
 8005c0a:	b30b      	cbz	r3, 8005c50 <__sfp+0x68>
 8005c0c:	6836      	ldr	r6, [r6, #0]
 8005c0e:	e7f7      	b.n	8005c00 <__sfp+0x18>
 8005c10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c14:	b9d5      	cbnz	r5, 8005c4c <__sfp+0x64>
 8005c16:	4b16      	ldr	r3, [pc, #88]	; (8005c70 <__sfp+0x88>)
 8005c18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c1c:	60e3      	str	r3, [r4, #12]
 8005c1e:	6665      	str	r5, [r4, #100]	; 0x64
 8005c20:	f000 f847 	bl	8005cb2 <__retarget_lock_init_recursive>
 8005c24:	f7ff ff96 	bl	8005b54 <__sfp_lock_release>
 8005c28:	2208      	movs	r2, #8
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c34:	6025      	str	r5, [r4, #0]
 8005c36:	61a5      	str	r5, [r4, #24]
 8005c38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c3c:	f7fd fb06 	bl	800324c <memset>
 8005c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c48:	4620      	mov	r0, r4
 8005c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c4c:	3468      	adds	r4, #104	; 0x68
 8005c4e:	e7d9      	b.n	8005c04 <__sfp+0x1c>
 8005c50:	2104      	movs	r1, #4
 8005c52:	4638      	mov	r0, r7
 8005c54:	f7ff ff62 	bl	8005b1c <__sfmoreglue>
 8005c58:	4604      	mov	r4, r0
 8005c5a:	6030      	str	r0, [r6, #0]
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	d1d5      	bne.n	8005c0c <__sfp+0x24>
 8005c60:	f7ff ff78 	bl	8005b54 <__sfp_lock_release>
 8005c64:	230c      	movs	r3, #12
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	e7ee      	b.n	8005c48 <__sfp+0x60>
 8005c6a:	bf00      	nop
 8005c6c:	08005fd0 	.word	0x08005fd0
 8005c70:	ffff0001 	.word	0xffff0001

08005c74 <_fwalk_reent>:
 8005c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c78:	4606      	mov	r6, r0
 8005c7a:	4688      	mov	r8, r1
 8005c7c:	2700      	movs	r7, #0
 8005c7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c86:	f1b9 0901 	subs.w	r9, r9, #1
 8005c8a:	d505      	bpl.n	8005c98 <_fwalk_reent+0x24>
 8005c8c:	6824      	ldr	r4, [r4, #0]
 8005c8e:	2c00      	cmp	r4, #0
 8005c90:	d1f7      	bne.n	8005c82 <_fwalk_reent+0xe>
 8005c92:	4638      	mov	r0, r7
 8005c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c98:	89ab      	ldrh	r3, [r5, #12]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d907      	bls.n	8005cae <_fwalk_reent+0x3a>
 8005c9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	d003      	beq.n	8005cae <_fwalk_reent+0x3a>
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	4630      	mov	r0, r6
 8005caa:	47c0      	blx	r8
 8005cac:	4307      	orrs	r7, r0
 8005cae:	3568      	adds	r5, #104	; 0x68
 8005cb0:	e7e9      	b.n	8005c86 <_fwalk_reent+0x12>

08005cb2 <__retarget_lock_init_recursive>:
 8005cb2:	4770      	bx	lr

08005cb4 <__retarget_lock_acquire_recursive>:
 8005cb4:	4770      	bx	lr

08005cb6 <__retarget_lock_release_recursive>:
 8005cb6:	4770      	bx	lr

08005cb8 <__swhatbuf_r>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	460e      	mov	r6, r1
 8005cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc0:	4614      	mov	r4, r2
 8005cc2:	2900      	cmp	r1, #0
 8005cc4:	461d      	mov	r5, r3
 8005cc6:	b096      	sub	sp, #88	; 0x58
 8005cc8:	da07      	bge.n	8005cda <__swhatbuf_r+0x22>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	602b      	str	r3, [r5, #0]
 8005cce:	89b3      	ldrh	r3, [r6, #12]
 8005cd0:	061a      	lsls	r2, r3, #24
 8005cd2:	d410      	bmi.n	8005cf6 <__swhatbuf_r+0x3e>
 8005cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cd8:	e00e      	b.n	8005cf8 <__swhatbuf_r+0x40>
 8005cda:	466a      	mov	r2, sp
 8005cdc:	f000 f902 	bl	8005ee4 <_fstat_r>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	dbf2      	blt.n	8005cca <__swhatbuf_r+0x12>
 8005ce4:	9a01      	ldr	r2, [sp, #4]
 8005ce6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cee:	425a      	negs	r2, r3
 8005cf0:	415a      	adcs	r2, r3
 8005cf2:	602a      	str	r2, [r5, #0]
 8005cf4:	e7ee      	b.n	8005cd4 <__swhatbuf_r+0x1c>
 8005cf6:	2340      	movs	r3, #64	; 0x40
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	6023      	str	r3, [r4, #0]
 8005cfc:	b016      	add	sp, #88	; 0x58
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}

08005d00 <__smakebuf_r>:
 8005d00:	898b      	ldrh	r3, [r1, #12]
 8005d02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d04:	079d      	lsls	r5, r3, #30
 8005d06:	4606      	mov	r6, r0
 8005d08:	460c      	mov	r4, r1
 8005d0a:	d507      	bpl.n	8005d1c <__smakebuf_r+0x1c>
 8005d0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	6123      	str	r3, [r4, #16]
 8005d14:	2301      	movs	r3, #1
 8005d16:	6163      	str	r3, [r4, #20]
 8005d18:	b002      	add	sp, #8
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	466a      	mov	r2, sp
 8005d1e:	ab01      	add	r3, sp, #4
 8005d20:	f7ff ffca 	bl	8005cb8 <__swhatbuf_r>
 8005d24:	9900      	ldr	r1, [sp, #0]
 8005d26:	4605      	mov	r5, r0
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f7ff f989 	bl	8005040 <_malloc_r>
 8005d2e:	b948      	cbnz	r0, 8005d44 <__smakebuf_r+0x44>
 8005d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d34:	059a      	lsls	r2, r3, #22
 8005d36:	d4ef      	bmi.n	8005d18 <__smakebuf_r+0x18>
 8005d38:	f023 0303 	bic.w	r3, r3, #3
 8005d3c:	f043 0302 	orr.w	r3, r3, #2
 8005d40:	81a3      	strh	r3, [r4, #12]
 8005d42:	e7e3      	b.n	8005d0c <__smakebuf_r+0xc>
 8005d44:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <__smakebuf_r+0x7c>)
 8005d46:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	6020      	str	r0, [r4, #0]
 8005d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d50:	81a3      	strh	r3, [r4, #12]
 8005d52:	9b00      	ldr	r3, [sp, #0]
 8005d54:	6120      	str	r0, [r4, #16]
 8005d56:	6163      	str	r3, [r4, #20]
 8005d58:	9b01      	ldr	r3, [sp, #4]
 8005d5a:	b15b      	cbz	r3, 8005d74 <__smakebuf_r+0x74>
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d62:	f000 f8d1 	bl	8005f08 <_isatty_r>
 8005d66:	b128      	cbz	r0, 8005d74 <__smakebuf_r+0x74>
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	f043 0301 	orr.w	r3, r3, #1
 8005d72:	81a3      	strh	r3, [r4, #12]
 8005d74:	89a0      	ldrh	r0, [r4, #12]
 8005d76:	4305      	orrs	r5, r0
 8005d78:	81a5      	strh	r5, [r4, #12]
 8005d7a:	e7cd      	b.n	8005d18 <__smakebuf_r+0x18>
 8005d7c:	08005b11 	.word	0x08005b11

08005d80 <_malloc_usable_size_r>:
 8005d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d84:	1f18      	subs	r0, r3, #4
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	bfbc      	itt	lt
 8005d8a:	580b      	ldrlt	r3, [r1, r0]
 8005d8c:	18c0      	addlt	r0, r0, r3
 8005d8e:	4770      	bx	lr

08005d90 <_raise_r>:
 8005d90:	291f      	cmp	r1, #31
 8005d92:	b538      	push	{r3, r4, r5, lr}
 8005d94:	4604      	mov	r4, r0
 8005d96:	460d      	mov	r5, r1
 8005d98:	d904      	bls.n	8005da4 <_raise_r+0x14>
 8005d9a:	2316      	movs	r3, #22
 8005d9c:	6003      	str	r3, [r0, #0]
 8005d9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005da2:	bd38      	pop	{r3, r4, r5, pc}
 8005da4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005da6:	b112      	cbz	r2, 8005dae <_raise_r+0x1e>
 8005da8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005dac:	b94b      	cbnz	r3, 8005dc2 <_raise_r+0x32>
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 f830 	bl	8005e14 <_getpid_r>
 8005db4:	462a      	mov	r2, r5
 8005db6:	4601      	mov	r1, r0
 8005db8:	4620      	mov	r0, r4
 8005dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dbe:	f000 b817 	b.w	8005df0 <_kill_r>
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d00a      	beq.n	8005ddc <_raise_r+0x4c>
 8005dc6:	1c59      	adds	r1, r3, #1
 8005dc8:	d103      	bne.n	8005dd2 <_raise_r+0x42>
 8005dca:	2316      	movs	r3, #22
 8005dcc:	6003      	str	r3, [r0, #0]
 8005dce:	2001      	movs	r0, #1
 8005dd0:	e7e7      	b.n	8005da2 <_raise_r+0x12>
 8005dd2:	2400      	movs	r4, #0
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005dda:	4798      	blx	r3
 8005ddc:	2000      	movs	r0, #0
 8005dde:	e7e0      	b.n	8005da2 <_raise_r+0x12>

08005de0 <raise>:
 8005de0:	4b02      	ldr	r3, [pc, #8]	; (8005dec <raise+0xc>)
 8005de2:	4601      	mov	r1, r0
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	f7ff bfd3 	b.w	8005d90 <_raise_r>
 8005dea:	bf00      	nop
 8005dec:	2000010c 	.word	0x2000010c

08005df0 <_kill_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	2300      	movs	r3, #0
 8005df4:	4d06      	ldr	r5, [pc, #24]	; (8005e10 <_kill_r+0x20>)
 8005df6:	4604      	mov	r4, r0
 8005df8:	4608      	mov	r0, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	602b      	str	r3, [r5, #0]
 8005dfe:	f7fb ff2b 	bl	8001c58 <_kill>
 8005e02:	1c43      	adds	r3, r0, #1
 8005e04:	d102      	bne.n	8005e0c <_kill_r+0x1c>
 8005e06:	682b      	ldr	r3, [r5, #0]
 8005e08:	b103      	cbz	r3, 8005e0c <_kill_r+0x1c>
 8005e0a:	6023      	str	r3, [r4, #0]
 8005e0c:	bd38      	pop	{r3, r4, r5, pc}
 8005e0e:	bf00      	nop
 8005e10:	20000370 	.word	0x20000370

08005e14 <_getpid_r>:
 8005e14:	f7fb bf19 	b.w	8001c4a <_getpid>

08005e18 <__sread>:
 8005e18:	b510      	push	{r4, lr}
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e20:	f000 f894 	bl	8005f4c <_read_r>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	bfab      	itete	ge
 8005e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e2c:	181b      	addge	r3, r3, r0
 8005e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e32:	bfac      	ite	ge
 8005e34:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e36:	81a3      	strhlt	r3, [r4, #12]
 8005e38:	bd10      	pop	{r4, pc}

08005e3a <__swrite>:
 8005e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3e:	461f      	mov	r7, r3
 8005e40:	898b      	ldrh	r3, [r1, #12]
 8005e42:	4605      	mov	r5, r0
 8005e44:	05db      	lsls	r3, r3, #23
 8005e46:	460c      	mov	r4, r1
 8005e48:	4616      	mov	r6, r2
 8005e4a:	d505      	bpl.n	8005e58 <__swrite+0x1e>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e54:	f000 f868 	bl	8005f28 <_lseek_r>
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	4632      	mov	r2, r6
 8005e5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	4628      	mov	r0, r5
 8005e64:	463b      	mov	r3, r7
 8005e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e6e:	f000 b817 	b.w	8005ea0 <_write_r>

08005e72 <__sseek>:
 8005e72:	b510      	push	{r4, lr}
 8005e74:	460c      	mov	r4, r1
 8005e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e7a:	f000 f855 	bl	8005f28 <_lseek_r>
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	89a3      	ldrh	r3, [r4, #12]
 8005e82:	bf15      	itete	ne
 8005e84:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e8e:	81a3      	strheq	r3, [r4, #12]
 8005e90:	bf18      	it	ne
 8005e92:	81a3      	strhne	r3, [r4, #12]
 8005e94:	bd10      	pop	{r4, pc}

08005e96 <__sclose>:
 8005e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9a:	f000 b813 	b.w	8005ec4 <_close_r>
	...

08005ea0 <_write_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	4608      	mov	r0, r1
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	4d05      	ldr	r5, [pc, #20]	; (8005ec0 <_write_r+0x20>)
 8005eac:	602a      	str	r2, [r5, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f7fb ff09 	bl	8001cc6 <_write>
 8005eb4:	1c43      	adds	r3, r0, #1
 8005eb6:	d102      	bne.n	8005ebe <_write_r+0x1e>
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	b103      	cbz	r3, 8005ebe <_write_r+0x1e>
 8005ebc:	6023      	str	r3, [r4, #0]
 8005ebe:	bd38      	pop	{r3, r4, r5, pc}
 8005ec0:	20000370 	.word	0x20000370

08005ec4 <_close_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	4d05      	ldr	r5, [pc, #20]	; (8005ee0 <_close_r+0x1c>)
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	602b      	str	r3, [r5, #0]
 8005ed0:	f7fb ff15 	bl	8001cfe <_close>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d102      	bne.n	8005ede <_close_r+0x1a>
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	b103      	cbz	r3, 8005ede <_close_r+0x1a>
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	20000370 	.word	0x20000370

08005ee4 <_fstat_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	4d06      	ldr	r5, [pc, #24]	; (8005f04 <_fstat_r+0x20>)
 8005eea:	4604      	mov	r4, r0
 8005eec:	4608      	mov	r0, r1
 8005eee:	4611      	mov	r1, r2
 8005ef0:	602b      	str	r3, [r5, #0]
 8005ef2:	f7fb ff0f 	bl	8001d14 <_fstat>
 8005ef6:	1c43      	adds	r3, r0, #1
 8005ef8:	d102      	bne.n	8005f00 <_fstat_r+0x1c>
 8005efa:	682b      	ldr	r3, [r5, #0]
 8005efc:	b103      	cbz	r3, 8005f00 <_fstat_r+0x1c>
 8005efe:	6023      	str	r3, [r4, #0]
 8005f00:	bd38      	pop	{r3, r4, r5, pc}
 8005f02:	bf00      	nop
 8005f04:	20000370 	.word	0x20000370

08005f08 <_isatty_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4d05      	ldr	r5, [pc, #20]	; (8005f24 <_isatty_r+0x1c>)
 8005f0e:	4604      	mov	r4, r0
 8005f10:	4608      	mov	r0, r1
 8005f12:	602b      	str	r3, [r5, #0]
 8005f14:	f7fb ff0d 	bl	8001d32 <_isatty>
 8005f18:	1c43      	adds	r3, r0, #1
 8005f1a:	d102      	bne.n	8005f22 <_isatty_r+0x1a>
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	b103      	cbz	r3, 8005f22 <_isatty_r+0x1a>
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	20000370 	.word	0x20000370

08005f28 <_lseek_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	4608      	mov	r0, r1
 8005f2e:	4611      	mov	r1, r2
 8005f30:	2200      	movs	r2, #0
 8005f32:	4d05      	ldr	r5, [pc, #20]	; (8005f48 <_lseek_r+0x20>)
 8005f34:	602a      	str	r2, [r5, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	f7fb ff05 	bl	8001d46 <_lseek>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d102      	bne.n	8005f46 <_lseek_r+0x1e>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	b103      	cbz	r3, 8005f46 <_lseek_r+0x1e>
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
 8005f48:	20000370 	.word	0x20000370

08005f4c <_read_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4608      	mov	r0, r1
 8005f52:	4611      	mov	r1, r2
 8005f54:	2200      	movs	r2, #0
 8005f56:	4d05      	ldr	r5, [pc, #20]	; (8005f6c <_read_r+0x20>)
 8005f58:	602a      	str	r2, [r5, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f7fb fe96 	bl	8001c8c <_read>
 8005f60:	1c43      	adds	r3, r0, #1
 8005f62:	d102      	bne.n	8005f6a <_read_r+0x1e>
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	b103      	cbz	r3, 8005f6a <_read_r+0x1e>
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
 8005f6c:	20000370 	.word	0x20000370

08005f70 <_init>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	bf00      	nop
 8005f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f76:	bc08      	pop	{r3}
 8005f78:	469e      	mov	lr, r3
 8005f7a:	4770      	bx	lr

08005f7c <_fini>:
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	bf00      	nop
 8005f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f82:	bc08      	pop	{r3}
 8005f84:	469e      	mov	lr, r3
 8005f86:	4770      	bx	lr
