
tank_level_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  080072b0  080072b0  000172b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007714  08007714  000202dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007714  08007714  000202dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007714  08007714  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007714  08007714  00017714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800771c  0800771c  0001771c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08007724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200002dc  08007a00  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08007a00  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dcd9  00000000  00000000  00020305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023b4  00000000  00000000  0002dfde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  00030398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  00031050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b58  00000000  00000000  00031c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb2d  00000000  00000000  0004a758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fdf5  00000000  00000000  00057285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e707a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004630  00000000  00000000  000e70d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002dc 	.word	0x200002dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007298 	.word	0x08007298

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002e0 	.word	0x200002e0
 800014c:	08007298 	.word	0x08007298

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <_Z14FIRFilter_InitP9FIRFilter>:

#include "HeightSensor.h"


void FIRFilter_Init(FIRFilter *fir)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2b3e      	cmp	r3, #62	; 0x3e
 8000efc:	d809      	bhi.n	8000f12 <_Z14FIRFilter_InitP9FIRFilter+0x26>
    fir->buf[n] = 0.0f;
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f04f 0100 	mov.w	r1, #0
 8000f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e7f2      	b.n	8000ef8 <_Z14FIRFilter_InitP9FIRFilter+0xc>
  fir->bufIndex = 0;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  fir->out = 0.0f;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f04f 0200 	mov.w	r2, #0
 8000f20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
	...

08000f30 <_Z16FIRFilter_UpdateP9FIRFilterf>:


float FIRFilter_Update(FIRFilter *fir, float inp)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  fir->buf[fir->bufIndex] = inp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000f40:	4619      	mov	r1, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

  fir->bufIndex++;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000f50:	3301      	adds	r3, #1
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  if(fir->bufIndex == FILTER_NUM_COEFFS)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000f60:	2b3f      	cmp	r3, #63	; 0x3f
 8000f62:	d103      	bne.n	8000f6c <_Z16FIRFilter_UpdateP9FIRFilterf+0x3c>
    fir->bufIndex = 0;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc

  fir->out = 0.0f;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  uint8_t sumIndex = fir->bufIndex;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000f7c:	73fb      	strb	r3, [r7, #15]

  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73bb      	strb	r3, [r7, #14]
 8000f82:	7bbb      	ldrb	r3, [r7, #14]
 8000f84:	2b3e      	cmp	r3, #62	; 0x3e
 8000f86:	d824      	bhi.n	8000fd2 <_Z16FIRFilter_UpdateP9FIRFilterf+0xa2>
  {
    if (sumIndex > 0) sumIndex--;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <_Z16FIRFilter_UpdateP9FIRFilterf+0x66>
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	e001      	b.n	8000f9a <_Z16FIRFilter_UpdateP9FIRFilterf+0x6a>
    else sumIndex = FILTER_NUM_COEFFS - 1;
 8000f96:	233e      	movs	r3, #62	; 0x3e
 8000f98:	73fb      	strb	r3, [r7, #15]
    fir->out += FIR_COEFFS[n] * fir->buf[sumIndex];
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <_Z16FIRFilter_UpdateP9FIRFilterf+0xb0>)
 8000fa4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fa8:	7bfa      	ldrb	r2, [r7, #15]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f7ff f8d5 	bl	8000160 <__aeabi_fmul>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f7ff fe8e 	bl	8000cdc <__addsf3>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	73bb      	strb	r3, [r7, #14]
 8000fd0:	e7d7      	b.n	8000f82 <_Z16FIRFilter_UpdateP9FIRFilterf+0x52>
  }

  return fir->out;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd90      	pop	{r4, r7, pc}
 8000fe0:	20000000 	.word	0x20000000

08000fe4 <_ZN12HeightSensorC1EP12GPIO_TypeDeftS1_t17TIM_HandleTypeDef>:


HeightSensor::HeightSensor(GPIO_TypeDef* TRIG_PORT, uint16_t TRIG_PIN,
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	80fb      	strh	r3, [r7, #6]
	  	   	   	   	   	   GPIO_TypeDef* ECHO_PORT, uint16_t ECHO_PIN,
						   TIM_HandleTypeDef HTIM)
							: trig_port(TRIG_PORT), trig_pin(TRIG_PIN),
							  echo_port(ECHO_PORT), echo_pin(ECHO_PIN),
							  htim(HTIM){
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	88fa      	ldrh	r2, [r7, #6]
 8000ffe:	809a      	strh	r2, [r3, #4]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	609a      	str	r2, [r3, #8]
							  echo_port(ECHO_PORT), echo_pin(ECHO_PIN),
 8001006:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
							  htim(HTIM){
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	819a      	strh	r2, [r3, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3310      	adds	r3, #16
 8001012:	f107 011c 	add.w	r1, r7, #28
 8001016:	2248      	movs	r2, #72	; 0x48
 8001018:	4618      	mov	r0, r3
 800101a:	f003 fa9b 	bl	8004554 <memcpy>
	FIRFilter_Init(&lpf);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3358      	adds	r3, #88	; 0x58
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff62 	bl	8000eec <_Z14FIRFilter_InitP9FIRFilter>

	HAL_TIM_Base_Start(&htim);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3310      	adds	r3, #16
 800102c:	4618      	mov	r0, r3
 800102e:	f002 fe73 	bl	8003d18 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6818      	ldr	r0, [r3, #0]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	889b      	ldrh	r3, [r3, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	4619      	mov	r1, r3
 800103e:	f002 f86a 	bl	8003116 <HAL_GPIO_WritePin>
}
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4618      	mov	r0, r3
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <_ZN12HeightSensor14getWaterHeightEv>:
{
	return dist_filtered;
}

float HeightSensor::getWaterHeight()
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	return water_height;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	0000      	movs	r0, r0
	...

08001068 <_ZN12HeightSensor10readSensorEv>:


void HeightSensor::readSensor()
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	889b      	ldrh	r3, [r3, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	4619      	mov	r1, r3
 800107c:	f002 f84b 	bl	8003116 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim, 0);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim) < 10);  // wait for 10 us
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108e:	2b09      	cmp	r3, #9
 8001090:	bf94      	ite	ls
 8001092:	2301      	movls	r3, #1
 8001094:	2300      	movhi	r3, #0
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b00      	cmp	r3, #0
 800109a:	d000      	beq.n	800109e <_ZN12HeightSensor10readSensorEv+0x36>
 800109c:	e7f4      	b.n	8001088 <_ZN12HeightSensor10readSensorEv+0x20>
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	889b      	ldrh	r3, [r3, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	4619      	mov	r1, r3
 80010aa:	f002 f834 	bl	8003116 <HAL_GPIO_WritePin>

	uint32_t millis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 80010ae:	f001 f92f 	bl	8002310 <HAL_GetTick>
 80010b2:	6178      	str	r0, [r7, #20]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (echo_port, echo_pin)) && millis + 10 >  HAL_GetTick());
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4619      	mov	r1, r3
 80010c2:	4610      	mov	r0, r2
 80010c4:	f002 f810 	bl	80030e8 <HAL_GPIO_ReadPin>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <_ZN12HeightSensor10readSensorEv+0x7a>
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f103 040a 	add.w	r4, r3, #10
 80010d4:	f001 f91c 	bl	8002310 <HAL_GetTick>
 80010d8:	4603      	mov	r3, r0
 80010da:	429c      	cmp	r4, r3
 80010dc:	d901      	bls.n	80010e2 <_ZN12HeightSensor10readSensorEv+0x7a>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <_ZN12HeightSensor10readSensorEv+0x7c>
 80010e2:	2300      	movs	r3, #0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <_ZN12HeightSensor10readSensorEv+0x82>
 80010e8:	e7e4      	b.n	80010b4 <_ZN12HeightSensor10readSensorEv+0x4c>
	uint32_t time1 = __HAL_TIM_GET_COUNTER (&htim);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	613b      	str	r3, [r7, #16]

	millis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 80010f2:	f001 f90d 	bl	8002310 <HAL_GetTick>
 80010f6:	6178      	str	r0, [r7, #20]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (echo_port, echo_pin)) && millis + 50 > HAL_GetTick());
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001102:	b29b      	uxth	r3, r3
 8001104:	4619      	mov	r1, r3
 8001106:	4610      	mov	r0, r2
 8001108:	f001 ffee 	bl	80030e8 <HAL_GPIO_ReadPin>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d009      	beq.n	8001126 <_ZN12HeightSensor10readSensorEv+0xbe>
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001118:	f001 f8fa 	bl	8002310 <HAL_GetTick>
 800111c:	4603      	mov	r3, r0
 800111e:	429c      	cmp	r4, r3
 8001120:	d901      	bls.n	8001126 <_ZN12HeightSensor10readSensorEv+0xbe>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <_ZN12HeightSensor10readSensorEv+0xc0>
 8001126:	2300      	movs	r3, #0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d000      	beq.n	800112e <_ZN12HeightSensor10readSensorEv+0xc6>
 800112c:	e7e4      	b.n	80010f8 <_ZN12HeightSensor10readSensorEv+0x90>
	uint32_t time2 = __HAL_TIM_GET_COUNTER (&htim);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	60fb      	str	r3, [r7, #12]

	uint16_t distance_mm = (time2 - time1)* 0.34/2;
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fa05 	bl	800054c <__aeabi_ui2d>
 8001142:	a32f      	add	r3, pc, #188	; (adr r3, 8001200 <_ZN12HeightSensor10readSensorEv+0x198>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fa7a 	bl	8000640 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800115c:	f7ff fb9a 	bl	8000894 <__aeabi_ddiv>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4610      	mov	r0, r2
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fd42 	bl	8000bf0 <__aeabi_d2uiz>
 800116c:	4603      	mov	r3, r0
 800116e:	817b      	strh	r3, [r7, #10]

	dist_raw = (distance_mm/10.0) < CONE_HEIGHT ? (distance_mm/10.0) : CONE_HEIGHT;
 8001170:	897b      	ldrh	r3, [r7, #10]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9fa 	bl	800056c <__aeabi_i2d>
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <_ZN12HeightSensor10readSensorEv+0x1a0>)
 800117e:	f7ff fb89 	bl	8000894 <__aeabi_ddiv>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <_ZN12HeightSensor10readSensorEv+0x1a4>)
 8001190:	f7ff fcc8 	bl	8000b24 <__aeabi_dcmplt>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d010      	beq.n	80011bc <_ZN12HeightSensor10readSensorEv+0x154>
 800119a:	897b      	ldrh	r3, [r7, #10]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9e5 	bl	800056c <__aeabi_i2d>
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <_ZN12HeightSensor10readSensorEv+0x1a0>)
 80011a8:	f7ff fb74 	bl	8000894 <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fd3c 	bl	8000c30 <__aeabi_d2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	e000      	b.n	80011be <_ZN12HeightSensor10readSensorEv+0x156>
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <_ZN12HeightSensor10readSensorEv+0x1a8>)
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	dist_filtered = FIRFilter_Update(&lpf, dist_raw);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80011d0:	4619      	mov	r1, r3
 80011d2:	4610      	mov	r0, r2
 80011d4:	f7ff feac 	bl	8000f30 <_Z16FIRFilter_UpdateP9FIRFilterf>
 80011d8:	4602      	mov	r2, r0
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	water_height = CONE_HEIGHT - dist_filtered;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80011e6:	4619      	mov	r1, r3
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <_ZN12HeightSensor10readSensorEv+0x1a8>)
 80011ea:	f7ff fd75 	bl	8000cd8 <__aeabi_fsub>
 80011ee:	4603      	mov	r3, r0
 80011f0:	461a      	mov	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
}
 80011f8:	bf00      	nop
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd90      	pop	{r4, r7, pc}
 8001200:	5c28f5c3 	.word	0x5c28f5c3
 8001204:	3fd5c28f 	.word	0x3fd5c28f
 8001208:	40240000 	.word	0x40240000
 800120c:	40518000 	.word	0x40518000
 8001210:	428c0000 	.word	0x428c0000

08001214 <_ZL14DWT_Delay_Initv>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <_ZL14DWT_Delay_Initv+0x60>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	4a15      	ldr	r2, [pc, #84]	; (8001274 <_ZL14DWT_Delay_Initv+0x60>)
 800121e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001222:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <_ZL14DWT_Delay_Initv+0x60>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <_ZL14DWT_Delay_Initv+0x60>)
 800122a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800122e:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_ZL14DWT_Delay_Initv+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a10      	ldr	r2, [pc, #64]	; (8001278 <_ZL14DWT_Delay_Initv+0x64>)
 8001236:	f023 0301 	bic.w	r3, r3, #1
 800123a:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <_ZL14DWT_Delay_Initv+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <_ZL14DWT_Delay_Initv+0x64>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <_ZL14DWT_Delay_Initv+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 800124e:	bf00      	nop
  __NOP();
 8001250:	bf00      	nop
  __NOP();
 8001252:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <_ZL14DWT_Delay_Initv+0x64>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf14      	ite	ne
 800125c:	2301      	movne	r3, #1
 800125e:	2300      	moveq	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <_ZL14DWT_Delay_Initv+0x56>
  {
    return 0;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <_ZL14DWT_Delay_Initv+0x58>
  }
  else
  {
    return 1;
 800126a:	2301      	movs	r3, #1
  }
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	e000edf0 	.word	0xe000edf0
 8001278:	e0001000 	.word	0xe0001000

0800127c <_ZL12DWT_Delay_usm>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <_ZL12DWT_Delay_usm+0x48>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800128a:	f002 fb3f 	bl	800390c <HAL_RCC_GetHCLKFreq>
 800128e:	4603      	mov	r3, r0
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <_ZL12DWT_Delay_usm+0x4c>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	0c9b      	lsrs	r3, r3, #18
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	fb02 f303 	mul.w	r3, r2, r3
 800129e:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <_ZL12DWT_Delay_usm+0x48>)
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1ad2      	subs	r2, r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	bf34      	ite	cc
 80012ae:	2301      	movcc	r3, #1
 80012b0:	2300      	movcs	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d000      	beq.n	80012ba <_ZL12DWT_Delay_usm+0x3e>
 80012b8:	e7f2      	b.n	80012a0 <_ZL12DWT_Delay_usm+0x24>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e0001000 	.word	0xe0001000
 80012c8:	431bde83 	.word	0x431bde83

080012cc <_ZL19lcd16x2_enablePulsev>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <_ZL19lcd16x2_enablePulsev+0x34>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <_ZL19lcd16x2_enablePulsev+0x38>)
 80012d6:	8811      	ldrh	r1, [r2, #0]
 80012d8:	2201      	movs	r2, #1
 80012da:	4618      	mov	r0, r3
 80012dc:	f001 ff1b 	bl	8003116 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 80012e0:	2014      	movs	r0, #20
 80012e2:	f7ff ffcb 	bl	800127c <_ZL12DWT_Delay_usm>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <_ZL19lcd16x2_enablePulsev+0x34>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a06      	ldr	r2, [pc, #24]	; (8001304 <_ZL19lcd16x2_enablePulsev+0x38>)
 80012ec:	8811      	ldrh	r1, [r2, #0]
 80012ee:	2200      	movs	r2, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 ff10 	bl	8003116 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 80012f6:	203c      	movs	r0, #60	; 0x3c
 80012f8:	f7ff ffc0 	bl	800127c <_ZL12DWT_Delay_usm>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200002f8 	.word	0x200002f8
 8001304:	200002fe 	.word	0x200002fe

08001308 <_ZL10lcd16x2_rsb>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <_ZL10lcd16x2_rsb+0x24>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a06      	ldr	r2, [pc, #24]	; (8001330 <_ZL10lcd16x2_rsb+0x28>)
 8001318:	8811      	ldrh	r1, [r2, #0]
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	4618      	mov	r0, r3
 800131e:	f001 fefa 	bl	8003116 <HAL_GPIO_WritePin>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200002f8 	.word	0x200002f8
 8001330:	200002fc 	.word	0x200002fc

08001334 <_ZL13lcd16x2_writeh>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 030f 	and.w	r3, r3, #15
 8001344:	73fb      	strb	r3, [r7, #15]
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 800134c:	4b5f      	ldr	r3, [pc, #380]	; (80014cc <_ZL13lcd16x2_writeh+0x198>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d05a      	beq.n	800140a <_ZL13lcd16x2_writeh+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001354:	4b5e      	ldr	r3, [pc, #376]	; (80014d0 <_ZL13lcd16x2_writeh+0x19c>)
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	4b5e      	ldr	r3, [pc, #376]	; (80014d4 <_ZL13lcd16x2_writeh+0x1a0>)
 800135a:	8819      	ldrh	r1, [r3, #0]
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	f001 fed6 	bl	8003116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800136a:	4b59      	ldr	r3, [pc, #356]	; (80014d0 <_ZL13lcd16x2_writeh+0x19c>)
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	4b5a      	ldr	r3, [pc, #360]	; (80014d8 <_ZL13lcd16x2_writeh+0x1a4>)
 8001370:	8819      	ldrh	r1, [r3, #0]
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	b2db      	uxtb	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	f001 fecb 	bl	8003116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001380:	4b53      	ldr	r3, [pc, #332]	; (80014d0 <_ZL13lcd16x2_writeh+0x19c>)
 8001382:	6818      	ldr	r0, [r3, #0]
 8001384:	4b55      	ldr	r3, [pc, #340]	; (80014dc <_ZL13lcd16x2_writeh+0x1a8>)
 8001386:	8819      	ldrh	r1, [r3, #0]
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	b2db      	uxtb	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	f001 fec0 	bl	8003116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001396:	4b4e      	ldr	r3, [pc, #312]	; (80014d0 <_ZL13lcd16x2_writeh+0x19c>)
 8001398:	6818      	ldr	r0, [r3, #0]
 800139a:	4b51      	ldr	r3, [pc, #324]	; (80014e0 <_ZL13lcd16x2_writeh+0x1ac>)
 800139c:	8819      	ldrh	r1, [r3, #0]
 800139e:	7bfb      	ldrb	r3, [r7, #15]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	f001 feb5 	bl	8003116 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80013ac:	4b4d      	ldr	r3, [pc, #308]	; (80014e4 <_ZL13lcd16x2_writeh+0x1b0>)
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	4b4d      	ldr	r3, [pc, #308]	; (80014e8 <_ZL13lcd16x2_writeh+0x1b4>)
 80013b2:	8819      	ldrh	r1, [r3, #0]
 80013b4:	7bbb      	ldrb	r3, [r7, #14]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	f001 feaa 	bl	8003116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80013c2:	4b48      	ldr	r3, [pc, #288]	; (80014e4 <_ZL13lcd16x2_writeh+0x1b0>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	4b49      	ldr	r3, [pc, #292]	; (80014ec <_ZL13lcd16x2_writeh+0x1b8>)
 80013c8:	8819      	ldrh	r1, [r3, #0]
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	f001 fe9f 	bl	8003116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80013d8:	4b42      	ldr	r3, [pc, #264]	; (80014e4 <_ZL13lcd16x2_writeh+0x1b0>)
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	4b44      	ldr	r3, [pc, #272]	; (80014f0 <_ZL13lcd16x2_writeh+0x1bc>)
 80013de:	8819      	ldrh	r1, [r3, #0]
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	f001 fe94 	bl	8003116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <_ZL13lcd16x2_writeh+0x1b0>)
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	4b40      	ldr	r3, [pc, #256]	; (80014f4 <_ZL13lcd16x2_writeh+0x1c0>)
 80013f4:	8819      	ldrh	r1, [r3, #0]
 80013f6:	7bbb      	ldrb	r3, [r7, #14]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	461a      	mov	r2, r3
 8001400:	f001 fe89 	bl	8003116 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001404:	f7ff ff62 	bl	80012cc <_ZL19lcd16x2_enablePulsev>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8001408:	e05b      	b.n	80014c2 <_ZL13lcd16x2_writeh+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800140a:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <_ZL13lcd16x2_writeh+0x1b0>)
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <_ZL13lcd16x2_writeh+0x1b4>)
 8001410:	8819      	ldrh	r1, [r3, #0]
 8001412:	7bbb      	ldrb	r3, [r7, #14]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	b2db      	uxtb	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	f001 fe7b 	bl	8003116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001420:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <_ZL13lcd16x2_writeh+0x1b0>)
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	4b31      	ldr	r3, [pc, #196]	; (80014ec <_ZL13lcd16x2_writeh+0x1b8>)
 8001426:	8819      	ldrh	r1, [r3, #0]
 8001428:	7bbb      	ldrb	r3, [r7, #14]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	b2db      	uxtb	r3, r3
 8001430:	461a      	mov	r2, r3
 8001432:	f001 fe70 	bl	8003116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <_ZL13lcd16x2_writeh+0x1b0>)
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <_ZL13lcd16x2_writeh+0x1bc>)
 800143c:	8819      	ldrh	r1, [r3, #0]
 800143e:	7bbb      	ldrb	r3, [r7, #14]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	f001 fe65 	bl	8003116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <_ZL13lcd16x2_writeh+0x1b0>)
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <_ZL13lcd16x2_writeh+0x1c0>)
 8001452:	8819      	ldrh	r1, [r3, #0]
 8001454:	7bbb      	ldrb	r3, [r7, #14]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	b2db      	uxtb	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	f001 fe5a 	bl	8003116 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001462:	f7ff ff33 	bl	80012cc <_ZL19lcd16x2_enablePulsev>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <_ZL13lcd16x2_writeh+0x1b0>)
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <_ZL13lcd16x2_writeh+0x1b4>)
 800146c:	8819      	ldrh	r1, [r3, #0]
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	461a      	mov	r2, r3
 8001478:	f001 fe4d 	bl	8003116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <_ZL13lcd16x2_writeh+0x1b0>)
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <_ZL13lcd16x2_writeh+0x1b8>)
 8001482:	8819      	ldrh	r1, [r3, #0]
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	b2db      	uxtb	r3, r3
 800148c:	461a      	mov	r2, r3
 800148e:	f001 fe42 	bl	8003116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <_ZL13lcd16x2_writeh+0x1b0>)
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <_ZL13lcd16x2_writeh+0x1bc>)
 8001498:	8819      	ldrh	r1, [r3, #0]
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	f001 fe37 	bl	8003116 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <_ZL13lcd16x2_writeh+0x1b0>)
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <_ZL13lcd16x2_writeh+0x1c0>)
 80014ae:	8819      	ldrh	r1, [r3, #0]
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	f001 fe2c 	bl	8003116 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80014be:	f7ff ff05 	bl	80012cc <_ZL19lcd16x2_enablePulsev>
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200000fc 	.word	0x200000fc
 80014d0:	20000300 	.word	0x20000300
 80014d4:	20000304 	.word	0x20000304
 80014d8:	20000306 	.word	0x20000306
 80014dc:	20000308 	.word	0x20000308
 80014e0:	2000030a 	.word	0x2000030a
 80014e4:	2000030c 	.word	0x2000030c
 80014e8:	20000310 	.word	0x20000310
 80014ec:	20000312 	.word	0x20000312
 80014f0:	20000314 	.word	0x20000314
 80014f4:	20000316 	.word	0x20000316

080014f8 <_ZL20lcd16x2_writeCommandh>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8001502:	2000      	movs	r0, #0
 8001504:	f7ff ff00 	bl	8001308 <_ZL10lcd16x2_rsb>
  lcd16x2_write(cmd);
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff12 	bl	8001334 <_ZL13lcd16x2_writeh>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_ZL17lcd16x2_writeDatah>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 8001522:	2001      	movs	r0, #1
 8001524:	f7ff fef0 	bl	8001308 <_ZL10lcd16x2_rsb>
  lcd16x2_write(data);
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff02 	bl	8001334 <_ZL13lcd16x2_writeh>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <_ZL14lcd16x2_write4h>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	f003 030f 	and.w	r3, r3, #15
 8001548:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 800154a:	2000      	movs	r0, #0
 800154c:	f7ff fedc 	bl	8001308 <_ZL10lcd16x2_rsb>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <_ZL14lcd16x2_write4h+0x7c>)
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <_ZL14lcd16x2_write4h+0x80>)
 8001556:	8819      	ldrh	r1, [r3, #0]
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	f001 fdd8 	bl	8003116 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <_ZL14lcd16x2_write4h+0x7c>)
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <_ZL14lcd16x2_write4h+0x84>)
 800156c:	8819      	ldrh	r1, [r3, #0]
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	b2db      	uxtb	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	f001 fdcd 	bl	8003116 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 800157c:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <_ZL14lcd16x2_write4h+0x7c>)
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <_ZL14lcd16x2_write4h+0x88>)
 8001582:	8819      	ldrh	r1, [r3, #0]
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	b2db      	uxtb	r3, r3
 800158c:	461a      	mov	r2, r3
 800158e:	f001 fdc2 	bl	8003116 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <_ZL14lcd16x2_write4h+0x7c>)
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <_ZL14lcd16x2_write4h+0x8c>)
 8001598:	8819      	ldrh	r1, [r3, #0]
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	461a      	mov	r2, r3
 80015a4:	f001 fdb7 	bl	8003116 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 80015a8:	f7ff fe90 	bl	80012cc <_ZL19lcd16x2_enablePulsev>
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000030c 	.word	0x2000030c
 80015b8:	20000310 	.word	0x20000310
 80015bc:	20000312 	.word	0x20000312
 80015c0:	20000314 	.word	0x20000314
 80015c4:	20000316 	.word	0x20000316

080015c8 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	817b      	strh	r3, [r7, #10]
 80015d6:	4613      	mov	r3, r2
 80015d8:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 80015da:	f7ff fe1b 	bl	8001214 <_ZL14DWT_Delay_Initv>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 80015de:	4a24      	ldr	r2, [pc, #144]	; (8001670 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xa8>)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 80015e4:	4a23      	ldr	r2, [pc, #140]	; (8001674 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xac>)
 80015e6:	897b      	ldrh	r3, [r7, #10]
 80015e8:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 80015ea:	4a23      	ldr	r2, [pc, #140]	; (8001678 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb0>)
 80015ec:	893b      	ldrh	r3, [r7, #8]
 80015ee:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 80015f0:	4a22      	ldr	r2, [pc, #136]	; (800167c <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb4>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 80015f6:	4a22      	ldr	r2, [pc, #136]	; (8001680 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb8>)
 80015f8:	8b3b      	ldrh	r3, [r7, #24]
 80015fa:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 80015fc:	4a21      	ldr	r2, [pc, #132]	; (8001684 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xbc>)
 80015fe:	8bbb      	ldrh	r3, [r7, #28]
 8001600:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8001602:	4a21      	ldr	r2, [pc, #132]	; (8001688 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc0>)
 8001604:	8c3b      	ldrh	r3, [r7, #32]
 8001606:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8001608:	4a20      	ldr	r2, [pc, #128]	; (800168c <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc4>)
 800160a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800160c:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc8>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8001614:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xcc>)
 8001616:	2228      	movs	r2, #40	; 0x28
 8001618:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 800161a:	2014      	movs	r0, #20
 800161c:	f000 fe82 	bl	8002324 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8001620:	2003      	movs	r0, #3
 8001622:	f7ff ff89 	bl	8001538 <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(5);
 8001626:	2005      	movs	r0, #5
 8001628:	f000 fe7c 	bl	8002324 <HAL_Delay>
  lcd16x2_write4(0x3);
 800162c:	2003      	movs	r0, #3
 800162e:	f7ff ff83 	bl	8001538 <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 8001632:	2001      	movs	r0, #1
 8001634:	f000 fe76 	bl	8002324 <HAL_Delay>
  lcd16x2_write4(0x3);
 8001638:	2003      	movs	r0, #3
 800163a:	f7ff ff7d 	bl	8001538 <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 800163e:	2001      	movs	r0, #1
 8001640:	f000 fe70 	bl	8002324 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8001644:	2002      	movs	r0, #2
 8001646:	f7ff ff77 	bl	8001538 <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 800164a:	2001      	movs	r0, #1
 800164c:	f000 fe6a 	bl	8002324 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001650:	2028      	movs	r0, #40	; 0x28
 8001652:	f7ff ff51 	bl	80014f8 <_ZL20lcd16x2_writeCommandh>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8001656:	200f      	movs	r0, #15
 8001658:	f7ff ff4e 	bl	80014f8 <_ZL20lcd16x2_writeCommandh>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff ff4b 	bl	80014f8 <_ZL20lcd16x2_writeCommandh>
  LCD_MS_DELAY(3);
 8001662:	2003      	movs	r0, #3
 8001664:	f000 fe5e 	bl	8002324 <HAL_Delay>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200002f8 	.word	0x200002f8
 8001674:	200002fc 	.word	0x200002fc
 8001678:	200002fe 	.word	0x200002fe
 800167c:	2000030c 	.word	0x2000030c
 8001680:	20000310 	.word	0x20000310
 8001684:	20000312 	.word	0x20000312
 8001688:	20000314 	.word	0x20000314
 800168c:	20000316 	.word	0x20000316
 8001690:	200000fc 	.word	0x200000fc
 8001694:	200000fe 	.word	0x200000fe

08001698 <_Z17lcd16x2_setCursorhh>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	460a      	mov	r2, r1
 80016a2:	71fb      	strb	r3, [r7, #7]
 80016a4:	4613      	mov	r3, r2
 80016a6:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 80016a8:	79bb      	ldrb	r3, [r7, #6]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d108      	bne.n	80016c8 <_Z17lcd16x2_setCursorhh+0x30>
  {
    maskData |= (0x80);
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016bc:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff19 	bl	80014f8 <_ZL20lcd16x2_writeCommandh>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 80016c6:	e007      	b.n	80016d8 <_Z17lcd16x2_setCursorhh+0x40>
    maskData |= (0xc0);
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80016ce:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ff10 	bl	80014f8 <_ZL20lcd16x2_writeCommandh>
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_Z15lcd16x2_1stLinev>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 80016e4:	2100      	movs	r1, #0
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff ffd6 	bl	8001698 <_Z17lcd16x2_setCursorhh>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_Z15lcd16x2_2ndLinev>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 80016f4:	2100      	movs	r1, #0
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff ffce 	bl	8001698 <_Z17lcd16x2_setCursorhh>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_Z18lcd16x2_cursorShowb>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
  if(state)
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00c      	beq.n	800172a <_Z18lcd16x2_cursorShowb+0x2a>
  {
    DisplayControl |= (0x03);
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <_Z18lcd16x2_cursorShowb+0x4c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	f043 0303 	orr.w	r3, r3, #3
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <_Z18lcd16x2_cursorShowb+0x4c>)
 800171c:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <_Z18lcd16x2_cursorShowb+0x4c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fee8 	bl	80014f8 <_ZL20lcd16x2_writeCommandh>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 8001728:	e00b      	b.n	8001742 <_Z18lcd16x2_cursorShowb+0x42>
    DisplayControl &= ~(0x03);
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <_Z18lcd16x2_cursorShowb+0x4c>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	f023 0303 	bic.w	r3, r3, #3
 8001732:	b2da      	uxtb	r2, r3
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <_Z18lcd16x2_cursorShowb+0x4c>)
 8001736:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <_Z18lcd16x2_cursorShowb+0x4c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fedb 	bl	80014f8 <_ZL20lcd16x2_writeCommandh>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200000fd 	.word	0x200000fd

08001750 <_Z13lcd16x2_clearv>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8001754:	2001      	movs	r0, #1
 8001756:	f7ff fecf 	bl	80014f8 <_ZL20lcd16x2_writeCommandh>
  LCD_MS_DELAY(3);
 800175a:	2003      	movs	r0, #3
 800175c:	f000 fde2 	bl	8002324 <HAL_Delay>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <_Z14lcd16x2_printfPKcz>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8001764:	b40f      	push	{r0, r1, r2, r3}
 8001766:	b590      	push	{r4, r7, lr}
 8001768:	b089      	sub	sp, #36	; 0x24
 800176a:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 800176c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001770:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800177a:	4618      	mov	r0, r3
 800177c:	f003 fb76 	bl	8004e6c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001780:	2300      	movs	r3, #0
 8001782:	77fb      	strb	r3, [r7, #31]
 8001784:	7ffc      	ldrb	r4, [r7, #31]
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fce0 	bl	8000150 <strlen>
 8001790:	4603      	mov	r3, r0
 8001792:	429c      	cmp	r4, r3
 8001794:	d20f      	bcs.n	80017b6 <_Z14lcd16x2_printfPKcz+0x52>
 8001796:	7ffb      	ldrb	r3, [r7, #31]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80c      	bhi.n	80017b6 <_Z14lcd16x2_printfPKcz+0x52>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 800179c:	7ffb      	ldrb	r3, [r7, #31]
 800179e:	f107 0220 	add.w	r2, r7, #32
 80017a2:	4413      	add	r3, r2
 80017a4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff feb5 	bl	8001518 <_ZL17lcd16x2_writeDatah>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 80017ae:	7ffb      	ldrb	r3, [r7, #31]
 80017b0:	3301      	adds	r3, #1
 80017b2:	77fb      	strb	r3, [r7, #31]
 80017b4:	e7e6      	b.n	8001784 <_Z14lcd16x2_printfPKcz+0x20>
  }
}
 80017b6:	bf00      	nop
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80017c0:	b004      	add	sp, #16
 80017c2:	4770      	bx	lr
 80017c4:	0000      	movs	r0, r0
	...

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b0ef      	sub	sp, #444	; 0x1bc
 80017cc:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ce:	f000 fd47 	bl	8002260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d2:	f000 f8e7 	bl	80019a4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d6:	f000 fa4f 	bl	8001c78 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 80017da:	f000 f995 	bl	8001b08 <_ZL12MX_TIM2_Initv>
  MX_ADC1_Init();
 80017de:	f000 f94b 	bl	8001a78 <_ZL12MX_ADC1_Initv>
  MX_TIM4_Init();
 80017e2:	f000 f9ed 	bl	8001bc0 <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80017e6:	4862      	ldr	r0, [pc, #392]	; (8001970 <main+0x1a8>)
 80017e8:	f002 fae0 	bl	8003dac <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 80017ec:	4861      	ldr	r0, [pc, #388]	; (8001974 <main+0x1ac>)
 80017ee:	f000 fe95 	bl	800251c <HAL_ADC_Start>

  lcd16x2_init_4bits(LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_EN_Pin,
 80017f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017f6:	9303      	str	r3, [sp, #12]
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	9302      	str	r3, [sp, #8]
 80017fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	4b5b      	ldr	r3, [pc, #364]	; (8001978 <main+0x1b0>)
 800180c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001810:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001814:	4858      	ldr	r0, [pc, #352]	; (8001978 <main+0x1b0>)
 8001816:	f7ff fed7 	bl	80015c8 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt>
		  	  	  	 LCD_D4_GPIO_Port, LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin);

  lcd16x2_cursorShow(false);
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff ff70 	bl	8001700 <_Z18lcd16x2_cursorShowb>
  while(!HAL_GPIO_ReadPin(SETPOINT_BUT_GPIO_Port, SETPOINT_BUT_Pin))
 8001820:	2108      	movs	r1, #8
 8001822:	4855      	ldr	r0, [pc, #340]	; (8001978 <main+0x1b0>)
 8001824:	f001 fc60 	bl	80030e8 <HAL_GPIO_ReadPin>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d04b      	beq.n	80018d0 <main+0x108>
  {
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001838:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800183c:	484d      	ldr	r0, [pc, #308]	; (8001974 <main+0x1ac>)
 800183e:	f000 ff1b 	bl	8002678 <HAL_ADC_PollForConversion>
	  potVal = HAL_ADC_GetValue(&hadc1);
 8001842:	484c      	ldr	r0, [pc, #304]	; (8001974 <main+0x1ac>)
 8001844:	f001 f81e 	bl	8002884 <HAL_ADC_GetValue>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	4b4b      	ldr	r3, [pc, #300]	; (800197c <main+0x1b4>)
 800184e:	801a      	strh	r2, [r3, #0]
	  setpoint = 0.35 + 0.30*(potVal/4036.0);
 8001850:	4b4a      	ldr	r3, [pc, #296]	; (800197c <main+0x1b4>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe89 	bl	800056c <__aeabi_i2d>
 800185a:	a33f      	add	r3, pc, #252	; (adr r3, 8001958 <main+0x190>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7ff f818 	bl	8000894 <__aeabi_ddiv>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	a33c      	add	r3, pc, #240	; (adr r3, 8001960 <main+0x198>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fee5 	bl	8000640 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	a33a      	add	r3, pc, #232	; (adr r3, 8001968 <main+0x1a0>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fd26 	bl	80002d4 <__adddf3>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff f9ce 	bl	8000c30 <__aeabi_d2f>
 8001894:	4603      	mov	r3, r0
 8001896:	4a3a      	ldr	r2, [pc, #232]	; (8001980 <main+0x1b8>)
 8001898:	6013      	str	r3, [r2, #0]
	  lcd16x2_clear();
 800189a:	f7ff ff59 	bl	8001750 <_Z13lcd16x2_clearv>
	  lcd16x2_printf("Setpoint: ");
 800189e:	4839      	ldr	r0, [pc, #228]	; (8001984 <main+0x1bc>)
 80018a0:	f7ff ff60 	bl	8001764 <_Z14lcd16x2_printfPKcz>
	  lcd16x2_2ndLine();
 80018a4:	f7ff ff24 	bl	80016f0 <_Z15lcd16x2_2ndLinev>
	  lcd16x2_printf("         %.1f cm", 100*setpoint);
 80018a8:	4b35      	ldr	r3, [pc, #212]	; (8001980 <main+0x1b8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4936      	ldr	r1, [pc, #216]	; (8001988 <main+0x1c0>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe fc56 	bl	8000160 <__aeabi_fmul>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe6a 	bl	8000590 <__aeabi_f2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4832      	ldr	r0, [pc, #200]	; (800198c <main+0x1c4>)
 80018c2:	f7ff ff4f 	bl	8001764 <_Z14lcd16x2_printfPKcz>
	  HAL_Delay(300);
 80018c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80018ca:	f000 fd2b 	bl	8002324 <HAL_Delay>
  while(!HAL_GPIO_ReadPin(SETPOINT_BUT_GPIO_Port, SETPOINT_BUT_Pin))
 80018ce:	e7a7      	b.n	8001820 <main+0x58>
  }

  HeightSensor usensor(TRIG_GPIO_Port, TRIG_Pin, ECHO_GPIO_Port, ECHO_Pin, htim2);
 80018d0:	463c      	mov	r4, r7
 80018d2:	4a2f      	ldr	r2, [pc, #188]	; (8001990 <main+0x1c8>)
 80018d4:	ab01      	add	r3, sp, #4
 80018d6:	4611      	mov	r1, r2
 80018d8:	2248      	movs	r2, #72	; 0x48
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 fe3a 	bl	8004554 <memcpy>
 80018e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <main+0x1cc>)
 80018e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ec:	4929      	ldr	r1, [pc, #164]	; (8001994 <main+0x1cc>)
 80018ee:	4620      	mov	r0, r4
 80018f0:	f7ff fb78 	bl	8000fe4 <_ZN12HeightSensorC1EP12GPIO_TypeDeftS1_t17TIM_HandleTypeDef>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	usensor.readSensor();
 80018f4:	463b      	mov	r3, r7
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fbb6 	bl	8001068 <_ZN12HeightSensor10readSensorEv>

	if (updateLCD)
 80018fc:	4b26      	ldr	r3, [pc, #152]	; (8001998 <main+0x1d0>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f7      	beq.n	80018f4 <main+0x12c>
	{
		lcd16x2_clear();
 8001904:	f7ff ff24 	bl	8001750 <_Z13lcd16x2_clearv>
		lcd16x2_1stLine();
 8001908:	f7ff feea 	bl	80016e0 <_Z15lcd16x2_1stLinev>
		lcd16x2_printf("Setpoint: %.1fcm", setpoint*100);
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <main+0x1b8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	491d      	ldr	r1, [pc, #116]	; (8001988 <main+0x1c0>)
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe fc24 	bl	8000160 <__aeabi_fmul>
 8001918:	4603      	mov	r3, r0
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fe38 	bl	8000590 <__aeabi_f2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	481d      	ldr	r0, [pc, #116]	; (800199c <main+0x1d4>)
 8001926:	f7ff ff1d 	bl	8001764 <_Z14lcd16x2_printfPKcz>
		lcd16x2_2ndLine();
 800192a:	f7ff fee1 	bl	80016f0 <_Z15lcd16x2_2ndLinev>
		lcd16x2_printf("H. atual: %.1fcm", usensor.getWaterHeight());
 800192e:	463b      	mov	r3, r7
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fb8b 	bl	800104c <_ZN12HeightSensor14getWaterHeightEv>
 8001936:	4603      	mov	r3, r0
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fe29 	bl	8000590 <__aeabi_f2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4817      	ldr	r0, [pc, #92]	; (80019a0 <main+0x1d8>)
 8001944:	f7ff ff0e 	bl	8001764 <_Z14lcd16x2_printfPKcz>
		HAL_Delay(1000/SAMPLING_FREQUENCY);
 8001948:	200a      	movs	r0, #10
 800194a:	f000 fceb 	bl	8002324 <HAL_Delay>
		updateLCD = false;
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <main+0x1d0>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
	usensor.readSensor();
 8001954:	e7ce      	b.n	80018f4 <main+0x12c>
 8001956:	bf00      	nop
 8001958:	00000000 	.word	0x00000000
 800195c:	40af8800 	.word	0x40af8800
 8001960:	33333333 	.word	0x33333333
 8001964:	3fd33333 	.word	0x3fd33333
 8001968:	66666666 	.word	0x66666666
 800196c:	3fd66666 	.word	0x3fd66666
 8001970:	20000390 	.word	0x20000390
 8001974:	20000318 	.word	0x20000318
 8001978:	40010800 	.word	0x40010800
 800197c:	20000414 	.word	0x20000414
 8001980:	20000418 	.word	0x20000418
 8001984:	080072b0 	.word	0x080072b0
 8001988:	42c80000 	.word	0x42c80000
 800198c:	080072bc 	.word	0x080072bc
 8001990:	20000348 	.word	0x20000348
 8001994:	40010c00 	.word	0x40010c00
 8001998:	200000ff 	.word	0x200000ff
 800199c:	080072d0 	.word	0x080072d0
 80019a0:	080072e4 	.word	0x080072e4

080019a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b094      	sub	sp, #80	; 0x50
 80019a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ae:	2228      	movs	r2, #40	; 0x28
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f002 fddc 	bl	8004570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019d4:	2301      	movs	r3, #1
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019de:	2300      	movs	r3, #0
 80019e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e2:	2301      	movs	r3, #1
 80019e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e6:	2302      	movs	r3, #2
 80019e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019f0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 fbbc 	bl	8003178 <HAL_RCC_OscConfig>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf14      	ite	ne
 8001a06:	2301      	movne	r3, #1
 8001a08:	2300      	moveq	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001a10:	f000 f9fa 	bl	8001e08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a14:	230f      	movs	r3, #15
 8001a16:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a24:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	2102      	movs	r1, #2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fe21 	bl	8003678 <HAL_RCC_ClockConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8001a46:	f000 f9df 	bl	8001e08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a52:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	4618      	mov	r0, r3
 8001a58:	f001 ff94 	bl	8003984 <HAL_RCCEx_PeriphCLKConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bf14      	ite	ne
 8001a62:	2301      	movne	r3, #1
 8001a64:	2300      	moveq	r3, #0
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8001a6c:	f000 f9cc 	bl	8001e08 <Error_Handler>
  }
}
 8001a70:	bf00      	nop
 8001a72:	3750      	adds	r7, #80	; 0x50
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <_ZL12MX_ADC1_Initv+0x88>)
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <_ZL12MX_ADC1_Initv+0x8c>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <_ZL12MX_ADC1_Initv+0x88>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <_ZL12MX_ADC1_Initv+0x88>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <_ZL12MX_ADC1_Initv+0x88>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aa0:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <_ZL12MX_ADC1_Initv+0x88>)
 8001aa2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001aa6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <_ZL12MX_ADC1_Initv+0x88>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001aae:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <_ZL12MX_ADC1_Initv+0x88>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ab4:	4812      	ldr	r0, [pc, #72]	; (8001b00 <_ZL12MX_ADC1_Initv+0x88>)
 8001ab6:	f000 fc59 	bl	800236c <HAL_ADC_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf14      	ite	ne
 8001ac0:	2301      	movne	r3, #1
 8001ac2:	2300      	moveq	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8001aca:	f000 f99d 	bl	8001e08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	4619      	mov	r1, r3
 8001ade:	4808      	ldr	r0, [pc, #32]	; (8001b00 <_ZL12MX_ADC1_Initv+0x88>)
 8001ae0:	f000 fedc 	bl	800289c <HAL_ADC_ConfigChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bf14      	ite	ne
 8001aea:	2301      	movne	r3, #1
 8001aec:	2300      	moveq	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8001af4:	f000 f988 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000318 	.word	0x20000318
 8001b04:	40012400 	.word	0x40012400

08001b08 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <_ZL12MX_TIM2_Initv+0xb4>)
 8001b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <_ZL12MX_TIM2_Initv+0xb4>)
 8001b2e:	2247      	movs	r2, #71	; 0x47
 8001b30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <_ZL12MX_TIM2_Initv+0xb4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b38:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <_ZL12MX_TIM2_Initv+0xb4>)
 8001b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b40:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <_ZL12MX_TIM2_Initv+0xb4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <_ZL12MX_TIM2_Initv+0xb4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b4c:	481b      	ldr	r0, [pc, #108]	; (8001bbc <_ZL12MX_TIM2_Initv+0xb4>)
 8001b4e:	f002 f893 	bl	8003c78 <HAL_TIM_Base_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf14      	ite	ne
 8001b58:	2301      	movne	r3, #1
 8001b5a:	2300      	moveq	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001b62:	f000 f951 	bl	8001e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	4619      	mov	r1, r3
 8001b72:	4812      	ldr	r0, [pc, #72]	; (8001bbc <_ZL12MX_TIM2_Initv+0xb4>)
 8001b74:	f002 fa74 	bl	8004060 <HAL_TIM_ConfigClockSource>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf14      	ite	ne
 8001b7e:	2301      	movne	r3, #1
 8001b80:	2300      	moveq	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8001b88:	f000 f93e 	bl	8001e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b94:	463b      	mov	r3, r7
 8001b96:	4619      	mov	r1, r3
 8001b98:	4808      	ldr	r0, [pc, #32]	; (8001bbc <_ZL12MX_TIM2_Initv+0xb4>)
 8001b9a:	f002 fc41 	bl	8004420 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf14      	ite	ne
 8001ba4:	2301      	movne	r3, #1
 8001ba6:	2300      	moveq	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8001bae:	f000 f92b 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000348 	.word	0x20000348

08001bc0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bc6:	f107 0308 	add.w	r3, r7, #8
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bdc:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <_ZL12MX_TIM4_Initv+0xb0>)
 8001bde:	4a25      	ldr	r2, [pc, #148]	; (8001c74 <_ZL12MX_TIM4_Initv+0xb4>)
 8001be0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 8001be2:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <_ZL12MX_TIM4_Initv+0xb0>)
 8001be4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001be8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <_ZL12MX_TIM4_Initv+0xb0>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10 - 1;
 8001bf0:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <_ZL12MX_TIM4_Initv+0xb0>)
 8001bf2:	2209      	movs	r2, #9
 8001bf4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <_ZL12MX_TIM4_Initv+0xb0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <_ZL12MX_TIM4_Initv+0xb0>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c02:	481b      	ldr	r0, [pc, #108]	; (8001c70 <_ZL12MX_TIM4_Initv+0xb0>)
 8001c04:	f002 f838 	bl	8003c78 <HAL_TIM_Base_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bf14      	ite	ne
 8001c0e:	2301      	movne	r3, #1
 8001c10:	2300      	moveq	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8001c18:	f000 f8f6 	bl	8001e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c22:	f107 0308 	add.w	r3, r7, #8
 8001c26:	4619      	mov	r1, r3
 8001c28:	4811      	ldr	r0, [pc, #68]	; (8001c70 <_ZL12MX_TIM4_Initv+0xb0>)
 8001c2a:	f002 fa19 	bl	8004060 <HAL_TIM_ConfigClockSource>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 8001c3e:	f000 f8e3 	bl	8001e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4808      	ldr	r0, [pc, #32]	; (8001c70 <_ZL12MX_TIM4_Initv+0xb0>)
 8001c50:	f002 fbe6 	bl	8004420 <HAL_TIMEx_MasterConfigSynchronization>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	bf14      	ite	ne
 8001c5a:	2301      	movne	r3, #1
 8001c5c:	2300      	moveq	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8001c64:	f000 f8d0 	bl	8001e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c68:	bf00      	nop
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000390 	.word	0x20000390
 8001c74:	40000800 	.word	0x40000800

08001c78 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7e:	f107 0310 	add.w	r3, r7, #16
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8c:	4b45      	ldr	r3, [pc, #276]	; (8001da4 <_ZL12MX_GPIO_Initv+0x12c>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a44      	ldr	r2, [pc, #272]	; (8001da4 <_ZL12MX_GPIO_Initv+0x12c>)
 8001c92:	f043 0310 	orr.w	r3, r3, #16
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b42      	ldr	r3, [pc, #264]	; (8001da4 <_ZL12MX_GPIO_Initv+0x12c>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca4:	4b3f      	ldr	r3, [pc, #252]	; (8001da4 <_ZL12MX_GPIO_Initv+0x12c>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a3e      	ldr	r2, [pc, #248]	; (8001da4 <_ZL12MX_GPIO_Initv+0x12c>)
 8001caa:	f043 0320 	orr.w	r3, r3, #32
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b3c      	ldr	r3, [pc, #240]	; (8001da4 <_ZL12MX_GPIO_Initv+0x12c>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0320 	and.w	r3, r3, #32
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <_ZL12MX_GPIO_Initv+0x12c>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a38      	ldr	r2, [pc, #224]	; (8001da4 <_ZL12MX_GPIO_Initv+0x12c>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <_ZL12MX_GPIO_Initv+0x12c>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <_ZL12MX_GPIO_Initv+0x12c>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a32      	ldr	r2, [pc, #200]	; (8001da4 <_ZL12MX_GPIO_Initv+0x12c>)
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <_ZL12MX_GPIO_Initv+0x12c>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	603b      	str	r3, [r7, #0]
 8001cea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf2:	482d      	ldr	r0, [pc, #180]	; (8001da8 <_ZL12MX_GPIO_Initv+0x130>)
 8001cf4:	f001 fa0f 	bl	8003116 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cfe:	482b      	ldr	r0, [pc, #172]	; (8001dac <_ZL12MX_GPIO_Initv+0x134>)
 8001d00:	f001 fa09 	bl	8003116 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8001d04:	2200      	movs	r2, #0
 8001d06:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 8001d0a:	4829      	ldr	r0, [pc, #164]	; (8001db0 <_ZL12MX_GPIO_Initv+0x138>)
 8001d0c:	f001 fa03 	bl	8003116 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	4619      	mov	r1, r3
 8001d28:	481f      	ldr	r0, [pc, #124]	; (8001da8 <_ZL12MX_GPIO_Initv+0x130>)
 8001d2a:	f001 f859 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SETPOINT_BUT_Pin */
  GPIO_InitStruct.Pin = SETPOINT_BUT_Pin;
 8001d2e:	2308      	movs	r3, #8
 8001d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SETPOINT_BUT_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	4619      	mov	r1, r3
 8001d40:	481b      	ldr	r0, [pc, #108]	; (8001db0 <_ZL12MX_GPIO_Initv+0x138>)
 8001d42:	f001 f84d 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2302      	movs	r3, #2
 8001d56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4813      	ldr	r0, [pc, #76]	; (8001dac <_ZL12MX_GPIO_Initv+0x134>)
 8001d60:	f001 f83e 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001d72:	f107 0310 	add.w	r3, r7, #16
 8001d76:	4619      	mov	r1, r3
 8001d78:	480c      	ldr	r0, [pc, #48]	; (8001dac <_ZL12MX_GPIO_Initv+0x134>)
 8001d7a:	f001 f831 	bl	8002de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8001d7e:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 8001d82:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d84:	2301      	movs	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	4619      	mov	r1, r3
 8001d96:	4806      	ldr	r0, [pc, #24]	; (8001db0 <_ZL12MX_GPIO_Initv+0x138>)
 8001d98:	f001 f822 	bl	8002de0 <HAL_GPIO_Init>

}
 8001d9c:	bf00      	nop
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40011000 	.word	0x40011000
 8001dac:	40010c00 	.word	0x40010c00
 8001db0:	40010800 	.word	0x40010800

08001db4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	if (htim == &htim4)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d115      	bne.n	8001df0 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		LCDMillisCont++;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001dce:	801a      	strh	r2, [r3, #0]
		if (LCDMillisCont > 1000*int(LCD_UPDATE_TIME))
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dd8:	d90a      	bls.n	8001df0 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dde:	4808      	ldr	r0, [pc, #32]	; (8001e00 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001de0:	f001 f9b1 	bl	8003146 <HAL_GPIO_TogglePin>
			updateLCD = true;
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
			LCDMillisCont = 0;
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000390 	.word	0x20000390
 8001dfc:	2000041c 	.word	0x2000041c
 8001e00:	40011000 	.word	0x40011000
 8001e04:	200000ff 	.word	0x200000ff

08001e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e0c:	b672      	cpsid	i
}
 8001e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <Error_Handler+0x8>
	...

08001e14 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d107      	bne.n	8001e34 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d102      	bne.n	8001e34 <_Z41__static_initialization_and_destruction_0ii+0x20>
PIDController pump_pid_controller;
 8001e2e:	4809      	ldr	r0, [pc, #36]	; (8001e54 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001e30:	f000 f9c0 	bl	80021b4 <_ZN13PIDControllerC1Ev>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d107      	bne.n	8001e4a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d102      	bne.n	8001e4a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8001e44:	4803      	ldr	r0, [pc, #12]	; (8001e54 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001e46:	f000 f9da 	bl	80021fe <_ZN13PIDControllerD1Ev>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200003d8 	.word	0x200003d8

08001e58 <_GLOBAL__sub_I__Z18lcd16x2_init_8bitsP12GPIO_TypeDefttS0_ttttS0_tttt>:
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e60:	2001      	movs	r0, #1
 8001e62:	f7ff ffd7 	bl	8001e14 <_Z41__static_initialization_and_destruction_0ii>
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_GLOBAL__sub_D__Z18lcd16x2_init_8bitsP12GPIO_TypeDefttS0_ttttS0_tttt>:
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff ffcf 	bl	8001e14 <_Z41__static_initialization_and_destruction_0ii>
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_MspInit+0x5c>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <HAL_MspInit+0x5c>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6193      	str	r3, [r2, #24]
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_MspInit+0x5c>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <HAL_MspInit+0x5c>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ed4 <HAL_MspInit+0x5c>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	61d3      	str	r3, [r2, #28]
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <HAL_MspInit+0x5c>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_MspInit+0x60>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <HAL_MspInit+0x60>)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40010000 	.word	0x40010000

08001edc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <HAL_ADC_MspInit+0x6c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d121      	bne.n	8001f40 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <HAL_ADC_MspInit+0x70>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_ADC_MspInit+0x70>)
 8001f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f06:	6193      	str	r3, [r2, #24]
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <HAL_ADC_MspInit+0x70>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_ADC_MspInit+0x70>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a0c      	ldr	r2, [pc, #48]	; (8001f4c <HAL_ADC_MspInit+0x70>)
 8001f1a:	f043 0304 	orr.w	r3, r3, #4
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <HAL_ADC_MspInit+0x70>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = SETPOINT_POT_Pin;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f30:	2303      	movs	r3, #3
 8001f32:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SETPOINT_POT_GPIO_Port, &GPIO_InitStruct);
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <HAL_ADC_MspInit+0x74>)
 8001f3c:	f000 ff50 	bl	8002de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f40:	bf00      	nop
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40012400 	.word	0x40012400
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40010800 	.word	0x40010800

08001f54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f64:	d10c      	bne.n	8001f80 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_TIM_Base_MspInit+0x68>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <HAL_TIM_Base_MspInit+0x68>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	61d3      	str	r3, [r2, #28]
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_TIM_Base_MspInit+0x68>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f7e:	e018      	b.n	8001fb2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <HAL_TIM_Base_MspInit+0x6c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d113      	bne.n	8001fb2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_TIM_Base_MspInit+0x68>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <HAL_TIM_Base_MspInit+0x68>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	61d3      	str	r3, [r2, #28]
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_TIM_Base_MspInit+0x68>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	201e      	movs	r0, #30
 8001fa8:	f000 fee3 	bl	8002d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001fac:	201e      	movs	r0, #30
 8001fae:	f000 fefc 	bl	8002daa <HAL_NVIC_EnableIRQ>
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40000800 	.word	0x40000800

08001fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <NMI_Handler+0x4>

08001fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <HardFault_Handler+0x4>

08001fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <MemManage_Handler+0x4>

08001fd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fda:	e7fe      	b.n	8001fda <BusFault_Handler+0x4>

08001fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <UsageFault_Handler+0x4>

08001fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800200a:	f000 f96f 	bl	80022ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <TIM4_IRQHandler+0x10>)
 800201a:	f001 ff19 	bl	8003e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000390 	.word	0x20000390

08002028 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
	return 1;
 800202c:	2301      	movs	r3, #1
}
 800202e:	4618      	mov	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <_kill>:

int _kill(int pid, int sig)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002040:	f002 fa5e 	bl	8004500 <__errno>
 8002044:	4603      	mov	r3, r0
 8002046:	2216      	movs	r2, #22
 8002048:	601a      	str	r2, [r3, #0]
	return -1;
 800204a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_exit>:

void _exit (int status)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800205e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ffe7 	bl	8002036 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002068:	e7fe      	b.n	8002068 <_exit+0x12>

0800206a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	e00a      	b.n	8002092 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800207c:	f3af 8000 	nop.w
 8002080:	4601      	mov	r1, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	60ba      	str	r2, [r7, #8]
 8002088:	b2ca      	uxtb	r2, r1
 800208a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	3301      	adds	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	429a      	cmp	r2, r3
 8002098:	dbf0      	blt.n	800207c <_read+0x12>
	}

return len;
 800209a:	687b      	ldr	r3, [r7, #4]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	e009      	b.n	80020ca <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	60ba      	str	r2, [r7, #8]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	3301      	adds	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	dbf1      	blt.n	80020b6 <_write+0x12>
	}
	return len;
 80020d2:	687b      	ldr	r3, [r7, #4]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3718      	adds	r7, #24
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_close>:

int _close(int file)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	return -1;
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002102:	605a      	str	r2, [r3, #4]
	return 0;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <_isatty>:

int _isatty(int file)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	return 1;
 8002118:	2301      	movs	r3, #1
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr

08002124 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
	return 0;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <_sbrk+0x5c>)
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <_sbrk+0x60>)
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <_sbrk+0x64>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <_sbrk+0x64>)
 800215a:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <_sbrk+0x68>)
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <_sbrk+0x64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	429a      	cmp	r2, r3
 800216a:	d207      	bcs.n	800217c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800216c:	f002 f9c8 	bl	8004500 <__errno>
 8002170:	4603      	mov	r3, r0
 8002172:	220c      	movs	r2, #12
 8002174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800217a:	e009      	b.n	8002190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <_sbrk+0x64>)
 800218c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800218e:	68fb      	ldr	r3, [r7, #12]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20005000 	.word	0x20005000
 800219c:	00000400 	.word	0x00000400
 80021a0:	20000420 	.word	0x20000420
 80021a4:	20000440 	.word	0x20000440

080021a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <_ZN13PIDControllerC1Ev>:
 */

#include "PIDController.h"


PIDController::PIDController()
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	615a      	str	r2, [r3, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	61da      	str	r2, [r3, #28]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38
{
}
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <_ZN13PIDControllerD1Ev>:
PIDController::PIDController(float kp, float ki, float kd)
  : _kp(kp), _ki(ki), _kd(kd)
{
}

PIDController::~PIDController()
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
{
}
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
	...

08002214 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002216:	490d      	ldr	r1, [pc, #52]	; (800224c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800222c:	4c0a      	ldr	r4, [pc, #40]	; (8002258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800223a:	f7ff ffb5 	bl	80021a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223e:	f002 f965 	bl	800450c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002242:	f7ff fac1 	bl	80017c8 <main>
  bx lr
 8002246:	4770      	bx	lr
  ldr r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800224c:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8002250:	08007724 	.word	0x08007724
  ldr r2, =_sbss
 8002254:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8002258:	20000440 	.word	0x20000440

0800225c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC1_2_IRQHandler>
	...

08002260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_Init+0x28>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <HAL_Init+0x28>)
 800226a:	f043 0310 	orr.w	r3, r3, #16
 800226e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002270:	2003      	movs	r0, #3
 8002272:	f000 fd73 	bl	8002d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002276:	200f      	movs	r0, #15
 8002278:	f000 f808 	bl	800228c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800227c:	f7ff fdfc 	bl	8001e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40022000 	.word	0x40022000

0800228c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x54>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_InitTick+0x58>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fd8b 	bl	8002dc6 <HAL_SYSTICK_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00e      	b.n	80022d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b0f      	cmp	r3, #15
 80022be:	d80a      	bhi.n	80022d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c0:	2200      	movs	r2, #0
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022c8:	f000 fd53 	bl	8002d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <HAL_InitTick+0x5c>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e000      	b.n	80022d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000100 	.word	0x20000100
 80022e4:	20000108 	.word	0x20000108
 80022e8:	20000104 	.word	0x20000104

080022ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_IncTick+0x1c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_IncTick+0x20>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a03      	ldr	r2, [pc, #12]	; (800230c <HAL_IncTick+0x20>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	20000108 	.word	0x20000108
 800230c:	2000042c 	.word	0x2000042c

08002310 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b02      	ldr	r3, [pc, #8]	; (8002320 <HAL_GetTick+0x10>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	2000042c 	.word	0x2000042c

08002324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff fff0 	bl	8002310 <HAL_GetTick>
 8002330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800233c:	d005      	beq.n	800234a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_Delay+0x44>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800234a:	bf00      	nop
 800234c:	f7ff ffe0 	bl	8002310 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	429a      	cmp	r2, r3
 800235a:	d8f7      	bhi.n	800234c <HAL_Delay+0x28>
  {
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000108 	.word	0x20000108

0800236c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0be      	b.n	800250c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fd96 	bl	8001edc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fbc5 	bl	8002b40 <ADC_ConversionStop_Disable>
 80023b6:	4603      	mov	r3, r0
 80023b8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 8099 	bne.w	80024fa <HAL_ADC_Init+0x18e>
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f040 8095 	bne.w	80024fa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023d8:	f023 0302 	bic.w	r3, r3, #2
 80023dc:	f043 0202 	orr.w	r2, r3, #2
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023ec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	7b1b      	ldrb	r3, [r3, #12]
 80023f2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80023f4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002404:	d003      	beq.n	800240e <HAL_ADC_Init+0xa2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d102      	bne.n	8002414 <HAL_ADC_Init+0xa8>
 800240e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002412:	e000      	b.n	8002416 <HAL_ADC_Init+0xaa>
 8002414:	2300      	movs	r3, #0
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7d1b      	ldrb	r3, [r3, #20]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d119      	bne.n	8002458 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7b1b      	ldrb	r3, [r3, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d109      	bne.n	8002440 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	3b01      	subs	r3, #1
 8002432:	035a      	lsls	r2, r3, #13
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	e00b      	b.n	8002458 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	f043 0220 	orr.w	r2, r3, #32
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	f043 0201 	orr.w	r2, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	430a      	orrs	r2, r1
 800246a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	4b28      	ldr	r3, [pc, #160]	; (8002514 <HAL_ADC_Init+0x1a8>)
 8002474:	4013      	ands	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	430b      	orrs	r3, r1
 800247e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002488:	d003      	beq.n	8002492 <HAL_ADC_Init+0x126>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d104      	bne.n	800249c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	3b01      	subs	r3, #1
 8002498:	051b      	lsls	r3, r3, #20
 800249a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	4b18      	ldr	r3, [pc, #96]	; (8002518 <HAL_ADC_Init+0x1ac>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d10b      	bne.n	80024d8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	f023 0303 	bic.w	r3, r3, #3
 80024ce:	f043 0201 	orr.w	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024d6:	e018      	b.n	800250a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	f023 0312 	bic.w	r3, r3, #18
 80024e0:	f043 0210 	orr.w	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024f8:	e007      	b.n	800250a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	f043 0210 	orr.w	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800250a:	7dfb      	ldrb	r3, [r7, #23]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	ffe1f7fd 	.word	0xffe1f7fd
 8002518:	ff1f0efe 	.word	0xff1f0efe

0800251c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_ADC_Start+0x1a>
 8002532:	2302      	movs	r3, #2
 8002534:	e098      	b.n	8002668 <HAL_ADC_Start+0x14c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 faa4 	bl	8002a8c <ADC_Enable>
 8002544:	4603      	mov	r3, r0
 8002546:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 8087 	bne.w	800265e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a41      	ldr	r2, [pc, #260]	; (8002670 <HAL_ADC_Start+0x154>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d105      	bne.n	800257a <HAL_ADC_Start+0x5e>
 800256e:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_ADC_Start+0x158>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d115      	bne.n	80025a6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002590:	2b00      	cmp	r3, #0
 8002592:	d026      	beq.n	80025e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800259c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025a4:	e01d      	b.n	80025e2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a2f      	ldr	r2, [pc, #188]	; (8002674 <HAL_ADC_Start+0x158>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d004      	beq.n	80025c6 <HAL_ADC_Start+0xaa>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a2b      	ldr	r2, [pc, #172]	; (8002670 <HAL_ADC_Start+0x154>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10d      	bne.n	80025e2 <HAL_ADC_Start+0xc6>
 80025c6:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <HAL_ADC_Start+0x158>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	f023 0206 	bic.w	r2, r3, #6
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80025fa:	e002      	b.n	8002602 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f06f 0202 	mvn.w	r2, #2
 8002612:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800261e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002622:	d113      	bne.n	800264c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002628:	4a11      	ldr	r2, [pc, #68]	; (8002670 <HAL_ADC_Start+0x154>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d105      	bne.n	800263a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <HAL_ADC_Start+0x158>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002636:	2b00      	cmp	r3, #0
 8002638:	d108      	bne.n	800264c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	e00c      	b.n	8002666 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	e003      	b.n	8002666 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40012800 	.word	0x40012800
 8002674:	40012400 	.word	0x40012400

08002678 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800268e:	f7ff fe3f 	bl	8002310 <HAL_GetTick>
 8002692:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	f043 0220 	orr.w	r2, r3, #32
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0d3      	b.n	8002862 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d131      	bne.n	800272c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d12a      	bne.n	800272c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026d6:	e021      	b.n	800271c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026de:	d01d      	beq.n	800271c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <HAL_ADC_PollForConversion+0x7e>
 80026e6:	f7ff fe13 	bl	8002310 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d212      	bcs.n	800271c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10b      	bne.n	800271c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	f043 0204 	orr.w	r2, r3, #4
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e0a2      	b.n	8002862 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0d6      	beq.n	80026d8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800272a:	e070      	b.n	800280e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800272c:	4b4f      	ldr	r3, [pc, #316]	; (800286c <HAL_ADC_PollForConversion+0x1f4>)
 800272e:	681c      	ldr	r4, [r3, #0]
 8002730:	2002      	movs	r0, #2
 8002732:	f001 f9dd 	bl	8003af0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002736:	4603      	mov	r3, r0
 8002738:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6919      	ldr	r1, [r3, #16]
 8002742:	4b4b      	ldr	r3, [pc, #300]	; (8002870 <HAL_ADC_PollForConversion+0x1f8>)
 8002744:	400b      	ands	r3, r1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d118      	bne.n	800277c <HAL_ADC_PollForConversion+0x104>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68d9      	ldr	r1, [r3, #12]
 8002750:	4b48      	ldr	r3, [pc, #288]	; (8002874 <HAL_ADC_PollForConversion+0x1fc>)
 8002752:	400b      	ands	r3, r1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d111      	bne.n	800277c <HAL_ADC_PollForConversion+0x104>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6919      	ldr	r1, [r3, #16]
 800275e:	4b46      	ldr	r3, [pc, #280]	; (8002878 <HAL_ADC_PollForConversion+0x200>)
 8002760:	400b      	ands	r3, r1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d108      	bne.n	8002778 <HAL_ADC_PollForConversion+0x100>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68d9      	ldr	r1, [r3, #12]
 800276c:	4b43      	ldr	r3, [pc, #268]	; (800287c <HAL_ADC_PollForConversion+0x204>)
 800276e:	400b      	ands	r3, r1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_ADC_PollForConversion+0x100>
 8002774:	2314      	movs	r3, #20
 8002776:	e020      	b.n	80027ba <HAL_ADC_PollForConversion+0x142>
 8002778:	2329      	movs	r3, #41	; 0x29
 800277a:	e01e      	b.n	80027ba <HAL_ADC_PollForConversion+0x142>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6919      	ldr	r1, [r3, #16]
 8002782:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <HAL_ADC_PollForConversion+0x200>)
 8002784:	400b      	ands	r3, r1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_ADC_PollForConversion+0x120>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68d9      	ldr	r1, [r3, #12]
 8002790:	4b3a      	ldr	r3, [pc, #232]	; (800287c <HAL_ADC_PollForConversion+0x204>)
 8002792:	400b      	ands	r3, r1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <HAL_ADC_PollForConversion+0x13c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6919      	ldr	r1, [r3, #16]
 800279e:	4b38      	ldr	r3, [pc, #224]	; (8002880 <HAL_ADC_PollForConversion+0x208>)
 80027a0:	400b      	ands	r3, r1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d108      	bne.n	80027b8 <HAL_ADC_PollForConversion+0x140>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68d9      	ldr	r1, [r3, #12]
 80027ac:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_ADC_PollForConversion+0x208>)
 80027ae:	400b      	ands	r3, r1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_ADC_PollForConversion+0x140>
 80027b4:	2354      	movs	r3, #84	; 0x54
 80027b6:	e000      	b.n	80027ba <HAL_ADC_PollForConversion+0x142>
 80027b8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80027ba:	fb02 f303 	mul.w	r3, r2, r3
 80027be:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027c0:	e021      	b.n	8002806 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c8:	d01a      	beq.n	8002800 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d007      	beq.n	80027e0 <HAL_ADC_PollForConversion+0x168>
 80027d0:	f7ff fd9e 	bl	8002310 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d20f      	bcs.n	8002800 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d90b      	bls.n	8002800 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	f043 0204 	orr.w	r2, r3, #4
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e030      	b.n	8002862 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	3301      	adds	r3, #1
 8002804:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	429a      	cmp	r2, r3
 800280c:	d8d9      	bhi.n	80027c2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f06f 0212 	mvn.w	r2, #18
 8002816:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800282e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002832:	d115      	bne.n	8002860 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002838:	2b00      	cmp	r3, #0
 800283a:	d111      	bne.n	8002860 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d105      	bne.n	8002860 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	f043 0201 	orr.w	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	bd90      	pop	{r4, r7, pc}
 800286a:	bf00      	nop
 800286c:	20000100 	.word	0x20000100
 8002870:	24924924 	.word	0x24924924
 8002874:	00924924 	.word	0x00924924
 8002878:	12492492 	.word	0x12492492
 800287c:	00492492 	.word	0x00492492
 8002880:	00249249 	.word	0x00249249

08002884 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x20>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e0dc      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x1da>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b06      	cmp	r3, #6
 80028ca:	d81c      	bhi.n	8002906 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	3b05      	subs	r3, #5
 80028de:	221f      	movs	r2, #31
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	4019      	ands	r1, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	3b05      	subs	r3, #5
 80028f8:	fa00 f203 	lsl.w	r2, r0, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	635a      	str	r2, [r3, #52]	; 0x34
 8002904:	e03c      	b.n	8002980 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b0c      	cmp	r3, #12
 800290c:	d81c      	bhi.n	8002948 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	3b23      	subs	r3, #35	; 0x23
 8002920:	221f      	movs	r2, #31
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	4019      	ands	r1, r3
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	3b23      	subs	r3, #35	; 0x23
 800293a:	fa00 f203 	lsl.w	r2, r0, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
 8002946:	e01b      	b.n	8002980 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	3b41      	subs	r3, #65	; 0x41
 800295a:	221f      	movs	r2, #31
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	4019      	ands	r1, r3
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	3b41      	subs	r3, #65	; 0x41
 8002974:	fa00 f203 	lsl.w	r2, r0, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b09      	cmp	r3, #9
 8002986:	d91c      	bls.n	80029c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68d9      	ldr	r1, [r3, #12]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	4613      	mov	r3, r2
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	4413      	add	r3, r2
 8002998:	3b1e      	subs	r3, #30
 800299a:	2207      	movs	r2, #7
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	4019      	ands	r1, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6898      	ldr	r0, [r3, #8]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	3b1e      	subs	r3, #30
 80029b4:	fa00 f203 	lsl.w	r2, r0, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	e019      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6919      	ldr	r1, [r3, #16]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	2207      	movs	r2, #7
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	4019      	ands	r1, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6898      	ldr	r0, [r3, #8]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	fa00 f203 	lsl.w	r2, r0, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	d003      	beq.n	8002a06 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a02:	2b11      	cmp	r3, #17
 8002a04:	d132      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1d      	ldr	r2, [pc, #116]	; (8002a80 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d125      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d126      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a2c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d11a      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	0c9a      	lsrs	r2, r3, #18
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a4c:	e002      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	3b01      	subs	r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f9      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x1b2>
 8002a5a:	e007      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	f043 0220 	orr.w	r2, r3, #32
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	40012400 	.word	0x40012400
 8002a84:	20000100 	.word	0x20000100
 8002a88:	431bde83 	.word	0x431bde83

08002a8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d040      	beq.n	8002b2c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0201 	orr.w	r2, r2, #1
 8002ab8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002aba:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <ADC_Enable+0xac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a1f      	ldr	r2, [pc, #124]	; (8002b3c <ADC_Enable+0xb0>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	0c9b      	lsrs	r3, r3, #18
 8002ac6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ac8:	e002      	b.n	8002ad0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f9      	bne.n	8002aca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ad6:	f7ff fc1b 	bl	8002310 <HAL_GetTick>
 8002ada:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002adc:	e01f      	b.n	8002b1e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ade:	f7ff fc17 	bl	8002310 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d918      	bls.n	8002b1e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d011      	beq.n	8002b1e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	f043 0210 	orr.w	r2, r3, #16
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	f043 0201 	orr.w	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e007      	b.n	8002b2e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d1d8      	bne.n	8002ade <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000100 	.word	0x20000100
 8002b3c:	431bde83 	.word	0x431bde83

08002b40 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d12e      	bne.n	8002bb8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0201 	bic.w	r2, r2, #1
 8002b68:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b6a:	f7ff fbd1 	bl	8002310 <HAL_GetTick>
 8002b6e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b70:	e01b      	b.n	8002baa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b72:	f7ff fbcd 	bl	8002310 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d914      	bls.n	8002baa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d10d      	bne.n	8002baa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	f043 0210 	orr.w	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	f043 0201 	orr.w	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e007      	b.n	8002bba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d0dc      	beq.n	8002b72 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002be0:	4013      	ands	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf6:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	60d3      	str	r3, [r2, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <__NVIC_GetPriorityGrouping+0x18>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	f003 0307 	and.w	r3, r3, #7
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	db0b      	blt.n	8002c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	4906      	ldr	r1, [pc, #24]	; (8002c5c <__NVIC_EnableIRQ+0x34>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2001      	movs	r0, #1
 8002c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	e000e100 	.word	0xe000e100

08002c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0a      	blt.n	8002c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	490c      	ldr	r1, [pc, #48]	; (8002cac <__NVIC_SetPriority+0x4c>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c88:	e00a      	b.n	8002ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4908      	ldr	r1, [pc, #32]	; (8002cb0 <__NVIC_SetPriority+0x50>)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3b04      	subs	r3, #4
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	761a      	strb	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000e100 	.word	0xe000e100
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f1c3 0307 	rsb	r3, r3, #7
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf28      	it	cs
 8002cd2:	2304      	movcs	r3, #4
 8002cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d902      	bls.n	8002ce4 <NVIC_EncodePriority+0x30>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3b03      	subs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <NVIC_EncodePriority+0x32>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	43d9      	mvns	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	4313      	orrs	r3, r2
         );
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3724      	adds	r7, #36	; 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d28:	d301      	bcc.n	8002d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e00f      	b.n	8002d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <SysTick_Config+0x40>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d36:	210f      	movs	r1, #15
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d3c:	f7ff ff90 	bl	8002c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <SysTick_Config+0x40>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d46:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <SysTick_Config+0x40>)
 8002d48:	2207      	movs	r2, #7
 8002d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	e000e010 	.word	0xe000e010

08002d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ff2d 	bl	8002bc4 <__NVIC_SetPriorityGrouping>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d84:	f7ff ff42 	bl	8002c0c <__NVIC_GetPriorityGrouping>
 8002d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	6978      	ldr	r0, [r7, #20]
 8002d90:	f7ff ff90 	bl	8002cb4 <NVIC_EncodePriority>
 8002d94:	4602      	mov	r2, r0
 8002d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff5f 	bl	8002c60 <__NVIC_SetPriority>
}
 8002da2:	bf00      	nop
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff35 	bl	8002c28 <__NVIC_EnableIRQ>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ffa2 	bl	8002d18 <SysTick_Config>
 8002dd4:	4603      	mov	r3, r0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b08b      	sub	sp, #44	; 0x2c
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dee:	2300      	movs	r3, #0
 8002df0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002df2:	e169      	b.n	80030c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002df4:	2201      	movs	r2, #1
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	f040 8158 	bne.w	80030c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	4a9a      	ldr	r2, [pc, #616]	; (8003080 <HAL_GPIO_Init+0x2a0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d05e      	beq.n	8002eda <HAL_GPIO_Init+0xfa>
 8002e1c:	4a98      	ldr	r2, [pc, #608]	; (8003080 <HAL_GPIO_Init+0x2a0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d875      	bhi.n	8002f0e <HAL_GPIO_Init+0x12e>
 8002e22:	4a98      	ldr	r2, [pc, #608]	; (8003084 <HAL_GPIO_Init+0x2a4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d058      	beq.n	8002eda <HAL_GPIO_Init+0xfa>
 8002e28:	4a96      	ldr	r2, [pc, #600]	; (8003084 <HAL_GPIO_Init+0x2a4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d86f      	bhi.n	8002f0e <HAL_GPIO_Init+0x12e>
 8002e2e:	4a96      	ldr	r2, [pc, #600]	; (8003088 <HAL_GPIO_Init+0x2a8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d052      	beq.n	8002eda <HAL_GPIO_Init+0xfa>
 8002e34:	4a94      	ldr	r2, [pc, #592]	; (8003088 <HAL_GPIO_Init+0x2a8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d869      	bhi.n	8002f0e <HAL_GPIO_Init+0x12e>
 8002e3a:	4a94      	ldr	r2, [pc, #592]	; (800308c <HAL_GPIO_Init+0x2ac>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d04c      	beq.n	8002eda <HAL_GPIO_Init+0xfa>
 8002e40:	4a92      	ldr	r2, [pc, #584]	; (800308c <HAL_GPIO_Init+0x2ac>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d863      	bhi.n	8002f0e <HAL_GPIO_Init+0x12e>
 8002e46:	4a92      	ldr	r2, [pc, #584]	; (8003090 <HAL_GPIO_Init+0x2b0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d046      	beq.n	8002eda <HAL_GPIO_Init+0xfa>
 8002e4c:	4a90      	ldr	r2, [pc, #576]	; (8003090 <HAL_GPIO_Init+0x2b0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d85d      	bhi.n	8002f0e <HAL_GPIO_Init+0x12e>
 8002e52:	2b12      	cmp	r3, #18
 8002e54:	d82a      	bhi.n	8002eac <HAL_GPIO_Init+0xcc>
 8002e56:	2b12      	cmp	r3, #18
 8002e58:	d859      	bhi.n	8002f0e <HAL_GPIO_Init+0x12e>
 8002e5a:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <HAL_GPIO_Init+0x80>)
 8002e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e60:	08002edb 	.word	0x08002edb
 8002e64:	08002eb5 	.word	0x08002eb5
 8002e68:	08002ec7 	.word	0x08002ec7
 8002e6c:	08002f09 	.word	0x08002f09
 8002e70:	08002f0f 	.word	0x08002f0f
 8002e74:	08002f0f 	.word	0x08002f0f
 8002e78:	08002f0f 	.word	0x08002f0f
 8002e7c:	08002f0f 	.word	0x08002f0f
 8002e80:	08002f0f 	.word	0x08002f0f
 8002e84:	08002f0f 	.word	0x08002f0f
 8002e88:	08002f0f 	.word	0x08002f0f
 8002e8c:	08002f0f 	.word	0x08002f0f
 8002e90:	08002f0f 	.word	0x08002f0f
 8002e94:	08002f0f 	.word	0x08002f0f
 8002e98:	08002f0f 	.word	0x08002f0f
 8002e9c:	08002f0f 	.word	0x08002f0f
 8002ea0:	08002f0f 	.word	0x08002f0f
 8002ea4:	08002ebd 	.word	0x08002ebd
 8002ea8:	08002ed1 	.word	0x08002ed1
 8002eac:	4a79      	ldr	r2, [pc, #484]	; (8003094 <HAL_GPIO_Init+0x2b4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d013      	beq.n	8002eda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002eb2:	e02c      	b.n	8002f0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	623b      	str	r3, [r7, #32]
          break;
 8002eba:	e029      	b.n	8002f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	623b      	str	r3, [r7, #32]
          break;
 8002ec4:	e024      	b.n	8002f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	3308      	adds	r3, #8
 8002ecc:	623b      	str	r3, [r7, #32]
          break;
 8002ece:	e01f      	b.n	8002f10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	623b      	str	r3, [r7, #32]
          break;
 8002ed8:	e01a      	b.n	8002f10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	623b      	str	r3, [r7, #32]
          break;
 8002ee6:	e013      	b.n	8002f10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d105      	bne.n	8002efc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ef0:	2308      	movs	r3, #8
 8002ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	611a      	str	r2, [r3, #16]
          break;
 8002efa:	e009      	b.n	8002f10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002efc:	2308      	movs	r3, #8
 8002efe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	615a      	str	r2, [r3, #20]
          break;
 8002f06:	e003      	b.n	8002f10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	623b      	str	r3, [r7, #32]
          break;
 8002f0c:	e000      	b.n	8002f10 <HAL_GPIO_Init+0x130>
          break;
 8002f0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2bff      	cmp	r3, #255	; 0xff
 8002f14:	d801      	bhi.n	8002f1a <HAL_GPIO_Init+0x13a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	e001      	b.n	8002f1e <HAL_GPIO_Init+0x13e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2bff      	cmp	r3, #255	; 0xff
 8002f24:	d802      	bhi.n	8002f2c <HAL_GPIO_Init+0x14c>
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	e002      	b.n	8002f32 <HAL_GPIO_Init+0x152>
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	3b08      	subs	r3, #8
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	210f      	movs	r1, #15
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	6a39      	ldr	r1, [r7, #32]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80b1 	beq.w	80030c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f60:	4b4d      	ldr	r3, [pc, #308]	; (8003098 <HAL_GPIO_Init+0x2b8>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4a4c      	ldr	r2, [pc, #304]	; (8003098 <HAL_GPIO_Init+0x2b8>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6193      	str	r3, [r2, #24]
 8002f6c:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_GPIO_Init+0x2b8>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f78:	4a48      	ldr	r2, [pc, #288]	; (800309c <HAL_GPIO_Init+0x2bc>)
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	089b      	lsrs	r3, r3, #2
 8002f7e:	3302      	adds	r3, #2
 8002f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	220f      	movs	r2, #15
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a40      	ldr	r2, [pc, #256]	; (80030a0 <HAL_GPIO_Init+0x2c0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d013      	beq.n	8002fcc <HAL_GPIO_Init+0x1ec>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a3f      	ldr	r2, [pc, #252]	; (80030a4 <HAL_GPIO_Init+0x2c4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00d      	beq.n	8002fc8 <HAL_GPIO_Init+0x1e8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a3e      	ldr	r2, [pc, #248]	; (80030a8 <HAL_GPIO_Init+0x2c8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d007      	beq.n	8002fc4 <HAL_GPIO_Init+0x1e4>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a3d      	ldr	r2, [pc, #244]	; (80030ac <HAL_GPIO_Init+0x2cc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d101      	bne.n	8002fc0 <HAL_GPIO_Init+0x1e0>
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e006      	b.n	8002fce <HAL_GPIO_Init+0x1ee>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	e004      	b.n	8002fce <HAL_GPIO_Init+0x1ee>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e002      	b.n	8002fce <HAL_GPIO_Init+0x1ee>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <HAL_GPIO_Init+0x1ee>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd0:	f002 0203 	and.w	r2, r2, #3
 8002fd4:	0092      	lsls	r2, r2, #2
 8002fd6:	4093      	lsls	r3, r2
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fde:	492f      	ldr	r1, [pc, #188]	; (800309c <HAL_GPIO_Init+0x2bc>)
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d006      	beq.n	8003006 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ff8:	4b2d      	ldr	r3, [pc, #180]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	492c      	ldr	r1, [pc, #176]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	600b      	str	r3, [r1, #0]
 8003004:	e006      	b.n	8003014 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003006:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	43db      	mvns	r3, r3
 800300e:	4928      	ldr	r1, [pc, #160]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003010:	4013      	ands	r3, r2
 8003012:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d006      	beq.n	800302e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003020:	4b23      	ldr	r3, [pc, #140]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4922      	ldr	r1, [pc, #136]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]
 800302c:	e006      	b.n	800303c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	43db      	mvns	r3, r3
 8003036:	491e      	ldr	r1, [pc, #120]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003038:	4013      	ands	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d006      	beq.n	8003056 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	4918      	ldr	r1, [pc, #96]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]
 8003054:	e006      	b.n	8003064 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003056:	4b16      	ldr	r3, [pc, #88]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	43db      	mvns	r3, r3
 800305e:	4914      	ldr	r1, [pc, #80]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003060:	4013      	ands	r3, r2
 8003062:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d021      	beq.n	80030b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	490e      	ldr	r1, [pc, #56]	; (80030b0 <HAL_GPIO_Init+0x2d0>)
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	60cb      	str	r3, [r1, #12]
 800307c:	e021      	b.n	80030c2 <HAL_GPIO_Init+0x2e2>
 800307e:	bf00      	nop
 8003080:	10320000 	.word	0x10320000
 8003084:	10310000 	.word	0x10310000
 8003088:	10220000 	.word	0x10220000
 800308c:	10210000 	.word	0x10210000
 8003090:	10120000 	.word	0x10120000
 8003094:	10110000 	.word	0x10110000
 8003098:	40021000 	.word	0x40021000
 800309c:	40010000 	.word	0x40010000
 80030a0:	40010800 	.word	0x40010800
 80030a4:	40010c00 	.word	0x40010c00
 80030a8:	40011000 	.word	0x40011000
 80030ac:	40011400 	.word	0x40011400
 80030b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_GPIO_Init+0x304>)
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	4909      	ldr	r1, [pc, #36]	; (80030e4 <HAL_GPIO_Init+0x304>)
 80030be:	4013      	ands	r3, r2
 80030c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	3301      	adds	r3, #1
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	fa22 f303 	lsr.w	r3, r2, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f47f ae8e 	bne.w	8002df4 <HAL_GPIO_Init+0x14>
  }
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	372c      	adds	r7, #44	; 0x2c
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	40010400 	.word	0x40010400

080030e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	887b      	ldrh	r3, [r7, #2]
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
 8003104:	e001      	b.n	800310a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800310a:	7bfb      	ldrb	r3, [r7, #15]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	807b      	strh	r3, [r7, #2]
 8003122:	4613      	mov	r3, r2
 8003124:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003126:	787b      	ldrb	r3, [r7, #1]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800312c:	887a      	ldrh	r2, [r7, #2]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003132:	e003      	b.n	800313c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003134:	887b      	ldrh	r3, [r7, #2]
 8003136:	041a      	lsls	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	611a      	str	r2, [r3, #16]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003146:	b480      	push	{r7}
 8003148:	b085      	sub	sp, #20
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	460b      	mov	r3, r1
 8003150:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003158:	887a      	ldrh	r2, [r7, #2]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4013      	ands	r3, r2
 800315e:	041a      	lsls	r2, r3, #16
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	43d9      	mvns	r1, r3
 8003164:	887b      	ldrh	r3, [r7, #2]
 8003166:	400b      	ands	r3, r1
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	611a      	str	r2, [r3, #16]
}
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e26c      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8087 	beq.w	80032a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003198:	4b92      	ldr	r3, [pc, #584]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 030c 	and.w	r3, r3, #12
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d00c      	beq.n	80031be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031a4:	4b8f      	ldr	r3, [pc, #572]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 030c 	and.w	r3, r3, #12
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d112      	bne.n	80031d6 <HAL_RCC_OscConfig+0x5e>
 80031b0:	4b8c      	ldr	r3, [pc, #560]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031bc:	d10b      	bne.n	80031d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031be:	4b89      	ldr	r3, [pc, #548]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d06c      	beq.n	80032a4 <HAL_RCC_OscConfig+0x12c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d168      	bne.n	80032a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e246      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031de:	d106      	bne.n	80031ee <HAL_RCC_OscConfig+0x76>
 80031e0:	4b80      	ldr	r3, [pc, #512]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a7f      	ldr	r2, [pc, #508]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	e02e      	b.n	800324c <HAL_RCC_OscConfig+0xd4>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10c      	bne.n	8003210 <HAL_RCC_OscConfig+0x98>
 80031f6:	4b7b      	ldr	r3, [pc, #492]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a7a      	ldr	r2, [pc, #488]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	4b78      	ldr	r3, [pc, #480]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a77      	ldr	r2, [pc, #476]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e01d      	b.n	800324c <HAL_RCC_OscConfig+0xd4>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0xbc>
 800321a:	4b72      	ldr	r3, [pc, #456]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a71      	ldr	r2, [pc, #452]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b6f      	ldr	r3, [pc, #444]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a6e      	ldr	r2, [pc, #440]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0xd4>
 8003234:	4b6b      	ldr	r3, [pc, #428]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a6a      	ldr	r2, [pc, #424]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800323a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4b68      	ldr	r3, [pc, #416]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a67      	ldr	r2, [pc, #412]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d013      	beq.n	800327c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7ff f85c 	bl	8002310 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800325c:	f7ff f858 	bl	8002310 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	; 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e1fa      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	4b5d      	ldr	r3, [pc, #372]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0xe4>
 800327a:	e014      	b.n	80032a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7ff f848 	bl	8002310 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003284:	f7ff f844 	bl	8002310 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	; 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e1e6      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003296:	4b53      	ldr	r3, [pc, #332]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x10c>
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d063      	beq.n	800337a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032b2:	4b4c      	ldr	r3, [pc, #304]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032be:	4b49      	ldr	r3, [pc, #292]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d11c      	bne.n	8003304 <HAL_RCC_OscConfig+0x18c>
 80032ca:	4b46      	ldr	r3, [pc, #280]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d116      	bne.n	8003304 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d6:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_RCC_OscConfig+0x176>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d001      	beq.n	80032ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e1ba      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ee:	4b3d      	ldr	r3, [pc, #244]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4939      	ldr	r1, [pc, #228]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003302:	e03a      	b.n	800337a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d020      	beq.n	800334e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800330c:	4b36      	ldr	r3, [pc, #216]	; (80033e8 <HAL_RCC_OscConfig+0x270>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7fe fffd 	bl	8002310 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331a:	f7fe fff9 	bl	8002310 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e19b      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332c:	4b2d      	ldr	r3, [pc, #180]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003338:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4927      	ldr	r1, [pc, #156]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]
 800334c:	e015      	b.n	800337a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800334e:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <HAL_RCC_OscConfig+0x270>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe ffdc 	bl	8002310 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335c:	f7fe ffd8 	bl	8002310 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e17a      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336e:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d03a      	beq.n	80033fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d019      	beq.n	80033c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800338e:	4b17      	ldr	r3, [pc, #92]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003394:	f7fe ffbc 	bl	8002310 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339c:	f7fe ffb8 	bl	8002310 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e15a      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ba:	2001      	movs	r0, #1
 80033bc:	f000 fac4 	bl	8003948 <RCC_Delay>
 80033c0:	e01c      	b.n	80033fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <HAL_RCC_OscConfig+0x274>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c8:	f7fe ffa2 	bl	8002310 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ce:	e00f      	b.n	80033f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d0:	f7fe ff9e 	bl	8002310 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d908      	bls.n	80033f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e140      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
 80033e8:	42420000 	.word	0x42420000
 80033ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f0:	4b9e      	ldr	r3, [pc, #632]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1e9      	bne.n	80033d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80a6 	beq.w	8003556 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340a:	2300      	movs	r3, #0
 800340c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800340e:	4b97      	ldr	r3, [pc, #604]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10d      	bne.n	8003436 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341a:	4b94      	ldr	r3, [pc, #592]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	4a93      	ldr	r2, [pc, #588]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 8003420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003424:	61d3      	str	r3, [r2, #28]
 8003426:	4b91      	ldr	r3, [pc, #580]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003432:	2301      	movs	r3, #1
 8003434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003436:	4b8e      	ldr	r3, [pc, #568]	; (8003670 <HAL_RCC_OscConfig+0x4f8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d118      	bne.n	8003474 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003442:	4b8b      	ldr	r3, [pc, #556]	; (8003670 <HAL_RCC_OscConfig+0x4f8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a8a      	ldr	r2, [pc, #552]	; (8003670 <HAL_RCC_OscConfig+0x4f8>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344e:	f7fe ff5f 	bl	8002310 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003456:	f7fe ff5b 	bl	8002310 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b64      	cmp	r3, #100	; 0x64
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e0fd      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	4b81      	ldr	r3, [pc, #516]	; (8003670 <HAL_RCC_OscConfig+0x4f8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d106      	bne.n	800348a <HAL_RCC_OscConfig+0x312>
 800347c:	4b7b      	ldr	r3, [pc, #492]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	4a7a      	ldr	r2, [pc, #488]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6213      	str	r3, [r2, #32]
 8003488:	e02d      	b.n	80034e6 <HAL_RCC_OscConfig+0x36e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10c      	bne.n	80034ac <HAL_RCC_OscConfig+0x334>
 8003492:	4b76      	ldr	r3, [pc, #472]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	4a75      	ldr	r2, [pc, #468]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	6213      	str	r3, [r2, #32]
 800349e:	4b73      	ldr	r3, [pc, #460]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	4a72      	ldr	r2, [pc, #456]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80034a4:	f023 0304 	bic.w	r3, r3, #4
 80034a8:	6213      	str	r3, [r2, #32]
 80034aa:	e01c      	b.n	80034e6 <HAL_RCC_OscConfig+0x36e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	d10c      	bne.n	80034ce <HAL_RCC_OscConfig+0x356>
 80034b4:	4b6d      	ldr	r3, [pc, #436]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4a6c      	ldr	r2, [pc, #432]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80034ba:	f043 0304 	orr.w	r3, r3, #4
 80034be:	6213      	str	r3, [r2, #32]
 80034c0:	4b6a      	ldr	r3, [pc, #424]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4a69      	ldr	r2, [pc, #420]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80034c6:	f043 0301 	orr.w	r3, r3, #1
 80034ca:	6213      	str	r3, [r2, #32]
 80034cc:	e00b      	b.n	80034e6 <HAL_RCC_OscConfig+0x36e>
 80034ce:	4b67      	ldr	r3, [pc, #412]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	4a66      	ldr	r2, [pc, #408]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80034d4:	f023 0301 	bic.w	r3, r3, #1
 80034d8:	6213      	str	r3, [r2, #32]
 80034da:	4b64      	ldr	r3, [pc, #400]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4a63      	ldr	r2, [pc, #396]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80034e0:	f023 0304 	bic.w	r3, r3, #4
 80034e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d015      	beq.n	800351a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ee:	f7fe ff0f 	bl	8002310 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f4:	e00a      	b.n	800350c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7fe ff0b 	bl	8002310 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e0ab      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350c:	4b57      	ldr	r3, [pc, #348]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0ee      	beq.n	80034f6 <HAL_RCC_OscConfig+0x37e>
 8003518:	e014      	b.n	8003544 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351a:	f7fe fef9 	bl	8002310 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003520:	e00a      	b.n	8003538 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003522:	f7fe fef5 	bl	8002310 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003530:	4293      	cmp	r3, r2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e095      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003538:	4b4c      	ldr	r3, [pc, #304]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1ee      	bne.n	8003522 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003544:	7dfb      	ldrb	r3, [r7, #23]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d105      	bne.n	8003556 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354a:	4b48      	ldr	r3, [pc, #288]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	4a47      	ldr	r2, [pc, #284]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003554:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 8081 	beq.w	8003662 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003560:	4b42      	ldr	r3, [pc, #264]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b08      	cmp	r3, #8
 800356a:	d061      	beq.n	8003630 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d146      	bne.n	8003602 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003574:	4b3f      	ldr	r3, [pc, #252]	; (8003674 <HAL_RCC_OscConfig+0x4fc>)
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357a:	f7fe fec9 	bl	8002310 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003582:	f7fe fec5 	bl	8002310 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e067      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003594:	4b35      	ldr	r3, [pc, #212]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f0      	bne.n	8003582 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a8:	d108      	bne.n	80035bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035aa:	4b30      	ldr	r3, [pc, #192]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	492d      	ldr	r1, [pc, #180]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035bc:	4b2b      	ldr	r3, [pc, #172]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a19      	ldr	r1, [r3, #32]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	430b      	orrs	r3, r1
 80035ce:	4927      	ldr	r1, [pc, #156]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d4:	4b27      	ldr	r3, [pc, #156]	; (8003674 <HAL_RCC_OscConfig+0x4fc>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035da:	f7fe fe99 	bl	8002310 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fe fe95 	bl	8002310 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e037      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f4:	4b1d      	ldr	r3, [pc, #116]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x46a>
 8003600:	e02f      	b.n	8003662 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003602:	4b1c      	ldr	r3, [pc, #112]	; (8003674 <HAL_RCC_OscConfig+0x4fc>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fe fe82 	bl	8002310 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003610:	f7fe fe7e 	bl	8002310 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e020      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003622:	4b12      	ldr	r3, [pc, #72]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x498>
 800362e:	e018      	b.n	8003662 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e013      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_OscConfig+0x4f4>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	429a      	cmp	r2, r3
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40021000 	.word	0x40021000
 8003670:	40007000 	.word	0x40007000
 8003674:	42420060 	.word	0x42420060

08003678 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0d0      	b.n	800382e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800368c:	4b6a      	ldr	r3, [pc, #424]	; (8003838 <HAL_RCC_ClockConfig+0x1c0>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d910      	bls.n	80036bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b67      	ldr	r3, [pc, #412]	; (8003838 <HAL_RCC_ClockConfig+0x1c0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 0207 	bic.w	r2, r3, #7
 80036a2:	4965      	ldr	r1, [pc, #404]	; (8003838 <HAL_RCC_ClockConfig+0x1c0>)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036aa:	4b63      	ldr	r3, [pc, #396]	; (8003838 <HAL_RCC_ClockConfig+0x1c0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0b8      	b.n	800382e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d020      	beq.n	800370a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d4:	4b59      	ldr	r3, [pc, #356]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	4a58      	ldr	r2, [pc, #352]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036ec:	4b53      	ldr	r3, [pc, #332]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4a52      	ldr	r2, [pc, #328]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80036f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f8:	4b50      	ldr	r3, [pc, #320]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	494d      	ldr	r1, [pc, #308]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	4313      	orrs	r3, r2
 8003708:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d040      	beq.n	8003798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d107      	bne.n	800372e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	4b47      	ldr	r3, [pc, #284]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d115      	bne.n	8003756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e07f      	b.n	800382e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b02      	cmp	r3, #2
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003736:	4b41      	ldr	r3, [pc, #260]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e073      	b.n	800382e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003746:	4b3d      	ldr	r3, [pc, #244]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e06b      	b.n	800382e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003756:	4b39      	ldr	r3, [pc, #228]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f023 0203 	bic.w	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4936      	ldr	r1, [pc, #216]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003768:	f7fe fdd2 	bl	8002310 <HAL_GetTick>
 800376c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376e:	e00a      	b.n	8003786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003770:	f7fe fdce 	bl	8002310 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	f241 3288 	movw	r2, #5000	; 0x1388
 800377e:	4293      	cmp	r3, r2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e053      	b.n	800382e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	4b2d      	ldr	r3, [pc, #180]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 020c 	and.w	r2, r3, #12
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	429a      	cmp	r2, r3
 8003796:	d1eb      	bne.n	8003770 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003798:	4b27      	ldr	r3, [pc, #156]	; (8003838 <HAL_RCC_ClockConfig+0x1c0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d210      	bcs.n	80037c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b24      	ldr	r3, [pc, #144]	; (8003838 <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f023 0207 	bic.w	r2, r3, #7
 80037ae:	4922      	ldr	r1, [pc, #136]	; (8003838 <HAL_RCC_ClockConfig+0x1c0>)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b20      	ldr	r3, [pc, #128]	; (8003838 <HAL_RCC_ClockConfig+0x1c0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e032      	b.n	800382e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d008      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4916      	ldr	r1, [pc, #88]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037f2:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	490e      	ldr	r1, [pc, #56]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003806:	f000 f821 	bl	800384c <HAL_RCC_GetSysClockFreq>
 800380a:	4602      	mov	r2, r0
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	490a      	ldr	r1, [pc, #40]	; (8003840 <HAL_RCC_ClockConfig+0x1c8>)
 8003818:	5ccb      	ldrb	r3, [r1, r3]
 800381a:	fa22 f303 	lsr.w	r3, r2, r3
 800381e:	4a09      	ldr	r2, [pc, #36]	; (8003844 <HAL_RCC_ClockConfig+0x1cc>)
 8003820:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003822:	4b09      	ldr	r3, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1d0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fd30 	bl	800228c <HAL_InitTick>

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40022000 	.word	0x40022000
 800383c:	40021000 	.word	0x40021000
 8003840:	08007318 	.word	0x08007318
 8003844:	20000100 	.word	0x20000100
 8003848:	20000104 	.word	0x20000104

0800384c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800384c:	b490      	push	{r4, r7}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003852:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003854:	1d3c      	adds	r4, r7, #4
 8003856:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003858:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800385c:	f240 2301 	movw	r3, #513	; 0x201
 8003860:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	2300      	movs	r3, #0
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	2300      	movs	r3, #0
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003876:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b04      	cmp	r3, #4
 8003884:	d002      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0x40>
 8003886:	2b08      	cmp	r3, #8
 8003888:	d003      	beq.n	8003892 <HAL_RCC_GetSysClockFreq+0x46>
 800388a:	e02d      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800388c:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <HAL_RCC_GetSysClockFreq+0xb8>)
 800388e:	623b      	str	r3, [r7, #32]
      break;
 8003890:	e02d      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	0c9b      	lsrs	r3, r3, #18
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800389e:	4413      	add	r3, r2
 80038a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	0c5b      	lsrs	r3, r3, #17
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038be:	4413      	add	r3, r2
 80038c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	4a0e      	ldr	r2, [pc, #56]	; (8003904 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ca:	fb02 f203 	mul.w	r2, r2, r3
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	e004      	b.n	80038e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	4a0b      	ldr	r2, [pc, #44]	; (8003908 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	623b      	str	r3, [r7, #32]
      break;
 80038e6:	e002      	b.n	80038ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038e8:	4b06      	ldr	r3, [pc, #24]	; (8003904 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ea:	623b      	str	r3, [r7, #32]
      break;
 80038ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ee:	6a3b      	ldr	r3, [r7, #32]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3728      	adds	r7, #40	; 0x28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc90      	pop	{r4, r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	080072f8 	.word	0x080072f8
 8003900:	40021000 	.word	0x40021000
 8003904:	007a1200 	.word	0x007a1200
 8003908:	003d0900 	.word	0x003d0900

0800390c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003910:	4b02      	ldr	r3, [pc, #8]	; (800391c <HAL_RCC_GetHCLKFreq+0x10>)
 8003912:	681b      	ldr	r3, [r3, #0]
}
 8003914:	4618      	mov	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	20000100 	.word	0x20000100

08003920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003924:	f7ff fff2 	bl	800390c <HAL_RCC_GetHCLKFreq>
 8003928:	4602      	mov	r2, r0
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	0adb      	lsrs	r3, r3, #11
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	4903      	ldr	r1, [pc, #12]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003936:	5ccb      	ldrb	r3, [r1, r3]
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	08007328 	.word	0x08007328

08003948 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003950:	4b0a      	ldr	r3, [pc, #40]	; (800397c <RCC_Delay+0x34>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <RCC_Delay+0x38>)
 8003956:	fba2 2303 	umull	r2, r3, r2, r3
 800395a:	0a5b      	lsrs	r3, r3, #9
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	fb02 f303 	mul.w	r3, r2, r3
 8003962:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003964:	bf00      	nop
  }
  while (Delay --);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1e5a      	subs	r2, r3, #1
 800396a:	60fa      	str	r2, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f9      	bne.n	8003964 <RCC_Delay+0x1c>
}
 8003970:	bf00      	nop
 8003972:	bf00      	nop
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr
 800397c:	20000100 	.word	0x20000100
 8003980:	10624dd3 	.word	0x10624dd3

08003984 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b086      	sub	sp, #24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d07d      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80039a0:	2300      	movs	r3, #0
 80039a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a4:	4b4f      	ldr	r3, [pc, #316]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10d      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b0:	4b4c      	ldr	r3, [pc, #304]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	4a4b      	ldr	r2, [pc, #300]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ba:	61d3      	str	r3, [r2, #28]
 80039bc:	4b49      	ldr	r3, [pc, #292]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c8:	2301      	movs	r3, #1
 80039ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	4b46      	ldr	r3, [pc, #280]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d118      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d8:	4b43      	ldr	r3, [pc, #268]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a42      	ldr	r2, [pc, #264]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e4:	f7fe fc94 	bl	8002310 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ea:	e008      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ec:	f7fe fc90 	bl	8002310 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b64      	cmp	r3, #100	; 0x64
 80039f8:	d901      	bls.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e06d      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fe:	4b3a      	ldr	r3, [pc, #232]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0f0      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a0a:	4b36      	ldr	r3, [pc, #216]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d02e      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d027      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a28:	4b2e      	ldr	r3, [pc, #184]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a32:	4b2e      	ldr	r3, [pc, #184]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a38:	4b2c      	ldr	r3, [pc, #176]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a3e:	4a29      	ldr	r2, [pc, #164]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d014      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7fe fc5f 	bl	8002310 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fe fc5b 	bl	8002310 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e036      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ee      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a78:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	4917      	ldr	r1, [pc, #92]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d105      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a90:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	490b      	ldr	r1, [pc, #44]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4904      	ldr	r1, [pc, #16]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	42420440 	.word	0x42420440

08003af0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b08d      	sub	sp, #52	; 0x34
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003af8:	4b5a      	ldr	r3, [pc, #360]	; (8003c64 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003afa:	f107 040c 	add.w	r4, r7, #12
 8003afe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b04:	f240 2301 	movw	r3, #513	; 0x201
 8003b08:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0e:	2300      	movs	r3, #0
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b12:	2300      	movs	r3, #0
 8003b14:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d00a      	beq.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	f200 8091 	bhi.w	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d04c      	beq.n	8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d07c      	beq.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b38:	e089      	b.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003b3a:	4b4b      	ldr	r3, [pc, #300]	; (8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b40:	4b49      	ldr	r3, [pc, #292]	; (8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8082 	beq.w	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	0c9b      	lsrs	r3, r3, #18
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b60:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d018      	beq.n	8003b9e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b6c:	4b3e      	ldr	r3, [pc, #248]	; (8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	0c5b      	lsrs	r3, r3, #17
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00d      	beq.n	8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003b8c:	4a37      	ldr	r2, [pc, #220]	; (8003c6c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b9c:	e004      	b.n	8003ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	4a33      	ldr	r2, [pc, #204]	; (8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003ba8:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb4:	d102      	bne.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003bba:	e04a      	b.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	4a2c      	ldr	r2, [pc, #176]	; (8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003bca:	e042      	b.n	8003c52 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003bcc:	4b26      	ldr	r3, [pc, #152]	; (8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bdc:	d108      	bne.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003be8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bee:	e01f      	b.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bfa:	d109      	bne.n	8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003c08:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c0e:	e00f      	b.n	8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c1a:	d11c      	bne.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003c1c:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d016      	beq.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003c28:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003c2c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c2e:	e012      	b.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003c30:	e011      	b.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c32:	f7ff fe75 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 8003c36:	4602      	mov	r2, r0
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	0b9b      	lsrs	r3, r3, #14
 8003c3e:	f003 0303 	and.w	r3, r3, #3
 8003c42:	3301      	adds	r3, #1
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c4c:	e004      	b.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e002      	b.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003c52:	bf00      	nop
 8003c54:	e000      	b.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003c56:	bf00      	nop
    }
  }
  return (frequency);
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3734      	adds	r7, #52	; 0x34
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd90      	pop	{r4, r7, pc}
 8003c62:	bf00      	nop
 8003c64:	08007308 	.word	0x08007308
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	007a1200 	.word	0x007a1200
 8003c70:	003d0900 	.word	0x003d0900
 8003c74:	aaaaaaab 	.word	0xaaaaaaab

08003c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e041      	b.n	8003d0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fe f958 	bl	8001f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f000 faba 	bl	8004230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d001      	beq.n	8003d30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e032      	b.n	8003d96 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a18      	ldr	r2, [pc, #96]	; (8003da0 <HAL_TIM_Base_Start+0x88>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00e      	beq.n	8003d60 <HAL_TIM_Base_Start+0x48>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4a:	d009      	beq.n	8003d60 <HAL_TIM_Base_Start+0x48>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <HAL_TIM_Base_Start+0x8c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d004      	beq.n	8003d60 <HAL_TIM_Base_Start+0x48>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a13      	ldr	r2, [pc, #76]	; (8003da8 <HAL_TIM_Base_Start+0x90>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d111      	bne.n	8003d84 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b06      	cmp	r3, #6
 8003d70:	d010      	beq.n	8003d94 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0201 	orr.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d82:	e007      	b.n	8003d94 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40000800 	.word	0x40000800

08003dac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d001      	beq.n	8003dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e03a      	b.n	8003e3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a18      	ldr	r2, [pc, #96]	; (8003e44 <HAL_TIM_Base_Start_IT+0x98>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00e      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x58>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dee:	d009      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x58>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <HAL_TIM_Base_Start_IT+0x9c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x58>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <HAL_TIM_Base_Start_IT+0xa0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d111      	bne.n	8003e28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b06      	cmp	r3, #6
 8003e14:	d010      	beq.n	8003e38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 0201 	orr.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e26:	e007      	b.n	8003e38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr
 8003e44:	40012c00 	.word	0x40012c00
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000800 	.word	0x40000800

08003e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d122      	bne.n	8003eac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d11b      	bne.n	8003eac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0202 	mvn.w	r2, #2
 8003e7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9b1 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f9a4 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f9b3 	bl	800420c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d122      	bne.n	8003f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d11b      	bne.n	8003f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0204 	mvn.w	r2, #4
 8003ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f987 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003eec:	e005      	b.n	8003efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f97a 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f989 	bl	800420c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d122      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d11b      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0208 	mvn.w	r2, #8
 8003f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2204      	movs	r2, #4
 8003f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f95d 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003f40:	e005      	b.n	8003f4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f950 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f95f 	bl	800420c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	2b10      	cmp	r3, #16
 8003f60:	d122      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b10      	cmp	r3, #16
 8003f6e:	d11b      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0210 	mvn.w	r2, #16
 8003f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f933 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003f94:	e005      	b.n	8003fa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f926 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f935 	bl	800420c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d10e      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d107      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0201 	mvn.w	r2, #1
 8003fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fd fef0 	bl	8001db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fde:	2b80      	cmp	r3, #128	; 0x80
 8003fe0:	d10e      	bne.n	8004000 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d107      	bne.n	8004000 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa77 	bl	80044ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d10e      	bne.n	800402c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d107      	bne.n	800402c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f8f9 	bl	800421e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b20      	cmp	r3, #32
 8004038:	d10e      	bne.n	8004058 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b20      	cmp	r3, #32
 8004046:	d107      	bne.n	8004058 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0220 	mvn.w	r2, #32
 8004050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa42 	bl	80044dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004058:	bf00      	nop
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_TIM_ConfigClockSource+0x18>
 8004074:	2302      	movs	r3, #2
 8004076:	e0b3      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x180>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004096:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800409e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b0:	d03e      	beq.n	8004130 <HAL_TIM_ConfigClockSource+0xd0>
 80040b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b6:	f200 8087 	bhi.w	80041c8 <HAL_TIM_ConfigClockSource+0x168>
 80040ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040be:	f000 8085 	beq.w	80041cc <HAL_TIM_ConfigClockSource+0x16c>
 80040c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c6:	d87f      	bhi.n	80041c8 <HAL_TIM_ConfigClockSource+0x168>
 80040c8:	2b70      	cmp	r3, #112	; 0x70
 80040ca:	d01a      	beq.n	8004102 <HAL_TIM_ConfigClockSource+0xa2>
 80040cc:	2b70      	cmp	r3, #112	; 0x70
 80040ce:	d87b      	bhi.n	80041c8 <HAL_TIM_ConfigClockSource+0x168>
 80040d0:	2b60      	cmp	r3, #96	; 0x60
 80040d2:	d050      	beq.n	8004176 <HAL_TIM_ConfigClockSource+0x116>
 80040d4:	2b60      	cmp	r3, #96	; 0x60
 80040d6:	d877      	bhi.n	80041c8 <HAL_TIM_ConfigClockSource+0x168>
 80040d8:	2b50      	cmp	r3, #80	; 0x50
 80040da:	d03c      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0xf6>
 80040dc:	2b50      	cmp	r3, #80	; 0x50
 80040de:	d873      	bhi.n	80041c8 <HAL_TIM_ConfigClockSource+0x168>
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d058      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0x136>
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d86f      	bhi.n	80041c8 <HAL_TIM_ConfigClockSource+0x168>
 80040e8:	2b30      	cmp	r3, #48	; 0x30
 80040ea:	d064      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0x156>
 80040ec:	2b30      	cmp	r3, #48	; 0x30
 80040ee:	d86b      	bhi.n	80041c8 <HAL_TIM_ConfigClockSource+0x168>
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d060      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0x156>
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d867      	bhi.n	80041c8 <HAL_TIM_ConfigClockSource+0x168>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d05c      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0x156>
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d05a      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004100:	e062      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6899      	ldr	r1, [r3, #8]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f000 f966 	bl	80043e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004124:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	609a      	str	r2, [r3, #8]
      break;
 800412e:	e04e      	b.n	80041ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	6899      	ldr	r1, [r3, #8]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f000 f94f 	bl	80043e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004152:	609a      	str	r2, [r3, #8]
      break;
 8004154:	e03b      	b.n	80041ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	6859      	ldr	r1, [r3, #4]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	461a      	mov	r2, r3
 8004164:	f000 f8c6 	bl	80042f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2150      	movs	r1, #80	; 0x50
 800416e:	4618      	mov	r0, r3
 8004170:	f000 f91d 	bl	80043ae <TIM_ITRx_SetConfig>
      break;
 8004174:	e02b      	b.n	80041ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6859      	ldr	r1, [r3, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	461a      	mov	r2, r3
 8004184:	f000 f8e4 	bl	8004350 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2160      	movs	r1, #96	; 0x60
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f90d 	bl	80043ae <TIM_ITRx_SetConfig>
      break;
 8004194:	e01b      	b.n	80041ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6859      	ldr	r1, [r3, #4]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f000 f8a6 	bl	80042f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2140      	movs	r1, #64	; 0x40
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 f8fd 	bl	80043ae <TIM_ITRx_SetConfig>
      break;
 80041b4:	e00b      	b.n	80041ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4619      	mov	r1, r3
 80041c0:	4610      	mov	r0, r2
 80041c2:	f000 f8f4 	bl	80043ae <TIM_ITRx_SetConfig>
        break;
 80041c6:	e002      	b.n	80041ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041c8:	bf00      	nop
 80041ca:	e000      	b.n	80041ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80041cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr

0800421e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a29      	ldr	r2, [pc, #164]	; (80042e8 <TIM_Base_SetConfig+0xb8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00b      	beq.n	8004260 <TIM_Base_SetConfig+0x30>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d007      	beq.n	8004260 <TIM_Base_SetConfig+0x30>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a26      	ldr	r2, [pc, #152]	; (80042ec <TIM_Base_SetConfig+0xbc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0x30>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a25      	ldr	r2, [pc, #148]	; (80042f0 <TIM_Base_SetConfig+0xc0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d108      	bne.n	8004272 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1c      	ldr	r2, [pc, #112]	; (80042e8 <TIM_Base_SetConfig+0xb8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00b      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d007      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a19      	ldr	r2, [pc, #100]	; (80042ec <TIM_Base_SetConfig+0xbc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <TIM_Base_SetConfig+0xc0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d108      	bne.n	80042a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a07      	ldr	r2, [pc, #28]	; (80042e8 <TIM_Base_SetConfig+0xb8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d103      	bne.n	80042d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	615a      	str	r2, [r3, #20]
}
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40000800 	.word	0x40000800

080042f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f023 0201 	bic.w	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800431e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f023 030a 	bic.w	r3, r3, #10
 8004330:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	621a      	str	r2, [r3, #32]
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f023 0210 	bic.w	r2, r3, #16
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800437a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	031b      	lsls	r3, r3, #12
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800438c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	621a      	str	r2, [r3, #32]
}
 80043a4:	bf00      	nop
 80043a6:	371c      	adds	r7, #28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f043 0307 	orr.w	r3, r3, #7
 80043d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	609a      	str	r2, [r3, #8]
}
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr

080043e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b087      	sub	sp, #28
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	021a      	lsls	r2, r3, #8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	431a      	orrs	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4313      	orrs	r3, r2
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	609a      	str	r2, [r3, #8]
}
 8004416:	bf00      	nop
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004434:	2302      	movs	r3, #2
 8004436:	e046      	b.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004484:	d009      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a10      	ldr	r2, [pc, #64]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d10c      	bne.n	80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800

080044dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr

080044ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <__errno>:
 8004500:	4b01      	ldr	r3, [pc, #4]	; (8004508 <__errno+0x8>)
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	2000010c 	.word	0x2000010c

0800450c <__libc_init_array>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	2600      	movs	r6, #0
 8004510:	4d0c      	ldr	r5, [pc, #48]	; (8004544 <__libc_init_array+0x38>)
 8004512:	4c0d      	ldr	r4, [pc, #52]	; (8004548 <__libc_init_array+0x3c>)
 8004514:	1b64      	subs	r4, r4, r5
 8004516:	10a4      	asrs	r4, r4, #2
 8004518:	42a6      	cmp	r6, r4
 800451a:	d109      	bne.n	8004530 <__libc_init_array+0x24>
 800451c:	f002 febc 	bl	8007298 <_init>
 8004520:	2600      	movs	r6, #0
 8004522:	4d0a      	ldr	r5, [pc, #40]	; (800454c <__libc_init_array+0x40>)
 8004524:	4c0a      	ldr	r4, [pc, #40]	; (8004550 <__libc_init_array+0x44>)
 8004526:	1b64      	subs	r4, r4, r5
 8004528:	10a4      	asrs	r4, r4, #2
 800452a:	42a6      	cmp	r6, r4
 800452c:	d105      	bne.n	800453a <__libc_init_array+0x2e>
 800452e:	bd70      	pop	{r4, r5, r6, pc}
 8004530:	f855 3b04 	ldr.w	r3, [r5], #4
 8004534:	4798      	blx	r3
 8004536:	3601      	adds	r6, #1
 8004538:	e7ee      	b.n	8004518 <__libc_init_array+0xc>
 800453a:	f855 3b04 	ldr.w	r3, [r5], #4
 800453e:	4798      	blx	r3
 8004540:	3601      	adds	r6, #1
 8004542:	e7f2      	b.n	800452a <__libc_init_array+0x1e>
 8004544:	08007714 	.word	0x08007714
 8004548:	08007714 	.word	0x08007714
 800454c:	08007714 	.word	0x08007714
 8004550:	0800771c 	.word	0x0800771c

08004554 <memcpy>:
 8004554:	440a      	add	r2, r1
 8004556:	4291      	cmp	r1, r2
 8004558:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800455c:	d100      	bne.n	8004560 <memcpy+0xc>
 800455e:	4770      	bx	lr
 8004560:	b510      	push	{r4, lr}
 8004562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004566:	4291      	cmp	r1, r2
 8004568:	f803 4f01 	strb.w	r4, [r3, #1]!
 800456c:	d1f9      	bne.n	8004562 <memcpy+0xe>
 800456e:	bd10      	pop	{r4, pc}

08004570 <memset>:
 8004570:	4603      	mov	r3, r0
 8004572:	4402      	add	r2, r0
 8004574:	4293      	cmp	r3, r2
 8004576:	d100      	bne.n	800457a <memset+0xa>
 8004578:	4770      	bx	lr
 800457a:	f803 1b01 	strb.w	r1, [r3], #1
 800457e:	e7f9      	b.n	8004574 <memset+0x4>

08004580 <__cvt>:
 8004580:	2b00      	cmp	r3, #0
 8004582:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004586:	461f      	mov	r7, r3
 8004588:	bfbb      	ittet	lt
 800458a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800458e:	461f      	movlt	r7, r3
 8004590:	2300      	movge	r3, #0
 8004592:	232d      	movlt	r3, #45	; 0x2d
 8004594:	b088      	sub	sp, #32
 8004596:	4614      	mov	r4, r2
 8004598:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800459a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800459c:	7013      	strb	r3, [r2, #0]
 800459e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80045a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80045a4:	f023 0820 	bic.w	r8, r3, #32
 80045a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045ac:	d005      	beq.n	80045ba <__cvt+0x3a>
 80045ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80045b2:	d100      	bne.n	80045b6 <__cvt+0x36>
 80045b4:	3501      	adds	r5, #1
 80045b6:	2302      	movs	r3, #2
 80045b8:	e000      	b.n	80045bc <__cvt+0x3c>
 80045ba:	2303      	movs	r3, #3
 80045bc:	aa07      	add	r2, sp, #28
 80045be:	9204      	str	r2, [sp, #16]
 80045c0:	aa06      	add	r2, sp, #24
 80045c2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80045c6:	e9cd 3500 	strd	r3, r5, [sp]
 80045ca:	4622      	mov	r2, r4
 80045cc:	463b      	mov	r3, r7
 80045ce:	f000 fce7 	bl	8004fa0 <_dtoa_r>
 80045d2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045d6:	4606      	mov	r6, r0
 80045d8:	d102      	bne.n	80045e0 <__cvt+0x60>
 80045da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045dc:	07db      	lsls	r3, r3, #31
 80045de:	d522      	bpl.n	8004626 <__cvt+0xa6>
 80045e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045e4:	eb06 0905 	add.w	r9, r6, r5
 80045e8:	d110      	bne.n	800460c <__cvt+0x8c>
 80045ea:	7833      	ldrb	r3, [r6, #0]
 80045ec:	2b30      	cmp	r3, #48	; 0x30
 80045ee:	d10a      	bne.n	8004606 <__cvt+0x86>
 80045f0:	2200      	movs	r2, #0
 80045f2:	2300      	movs	r3, #0
 80045f4:	4620      	mov	r0, r4
 80045f6:	4639      	mov	r1, r7
 80045f8:	f7fc fa8a 	bl	8000b10 <__aeabi_dcmpeq>
 80045fc:	b918      	cbnz	r0, 8004606 <__cvt+0x86>
 80045fe:	f1c5 0501 	rsb	r5, r5, #1
 8004602:	f8ca 5000 	str.w	r5, [sl]
 8004606:	f8da 3000 	ldr.w	r3, [sl]
 800460a:	4499      	add	r9, r3
 800460c:	2200      	movs	r2, #0
 800460e:	2300      	movs	r3, #0
 8004610:	4620      	mov	r0, r4
 8004612:	4639      	mov	r1, r7
 8004614:	f7fc fa7c 	bl	8000b10 <__aeabi_dcmpeq>
 8004618:	b108      	cbz	r0, 800461e <__cvt+0x9e>
 800461a:	f8cd 901c 	str.w	r9, [sp, #28]
 800461e:	2230      	movs	r2, #48	; 0x30
 8004620:	9b07      	ldr	r3, [sp, #28]
 8004622:	454b      	cmp	r3, r9
 8004624:	d307      	bcc.n	8004636 <__cvt+0xb6>
 8004626:	4630      	mov	r0, r6
 8004628:	9b07      	ldr	r3, [sp, #28]
 800462a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800462c:	1b9b      	subs	r3, r3, r6
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	b008      	add	sp, #32
 8004632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004636:	1c59      	adds	r1, r3, #1
 8004638:	9107      	str	r1, [sp, #28]
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	e7f0      	b.n	8004620 <__cvt+0xa0>

0800463e <__exponent>:
 800463e:	4603      	mov	r3, r0
 8004640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004642:	2900      	cmp	r1, #0
 8004644:	f803 2b02 	strb.w	r2, [r3], #2
 8004648:	bfb6      	itet	lt
 800464a:	222d      	movlt	r2, #45	; 0x2d
 800464c:	222b      	movge	r2, #43	; 0x2b
 800464e:	4249      	neglt	r1, r1
 8004650:	2909      	cmp	r1, #9
 8004652:	7042      	strb	r2, [r0, #1]
 8004654:	dd2b      	ble.n	80046ae <__exponent+0x70>
 8004656:	f10d 0407 	add.w	r4, sp, #7
 800465a:	46a4      	mov	ip, r4
 800465c:	270a      	movs	r7, #10
 800465e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004662:	460a      	mov	r2, r1
 8004664:	46a6      	mov	lr, r4
 8004666:	fb07 1516 	mls	r5, r7, r6, r1
 800466a:	2a63      	cmp	r2, #99	; 0x63
 800466c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004670:	4631      	mov	r1, r6
 8004672:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004676:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800467a:	dcf0      	bgt.n	800465e <__exponent+0x20>
 800467c:	3130      	adds	r1, #48	; 0x30
 800467e:	f1ae 0502 	sub.w	r5, lr, #2
 8004682:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004686:	4629      	mov	r1, r5
 8004688:	1c44      	adds	r4, r0, #1
 800468a:	4561      	cmp	r1, ip
 800468c:	d30a      	bcc.n	80046a4 <__exponent+0x66>
 800468e:	f10d 0209 	add.w	r2, sp, #9
 8004692:	eba2 020e 	sub.w	r2, r2, lr
 8004696:	4565      	cmp	r5, ip
 8004698:	bf88      	it	hi
 800469a:	2200      	movhi	r2, #0
 800469c:	4413      	add	r3, r2
 800469e:	1a18      	subs	r0, r3, r0
 80046a0:	b003      	add	sp, #12
 80046a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046a8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80046ac:	e7ed      	b.n	800468a <__exponent+0x4c>
 80046ae:	2330      	movs	r3, #48	; 0x30
 80046b0:	3130      	adds	r1, #48	; 0x30
 80046b2:	7083      	strb	r3, [r0, #2]
 80046b4:	70c1      	strb	r1, [r0, #3]
 80046b6:	1d03      	adds	r3, r0, #4
 80046b8:	e7f1      	b.n	800469e <__exponent+0x60>
	...

080046bc <_printf_float>:
 80046bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c0:	b091      	sub	sp, #68	; 0x44
 80046c2:	460c      	mov	r4, r1
 80046c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80046c8:	4616      	mov	r6, r2
 80046ca:	461f      	mov	r7, r3
 80046cc:	4605      	mov	r5, r0
 80046ce:	f001 fa55 	bl	8005b7c <_localeconv_r>
 80046d2:	6803      	ldr	r3, [r0, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	9309      	str	r3, [sp, #36]	; 0x24
 80046d8:	f7fb fd3a 	bl	8000150 <strlen>
 80046dc:	2300      	movs	r3, #0
 80046de:	930e      	str	r3, [sp, #56]	; 0x38
 80046e0:	f8d8 3000 	ldr.w	r3, [r8]
 80046e4:	900a      	str	r0, [sp, #40]	; 0x28
 80046e6:	3307      	adds	r3, #7
 80046e8:	f023 0307 	bic.w	r3, r3, #7
 80046ec:	f103 0208 	add.w	r2, r3, #8
 80046f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80046f4:	f8d4 b000 	ldr.w	fp, [r4]
 80046f8:	f8c8 2000 	str.w	r2, [r8]
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004704:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004708:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800470c:	930b      	str	r3, [sp, #44]	; 0x2c
 800470e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004712:	4640      	mov	r0, r8
 8004714:	4b9c      	ldr	r3, [pc, #624]	; (8004988 <_printf_float+0x2cc>)
 8004716:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004718:	f7fc fa2c 	bl	8000b74 <__aeabi_dcmpun>
 800471c:	bb70      	cbnz	r0, 800477c <_printf_float+0xc0>
 800471e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004722:	4640      	mov	r0, r8
 8004724:	4b98      	ldr	r3, [pc, #608]	; (8004988 <_printf_float+0x2cc>)
 8004726:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004728:	f7fc fa06 	bl	8000b38 <__aeabi_dcmple>
 800472c:	bb30      	cbnz	r0, 800477c <_printf_float+0xc0>
 800472e:	2200      	movs	r2, #0
 8004730:	2300      	movs	r3, #0
 8004732:	4640      	mov	r0, r8
 8004734:	4651      	mov	r1, sl
 8004736:	f7fc f9f5 	bl	8000b24 <__aeabi_dcmplt>
 800473a:	b110      	cbz	r0, 8004742 <_printf_float+0x86>
 800473c:	232d      	movs	r3, #45	; 0x2d
 800473e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004742:	4b92      	ldr	r3, [pc, #584]	; (800498c <_printf_float+0x2d0>)
 8004744:	4892      	ldr	r0, [pc, #584]	; (8004990 <_printf_float+0x2d4>)
 8004746:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800474a:	bf94      	ite	ls
 800474c:	4698      	movls	r8, r3
 800474e:	4680      	movhi	r8, r0
 8004750:	2303      	movs	r3, #3
 8004752:	f04f 0a00 	mov.w	sl, #0
 8004756:	6123      	str	r3, [r4, #16]
 8004758:	f02b 0304 	bic.w	r3, fp, #4
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	4633      	mov	r3, r6
 8004760:	4621      	mov	r1, r4
 8004762:	4628      	mov	r0, r5
 8004764:	9700      	str	r7, [sp, #0]
 8004766:	aa0f      	add	r2, sp, #60	; 0x3c
 8004768:	f000 f9d4 	bl	8004b14 <_printf_common>
 800476c:	3001      	adds	r0, #1
 800476e:	f040 8090 	bne.w	8004892 <_printf_float+0x1d6>
 8004772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004776:	b011      	add	sp, #68	; 0x44
 8004778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800477c:	4642      	mov	r2, r8
 800477e:	4653      	mov	r3, sl
 8004780:	4640      	mov	r0, r8
 8004782:	4651      	mov	r1, sl
 8004784:	f7fc f9f6 	bl	8000b74 <__aeabi_dcmpun>
 8004788:	b148      	cbz	r0, 800479e <_printf_float+0xe2>
 800478a:	f1ba 0f00 	cmp.w	sl, #0
 800478e:	bfb8      	it	lt
 8004790:	232d      	movlt	r3, #45	; 0x2d
 8004792:	4880      	ldr	r0, [pc, #512]	; (8004994 <_printf_float+0x2d8>)
 8004794:	bfb8      	it	lt
 8004796:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800479a:	4b7f      	ldr	r3, [pc, #508]	; (8004998 <_printf_float+0x2dc>)
 800479c:	e7d3      	b.n	8004746 <_printf_float+0x8a>
 800479e:	6863      	ldr	r3, [r4, #4]
 80047a0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	d142      	bne.n	800482e <_printf_float+0x172>
 80047a8:	2306      	movs	r3, #6
 80047aa:	6063      	str	r3, [r4, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	9206      	str	r2, [sp, #24]
 80047b0:	aa0e      	add	r2, sp, #56	; 0x38
 80047b2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80047b6:	aa0d      	add	r2, sp, #52	; 0x34
 80047b8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80047bc:	9203      	str	r2, [sp, #12]
 80047be:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80047c2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80047c6:	6023      	str	r3, [r4, #0]
 80047c8:	6863      	ldr	r3, [r4, #4]
 80047ca:	4642      	mov	r2, r8
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	4628      	mov	r0, r5
 80047d0:	4653      	mov	r3, sl
 80047d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80047d4:	f7ff fed4 	bl	8004580 <__cvt>
 80047d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047da:	4680      	mov	r8, r0
 80047dc:	2947      	cmp	r1, #71	; 0x47
 80047de:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047e0:	d108      	bne.n	80047f4 <_printf_float+0x138>
 80047e2:	1cc8      	adds	r0, r1, #3
 80047e4:	db02      	blt.n	80047ec <_printf_float+0x130>
 80047e6:	6863      	ldr	r3, [r4, #4]
 80047e8:	4299      	cmp	r1, r3
 80047ea:	dd40      	ble.n	800486e <_printf_float+0x1b2>
 80047ec:	f1a9 0902 	sub.w	r9, r9, #2
 80047f0:	fa5f f989 	uxtb.w	r9, r9
 80047f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80047f8:	d81f      	bhi.n	800483a <_printf_float+0x17e>
 80047fa:	464a      	mov	r2, r9
 80047fc:	3901      	subs	r1, #1
 80047fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004802:	910d      	str	r1, [sp, #52]	; 0x34
 8004804:	f7ff ff1b 	bl	800463e <__exponent>
 8004808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800480a:	4682      	mov	sl, r0
 800480c:	1813      	adds	r3, r2, r0
 800480e:	2a01      	cmp	r2, #1
 8004810:	6123      	str	r3, [r4, #16]
 8004812:	dc02      	bgt.n	800481a <_printf_float+0x15e>
 8004814:	6822      	ldr	r2, [r4, #0]
 8004816:	07d2      	lsls	r2, r2, #31
 8004818:	d501      	bpl.n	800481e <_printf_float+0x162>
 800481a:	3301      	adds	r3, #1
 800481c:	6123      	str	r3, [r4, #16]
 800481e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004822:	2b00      	cmp	r3, #0
 8004824:	d09b      	beq.n	800475e <_printf_float+0xa2>
 8004826:	232d      	movs	r3, #45	; 0x2d
 8004828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800482c:	e797      	b.n	800475e <_printf_float+0xa2>
 800482e:	2947      	cmp	r1, #71	; 0x47
 8004830:	d1bc      	bne.n	80047ac <_printf_float+0xf0>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1ba      	bne.n	80047ac <_printf_float+0xf0>
 8004836:	2301      	movs	r3, #1
 8004838:	e7b7      	b.n	80047aa <_printf_float+0xee>
 800483a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800483e:	d118      	bne.n	8004872 <_printf_float+0x1b6>
 8004840:	2900      	cmp	r1, #0
 8004842:	6863      	ldr	r3, [r4, #4]
 8004844:	dd0b      	ble.n	800485e <_printf_float+0x1a2>
 8004846:	6121      	str	r1, [r4, #16]
 8004848:	b913      	cbnz	r3, 8004850 <_printf_float+0x194>
 800484a:	6822      	ldr	r2, [r4, #0]
 800484c:	07d0      	lsls	r0, r2, #31
 800484e:	d502      	bpl.n	8004856 <_printf_float+0x19a>
 8004850:	3301      	adds	r3, #1
 8004852:	440b      	add	r3, r1
 8004854:	6123      	str	r3, [r4, #16]
 8004856:	f04f 0a00 	mov.w	sl, #0
 800485a:	65a1      	str	r1, [r4, #88]	; 0x58
 800485c:	e7df      	b.n	800481e <_printf_float+0x162>
 800485e:	b913      	cbnz	r3, 8004866 <_printf_float+0x1aa>
 8004860:	6822      	ldr	r2, [r4, #0]
 8004862:	07d2      	lsls	r2, r2, #31
 8004864:	d501      	bpl.n	800486a <_printf_float+0x1ae>
 8004866:	3302      	adds	r3, #2
 8004868:	e7f4      	b.n	8004854 <_printf_float+0x198>
 800486a:	2301      	movs	r3, #1
 800486c:	e7f2      	b.n	8004854 <_printf_float+0x198>
 800486e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004874:	4299      	cmp	r1, r3
 8004876:	db05      	blt.n	8004884 <_printf_float+0x1c8>
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	6121      	str	r1, [r4, #16]
 800487c:	07d8      	lsls	r0, r3, #31
 800487e:	d5ea      	bpl.n	8004856 <_printf_float+0x19a>
 8004880:	1c4b      	adds	r3, r1, #1
 8004882:	e7e7      	b.n	8004854 <_printf_float+0x198>
 8004884:	2900      	cmp	r1, #0
 8004886:	bfcc      	ite	gt
 8004888:	2201      	movgt	r2, #1
 800488a:	f1c1 0202 	rsble	r2, r1, #2
 800488e:	4413      	add	r3, r2
 8004890:	e7e0      	b.n	8004854 <_printf_float+0x198>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	055a      	lsls	r2, r3, #21
 8004896:	d407      	bmi.n	80048a8 <_printf_float+0x1ec>
 8004898:	6923      	ldr	r3, [r4, #16]
 800489a:	4642      	mov	r2, r8
 800489c:	4631      	mov	r1, r6
 800489e:	4628      	mov	r0, r5
 80048a0:	47b8      	blx	r7
 80048a2:	3001      	adds	r0, #1
 80048a4:	d12b      	bne.n	80048fe <_printf_float+0x242>
 80048a6:	e764      	b.n	8004772 <_printf_float+0xb6>
 80048a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80048ac:	f240 80dd 	bls.w	8004a6a <_printf_float+0x3ae>
 80048b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048b4:	2200      	movs	r2, #0
 80048b6:	2300      	movs	r3, #0
 80048b8:	f7fc f92a 	bl	8000b10 <__aeabi_dcmpeq>
 80048bc:	2800      	cmp	r0, #0
 80048be:	d033      	beq.n	8004928 <_printf_float+0x26c>
 80048c0:	2301      	movs	r3, #1
 80048c2:	4631      	mov	r1, r6
 80048c4:	4628      	mov	r0, r5
 80048c6:	4a35      	ldr	r2, [pc, #212]	; (800499c <_printf_float+0x2e0>)
 80048c8:	47b8      	blx	r7
 80048ca:	3001      	adds	r0, #1
 80048cc:	f43f af51 	beq.w	8004772 <_printf_float+0xb6>
 80048d0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048d4:	429a      	cmp	r2, r3
 80048d6:	db02      	blt.n	80048de <_printf_float+0x222>
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	07d8      	lsls	r0, r3, #31
 80048dc:	d50f      	bpl.n	80048fe <_printf_float+0x242>
 80048de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048e2:	4631      	mov	r1, r6
 80048e4:	4628      	mov	r0, r5
 80048e6:	47b8      	blx	r7
 80048e8:	3001      	adds	r0, #1
 80048ea:	f43f af42 	beq.w	8004772 <_printf_float+0xb6>
 80048ee:	f04f 0800 	mov.w	r8, #0
 80048f2:	f104 091a 	add.w	r9, r4, #26
 80048f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048f8:	3b01      	subs	r3, #1
 80048fa:	4543      	cmp	r3, r8
 80048fc:	dc09      	bgt.n	8004912 <_printf_float+0x256>
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	079b      	lsls	r3, r3, #30
 8004902:	f100 8102 	bmi.w	8004b0a <_printf_float+0x44e>
 8004906:	68e0      	ldr	r0, [r4, #12]
 8004908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800490a:	4298      	cmp	r0, r3
 800490c:	bfb8      	it	lt
 800490e:	4618      	movlt	r0, r3
 8004910:	e731      	b.n	8004776 <_printf_float+0xba>
 8004912:	2301      	movs	r3, #1
 8004914:	464a      	mov	r2, r9
 8004916:	4631      	mov	r1, r6
 8004918:	4628      	mov	r0, r5
 800491a:	47b8      	blx	r7
 800491c:	3001      	adds	r0, #1
 800491e:	f43f af28 	beq.w	8004772 <_printf_float+0xb6>
 8004922:	f108 0801 	add.w	r8, r8, #1
 8004926:	e7e6      	b.n	80048f6 <_printf_float+0x23a>
 8004928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800492a:	2b00      	cmp	r3, #0
 800492c:	dc38      	bgt.n	80049a0 <_printf_float+0x2e4>
 800492e:	2301      	movs	r3, #1
 8004930:	4631      	mov	r1, r6
 8004932:	4628      	mov	r0, r5
 8004934:	4a19      	ldr	r2, [pc, #100]	; (800499c <_printf_float+0x2e0>)
 8004936:	47b8      	blx	r7
 8004938:	3001      	adds	r0, #1
 800493a:	f43f af1a 	beq.w	8004772 <_printf_float+0xb6>
 800493e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004942:	4313      	orrs	r3, r2
 8004944:	d102      	bne.n	800494c <_printf_float+0x290>
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	07d9      	lsls	r1, r3, #31
 800494a:	d5d8      	bpl.n	80048fe <_printf_float+0x242>
 800494c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004950:	4631      	mov	r1, r6
 8004952:	4628      	mov	r0, r5
 8004954:	47b8      	blx	r7
 8004956:	3001      	adds	r0, #1
 8004958:	f43f af0b 	beq.w	8004772 <_printf_float+0xb6>
 800495c:	f04f 0900 	mov.w	r9, #0
 8004960:	f104 0a1a 	add.w	sl, r4, #26
 8004964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004966:	425b      	negs	r3, r3
 8004968:	454b      	cmp	r3, r9
 800496a:	dc01      	bgt.n	8004970 <_printf_float+0x2b4>
 800496c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800496e:	e794      	b.n	800489a <_printf_float+0x1de>
 8004970:	2301      	movs	r3, #1
 8004972:	4652      	mov	r2, sl
 8004974:	4631      	mov	r1, r6
 8004976:	4628      	mov	r0, r5
 8004978:	47b8      	blx	r7
 800497a:	3001      	adds	r0, #1
 800497c:	f43f aef9 	beq.w	8004772 <_printf_float+0xb6>
 8004980:	f109 0901 	add.w	r9, r9, #1
 8004984:	e7ee      	b.n	8004964 <_printf_float+0x2a8>
 8004986:	bf00      	nop
 8004988:	7fefffff 	.word	0x7fefffff
 800498c:	08007334 	.word	0x08007334
 8004990:	08007338 	.word	0x08007338
 8004994:	08007340 	.word	0x08007340
 8004998:	0800733c 	.word	0x0800733c
 800499c:	08007344 	.word	0x08007344
 80049a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049a4:	429a      	cmp	r2, r3
 80049a6:	bfa8      	it	ge
 80049a8:	461a      	movge	r2, r3
 80049aa:	2a00      	cmp	r2, #0
 80049ac:	4691      	mov	r9, r2
 80049ae:	dc37      	bgt.n	8004a20 <_printf_float+0x364>
 80049b0:	f04f 0b00 	mov.w	fp, #0
 80049b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049b8:	f104 021a 	add.w	r2, r4, #26
 80049bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80049c0:	ebaa 0309 	sub.w	r3, sl, r9
 80049c4:	455b      	cmp	r3, fp
 80049c6:	dc33      	bgt.n	8004a30 <_printf_float+0x374>
 80049c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049cc:	429a      	cmp	r2, r3
 80049ce:	db3b      	blt.n	8004a48 <_printf_float+0x38c>
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	07da      	lsls	r2, r3, #31
 80049d4:	d438      	bmi.n	8004a48 <_printf_float+0x38c>
 80049d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80049da:	eba2 030a 	sub.w	r3, r2, sl
 80049de:	eba2 0901 	sub.w	r9, r2, r1
 80049e2:	4599      	cmp	r9, r3
 80049e4:	bfa8      	it	ge
 80049e6:	4699      	movge	r9, r3
 80049e8:	f1b9 0f00 	cmp.w	r9, #0
 80049ec:	dc34      	bgt.n	8004a58 <_printf_float+0x39c>
 80049ee:	f04f 0800 	mov.w	r8, #0
 80049f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049f6:	f104 0a1a 	add.w	sl, r4, #26
 80049fa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	eba3 0309 	sub.w	r3, r3, r9
 8004a04:	4543      	cmp	r3, r8
 8004a06:	f77f af7a 	ble.w	80048fe <_printf_float+0x242>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	4652      	mov	r2, sl
 8004a0e:	4631      	mov	r1, r6
 8004a10:	4628      	mov	r0, r5
 8004a12:	47b8      	blx	r7
 8004a14:	3001      	adds	r0, #1
 8004a16:	f43f aeac 	beq.w	8004772 <_printf_float+0xb6>
 8004a1a:	f108 0801 	add.w	r8, r8, #1
 8004a1e:	e7ec      	b.n	80049fa <_printf_float+0x33e>
 8004a20:	4613      	mov	r3, r2
 8004a22:	4631      	mov	r1, r6
 8004a24:	4642      	mov	r2, r8
 8004a26:	4628      	mov	r0, r5
 8004a28:	47b8      	blx	r7
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	d1c0      	bne.n	80049b0 <_printf_float+0x2f4>
 8004a2e:	e6a0      	b.n	8004772 <_printf_float+0xb6>
 8004a30:	2301      	movs	r3, #1
 8004a32:	4631      	mov	r1, r6
 8004a34:	4628      	mov	r0, r5
 8004a36:	920b      	str	r2, [sp, #44]	; 0x2c
 8004a38:	47b8      	blx	r7
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	f43f ae99 	beq.w	8004772 <_printf_float+0xb6>
 8004a40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a42:	f10b 0b01 	add.w	fp, fp, #1
 8004a46:	e7b9      	b.n	80049bc <_printf_float+0x300>
 8004a48:	4631      	mov	r1, r6
 8004a4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a4e:	4628      	mov	r0, r5
 8004a50:	47b8      	blx	r7
 8004a52:	3001      	adds	r0, #1
 8004a54:	d1bf      	bne.n	80049d6 <_printf_float+0x31a>
 8004a56:	e68c      	b.n	8004772 <_printf_float+0xb6>
 8004a58:	464b      	mov	r3, r9
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	eb08 020a 	add.w	r2, r8, sl
 8004a62:	47b8      	blx	r7
 8004a64:	3001      	adds	r0, #1
 8004a66:	d1c2      	bne.n	80049ee <_printf_float+0x332>
 8004a68:	e683      	b.n	8004772 <_printf_float+0xb6>
 8004a6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a6c:	2a01      	cmp	r2, #1
 8004a6e:	dc01      	bgt.n	8004a74 <_printf_float+0x3b8>
 8004a70:	07db      	lsls	r3, r3, #31
 8004a72:	d537      	bpl.n	8004ae4 <_printf_float+0x428>
 8004a74:	2301      	movs	r3, #1
 8004a76:	4642      	mov	r2, r8
 8004a78:	4631      	mov	r1, r6
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	47b8      	blx	r7
 8004a7e:	3001      	adds	r0, #1
 8004a80:	f43f ae77 	beq.w	8004772 <_printf_float+0xb6>
 8004a84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a88:	4631      	mov	r1, r6
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	47b8      	blx	r7
 8004a8e:	3001      	adds	r0, #1
 8004a90:	f43f ae6f 	beq.w	8004772 <_printf_float+0xb6>
 8004a94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f7fc f838 	bl	8000b10 <__aeabi_dcmpeq>
 8004aa0:	b9d8      	cbnz	r0, 8004ada <_printf_float+0x41e>
 8004aa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aa4:	f108 0201 	add.w	r2, r8, #1
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	4631      	mov	r1, r6
 8004aac:	4628      	mov	r0, r5
 8004aae:	47b8      	blx	r7
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	d10e      	bne.n	8004ad2 <_printf_float+0x416>
 8004ab4:	e65d      	b.n	8004772 <_printf_float+0xb6>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	464a      	mov	r2, r9
 8004aba:	4631      	mov	r1, r6
 8004abc:	4628      	mov	r0, r5
 8004abe:	47b8      	blx	r7
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	f43f ae56 	beq.w	8004772 <_printf_float+0xb6>
 8004ac6:	f108 0801 	add.w	r8, r8, #1
 8004aca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004acc:	3b01      	subs	r3, #1
 8004ace:	4543      	cmp	r3, r8
 8004ad0:	dcf1      	bgt.n	8004ab6 <_printf_float+0x3fa>
 8004ad2:	4653      	mov	r3, sl
 8004ad4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ad8:	e6e0      	b.n	800489c <_printf_float+0x1e0>
 8004ada:	f04f 0800 	mov.w	r8, #0
 8004ade:	f104 091a 	add.w	r9, r4, #26
 8004ae2:	e7f2      	b.n	8004aca <_printf_float+0x40e>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	4642      	mov	r2, r8
 8004ae8:	e7df      	b.n	8004aaa <_printf_float+0x3ee>
 8004aea:	2301      	movs	r3, #1
 8004aec:	464a      	mov	r2, r9
 8004aee:	4631      	mov	r1, r6
 8004af0:	4628      	mov	r0, r5
 8004af2:	47b8      	blx	r7
 8004af4:	3001      	adds	r0, #1
 8004af6:	f43f ae3c 	beq.w	8004772 <_printf_float+0xb6>
 8004afa:	f108 0801 	add.w	r8, r8, #1
 8004afe:	68e3      	ldr	r3, [r4, #12]
 8004b00:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b02:	1a5b      	subs	r3, r3, r1
 8004b04:	4543      	cmp	r3, r8
 8004b06:	dcf0      	bgt.n	8004aea <_printf_float+0x42e>
 8004b08:	e6fd      	b.n	8004906 <_printf_float+0x24a>
 8004b0a:	f04f 0800 	mov.w	r8, #0
 8004b0e:	f104 0919 	add.w	r9, r4, #25
 8004b12:	e7f4      	b.n	8004afe <_printf_float+0x442>

08004b14 <_printf_common>:
 8004b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b18:	4616      	mov	r6, r2
 8004b1a:	4699      	mov	r9, r3
 8004b1c:	688a      	ldr	r2, [r1, #8]
 8004b1e:	690b      	ldr	r3, [r1, #16]
 8004b20:	4607      	mov	r7, r0
 8004b22:	4293      	cmp	r3, r2
 8004b24:	bfb8      	it	lt
 8004b26:	4613      	movlt	r3, r2
 8004b28:	6033      	str	r3, [r6, #0]
 8004b2a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b2e:	460c      	mov	r4, r1
 8004b30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b34:	b10a      	cbz	r2, 8004b3a <_printf_common+0x26>
 8004b36:	3301      	adds	r3, #1
 8004b38:	6033      	str	r3, [r6, #0]
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	0699      	lsls	r1, r3, #26
 8004b3e:	bf42      	ittt	mi
 8004b40:	6833      	ldrmi	r3, [r6, #0]
 8004b42:	3302      	addmi	r3, #2
 8004b44:	6033      	strmi	r3, [r6, #0]
 8004b46:	6825      	ldr	r5, [r4, #0]
 8004b48:	f015 0506 	ands.w	r5, r5, #6
 8004b4c:	d106      	bne.n	8004b5c <_printf_common+0x48>
 8004b4e:	f104 0a19 	add.w	sl, r4, #25
 8004b52:	68e3      	ldr	r3, [r4, #12]
 8004b54:	6832      	ldr	r2, [r6, #0]
 8004b56:	1a9b      	subs	r3, r3, r2
 8004b58:	42ab      	cmp	r3, r5
 8004b5a:	dc28      	bgt.n	8004bae <_printf_common+0x9a>
 8004b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b60:	1e13      	subs	r3, r2, #0
 8004b62:	6822      	ldr	r2, [r4, #0]
 8004b64:	bf18      	it	ne
 8004b66:	2301      	movne	r3, #1
 8004b68:	0692      	lsls	r2, r2, #26
 8004b6a:	d42d      	bmi.n	8004bc8 <_printf_common+0xb4>
 8004b6c:	4649      	mov	r1, r9
 8004b6e:	4638      	mov	r0, r7
 8004b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b74:	47c0      	blx	r8
 8004b76:	3001      	adds	r0, #1
 8004b78:	d020      	beq.n	8004bbc <_printf_common+0xa8>
 8004b7a:	6823      	ldr	r3, [r4, #0]
 8004b7c:	68e5      	ldr	r5, [r4, #12]
 8004b7e:	f003 0306 	and.w	r3, r3, #6
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	bf18      	it	ne
 8004b86:	2500      	movne	r5, #0
 8004b88:	6832      	ldr	r2, [r6, #0]
 8004b8a:	f04f 0600 	mov.w	r6, #0
 8004b8e:	68a3      	ldr	r3, [r4, #8]
 8004b90:	bf08      	it	eq
 8004b92:	1aad      	subeq	r5, r5, r2
 8004b94:	6922      	ldr	r2, [r4, #16]
 8004b96:	bf08      	it	eq
 8004b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	bfc4      	itt	gt
 8004ba0:	1a9b      	subgt	r3, r3, r2
 8004ba2:	18ed      	addgt	r5, r5, r3
 8004ba4:	341a      	adds	r4, #26
 8004ba6:	42b5      	cmp	r5, r6
 8004ba8:	d11a      	bne.n	8004be0 <_printf_common+0xcc>
 8004baa:	2000      	movs	r0, #0
 8004bac:	e008      	b.n	8004bc0 <_printf_common+0xac>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	4652      	mov	r2, sl
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	47c0      	blx	r8
 8004bb8:	3001      	adds	r0, #1
 8004bba:	d103      	bne.n	8004bc4 <_printf_common+0xb0>
 8004bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc4:	3501      	adds	r5, #1
 8004bc6:	e7c4      	b.n	8004b52 <_printf_common+0x3e>
 8004bc8:	2030      	movs	r0, #48	; 0x30
 8004bca:	18e1      	adds	r1, r4, r3
 8004bcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bd6:	4422      	add	r2, r4
 8004bd8:	3302      	adds	r3, #2
 8004bda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bde:	e7c5      	b.n	8004b6c <_printf_common+0x58>
 8004be0:	2301      	movs	r3, #1
 8004be2:	4622      	mov	r2, r4
 8004be4:	4649      	mov	r1, r9
 8004be6:	4638      	mov	r0, r7
 8004be8:	47c0      	blx	r8
 8004bea:	3001      	adds	r0, #1
 8004bec:	d0e6      	beq.n	8004bbc <_printf_common+0xa8>
 8004bee:	3601      	adds	r6, #1
 8004bf0:	e7d9      	b.n	8004ba6 <_printf_common+0x92>
	...

08004bf4 <_printf_i>:
 8004bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	7e27      	ldrb	r7, [r4, #24]
 8004bfc:	4691      	mov	r9, r2
 8004bfe:	2f78      	cmp	r7, #120	; 0x78
 8004c00:	4680      	mov	r8, r0
 8004c02:	469a      	mov	sl, r3
 8004c04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c0a:	d807      	bhi.n	8004c1c <_printf_i+0x28>
 8004c0c:	2f62      	cmp	r7, #98	; 0x62
 8004c0e:	d80a      	bhi.n	8004c26 <_printf_i+0x32>
 8004c10:	2f00      	cmp	r7, #0
 8004c12:	f000 80d9 	beq.w	8004dc8 <_printf_i+0x1d4>
 8004c16:	2f58      	cmp	r7, #88	; 0x58
 8004c18:	f000 80a4 	beq.w	8004d64 <_printf_i+0x170>
 8004c1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c24:	e03a      	b.n	8004c9c <_printf_i+0xa8>
 8004c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c2a:	2b15      	cmp	r3, #21
 8004c2c:	d8f6      	bhi.n	8004c1c <_printf_i+0x28>
 8004c2e:	a001      	add	r0, pc, #4	; (adr r0, 8004c34 <_printf_i+0x40>)
 8004c30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c34:	08004c8d 	.word	0x08004c8d
 8004c38:	08004ca1 	.word	0x08004ca1
 8004c3c:	08004c1d 	.word	0x08004c1d
 8004c40:	08004c1d 	.word	0x08004c1d
 8004c44:	08004c1d 	.word	0x08004c1d
 8004c48:	08004c1d 	.word	0x08004c1d
 8004c4c:	08004ca1 	.word	0x08004ca1
 8004c50:	08004c1d 	.word	0x08004c1d
 8004c54:	08004c1d 	.word	0x08004c1d
 8004c58:	08004c1d 	.word	0x08004c1d
 8004c5c:	08004c1d 	.word	0x08004c1d
 8004c60:	08004daf 	.word	0x08004daf
 8004c64:	08004cd1 	.word	0x08004cd1
 8004c68:	08004d91 	.word	0x08004d91
 8004c6c:	08004c1d 	.word	0x08004c1d
 8004c70:	08004c1d 	.word	0x08004c1d
 8004c74:	08004dd1 	.word	0x08004dd1
 8004c78:	08004c1d 	.word	0x08004c1d
 8004c7c:	08004cd1 	.word	0x08004cd1
 8004c80:	08004c1d 	.word	0x08004c1d
 8004c84:	08004c1d 	.word	0x08004c1d
 8004c88:	08004d99 	.word	0x08004d99
 8004c8c:	680b      	ldr	r3, [r1, #0]
 8004c8e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c92:	1d1a      	adds	r2, r3, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	600a      	str	r2, [r1, #0]
 8004c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0a4      	b.n	8004dea <_printf_i+0x1f6>
 8004ca0:	6825      	ldr	r5, [r4, #0]
 8004ca2:	6808      	ldr	r0, [r1, #0]
 8004ca4:	062e      	lsls	r6, r5, #24
 8004ca6:	f100 0304 	add.w	r3, r0, #4
 8004caa:	d50a      	bpl.n	8004cc2 <_printf_i+0xce>
 8004cac:	6805      	ldr	r5, [r0, #0]
 8004cae:	600b      	str	r3, [r1, #0]
 8004cb0:	2d00      	cmp	r5, #0
 8004cb2:	da03      	bge.n	8004cbc <_printf_i+0xc8>
 8004cb4:	232d      	movs	r3, #45	; 0x2d
 8004cb6:	426d      	negs	r5, r5
 8004cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cbc:	230a      	movs	r3, #10
 8004cbe:	485e      	ldr	r0, [pc, #376]	; (8004e38 <_printf_i+0x244>)
 8004cc0:	e019      	b.n	8004cf6 <_printf_i+0x102>
 8004cc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004cc6:	6805      	ldr	r5, [r0, #0]
 8004cc8:	600b      	str	r3, [r1, #0]
 8004cca:	bf18      	it	ne
 8004ccc:	b22d      	sxthne	r5, r5
 8004cce:	e7ef      	b.n	8004cb0 <_printf_i+0xbc>
 8004cd0:	680b      	ldr	r3, [r1, #0]
 8004cd2:	6825      	ldr	r5, [r4, #0]
 8004cd4:	1d18      	adds	r0, r3, #4
 8004cd6:	6008      	str	r0, [r1, #0]
 8004cd8:	0628      	lsls	r0, r5, #24
 8004cda:	d501      	bpl.n	8004ce0 <_printf_i+0xec>
 8004cdc:	681d      	ldr	r5, [r3, #0]
 8004cde:	e002      	b.n	8004ce6 <_printf_i+0xf2>
 8004ce0:	0669      	lsls	r1, r5, #25
 8004ce2:	d5fb      	bpl.n	8004cdc <_printf_i+0xe8>
 8004ce4:	881d      	ldrh	r5, [r3, #0]
 8004ce6:	2f6f      	cmp	r7, #111	; 0x6f
 8004ce8:	bf0c      	ite	eq
 8004cea:	2308      	moveq	r3, #8
 8004cec:	230a      	movne	r3, #10
 8004cee:	4852      	ldr	r0, [pc, #328]	; (8004e38 <_printf_i+0x244>)
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cf6:	6866      	ldr	r6, [r4, #4]
 8004cf8:	2e00      	cmp	r6, #0
 8004cfa:	bfa8      	it	ge
 8004cfc:	6821      	ldrge	r1, [r4, #0]
 8004cfe:	60a6      	str	r6, [r4, #8]
 8004d00:	bfa4      	itt	ge
 8004d02:	f021 0104 	bicge.w	r1, r1, #4
 8004d06:	6021      	strge	r1, [r4, #0]
 8004d08:	b90d      	cbnz	r5, 8004d0e <_printf_i+0x11a>
 8004d0a:	2e00      	cmp	r6, #0
 8004d0c:	d04d      	beq.n	8004daa <_printf_i+0x1b6>
 8004d0e:	4616      	mov	r6, r2
 8004d10:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d14:	fb03 5711 	mls	r7, r3, r1, r5
 8004d18:	5dc7      	ldrb	r7, [r0, r7]
 8004d1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d1e:	462f      	mov	r7, r5
 8004d20:	42bb      	cmp	r3, r7
 8004d22:	460d      	mov	r5, r1
 8004d24:	d9f4      	bls.n	8004d10 <_printf_i+0x11c>
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d10b      	bne.n	8004d42 <_printf_i+0x14e>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	07df      	lsls	r7, r3, #31
 8004d2e:	d508      	bpl.n	8004d42 <_printf_i+0x14e>
 8004d30:	6923      	ldr	r3, [r4, #16]
 8004d32:	6861      	ldr	r1, [r4, #4]
 8004d34:	4299      	cmp	r1, r3
 8004d36:	bfde      	ittt	le
 8004d38:	2330      	movle	r3, #48	; 0x30
 8004d3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d3e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004d42:	1b92      	subs	r2, r2, r6
 8004d44:	6122      	str	r2, [r4, #16]
 8004d46:	464b      	mov	r3, r9
 8004d48:	4621      	mov	r1, r4
 8004d4a:	4640      	mov	r0, r8
 8004d4c:	f8cd a000 	str.w	sl, [sp]
 8004d50:	aa03      	add	r2, sp, #12
 8004d52:	f7ff fedf 	bl	8004b14 <_printf_common>
 8004d56:	3001      	adds	r0, #1
 8004d58:	d14c      	bne.n	8004df4 <_printf_i+0x200>
 8004d5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d5e:	b004      	add	sp, #16
 8004d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d64:	4834      	ldr	r0, [pc, #208]	; (8004e38 <_printf_i+0x244>)
 8004d66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d6a:	680e      	ldr	r6, [r1, #0]
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d72:	061f      	lsls	r7, r3, #24
 8004d74:	600e      	str	r6, [r1, #0]
 8004d76:	d514      	bpl.n	8004da2 <_printf_i+0x1ae>
 8004d78:	07d9      	lsls	r1, r3, #31
 8004d7a:	bf44      	itt	mi
 8004d7c:	f043 0320 	orrmi.w	r3, r3, #32
 8004d80:	6023      	strmi	r3, [r4, #0]
 8004d82:	b91d      	cbnz	r5, 8004d8c <_printf_i+0x198>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	f023 0320 	bic.w	r3, r3, #32
 8004d8a:	6023      	str	r3, [r4, #0]
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	e7af      	b.n	8004cf0 <_printf_i+0xfc>
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	f043 0320 	orr.w	r3, r3, #32
 8004d96:	6023      	str	r3, [r4, #0]
 8004d98:	2378      	movs	r3, #120	; 0x78
 8004d9a:	4828      	ldr	r0, [pc, #160]	; (8004e3c <_printf_i+0x248>)
 8004d9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004da0:	e7e3      	b.n	8004d6a <_printf_i+0x176>
 8004da2:	065e      	lsls	r6, r3, #25
 8004da4:	bf48      	it	mi
 8004da6:	b2ad      	uxthmi	r5, r5
 8004da8:	e7e6      	b.n	8004d78 <_printf_i+0x184>
 8004daa:	4616      	mov	r6, r2
 8004dac:	e7bb      	b.n	8004d26 <_printf_i+0x132>
 8004dae:	680b      	ldr	r3, [r1, #0]
 8004db0:	6826      	ldr	r6, [r4, #0]
 8004db2:	1d1d      	adds	r5, r3, #4
 8004db4:	6960      	ldr	r0, [r4, #20]
 8004db6:	600d      	str	r5, [r1, #0]
 8004db8:	0635      	lsls	r5, r6, #24
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	d501      	bpl.n	8004dc2 <_printf_i+0x1ce>
 8004dbe:	6018      	str	r0, [r3, #0]
 8004dc0:	e002      	b.n	8004dc8 <_printf_i+0x1d4>
 8004dc2:	0671      	lsls	r1, r6, #25
 8004dc4:	d5fb      	bpl.n	8004dbe <_printf_i+0x1ca>
 8004dc6:	8018      	strh	r0, [r3, #0]
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4616      	mov	r6, r2
 8004dcc:	6123      	str	r3, [r4, #16]
 8004dce:	e7ba      	b.n	8004d46 <_printf_i+0x152>
 8004dd0:	680b      	ldr	r3, [r1, #0]
 8004dd2:	1d1a      	adds	r2, r3, #4
 8004dd4:	600a      	str	r2, [r1, #0]
 8004dd6:	681e      	ldr	r6, [r3, #0]
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4630      	mov	r0, r6
 8004ddc:	6862      	ldr	r2, [r4, #4]
 8004dde:	f000 fed9 	bl	8005b94 <memchr>
 8004de2:	b108      	cbz	r0, 8004de8 <_printf_i+0x1f4>
 8004de4:	1b80      	subs	r0, r0, r6
 8004de6:	6060      	str	r0, [r4, #4]
 8004de8:	6863      	ldr	r3, [r4, #4]
 8004dea:	6123      	str	r3, [r4, #16]
 8004dec:	2300      	movs	r3, #0
 8004dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004df2:	e7a8      	b.n	8004d46 <_printf_i+0x152>
 8004df4:	4632      	mov	r2, r6
 8004df6:	4649      	mov	r1, r9
 8004df8:	4640      	mov	r0, r8
 8004dfa:	6923      	ldr	r3, [r4, #16]
 8004dfc:	47d0      	blx	sl
 8004dfe:	3001      	adds	r0, #1
 8004e00:	d0ab      	beq.n	8004d5a <_printf_i+0x166>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	079b      	lsls	r3, r3, #30
 8004e06:	d413      	bmi.n	8004e30 <_printf_i+0x23c>
 8004e08:	68e0      	ldr	r0, [r4, #12]
 8004e0a:	9b03      	ldr	r3, [sp, #12]
 8004e0c:	4298      	cmp	r0, r3
 8004e0e:	bfb8      	it	lt
 8004e10:	4618      	movlt	r0, r3
 8004e12:	e7a4      	b.n	8004d5e <_printf_i+0x16a>
 8004e14:	2301      	movs	r3, #1
 8004e16:	4632      	mov	r2, r6
 8004e18:	4649      	mov	r1, r9
 8004e1a:	4640      	mov	r0, r8
 8004e1c:	47d0      	blx	sl
 8004e1e:	3001      	adds	r0, #1
 8004e20:	d09b      	beq.n	8004d5a <_printf_i+0x166>
 8004e22:	3501      	adds	r5, #1
 8004e24:	68e3      	ldr	r3, [r4, #12]
 8004e26:	9903      	ldr	r1, [sp, #12]
 8004e28:	1a5b      	subs	r3, r3, r1
 8004e2a:	42ab      	cmp	r3, r5
 8004e2c:	dcf2      	bgt.n	8004e14 <_printf_i+0x220>
 8004e2e:	e7eb      	b.n	8004e08 <_printf_i+0x214>
 8004e30:	2500      	movs	r5, #0
 8004e32:	f104 0619 	add.w	r6, r4, #25
 8004e36:	e7f5      	b.n	8004e24 <_printf_i+0x230>
 8004e38:	08007346 	.word	0x08007346
 8004e3c:	08007357 	.word	0x08007357

08004e40 <_vsiprintf_r>:
 8004e40:	b500      	push	{lr}
 8004e42:	b09b      	sub	sp, #108	; 0x6c
 8004e44:	9100      	str	r1, [sp, #0]
 8004e46:	9104      	str	r1, [sp, #16]
 8004e48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e4c:	9105      	str	r1, [sp, #20]
 8004e4e:	9102      	str	r1, [sp, #8]
 8004e50:	4905      	ldr	r1, [pc, #20]	; (8004e68 <_vsiprintf_r+0x28>)
 8004e52:	9103      	str	r1, [sp, #12]
 8004e54:	4669      	mov	r1, sp
 8004e56:	f001 fb3d 	bl	80064d4 <_svfiprintf_r>
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	9b00      	ldr	r3, [sp, #0]
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	b01b      	add	sp, #108	; 0x6c
 8004e62:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e66:	bf00      	nop
 8004e68:	ffff0208 	.word	0xffff0208

08004e6c <vsiprintf>:
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	460a      	mov	r2, r1
 8004e70:	4601      	mov	r1, r0
 8004e72:	4802      	ldr	r0, [pc, #8]	; (8004e7c <vsiprintf+0x10>)
 8004e74:	6800      	ldr	r0, [r0, #0]
 8004e76:	f7ff bfe3 	b.w	8004e40 <_vsiprintf_r>
 8004e7a:	bf00      	nop
 8004e7c:	2000010c 	.word	0x2000010c

08004e80 <quorem>:
 8004e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e84:	6903      	ldr	r3, [r0, #16]
 8004e86:	690c      	ldr	r4, [r1, #16]
 8004e88:	4607      	mov	r7, r0
 8004e8a:	42a3      	cmp	r3, r4
 8004e8c:	f2c0 8083 	blt.w	8004f96 <quorem+0x116>
 8004e90:	3c01      	subs	r4, #1
 8004e92:	f100 0514 	add.w	r5, r0, #20
 8004e96:	f101 0814 	add.w	r8, r1, #20
 8004e9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ea4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	fbb2 f6f3 	udiv	r6, r2, r3
 8004eb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004eb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004eb8:	d332      	bcc.n	8004f20 <quorem+0xa0>
 8004eba:	f04f 0e00 	mov.w	lr, #0
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	46ac      	mov	ip, r5
 8004ec2:	46f2      	mov	sl, lr
 8004ec4:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ec8:	b293      	uxth	r3, r2
 8004eca:	fb06 e303 	mla	r3, r6, r3, lr
 8004ece:	0c12      	lsrs	r2, r2, #16
 8004ed0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004ed4:	fb06 e202 	mla	r2, r6, r2, lr
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	ebaa 0303 	sub.w	r3, sl, r3
 8004ede:	f8dc a000 	ldr.w	sl, [ip]
 8004ee2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ee6:	fa1f fa8a 	uxth.w	sl, sl
 8004eea:	4453      	add	r3, sl
 8004eec:	fa1f fa82 	uxth.w	sl, r2
 8004ef0:	f8dc 2000 	ldr.w	r2, [ip]
 8004ef4:	4581      	cmp	r9, r0
 8004ef6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004efa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f04:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f08:	f84c 3b04 	str.w	r3, [ip], #4
 8004f0c:	d2da      	bcs.n	8004ec4 <quorem+0x44>
 8004f0e:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f12:	b92b      	cbnz	r3, 8004f20 <quorem+0xa0>
 8004f14:	9b01      	ldr	r3, [sp, #4]
 8004f16:	3b04      	subs	r3, #4
 8004f18:	429d      	cmp	r5, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	d32f      	bcc.n	8004f7e <quorem+0xfe>
 8004f1e:	613c      	str	r4, [r7, #16]
 8004f20:	4638      	mov	r0, r7
 8004f22:	f001 f8bf 	bl	80060a4 <__mcmp>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	db25      	blt.n	8004f76 <quorem+0xf6>
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f04f 0c00 	mov.w	ip, #0
 8004f30:	3601      	adds	r6, #1
 8004f32:	f858 1b04 	ldr.w	r1, [r8], #4
 8004f36:	f8d0 e000 	ldr.w	lr, [r0]
 8004f3a:	b28b      	uxth	r3, r1
 8004f3c:	ebac 0303 	sub.w	r3, ip, r3
 8004f40:	fa1f f28e 	uxth.w	r2, lr
 8004f44:	4413      	add	r3, r2
 8004f46:	0c0a      	lsrs	r2, r1, #16
 8004f48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f56:	45c1      	cmp	r9, r8
 8004f58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f5c:	f840 3b04 	str.w	r3, [r0], #4
 8004f60:	d2e7      	bcs.n	8004f32 <quorem+0xb2>
 8004f62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f6a:	b922      	cbnz	r2, 8004f76 <quorem+0xf6>
 8004f6c:	3b04      	subs	r3, #4
 8004f6e:	429d      	cmp	r5, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	d30a      	bcc.n	8004f8a <quorem+0x10a>
 8004f74:	613c      	str	r4, [r7, #16]
 8004f76:	4630      	mov	r0, r6
 8004f78:	b003      	add	sp, #12
 8004f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	3b04      	subs	r3, #4
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	d1cb      	bne.n	8004f1e <quorem+0x9e>
 8004f86:	3c01      	subs	r4, #1
 8004f88:	e7c6      	b.n	8004f18 <quorem+0x98>
 8004f8a:	6812      	ldr	r2, [r2, #0]
 8004f8c:	3b04      	subs	r3, #4
 8004f8e:	2a00      	cmp	r2, #0
 8004f90:	d1f0      	bne.n	8004f74 <quorem+0xf4>
 8004f92:	3c01      	subs	r4, #1
 8004f94:	e7eb      	b.n	8004f6e <quorem+0xee>
 8004f96:	2000      	movs	r0, #0
 8004f98:	e7ee      	b.n	8004f78 <quorem+0xf8>
 8004f9a:	0000      	movs	r0, r0
 8004f9c:	0000      	movs	r0, r0
	...

08004fa0 <_dtoa_r>:
 8004fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa4:	4616      	mov	r6, r2
 8004fa6:	461f      	mov	r7, r3
 8004fa8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004faa:	b099      	sub	sp, #100	; 0x64
 8004fac:	4605      	mov	r5, r0
 8004fae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004fb2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004fb6:	b974      	cbnz	r4, 8004fd6 <_dtoa_r+0x36>
 8004fb8:	2010      	movs	r0, #16
 8004fba:	f000 fde3 	bl	8005b84 <malloc>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	6268      	str	r0, [r5, #36]	; 0x24
 8004fc2:	b920      	cbnz	r0, 8004fce <_dtoa_r+0x2e>
 8004fc4:	21ea      	movs	r1, #234	; 0xea
 8004fc6:	4bae      	ldr	r3, [pc, #696]	; (8005280 <_dtoa_r+0x2e0>)
 8004fc8:	48ae      	ldr	r0, [pc, #696]	; (8005284 <_dtoa_r+0x2e4>)
 8004fca:	f001 fb93 	bl	80066f4 <__assert_func>
 8004fce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004fd2:	6004      	str	r4, [r0, #0]
 8004fd4:	60c4      	str	r4, [r0, #12]
 8004fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004fd8:	6819      	ldr	r1, [r3, #0]
 8004fda:	b151      	cbz	r1, 8004ff2 <_dtoa_r+0x52>
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	2301      	movs	r3, #1
 8004fe0:	4093      	lsls	r3, r2
 8004fe2:	604a      	str	r2, [r1, #4]
 8004fe4:	608b      	str	r3, [r1, #8]
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f000 fe22 	bl	8005c30 <_Bfree>
 8004fec:	2200      	movs	r2, #0
 8004fee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	1e3b      	subs	r3, r7, #0
 8004ff4:	bfaf      	iteee	ge
 8004ff6:	2300      	movge	r3, #0
 8004ff8:	2201      	movlt	r2, #1
 8004ffa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ffe:	9305      	strlt	r3, [sp, #20]
 8005000:	bfa8      	it	ge
 8005002:	f8c8 3000 	strge.w	r3, [r8]
 8005006:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800500a:	4b9f      	ldr	r3, [pc, #636]	; (8005288 <_dtoa_r+0x2e8>)
 800500c:	bfb8      	it	lt
 800500e:	f8c8 2000 	strlt.w	r2, [r8]
 8005012:	ea33 0309 	bics.w	r3, r3, r9
 8005016:	d119      	bne.n	800504c <_dtoa_r+0xac>
 8005018:	f242 730f 	movw	r3, #9999	; 0x270f
 800501c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005024:	4333      	orrs	r3, r6
 8005026:	f000 8580 	beq.w	8005b2a <_dtoa_r+0xb8a>
 800502a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800502c:	b953      	cbnz	r3, 8005044 <_dtoa_r+0xa4>
 800502e:	4b97      	ldr	r3, [pc, #604]	; (800528c <_dtoa_r+0x2ec>)
 8005030:	e022      	b.n	8005078 <_dtoa_r+0xd8>
 8005032:	4b97      	ldr	r3, [pc, #604]	; (8005290 <_dtoa_r+0x2f0>)
 8005034:	9308      	str	r3, [sp, #32]
 8005036:	3308      	adds	r3, #8
 8005038:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	9808      	ldr	r0, [sp, #32]
 800503e:	b019      	add	sp, #100	; 0x64
 8005040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005044:	4b91      	ldr	r3, [pc, #580]	; (800528c <_dtoa_r+0x2ec>)
 8005046:	9308      	str	r3, [sp, #32]
 8005048:	3303      	adds	r3, #3
 800504a:	e7f5      	b.n	8005038 <_dtoa_r+0x98>
 800504c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005050:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005054:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005058:	2200      	movs	r2, #0
 800505a:	2300      	movs	r3, #0
 800505c:	f7fb fd58 	bl	8000b10 <__aeabi_dcmpeq>
 8005060:	4680      	mov	r8, r0
 8005062:	b158      	cbz	r0, 800507c <_dtoa_r+0xdc>
 8005064:	2301      	movs	r3, #1
 8005066:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8559 	beq.w	8005b24 <_dtoa_r+0xb84>
 8005072:	4888      	ldr	r0, [pc, #544]	; (8005294 <_dtoa_r+0x2f4>)
 8005074:	6018      	str	r0, [r3, #0]
 8005076:	1e43      	subs	r3, r0, #1
 8005078:	9308      	str	r3, [sp, #32]
 800507a:	e7df      	b.n	800503c <_dtoa_r+0x9c>
 800507c:	ab16      	add	r3, sp, #88	; 0x58
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	ab17      	add	r3, sp, #92	; 0x5c
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	4628      	mov	r0, r5
 8005086:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800508a:	f001 f8b7 	bl	80061fc <__d2b>
 800508e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005092:	4682      	mov	sl, r0
 8005094:	2c00      	cmp	r4, #0
 8005096:	d07e      	beq.n	8005196 <_dtoa_r+0x1f6>
 8005098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800509c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800509e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80050a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80050aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80050ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80050b2:	2200      	movs	r2, #0
 80050b4:	4b78      	ldr	r3, [pc, #480]	; (8005298 <_dtoa_r+0x2f8>)
 80050b6:	f7fb f90b 	bl	80002d0 <__aeabi_dsub>
 80050ba:	a36b      	add	r3, pc, #428	; (adr r3, 8005268 <_dtoa_r+0x2c8>)
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f7fb fabe 	bl	8000640 <__aeabi_dmul>
 80050c4:	a36a      	add	r3, pc, #424	; (adr r3, 8005270 <_dtoa_r+0x2d0>)
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f7fb f903 	bl	80002d4 <__adddf3>
 80050ce:	4606      	mov	r6, r0
 80050d0:	4620      	mov	r0, r4
 80050d2:	460f      	mov	r7, r1
 80050d4:	f7fb fa4a 	bl	800056c <__aeabi_i2d>
 80050d8:	a367      	add	r3, pc, #412	; (adr r3, 8005278 <_dtoa_r+0x2d8>)
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	f7fb faaf 	bl	8000640 <__aeabi_dmul>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4630      	mov	r0, r6
 80050e8:	4639      	mov	r1, r7
 80050ea:	f7fb f8f3 	bl	80002d4 <__adddf3>
 80050ee:	4606      	mov	r6, r0
 80050f0:	460f      	mov	r7, r1
 80050f2:	f7fb fd55 	bl	8000ba0 <__aeabi_d2iz>
 80050f6:	2200      	movs	r2, #0
 80050f8:	4681      	mov	r9, r0
 80050fa:	2300      	movs	r3, #0
 80050fc:	4630      	mov	r0, r6
 80050fe:	4639      	mov	r1, r7
 8005100:	f7fb fd10 	bl	8000b24 <__aeabi_dcmplt>
 8005104:	b148      	cbz	r0, 800511a <_dtoa_r+0x17a>
 8005106:	4648      	mov	r0, r9
 8005108:	f7fb fa30 	bl	800056c <__aeabi_i2d>
 800510c:	4632      	mov	r2, r6
 800510e:	463b      	mov	r3, r7
 8005110:	f7fb fcfe 	bl	8000b10 <__aeabi_dcmpeq>
 8005114:	b908      	cbnz	r0, 800511a <_dtoa_r+0x17a>
 8005116:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800511a:	f1b9 0f16 	cmp.w	r9, #22
 800511e:	d857      	bhi.n	80051d0 <_dtoa_r+0x230>
 8005120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005124:	4b5d      	ldr	r3, [pc, #372]	; (800529c <_dtoa_r+0x2fc>)
 8005126:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f7fb fcf9 	bl	8000b24 <__aeabi_dcmplt>
 8005132:	2800      	cmp	r0, #0
 8005134:	d04e      	beq.n	80051d4 <_dtoa_r+0x234>
 8005136:	2300      	movs	r3, #0
 8005138:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800513c:	930f      	str	r3, [sp, #60]	; 0x3c
 800513e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005140:	1b1c      	subs	r4, r3, r4
 8005142:	1e63      	subs	r3, r4, #1
 8005144:	9309      	str	r3, [sp, #36]	; 0x24
 8005146:	bf49      	itett	mi
 8005148:	f1c4 0301 	rsbmi	r3, r4, #1
 800514c:	2300      	movpl	r3, #0
 800514e:	9306      	strmi	r3, [sp, #24]
 8005150:	2300      	movmi	r3, #0
 8005152:	bf54      	ite	pl
 8005154:	9306      	strpl	r3, [sp, #24]
 8005156:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005158:	f1b9 0f00 	cmp.w	r9, #0
 800515c:	db3c      	blt.n	80051d8 <_dtoa_r+0x238>
 800515e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005160:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005164:	444b      	add	r3, r9
 8005166:	9309      	str	r3, [sp, #36]	; 0x24
 8005168:	2300      	movs	r3, #0
 800516a:	930a      	str	r3, [sp, #40]	; 0x28
 800516c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800516e:	2b09      	cmp	r3, #9
 8005170:	d86c      	bhi.n	800524c <_dtoa_r+0x2ac>
 8005172:	2b05      	cmp	r3, #5
 8005174:	bfc4      	itt	gt
 8005176:	3b04      	subgt	r3, #4
 8005178:	9322      	strgt	r3, [sp, #136]	; 0x88
 800517a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800517c:	bfc8      	it	gt
 800517e:	2400      	movgt	r4, #0
 8005180:	f1a3 0302 	sub.w	r3, r3, #2
 8005184:	bfd8      	it	le
 8005186:	2401      	movle	r4, #1
 8005188:	2b03      	cmp	r3, #3
 800518a:	f200 808b 	bhi.w	80052a4 <_dtoa_r+0x304>
 800518e:	e8df f003 	tbb	[pc, r3]
 8005192:	4f2d      	.short	0x4f2d
 8005194:	5b4d      	.short	0x5b4d
 8005196:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800519a:	441c      	add	r4, r3
 800519c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	bfc3      	ittte	gt
 80051a4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80051a8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80051ac:	fa09 f303 	lslgt.w	r3, r9, r3
 80051b0:	f1c3 0320 	rsble	r3, r3, #32
 80051b4:	bfc6      	itte	gt
 80051b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80051ba:	4318      	orrgt	r0, r3
 80051bc:	fa06 f003 	lslle.w	r0, r6, r3
 80051c0:	f7fb f9c4 	bl	800054c <__aeabi_ui2d>
 80051c4:	2301      	movs	r3, #1
 80051c6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80051ca:	3c01      	subs	r4, #1
 80051cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80051ce:	e770      	b.n	80050b2 <_dtoa_r+0x112>
 80051d0:	2301      	movs	r3, #1
 80051d2:	e7b3      	b.n	800513c <_dtoa_r+0x19c>
 80051d4:	900f      	str	r0, [sp, #60]	; 0x3c
 80051d6:	e7b2      	b.n	800513e <_dtoa_r+0x19e>
 80051d8:	9b06      	ldr	r3, [sp, #24]
 80051da:	eba3 0309 	sub.w	r3, r3, r9
 80051de:	9306      	str	r3, [sp, #24]
 80051e0:	f1c9 0300 	rsb	r3, r9, #0
 80051e4:	930a      	str	r3, [sp, #40]	; 0x28
 80051e6:	2300      	movs	r3, #0
 80051e8:	930e      	str	r3, [sp, #56]	; 0x38
 80051ea:	e7bf      	b.n	800516c <_dtoa_r+0x1cc>
 80051ec:	2300      	movs	r3, #0
 80051ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80051f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	dc59      	bgt.n	80052aa <_dtoa_r+0x30a>
 80051f6:	f04f 0b01 	mov.w	fp, #1
 80051fa:	465b      	mov	r3, fp
 80051fc:	f8cd b008 	str.w	fp, [sp, #8]
 8005200:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005204:	2200      	movs	r2, #0
 8005206:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005208:	6042      	str	r2, [r0, #4]
 800520a:	2204      	movs	r2, #4
 800520c:	f102 0614 	add.w	r6, r2, #20
 8005210:	429e      	cmp	r6, r3
 8005212:	6841      	ldr	r1, [r0, #4]
 8005214:	d94f      	bls.n	80052b6 <_dtoa_r+0x316>
 8005216:	4628      	mov	r0, r5
 8005218:	f000 fcca 	bl	8005bb0 <_Balloc>
 800521c:	9008      	str	r0, [sp, #32]
 800521e:	2800      	cmp	r0, #0
 8005220:	d14d      	bne.n	80052be <_dtoa_r+0x31e>
 8005222:	4602      	mov	r2, r0
 8005224:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005228:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <_dtoa_r+0x300>)
 800522a:	e6cd      	b.n	8004fc8 <_dtoa_r+0x28>
 800522c:	2301      	movs	r3, #1
 800522e:	e7de      	b.n	80051ee <_dtoa_r+0x24e>
 8005230:	2300      	movs	r3, #0
 8005232:	930b      	str	r3, [sp, #44]	; 0x2c
 8005234:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005236:	eb09 0b03 	add.w	fp, r9, r3
 800523a:	f10b 0301 	add.w	r3, fp, #1
 800523e:	2b01      	cmp	r3, #1
 8005240:	9302      	str	r3, [sp, #8]
 8005242:	bfb8      	it	lt
 8005244:	2301      	movlt	r3, #1
 8005246:	e7dd      	b.n	8005204 <_dtoa_r+0x264>
 8005248:	2301      	movs	r3, #1
 800524a:	e7f2      	b.n	8005232 <_dtoa_r+0x292>
 800524c:	2401      	movs	r4, #1
 800524e:	2300      	movs	r3, #0
 8005250:	940b      	str	r4, [sp, #44]	; 0x2c
 8005252:	9322      	str	r3, [sp, #136]	; 0x88
 8005254:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005258:	2200      	movs	r2, #0
 800525a:	2312      	movs	r3, #18
 800525c:	f8cd b008 	str.w	fp, [sp, #8]
 8005260:	9223      	str	r2, [sp, #140]	; 0x8c
 8005262:	e7cf      	b.n	8005204 <_dtoa_r+0x264>
 8005264:	f3af 8000 	nop.w
 8005268:	636f4361 	.word	0x636f4361
 800526c:	3fd287a7 	.word	0x3fd287a7
 8005270:	8b60c8b3 	.word	0x8b60c8b3
 8005274:	3fc68a28 	.word	0x3fc68a28
 8005278:	509f79fb 	.word	0x509f79fb
 800527c:	3fd34413 	.word	0x3fd34413
 8005280:	08007375 	.word	0x08007375
 8005284:	0800738c 	.word	0x0800738c
 8005288:	7ff00000 	.word	0x7ff00000
 800528c:	08007371 	.word	0x08007371
 8005290:	08007368 	.word	0x08007368
 8005294:	08007345 	.word	0x08007345
 8005298:	3ff80000 	.word	0x3ff80000
 800529c:	08007488 	.word	0x08007488
 80052a0:	080073eb 	.word	0x080073eb
 80052a4:	2301      	movs	r3, #1
 80052a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80052a8:	e7d4      	b.n	8005254 <_dtoa_r+0x2b4>
 80052aa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80052ae:	465b      	mov	r3, fp
 80052b0:	f8cd b008 	str.w	fp, [sp, #8]
 80052b4:	e7a6      	b.n	8005204 <_dtoa_r+0x264>
 80052b6:	3101      	adds	r1, #1
 80052b8:	6041      	str	r1, [r0, #4]
 80052ba:	0052      	lsls	r2, r2, #1
 80052bc:	e7a6      	b.n	800520c <_dtoa_r+0x26c>
 80052be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052c0:	9a08      	ldr	r2, [sp, #32]
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	9b02      	ldr	r3, [sp, #8]
 80052c6:	2b0e      	cmp	r3, #14
 80052c8:	f200 80a8 	bhi.w	800541c <_dtoa_r+0x47c>
 80052cc:	2c00      	cmp	r4, #0
 80052ce:	f000 80a5 	beq.w	800541c <_dtoa_r+0x47c>
 80052d2:	f1b9 0f00 	cmp.w	r9, #0
 80052d6:	dd34      	ble.n	8005342 <_dtoa_r+0x3a2>
 80052d8:	4a9a      	ldr	r2, [pc, #616]	; (8005544 <_dtoa_r+0x5a4>)
 80052da:	f009 030f 	and.w	r3, r9, #15
 80052de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80052e2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80052e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80052ee:	ea4f 1429 	mov.w	r4, r9, asr #4
 80052f2:	d016      	beq.n	8005322 <_dtoa_r+0x382>
 80052f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052f8:	4b93      	ldr	r3, [pc, #588]	; (8005548 <_dtoa_r+0x5a8>)
 80052fa:	2703      	movs	r7, #3
 80052fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005300:	f7fb fac8 	bl	8000894 <__aeabi_ddiv>
 8005304:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005308:	f004 040f 	and.w	r4, r4, #15
 800530c:	4e8e      	ldr	r6, [pc, #568]	; (8005548 <_dtoa_r+0x5a8>)
 800530e:	b954      	cbnz	r4, 8005326 <_dtoa_r+0x386>
 8005310:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005318:	f7fb fabc 	bl	8000894 <__aeabi_ddiv>
 800531c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005320:	e029      	b.n	8005376 <_dtoa_r+0x3d6>
 8005322:	2702      	movs	r7, #2
 8005324:	e7f2      	b.n	800530c <_dtoa_r+0x36c>
 8005326:	07e1      	lsls	r1, r4, #31
 8005328:	d508      	bpl.n	800533c <_dtoa_r+0x39c>
 800532a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800532e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005332:	f7fb f985 	bl	8000640 <__aeabi_dmul>
 8005336:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800533a:	3701      	adds	r7, #1
 800533c:	1064      	asrs	r4, r4, #1
 800533e:	3608      	adds	r6, #8
 8005340:	e7e5      	b.n	800530e <_dtoa_r+0x36e>
 8005342:	f000 80a5 	beq.w	8005490 <_dtoa_r+0x4f0>
 8005346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800534a:	f1c9 0400 	rsb	r4, r9, #0
 800534e:	4b7d      	ldr	r3, [pc, #500]	; (8005544 <_dtoa_r+0x5a4>)
 8005350:	f004 020f 	and.w	r2, r4, #15
 8005354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	f7fb f970 	bl	8000640 <__aeabi_dmul>
 8005360:	2702      	movs	r7, #2
 8005362:	2300      	movs	r3, #0
 8005364:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005368:	4e77      	ldr	r6, [pc, #476]	; (8005548 <_dtoa_r+0x5a8>)
 800536a:	1124      	asrs	r4, r4, #4
 800536c:	2c00      	cmp	r4, #0
 800536e:	f040 8084 	bne.w	800547a <_dtoa_r+0x4da>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1d2      	bne.n	800531c <_dtoa_r+0x37c>
 8005376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 808b 	beq.w	8005494 <_dtoa_r+0x4f4>
 800537e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005382:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005386:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800538a:	2200      	movs	r2, #0
 800538c:	4b6f      	ldr	r3, [pc, #444]	; (800554c <_dtoa_r+0x5ac>)
 800538e:	f7fb fbc9 	bl	8000b24 <__aeabi_dcmplt>
 8005392:	2800      	cmp	r0, #0
 8005394:	d07e      	beq.n	8005494 <_dtoa_r+0x4f4>
 8005396:	9b02      	ldr	r3, [sp, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d07b      	beq.n	8005494 <_dtoa_r+0x4f4>
 800539c:	f1bb 0f00 	cmp.w	fp, #0
 80053a0:	dd38      	ble.n	8005414 <_dtoa_r+0x474>
 80053a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053a6:	2200      	movs	r2, #0
 80053a8:	4b69      	ldr	r3, [pc, #420]	; (8005550 <_dtoa_r+0x5b0>)
 80053aa:	f7fb f949 	bl	8000640 <__aeabi_dmul>
 80053ae:	465c      	mov	r4, fp
 80053b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053b4:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 80053b8:	3701      	adds	r7, #1
 80053ba:	4638      	mov	r0, r7
 80053bc:	f7fb f8d6 	bl	800056c <__aeabi_i2d>
 80053c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053c4:	f7fb f93c 	bl	8000640 <__aeabi_dmul>
 80053c8:	2200      	movs	r2, #0
 80053ca:	4b62      	ldr	r3, [pc, #392]	; (8005554 <_dtoa_r+0x5b4>)
 80053cc:	f7fa ff82 	bl	80002d4 <__adddf3>
 80053d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80053d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053d8:	9611      	str	r6, [sp, #68]	; 0x44
 80053da:	2c00      	cmp	r4, #0
 80053dc:	d15d      	bne.n	800549a <_dtoa_r+0x4fa>
 80053de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053e2:	2200      	movs	r2, #0
 80053e4:	4b5c      	ldr	r3, [pc, #368]	; (8005558 <_dtoa_r+0x5b8>)
 80053e6:	f7fa ff73 	bl	80002d0 <__aeabi_dsub>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053f2:	4633      	mov	r3, r6
 80053f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053f6:	f7fb fbb3 	bl	8000b60 <__aeabi_dcmpgt>
 80053fa:	2800      	cmp	r0, #0
 80053fc:	f040 829e 	bne.w	800593c <_dtoa_r+0x99c>
 8005400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005404:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005406:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800540a:	f7fb fb8b 	bl	8000b24 <__aeabi_dcmplt>
 800540e:	2800      	cmp	r0, #0
 8005410:	f040 8292 	bne.w	8005938 <_dtoa_r+0x998>
 8005414:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005418:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800541c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800541e:	2b00      	cmp	r3, #0
 8005420:	f2c0 8153 	blt.w	80056ca <_dtoa_r+0x72a>
 8005424:	f1b9 0f0e 	cmp.w	r9, #14
 8005428:	f300 814f 	bgt.w	80056ca <_dtoa_r+0x72a>
 800542c:	4b45      	ldr	r3, [pc, #276]	; (8005544 <_dtoa_r+0x5a4>)
 800542e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005432:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005436:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800543a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800543c:	2b00      	cmp	r3, #0
 800543e:	f280 80db 	bge.w	80055f8 <_dtoa_r+0x658>
 8005442:	9b02      	ldr	r3, [sp, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f300 80d7 	bgt.w	80055f8 <_dtoa_r+0x658>
 800544a:	f040 8274 	bne.w	8005936 <_dtoa_r+0x996>
 800544e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005452:	2200      	movs	r2, #0
 8005454:	4b40      	ldr	r3, [pc, #256]	; (8005558 <_dtoa_r+0x5b8>)
 8005456:	f7fb f8f3 	bl	8000640 <__aeabi_dmul>
 800545a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800545e:	f7fb fb75 	bl	8000b4c <__aeabi_dcmpge>
 8005462:	9c02      	ldr	r4, [sp, #8]
 8005464:	4626      	mov	r6, r4
 8005466:	2800      	cmp	r0, #0
 8005468:	f040 824a 	bne.w	8005900 <_dtoa_r+0x960>
 800546c:	2331      	movs	r3, #49	; 0x31
 800546e:	9f08      	ldr	r7, [sp, #32]
 8005470:	f109 0901 	add.w	r9, r9, #1
 8005474:	f807 3b01 	strb.w	r3, [r7], #1
 8005478:	e246      	b.n	8005908 <_dtoa_r+0x968>
 800547a:	07e2      	lsls	r2, r4, #31
 800547c:	d505      	bpl.n	800548a <_dtoa_r+0x4ea>
 800547e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005482:	f7fb f8dd 	bl	8000640 <__aeabi_dmul>
 8005486:	2301      	movs	r3, #1
 8005488:	3701      	adds	r7, #1
 800548a:	1064      	asrs	r4, r4, #1
 800548c:	3608      	adds	r6, #8
 800548e:	e76d      	b.n	800536c <_dtoa_r+0x3cc>
 8005490:	2702      	movs	r7, #2
 8005492:	e770      	b.n	8005376 <_dtoa_r+0x3d6>
 8005494:	46c8      	mov	r8, r9
 8005496:	9c02      	ldr	r4, [sp, #8]
 8005498:	e78f      	b.n	80053ba <_dtoa_r+0x41a>
 800549a:	9908      	ldr	r1, [sp, #32]
 800549c:	4b29      	ldr	r3, [pc, #164]	; (8005544 <_dtoa_r+0x5a4>)
 800549e:	4421      	add	r1, r4
 80054a0:	9112      	str	r1, [sp, #72]	; 0x48
 80054a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80054ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054b0:	2900      	cmp	r1, #0
 80054b2:	d055      	beq.n	8005560 <_dtoa_r+0x5c0>
 80054b4:	2000      	movs	r0, #0
 80054b6:	4929      	ldr	r1, [pc, #164]	; (800555c <_dtoa_r+0x5bc>)
 80054b8:	f7fb f9ec 	bl	8000894 <__aeabi_ddiv>
 80054bc:	463b      	mov	r3, r7
 80054be:	4632      	mov	r2, r6
 80054c0:	f7fa ff06 	bl	80002d0 <__aeabi_dsub>
 80054c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054c8:	9f08      	ldr	r7, [sp, #32]
 80054ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ce:	f7fb fb67 	bl	8000ba0 <__aeabi_d2iz>
 80054d2:	4604      	mov	r4, r0
 80054d4:	f7fb f84a 	bl	800056c <__aeabi_i2d>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054e0:	f7fa fef6 	bl	80002d0 <__aeabi_dsub>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	3430      	adds	r4, #48	; 0x30
 80054ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054f2:	f807 4b01 	strb.w	r4, [r7], #1
 80054f6:	f7fb fb15 	bl	8000b24 <__aeabi_dcmplt>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d174      	bne.n	80055e8 <_dtoa_r+0x648>
 80054fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005502:	2000      	movs	r0, #0
 8005504:	4911      	ldr	r1, [pc, #68]	; (800554c <_dtoa_r+0x5ac>)
 8005506:	f7fa fee3 	bl	80002d0 <__aeabi_dsub>
 800550a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800550e:	f7fb fb09 	bl	8000b24 <__aeabi_dcmplt>
 8005512:	2800      	cmp	r0, #0
 8005514:	f040 80b6 	bne.w	8005684 <_dtoa_r+0x6e4>
 8005518:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800551a:	429f      	cmp	r7, r3
 800551c:	f43f af7a 	beq.w	8005414 <_dtoa_r+0x474>
 8005520:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005524:	2200      	movs	r2, #0
 8005526:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <_dtoa_r+0x5b0>)
 8005528:	f7fb f88a 	bl	8000640 <__aeabi_dmul>
 800552c:	2200      	movs	r2, #0
 800552e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005532:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <_dtoa_r+0x5b0>)
 8005538:	f7fb f882 	bl	8000640 <__aeabi_dmul>
 800553c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005540:	e7c3      	b.n	80054ca <_dtoa_r+0x52a>
 8005542:	bf00      	nop
 8005544:	08007488 	.word	0x08007488
 8005548:	08007460 	.word	0x08007460
 800554c:	3ff00000 	.word	0x3ff00000
 8005550:	40240000 	.word	0x40240000
 8005554:	401c0000 	.word	0x401c0000
 8005558:	40140000 	.word	0x40140000
 800555c:	3fe00000 	.word	0x3fe00000
 8005560:	4630      	mov	r0, r6
 8005562:	4639      	mov	r1, r7
 8005564:	f7fb f86c 	bl	8000640 <__aeabi_dmul>
 8005568:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800556a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800556e:	9c08      	ldr	r4, [sp, #32]
 8005570:	9314      	str	r3, [sp, #80]	; 0x50
 8005572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005576:	f7fb fb13 	bl	8000ba0 <__aeabi_d2iz>
 800557a:	9015      	str	r0, [sp, #84]	; 0x54
 800557c:	f7fa fff6 	bl	800056c <__aeabi_i2d>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005588:	f7fa fea2 	bl	80002d0 <__aeabi_dsub>
 800558c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800558e:	4606      	mov	r6, r0
 8005590:	3330      	adds	r3, #48	; 0x30
 8005592:	f804 3b01 	strb.w	r3, [r4], #1
 8005596:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005598:	460f      	mov	r7, r1
 800559a:	429c      	cmp	r4, r3
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	d124      	bne.n	80055ec <_dtoa_r+0x64c>
 80055a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055a6:	4bb3      	ldr	r3, [pc, #716]	; (8005874 <_dtoa_r+0x8d4>)
 80055a8:	f7fa fe94 	bl	80002d4 <__adddf3>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4630      	mov	r0, r6
 80055b2:	4639      	mov	r1, r7
 80055b4:	f7fb fad4 	bl	8000b60 <__aeabi_dcmpgt>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d162      	bne.n	8005682 <_dtoa_r+0x6e2>
 80055bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055c0:	2000      	movs	r0, #0
 80055c2:	49ac      	ldr	r1, [pc, #688]	; (8005874 <_dtoa_r+0x8d4>)
 80055c4:	f7fa fe84 	bl	80002d0 <__aeabi_dsub>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4630      	mov	r0, r6
 80055ce:	4639      	mov	r1, r7
 80055d0:	f7fb faa8 	bl	8000b24 <__aeabi_dcmplt>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	f43f af1d 	beq.w	8005414 <_dtoa_r+0x474>
 80055da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80055dc:	1e7b      	subs	r3, r7, #1
 80055de:	9314      	str	r3, [sp, #80]	; 0x50
 80055e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80055e4:	2b30      	cmp	r3, #48	; 0x30
 80055e6:	d0f8      	beq.n	80055da <_dtoa_r+0x63a>
 80055e8:	46c1      	mov	r9, r8
 80055ea:	e03a      	b.n	8005662 <_dtoa_r+0x6c2>
 80055ec:	4ba2      	ldr	r3, [pc, #648]	; (8005878 <_dtoa_r+0x8d8>)
 80055ee:	f7fb f827 	bl	8000640 <__aeabi_dmul>
 80055f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055f6:	e7bc      	b.n	8005572 <_dtoa_r+0x5d2>
 80055f8:	9f08      	ldr	r7, [sp, #32]
 80055fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005602:	f7fb f947 	bl	8000894 <__aeabi_ddiv>
 8005606:	f7fb facb 	bl	8000ba0 <__aeabi_d2iz>
 800560a:	4604      	mov	r4, r0
 800560c:	f7fa ffae 	bl	800056c <__aeabi_i2d>
 8005610:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005614:	f7fb f814 	bl	8000640 <__aeabi_dmul>
 8005618:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800561c:	460b      	mov	r3, r1
 800561e:	4602      	mov	r2, r0
 8005620:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005624:	f7fa fe54 	bl	80002d0 <__aeabi_dsub>
 8005628:	f807 6b01 	strb.w	r6, [r7], #1
 800562c:	9e08      	ldr	r6, [sp, #32]
 800562e:	9b02      	ldr	r3, [sp, #8]
 8005630:	1bbe      	subs	r6, r7, r6
 8005632:	42b3      	cmp	r3, r6
 8005634:	d13a      	bne.n	80056ac <_dtoa_r+0x70c>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	f7fa fe4b 	bl	80002d4 <__adddf3>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005646:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800564a:	f7fb fa89 	bl	8000b60 <__aeabi_dcmpgt>
 800564e:	bb58      	cbnz	r0, 80056a8 <_dtoa_r+0x708>
 8005650:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005658:	f7fb fa5a 	bl	8000b10 <__aeabi_dcmpeq>
 800565c:	b108      	cbz	r0, 8005662 <_dtoa_r+0x6c2>
 800565e:	07e1      	lsls	r1, r4, #31
 8005660:	d422      	bmi.n	80056a8 <_dtoa_r+0x708>
 8005662:	4628      	mov	r0, r5
 8005664:	4651      	mov	r1, sl
 8005666:	f000 fae3 	bl	8005c30 <_Bfree>
 800566a:	2300      	movs	r3, #0
 800566c:	703b      	strb	r3, [r7, #0]
 800566e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005670:	f109 0001 	add.w	r0, r9, #1
 8005674:	6018      	str	r0, [r3, #0]
 8005676:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005678:	2b00      	cmp	r3, #0
 800567a:	f43f acdf 	beq.w	800503c <_dtoa_r+0x9c>
 800567e:	601f      	str	r7, [r3, #0]
 8005680:	e4dc      	b.n	800503c <_dtoa_r+0x9c>
 8005682:	4627      	mov	r7, r4
 8005684:	463b      	mov	r3, r7
 8005686:	461f      	mov	r7, r3
 8005688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800568c:	2a39      	cmp	r2, #57	; 0x39
 800568e:	d107      	bne.n	80056a0 <_dtoa_r+0x700>
 8005690:	9a08      	ldr	r2, [sp, #32]
 8005692:	429a      	cmp	r2, r3
 8005694:	d1f7      	bne.n	8005686 <_dtoa_r+0x6e6>
 8005696:	2230      	movs	r2, #48	; 0x30
 8005698:	9908      	ldr	r1, [sp, #32]
 800569a:	f108 0801 	add.w	r8, r8, #1
 800569e:	700a      	strb	r2, [r1, #0]
 80056a0:	781a      	ldrb	r2, [r3, #0]
 80056a2:	3201      	adds	r2, #1
 80056a4:	701a      	strb	r2, [r3, #0]
 80056a6:	e79f      	b.n	80055e8 <_dtoa_r+0x648>
 80056a8:	46c8      	mov	r8, r9
 80056aa:	e7eb      	b.n	8005684 <_dtoa_r+0x6e4>
 80056ac:	2200      	movs	r2, #0
 80056ae:	4b72      	ldr	r3, [pc, #456]	; (8005878 <_dtoa_r+0x8d8>)
 80056b0:	f7fa ffc6 	bl	8000640 <__aeabi_dmul>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056bc:	2200      	movs	r2, #0
 80056be:	2300      	movs	r3, #0
 80056c0:	f7fb fa26 	bl	8000b10 <__aeabi_dcmpeq>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d098      	beq.n	80055fa <_dtoa_r+0x65a>
 80056c8:	e7cb      	b.n	8005662 <_dtoa_r+0x6c2>
 80056ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056cc:	2a00      	cmp	r2, #0
 80056ce:	f000 80cd 	beq.w	800586c <_dtoa_r+0x8cc>
 80056d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80056d4:	2a01      	cmp	r2, #1
 80056d6:	f300 80af 	bgt.w	8005838 <_dtoa_r+0x898>
 80056da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80056dc:	2a00      	cmp	r2, #0
 80056de:	f000 80a7 	beq.w	8005830 <_dtoa_r+0x890>
 80056e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80056e8:	9f06      	ldr	r7, [sp, #24]
 80056ea:	9a06      	ldr	r2, [sp, #24]
 80056ec:	2101      	movs	r1, #1
 80056ee:	441a      	add	r2, r3
 80056f0:	9206      	str	r2, [sp, #24]
 80056f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056f4:	4628      	mov	r0, r5
 80056f6:	441a      	add	r2, r3
 80056f8:	9209      	str	r2, [sp, #36]	; 0x24
 80056fa:	f000 fb53 	bl	8005da4 <__i2b>
 80056fe:	4606      	mov	r6, r0
 8005700:	2f00      	cmp	r7, #0
 8005702:	dd0c      	ble.n	800571e <_dtoa_r+0x77e>
 8005704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005706:	2b00      	cmp	r3, #0
 8005708:	dd09      	ble.n	800571e <_dtoa_r+0x77e>
 800570a:	42bb      	cmp	r3, r7
 800570c:	bfa8      	it	ge
 800570e:	463b      	movge	r3, r7
 8005710:	9a06      	ldr	r2, [sp, #24]
 8005712:	1aff      	subs	r7, r7, r3
 8005714:	1ad2      	subs	r2, r2, r3
 8005716:	9206      	str	r2, [sp, #24]
 8005718:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	9309      	str	r3, [sp, #36]	; 0x24
 800571e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005720:	b1f3      	cbz	r3, 8005760 <_dtoa_r+0x7c0>
 8005722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 80a9 	beq.w	800587c <_dtoa_r+0x8dc>
 800572a:	2c00      	cmp	r4, #0
 800572c:	dd10      	ble.n	8005750 <_dtoa_r+0x7b0>
 800572e:	4631      	mov	r1, r6
 8005730:	4622      	mov	r2, r4
 8005732:	4628      	mov	r0, r5
 8005734:	f000 fbf0 	bl	8005f18 <__pow5mult>
 8005738:	4652      	mov	r2, sl
 800573a:	4601      	mov	r1, r0
 800573c:	4606      	mov	r6, r0
 800573e:	4628      	mov	r0, r5
 8005740:	f000 fb46 	bl	8005dd0 <__multiply>
 8005744:	4680      	mov	r8, r0
 8005746:	4651      	mov	r1, sl
 8005748:	4628      	mov	r0, r5
 800574a:	f000 fa71 	bl	8005c30 <_Bfree>
 800574e:	46c2      	mov	sl, r8
 8005750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005752:	1b1a      	subs	r2, r3, r4
 8005754:	d004      	beq.n	8005760 <_dtoa_r+0x7c0>
 8005756:	4651      	mov	r1, sl
 8005758:	4628      	mov	r0, r5
 800575a:	f000 fbdd 	bl	8005f18 <__pow5mult>
 800575e:	4682      	mov	sl, r0
 8005760:	2101      	movs	r1, #1
 8005762:	4628      	mov	r0, r5
 8005764:	f000 fb1e 	bl	8005da4 <__i2b>
 8005768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800576a:	4604      	mov	r4, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	f340 8087 	ble.w	8005880 <_dtoa_r+0x8e0>
 8005772:	461a      	mov	r2, r3
 8005774:	4601      	mov	r1, r0
 8005776:	4628      	mov	r0, r5
 8005778:	f000 fbce 	bl	8005f18 <__pow5mult>
 800577c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800577e:	4604      	mov	r4, r0
 8005780:	2b01      	cmp	r3, #1
 8005782:	f340 8080 	ble.w	8005886 <_dtoa_r+0x8e6>
 8005786:	f04f 0800 	mov.w	r8, #0
 800578a:	6923      	ldr	r3, [r4, #16]
 800578c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005790:	6918      	ldr	r0, [r3, #16]
 8005792:	f000 fab9 	bl	8005d08 <__hi0bits>
 8005796:	f1c0 0020 	rsb	r0, r0, #32
 800579a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800579c:	4418      	add	r0, r3
 800579e:	f010 001f 	ands.w	r0, r0, #31
 80057a2:	f000 8092 	beq.w	80058ca <_dtoa_r+0x92a>
 80057a6:	f1c0 0320 	rsb	r3, r0, #32
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	f340 808a 	ble.w	80058c4 <_dtoa_r+0x924>
 80057b0:	f1c0 001c 	rsb	r0, r0, #28
 80057b4:	9b06      	ldr	r3, [sp, #24]
 80057b6:	4407      	add	r7, r0
 80057b8:	4403      	add	r3, r0
 80057ba:	9306      	str	r3, [sp, #24]
 80057bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057be:	4403      	add	r3, r0
 80057c0:	9309      	str	r3, [sp, #36]	; 0x24
 80057c2:	9b06      	ldr	r3, [sp, #24]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	dd05      	ble.n	80057d4 <_dtoa_r+0x834>
 80057c8:	4651      	mov	r1, sl
 80057ca:	461a      	mov	r2, r3
 80057cc:	4628      	mov	r0, r5
 80057ce:	f000 fbfd 	bl	8005fcc <__lshift>
 80057d2:	4682      	mov	sl, r0
 80057d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	dd05      	ble.n	80057e6 <_dtoa_r+0x846>
 80057da:	4621      	mov	r1, r4
 80057dc:	461a      	mov	r2, r3
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 fbf4 	bl	8005fcc <__lshift>
 80057e4:	4604      	mov	r4, r0
 80057e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d070      	beq.n	80058ce <_dtoa_r+0x92e>
 80057ec:	4621      	mov	r1, r4
 80057ee:	4650      	mov	r0, sl
 80057f0:	f000 fc58 	bl	80060a4 <__mcmp>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	da6a      	bge.n	80058ce <_dtoa_r+0x92e>
 80057f8:	2300      	movs	r3, #0
 80057fa:	4651      	mov	r1, sl
 80057fc:	220a      	movs	r2, #10
 80057fe:	4628      	mov	r0, r5
 8005800:	f000 fa38 	bl	8005c74 <__multadd>
 8005804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005806:	4682      	mov	sl, r0
 8005808:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 8193 	beq.w	8005b38 <_dtoa_r+0xb98>
 8005812:	4631      	mov	r1, r6
 8005814:	2300      	movs	r3, #0
 8005816:	220a      	movs	r2, #10
 8005818:	4628      	mov	r0, r5
 800581a:	f000 fa2b 	bl	8005c74 <__multadd>
 800581e:	f1bb 0f00 	cmp.w	fp, #0
 8005822:	4606      	mov	r6, r0
 8005824:	f300 8093 	bgt.w	800594e <_dtoa_r+0x9ae>
 8005828:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800582a:	2b02      	cmp	r3, #2
 800582c:	dc57      	bgt.n	80058de <_dtoa_r+0x93e>
 800582e:	e08e      	b.n	800594e <_dtoa_r+0x9ae>
 8005830:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005832:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005836:	e756      	b.n	80056e6 <_dtoa_r+0x746>
 8005838:	9b02      	ldr	r3, [sp, #8]
 800583a:	1e5c      	subs	r4, r3, #1
 800583c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800583e:	42a3      	cmp	r3, r4
 8005840:	bfb7      	itett	lt
 8005842:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005844:	1b1c      	subge	r4, r3, r4
 8005846:	1ae2      	sublt	r2, r4, r3
 8005848:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800584a:	bfbe      	ittt	lt
 800584c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800584e:	189b      	addlt	r3, r3, r2
 8005850:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005852:	9b02      	ldr	r3, [sp, #8]
 8005854:	bfb8      	it	lt
 8005856:	2400      	movlt	r4, #0
 8005858:	2b00      	cmp	r3, #0
 800585a:	bfbb      	ittet	lt
 800585c:	9b06      	ldrlt	r3, [sp, #24]
 800585e:	9a02      	ldrlt	r2, [sp, #8]
 8005860:	9f06      	ldrge	r7, [sp, #24]
 8005862:	1a9f      	sublt	r7, r3, r2
 8005864:	bfac      	ite	ge
 8005866:	9b02      	ldrge	r3, [sp, #8]
 8005868:	2300      	movlt	r3, #0
 800586a:	e73e      	b.n	80056ea <_dtoa_r+0x74a>
 800586c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800586e:	9f06      	ldr	r7, [sp, #24]
 8005870:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005872:	e745      	b.n	8005700 <_dtoa_r+0x760>
 8005874:	3fe00000 	.word	0x3fe00000
 8005878:	40240000 	.word	0x40240000
 800587c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800587e:	e76a      	b.n	8005756 <_dtoa_r+0x7b6>
 8005880:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005882:	2b01      	cmp	r3, #1
 8005884:	dc19      	bgt.n	80058ba <_dtoa_r+0x91a>
 8005886:	9b04      	ldr	r3, [sp, #16]
 8005888:	b9bb      	cbnz	r3, 80058ba <_dtoa_r+0x91a>
 800588a:	9b05      	ldr	r3, [sp, #20]
 800588c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005890:	b99b      	cbnz	r3, 80058ba <_dtoa_r+0x91a>
 8005892:	9b05      	ldr	r3, [sp, #20]
 8005894:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005898:	0d1b      	lsrs	r3, r3, #20
 800589a:	051b      	lsls	r3, r3, #20
 800589c:	b183      	cbz	r3, 80058c0 <_dtoa_r+0x920>
 800589e:	f04f 0801 	mov.w	r8, #1
 80058a2:	9b06      	ldr	r3, [sp, #24]
 80058a4:	3301      	adds	r3, #1
 80058a6:	9306      	str	r3, [sp, #24]
 80058a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058aa:	3301      	adds	r3, #1
 80058ac:	9309      	str	r3, [sp, #36]	; 0x24
 80058ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f47f af6a 	bne.w	800578a <_dtoa_r+0x7ea>
 80058b6:	2001      	movs	r0, #1
 80058b8:	e76f      	b.n	800579a <_dtoa_r+0x7fa>
 80058ba:	f04f 0800 	mov.w	r8, #0
 80058be:	e7f6      	b.n	80058ae <_dtoa_r+0x90e>
 80058c0:	4698      	mov	r8, r3
 80058c2:	e7f4      	b.n	80058ae <_dtoa_r+0x90e>
 80058c4:	f43f af7d 	beq.w	80057c2 <_dtoa_r+0x822>
 80058c8:	4618      	mov	r0, r3
 80058ca:	301c      	adds	r0, #28
 80058cc:	e772      	b.n	80057b4 <_dtoa_r+0x814>
 80058ce:	9b02      	ldr	r3, [sp, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	dc36      	bgt.n	8005942 <_dtoa_r+0x9a2>
 80058d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	dd33      	ble.n	8005942 <_dtoa_r+0x9a2>
 80058da:	f8dd b008 	ldr.w	fp, [sp, #8]
 80058de:	f1bb 0f00 	cmp.w	fp, #0
 80058e2:	d10d      	bne.n	8005900 <_dtoa_r+0x960>
 80058e4:	4621      	mov	r1, r4
 80058e6:	465b      	mov	r3, fp
 80058e8:	2205      	movs	r2, #5
 80058ea:	4628      	mov	r0, r5
 80058ec:	f000 f9c2 	bl	8005c74 <__multadd>
 80058f0:	4601      	mov	r1, r0
 80058f2:	4604      	mov	r4, r0
 80058f4:	4650      	mov	r0, sl
 80058f6:	f000 fbd5 	bl	80060a4 <__mcmp>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	f73f adb6 	bgt.w	800546c <_dtoa_r+0x4cc>
 8005900:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005902:	9f08      	ldr	r7, [sp, #32]
 8005904:	ea6f 0903 	mvn.w	r9, r3
 8005908:	f04f 0800 	mov.w	r8, #0
 800590c:	4621      	mov	r1, r4
 800590e:	4628      	mov	r0, r5
 8005910:	f000 f98e 	bl	8005c30 <_Bfree>
 8005914:	2e00      	cmp	r6, #0
 8005916:	f43f aea4 	beq.w	8005662 <_dtoa_r+0x6c2>
 800591a:	f1b8 0f00 	cmp.w	r8, #0
 800591e:	d005      	beq.n	800592c <_dtoa_r+0x98c>
 8005920:	45b0      	cmp	r8, r6
 8005922:	d003      	beq.n	800592c <_dtoa_r+0x98c>
 8005924:	4641      	mov	r1, r8
 8005926:	4628      	mov	r0, r5
 8005928:	f000 f982 	bl	8005c30 <_Bfree>
 800592c:	4631      	mov	r1, r6
 800592e:	4628      	mov	r0, r5
 8005930:	f000 f97e 	bl	8005c30 <_Bfree>
 8005934:	e695      	b.n	8005662 <_dtoa_r+0x6c2>
 8005936:	2400      	movs	r4, #0
 8005938:	4626      	mov	r6, r4
 800593a:	e7e1      	b.n	8005900 <_dtoa_r+0x960>
 800593c:	46c1      	mov	r9, r8
 800593e:	4626      	mov	r6, r4
 8005940:	e594      	b.n	800546c <_dtoa_r+0x4cc>
 8005942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005944:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 80fc 	beq.w	8005b46 <_dtoa_r+0xba6>
 800594e:	2f00      	cmp	r7, #0
 8005950:	dd05      	ble.n	800595e <_dtoa_r+0x9be>
 8005952:	4631      	mov	r1, r6
 8005954:	463a      	mov	r2, r7
 8005956:	4628      	mov	r0, r5
 8005958:	f000 fb38 	bl	8005fcc <__lshift>
 800595c:	4606      	mov	r6, r0
 800595e:	f1b8 0f00 	cmp.w	r8, #0
 8005962:	d05c      	beq.n	8005a1e <_dtoa_r+0xa7e>
 8005964:	4628      	mov	r0, r5
 8005966:	6871      	ldr	r1, [r6, #4]
 8005968:	f000 f922 	bl	8005bb0 <_Balloc>
 800596c:	4607      	mov	r7, r0
 800596e:	b928      	cbnz	r0, 800597c <_dtoa_r+0x9dc>
 8005970:	4602      	mov	r2, r0
 8005972:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005976:	4b7e      	ldr	r3, [pc, #504]	; (8005b70 <_dtoa_r+0xbd0>)
 8005978:	f7ff bb26 	b.w	8004fc8 <_dtoa_r+0x28>
 800597c:	6932      	ldr	r2, [r6, #16]
 800597e:	f106 010c 	add.w	r1, r6, #12
 8005982:	3202      	adds	r2, #2
 8005984:	0092      	lsls	r2, r2, #2
 8005986:	300c      	adds	r0, #12
 8005988:	f7fe fde4 	bl	8004554 <memcpy>
 800598c:	2201      	movs	r2, #1
 800598e:	4639      	mov	r1, r7
 8005990:	4628      	mov	r0, r5
 8005992:	f000 fb1b 	bl	8005fcc <__lshift>
 8005996:	46b0      	mov	r8, r6
 8005998:	4606      	mov	r6, r0
 800599a:	9b08      	ldr	r3, [sp, #32]
 800599c:	3301      	adds	r3, #1
 800599e:	9302      	str	r3, [sp, #8]
 80059a0:	9b08      	ldr	r3, [sp, #32]
 80059a2:	445b      	add	r3, fp
 80059a4:	930a      	str	r3, [sp, #40]	; 0x28
 80059a6:	9b04      	ldr	r3, [sp, #16]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	9309      	str	r3, [sp, #36]	; 0x24
 80059ae:	9b02      	ldr	r3, [sp, #8]
 80059b0:	4621      	mov	r1, r4
 80059b2:	4650      	mov	r0, sl
 80059b4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80059b8:	f7ff fa62 	bl	8004e80 <quorem>
 80059bc:	4603      	mov	r3, r0
 80059be:	4641      	mov	r1, r8
 80059c0:	3330      	adds	r3, #48	; 0x30
 80059c2:	9004      	str	r0, [sp, #16]
 80059c4:	4650      	mov	r0, sl
 80059c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80059c8:	f000 fb6c 	bl	80060a4 <__mcmp>
 80059cc:	4632      	mov	r2, r6
 80059ce:	9006      	str	r0, [sp, #24]
 80059d0:	4621      	mov	r1, r4
 80059d2:	4628      	mov	r0, r5
 80059d4:	f000 fb82 	bl	80060dc <__mdiff>
 80059d8:	68c2      	ldr	r2, [r0, #12]
 80059da:	4607      	mov	r7, r0
 80059dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059de:	bb02      	cbnz	r2, 8005a22 <_dtoa_r+0xa82>
 80059e0:	4601      	mov	r1, r0
 80059e2:	4650      	mov	r0, sl
 80059e4:	f000 fb5e 	bl	80060a4 <__mcmp>
 80059e8:	4602      	mov	r2, r0
 80059ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ec:	4639      	mov	r1, r7
 80059ee:	4628      	mov	r0, r5
 80059f0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80059f4:	f000 f91c 	bl	8005c30 <_Bfree>
 80059f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059fc:	9f02      	ldr	r7, [sp, #8]
 80059fe:	ea43 0102 	orr.w	r1, r3, r2
 8005a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a04:	430b      	orrs	r3, r1
 8005a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a08:	d10d      	bne.n	8005a26 <_dtoa_r+0xa86>
 8005a0a:	2b39      	cmp	r3, #57	; 0x39
 8005a0c:	d027      	beq.n	8005a5e <_dtoa_r+0xabe>
 8005a0e:	9a06      	ldr	r2, [sp, #24]
 8005a10:	2a00      	cmp	r2, #0
 8005a12:	dd01      	ble.n	8005a18 <_dtoa_r+0xa78>
 8005a14:	9b04      	ldr	r3, [sp, #16]
 8005a16:	3331      	adds	r3, #49	; 0x31
 8005a18:	f88b 3000 	strb.w	r3, [fp]
 8005a1c:	e776      	b.n	800590c <_dtoa_r+0x96c>
 8005a1e:	4630      	mov	r0, r6
 8005a20:	e7b9      	b.n	8005996 <_dtoa_r+0x9f6>
 8005a22:	2201      	movs	r2, #1
 8005a24:	e7e2      	b.n	80059ec <_dtoa_r+0xa4c>
 8005a26:	9906      	ldr	r1, [sp, #24]
 8005a28:	2900      	cmp	r1, #0
 8005a2a:	db04      	blt.n	8005a36 <_dtoa_r+0xa96>
 8005a2c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005a2e:	4301      	orrs	r1, r0
 8005a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a32:	4301      	orrs	r1, r0
 8005a34:	d120      	bne.n	8005a78 <_dtoa_r+0xad8>
 8005a36:	2a00      	cmp	r2, #0
 8005a38:	ddee      	ble.n	8005a18 <_dtoa_r+0xa78>
 8005a3a:	4651      	mov	r1, sl
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	4628      	mov	r0, r5
 8005a40:	9302      	str	r3, [sp, #8]
 8005a42:	f000 fac3 	bl	8005fcc <__lshift>
 8005a46:	4621      	mov	r1, r4
 8005a48:	4682      	mov	sl, r0
 8005a4a:	f000 fb2b 	bl	80060a4 <__mcmp>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	9b02      	ldr	r3, [sp, #8]
 8005a52:	dc02      	bgt.n	8005a5a <_dtoa_r+0xaba>
 8005a54:	d1e0      	bne.n	8005a18 <_dtoa_r+0xa78>
 8005a56:	07da      	lsls	r2, r3, #31
 8005a58:	d5de      	bpl.n	8005a18 <_dtoa_r+0xa78>
 8005a5a:	2b39      	cmp	r3, #57	; 0x39
 8005a5c:	d1da      	bne.n	8005a14 <_dtoa_r+0xa74>
 8005a5e:	2339      	movs	r3, #57	; 0x39
 8005a60:	f88b 3000 	strb.w	r3, [fp]
 8005a64:	463b      	mov	r3, r7
 8005a66:	461f      	mov	r7, r3
 8005a68:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	2a39      	cmp	r2, #57	; 0x39
 8005a70:	d050      	beq.n	8005b14 <_dtoa_r+0xb74>
 8005a72:	3201      	adds	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	e749      	b.n	800590c <_dtoa_r+0x96c>
 8005a78:	2a00      	cmp	r2, #0
 8005a7a:	dd03      	ble.n	8005a84 <_dtoa_r+0xae4>
 8005a7c:	2b39      	cmp	r3, #57	; 0x39
 8005a7e:	d0ee      	beq.n	8005a5e <_dtoa_r+0xabe>
 8005a80:	3301      	adds	r3, #1
 8005a82:	e7c9      	b.n	8005a18 <_dtoa_r+0xa78>
 8005a84:	9a02      	ldr	r2, [sp, #8]
 8005a86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a88:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005a8c:	428a      	cmp	r2, r1
 8005a8e:	d02a      	beq.n	8005ae6 <_dtoa_r+0xb46>
 8005a90:	4651      	mov	r1, sl
 8005a92:	2300      	movs	r3, #0
 8005a94:	220a      	movs	r2, #10
 8005a96:	4628      	mov	r0, r5
 8005a98:	f000 f8ec 	bl	8005c74 <__multadd>
 8005a9c:	45b0      	cmp	r8, r6
 8005a9e:	4682      	mov	sl, r0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	f04f 020a 	mov.w	r2, #10
 8005aa8:	4641      	mov	r1, r8
 8005aaa:	4628      	mov	r0, r5
 8005aac:	d107      	bne.n	8005abe <_dtoa_r+0xb1e>
 8005aae:	f000 f8e1 	bl	8005c74 <__multadd>
 8005ab2:	4680      	mov	r8, r0
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	9b02      	ldr	r3, [sp, #8]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	9302      	str	r3, [sp, #8]
 8005abc:	e777      	b.n	80059ae <_dtoa_r+0xa0e>
 8005abe:	f000 f8d9 	bl	8005c74 <__multadd>
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	4680      	mov	r8, r0
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	220a      	movs	r2, #10
 8005aca:	4628      	mov	r0, r5
 8005acc:	f000 f8d2 	bl	8005c74 <__multadd>
 8005ad0:	4606      	mov	r6, r0
 8005ad2:	e7f0      	b.n	8005ab6 <_dtoa_r+0xb16>
 8005ad4:	f1bb 0f00 	cmp.w	fp, #0
 8005ad8:	bfcc      	ite	gt
 8005ada:	465f      	movgt	r7, fp
 8005adc:	2701      	movle	r7, #1
 8005ade:	f04f 0800 	mov.w	r8, #0
 8005ae2:	9a08      	ldr	r2, [sp, #32]
 8005ae4:	4417      	add	r7, r2
 8005ae6:	4651      	mov	r1, sl
 8005ae8:	2201      	movs	r2, #1
 8005aea:	4628      	mov	r0, r5
 8005aec:	9302      	str	r3, [sp, #8]
 8005aee:	f000 fa6d 	bl	8005fcc <__lshift>
 8005af2:	4621      	mov	r1, r4
 8005af4:	4682      	mov	sl, r0
 8005af6:	f000 fad5 	bl	80060a4 <__mcmp>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	dcb2      	bgt.n	8005a64 <_dtoa_r+0xac4>
 8005afe:	d102      	bne.n	8005b06 <_dtoa_r+0xb66>
 8005b00:	9b02      	ldr	r3, [sp, #8]
 8005b02:	07db      	lsls	r3, r3, #31
 8005b04:	d4ae      	bmi.n	8005a64 <_dtoa_r+0xac4>
 8005b06:	463b      	mov	r3, r7
 8005b08:	461f      	mov	r7, r3
 8005b0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b0e:	2a30      	cmp	r2, #48	; 0x30
 8005b10:	d0fa      	beq.n	8005b08 <_dtoa_r+0xb68>
 8005b12:	e6fb      	b.n	800590c <_dtoa_r+0x96c>
 8005b14:	9a08      	ldr	r2, [sp, #32]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d1a5      	bne.n	8005a66 <_dtoa_r+0xac6>
 8005b1a:	2331      	movs	r3, #49	; 0x31
 8005b1c:	f109 0901 	add.w	r9, r9, #1
 8005b20:	7013      	strb	r3, [r2, #0]
 8005b22:	e6f3      	b.n	800590c <_dtoa_r+0x96c>
 8005b24:	4b13      	ldr	r3, [pc, #76]	; (8005b74 <_dtoa_r+0xbd4>)
 8005b26:	f7ff baa7 	b.w	8005078 <_dtoa_r+0xd8>
 8005b2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f47f aa80 	bne.w	8005032 <_dtoa_r+0x92>
 8005b32:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <_dtoa_r+0xbd8>)
 8005b34:	f7ff baa0 	b.w	8005078 <_dtoa_r+0xd8>
 8005b38:	f1bb 0f00 	cmp.w	fp, #0
 8005b3c:	dc03      	bgt.n	8005b46 <_dtoa_r+0xba6>
 8005b3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	f73f aecc 	bgt.w	80058de <_dtoa_r+0x93e>
 8005b46:	9f08      	ldr	r7, [sp, #32]
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4650      	mov	r0, sl
 8005b4c:	f7ff f998 	bl	8004e80 <quorem>
 8005b50:	9a08      	ldr	r2, [sp, #32]
 8005b52:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005b56:	f807 3b01 	strb.w	r3, [r7], #1
 8005b5a:	1aba      	subs	r2, r7, r2
 8005b5c:	4593      	cmp	fp, r2
 8005b5e:	ddb9      	ble.n	8005ad4 <_dtoa_r+0xb34>
 8005b60:	4651      	mov	r1, sl
 8005b62:	2300      	movs	r3, #0
 8005b64:	220a      	movs	r2, #10
 8005b66:	4628      	mov	r0, r5
 8005b68:	f000 f884 	bl	8005c74 <__multadd>
 8005b6c:	4682      	mov	sl, r0
 8005b6e:	e7eb      	b.n	8005b48 <_dtoa_r+0xba8>
 8005b70:	080073eb 	.word	0x080073eb
 8005b74:	08007344 	.word	0x08007344
 8005b78:	08007368 	.word	0x08007368

08005b7c <_localeconv_r>:
 8005b7c:	4800      	ldr	r0, [pc, #0]	; (8005b80 <_localeconv_r+0x4>)
 8005b7e:	4770      	bx	lr
 8005b80:	20000260 	.word	0x20000260

08005b84 <malloc>:
 8005b84:	4b02      	ldr	r3, [pc, #8]	; (8005b90 <malloc+0xc>)
 8005b86:	4601      	mov	r1, r0
 8005b88:	6818      	ldr	r0, [r3, #0]
 8005b8a:	f000 bbed 	b.w	8006368 <_malloc_r>
 8005b8e:	bf00      	nop
 8005b90:	2000010c 	.word	0x2000010c

08005b94 <memchr>:
 8005b94:	4603      	mov	r3, r0
 8005b96:	b510      	push	{r4, lr}
 8005b98:	b2c9      	uxtb	r1, r1
 8005b9a:	4402      	add	r2, r0
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	d101      	bne.n	8005ba6 <memchr+0x12>
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	e003      	b.n	8005bae <memchr+0x1a>
 8005ba6:	7804      	ldrb	r4, [r0, #0]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	428c      	cmp	r4, r1
 8005bac:	d1f6      	bne.n	8005b9c <memchr+0x8>
 8005bae:	bd10      	pop	{r4, pc}

08005bb0 <_Balloc>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	460d      	mov	r5, r1
 8005bb8:	b976      	cbnz	r6, 8005bd8 <_Balloc+0x28>
 8005bba:	2010      	movs	r0, #16
 8005bbc:	f7ff ffe2 	bl	8005b84 <malloc>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	6260      	str	r0, [r4, #36]	; 0x24
 8005bc4:	b920      	cbnz	r0, 8005bd0 <_Balloc+0x20>
 8005bc6:	2166      	movs	r1, #102	; 0x66
 8005bc8:	4b17      	ldr	r3, [pc, #92]	; (8005c28 <_Balloc+0x78>)
 8005bca:	4818      	ldr	r0, [pc, #96]	; (8005c2c <_Balloc+0x7c>)
 8005bcc:	f000 fd92 	bl	80066f4 <__assert_func>
 8005bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bd4:	6006      	str	r6, [r0, #0]
 8005bd6:	60c6      	str	r6, [r0, #12]
 8005bd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005bda:	68f3      	ldr	r3, [r6, #12]
 8005bdc:	b183      	cbz	r3, 8005c00 <_Balloc+0x50>
 8005bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005be6:	b9b8      	cbnz	r0, 8005c18 <_Balloc+0x68>
 8005be8:	2101      	movs	r1, #1
 8005bea:	fa01 f605 	lsl.w	r6, r1, r5
 8005bee:	1d72      	adds	r2, r6, #5
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	0092      	lsls	r2, r2, #2
 8005bf4:	f000 fb5e 	bl	80062b4 <_calloc_r>
 8005bf8:	b160      	cbz	r0, 8005c14 <_Balloc+0x64>
 8005bfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005bfe:	e00e      	b.n	8005c1e <_Balloc+0x6e>
 8005c00:	2221      	movs	r2, #33	; 0x21
 8005c02:	2104      	movs	r1, #4
 8005c04:	4620      	mov	r0, r4
 8005c06:	f000 fb55 	bl	80062b4 <_calloc_r>
 8005c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c0c:	60f0      	str	r0, [r6, #12]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e4      	bne.n	8005bde <_Balloc+0x2e>
 8005c14:	2000      	movs	r0, #0
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
 8005c18:	6802      	ldr	r2, [r0, #0]
 8005c1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c24:	e7f7      	b.n	8005c16 <_Balloc+0x66>
 8005c26:	bf00      	nop
 8005c28:	08007375 	.word	0x08007375
 8005c2c:	080073fc 	.word	0x080073fc

08005c30 <_Bfree>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c34:	4605      	mov	r5, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	b976      	cbnz	r6, 8005c58 <_Bfree+0x28>
 8005c3a:	2010      	movs	r0, #16
 8005c3c:	f7ff ffa2 	bl	8005b84 <malloc>
 8005c40:	4602      	mov	r2, r0
 8005c42:	6268      	str	r0, [r5, #36]	; 0x24
 8005c44:	b920      	cbnz	r0, 8005c50 <_Bfree+0x20>
 8005c46:	218a      	movs	r1, #138	; 0x8a
 8005c48:	4b08      	ldr	r3, [pc, #32]	; (8005c6c <_Bfree+0x3c>)
 8005c4a:	4809      	ldr	r0, [pc, #36]	; (8005c70 <_Bfree+0x40>)
 8005c4c:	f000 fd52 	bl	80066f4 <__assert_func>
 8005c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c54:	6006      	str	r6, [r0, #0]
 8005c56:	60c6      	str	r6, [r0, #12]
 8005c58:	b13c      	cbz	r4, 8005c6a <_Bfree+0x3a>
 8005c5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005c5c:	6862      	ldr	r2, [r4, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c64:	6021      	str	r1, [r4, #0]
 8005c66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}
 8005c6c:	08007375 	.word	0x08007375
 8005c70:	080073fc 	.word	0x080073fc

08005c74 <__multadd>:
 8005c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c78:	4698      	mov	r8, r3
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	690e      	ldr	r6, [r1, #16]
 8005c80:	4607      	mov	r7, r0
 8005c82:	f101 0014 	add.w	r0, r1, #20
 8005c86:	6805      	ldr	r5, [r0, #0]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	b2a9      	uxth	r1, r5
 8005c8c:	fb02 8101 	mla	r1, r2, r1, r8
 8005c90:	0c2d      	lsrs	r5, r5, #16
 8005c92:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005c96:	fb02 c505 	mla	r5, r2, r5, ip
 8005c9a:	b289      	uxth	r1, r1
 8005c9c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005ca0:	429e      	cmp	r6, r3
 8005ca2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005ca6:	f840 1b04 	str.w	r1, [r0], #4
 8005caa:	dcec      	bgt.n	8005c86 <__multadd+0x12>
 8005cac:	f1b8 0f00 	cmp.w	r8, #0
 8005cb0:	d022      	beq.n	8005cf8 <__multadd+0x84>
 8005cb2:	68a3      	ldr	r3, [r4, #8]
 8005cb4:	42b3      	cmp	r3, r6
 8005cb6:	dc19      	bgt.n	8005cec <__multadd+0x78>
 8005cb8:	6861      	ldr	r1, [r4, #4]
 8005cba:	4638      	mov	r0, r7
 8005cbc:	3101      	adds	r1, #1
 8005cbe:	f7ff ff77 	bl	8005bb0 <_Balloc>
 8005cc2:	4605      	mov	r5, r0
 8005cc4:	b928      	cbnz	r0, 8005cd2 <__multadd+0x5e>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	21b5      	movs	r1, #181	; 0xb5
 8005cca:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <__multadd+0x8c>)
 8005ccc:	480d      	ldr	r0, [pc, #52]	; (8005d04 <__multadd+0x90>)
 8005cce:	f000 fd11 	bl	80066f4 <__assert_func>
 8005cd2:	6922      	ldr	r2, [r4, #16]
 8005cd4:	f104 010c 	add.w	r1, r4, #12
 8005cd8:	3202      	adds	r2, #2
 8005cda:	0092      	lsls	r2, r2, #2
 8005cdc:	300c      	adds	r0, #12
 8005cde:	f7fe fc39 	bl	8004554 <memcpy>
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	f7ff ffa3 	bl	8005c30 <_Bfree>
 8005cea:	462c      	mov	r4, r5
 8005cec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005cf0:	3601      	adds	r6, #1
 8005cf2:	f8c3 8014 	str.w	r8, [r3, #20]
 8005cf6:	6126      	str	r6, [r4, #16]
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cfe:	bf00      	nop
 8005d00:	080073eb 	.word	0x080073eb
 8005d04:	080073fc 	.word	0x080073fc

08005d08 <__hi0bits>:
 8005d08:	0c02      	lsrs	r2, r0, #16
 8005d0a:	0412      	lsls	r2, r2, #16
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	b9ca      	cbnz	r2, 8005d44 <__hi0bits+0x3c>
 8005d10:	0403      	lsls	r3, r0, #16
 8005d12:	2010      	movs	r0, #16
 8005d14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005d18:	bf04      	itt	eq
 8005d1a:	021b      	lsleq	r3, r3, #8
 8005d1c:	3008      	addeq	r0, #8
 8005d1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005d22:	bf04      	itt	eq
 8005d24:	011b      	lsleq	r3, r3, #4
 8005d26:	3004      	addeq	r0, #4
 8005d28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005d2c:	bf04      	itt	eq
 8005d2e:	009b      	lsleq	r3, r3, #2
 8005d30:	3002      	addeq	r0, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	db05      	blt.n	8005d42 <__hi0bits+0x3a>
 8005d36:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005d3a:	f100 0001 	add.w	r0, r0, #1
 8005d3e:	bf08      	it	eq
 8005d40:	2020      	moveq	r0, #32
 8005d42:	4770      	bx	lr
 8005d44:	2000      	movs	r0, #0
 8005d46:	e7e5      	b.n	8005d14 <__hi0bits+0xc>

08005d48 <__lo0bits>:
 8005d48:	6803      	ldr	r3, [r0, #0]
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	f013 0007 	ands.w	r0, r3, #7
 8005d50:	d00b      	beq.n	8005d6a <__lo0bits+0x22>
 8005d52:	07d9      	lsls	r1, r3, #31
 8005d54:	d422      	bmi.n	8005d9c <__lo0bits+0x54>
 8005d56:	0798      	lsls	r0, r3, #30
 8005d58:	bf49      	itett	mi
 8005d5a:	085b      	lsrmi	r3, r3, #1
 8005d5c:	089b      	lsrpl	r3, r3, #2
 8005d5e:	2001      	movmi	r0, #1
 8005d60:	6013      	strmi	r3, [r2, #0]
 8005d62:	bf5c      	itt	pl
 8005d64:	2002      	movpl	r0, #2
 8005d66:	6013      	strpl	r3, [r2, #0]
 8005d68:	4770      	bx	lr
 8005d6a:	b299      	uxth	r1, r3
 8005d6c:	b909      	cbnz	r1, 8005d72 <__lo0bits+0x2a>
 8005d6e:	2010      	movs	r0, #16
 8005d70:	0c1b      	lsrs	r3, r3, #16
 8005d72:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005d76:	bf04      	itt	eq
 8005d78:	0a1b      	lsreq	r3, r3, #8
 8005d7a:	3008      	addeq	r0, #8
 8005d7c:	0719      	lsls	r1, r3, #28
 8005d7e:	bf04      	itt	eq
 8005d80:	091b      	lsreq	r3, r3, #4
 8005d82:	3004      	addeq	r0, #4
 8005d84:	0799      	lsls	r1, r3, #30
 8005d86:	bf04      	itt	eq
 8005d88:	089b      	lsreq	r3, r3, #2
 8005d8a:	3002      	addeq	r0, #2
 8005d8c:	07d9      	lsls	r1, r3, #31
 8005d8e:	d403      	bmi.n	8005d98 <__lo0bits+0x50>
 8005d90:	085b      	lsrs	r3, r3, #1
 8005d92:	f100 0001 	add.w	r0, r0, #1
 8005d96:	d003      	beq.n	8005da0 <__lo0bits+0x58>
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	4770      	bx	lr
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	4770      	bx	lr
 8005da0:	2020      	movs	r0, #32
 8005da2:	4770      	bx	lr

08005da4 <__i2b>:
 8005da4:	b510      	push	{r4, lr}
 8005da6:	460c      	mov	r4, r1
 8005da8:	2101      	movs	r1, #1
 8005daa:	f7ff ff01 	bl	8005bb0 <_Balloc>
 8005dae:	4602      	mov	r2, r0
 8005db0:	b928      	cbnz	r0, 8005dbe <__i2b+0x1a>
 8005db2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005db6:	4b04      	ldr	r3, [pc, #16]	; (8005dc8 <__i2b+0x24>)
 8005db8:	4804      	ldr	r0, [pc, #16]	; (8005dcc <__i2b+0x28>)
 8005dba:	f000 fc9b 	bl	80066f4 <__assert_func>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	6144      	str	r4, [r0, #20]
 8005dc2:	6103      	str	r3, [r0, #16]
 8005dc4:	bd10      	pop	{r4, pc}
 8005dc6:	bf00      	nop
 8005dc8:	080073eb 	.word	0x080073eb
 8005dcc:	080073fc 	.word	0x080073fc

08005dd0 <__multiply>:
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	690a      	ldr	r2, [r1, #16]
 8005dd8:	6923      	ldr	r3, [r4, #16]
 8005dda:	460d      	mov	r5, r1
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	bfbe      	ittt	lt
 8005de0:	460b      	movlt	r3, r1
 8005de2:	4625      	movlt	r5, r4
 8005de4:	461c      	movlt	r4, r3
 8005de6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005dea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005dee:	68ab      	ldr	r3, [r5, #8]
 8005df0:	6869      	ldr	r1, [r5, #4]
 8005df2:	eb0a 0709 	add.w	r7, sl, r9
 8005df6:	42bb      	cmp	r3, r7
 8005df8:	b085      	sub	sp, #20
 8005dfa:	bfb8      	it	lt
 8005dfc:	3101      	addlt	r1, #1
 8005dfe:	f7ff fed7 	bl	8005bb0 <_Balloc>
 8005e02:	b930      	cbnz	r0, 8005e12 <__multiply+0x42>
 8005e04:	4602      	mov	r2, r0
 8005e06:	f240 115d 	movw	r1, #349	; 0x15d
 8005e0a:	4b41      	ldr	r3, [pc, #260]	; (8005f10 <__multiply+0x140>)
 8005e0c:	4841      	ldr	r0, [pc, #260]	; (8005f14 <__multiply+0x144>)
 8005e0e:	f000 fc71 	bl	80066f4 <__assert_func>
 8005e12:	f100 0614 	add.w	r6, r0, #20
 8005e16:	4633      	mov	r3, r6
 8005e18:	2200      	movs	r2, #0
 8005e1a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005e1e:	4543      	cmp	r3, r8
 8005e20:	d31e      	bcc.n	8005e60 <__multiply+0x90>
 8005e22:	f105 0c14 	add.w	ip, r5, #20
 8005e26:	f104 0314 	add.w	r3, r4, #20
 8005e2a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005e2e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005e32:	9202      	str	r2, [sp, #8]
 8005e34:	ebac 0205 	sub.w	r2, ip, r5
 8005e38:	3a15      	subs	r2, #21
 8005e3a:	f022 0203 	bic.w	r2, r2, #3
 8005e3e:	3204      	adds	r2, #4
 8005e40:	f105 0115 	add.w	r1, r5, #21
 8005e44:	458c      	cmp	ip, r1
 8005e46:	bf38      	it	cc
 8005e48:	2204      	movcc	r2, #4
 8005e4a:	9201      	str	r2, [sp, #4]
 8005e4c:	9a02      	ldr	r2, [sp, #8]
 8005e4e:	9303      	str	r3, [sp, #12]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d808      	bhi.n	8005e66 <__multiply+0x96>
 8005e54:	2f00      	cmp	r7, #0
 8005e56:	dc55      	bgt.n	8005f04 <__multiply+0x134>
 8005e58:	6107      	str	r7, [r0, #16]
 8005e5a:	b005      	add	sp, #20
 8005e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e60:	f843 2b04 	str.w	r2, [r3], #4
 8005e64:	e7db      	b.n	8005e1e <__multiply+0x4e>
 8005e66:	f8b3 a000 	ldrh.w	sl, [r3]
 8005e6a:	f1ba 0f00 	cmp.w	sl, #0
 8005e6e:	d020      	beq.n	8005eb2 <__multiply+0xe2>
 8005e70:	46b1      	mov	r9, r6
 8005e72:	2200      	movs	r2, #0
 8005e74:	f105 0e14 	add.w	lr, r5, #20
 8005e78:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005e7c:	f8d9 b000 	ldr.w	fp, [r9]
 8005e80:	b2a1      	uxth	r1, r4
 8005e82:	fa1f fb8b 	uxth.w	fp, fp
 8005e86:	fb0a b101 	mla	r1, sl, r1, fp
 8005e8a:	4411      	add	r1, r2
 8005e8c:	f8d9 2000 	ldr.w	r2, [r9]
 8005e90:	0c24      	lsrs	r4, r4, #16
 8005e92:	0c12      	lsrs	r2, r2, #16
 8005e94:	fb0a 2404 	mla	r4, sl, r4, r2
 8005e98:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005e9c:	b289      	uxth	r1, r1
 8005e9e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005ea2:	45f4      	cmp	ip, lr
 8005ea4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005ea8:	f849 1b04 	str.w	r1, [r9], #4
 8005eac:	d8e4      	bhi.n	8005e78 <__multiply+0xa8>
 8005eae:	9901      	ldr	r1, [sp, #4]
 8005eb0:	5072      	str	r2, [r6, r1]
 8005eb2:	9a03      	ldr	r2, [sp, #12]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005eba:	f1b9 0f00 	cmp.w	r9, #0
 8005ebe:	d01f      	beq.n	8005f00 <__multiply+0x130>
 8005ec0:	46b6      	mov	lr, r6
 8005ec2:	f04f 0a00 	mov.w	sl, #0
 8005ec6:	6834      	ldr	r4, [r6, #0]
 8005ec8:	f105 0114 	add.w	r1, r5, #20
 8005ecc:	880a      	ldrh	r2, [r1, #0]
 8005ece:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005ed2:	b2a4      	uxth	r4, r4
 8005ed4:	fb09 b202 	mla	r2, r9, r2, fp
 8005ed8:	4492      	add	sl, r2
 8005eda:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005ede:	f84e 4b04 	str.w	r4, [lr], #4
 8005ee2:	f851 4b04 	ldr.w	r4, [r1], #4
 8005ee6:	f8be 2000 	ldrh.w	r2, [lr]
 8005eea:	0c24      	lsrs	r4, r4, #16
 8005eec:	fb09 2404 	mla	r4, r9, r4, r2
 8005ef0:	458c      	cmp	ip, r1
 8005ef2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005ef6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005efa:	d8e7      	bhi.n	8005ecc <__multiply+0xfc>
 8005efc:	9a01      	ldr	r2, [sp, #4]
 8005efe:	50b4      	str	r4, [r6, r2]
 8005f00:	3604      	adds	r6, #4
 8005f02:	e7a3      	b.n	8005e4c <__multiply+0x7c>
 8005f04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1a5      	bne.n	8005e58 <__multiply+0x88>
 8005f0c:	3f01      	subs	r7, #1
 8005f0e:	e7a1      	b.n	8005e54 <__multiply+0x84>
 8005f10:	080073eb 	.word	0x080073eb
 8005f14:	080073fc 	.word	0x080073fc

08005f18 <__pow5mult>:
 8005f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f1c:	4615      	mov	r5, r2
 8005f1e:	f012 0203 	ands.w	r2, r2, #3
 8005f22:	4606      	mov	r6, r0
 8005f24:	460f      	mov	r7, r1
 8005f26:	d007      	beq.n	8005f38 <__pow5mult+0x20>
 8005f28:	4c25      	ldr	r4, [pc, #148]	; (8005fc0 <__pow5mult+0xa8>)
 8005f2a:	3a01      	subs	r2, #1
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f32:	f7ff fe9f 	bl	8005c74 <__multadd>
 8005f36:	4607      	mov	r7, r0
 8005f38:	10ad      	asrs	r5, r5, #2
 8005f3a:	d03d      	beq.n	8005fb8 <__pow5mult+0xa0>
 8005f3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005f3e:	b97c      	cbnz	r4, 8005f60 <__pow5mult+0x48>
 8005f40:	2010      	movs	r0, #16
 8005f42:	f7ff fe1f 	bl	8005b84 <malloc>
 8005f46:	4602      	mov	r2, r0
 8005f48:	6270      	str	r0, [r6, #36]	; 0x24
 8005f4a:	b928      	cbnz	r0, 8005f58 <__pow5mult+0x40>
 8005f4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005f50:	4b1c      	ldr	r3, [pc, #112]	; (8005fc4 <__pow5mult+0xac>)
 8005f52:	481d      	ldr	r0, [pc, #116]	; (8005fc8 <__pow5mult+0xb0>)
 8005f54:	f000 fbce 	bl	80066f4 <__assert_func>
 8005f58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f5c:	6004      	str	r4, [r0, #0]
 8005f5e:	60c4      	str	r4, [r0, #12]
 8005f60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005f64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005f68:	b94c      	cbnz	r4, 8005f7e <__pow5mult+0x66>
 8005f6a:	f240 2171 	movw	r1, #625	; 0x271
 8005f6e:	4630      	mov	r0, r6
 8005f70:	f7ff ff18 	bl	8005da4 <__i2b>
 8005f74:	2300      	movs	r3, #0
 8005f76:	4604      	mov	r4, r0
 8005f78:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f7c:	6003      	str	r3, [r0, #0]
 8005f7e:	f04f 0900 	mov.w	r9, #0
 8005f82:	07eb      	lsls	r3, r5, #31
 8005f84:	d50a      	bpl.n	8005f9c <__pow5mult+0x84>
 8005f86:	4639      	mov	r1, r7
 8005f88:	4622      	mov	r2, r4
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f7ff ff20 	bl	8005dd0 <__multiply>
 8005f90:	4680      	mov	r8, r0
 8005f92:	4639      	mov	r1, r7
 8005f94:	4630      	mov	r0, r6
 8005f96:	f7ff fe4b 	bl	8005c30 <_Bfree>
 8005f9a:	4647      	mov	r7, r8
 8005f9c:	106d      	asrs	r5, r5, #1
 8005f9e:	d00b      	beq.n	8005fb8 <__pow5mult+0xa0>
 8005fa0:	6820      	ldr	r0, [r4, #0]
 8005fa2:	b938      	cbnz	r0, 8005fb4 <__pow5mult+0x9c>
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f7ff ff11 	bl	8005dd0 <__multiply>
 8005fae:	6020      	str	r0, [r4, #0]
 8005fb0:	f8c0 9000 	str.w	r9, [r0]
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	e7e4      	b.n	8005f82 <__pow5mult+0x6a>
 8005fb8:	4638      	mov	r0, r7
 8005fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fbe:	bf00      	nop
 8005fc0:	08007550 	.word	0x08007550
 8005fc4:	08007375 	.word	0x08007375
 8005fc8:	080073fc 	.word	0x080073fc

08005fcc <__lshift>:
 8005fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	4607      	mov	r7, r0
 8005fd4:	4691      	mov	r9, r2
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	6849      	ldr	r1, [r1, #4]
 8005fda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005fde:	68a3      	ldr	r3, [r4, #8]
 8005fe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005fe4:	f108 0601 	add.w	r6, r8, #1
 8005fe8:	42b3      	cmp	r3, r6
 8005fea:	db0b      	blt.n	8006004 <__lshift+0x38>
 8005fec:	4638      	mov	r0, r7
 8005fee:	f7ff fddf 	bl	8005bb0 <_Balloc>
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	b948      	cbnz	r0, 800600a <__lshift+0x3e>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ffc:	4b27      	ldr	r3, [pc, #156]	; (800609c <__lshift+0xd0>)
 8005ffe:	4828      	ldr	r0, [pc, #160]	; (80060a0 <__lshift+0xd4>)
 8006000:	f000 fb78 	bl	80066f4 <__assert_func>
 8006004:	3101      	adds	r1, #1
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	e7ee      	b.n	8005fe8 <__lshift+0x1c>
 800600a:	2300      	movs	r3, #0
 800600c:	f100 0114 	add.w	r1, r0, #20
 8006010:	f100 0210 	add.w	r2, r0, #16
 8006014:	4618      	mov	r0, r3
 8006016:	4553      	cmp	r3, sl
 8006018:	db33      	blt.n	8006082 <__lshift+0xb6>
 800601a:	6920      	ldr	r0, [r4, #16]
 800601c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006020:	f104 0314 	add.w	r3, r4, #20
 8006024:	f019 091f 	ands.w	r9, r9, #31
 8006028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800602c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006030:	d02b      	beq.n	800608a <__lshift+0xbe>
 8006032:	468a      	mov	sl, r1
 8006034:	2200      	movs	r2, #0
 8006036:	f1c9 0e20 	rsb	lr, r9, #32
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	fa00 f009 	lsl.w	r0, r0, r9
 8006040:	4302      	orrs	r2, r0
 8006042:	f84a 2b04 	str.w	r2, [sl], #4
 8006046:	f853 2b04 	ldr.w	r2, [r3], #4
 800604a:	459c      	cmp	ip, r3
 800604c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006050:	d8f3      	bhi.n	800603a <__lshift+0x6e>
 8006052:	ebac 0304 	sub.w	r3, ip, r4
 8006056:	3b15      	subs	r3, #21
 8006058:	f023 0303 	bic.w	r3, r3, #3
 800605c:	3304      	adds	r3, #4
 800605e:	f104 0015 	add.w	r0, r4, #21
 8006062:	4584      	cmp	ip, r0
 8006064:	bf38      	it	cc
 8006066:	2304      	movcc	r3, #4
 8006068:	50ca      	str	r2, [r1, r3]
 800606a:	b10a      	cbz	r2, 8006070 <__lshift+0xa4>
 800606c:	f108 0602 	add.w	r6, r8, #2
 8006070:	3e01      	subs	r6, #1
 8006072:	4638      	mov	r0, r7
 8006074:	4621      	mov	r1, r4
 8006076:	612e      	str	r6, [r5, #16]
 8006078:	f7ff fdda 	bl	8005c30 <_Bfree>
 800607c:	4628      	mov	r0, r5
 800607e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006082:	f842 0f04 	str.w	r0, [r2, #4]!
 8006086:	3301      	adds	r3, #1
 8006088:	e7c5      	b.n	8006016 <__lshift+0x4a>
 800608a:	3904      	subs	r1, #4
 800608c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006090:	459c      	cmp	ip, r3
 8006092:	f841 2f04 	str.w	r2, [r1, #4]!
 8006096:	d8f9      	bhi.n	800608c <__lshift+0xc0>
 8006098:	e7ea      	b.n	8006070 <__lshift+0xa4>
 800609a:	bf00      	nop
 800609c:	080073eb 	.word	0x080073eb
 80060a0:	080073fc 	.word	0x080073fc

080060a4 <__mcmp>:
 80060a4:	4603      	mov	r3, r0
 80060a6:	690a      	ldr	r2, [r1, #16]
 80060a8:	6900      	ldr	r0, [r0, #16]
 80060aa:	b530      	push	{r4, r5, lr}
 80060ac:	1a80      	subs	r0, r0, r2
 80060ae:	d10d      	bne.n	80060cc <__mcmp+0x28>
 80060b0:	3314      	adds	r3, #20
 80060b2:	3114      	adds	r1, #20
 80060b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80060b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80060bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80060c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80060c4:	4295      	cmp	r5, r2
 80060c6:	d002      	beq.n	80060ce <__mcmp+0x2a>
 80060c8:	d304      	bcc.n	80060d4 <__mcmp+0x30>
 80060ca:	2001      	movs	r0, #1
 80060cc:	bd30      	pop	{r4, r5, pc}
 80060ce:	42a3      	cmp	r3, r4
 80060d0:	d3f4      	bcc.n	80060bc <__mcmp+0x18>
 80060d2:	e7fb      	b.n	80060cc <__mcmp+0x28>
 80060d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060d8:	e7f8      	b.n	80060cc <__mcmp+0x28>
	...

080060dc <__mdiff>:
 80060dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e0:	460c      	mov	r4, r1
 80060e2:	4606      	mov	r6, r0
 80060e4:	4611      	mov	r1, r2
 80060e6:	4620      	mov	r0, r4
 80060e8:	4692      	mov	sl, r2
 80060ea:	f7ff ffdb 	bl	80060a4 <__mcmp>
 80060ee:	1e05      	subs	r5, r0, #0
 80060f0:	d111      	bne.n	8006116 <__mdiff+0x3a>
 80060f2:	4629      	mov	r1, r5
 80060f4:	4630      	mov	r0, r6
 80060f6:	f7ff fd5b 	bl	8005bb0 <_Balloc>
 80060fa:	4602      	mov	r2, r0
 80060fc:	b928      	cbnz	r0, 800610a <__mdiff+0x2e>
 80060fe:	f240 2132 	movw	r1, #562	; 0x232
 8006102:	4b3c      	ldr	r3, [pc, #240]	; (80061f4 <__mdiff+0x118>)
 8006104:	483c      	ldr	r0, [pc, #240]	; (80061f8 <__mdiff+0x11c>)
 8006106:	f000 faf5 	bl	80066f4 <__assert_func>
 800610a:	2301      	movs	r3, #1
 800610c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006110:	4610      	mov	r0, r2
 8006112:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006116:	bfa4      	itt	ge
 8006118:	4653      	movge	r3, sl
 800611a:	46a2      	movge	sl, r4
 800611c:	4630      	mov	r0, r6
 800611e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006122:	bfa6      	itte	ge
 8006124:	461c      	movge	r4, r3
 8006126:	2500      	movge	r5, #0
 8006128:	2501      	movlt	r5, #1
 800612a:	f7ff fd41 	bl	8005bb0 <_Balloc>
 800612e:	4602      	mov	r2, r0
 8006130:	b918      	cbnz	r0, 800613a <__mdiff+0x5e>
 8006132:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006136:	4b2f      	ldr	r3, [pc, #188]	; (80061f4 <__mdiff+0x118>)
 8006138:	e7e4      	b.n	8006104 <__mdiff+0x28>
 800613a:	f100 0814 	add.w	r8, r0, #20
 800613e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006142:	60c5      	str	r5, [r0, #12]
 8006144:	f04f 0c00 	mov.w	ip, #0
 8006148:	f10a 0514 	add.w	r5, sl, #20
 800614c:	f10a 0010 	add.w	r0, sl, #16
 8006150:	46c2      	mov	sl, r8
 8006152:	6926      	ldr	r6, [r4, #16]
 8006154:	f104 0914 	add.w	r9, r4, #20
 8006158:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800615c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006160:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006164:	f859 3b04 	ldr.w	r3, [r9], #4
 8006168:	fa1f f18b 	uxth.w	r1, fp
 800616c:	4461      	add	r1, ip
 800616e:	fa1f fc83 	uxth.w	ip, r3
 8006172:	0c1b      	lsrs	r3, r3, #16
 8006174:	eba1 010c 	sub.w	r1, r1, ip
 8006178:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800617c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006180:	b289      	uxth	r1, r1
 8006182:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006186:	454e      	cmp	r6, r9
 8006188:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800618c:	f84a 3b04 	str.w	r3, [sl], #4
 8006190:	d8e6      	bhi.n	8006160 <__mdiff+0x84>
 8006192:	1b33      	subs	r3, r6, r4
 8006194:	3b15      	subs	r3, #21
 8006196:	f023 0303 	bic.w	r3, r3, #3
 800619a:	3415      	adds	r4, #21
 800619c:	3304      	adds	r3, #4
 800619e:	42a6      	cmp	r6, r4
 80061a0:	bf38      	it	cc
 80061a2:	2304      	movcc	r3, #4
 80061a4:	441d      	add	r5, r3
 80061a6:	4443      	add	r3, r8
 80061a8:	461e      	mov	r6, r3
 80061aa:	462c      	mov	r4, r5
 80061ac:	4574      	cmp	r4, lr
 80061ae:	d30e      	bcc.n	80061ce <__mdiff+0xf2>
 80061b0:	f10e 0103 	add.w	r1, lr, #3
 80061b4:	1b49      	subs	r1, r1, r5
 80061b6:	f021 0103 	bic.w	r1, r1, #3
 80061ba:	3d03      	subs	r5, #3
 80061bc:	45ae      	cmp	lr, r5
 80061be:	bf38      	it	cc
 80061c0:	2100      	movcc	r1, #0
 80061c2:	4419      	add	r1, r3
 80061c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80061c8:	b18b      	cbz	r3, 80061ee <__mdiff+0x112>
 80061ca:	6117      	str	r7, [r2, #16]
 80061cc:	e7a0      	b.n	8006110 <__mdiff+0x34>
 80061ce:	f854 8b04 	ldr.w	r8, [r4], #4
 80061d2:	fa1f f188 	uxth.w	r1, r8
 80061d6:	4461      	add	r1, ip
 80061d8:	1408      	asrs	r0, r1, #16
 80061da:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80061de:	b289      	uxth	r1, r1
 80061e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80061e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80061e8:	f846 1b04 	str.w	r1, [r6], #4
 80061ec:	e7de      	b.n	80061ac <__mdiff+0xd0>
 80061ee:	3f01      	subs	r7, #1
 80061f0:	e7e8      	b.n	80061c4 <__mdiff+0xe8>
 80061f2:	bf00      	nop
 80061f4:	080073eb 	.word	0x080073eb
 80061f8:	080073fc 	.word	0x080073fc

080061fc <__d2b>:
 80061fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006200:	2101      	movs	r1, #1
 8006202:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006206:	4690      	mov	r8, r2
 8006208:	461d      	mov	r5, r3
 800620a:	f7ff fcd1 	bl	8005bb0 <_Balloc>
 800620e:	4604      	mov	r4, r0
 8006210:	b930      	cbnz	r0, 8006220 <__d2b+0x24>
 8006212:	4602      	mov	r2, r0
 8006214:	f240 310a 	movw	r1, #778	; 0x30a
 8006218:	4b24      	ldr	r3, [pc, #144]	; (80062ac <__d2b+0xb0>)
 800621a:	4825      	ldr	r0, [pc, #148]	; (80062b0 <__d2b+0xb4>)
 800621c:	f000 fa6a 	bl	80066f4 <__assert_func>
 8006220:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006224:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006228:	bb2d      	cbnz	r5, 8006276 <__d2b+0x7a>
 800622a:	9301      	str	r3, [sp, #4]
 800622c:	f1b8 0300 	subs.w	r3, r8, #0
 8006230:	d026      	beq.n	8006280 <__d2b+0x84>
 8006232:	4668      	mov	r0, sp
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	f7ff fd87 	bl	8005d48 <__lo0bits>
 800623a:	9900      	ldr	r1, [sp, #0]
 800623c:	b1f0      	cbz	r0, 800627c <__d2b+0x80>
 800623e:	9a01      	ldr	r2, [sp, #4]
 8006240:	f1c0 0320 	rsb	r3, r0, #32
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	430b      	orrs	r3, r1
 800624a:	40c2      	lsrs	r2, r0
 800624c:	6163      	str	r3, [r4, #20]
 800624e:	9201      	str	r2, [sp, #4]
 8006250:	9b01      	ldr	r3, [sp, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	bf14      	ite	ne
 8006256:	2102      	movne	r1, #2
 8006258:	2101      	moveq	r1, #1
 800625a:	61a3      	str	r3, [r4, #24]
 800625c:	6121      	str	r1, [r4, #16]
 800625e:	b1c5      	cbz	r5, 8006292 <__d2b+0x96>
 8006260:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006264:	4405      	add	r5, r0
 8006266:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800626a:	603d      	str	r5, [r7, #0]
 800626c:	6030      	str	r0, [r6, #0]
 800626e:	4620      	mov	r0, r4
 8006270:	b002      	add	sp, #8
 8006272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800627a:	e7d6      	b.n	800622a <__d2b+0x2e>
 800627c:	6161      	str	r1, [r4, #20]
 800627e:	e7e7      	b.n	8006250 <__d2b+0x54>
 8006280:	a801      	add	r0, sp, #4
 8006282:	f7ff fd61 	bl	8005d48 <__lo0bits>
 8006286:	2101      	movs	r1, #1
 8006288:	9b01      	ldr	r3, [sp, #4]
 800628a:	6121      	str	r1, [r4, #16]
 800628c:	6163      	str	r3, [r4, #20]
 800628e:	3020      	adds	r0, #32
 8006290:	e7e5      	b.n	800625e <__d2b+0x62>
 8006292:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006296:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800629a:	6038      	str	r0, [r7, #0]
 800629c:	6918      	ldr	r0, [r3, #16]
 800629e:	f7ff fd33 	bl	8005d08 <__hi0bits>
 80062a2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80062a6:	6031      	str	r1, [r6, #0]
 80062a8:	e7e1      	b.n	800626e <__d2b+0x72>
 80062aa:	bf00      	nop
 80062ac:	080073eb 	.word	0x080073eb
 80062b0:	080073fc 	.word	0x080073fc

080062b4 <_calloc_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	fb02 f501 	mul.w	r5, r2, r1
 80062ba:	4629      	mov	r1, r5
 80062bc:	f000 f854 	bl	8006368 <_malloc_r>
 80062c0:	4604      	mov	r4, r0
 80062c2:	b118      	cbz	r0, 80062cc <_calloc_r+0x18>
 80062c4:	462a      	mov	r2, r5
 80062c6:	2100      	movs	r1, #0
 80062c8:	f7fe f952 	bl	8004570 <memset>
 80062cc:	4620      	mov	r0, r4
 80062ce:	bd38      	pop	{r3, r4, r5, pc}

080062d0 <_free_r>:
 80062d0:	b538      	push	{r3, r4, r5, lr}
 80062d2:	4605      	mov	r5, r0
 80062d4:	2900      	cmp	r1, #0
 80062d6:	d043      	beq.n	8006360 <_free_r+0x90>
 80062d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062dc:	1f0c      	subs	r4, r1, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bfb8      	it	lt
 80062e2:	18e4      	addlt	r4, r4, r3
 80062e4:	f000 fa62 	bl	80067ac <__malloc_lock>
 80062e8:	4a1e      	ldr	r2, [pc, #120]	; (8006364 <_free_r+0x94>)
 80062ea:	6813      	ldr	r3, [r2, #0]
 80062ec:	4610      	mov	r0, r2
 80062ee:	b933      	cbnz	r3, 80062fe <_free_r+0x2e>
 80062f0:	6063      	str	r3, [r4, #4]
 80062f2:	6014      	str	r4, [r2, #0]
 80062f4:	4628      	mov	r0, r5
 80062f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062fa:	f000 ba5d 	b.w	80067b8 <__malloc_unlock>
 80062fe:	42a3      	cmp	r3, r4
 8006300:	d90a      	bls.n	8006318 <_free_r+0x48>
 8006302:	6821      	ldr	r1, [r4, #0]
 8006304:	1862      	adds	r2, r4, r1
 8006306:	4293      	cmp	r3, r2
 8006308:	bf01      	itttt	eq
 800630a:	681a      	ldreq	r2, [r3, #0]
 800630c:	685b      	ldreq	r3, [r3, #4]
 800630e:	1852      	addeq	r2, r2, r1
 8006310:	6022      	streq	r2, [r4, #0]
 8006312:	6063      	str	r3, [r4, #4]
 8006314:	6004      	str	r4, [r0, #0]
 8006316:	e7ed      	b.n	80062f4 <_free_r+0x24>
 8006318:	461a      	mov	r2, r3
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	b10b      	cbz	r3, 8006322 <_free_r+0x52>
 800631e:	42a3      	cmp	r3, r4
 8006320:	d9fa      	bls.n	8006318 <_free_r+0x48>
 8006322:	6811      	ldr	r1, [r2, #0]
 8006324:	1850      	adds	r0, r2, r1
 8006326:	42a0      	cmp	r0, r4
 8006328:	d10b      	bne.n	8006342 <_free_r+0x72>
 800632a:	6820      	ldr	r0, [r4, #0]
 800632c:	4401      	add	r1, r0
 800632e:	1850      	adds	r0, r2, r1
 8006330:	4283      	cmp	r3, r0
 8006332:	6011      	str	r1, [r2, #0]
 8006334:	d1de      	bne.n	80062f4 <_free_r+0x24>
 8006336:	6818      	ldr	r0, [r3, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	4401      	add	r1, r0
 800633c:	6011      	str	r1, [r2, #0]
 800633e:	6053      	str	r3, [r2, #4]
 8006340:	e7d8      	b.n	80062f4 <_free_r+0x24>
 8006342:	d902      	bls.n	800634a <_free_r+0x7a>
 8006344:	230c      	movs	r3, #12
 8006346:	602b      	str	r3, [r5, #0]
 8006348:	e7d4      	b.n	80062f4 <_free_r+0x24>
 800634a:	6820      	ldr	r0, [r4, #0]
 800634c:	1821      	adds	r1, r4, r0
 800634e:	428b      	cmp	r3, r1
 8006350:	bf01      	itttt	eq
 8006352:	6819      	ldreq	r1, [r3, #0]
 8006354:	685b      	ldreq	r3, [r3, #4]
 8006356:	1809      	addeq	r1, r1, r0
 8006358:	6021      	streq	r1, [r4, #0]
 800635a:	6063      	str	r3, [r4, #4]
 800635c:	6054      	str	r4, [r2, #4]
 800635e:	e7c9      	b.n	80062f4 <_free_r+0x24>
 8006360:	bd38      	pop	{r3, r4, r5, pc}
 8006362:	bf00      	nop
 8006364:	20000424 	.word	0x20000424

08006368 <_malloc_r>:
 8006368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636a:	1ccd      	adds	r5, r1, #3
 800636c:	f025 0503 	bic.w	r5, r5, #3
 8006370:	3508      	adds	r5, #8
 8006372:	2d0c      	cmp	r5, #12
 8006374:	bf38      	it	cc
 8006376:	250c      	movcc	r5, #12
 8006378:	2d00      	cmp	r5, #0
 800637a:	4606      	mov	r6, r0
 800637c:	db01      	blt.n	8006382 <_malloc_r+0x1a>
 800637e:	42a9      	cmp	r1, r5
 8006380:	d903      	bls.n	800638a <_malloc_r+0x22>
 8006382:	230c      	movs	r3, #12
 8006384:	6033      	str	r3, [r6, #0]
 8006386:	2000      	movs	r0, #0
 8006388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800638a:	f000 fa0f 	bl	80067ac <__malloc_lock>
 800638e:	4921      	ldr	r1, [pc, #132]	; (8006414 <_malloc_r+0xac>)
 8006390:	680a      	ldr	r2, [r1, #0]
 8006392:	4614      	mov	r4, r2
 8006394:	b99c      	cbnz	r4, 80063be <_malloc_r+0x56>
 8006396:	4f20      	ldr	r7, [pc, #128]	; (8006418 <_malloc_r+0xb0>)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	b923      	cbnz	r3, 80063a6 <_malloc_r+0x3e>
 800639c:	4621      	mov	r1, r4
 800639e:	4630      	mov	r0, r6
 80063a0:	f000 f998 	bl	80066d4 <_sbrk_r>
 80063a4:	6038      	str	r0, [r7, #0]
 80063a6:	4629      	mov	r1, r5
 80063a8:	4630      	mov	r0, r6
 80063aa:	f000 f993 	bl	80066d4 <_sbrk_r>
 80063ae:	1c43      	adds	r3, r0, #1
 80063b0:	d123      	bne.n	80063fa <_malloc_r+0x92>
 80063b2:	230c      	movs	r3, #12
 80063b4:	4630      	mov	r0, r6
 80063b6:	6033      	str	r3, [r6, #0]
 80063b8:	f000 f9fe 	bl	80067b8 <__malloc_unlock>
 80063bc:	e7e3      	b.n	8006386 <_malloc_r+0x1e>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	1b5b      	subs	r3, r3, r5
 80063c2:	d417      	bmi.n	80063f4 <_malloc_r+0x8c>
 80063c4:	2b0b      	cmp	r3, #11
 80063c6:	d903      	bls.n	80063d0 <_malloc_r+0x68>
 80063c8:	6023      	str	r3, [r4, #0]
 80063ca:	441c      	add	r4, r3
 80063cc:	6025      	str	r5, [r4, #0]
 80063ce:	e004      	b.n	80063da <_malloc_r+0x72>
 80063d0:	6863      	ldr	r3, [r4, #4]
 80063d2:	42a2      	cmp	r2, r4
 80063d4:	bf0c      	ite	eq
 80063d6:	600b      	streq	r3, [r1, #0]
 80063d8:	6053      	strne	r3, [r2, #4]
 80063da:	4630      	mov	r0, r6
 80063dc:	f000 f9ec 	bl	80067b8 <__malloc_unlock>
 80063e0:	f104 000b 	add.w	r0, r4, #11
 80063e4:	1d23      	adds	r3, r4, #4
 80063e6:	f020 0007 	bic.w	r0, r0, #7
 80063ea:	1ac2      	subs	r2, r0, r3
 80063ec:	d0cc      	beq.n	8006388 <_malloc_r+0x20>
 80063ee:	1a1b      	subs	r3, r3, r0
 80063f0:	50a3      	str	r3, [r4, r2]
 80063f2:	e7c9      	b.n	8006388 <_malloc_r+0x20>
 80063f4:	4622      	mov	r2, r4
 80063f6:	6864      	ldr	r4, [r4, #4]
 80063f8:	e7cc      	b.n	8006394 <_malloc_r+0x2c>
 80063fa:	1cc4      	adds	r4, r0, #3
 80063fc:	f024 0403 	bic.w	r4, r4, #3
 8006400:	42a0      	cmp	r0, r4
 8006402:	d0e3      	beq.n	80063cc <_malloc_r+0x64>
 8006404:	1a21      	subs	r1, r4, r0
 8006406:	4630      	mov	r0, r6
 8006408:	f000 f964 	bl	80066d4 <_sbrk_r>
 800640c:	3001      	adds	r0, #1
 800640e:	d1dd      	bne.n	80063cc <_malloc_r+0x64>
 8006410:	e7cf      	b.n	80063b2 <_malloc_r+0x4a>
 8006412:	bf00      	nop
 8006414:	20000424 	.word	0x20000424
 8006418:	20000428 	.word	0x20000428

0800641c <__ssputs_r>:
 800641c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006420:	688e      	ldr	r6, [r1, #8]
 8006422:	4682      	mov	sl, r0
 8006424:	429e      	cmp	r6, r3
 8006426:	460c      	mov	r4, r1
 8006428:	4690      	mov	r8, r2
 800642a:	461f      	mov	r7, r3
 800642c:	d838      	bhi.n	80064a0 <__ssputs_r+0x84>
 800642e:	898a      	ldrh	r2, [r1, #12]
 8006430:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006434:	d032      	beq.n	800649c <__ssputs_r+0x80>
 8006436:	6825      	ldr	r5, [r4, #0]
 8006438:	6909      	ldr	r1, [r1, #16]
 800643a:	3301      	adds	r3, #1
 800643c:	eba5 0901 	sub.w	r9, r5, r1
 8006440:	6965      	ldr	r5, [r4, #20]
 8006442:	444b      	add	r3, r9
 8006444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006448:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800644c:	106d      	asrs	r5, r5, #1
 800644e:	429d      	cmp	r5, r3
 8006450:	bf38      	it	cc
 8006452:	461d      	movcc	r5, r3
 8006454:	0553      	lsls	r3, r2, #21
 8006456:	d531      	bpl.n	80064bc <__ssputs_r+0xa0>
 8006458:	4629      	mov	r1, r5
 800645a:	f7ff ff85 	bl	8006368 <_malloc_r>
 800645e:	4606      	mov	r6, r0
 8006460:	b950      	cbnz	r0, 8006478 <__ssputs_r+0x5c>
 8006462:	230c      	movs	r3, #12
 8006464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006468:	f8ca 3000 	str.w	r3, [sl]
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006472:	81a3      	strh	r3, [r4, #12]
 8006474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006478:	464a      	mov	r2, r9
 800647a:	6921      	ldr	r1, [r4, #16]
 800647c:	f7fe f86a 	bl	8004554 <memcpy>
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648a:	81a3      	strh	r3, [r4, #12]
 800648c:	6126      	str	r6, [r4, #16]
 800648e:	444e      	add	r6, r9
 8006490:	6026      	str	r6, [r4, #0]
 8006492:	463e      	mov	r6, r7
 8006494:	6165      	str	r5, [r4, #20]
 8006496:	eba5 0509 	sub.w	r5, r5, r9
 800649a:	60a5      	str	r5, [r4, #8]
 800649c:	42be      	cmp	r6, r7
 800649e:	d900      	bls.n	80064a2 <__ssputs_r+0x86>
 80064a0:	463e      	mov	r6, r7
 80064a2:	4632      	mov	r2, r6
 80064a4:	4641      	mov	r1, r8
 80064a6:	6820      	ldr	r0, [r4, #0]
 80064a8:	f000 f966 	bl	8006778 <memmove>
 80064ac:	68a3      	ldr	r3, [r4, #8]
 80064ae:	6822      	ldr	r2, [r4, #0]
 80064b0:	1b9b      	subs	r3, r3, r6
 80064b2:	4432      	add	r2, r6
 80064b4:	2000      	movs	r0, #0
 80064b6:	60a3      	str	r3, [r4, #8]
 80064b8:	6022      	str	r2, [r4, #0]
 80064ba:	e7db      	b.n	8006474 <__ssputs_r+0x58>
 80064bc:	462a      	mov	r2, r5
 80064be:	f000 f981 	bl	80067c4 <_realloc_r>
 80064c2:	4606      	mov	r6, r0
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d1e1      	bne.n	800648c <__ssputs_r+0x70>
 80064c8:	4650      	mov	r0, sl
 80064ca:	6921      	ldr	r1, [r4, #16]
 80064cc:	f7ff ff00 	bl	80062d0 <_free_r>
 80064d0:	e7c7      	b.n	8006462 <__ssputs_r+0x46>
	...

080064d4 <_svfiprintf_r>:
 80064d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d8:	4698      	mov	r8, r3
 80064da:	898b      	ldrh	r3, [r1, #12]
 80064dc:	4607      	mov	r7, r0
 80064de:	061b      	lsls	r3, r3, #24
 80064e0:	460d      	mov	r5, r1
 80064e2:	4614      	mov	r4, r2
 80064e4:	b09d      	sub	sp, #116	; 0x74
 80064e6:	d50e      	bpl.n	8006506 <_svfiprintf_r+0x32>
 80064e8:	690b      	ldr	r3, [r1, #16]
 80064ea:	b963      	cbnz	r3, 8006506 <_svfiprintf_r+0x32>
 80064ec:	2140      	movs	r1, #64	; 0x40
 80064ee:	f7ff ff3b 	bl	8006368 <_malloc_r>
 80064f2:	6028      	str	r0, [r5, #0]
 80064f4:	6128      	str	r0, [r5, #16]
 80064f6:	b920      	cbnz	r0, 8006502 <_svfiprintf_r+0x2e>
 80064f8:	230c      	movs	r3, #12
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006500:	e0d1      	b.n	80066a6 <_svfiprintf_r+0x1d2>
 8006502:	2340      	movs	r3, #64	; 0x40
 8006504:	616b      	str	r3, [r5, #20]
 8006506:	2300      	movs	r3, #0
 8006508:	9309      	str	r3, [sp, #36]	; 0x24
 800650a:	2320      	movs	r3, #32
 800650c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006510:	2330      	movs	r3, #48	; 0x30
 8006512:	f04f 0901 	mov.w	r9, #1
 8006516:	f8cd 800c 	str.w	r8, [sp, #12]
 800651a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80066c0 <_svfiprintf_r+0x1ec>
 800651e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006522:	4623      	mov	r3, r4
 8006524:	469a      	mov	sl, r3
 8006526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800652a:	b10a      	cbz	r2, 8006530 <_svfiprintf_r+0x5c>
 800652c:	2a25      	cmp	r2, #37	; 0x25
 800652e:	d1f9      	bne.n	8006524 <_svfiprintf_r+0x50>
 8006530:	ebba 0b04 	subs.w	fp, sl, r4
 8006534:	d00b      	beq.n	800654e <_svfiprintf_r+0x7a>
 8006536:	465b      	mov	r3, fp
 8006538:	4622      	mov	r2, r4
 800653a:	4629      	mov	r1, r5
 800653c:	4638      	mov	r0, r7
 800653e:	f7ff ff6d 	bl	800641c <__ssputs_r>
 8006542:	3001      	adds	r0, #1
 8006544:	f000 80aa 	beq.w	800669c <_svfiprintf_r+0x1c8>
 8006548:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800654a:	445a      	add	r2, fp
 800654c:	9209      	str	r2, [sp, #36]	; 0x24
 800654e:	f89a 3000 	ldrb.w	r3, [sl]
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 80a2 	beq.w	800669c <_svfiprintf_r+0x1c8>
 8006558:	2300      	movs	r3, #0
 800655a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800655e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006562:	f10a 0a01 	add.w	sl, sl, #1
 8006566:	9304      	str	r3, [sp, #16]
 8006568:	9307      	str	r3, [sp, #28]
 800656a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800656e:	931a      	str	r3, [sp, #104]	; 0x68
 8006570:	4654      	mov	r4, sl
 8006572:	2205      	movs	r2, #5
 8006574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006578:	4851      	ldr	r0, [pc, #324]	; (80066c0 <_svfiprintf_r+0x1ec>)
 800657a:	f7ff fb0b 	bl	8005b94 <memchr>
 800657e:	9a04      	ldr	r2, [sp, #16]
 8006580:	b9d8      	cbnz	r0, 80065ba <_svfiprintf_r+0xe6>
 8006582:	06d0      	lsls	r0, r2, #27
 8006584:	bf44      	itt	mi
 8006586:	2320      	movmi	r3, #32
 8006588:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800658c:	0711      	lsls	r1, r2, #28
 800658e:	bf44      	itt	mi
 8006590:	232b      	movmi	r3, #43	; 0x2b
 8006592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006596:	f89a 3000 	ldrb.w	r3, [sl]
 800659a:	2b2a      	cmp	r3, #42	; 0x2a
 800659c:	d015      	beq.n	80065ca <_svfiprintf_r+0xf6>
 800659e:	4654      	mov	r4, sl
 80065a0:	2000      	movs	r0, #0
 80065a2:	f04f 0c0a 	mov.w	ip, #10
 80065a6:	9a07      	ldr	r2, [sp, #28]
 80065a8:	4621      	mov	r1, r4
 80065aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ae:	3b30      	subs	r3, #48	; 0x30
 80065b0:	2b09      	cmp	r3, #9
 80065b2:	d94e      	bls.n	8006652 <_svfiprintf_r+0x17e>
 80065b4:	b1b0      	cbz	r0, 80065e4 <_svfiprintf_r+0x110>
 80065b6:	9207      	str	r2, [sp, #28]
 80065b8:	e014      	b.n	80065e4 <_svfiprintf_r+0x110>
 80065ba:	eba0 0308 	sub.w	r3, r0, r8
 80065be:	fa09 f303 	lsl.w	r3, r9, r3
 80065c2:	4313      	orrs	r3, r2
 80065c4:	46a2      	mov	sl, r4
 80065c6:	9304      	str	r3, [sp, #16]
 80065c8:	e7d2      	b.n	8006570 <_svfiprintf_r+0x9c>
 80065ca:	9b03      	ldr	r3, [sp, #12]
 80065cc:	1d19      	adds	r1, r3, #4
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	9103      	str	r1, [sp, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	bfbb      	ittet	lt
 80065d6:	425b      	neglt	r3, r3
 80065d8:	f042 0202 	orrlt.w	r2, r2, #2
 80065dc:	9307      	strge	r3, [sp, #28]
 80065de:	9307      	strlt	r3, [sp, #28]
 80065e0:	bfb8      	it	lt
 80065e2:	9204      	strlt	r2, [sp, #16]
 80065e4:	7823      	ldrb	r3, [r4, #0]
 80065e6:	2b2e      	cmp	r3, #46	; 0x2e
 80065e8:	d10c      	bne.n	8006604 <_svfiprintf_r+0x130>
 80065ea:	7863      	ldrb	r3, [r4, #1]
 80065ec:	2b2a      	cmp	r3, #42	; 0x2a
 80065ee:	d135      	bne.n	800665c <_svfiprintf_r+0x188>
 80065f0:	9b03      	ldr	r3, [sp, #12]
 80065f2:	3402      	adds	r4, #2
 80065f4:	1d1a      	adds	r2, r3, #4
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	9203      	str	r2, [sp, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	bfb8      	it	lt
 80065fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006602:	9305      	str	r3, [sp, #20]
 8006604:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80066d0 <_svfiprintf_r+0x1fc>
 8006608:	2203      	movs	r2, #3
 800660a:	4650      	mov	r0, sl
 800660c:	7821      	ldrb	r1, [r4, #0]
 800660e:	f7ff fac1 	bl	8005b94 <memchr>
 8006612:	b140      	cbz	r0, 8006626 <_svfiprintf_r+0x152>
 8006614:	2340      	movs	r3, #64	; 0x40
 8006616:	eba0 000a 	sub.w	r0, r0, sl
 800661a:	fa03 f000 	lsl.w	r0, r3, r0
 800661e:	9b04      	ldr	r3, [sp, #16]
 8006620:	3401      	adds	r4, #1
 8006622:	4303      	orrs	r3, r0
 8006624:	9304      	str	r3, [sp, #16]
 8006626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800662a:	2206      	movs	r2, #6
 800662c:	4825      	ldr	r0, [pc, #148]	; (80066c4 <_svfiprintf_r+0x1f0>)
 800662e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006632:	f7ff faaf 	bl	8005b94 <memchr>
 8006636:	2800      	cmp	r0, #0
 8006638:	d038      	beq.n	80066ac <_svfiprintf_r+0x1d8>
 800663a:	4b23      	ldr	r3, [pc, #140]	; (80066c8 <_svfiprintf_r+0x1f4>)
 800663c:	bb1b      	cbnz	r3, 8006686 <_svfiprintf_r+0x1b2>
 800663e:	9b03      	ldr	r3, [sp, #12]
 8006640:	3307      	adds	r3, #7
 8006642:	f023 0307 	bic.w	r3, r3, #7
 8006646:	3308      	adds	r3, #8
 8006648:	9303      	str	r3, [sp, #12]
 800664a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664c:	4433      	add	r3, r6
 800664e:	9309      	str	r3, [sp, #36]	; 0x24
 8006650:	e767      	b.n	8006522 <_svfiprintf_r+0x4e>
 8006652:	460c      	mov	r4, r1
 8006654:	2001      	movs	r0, #1
 8006656:	fb0c 3202 	mla	r2, ip, r2, r3
 800665a:	e7a5      	b.n	80065a8 <_svfiprintf_r+0xd4>
 800665c:	2300      	movs	r3, #0
 800665e:	f04f 0c0a 	mov.w	ip, #10
 8006662:	4619      	mov	r1, r3
 8006664:	3401      	adds	r4, #1
 8006666:	9305      	str	r3, [sp, #20]
 8006668:	4620      	mov	r0, r4
 800666a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800666e:	3a30      	subs	r2, #48	; 0x30
 8006670:	2a09      	cmp	r2, #9
 8006672:	d903      	bls.n	800667c <_svfiprintf_r+0x1a8>
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0c5      	beq.n	8006604 <_svfiprintf_r+0x130>
 8006678:	9105      	str	r1, [sp, #20]
 800667a:	e7c3      	b.n	8006604 <_svfiprintf_r+0x130>
 800667c:	4604      	mov	r4, r0
 800667e:	2301      	movs	r3, #1
 8006680:	fb0c 2101 	mla	r1, ip, r1, r2
 8006684:	e7f0      	b.n	8006668 <_svfiprintf_r+0x194>
 8006686:	ab03      	add	r3, sp, #12
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	462a      	mov	r2, r5
 800668c:	4638      	mov	r0, r7
 800668e:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <_svfiprintf_r+0x1f8>)
 8006690:	a904      	add	r1, sp, #16
 8006692:	f7fe f813 	bl	80046bc <_printf_float>
 8006696:	1c42      	adds	r2, r0, #1
 8006698:	4606      	mov	r6, r0
 800669a:	d1d6      	bne.n	800664a <_svfiprintf_r+0x176>
 800669c:	89ab      	ldrh	r3, [r5, #12]
 800669e:	065b      	lsls	r3, r3, #25
 80066a0:	f53f af2c 	bmi.w	80064fc <_svfiprintf_r+0x28>
 80066a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066a6:	b01d      	add	sp, #116	; 0x74
 80066a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ac:	ab03      	add	r3, sp, #12
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	462a      	mov	r2, r5
 80066b2:	4638      	mov	r0, r7
 80066b4:	4b05      	ldr	r3, [pc, #20]	; (80066cc <_svfiprintf_r+0x1f8>)
 80066b6:	a904      	add	r1, sp, #16
 80066b8:	f7fe fa9c 	bl	8004bf4 <_printf_i>
 80066bc:	e7eb      	b.n	8006696 <_svfiprintf_r+0x1c2>
 80066be:	bf00      	nop
 80066c0:	0800755c 	.word	0x0800755c
 80066c4:	08007566 	.word	0x08007566
 80066c8:	080046bd 	.word	0x080046bd
 80066cc:	0800641d 	.word	0x0800641d
 80066d0:	08007562 	.word	0x08007562

080066d4 <_sbrk_r>:
 80066d4:	b538      	push	{r3, r4, r5, lr}
 80066d6:	2300      	movs	r3, #0
 80066d8:	4d05      	ldr	r5, [pc, #20]	; (80066f0 <_sbrk_r+0x1c>)
 80066da:	4604      	mov	r4, r0
 80066dc:	4608      	mov	r0, r1
 80066de:	602b      	str	r3, [r5, #0]
 80066e0:	f7fb fd2c 	bl	800213c <_sbrk>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_sbrk_r+0x1a>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_sbrk_r+0x1a>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	20000430 	.word	0x20000430

080066f4 <__assert_func>:
 80066f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066f6:	4614      	mov	r4, r2
 80066f8:	461a      	mov	r2, r3
 80066fa:	4b09      	ldr	r3, [pc, #36]	; (8006720 <__assert_func+0x2c>)
 80066fc:	4605      	mov	r5, r0
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68d8      	ldr	r0, [r3, #12]
 8006702:	b14c      	cbz	r4, 8006718 <__assert_func+0x24>
 8006704:	4b07      	ldr	r3, [pc, #28]	; (8006724 <__assert_func+0x30>)
 8006706:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800670a:	9100      	str	r1, [sp, #0]
 800670c:	462b      	mov	r3, r5
 800670e:	4906      	ldr	r1, [pc, #24]	; (8006728 <__assert_func+0x34>)
 8006710:	f000 f80e 	bl	8006730 <fiprintf>
 8006714:	f000 faa2 	bl	8006c5c <abort>
 8006718:	4b04      	ldr	r3, [pc, #16]	; (800672c <__assert_func+0x38>)
 800671a:	461c      	mov	r4, r3
 800671c:	e7f3      	b.n	8006706 <__assert_func+0x12>
 800671e:	bf00      	nop
 8006720:	2000010c 	.word	0x2000010c
 8006724:	0800756d 	.word	0x0800756d
 8006728:	0800757a 	.word	0x0800757a
 800672c:	080075a8 	.word	0x080075a8

08006730 <fiprintf>:
 8006730:	b40e      	push	{r1, r2, r3}
 8006732:	b503      	push	{r0, r1, lr}
 8006734:	4601      	mov	r1, r0
 8006736:	ab03      	add	r3, sp, #12
 8006738:	4805      	ldr	r0, [pc, #20]	; (8006750 <fiprintf+0x20>)
 800673a:	f853 2b04 	ldr.w	r2, [r3], #4
 800673e:	6800      	ldr	r0, [r0, #0]
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	f000 f88d 	bl	8006860 <_vfiprintf_r>
 8006746:	b002      	add	sp, #8
 8006748:	f85d eb04 	ldr.w	lr, [sp], #4
 800674c:	b003      	add	sp, #12
 800674e:	4770      	bx	lr
 8006750:	2000010c 	.word	0x2000010c

08006754 <__ascii_mbtowc>:
 8006754:	b082      	sub	sp, #8
 8006756:	b901      	cbnz	r1, 800675a <__ascii_mbtowc+0x6>
 8006758:	a901      	add	r1, sp, #4
 800675a:	b142      	cbz	r2, 800676e <__ascii_mbtowc+0x1a>
 800675c:	b14b      	cbz	r3, 8006772 <__ascii_mbtowc+0x1e>
 800675e:	7813      	ldrb	r3, [r2, #0]
 8006760:	600b      	str	r3, [r1, #0]
 8006762:	7812      	ldrb	r2, [r2, #0]
 8006764:	1e10      	subs	r0, r2, #0
 8006766:	bf18      	it	ne
 8006768:	2001      	movne	r0, #1
 800676a:	b002      	add	sp, #8
 800676c:	4770      	bx	lr
 800676e:	4610      	mov	r0, r2
 8006770:	e7fb      	b.n	800676a <__ascii_mbtowc+0x16>
 8006772:	f06f 0001 	mvn.w	r0, #1
 8006776:	e7f8      	b.n	800676a <__ascii_mbtowc+0x16>

08006778 <memmove>:
 8006778:	4288      	cmp	r0, r1
 800677a:	b510      	push	{r4, lr}
 800677c:	eb01 0402 	add.w	r4, r1, r2
 8006780:	d902      	bls.n	8006788 <memmove+0x10>
 8006782:	4284      	cmp	r4, r0
 8006784:	4623      	mov	r3, r4
 8006786:	d807      	bhi.n	8006798 <memmove+0x20>
 8006788:	1e43      	subs	r3, r0, #1
 800678a:	42a1      	cmp	r1, r4
 800678c:	d008      	beq.n	80067a0 <memmove+0x28>
 800678e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006796:	e7f8      	b.n	800678a <memmove+0x12>
 8006798:	4601      	mov	r1, r0
 800679a:	4402      	add	r2, r0
 800679c:	428a      	cmp	r2, r1
 800679e:	d100      	bne.n	80067a2 <memmove+0x2a>
 80067a0:	bd10      	pop	{r4, pc}
 80067a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067aa:	e7f7      	b.n	800679c <memmove+0x24>

080067ac <__malloc_lock>:
 80067ac:	4801      	ldr	r0, [pc, #4]	; (80067b4 <__malloc_lock+0x8>)
 80067ae:	f000 bc15 	b.w	8006fdc <__retarget_lock_acquire_recursive>
 80067b2:	bf00      	nop
 80067b4:	20000438 	.word	0x20000438

080067b8 <__malloc_unlock>:
 80067b8:	4801      	ldr	r0, [pc, #4]	; (80067c0 <__malloc_unlock+0x8>)
 80067ba:	f000 bc10 	b.w	8006fde <__retarget_lock_release_recursive>
 80067be:	bf00      	nop
 80067c0:	20000438 	.word	0x20000438

080067c4 <_realloc_r>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	4607      	mov	r7, r0
 80067c8:	4614      	mov	r4, r2
 80067ca:	460e      	mov	r6, r1
 80067cc:	b921      	cbnz	r1, 80067d8 <_realloc_r+0x14>
 80067ce:	4611      	mov	r1, r2
 80067d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067d4:	f7ff bdc8 	b.w	8006368 <_malloc_r>
 80067d8:	b922      	cbnz	r2, 80067e4 <_realloc_r+0x20>
 80067da:	f7ff fd79 	bl	80062d0 <_free_r>
 80067de:	4625      	mov	r5, r4
 80067e0:	4628      	mov	r0, r5
 80067e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067e4:	f000 fc60 	bl	80070a8 <_malloc_usable_size_r>
 80067e8:	42a0      	cmp	r0, r4
 80067ea:	d20f      	bcs.n	800680c <_realloc_r+0x48>
 80067ec:	4621      	mov	r1, r4
 80067ee:	4638      	mov	r0, r7
 80067f0:	f7ff fdba 	bl	8006368 <_malloc_r>
 80067f4:	4605      	mov	r5, r0
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d0f2      	beq.n	80067e0 <_realloc_r+0x1c>
 80067fa:	4631      	mov	r1, r6
 80067fc:	4622      	mov	r2, r4
 80067fe:	f7fd fea9 	bl	8004554 <memcpy>
 8006802:	4631      	mov	r1, r6
 8006804:	4638      	mov	r0, r7
 8006806:	f7ff fd63 	bl	80062d0 <_free_r>
 800680a:	e7e9      	b.n	80067e0 <_realloc_r+0x1c>
 800680c:	4635      	mov	r5, r6
 800680e:	e7e7      	b.n	80067e0 <_realloc_r+0x1c>

08006810 <__sfputc_r>:
 8006810:	6893      	ldr	r3, [r2, #8]
 8006812:	b410      	push	{r4}
 8006814:	3b01      	subs	r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	6093      	str	r3, [r2, #8]
 800681a:	da07      	bge.n	800682c <__sfputc_r+0x1c>
 800681c:	6994      	ldr	r4, [r2, #24]
 800681e:	42a3      	cmp	r3, r4
 8006820:	db01      	blt.n	8006826 <__sfputc_r+0x16>
 8006822:	290a      	cmp	r1, #10
 8006824:	d102      	bne.n	800682c <__sfputc_r+0x1c>
 8006826:	bc10      	pop	{r4}
 8006828:	f000 b94a 	b.w	8006ac0 <__swbuf_r>
 800682c:	6813      	ldr	r3, [r2, #0]
 800682e:	1c58      	adds	r0, r3, #1
 8006830:	6010      	str	r0, [r2, #0]
 8006832:	7019      	strb	r1, [r3, #0]
 8006834:	4608      	mov	r0, r1
 8006836:	bc10      	pop	{r4}
 8006838:	4770      	bx	lr

0800683a <__sfputs_r>:
 800683a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683c:	4606      	mov	r6, r0
 800683e:	460f      	mov	r7, r1
 8006840:	4614      	mov	r4, r2
 8006842:	18d5      	adds	r5, r2, r3
 8006844:	42ac      	cmp	r4, r5
 8006846:	d101      	bne.n	800684c <__sfputs_r+0x12>
 8006848:	2000      	movs	r0, #0
 800684a:	e007      	b.n	800685c <__sfputs_r+0x22>
 800684c:	463a      	mov	r2, r7
 800684e:	4630      	mov	r0, r6
 8006850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006854:	f7ff ffdc 	bl	8006810 <__sfputc_r>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d1f3      	bne.n	8006844 <__sfputs_r+0xa>
 800685c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006860 <_vfiprintf_r>:
 8006860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006864:	460d      	mov	r5, r1
 8006866:	4614      	mov	r4, r2
 8006868:	4698      	mov	r8, r3
 800686a:	4606      	mov	r6, r0
 800686c:	b09d      	sub	sp, #116	; 0x74
 800686e:	b118      	cbz	r0, 8006878 <_vfiprintf_r+0x18>
 8006870:	6983      	ldr	r3, [r0, #24]
 8006872:	b90b      	cbnz	r3, 8006878 <_vfiprintf_r+0x18>
 8006874:	f000 fb14 	bl	8006ea0 <__sinit>
 8006878:	4b89      	ldr	r3, [pc, #548]	; (8006aa0 <_vfiprintf_r+0x240>)
 800687a:	429d      	cmp	r5, r3
 800687c:	d11b      	bne.n	80068b6 <_vfiprintf_r+0x56>
 800687e:	6875      	ldr	r5, [r6, #4]
 8006880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006882:	07d9      	lsls	r1, r3, #31
 8006884:	d405      	bmi.n	8006892 <_vfiprintf_r+0x32>
 8006886:	89ab      	ldrh	r3, [r5, #12]
 8006888:	059a      	lsls	r2, r3, #22
 800688a:	d402      	bmi.n	8006892 <_vfiprintf_r+0x32>
 800688c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800688e:	f000 fba5 	bl	8006fdc <__retarget_lock_acquire_recursive>
 8006892:	89ab      	ldrh	r3, [r5, #12]
 8006894:	071b      	lsls	r3, r3, #28
 8006896:	d501      	bpl.n	800689c <_vfiprintf_r+0x3c>
 8006898:	692b      	ldr	r3, [r5, #16]
 800689a:	b9eb      	cbnz	r3, 80068d8 <_vfiprintf_r+0x78>
 800689c:	4629      	mov	r1, r5
 800689e:	4630      	mov	r0, r6
 80068a0:	f000 f96e 	bl	8006b80 <__swsetup_r>
 80068a4:	b1c0      	cbz	r0, 80068d8 <_vfiprintf_r+0x78>
 80068a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068a8:	07dc      	lsls	r4, r3, #31
 80068aa:	d50e      	bpl.n	80068ca <_vfiprintf_r+0x6a>
 80068ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068b0:	b01d      	add	sp, #116	; 0x74
 80068b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b6:	4b7b      	ldr	r3, [pc, #492]	; (8006aa4 <_vfiprintf_r+0x244>)
 80068b8:	429d      	cmp	r5, r3
 80068ba:	d101      	bne.n	80068c0 <_vfiprintf_r+0x60>
 80068bc:	68b5      	ldr	r5, [r6, #8]
 80068be:	e7df      	b.n	8006880 <_vfiprintf_r+0x20>
 80068c0:	4b79      	ldr	r3, [pc, #484]	; (8006aa8 <_vfiprintf_r+0x248>)
 80068c2:	429d      	cmp	r5, r3
 80068c4:	bf08      	it	eq
 80068c6:	68f5      	ldreq	r5, [r6, #12]
 80068c8:	e7da      	b.n	8006880 <_vfiprintf_r+0x20>
 80068ca:	89ab      	ldrh	r3, [r5, #12]
 80068cc:	0598      	lsls	r0, r3, #22
 80068ce:	d4ed      	bmi.n	80068ac <_vfiprintf_r+0x4c>
 80068d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068d2:	f000 fb84 	bl	8006fde <__retarget_lock_release_recursive>
 80068d6:	e7e9      	b.n	80068ac <_vfiprintf_r+0x4c>
 80068d8:	2300      	movs	r3, #0
 80068da:	9309      	str	r3, [sp, #36]	; 0x24
 80068dc:	2320      	movs	r3, #32
 80068de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068e2:	2330      	movs	r3, #48	; 0x30
 80068e4:	f04f 0901 	mov.w	r9, #1
 80068e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80068ec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006aac <_vfiprintf_r+0x24c>
 80068f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068f4:	4623      	mov	r3, r4
 80068f6:	469a      	mov	sl, r3
 80068f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068fc:	b10a      	cbz	r2, 8006902 <_vfiprintf_r+0xa2>
 80068fe:	2a25      	cmp	r2, #37	; 0x25
 8006900:	d1f9      	bne.n	80068f6 <_vfiprintf_r+0x96>
 8006902:	ebba 0b04 	subs.w	fp, sl, r4
 8006906:	d00b      	beq.n	8006920 <_vfiprintf_r+0xc0>
 8006908:	465b      	mov	r3, fp
 800690a:	4622      	mov	r2, r4
 800690c:	4629      	mov	r1, r5
 800690e:	4630      	mov	r0, r6
 8006910:	f7ff ff93 	bl	800683a <__sfputs_r>
 8006914:	3001      	adds	r0, #1
 8006916:	f000 80aa 	beq.w	8006a6e <_vfiprintf_r+0x20e>
 800691a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800691c:	445a      	add	r2, fp
 800691e:	9209      	str	r2, [sp, #36]	; 0x24
 8006920:	f89a 3000 	ldrb.w	r3, [sl]
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80a2 	beq.w	8006a6e <_vfiprintf_r+0x20e>
 800692a:	2300      	movs	r3, #0
 800692c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006934:	f10a 0a01 	add.w	sl, sl, #1
 8006938:	9304      	str	r3, [sp, #16]
 800693a:	9307      	str	r3, [sp, #28]
 800693c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006940:	931a      	str	r3, [sp, #104]	; 0x68
 8006942:	4654      	mov	r4, sl
 8006944:	2205      	movs	r2, #5
 8006946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800694a:	4858      	ldr	r0, [pc, #352]	; (8006aac <_vfiprintf_r+0x24c>)
 800694c:	f7ff f922 	bl	8005b94 <memchr>
 8006950:	9a04      	ldr	r2, [sp, #16]
 8006952:	b9d8      	cbnz	r0, 800698c <_vfiprintf_r+0x12c>
 8006954:	06d1      	lsls	r1, r2, #27
 8006956:	bf44      	itt	mi
 8006958:	2320      	movmi	r3, #32
 800695a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800695e:	0713      	lsls	r3, r2, #28
 8006960:	bf44      	itt	mi
 8006962:	232b      	movmi	r3, #43	; 0x2b
 8006964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006968:	f89a 3000 	ldrb.w	r3, [sl]
 800696c:	2b2a      	cmp	r3, #42	; 0x2a
 800696e:	d015      	beq.n	800699c <_vfiprintf_r+0x13c>
 8006970:	4654      	mov	r4, sl
 8006972:	2000      	movs	r0, #0
 8006974:	f04f 0c0a 	mov.w	ip, #10
 8006978:	9a07      	ldr	r2, [sp, #28]
 800697a:	4621      	mov	r1, r4
 800697c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006980:	3b30      	subs	r3, #48	; 0x30
 8006982:	2b09      	cmp	r3, #9
 8006984:	d94e      	bls.n	8006a24 <_vfiprintf_r+0x1c4>
 8006986:	b1b0      	cbz	r0, 80069b6 <_vfiprintf_r+0x156>
 8006988:	9207      	str	r2, [sp, #28]
 800698a:	e014      	b.n	80069b6 <_vfiprintf_r+0x156>
 800698c:	eba0 0308 	sub.w	r3, r0, r8
 8006990:	fa09 f303 	lsl.w	r3, r9, r3
 8006994:	4313      	orrs	r3, r2
 8006996:	46a2      	mov	sl, r4
 8006998:	9304      	str	r3, [sp, #16]
 800699a:	e7d2      	b.n	8006942 <_vfiprintf_r+0xe2>
 800699c:	9b03      	ldr	r3, [sp, #12]
 800699e:	1d19      	adds	r1, r3, #4
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	9103      	str	r1, [sp, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bfbb      	ittet	lt
 80069a8:	425b      	neglt	r3, r3
 80069aa:	f042 0202 	orrlt.w	r2, r2, #2
 80069ae:	9307      	strge	r3, [sp, #28]
 80069b0:	9307      	strlt	r3, [sp, #28]
 80069b2:	bfb8      	it	lt
 80069b4:	9204      	strlt	r2, [sp, #16]
 80069b6:	7823      	ldrb	r3, [r4, #0]
 80069b8:	2b2e      	cmp	r3, #46	; 0x2e
 80069ba:	d10c      	bne.n	80069d6 <_vfiprintf_r+0x176>
 80069bc:	7863      	ldrb	r3, [r4, #1]
 80069be:	2b2a      	cmp	r3, #42	; 0x2a
 80069c0:	d135      	bne.n	8006a2e <_vfiprintf_r+0x1ce>
 80069c2:	9b03      	ldr	r3, [sp, #12]
 80069c4:	3402      	adds	r4, #2
 80069c6:	1d1a      	adds	r2, r3, #4
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	9203      	str	r2, [sp, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bfb8      	it	lt
 80069d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80069d4:	9305      	str	r3, [sp, #20]
 80069d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006abc <_vfiprintf_r+0x25c>
 80069da:	2203      	movs	r2, #3
 80069dc:	4650      	mov	r0, sl
 80069de:	7821      	ldrb	r1, [r4, #0]
 80069e0:	f7ff f8d8 	bl	8005b94 <memchr>
 80069e4:	b140      	cbz	r0, 80069f8 <_vfiprintf_r+0x198>
 80069e6:	2340      	movs	r3, #64	; 0x40
 80069e8:	eba0 000a 	sub.w	r0, r0, sl
 80069ec:	fa03 f000 	lsl.w	r0, r3, r0
 80069f0:	9b04      	ldr	r3, [sp, #16]
 80069f2:	3401      	adds	r4, #1
 80069f4:	4303      	orrs	r3, r0
 80069f6:	9304      	str	r3, [sp, #16]
 80069f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069fc:	2206      	movs	r2, #6
 80069fe:	482c      	ldr	r0, [pc, #176]	; (8006ab0 <_vfiprintf_r+0x250>)
 8006a00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a04:	f7ff f8c6 	bl	8005b94 <memchr>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d03f      	beq.n	8006a8c <_vfiprintf_r+0x22c>
 8006a0c:	4b29      	ldr	r3, [pc, #164]	; (8006ab4 <_vfiprintf_r+0x254>)
 8006a0e:	bb1b      	cbnz	r3, 8006a58 <_vfiprintf_r+0x1f8>
 8006a10:	9b03      	ldr	r3, [sp, #12]
 8006a12:	3307      	adds	r3, #7
 8006a14:	f023 0307 	bic.w	r3, r3, #7
 8006a18:	3308      	adds	r3, #8
 8006a1a:	9303      	str	r3, [sp, #12]
 8006a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1e:	443b      	add	r3, r7
 8006a20:	9309      	str	r3, [sp, #36]	; 0x24
 8006a22:	e767      	b.n	80068f4 <_vfiprintf_r+0x94>
 8006a24:	460c      	mov	r4, r1
 8006a26:	2001      	movs	r0, #1
 8006a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a2c:	e7a5      	b.n	800697a <_vfiprintf_r+0x11a>
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f04f 0c0a 	mov.w	ip, #10
 8006a34:	4619      	mov	r1, r3
 8006a36:	3401      	adds	r4, #1
 8006a38:	9305      	str	r3, [sp, #20]
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a40:	3a30      	subs	r2, #48	; 0x30
 8006a42:	2a09      	cmp	r2, #9
 8006a44:	d903      	bls.n	8006a4e <_vfiprintf_r+0x1ee>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0c5      	beq.n	80069d6 <_vfiprintf_r+0x176>
 8006a4a:	9105      	str	r1, [sp, #20]
 8006a4c:	e7c3      	b.n	80069d6 <_vfiprintf_r+0x176>
 8006a4e:	4604      	mov	r4, r0
 8006a50:	2301      	movs	r3, #1
 8006a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a56:	e7f0      	b.n	8006a3a <_vfiprintf_r+0x1da>
 8006a58:	ab03      	add	r3, sp, #12
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	462a      	mov	r2, r5
 8006a5e:	4630      	mov	r0, r6
 8006a60:	4b15      	ldr	r3, [pc, #84]	; (8006ab8 <_vfiprintf_r+0x258>)
 8006a62:	a904      	add	r1, sp, #16
 8006a64:	f7fd fe2a 	bl	80046bc <_printf_float>
 8006a68:	4607      	mov	r7, r0
 8006a6a:	1c78      	adds	r0, r7, #1
 8006a6c:	d1d6      	bne.n	8006a1c <_vfiprintf_r+0x1bc>
 8006a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a70:	07d9      	lsls	r1, r3, #31
 8006a72:	d405      	bmi.n	8006a80 <_vfiprintf_r+0x220>
 8006a74:	89ab      	ldrh	r3, [r5, #12]
 8006a76:	059a      	lsls	r2, r3, #22
 8006a78:	d402      	bmi.n	8006a80 <_vfiprintf_r+0x220>
 8006a7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a7c:	f000 faaf 	bl	8006fde <__retarget_lock_release_recursive>
 8006a80:	89ab      	ldrh	r3, [r5, #12]
 8006a82:	065b      	lsls	r3, r3, #25
 8006a84:	f53f af12 	bmi.w	80068ac <_vfiprintf_r+0x4c>
 8006a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a8a:	e711      	b.n	80068b0 <_vfiprintf_r+0x50>
 8006a8c:	ab03      	add	r3, sp, #12
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	462a      	mov	r2, r5
 8006a92:	4630      	mov	r0, r6
 8006a94:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <_vfiprintf_r+0x258>)
 8006a96:	a904      	add	r1, sp, #16
 8006a98:	f7fe f8ac 	bl	8004bf4 <_printf_i>
 8006a9c:	e7e4      	b.n	8006a68 <_vfiprintf_r+0x208>
 8006a9e:	bf00      	nop
 8006aa0:	080076d4 	.word	0x080076d4
 8006aa4:	080076f4 	.word	0x080076f4
 8006aa8:	080076b4 	.word	0x080076b4
 8006aac:	0800755c 	.word	0x0800755c
 8006ab0:	08007566 	.word	0x08007566
 8006ab4:	080046bd 	.word	0x080046bd
 8006ab8:	0800683b 	.word	0x0800683b
 8006abc:	08007562 	.word	0x08007562

08006ac0 <__swbuf_r>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	460e      	mov	r6, r1
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	b118      	cbz	r0, 8006ad2 <__swbuf_r+0x12>
 8006aca:	6983      	ldr	r3, [r0, #24]
 8006acc:	b90b      	cbnz	r3, 8006ad2 <__swbuf_r+0x12>
 8006ace:	f000 f9e7 	bl	8006ea0 <__sinit>
 8006ad2:	4b21      	ldr	r3, [pc, #132]	; (8006b58 <__swbuf_r+0x98>)
 8006ad4:	429c      	cmp	r4, r3
 8006ad6:	d12b      	bne.n	8006b30 <__swbuf_r+0x70>
 8006ad8:	686c      	ldr	r4, [r5, #4]
 8006ada:	69a3      	ldr	r3, [r4, #24]
 8006adc:	60a3      	str	r3, [r4, #8]
 8006ade:	89a3      	ldrh	r3, [r4, #12]
 8006ae0:	071a      	lsls	r2, r3, #28
 8006ae2:	d52f      	bpl.n	8006b44 <__swbuf_r+0x84>
 8006ae4:	6923      	ldr	r3, [r4, #16]
 8006ae6:	b36b      	cbz	r3, 8006b44 <__swbuf_r+0x84>
 8006ae8:	6923      	ldr	r3, [r4, #16]
 8006aea:	6820      	ldr	r0, [r4, #0]
 8006aec:	b2f6      	uxtb	r6, r6
 8006aee:	1ac0      	subs	r0, r0, r3
 8006af0:	6963      	ldr	r3, [r4, #20]
 8006af2:	4637      	mov	r7, r6
 8006af4:	4283      	cmp	r3, r0
 8006af6:	dc04      	bgt.n	8006b02 <__swbuf_r+0x42>
 8006af8:	4621      	mov	r1, r4
 8006afa:	4628      	mov	r0, r5
 8006afc:	f000 f93c 	bl	8006d78 <_fflush_r>
 8006b00:	bb30      	cbnz	r0, 8006b50 <__swbuf_r+0x90>
 8006b02:	68a3      	ldr	r3, [r4, #8]
 8006b04:	3001      	adds	r0, #1
 8006b06:	3b01      	subs	r3, #1
 8006b08:	60a3      	str	r3, [r4, #8]
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	6022      	str	r2, [r4, #0]
 8006b10:	701e      	strb	r6, [r3, #0]
 8006b12:	6963      	ldr	r3, [r4, #20]
 8006b14:	4283      	cmp	r3, r0
 8006b16:	d004      	beq.n	8006b22 <__swbuf_r+0x62>
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	07db      	lsls	r3, r3, #31
 8006b1c:	d506      	bpl.n	8006b2c <__swbuf_r+0x6c>
 8006b1e:	2e0a      	cmp	r6, #10
 8006b20:	d104      	bne.n	8006b2c <__swbuf_r+0x6c>
 8006b22:	4621      	mov	r1, r4
 8006b24:	4628      	mov	r0, r5
 8006b26:	f000 f927 	bl	8006d78 <_fflush_r>
 8006b2a:	b988      	cbnz	r0, 8006b50 <__swbuf_r+0x90>
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b30:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <__swbuf_r+0x9c>)
 8006b32:	429c      	cmp	r4, r3
 8006b34:	d101      	bne.n	8006b3a <__swbuf_r+0x7a>
 8006b36:	68ac      	ldr	r4, [r5, #8]
 8006b38:	e7cf      	b.n	8006ada <__swbuf_r+0x1a>
 8006b3a:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <__swbuf_r+0xa0>)
 8006b3c:	429c      	cmp	r4, r3
 8006b3e:	bf08      	it	eq
 8006b40:	68ec      	ldreq	r4, [r5, #12]
 8006b42:	e7ca      	b.n	8006ada <__swbuf_r+0x1a>
 8006b44:	4621      	mov	r1, r4
 8006b46:	4628      	mov	r0, r5
 8006b48:	f000 f81a 	bl	8006b80 <__swsetup_r>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d0cb      	beq.n	8006ae8 <__swbuf_r+0x28>
 8006b50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006b54:	e7ea      	b.n	8006b2c <__swbuf_r+0x6c>
 8006b56:	bf00      	nop
 8006b58:	080076d4 	.word	0x080076d4
 8006b5c:	080076f4 	.word	0x080076f4
 8006b60:	080076b4 	.word	0x080076b4

08006b64 <__ascii_wctomb>:
 8006b64:	4603      	mov	r3, r0
 8006b66:	4608      	mov	r0, r1
 8006b68:	b141      	cbz	r1, 8006b7c <__ascii_wctomb+0x18>
 8006b6a:	2aff      	cmp	r2, #255	; 0xff
 8006b6c:	d904      	bls.n	8006b78 <__ascii_wctomb+0x14>
 8006b6e:	228a      	movs	r2, #138	; 0x8a
 8006b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	4770      	bx	lr
 8006b78:	2001      	movs	r0, #1
 8006b7a:	700a      	strb	r2, [r1, #0]
 8006b7c:	4770      	bx	lr
	...

08006b80 <__swsetup_r>:
 8006b80:	4b32      	ldr	r3, [pc, #200]	; (8006c4c <__swsetup_r+0xcc>)
 8006b82:	b570      	push	{r4, r5, r6, lr}
 8006b84:	681d      	ldr	r5, [r3, #0]
 8006b86:	4606      	mov	r6, r0
 8006b88:	460c      	mov	r4, r1
 8006b8a:	b125      	cbz	r5, 8006b96 <__swsetup_r+0x16>
 8006b8c:	69ab      	ldr	r3, [r5, #24]
 8006b8e:	b913      	cbnz	r3, 8006b96 <__swsetup_r+0x16>
 8006b90:	4628      	mov	r0, r5
 8006b92:	f000 f985 	bl	8006ea0 <__sinit>
 8006b96:	4b2e      	ldr	r3, [pc, #184]	; (8006c50 <__swsetup_r+0xd0>)
 8006b98:	429c      	cmp	r4, r3
 8006b9a:	d10f      	bne.n	8006bbc <__swsetup_r+0x3c>
 8006b9c:	686c      	ldr	r4, [r5, #4]
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ba4:	0719      	lsls	r1, r3, #28
 8006ba6:	d42c      	bmi.n	8006c02 <__swsetup_r+0x82>
 8006ba8:	06dd      	lsls	r5, r3, #27
 8006baa:	d411      	bmi.n	8006bd0 <__swsetup_r+0x50>
 8006bac:	2309      	movs	r3, #9
 8006bae:	6033      	str	r3, [r6, #0]
 8006bb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bb8:	81a3      	strh	r3, [r4, #12]
 8006bba:	e03e      	b.n	8006c3a <__swsetup_r+0xba>
 8006bbc:	4b25      	ldr	r3, [pc, #148]	; (8006c54 <__swsetup_r+0xd4>)
 8006bbe:	429c      	cmp	r4, r3
 8006bc0:	d101      	bne.n	8006bc6 <__swsetup_r+0x46>
 8006bc2:	68ac      	ldr	r4, [r5, #8]
 8006bc4:	e7eb      	b.n	8006b9e <__swsetup_r+0x1e>
 8006bc6:	4b24      	ldr	r3, [pc, #144]	; (8006c58 <__swsetup_r+0xd8>)
 8006bc8:	429c      	cmp	r4, r3
 8006bca:	bf08      	it	eq
 8006bcc:	68ec      	ldreq	r4, [r5, #12]
 8006bce:	e7e6      	b.n	8006b9e <__swsetup_r+0x1e>
 8006bd0:	0758      	lsls	r0, r3, #29
 8006bd2:	d512      	bpl.n	8006bfa <__swsetup_r+0x7a>
 8006bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bd6:	b141      	cbz	r1, 8006bea <__swsetup_r+0x6a>
 8006bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bdc:	4299      	cmp	r1, r3
 8006bde:	d002      	beq.n	8006be6 <__swsetup_r+0x66>
 8006be0:	4630      	mov	r0, r6
 8006be2:	f7ff fb75 	bl	80062d0 <_free_r>
 8006be6:	2300      	movs	r3, #0
 8006be8:	6363      	str	r3, [r4, #52]	; 0x34
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006bf0:	81a3      	strh	r3, [r4, #12]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	6063      	str	r3, [r4, #4]
 8006bf6:	6923      	ldr	r3, [r4, #16]
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	89a3      	ldrh	r3, [r4, #12]
 8006bfc:	f043 0308 	orr.w	r3, r3, #8
 8006c00:	81a3      	strh	r3, [r4, #12]
 8006c02:	6923      	ldr	r3, [r4, #16]
 8006c04:	b94b      	cbnz	r3, 8006c1a <__swsetup_r+0x9a>
 8006c06:	89a3      	ldrh	r3, [r4, #12]
 8006c08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c10:	d003      	beq.n	8006c1a <__swsetup_r+0x9a>
 8006c12:	4621      	mov	r1, r4
 8006c14:	4630      	mov	r0, r6
 8006c16:	f000 fa07 	bl	8007028 <__smakebuf_r>
 8006c1a:	89a0      	ldrh	r0, [r4, #12]
 8006c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c20:	f010 0301 	ands.w	r3, r0, #1
 8006c24:	d00a      	beq.n	8006c3c <__swsetup_r+0xbc>
 8006c26:	2300      	movs	r3, #0
 8006c28:	60a3      	str	r3, [r4, #8]
 8006c2a:	6963      	ldr	r3, [r4, #20]
 8006c2c:	425b      	negs	r3, r3
 8006c2e:	61a3      	str	r3, [r4, #24]
 8006c30:	6923      	ldr	r3, [r4, #16]
 8006c32:	b943      	cbnz	r3, 8006c46 <__swsetup_r+0xc6>
 8006c34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c38:	d1ba      	bne.n	8006bb0 <__swsetup_r+0x30>
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
 8006c3c:	0781      	lsls	r1, r0, #30
 8006c3e:	bf58      	it	pl
 8006c40:	6963      	ldrpl	r3, [r4, #20]
 8006c42:	60a3      	str	r3, [r4, #8]
 8006c44:	e7f4      	b.n	8006c30 <__swsetup_r+0xb0>
 8006c46:	2000      	movs	r0, #0
 8006c48:	e7f7      	b.n	8006c3a <__swsetup_r+0xba>
 8006c4a:	bf00      	nop
 8006c4c:	2000010c 	.word	0x2000010c
 8006c50:	080076d4 	.word	0x080076d4
 8006c54:	080076f4 	.word	0x080076f4
 8006c58:	080076b4 	.word	0x080076b4

08006c5c <abort>:
 8006c5c:	2006      	movs	r0, #6
 8006c5e:	b508      	push	{r3, lr}
 8006c60:	f000 fa52 	bl	8007108 <raise>
 8006c64:	2001      	movs	r0, #1
 8006c66:	f7fb f9f6 	bl	8002056 <_exit>
	...

08006c6c <__sflush_r>:
 8006c6c:	898a      	ldrh	r2, [r1, #12]
 8006c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c72:	4605      	mov	r5, r0
 8006c74:	0710      	lsls	r0, r2, #28
 8006c76:	460c      	mov	r4, r1
 8006c78:	d458      	bmi.n	8006d2c <__sflush_r+0xc0>
 8006c7a:	684b      	ldr	r3, [r1, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dc05      	bgt.n	8006c8c <__sflush_r+0x20>
 8006c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	dc02      	bgt.n	8006c8c <__sflush_r+0x20>
 8006c86:	2000      	movs	r0, #0
 8006c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c8e:	2e00      	cmp	r6, #0
 8006c90:	d0f9      	beq.n	8006c86 <__sflush_r+0x1a>
 8006c92:	2300      	movs	r3, #0
 8006c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c98:	682f      	ldr	r7, [r5, #0]
 8006c9a:	602b      	str	r3, [r5, #0]
 8006c9c:	d032      	beq.n	8006d04 <__sflush_r+0x98>
 8006c9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	075a      	lsls	r2, r3, #29
 8006ca4:	d505      	bpl.n	8006cb2 <__sflush_r+0x46>
 8006ca6:	6863      	ldr	r3, [r4, #4]
 8006ca8:	1ac0      	subs	r0, r0, r3
 8006caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cac:	b10b      	cbz	r3, 8006cb2 <__sflush_r+0x46>
 8006cae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cb0:	1ac0      	subs	r0, r0, r3
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cb8:	4628      	mov	r0, r5
 8006cba:	6a21      	ldr	r1, [r4, #32]
 8006cbc:	47b0      	blx	r6
 8006cbe:	1c43      	adds	r3, r0, #1
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	d106      	bne.n	8006cd2 <__sflush_r+0x66>
 8006cc4:	6829      	ldr	r1, [r5, #0]
 8006cc6:	291d      	cmp	r1, #29
 8006cc8:	d82c      	bhi.n	8006d24 <__sflush_r+0xb8>
 8006cca:	4a2a      	ldr	r2, [pc, #168]	; (8006d74 <__sflush_r+0x108>)
 8006ccc:	40ca      	lsrs	r2, r1
 8006cce:	07d6      	lsls	r6, r2, #31
 8006cd0:	d528      	bpl.n	8006d24 <__sflush_r+0xb8>
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	6062      	str	r2, [r4, #4]
 8006cd6:	6922      	ldr	r2, [r4, #16]
 8006cd8:	04d9      	lsls	r1, r3, #19
 8006cda:	6022      	str	r2, [r4, #0]
 8006cdc:	d504      	bpl.n	8006ce8 <__sflush_r+0x7c>
 8006cde:	1c42      	adds	r2, r0, #1
 8006ce0:	d101      	bne.n	8006ce6 <__sflush_r+0x7a>
 8006ce2:	682b      	ldr	r3, [r5, #0]
 8006ce4:	b903      	cbnz	r3, 8006ce8 <__sflush_r+0x7c>
 8006ce6:	6560      	str	r0, [r4, #84]	; 0x54
 8006ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cea:	602f      	str	r7, [r5, #0]
 8006cec:	2900      	cmp	r1, #0
 8006cee:	d0ca      	beq.n	8006c86 <__sflush_r+0x1a>
 8006cf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cf4:	4299      	cmp	r1, r3
 8006cf6:	d002      	beq.n	8006cfe <__sflush_r+0x92>
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	f7ff fae9 	bl	80062d0 <_free_r>
 8006cfe:	2000      	movs	r0, #0
 8006d00:	6360      	str	r0, [r4, #52]	; 0x34
 8006d02:	e7c1      	b.n	8006c88 <__sflush_r+0x1c>
 8006d04:	6a21      	ldr	r1, [r4, #32]
 8006d06:	2301      	movs	r3, #1
 8006d08:	4628      	mov	r0, r5
 8006d0a:	47b0      	blx	r6
 8006d0c:	1c41      	adds	r1, r0, #1
 8006d0e:	d1c7      	bne.n	8006ca0 <__sflush_r+0x34>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0c4      	beq.n	8006ca0 <__sflush_r+0x34>
 8006d16:	2b1d      	cmp	r3, #29
 8006d18:	d001      	beq.n	8006d1e <__sflush_r+0xb2>
 8006d1a:	2b16      	cmp	r3, #22
 8006d1c:	d101      	bne.n	8006d22 <__sflush_r+0xb6>
 8006d1e:	602f      	str	r7, [r5, #0]
 8006d20:	e7b1      	b.n	8006c86 <__sflush_r+0x1a>
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d28:	81a3      	strh	r3, [r4, #12]
 8006d2a:	e7ad      	b.n	8006c88 <__sflush_r+0x1c>
 8006d2c:	690f      	ldr	r7, [r1, #16]
 8006d2e:	2f00      	cmp	r7, #0
 8006d30:	d0a9      	beq.n	8006c86 <__sflush_r+0x1a>
 8006d32:	0793      	lsls	r3, r2, #30
 8006d34:	bf18      	it	ne
 8006d36:	2300      	movne	r3, #0
 8006d38:	680e      	ldr	r6, [r1, #0]
 8006d3a:	bf08      	it	eq
 8006d3c:	694b      	ldreq	r3, [r1, #20]
 8006d3e:	eba6 0807 	sub.w	r8, r6, r7
 8006d42:	600f      	str	r7, [r1, #0]
 8006d44:	608b      	str	r3, [r1, #8]
 8006d46:	f1b8 0f00 	cmp.w	r8, #0
 8006d4a:	dd9c      	ble.n	8006c86 <__sflush_r+0x1a>
 8006d4c:	4643      	mov	r3, r8
 8006d4e:	463a      	mov	r2, r7
 8006d50:	4628      	mov	r0, r5
 8006d52:	6a21      	ldr	r1, [r4, #32]
 8006d54:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d56:	47b0      	blx	r6
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	dc06      	bgt.n	8006d6a <__sflush_r+0xfe>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d66:	81a3      	strh	r3, [r4, #12]
 8006d68:	e78e      	b.n	8006c88 <__sflush_r+0x1c>
 8006d6a:	4407      	add	r7, r0
 8006d6c:	eba8 0800 	sub.w	r8, r8, r0
 8006d70:	e7e9      	b.n	8006d46 <__sflush_r+0xda>
 8006d72:	bf00      	nop
 8006d74:	20400001 	.word	0x20400001

08006d78 <_fflush_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	690b      	ldr	r3, [r1, #16]
 8006d7c:	4605      	mov	r5, r0
 8006d7e:	460c      	mov	r4, r1
 8006d80:	b913      	cbnz	r3, 8006d88 <_fflush_r+0x10>
 8006d82:	2500      	movs	r5, #0
 8006d84:	4628      	mov	r0, r5
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	b118      	cbz	r0, 8006d92 <_fflush_r+0x1a>
 8006d8a:	6983      	ldr	r3, [r0, #24]
 8006d8c:	b90b      	cbnz	r3, 8006d92 <_fflush_r+0x1a>
 8006d8e:	f000 f887 	bl	8006ea0 <__sinit>
 8006d92:	4b14      	ldr	r3, [pc, #80]	; (8006de4 <_fflush_r+0x6c>)
 8006d94:	429c      	cmp	r4, r3
 8006d96:	d11b      	bne.n	8006dd0 <_fflush_r+0x58>
 8006d98:	686c      	ldr	r4, [r5, #4]
 8006d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d0ef      	beq.n	8006d82 <_fflush_r+0xa>
 8006da2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006da4:	07d0      	lsls	r0, r2, #31
 8006da6:	d404      	bmi.n	8006db2 <_fflush_r+0x3a>
 8006da8:	0599      	lsls	r1, r3, #22
 8006daa:	d402      	bmi.n	8006db2 <_fflush_r+0x3a>
 8006dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dae:	f000 f915 	bl	8006fdc <__retarget_lock_acquire_recursive>
 8006db2:	4628      	mov	r0, r5
 8006db4:	4621      	mov	r1, r4
 8006db6:	f7ff ff59 	bl	8006c6c <__sflush_r>
 8006dba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dbc:	4605      	mov	r5, r0
 8006dbe:	07da      	lsls	r2, r3, #31
 8006dc0:	d4e0      	bmi.n	8006d84 <_fflush_r+0xc>
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	059b      	lsls	r3, r3, #22
 8006dc6:	d4dd      	bmi.n	8006d84 <_fflush_r+0xc>
 8006dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dca:	f000 f908 	bl	8006fde <__retarget_lock_release_recursive>
 8006dce:	e7d9      	b.n	8006d84 <_fflush_r+0xc>
 8006dd0:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <_fflush_r+0x70>)
 8006dd2:	429c      	cmp	r4, r3
 8006dd4:	d101      	bne.n	8006dda <_fflush_r+0x62>
 8006dd6:	68ac      	ldr	r4, [r5, #8]
 8006dd8:	e7df      	b.n	8006d9a <_fflush_r+0x22>
 8006dda:	4b04      	ldr	r3, [pc, #16]	; (8006dec <_fflush_r+0x74>)
 8006ddc:	429c      	cmp	r4, r3
 8006dde:	bf08      	it	eq
 8006de0:	68ec      	ldreq	r4, [r5, #12]
 8006de2:	e7da      	b.n	8006d9a <_fflush_r+0x22>
 8006de4:	080076d4 	.word	0x080076d4
 8006de8:	080076f4 	.word	0x080076f4
 8006dec:	080076b4 	.word	0x080076b4

08006df0 <std>:
 8006df0:	2300      	movs	r3, #0
 8006df2:	b510      	push	{r4, lr}
 8006df4:	4604      	mov	r4, r0
 8006df6:	e9c0 3300 	strd	r3, r3, [r0]
 8006dfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dfe:	6083      	str	r3, [r0, #8]
 8006e00:	8181      	strh	r1, [r0, #12]
 8006e02:	6643      	str	r3, [r0, #100]	; 0x64
 8006e04:	81c2      	strh	r2, [r0, #14]
 8006e06:	6183      	str	r3, [r0, #24]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	2208      	movs	r2, #8
 8006e0c:	305c      	adds	r0, #92	; 0x5c
 8006e0e:	f7fd fbaf 	bl	8004570 <memset>
 8006e12:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <std+0x38>)
 8006e14:	6224      	str	r4, [r4, #32]
 8006e16:	6263      	str	r3, [r4, #36]	; 0x24
 8006e18:	4b04      	ldr	r3, [pc, #16]	; (8006e2c <std+0x3c>)
 8006e1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e1c:	4b04      	ldr	r3, [pc, #16]	; (8006e30 <std+0x40>)
 8006e1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e20:	4b04      	ldr	r3, [pc, #16]	; (8006e34 <std+0x44>)
 8006e22:	6323      	str	r3, [r4, #48]	; 0x30
 8006e24:	bd10      	pop	{r4, pc}
 8006e26:	bf00      	nop
 8006e28:	08007141 	.word	0x08007141
 8006e2c:	08007163 	.word	0x08007163
 8006e30:	0800719b 	.word	0x0800719b
 8006e34:	080071bf 	.word	0x080071bf

08006e38 <_cleanup_r>:
 8006e38:	4901      	ldr	r1, [pc, #4]	; (8006e40 <_cleanup_r+0x8>)
 8006e3a:	f000 b8af 	b.w	8006f9c <_fwalk_reent>
 8006e3e:	bf00      	nop
 8006e40:	08006d79 	.word	0x08006d79

08006e44 <__sfmoreglue>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	2568      	movs	r5, #104	; 0x68
 8006e48:	1e4a      	subs	r2, r1, #1
 8006e4a:	4355      	muls	r5, r2
 8006e4c:	460e      	mov	r6, r1
 8006e4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e52:	f7ff fa89 	bl	8006368 <_malloc_r>
 8006e56:	4604      	mov	r4, r0
 8006e58:	b140      	cbz	r0, 8006e6c <__sfmoreglue+0x28>
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	e9c0 1600 	strd	r1, r6, [r0]
 8006e60:	300c      	adds	r0, #12
 8006e62:	60a0      	str	r0, [r4, #8]
 8006e64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e68:	f7fd fb82 	bl	8004570 <memset>
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	bd70      	pop	{r4, r5, r6, pc}

08006e70 <__sfp_lock_acquire>:
 8006e70:	4801      	ldr	r0, [pc, #4]	; (8006e78 <__sfp_lock_acquire+0x8>)
 8006e72:	f000 b8b3 	b.w	8006fdc <__retarget_lock_acquire_recursive>
 8006e76:	bf00      	nop
 8006e78:	2000043c 	.word	0x2000043c

08006e7c <__sfp_lock_release>:
 8006e7c:	4801      	ldr	r0, [pc, #4]	; (8006e84 <__sfp_lock_release+0x8>)
 8006e7e:	f000 b8ae 	b.w	8006fde <__retarget_lock_release_recursive>
 8006e82:	bf00      	nop
 8006e84:	2000043c 	.word	0x2000043c

08006e88 <__sinit_lock_acquire>:
 8006e88:	4801      	ldr	r0, [pc, #4]	; (8006e90 <__sinit_lock_acquire+0x8>)
 8006e8a:	f000 b8a7 	b.w	8006fdc <__retarget_lock_acquire_recursive>
 8006e8e:	bf00      	nop
 8006e90:	20000437 	.word	0x20000437

08006e94 <__sinit_lock_release>:
 8006e94:	4801      	ldr	r0, [pc, #4]	; (8006e9c <__sinit_lock_release+0x8>)
 8006e96:	f000 b8a2 	b.w	8006fde <__retarget_lock_release_recursive>
 8006e9a:	bf00      	nop
 8006e9c:	20000437 	.word	0x20000437

08006ea0 <__sinit>:
 8006ea0:	b510      	push	{r4, lr}
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	f7ff fff0 	bl	8006e88 <__sinit_lock_acquire>
 8006ea8:	69a3      	ldr	r3, [r4, #24]
 8006eaa:	b11b      	cbz	r3, 8006eb4 <__sinit+0x14>
 8006eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb0:	f7ff bff0 	b.w	8006e94 <__sinit_lock_release>
 8006eb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006eb8:	6523      	str	r3, [r4, #80]	; 0x50
 8006eba:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <__sinit+0x68>)
 8006ebc:	4a13      	ldr	r2, [pc, #76]	; (8006f0c <__sinit+0x6c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ec2:	42a3      	cmp	r3, r4
 8006ec4:	bf08      	it	eq
 8006ec6:	2301      	moveq	r3, #1
 8006ec8:	4620      	mov	r0, r4
 8006eca:	bf08      	it	eq
 8006ecc:	61a3      	streq	r3, [r4, #24]
 8006ece:	f000 f81f 	bl	8006f10 <__sfp>
 8006ed2:	6060      	str	r0, [r4, #4]
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f000 f81b 	bl	8006f10 <__sfp>
 8006eda:	60a0      	str	r0, [r4, #8]
 8006edc:	4620      	mov	r0, r4
 8006ede:	f000 f817 	bl	8006f10 <__sfp>
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2104      	movs	r1, #4
 8006ee6:	60e0      	str	r0, [r4, #12]
 8006ee8:	6860      	ldr	r0, [r4, #4]
 8006eea:	f7ff ff81 	bl	8006df0 <std>
 8006eee:	2201      	movs	r2, #1
 8006ef0:	2109      	movs	r1, #9
 8006ef2:	68a0      	ldr	r0, [r4, #8]
 8006ef4:	f7ff ff7c 	bl	8006df0 <std>
 8006ef8:	2202      	movs	r2, #2
 8006efa:	2112      	movs	r1, #18
 8006efc:	68e0      	ldr	r0, [r4, #12]
 8006efe:	f7ff ff77 	bl	8006df0 <std>
 8006f02:	2301      	movs	r3, #1
 8006f04:	61a3      	str	r3, [r4, #24]
 8006f06:	e7d1      	b.n	8006eac <__sinit+0xc>
 8006f08:	08007330 	.word	0x08007330
 8006f0c:	08006e39 	.word	0x08006e39

08006f10 <__sfp>:
 8006f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f12:	4607      	mov	r7, r0
 8006f14:	f7ff ffac 	bl	8006e70 <__sfp_lock_acquire>
 8006f18:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <__sfp+0x84>)
 8006f1a:	681e      	ldr	r6, [r3, #0]
 8006f1c:	69b3      	ldr	r3, [r6, #24]
 8006f1e:	b913      	cbnz	r3, 8006f26 <__sfp+0x16>
 8006f20:	4630      	mov	r0, r6
 8006f22:	f7ff ffbd 	bl	8006ea0 <__sinit>
 8006f26:	3648      	adds	r6, #72	; 0x48
 8006f28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	d503      	bpl.n	8006f38 <__sfp+0x28>
 8006f30:	6833      	ldr	r3, [r6, #0]
 8006f32:	b30b      	cbz	r3, 8006f78 <__sfp+0x68>
 8006f34:	6836      	ldr	r6, [r6, #0]
 8006f36:	e7f7      	b.n	8006f28 <__sfp+0x18>
 8006f38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f3c:	b9d5      	cbnz	r5, 8006f74 <__sfp+0x64>
 8006f3e:	4b16      	ldr	r3, [pc, #88]	; (8006f98 <__sfp+0x88>)
 8006f40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f44:	60e3      	str	r3, [r4, #12]
 8006f46:	6665      	str	r5, [r4, #100]	; 0x64
 8006f48:	f000 f847 	bl	8006fda <__retarget_lock_init_recursive>
 8006f4c:	f7ff ff96 	bl	8006e7c <__sfp_lock_release>
 8006f50:	2208      	movs	r2, #8
 8006f52:	4629      	mov	r1, r5
 8006f54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f5c:	6025      	str	r5, [r4, #0]
 8006f5e:	61a5      	str	r5, [r4, #24]
 8006f60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f64:	f7fd fb04 	bl	8004570 <memset>
 8006f68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f70:	4620      	mov	r0, r4
 8006f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f74:	3468      	adds	r4, #104	; 0x68
 8006f76:	e7d9      	b.n	8006f2c <__sfp+0x1c>
 8006f78:	2104      	movs	r1, #4
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	f7ff ff62 	bl	8006e44 <__sfmoreglue>
 8006f80:	4604      	mov	r4, r0
 8006f82:	6030      	str	r0, [r6, #0]
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d1d5      	bne.n	8006f34 <__sfp+0x24>
 8006f88:	f7ff ff78 	bl	8006e7c <__sfp_lock_release>
 8006f8c:	230c      	movs	r3, #12
 8006f8e:	603b      	str	r3, [r7, #0]
 8006f90:	e7ee      	b.n	8006f70 <__sfp+0x60>
 8006f92:	bf00      	nop
 8006f94:	08007330 	.word	0x08007330
 8006f98:	ffff0001 	.word	0xffff0001

08006f9c <_fwalk_reent>:
 8006f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	4688      	mov	r8, r1
 8006fa4:	2700      	movs	r7, #0
 8006fa6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006faa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fae:	f1b9 0901 	subs.w	r9, r9, #1
 8006fb2:	d505      	bpl.n	8006fc0 <_fwalk_reent+0x24>
 8006fb4:	6824      	ldr	r4, [r4, #0]
 8006fb6:	2c00      	cmp	r4, #0
 8006fb8:	d1f7      	bne.n	8006faa <_fwalk_reent+0xe>
 8006fba:	4638      	mov	r0, r7
 8006fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fc0:	89ab      	ldrh	r3, [r5, #12]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d907      	bls.n	8006fd6 <_fwalk_reent+0x3a>
 8006fc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	d003      	beq.n	8006fd6 <_fwalk_reent+0x3a>
 8006fce:	4629      	mov	r1, r5
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	47c0      	blx	r8
 8006fd4:	4307      	orrs	r7, r0
 8006fd6:	3568      	adds	r5, #104	; 0x68
 8006fd8:	e7e9      	b.n	8006fae <_fwalk_reent+0x12>

08006fda <__retarget_lock_init_recursive>:
 8006fda:	4770      	bx	lr

08006fdc <__retarget_lock_acquire_recursive>:
 8006fdc:	4770      	bx	lr

08006fde <__retarget_lock_release_recursive>:
 8006fde:	4770      	bx	lr

08006fe0 <__swhatbuf_r>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	460e      	mov	r6, r1
 8006fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe8:	4614      	mov	r4, r2
 8006fea:	2900      	cmp	r1, #0
 8006fec:	461d      	mov	r5, r3
 8006fee:	b096      	sub	sp, #88	; 0x58
 8006ff0:	da07      	bge.n	8007002 <__swhatbuf_r+0x22>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	602b      	str	r3, [r5, #0]
 8006ff6:	89b3      	ldrh	r3, [r6, #12]
 8006ff8:	061a      	lsls	r2, r3, #24
 8006ffa:	d410      	bmi.n	800701e <__swhatbuf_r+0x3e>
 8006ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007000:	e00e      	b.n	8007020 <__swhatbuf_r+0x40>
 8007002:	466a      	mov	r2, sp
 8007004:	f000 f902 	bl	800720c <_fstat_r>
 8007008:	2800      	cmp	r0, #0
 800700a:	dbf2      	blt.n	8006ff2 <__swhatbuf_r+0x12>
 800700c:	9a01      	ldr	r2, [sp, #4]
 800700e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007012:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007016:	425a      	negs	r2, r3
 8007018:	415a      	adcs	r2, r3
 800701a:	602a      	str	r2, [r5, #0]
 800701c:	e7ee      	b.n	8006ffc <__swhatbuf_r+0x1c>
 800701e:	2340      	movs	r3, #64	; 0x40
 8007020:	2000      	movs	r0, #0
 8007022:	6023      	str	r3, [r4, #0]
 8007024:	b016      	add	sp, #88	; 0x58
 8007026:	bd70      	pop	{r4, r5, r6, pc}

08007028 <__smakebuf_r>:
 8007028:	898b      	ldrh	r3, [r1, #12]
 800702a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800702c:	079d      	lsls	r5, r3, #30
 800702e:	4606      	mov	r6, r0
 8007030:	460c      	mov	r4, r1
 8007032:	d507      	bpl.n	8007044 <__smakebuf_r+0x1c>
 8007034:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	6123      	str	r3, [r4, #16]
 800703c:	2301      	movs	r3, #1
 800703e:	6163      	str	r3, [r4, #20]
 8007040:	b002      	add	sp, #8
 8007042:	bd70      	pop	{r4, r5, r6, pc}
 8007044:	466a      	mov	r2, sp
 8007046:	ab01      	add	r3, sp, #4
 8007048:	f7ff ffca 	bl	8006fe0 <__swhatbuf_r>
 800704c:	9900      	ldr	r1, [sp, #0]
 800704e:	4605      	mov	r5, r0
 8007050:	4630      	mov	r0, r6
 8007052:	f7ff f989 	bl	8006368 <_malloc_r>
 8007056:	b948      	cbnz	r0, 800706c <__smakebuf_r+0x44>
 8007058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800705c:	059a      	lsls	r2, r3, #22
 800705e:	d4ef      	bmi.n	8007040 <__smakebuf_r+0x18>
 8007060:	f023 0303 	bic.w	r3, r3, #3
 8007064:	f043 0302 	orr.w	r3, r3, #2
 8007068:	81a3      	strh	r3, [r4, #12]
 800706a:	e7e3      	b.n	8007034 <__smakebuf_r+0xc>
 800706c:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <__smakebuf_r+0x7c>)
 800706e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	6020      	str	r0, [r4, #0]
 8007074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007078:	81a3      	strh	r3, [r4, #12]
 800707a:	9b00      	ldr	r3, [sp, #0]
 800707c:	6120      	str	r0, [r4, #16]
 800707e:	6163      	str	r3, [r4, #20]
 8007080:	9b01      	ldr	r3, [sp, #4]
 8007082:	b15b      	cbz	r3, 800709c <__smakebuf_r+0x74>
 8007084:	4630      	mov	r0, r6
 8007086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800708a:	f000 f8d1 	bl	8007230 <_isatty_r>
 800708e:	b128      	cbz	r0, 800709c <__smakebuf_r+0x74>
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	f023 0303 	bic.w	r3, r3, #3
 8007096:	f043 0301 	orr.w	r3, r3, #1
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	89a0      	ldrh	r0, [r4, #12]
 800709e:	4305      	orrs	r5, r0
 80070a0:	81a5      	strh	r5, [r4, #12]
 80070a2:	e7cd      	b.n	8007040 <__smakebuf_r+0x18>
 80070a4:	08006e39 	.word	0x08006e39

080070a8 <_malloc_usable_size_r>:
 80070a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ac:	1f18      	subs	r0, r3, #4
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	bfbc      	itt	lt
 80070b2:	580b      	ldrlt	r3, [r1, r0]
 80070b4:	18c0      	addlt	r0, r0, r3
 80070b6:	4770      	bx	lr

080070b8 <_raise_r>:
 80070b8:	291f      	cmp	r1, #31
 80070ba:	b538      	push	{r3, r4, r5, lr}
 80070bc:	4604      	mov	r4, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	d904      	bls.n	80070cc <_raise_r+0x14>
 80070c2:	2316      	movs	r3, #22
 80070c4:	6003      	str	r3, [r0, #0]
 80070c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070ce:	b112      	cbz	r2, 80070d6 <_raise_r+0x1e>
 80070d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070d4:	b94b      	cbnz	r3, 80070ea <_raise_r+0x32>
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 f830 	bl	800713c <_getpid_r>
 80070dc:	462a      	mov	r2, r5
 80070de:	4601      	mov	r1, r0
 80070e0:	4620      	mov	r0, r4
 80070e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070e6:	f000 b817 	b.w	8007118 <_kill_r>
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d00a      	beq.n	8007104 <_raise_r+0x4c>
 80070ee:	1c59      	adds	r1, r3, #1
 80070f0:	d103      	bne.n	80070fa <_raise_r+0x42>
 80070f2:	2316      	movs	r3, #22
 80070f4:	6003      	str	r3, [r0, #0]
 80070f6:	2001      	movs	r0, #1
 80070f8:	e7e7      	b.n	80070ca <_raise_r+0x12>
 80070fa:	2400      	movs	r4, #0
 80070fc:	4628      	mov	r0, r5
 80070fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007102:	4798      	blx	r3
 8007104:	2000      	movs	r0, #0
 8007106:	e7e0      	b.n	80070ca <_raise_r+0x12>

08007108 <raise>:
 8007108:	4b02      	ldr	r3, [pc, #8]	; (8007114 <raise+0xc>)
 800710a:	4601      	mov	r1, r0
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	f7ff bfd3 	b.w	80070b8 <_raise_r>
 8007112:	bf00      	nop
 8007114:	2000010c 	.word	0x2000010c

08007118 <_kill_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	2300      	movs	r3, #0
 800711c:	4d06      	ldr	r5, [pc, #24]	; (8007138 <_kill_r+0x20>)
 800711e:	4604      	mov	r4, r0
 8007120:	4608      	mov	r0, r1
 8007122:	4611      	mov	r1, r2
 8007124:	602b      	str	r3, [r5, #0]
 8007126:	f7fa ff86 	bl	8002036 <_kill>
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	d102      	bne.n	8007134 <_kill_r+0x1c>
 800712e:	682b      	ldr	r3, [r5, #0]
 8007130:	b103      	cbz	r3, 8007134 <_kill_r+0x1c>
 8007132:	6023      	str	r3, [r4, #0]
 8007134:	bd38      	pop	{r3, r4, r5, pc}
 8007136:	bf00      	nop
 8007138:	20000430 	.word	0x20000430

0800713c <_getpid_r>:
 800713c:	f7fa bf74 	b.w	8002028 <_getpid>

08007140 <__sread>:
 8007140:	b510      	push	{r4, lr}
 8007142:	460c      	mov	r4, r1
 8007144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007148:	f000 f894 	bl	8007274 <_read_r>
 800714c:	2800      	cmp	r0, #0
 800714e:	bfab      	itete	ge
 8007150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007152:	89a3      	ldrhlt	r3, [r4, #12]
 8007154:	181b      	addge	r3, r3, r0
 8007156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800715a:	bfac      	ite	ge
 800715c:	6563      	strge	r3, [r4, #84]	; 0x54
 800715e:	81a3      	strhlt	r3, [r4, #12]
 8007160:	bd10      	pop	{r4, pc}

08007162 <__swrite>:
 8007162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007166:	461f      	mov	r7, r3
 8007168:	898b      	ldrh	r3, [r1, #12]
 800716a:	4605      	mov	r5, r0
 800716c:	05db      	lsls	r3, r3, #23
 800716e:	460c      	mov	r4, r1
 8007170:	4616      	mov	r6, r2
 8007172:	d505      	bpl.n	8007180 <__swrite+0x1e>
 8007174:	2302      	movs	r3, #2
 8007176:	2200      	movs	r2, #0
 8007178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800717c:	f000 f868 	bl	8007250 <_lseek_r>
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	4632      	mov	r2, r6
 8007184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007188:	81a3      	strh	r3, [r4, #12]
 800718a:	4628      	mov	r0, r5
 800718c:	463b      	mov	r3, r7
 800718e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007196:	f000 b817 	b.w	80071c8 <_write_r>

0800719a <__sseek>:
 800719a:	b510      	push	{r4, lr}
 800719c:	460c      	mov	r4, r1
 800719e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a2:	f000 f855 	bl	8007250 <_lseek_r>
 80071a6:	1c43      	adds	r3, r0, #1
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	bf15      	itete	ne
 80071ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80071ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071b6:	81a3      	strheq	r3, [r4, #12]
 80071b8:	bf18      	it	ne
 80071ba:	81a3      	strhne	r3, [r4, #12]
 80071bc:	bd10      	pop	{r4, pc}

080071be <__sclose>:
 80071be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c2:	f000 b813 	b.w	80071ec <_close_r>
	...

080071c8 <_write_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4604      	mov	r4, r0
 80071cc:	4608      	mov	r0, r1
 80071ce:	4611      	mov	r1, r2
 80071d0:	2200      	movs	r2, #0
 80071d2:	4d05      	ldr	r5, [pc, #20]	; (80071e8 <_write_r+0x20>)
 80071d4:	602a      	str	r2, [r5, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	f7fa ff64 	bl	80020a4 <_write>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d102      	bne.n	80071e6 <_write_r+0x1e>
 80071e0:	682b      	ldr	r3, [r5, #0]
 80071e2:	b103      	cbz	r3, 80071e6 <_write_r+0x1e>
 80071e4:	6023      	str	r3, [r4, #0]
 80071e6:	bd38      	pop	{r3, r4, r5, pc}
 80071e8:	20000430 	.word	0x20000430

080071ec <_close_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	2300      	movs	r3, #0
 80071f0:	4d05      	ldr	r5, [pc, #20]	; (8007208 <_close_r+0x1c>)
 80071f2:	4604      	mov	r4, r0
 80071f4:	4608      	mov	r0, r1
 80071f6:	602b      	str	r3, [r5, #0]
 80071f8:	f7fa ff70 	bl	80020dc <_close>
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	d102      	bne.n	8007206 <_close_r+0x1a>
 8007200:	682b      	ldr	r3, [r5, #0]
 8007202:	b103      	cbz	r3, 8007206 <_close_r+0x1a>
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	bd38      	pop	{r3, r4, r5, pc}
 8007208:	20000430 	.word	0x20000430

0800720c <_fstat_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	2300      	movs	r3, #0
 8007210:	4d06      	ldr	r5, [pc, #24]	; (800722c <_fstat_r+0x20>)
 8007212:	4604      	mov	r4, r0
 8007214:	4608      	mov	r0, r1
 8007216:	4611      	mov	r1, r2
 8007218:	602b      	str	r3, [r5, #0]
 800721a:	f7fa ff6a 	bl	80020f2 <_fstat>
 800721e:	1c43      	adds	r3, r0, #1
 8007220:	d102      	bne.n	8007228 <_fstat_r+0x1c>
 8007222:	682b      	ldr	r3, [r5, #0]
 8007224:	b103      	cbz	r3, 8007228 <_fstat_r+0x1c>
 8007226:	6023      	str	r3, [r4, #0]
 8007228:	bd38      	pop	{r3, r4, r5, pc}
 800722a:	bf00      	nop
 800722c:	20000430 	.word	0x20000430

08007230 <_isatty_r>:
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	2300      	movs	r3, #0
 8007234:	4d05      	ldr	r5, [pc, #20]	; (800724c <_isatty_r+0x1c>)
 8007236:	4604      	mov	r4, r0
 8007238:	4608      	mov	r0, r1
 800723a:	602b      	str	r3, [r5, #0]
 800723c:	f7fa ff68 	bl	8002110 <_isatty>
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d102      	bne.n	800724a <_isatty_r+0x1a>
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	b103      	cbz	r3, 800724a <_isatty_r+0x1a>
 8007248:	6023      	str	r3, [r4, #0]
 800724a:	bd38      	pop	{r3, r4, r5, pc}
 800724c:	20000430 	.word	0x20000430

08007250 <_lseek_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4604      	mov	r4, r0
 8007254:	4608      	mov	r0, r1
 8007256:	4611      	mov	r1, r2
 8007258:	2200      	movs	r2, #0
 800725a:	4d05      	ldr	r5, [pc, #20]	; (8007270 <_lseek_r+0x20>)
 800725c:	602a      	str	r2, [r5, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	f7fa ff60 	bl	8002124 <_lseek>
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	d102      	bne.n	800726e <_lseek_r+0x1e>
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	b103      	cbz	r3, 800726e <_lseek_r+0x1e>
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	bd38      	pop	{r3, r4, r5, pc}
 8007270:	20000430 	.word	0x20000430

08007274 <_read_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4604      	mov	r4, r0
 8007278:	4608      	mov	r0, r1
 800727a:	4611      	mov	r1, r2
 800727c:	2200      	movs	r2, #0
 800727e:	4d05      	ldr	r5, [pc, #20]	; (8007294 <_read_r+0x20>)
 8007280:	602a      	str	r2, [r5, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	f7fa fef1 	bl	800206a <_read>
 8007288:	1c43      	adds	r3, r0, #1
 800728a:	d102      	bne.n	8007292 <_read_r+0x1e>
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	b103      	cbz	r3, 8007292 <_read_r+0x1e>
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	bd38      	pop	{r3, r4, r5, pc}
 8007294:	20000430 	.word	0x20000430

08007298 <_init>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	bf00      	nop
 800729c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729e:	bc08      	pop	{r3}
 80072a0:	469e      	mov	lr, r3
 80072a2:	4770      	bx	lr

080072a4 <_fini>:
 80072a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a6:	bf00      	nop
 80072a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072aa:	bc08      	pop	{r3}
 80072ac:	469e      	mov	lr, r3
 80072ae:	4770      	bx	lr
