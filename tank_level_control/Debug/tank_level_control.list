
tank_level_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008878  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08008988  08008988  00018988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e5c  08008e5c  000202dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008e5c  08008e5c  000202dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e5c  08008e5c  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008e5c  08008e5c  00018e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008e64  08008e64  00018e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08008e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200002dc  08009148  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08009148  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbac  00000000  00000000  00020305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002693  00000000  00000000  0002feb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00032548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00033458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019011  00000000  00000000  00034280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9cd  00000000  00000000  0004d291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092356  00000000  00000000  0005bc5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edfb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005244  00000000  00000000  000ee008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002dc 	.word	0x200002dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008970 	.word	0x08008970

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002e0 	.word	0x200002e0
 800014c:	08008970 	.word	0x08008970

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <_Z14FIRFilter_InitP9FIRFilter>:

#include "HeightSensor.h"


void FIRFilter_Init(FIRFilter *fir)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2b3e      	cmp	r3, #62	; 0x3e
 8001160:	d809      	bhi.n	8001176 <_Z14FIRFilter_InitP9FIRFilter+0x26>
    fir->buf[n] = 0.0f;
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0100 	mov.w	r1, #0
 800116a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e7f2      	b.n	800115c <_Z14FIRFilter_InitP9FIRFilter+0xc>
  fir->bufIndex = 0;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  fir->out = 0.0f;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
	...

08001194 <_Z16FIRFilter_UpdateP9FIRFilterf>:


float FIRFilter_Update(FIRFilter *fir, float inp)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  fir->buf[fir->bufIndex] = inp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80011a4:	4619      	mov	r1, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

  fir->bufIndex++;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80011b4:	3301      	adds	r3, #1
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  if(fir->bufIndex == FILTER_NUM_COEFFS)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80011c4:	2b3f      	cmp	r3, #63	; 0x3f
 80011c6:	d103      	bne.n	80011d0 <_Z16FIRFilter_UpdateP9FIRFilterf+0x3c>
    fir->bufIndex = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc

  fir->out = 0.0f;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  uint8_t sumIndex = fir->bufIndex;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80011e0:	73fb      	strb	r3, [r7, #15]

  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	73bb      	strb	r3, [r7, #14]
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	2b3e      	cmp	r3, #62	; 0x3e
 80011ea:	d824      	bhi.n	8001236 <_Z16FIRFilter_UpdateP9FIRFilterf+0xa2>
  {
    if (sumIndex > 0) sumIndex--;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <_Z16FIRFilter_UpdateP9FIRFilterf+0x66>
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e001      	b.n	80011fe <_Z16FIRFilter_UpdateP9FIRFilterf+0x6a>
    else sumIndex = FILTER_NUM_COEFFS - 1;
 80011fa:	233e      	movs	r3, #62	; 0x3e
 80011fc:	73fb      	strb	r3, [r7, #15]
    fir->out += FIR_COEFFS[n] * fir->buf[sumIndex];
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <_Z16FIRFilter_UpdateP9FIRFilterf+0xb0>)
 8001208:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fdb5 	bl	8000d84 <__aeabi_fmul>
 800121a:	4603      	mov	r3, r0
 800121c:	4619      	mov	r1, r3
 800121e:	4620      	mov	r0, r4
 8001220:	f7ff fca8 	bl	8000b74 <__addsf3>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 800122e:	7bbb      	ldrb	r3, [r7, #14]
 8001230:	3301      	adds	r3, #1
 8001232:	73bb      	strb	r3, [r7, #14]
 8001234:	e7d7      	b.n	80011e6 <_Z16FIRFilter_UpdateP9FIRFilterf+0x52>
  }

  return fir->out;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	20000000 	.word	0x20000000

08001248 <_ZN12HeightSensorC1EP12GPIO_TypeDeftS1_t17TIM_HandleTypeDef>:


HeightSensor::HeightSensor(GPIO_TypeDef* TRIG_PORT, uint16_t TRIG_PIN,
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	4613      	mov	r3, r2
 8001256:	80fb      	strh	r3, [r7, #6]
	  	   	   	   	   	   GPIO_TypeDef* ECHO_PORT, uint16_t ECHO_PIN,
						   TIM_HandleTypeDef HTIM)
							: trig_port(TRIG_PORT), trig_pin(TRIG_PIN),
							  echo_port(ECHO_PORT), echo_pin(ECHO_PIN),
							  htim(HTIM){
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	88fa      	ldrh	r2, [r7, #6]
 8001262:	809a      	strh	r2, [r3, #4]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	609a      	str	r2, [r3, #8]
							  echo_port(ECHO_PORT), echo_pin(ECHO_PIN),
 800126a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
							  htim(HTIM){
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	819a      	strh	r2, [r3, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3310      	adds	r3, #16
 8001276:	f107 011c 	add.w	r1, r7, #28
 800127a:	2248      	movs	r2, #72	; 0x48
 800127c:	4618      	mov	r0, r3
 800127e:	f004 fcb5 	bl	8005bec <memcpy>
	FIRFilter_Init(&lpf);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3358      	adds	r3, #88	; 0x58
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff62 	bl	8001150 <_Z14FIRFilter_InitP9FIRFilter>

	HAL_TIM_Base_Start(&htim);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3310      	adds	r3, #16
 8001290:	4618      	mov	r0, r3
 8001292:	f003 fb25 	bl	80048e0 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	889b      	ldrh	r3, [r3, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	4619      	mov	r1, r3
 80012a2:	f002 fd08 	bl	8003cb6 <HAL_GPIO_WritePin>
}
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_ZN12HeightSensor10getDistRawEv>:

float HeightSensor::getDistRaw()
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	return dist_raw;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <_ZN12HeightSensor15getDistFilteredEv>:

float HeightSensor::getDistFiltered()
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	return dist_filtered;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <_ZN12HeightSensor14getWaterHeightEv>:

float HeightSensor::getWaterHeight()
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	return water_height;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <_ZN12HeightSensor10readSensorEv>:


void HeightSensor::readSensor()
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	889b      	ldrh	r3, [r3, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	4619      	mov	r1, r3
 800130c:	f002 fcd3 	bl	8003cb6 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim, 0);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim) < 10);  // wait for 10 us
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	2b09      	cmp	r3, #9
 8001320:	bf94      	ite	ls
 8001322:	2301      	movls	r3, #1
 8001324:	2300      	movhi	r3, #0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	d000      	beq.n	800132e <_ZN12HeightSensor10readSensorEv+0x36>
 800132c:	e7f4      	b.n	8001318 <_ZN12HeightSensor10readSensorEv+0x20>
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	889b      	ldrh	r3, [r3, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	4619      	mov	r1, r3
 800133a:	f002 fcbc 	bl	8003cb6 <HAL_GPIO_WritePin>

	uint32_t millis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 800133e:	f001 fdb7 	bl	8002eb0 <HAL_GetTick>
 8001342:	6178      	str	r0, [r7, #20]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (echo_port, echo_pin)) && millis + 10 >  HAL_GetTick());
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f002 fc98 	bl	8003c88 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <_ZN12HeightSensor10readSensorEv+0x7a>
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f103 040a 	add.w	r4, r3, #10
 8001364:	f001 fda4 	bl	8002eb0 <HAL_GetTick>
 8001368:	4603      	mov	r3, r0
 800136a:	429c      	cmp	r4, r3
 800136c:	d901      	bls.n	8001372 <_ZN12HeightSensor10readSensorEv+0x7a>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <_ZN12HeightSensor10readSensorEv+0x7c>
 8001372:	2300      	movs	r3, #0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d000      	beq.n	800137a <_ZN12HeightSensor10readSensorEv+0x82>
 8001378:	e7e4      	b.n	8001344 <_ZN12HeightSensor10readSensorEv+0x4c>
	uint32_t time1 = __HAL_TIM_GET_COUNTER (&htim);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	613b      	str	r3, [r7, #16]

	millis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001382:	f001 fd95 	bl	8002eb0 <HAL_GetTick>
 8001386:	6178      	str	r0, [r7, #20]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (echo_port, echo_pin)) && millis + 50 > HAL_GetTick());
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001392:	b29b      	uxth	r3, r3
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f002 fc76 	bl	8003c88 <HAL_GPIO_ReadPin>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <_ZN12HeightSensor10readSensorEv+0xbe>
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80013a8:	f001 fd82 	bl	8002eb0 <HAL_GetTick>
 80013ac:	4603      	mov	r3, r0
 80013ae:	429c      	cmp	r4, r3
 80013b0:	d901      	bls.n	80013b6 <_ZN12HeightSensor10readSensorEv+0xbe>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <_ZN12HeightSensor10readSensorEv+0xc0>
 80013b6:	2300      	movs	r3, #0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d000      	beq.n	80013be <_ZN12HeightSensor10readSensorEv+0xc6>
 80013bc:	e7e4      	b.n	8001388 <_ZN12HeightSensor10readSensorEv+0x90>
	uint32_t time2 = __HAL_TIM_GET_COUNTER (&htim);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	60fb      	str	r3, [r7, #12]

	uint16_t distance_mm = (time2 - time1)* 0.34/2;
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f809 	bl	80003e4 <__aeabi_ui2d>
 80013d2:	a32f      	add	r3, pc, #188	; (adr r3, 8001490 <_ZN12HeightSensor10readSensorEv+0x198>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff f87e 	bl	80004d8 <__aeabi_dmul>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ec:	f7ff f99e 	bl	800072c <__aeabi_ddiv>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fb46 	bl	8000a88 <__aeabi_d2uiz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	817b      	strh	r3, [r7, #10]

	dist_raw = (distance_mm/10.0) < CONE_HEIGHT ? (distance_mm/10.0) : CONE_HEIGHT;
 8001400:	897b      	ldrh	r3, [r7, #10]
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe fffe 	bl	8000404 <__aeabi_i2d>
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <_ZN12HeightSensor10readSensorEv+0x1a8>)
 800140e:	f7ff f98d 	bl	800072c <__aeabi_ddiv>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	a31f      	add	r3, pc, #124	; (adr r3, 8001498 <_ZN12HeightSensor10readSensorEv+0x1a0>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff facc 	bl	80009bc <__aeabi_dcmplt>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d010      	beq.n	800144c <_ZN12HeightSensor10readSensorEv+0x154>
 800142a:	897b      	ldrh	r3, [r7, #10]
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe ffe9 	bl	8000404 <__aeabi_i2d>
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <_ZN12HeightSensor10readSensorEv+0x1a8>)
 8001438:	f7ff f978 	bl	800072c <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff fb40 	bl	8000ac8 <__aeabi_d2f>
 8001448:	4603      	mov	r3, r0
 800144a:	e000      	b.n	800144e <_ZN12HeightSensor10readSensorEv+0x156>
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <_ZN12HeightSensor10readSensorEv+0x1ac>)
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	dist_filtered = FIRFilter_Update(&lpf, dist_raw);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8001460:	4619      	mov	r1, r3
 8001462:	4610      	mov	r0, r2
 8001464:	f7ff fe96 	bl	8001194 <_Z16FIRFilter_UpdateP9FIRFilterf>
 8001468:	4602      	mov	r2, r0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	water_height = CONE_HEIGHT - dist_filtered;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001476:	4619      	mov	r1, r3
 8001478:	480a      	ldr	r0, [pc, #40]	; (80014a4 <_ZN12HeightSensor10readSensorEv+0x1ac>)
 800147a:	f7ff fb79 	bl	8000b70 <__aeabi_fsub>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
}
 8001488:	bf00      	nop
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd90      	pop	{r4, r7, pc}
 8001490:	5c28f5c3 	.word	0x5c28f5c3
 8001494:	3fd5c28f 	.word	0x3fd5c28f
 8001498:	00000000 	.word	0x00000000
 800149c:	4050c000 	.word	0x4050c000
 80014a0:	40240000 	.word	0x40240000
 80014a4:	42860000 	.word	0x42860000

080014a8 <_ZL14DWT_Delay_Initv>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <_ZL14DWT_Delay_Initv+0x60>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	4a15      	ldr	r2, [pc, #84]	; (8001508 <_ZL14DWT_Delay_Initv+0x60>)
 80014b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014b6:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <_ZL14DWT_Delay_Initv+0x60>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4a12      	ldr	r2, [pc, #72]	; (8001508 <_ZL14DWT_Delay_Initv+0x60>)
 80014be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014c2:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <_ZL14DWT_Delay_Initv+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a10      	ldr	r2, [pc, #64]	; (800150c <_ZL14DWT_Delay_Initv+0x64>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <_ZL14DWT_Delay_Initv+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <_ZL14DWT_Delay_Initv+0x64>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <_ZL14DWT_Delay_Initv+0x64>)
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 80014e2:	bf00      	nop
  __NOP();
 80014e4:	bf00      	nop
  __NOP();
 80014e6:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <_ZL14DWT_Delay_Initv+0x64>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf14      	ite	ne
 80014f0:	2301      	movne	r3, #1
 80014f2:	2300      	moveq	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <_ZL14DWT_Delay_Initv+0x56>
  {
    return 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e000      	b.n	8001500 <_ZL14DWT_Delay_Initv+0x58>
  }
  else
  {
    return 1;
 80014fe:	2301      	movs	r3, #1
  }
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	e000edf0 	.word	0xe000edf0
 800150c:	e0001000 	.word	0xe0001000

08001510 <_ZL12DWT_Delay_usm>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <_ZL12DWT_Delay_usm+0x48>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800151e:	f002 ffc5 	bl	80044ac <HAL_RCC_GetHCLKFreq>
 8001522:	4603      	mov	r3, r0
 8001524:	4a0d      	ldr	r2, [pc, #52]	; (800155c <_ZL12DWT_Delay_usm+0x4c>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	0c9b      	lsrs	r3, r3, #18
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <_ZL12DWT_Delay_usm+0x48>)
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	1ad2      	subs	r2, r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	bf34      	ite	cc
 8001542:	2301      	movcc	r3, #1
 8001544:	2300      	movcs	r3, #0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d000      	beq.n	800154e <_ZL12DWT_Delay_usm+0x3e>
 800154c:	e7f2      	b.n	8001534 <_ZL12DWT_Delay_usm+0x24>
}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e0001000 	.word	0xe0001000
 800155c:	431bde83 	.word	0x431bde83

08001560 <_ZL19lcd16x2_enablePulsev>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <_ZL19lcd16x2_enablePulsev+0x34>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <_ZL19lcd16x2_enablePulsev+0x38>)
 800156a:	8811      	ldrh	r1, [r2, #0]
 800156c:	2201      	movs	r2, #1
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fba1 	bl	8003cb6 <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8001574:	2014      	movs	r0, #20
 8001576:	f7ff ffcb 	bl	8001510 <_ZL12DWT_Delay_usm>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <_ZL19lcd16x2_enablePulsev+0x34>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a06      	ldr	r2, [pc, #24]	; (8001598 <_ZL19lcd16x2_enablePulsev+0x38>)
 8001580:	8811      	ldrh	r1, [r2, #0]
 8001582:	2200      	movs	r2, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f002 fb96 	bl	8003cb6 <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 800158a:	203c      	movs	r0, #60	; 0x3c
 800158c:	f7ff ffc0 	bl	8001510 <_ZL12DWT_Delay_usm>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200002f8 	.word	0x200002f8
 8001598:	200002fe 	.word	0x200002fe

0800159c <_ZL10lcd16x2_rsb>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <_ZL10lcd16x2_rsb+0x24>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <_ZL10lcd16x2_rsb+0x28>)
 80015ac:	8811      	ldrh	r1, [r2, #0]
 80015ae:	79fa      	ldrb	r2, [r7, #7]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 fb80 	bl	8003cb6 <HAL_GPIO_WritePin>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200002f8 	.word	0x200002f8
 80015c4:	200002fc 	.word	0x200002fc

080015c8 <_ZL13lcd16x2_writeh>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 80015e0:	4b5f      	ldr	r3, [pc, #380]	; (8001760 <_ZL13lcd16x2_writeh+0x198>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d05a      	beq.n	800169e <_ZL13lcd16x2_writeh+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80015e8:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <_ZL13lcd16x2_writeh+0x19c>)
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	4b5e      	ldr	r3, [pc, #376]	; (8001768 <_ZL13lcd16x2_writeh+0x1a0>)
 80015ee:	8819      	ldrh	r1, [r3, #0]
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	f002 fb5c 	bl	8003cb6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80015fe:	4b59      	ldr	r3, [pc, #356]	; (8001764 <_ZL13lcd16x2_writeh+0x19c>)
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	4b5a      	ldr	r3, [pc, #360]	; (800176c <_ZL13lcd16x2_writeh+0x1a4>)
 8001604:	8819      	ldrh	r1, [r3, #0]
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	b2db      	uxtb	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	f002 fb51 	bl	8003cb6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001614:	4b53      	ldr	r3, [pc, #332]	; (8001764 <_ZL13lcd16x2_writeh+0x19c>)
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	4b55      	ldr	r3, [pc, #340]	; (8001770 <_ZL13lcd16x2_writeh+0x1a8>)
 800161a:	8819      	ldrh	r1, [r3, #0]
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	f002 fb46 	bl	8003cb6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800162a:	4b4e      	ldr	r3, [pc, #312]	; (8001764 <_ZL13lcd16x2_writeh+0x19c>)
 800162c:	6818      	ldr	r0, [r3, #0]
 800162e:	4b51      	ldr	r3, [pc, #324]	; (8001774 <_ZL13lcd16x2_writeh+0x1ac>)
 8001630:	8819      	ldrh	r1, [r3, #0]
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	b2db      	uxtb	r3, r3
 800163a:	461a      	mov	r2, r3
 800163c:	f002 fb3b 	bl	8003cb6 <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8001640:	4b4d      	ldr	r3, [pc, #308]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	4b4d      	ldr	r3, [pc, #308]	; (800177c <_ZL13lcd16x2_writeh+0x1b4>)
 8001646:	8819      	ldrh	r1, [r3, #0]
 8001648:	7bbb      	ldrb	r3, [r7, #14]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	f002 fb30 	bl	8003cb6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001656:	4b48      	ldr	r3, [pc, #288]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 8001658:	6818      	ldr	r0, [r3, #0]
 800165a:	4b49      	ldr	r3, [pc, #292]	; (8001780 <_ZL13lcd16x2_writeh+0x1b8>)
 800165c:	8819      	ldrh	r1, [r3, #0]
 800165e:	7bbb      	ldrb	r3, [r7, #14]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	b2db      	uxtb	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	f002 fb25 	bl	8003cb6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800166c:	4b42      	ldr	r3, [pc, #264]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	4b44      	ldr	r3, [pc, #272]	; (8001784 <_ZL13lcd16x2_writeh+0x1bc>)
 8001672:	8819      	ldrh	r1, [r3, #0]
 8001674:	7bbb      	ldrb	r3, [r7, #14]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	f002 fb1a 	bl	8003cb6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	4b40      	ldr	r3, [pc, #256]	; (8001788 <_ZL13lcd16x2_writeh+0x1c0>)
 8001688:	8819      	ldrh	r1, [r3, #0]
 800168a:	7bbb      	ldrb	r3, [r7, #14]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	b2db      	uxtb	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	f002 fb0f 	bl	8003cb6 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001698:	f7ff ff62 	bl	8001560 <_ZL19lcd16x2_enablePulsev>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 800169c:	e05b      	b.n	8001756 <_ZL13lcd16x2_writeh+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	4b36      	ldr	r3, [pc, #216]	; (800177c <_ZL13lcd16x2_writeh+0x1b4>)
 80016a4:	8819      	ldrh	r1, [r3, #0]
 80016a6:	7bbb      	ldrb	r3, [r7, #14]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	f002 fb01 	bl	8003cb6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	4b31      	ldr	r3, [pc, #196]	; (8001780 <_ZL13lcd16x2_writeh+0x1b8>)
 80016ba:	8819      	ldrh	r1, [r3, #0]
 80016bc:	7bbb      	ldrb	r3, [r7, #14]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	f002 faf6 	bl	8003cb6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <_ZL13lcd16x2_writeh+0x1bc>)
 80016d0:	8819      	ldrh	r1, [r3, #0]
 80016d2:	7bbb      	ldrb	r3, [r7, #14]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	f002 faeb 	bl	8003cb6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80016e0:	4b25      	ldr	r3, [pc, #148]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	4b28      	ldr	r3, [pc, #160]	; (8001788 <_ZL13lcd16x2_writeh+0x1c0>)
 80016e6:	8819      	ldrh	r1, [r3, #0]
 80016e8:	7bbb      	ldrb	r3, [r7, #14]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	f002 fae0 	bl	8003cb6 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80016f6:	f7ff ff33 	bl	8001560 <_ZL19lcd16x2_enablePulsev>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	4b1f      	ldr	r3, [pc, #124]	; (800177c <_ZL13lcd16x2_writeh+0x1b4>)
 8001700:	8819      	ldrh	r1, [r3, #0]
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	461a      	mov	r2, r3
 800170c:	f002 fad3 	bl	8003cb6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <_ZL13lcd16x2_writeh+0x1b8>)
 8001716:	8819      	ldrh	r1, [r3, #0]
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	f002 fac8 	bl	8003cb6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <_ZL13lcd16x2_writeh+0x1bc>)
 800172c:	8819      	ldrh	r1, [r3, #0]
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	f002 fabd 	bl	8003cb6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <_ZL13lcd16x2_writeh+0x1b0>)
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <_ZL13lcd16x2_writeh+0x1c0>)
 8001742:	8819      	ldrh	r1, [r3, #0]
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	f002 fab2 	bl	8003cb6 <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001752:	f7ff ff05 	bl	8001560 <_ZL19lcd16x2_enablePulsev>
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200000fc 	.word	0x200000fc
 8001764:	20000300 	.word	0x20000300
 8001768:	20000304 	.word	0x20000304
 800176c:	20000306 	.word	0x20000306
 8001770:	20000308 	.word	0x20000308
 8001774:	2000030a 	.word	0x2000030a
 8001778:	2000030c 	.word	0x2000030c
 800177c:	20000310 	.word	0x20000310
 8001780:	20000312 	.word	0x20000312
 8001784:	20000314 	.word	0x20000314
 8001788:	20000316 	.word	0x20000316

0800178c <_ZL20lcd16x2_writeCommandh>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8001796:	2000      	movs	r0, #0
 8001798:	f7ff ff00 	bl	800159c <_ZL10lcd16x2_rsb>
  lcd16x2_write(cmd);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff12 	bl	80015c8 <_ZL13lcd16x2_writeh>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_ZL17lcd16x2_writeDatah>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f7ff fef0 	bl	800159c <_ZL10lcd16x2_rsb>
  lcd16x2_write(data);
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff02 	bl	80015c8 <_ZL13lcd16x2_writeh>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_ZL14lcd16x2_write4h>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 80017de:	2000      	movs	r0, #0
 80017e0:	f7ff fedc 	bl	800159c <_ZL10lcd16x2_rsb>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <_ZL14lcd16x2_write4h+0x7c>)
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <_ZL14lcd16x2_write4h+0x80>)
 80017ea:	8819      	ldrh	r1, [r3, #0]
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	461a      	mov	r2, r3
 80017f6:	f002 fa5e 	bl	8003cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <_ZL14lcd16x2_write4h+0x7c>)
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <_ZL14lcd16x2_write4h+0x84>)
 8001800:	8819      	ldrh	r1, [r3, #0]
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461a      	mov	r2, r3
 800180c:	f002 fa53 	bl	8003cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <_ZL14lcd16x2_write4h+0x7c>)
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <_ZL14lcd16x2_write4h+0x88>)
 8001816:	8819      	ldrh	r1, [r3, #0]
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	f002 fa48 	bl	8003cb6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <_ZL14lcd16x2_write4h+0x7c>)
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <_ZL14lcd16x2_write4h+0x8c>)
 800182c:	8819      	ldrh	r1, [r3, #0]
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	b2db      	uxtb	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	f002 fa3d 	bl	8003cb6 <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 800183c:	f7ff fe90 	bl	8001560 <_ZL19lcd16x2_enablePulsev>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	2000030c 	.word	0x2000030c
 800184c:	20000310 	.word	0x20000310
 8001850:	20000312 	.word	0x20000312
 8001854:	20000314 	.word	0x20000314
 8001858:	20000316 	.word	0x20000316

0800185c <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	817b      	strh	r3, [r7, #10]
 800186a:	4613      	mov	r3, r2
 800186c:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 800186e:	f7ff fe1b 	bl	80014a8 <_ZL14DWT_Delay_Initv>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8001872:	4a24      	ldr	r2, [pc, #144]	; (8001904 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xa8>)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8001878:	4a23      	ldr	r2, [pc, #140]	; (8001908 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xac>)
 800187a:	897b      	ldrh	r3, [r7, #10]
 800187c:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 800187e:	4a23      	ldr	r2, [pc, #140]	; (800190c <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb0>)
 8001880:	893b      	ldrh	r3, [r7, #8]
 8001882:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8001884:	4a22      	ldr	r2, [pc, #136]	; (8001910 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb4>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 800188a:	4a22      	ldr	r2, [pc, #136]	; (8001914 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb8>)
 800188c:	8b3b      	ldrh	r3, [r7, #24]
 800188e:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8001890:	4a21      	ldr	r2, [pc, #132]	; (8001918 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xbc>)
 8001892:	8bbb      	ldrh	r3, [r7, #28]
 8001894:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8001896:	4a21      	ldr	r2, [pc, #132]	; (800191c <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc0>)
 8001898:	8c3b      	ldrh	r3, [r7, #32]
 800189a:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 800189c:	4a20      	ldr	r2, [pc, #128]	; (8001920 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc4>)
 800189e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018a0:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xcc>)
 80018aa:	2228      	movs	r2, #40	; 0x28
 80018ac:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 80018ae:	2014      	movs	r0, #20
 80018b0:	f001 fb08 	bl	8002ec4 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 80018b4:	2003      	movs	r0, #3
 80018b6:	f7ff ff89 	bl	80017cc <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(5);
 80018ba:	2005      	movs	r0, #5
 80018bc:	f001 fb02 	bl	8002ec4 <HAL_Delay>
  lcd16x2_write4(0x3);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f7ff ff83 	bl	80017cc <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f001 fafc 	bl	8002ec4 <HAL_Delay>
  lcd16x2_write4(0x3);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f7ff ff7d 	bl	80017cc <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f001 faf6 	bl	8002ec4 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 80018d8:	2002      	movs	r0, #2
 80018da:	f7ff ff77 	bl	80017cc <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 80018de:	2001      	movs	r0, #1
 80018e0:	f001 faf0 	bl	8002ec4 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80018e4:	2028      	movs	r0, #40	; 0x28
 80018e6:	f7ff ff51 	bl	800178c <_ZL20lcd16x2_writeCommandh>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f7ff ff4e 	bl	800178c <_ZL20lcd16x2_writeCommandh>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f7ff ff4b 	bl	800178c <_ZL20lcd16x2_writeCommandh>
  LCD_MS_DELAY(3);
 80018f6:	2003      	movs	r0, #3
 80018f8:	f001 fae4 	bl	8002ec4 <HAL_Delay>
}
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200002f8 	.word	0x200002f8
 8001908:	200002fc 	.word	0x200002fc
 800190c:	200002fe 	.word	0x200002fe
 8001910:	2000030c 	.word	0x2000030c
 8001914:	20000310 	.word	0x20000310
 8001918:	20000312 	.word	0x20000312
 800191c:	20000314 	.word	0x20000314
 8001920:	20000316 	.word	0x20000316
 8001924:	200000fc 	.word	0x200000fc
 8001928:	200000fe 	.word	0x200000fe

0800192c <_Z17lcd16x2_setCursorhh>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	460a      	mov	r2, r1
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	4613      	mov	r3, r2
 800193a:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d108      	bne.n	800195c <_Z17lcd16x2_setCursorhh+0x30>
  {
    maskData |= (0x80);
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001950:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff19 	bl	800178c <_ZL20lcd16x2_writeCommandh>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 800195a:	e007      	b.n	800196c <_Z17lcd16x2_setCursorhh+0x40>
    maskData |= (0xc0);
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001962:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff10 	bl	800178c <_ZL20lcd16x2_writeCommandh>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_Z15lcd16x2_1stLinev>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 8001978:	2100      	movs	r1, #0
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff ffd6 	bl	800192c <_Z17lcd16x2_setCursorhh>
}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}

08001984 <_Z15lcd16x2_2ndLinev>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8001988:	2100      	movs	r1, #0
 800198a:	2001      	movs	r0, #1
 800198c:	f7ff ffce 	bl	800192c <_Z17lcd16x2_setCursorhh>
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}

08001994 <_Z18lcd16x2_cursorShowb>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  if(state)
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00c      	beq.n	80019be <_Z18lcd16x2_cursorShowb+0x2a>
  {
    DisplayControl |= (0x03);
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <_Z18lcd16x2_cursorShowb+0x4c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	f043 0303 	orr.w	r3, r3, #3
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <_Z18lcd16x2_cursorShowb+0x4c>)
 80019b0:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <_Z18lcd16x2_cursorShowb+0x4c>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff fee8 	bl	800178c <_ZL20lcd16x2_writeCommandh>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 80019bc:	e00b      	b.n	80019d6 <_Z18lcd16x2_cursorShowb+0x42>
    DisplayControl &= ~(0x03);
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <_Z18lcd16x2_cursorShowb+0x4c>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	f023 0303 	bic.w	r3, r3, #3
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <_Z18lcd16x2_cursorShowb+0x4c>)
 80019ca:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <_Z18lcd16x2_cursorShowb+0x4c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fedb 	bl	800178c <_ZL20lcd16x2_writeCommandh>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200000fd 	.word	0x200000fd

080019e4 <_Z13lcd16x2_clearv>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80019e8:	2001      	movs	r0, #1
 80019ea:	f7ff fecf 	bl	800178c <_ZL20lcd16x2_writeCommandh>
  LCD_MS_DELAY(3);
 80019ee:	2003      	movs	r0, #3
 80019f0:	f001 fa68 	bl	8002ec4 <HAL_Delay>
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_Z14lcd16x2_printfPKcz>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 80019f8:	b40f      	push	{r0, r1, r2, r3}
 80019fa:	b590      	push	{r4, r7, lr}
 80019fc:	b089      	sub	sp, #36	; 0x24
 80019fe:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8001a00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a04:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 fd98 	bl	8006544 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	77fb      	strb	r3, [r7, #31]
 8001a18:	7ffc      	ldrb	r4, [r7, #31]
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fb96 	bl	8000150 <strlen>
 8001a24:	4603      	mov	r3, r0
 8001a26:	429c      	cmp	r4, r3
 8001a28:	d20f      	bcs.n	8001a4a <_Z14lcd16x2_printfPKcz+0x52>
 8001a2a:	7ffb      	ldrb	r3, [r7, #31]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80c      	bhi.n	8001a4a <_Z14lcd16x2_printfPKcz+0x52>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8001a30:	7ffb      	ldrb	r3, [r7, #31]
 8001a32:	f107 0220 	add.w	r2, r7, #32
 8001a36:	4413      	add	r3, r2
 8001a38:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff feb5 	bl	80017ac <_ZL17lcd16x2_writeDatah>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001a42:	7ffb      	ldrb	r3, [r7, #31]
 8001a44:	3301      	adds	r3, #1
 8001a46:	77fb      	strb	r3, [r7, #31]
 8001a48:	e7e6      	b.n	8001a18 <_Z14lcd16x2_printfPKcz+0x20>
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a54:	b004      	add	sp, #16
 8001a56:	4770      	bx	lr

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
 8001a5e:	af56      	add	r7, sp, #344	; 0x158
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a60:	f001 f9ce 	bl	8002e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a64:	f000 f9ae 	bl	8001dc4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a68:	f000 fc72 	bl	8002350 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8001a6c:	f000 fb2e 	bl	80020cc <_ZL12MX_TIM2_Initv>
  MX_ADC1_Init();
 8001a70:	f000 fa12 	bl	8001e98 <_ZL12MX_ADC1_Initv>
  MX_TIM4_Init();
 8001a74:	f000 fbe2 	bl	800223c <_ZL12MX_TIM4_Initv>
  MX_TIM1_Init();
 8001a78:	f000 fa56 	bl	8001f28 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8001a7c:	f000 fb82 	bl	8002184 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 8001a80:	f000 fc38 	bl	80022f4 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

  lcd16x2_init_4bits(LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_EN_Pin,
 8001a84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a88:	9303      	str	r3, [sp, #12]
 8001a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	4bb2      	ldr	r3, [pc, #712]	; (8001d68 <main+0x310>)
 8001a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa6:	48b0      	ldr	r0, [pc, #704]	; (8001d68 <main+0x310>)
 8001aa8:	f7ff fed8 	bl	800185c <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt>
		  	  	  	 LCD_D4_GPIO_Port, LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin);

  lcd16x2_cursorShow(false);
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff ff71 	bl	8001994 <_Z18lcd16x2_cursorShowb>

  HAL_ADC_Start(&hadc1);
 8001ab2:	48ae      	ldr	r0, [pc, #696]	; (8001d6c <main+0x314>)
 8001ab4:	f001 fb02 	bl	80030bc <HAL_ADC_Start>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001ab8:	2108      	movs	r1, #8
 8001aba:	48ad      	ldr	r0, [pc, #692]	; (8001d70 <main+0x318>)
 8001abc:	f003 fd32 	bl	8005524 <HAL_TIMEx_PWMN_Start>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 8001ac0:	4bab      	ldr	r3, [pc, #684]	; (8001d70 <main+0x318>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_GPIO_WritePin(PUMP_EN_GPIO_Port, PUMP_EN_Pin, GPIO_PIN_SET);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2120      	movs	r1, #32
 8001acc:	48a9      	ldr	r0, [pc, #676]	; (8001d74 <main+0x31c>)
 8001ace:	f002 f8f2 	bl	8003cb6 <HAL_GPIO_WritePin>

  while(!HAL_GPIO_ReadPin(SETPOINT_BUT_GPIO_Port, SETPOINT_BUT_Pin))
 8001ad2:	2108      	movs	r1, #8
 8001ad4:	48a4      	ldr	r0, [pc, #656]	; (8001d68 <main+0x310>)
 8001ad6:	f002 f8d7 	bl	8003c88 <HAL_GPIO_ReadPin>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf0c      	ite	eq
 8001ae0:	2301      	moveq	r3, #1
 8001ae2:	2300      	movne	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d04b      	beq.n	8001b82 <main+0x12a>
  {
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001aea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001aee:	489f      	ldr	r0, [pc, #636]	; (8001d6c <main+0x314>)
 8001af0:	f001 fb92 	bl	8003218 <HAL_ADC_PollForConversion>
	  potVal = HAL_ADC_GetValue(&hadc1);
 8001af4:	489d      	ldr	r0, [pc, #628]	; (8001d6c <main+0x314>)
 8001af6:	f001 fc95 	bl	8003424 <HAL_ADC_GetValue>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b9e      	ldr	r3, [pc, #632]	; (8001d78 <main+0x320>)
 8001b00:	801a      	strh	r2, [r3, #0]
	  setpoint = 0.35 + 0.30*(potVal/4036.0);
 8001b02:	4b9d      	ldr	r3, [pc, #628]	; (8001d78 <main+0x320>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fc7c 	bl	8000404 <__aeabi_i2d>
 8001b0c:	a390      	add	r3, pc, #576	; (adr r3, 8001d50 <main+0x2f8>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fe0b 	bl	800072c <__aeabi_ddiv>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	a38e      	add	r3, pc, #568	; (adr r3, 8001d58 <main+0x300>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fcd8 	bl	80004d8 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	a38b      	add	r3, pc, #556	; (adr r3, 8001d60 <main+0x308>)
 8001b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b36:	f7fe fb19 	bl	800016c <__adddf3>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7fe ffc1 	bl	8000ac8 <__aeabi_d2f>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4a8c      	ldr	r2, [pc, #560]	; (8001d7c <main+0x324>)
 8001b4a:	6013      	str	r3, [r2, #0]
	  lcd16x2_clear();
 8001b4c:	f7ff ff4a 	bl	80019e4 <_Z13lcd16x2_clearv>
	  lcd16x2_printf("Setpoint: ");
 8001b50:	488b      	ldr	r0, [pc, #556]	; (8001d80 <main+0x328>)
 8001b52:	f7ff ff51 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
	  lcd16x2_2ndLine();
 8001b56:	f7ff ff15 	bl	8001984 <_Z15lcd16x2_2ndLinev>
	  lcd16x2_printf("         %.1f cm", 100*setpoint);
 8001b5a:	4b88      	ldr	r3, [pc, #544]	; (8001d7c <main+0x324>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4989      	ldr	r1, [pc, #548]	; (8001d84 <main+0x32c>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff f90f 	bl	8000d84 <__aeabi_fmul>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fc5d 	bl	8000428 <__aeabi_f2d>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4885      	ldr	r0, [pc, #532]	; (8001d88 <main+0x330>)
 8001b74:	f7ff ff40 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
	  HAL_Delay(300);
 8001b78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b7c:	f001 f9a2 	bl	8002ec4 <HAL_Delay>
  while(!HAL_GPIO_ReadPin(SETPOINT_BUT_GPIO_Port, SETPOINT_BUT_Pin))
 8001b80:	e7a7      	b.n	8001ad2 <main+0x7a>
  }

  HeightSensor usensor(TRIG_GPIO_Port, TRIG_Pin, ECHO_GPIO_Port, ECHO_Pin, htim2);
 8001b82:	463c      	mov	r4, r7
 8001b84:	4a81      	ldr	r2, [pc, #516]	; (8001d8c <main+0x334>)
 8001b86:	ab01      	add	r3, sp, #4
 8001b88:	4611      	mov	r1, r2
 8001b8a:	2248      	movs	r2, #72	; 0x48
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f004 f82d 	bl	8005bec <memcpy>
 8001b92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <main+0x31c>)
 8001b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b9e:	4975      	ldr	r1, [pc, #468]	; (8001d74 <main+0x31c>)
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f7ff fb51 	bl	8001248 <_ZN12HeightSensorC1EP12GPIO_TypeDeftS1_t17TIM_HandleTypeDef>

  HAL_GPIO_WritePin(PUMP_EN_GPIO_Port, PUMP_EN_Pin, GPIO_PIN_SET);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2120      	movs	r1, #32
 8001baa:	4872      	ldr	r0, [pc, #456]	; (8001d74 <main+0x31c>)
 8001bac:	f002 f883 	bl	8003cb6 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim4);
 8001bb0:	4877      	ldr	r0, [pc, #476]	; (8001d90 <main+0x338>)
 8001bb2:	f002 fedf 	bl	8004974 <HAL_TIM_Base_Start_IT>

  pump_pid_controller.setKPID(1.319, 0.02405, 0.0);
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	4a76      	ldr	r2, [pc, #472]	; (8001d94 <main+0x33c>)
 8001bbc:	4976      	ldr	r1, [pc, #472]	; (8001d98 <main+0x340>)
 8001bbe:	4877      	ldr	r0, [pc, #476]	; (8001d9c <main+0x344>)
 8001bc0:	f001 f827 	bl	8002c12 <_ZN13PIDController7setKPIDEfff>
  pump_pid_controller.setPIDLimits(0.0f, 1.0f);
 8001bc4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bc8:	f04f 0100 	mov.w	r1, #0
 8001bcc:	4873      	ldr	r0, [pc, #460]	; (8001d9c <main+0x344>)
 8001bce:	f001 f842 	bl	8002c56 <_ZN13PIDController12setPIDLimitsEff>
  pump_pid_controller.setSetpoint(setpoint);
 8001bd2:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <main+0x324>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4870      	ldr	r0, [pc, #448]	; (8001d9c <main+0x344>)
 8001bda:	f001 f82f 	bl	8002c3c <_ZN13PIDController11setSetpointEf>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001bde:	2100      	movs	r1, #0
 8001be0:	4863      	ldr	r0, [pc, #396]	; (8001d70 <main+0x318>)
 8001be2:	f003 fc9f 	bl	8005524 <HAL_TIMEx_PWMN_Start>

  closeValve();
 8001be6:	f000 fced 	bl	80025c4 <_Z10closeValvev>
  if (setpoint > 0.50) fillTank();
 8001bea:	4b64      	ldr	r3, [pc, #400]	; (8001d7c <main+0x324>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fa82 	bl	80010fc <__aeabi_fcmpgt>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <main+0x1aa>
 8001bfe:	f000 fd03 	bl	8002608 <_Z8fillTankv>

  lcd16x2_clear();
 8001c02:	f7ff feef 	bl	80019e4 <_Z13lcd16x2_clearv>
  lcd16x2_printf("Okay! Pressione");
 8001c06:	4866      	ldr	r0, [pc, #408]	; (8001da0 <main+0x348>)
 8001c08:	f7ff fef6 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
  lcd16x2_2ndLine();
 8001c0c:	f7ff feba 	bl	8001984 <_Z15lcd16x2_2ndLinev>
  lcd16x2_printf("novamente");
 8001c10:	4864      	ldr	r0, [pc, #400]	; (8001da4 <main+0x34c>)
 8001c12:	f7ff fef1 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
  while (!HAL_GPIO_ReadPin(SETPOINT_BUT_GPIO_Port, SETPOINT_BUT_Pin));
 8001c16:	2108      	movs	r1, #8
 8001c18:	4853      	ldr	r0, [pc, #332]	; (8001d68 <main+0x310>)
 8001c1a:	f002 f835 	bl	8003c88 <HAL_GPIO_ReadPin>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	bf0c      	ite	eq
 8001c24:	2301      	moveq	r3, #1
 8001c26:	2300      	movne	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d000      	beq.n	8001c30 <main+0x1d8>
 8001c2e:	e7f2      	b.n	8001c16 <main+0x1be>

  openValve();
 8001c30:	f000 fd04 	bl	800263c <_Z9openValvev>


  startMillis = HAL_GetTick();
 8001c34:	f001 f93c 	bl	8002eb0 <HAL_GetTick>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4a5b      	ldr	r2, [pc, #364]	; (8001da8 <main+0x350>)
 8001c3c:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	usensor.readSensor();
 8001c3e:	463b      	mov	r3, r7
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fb59 	bl	80012f8 <_ZN12HeightSensor10readSensorEv>

	pidVal = pump_pid_controller.processPID(usensor.getWaterHeight()/100);
 8001c46:	463b      	mov	r3, r7
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fb49 	bl	80012e0 <_ZN12HeightSensor14getWaterHeightEv>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	494c      	ldr	r1, [pc, #304]	; (8001d84 <main+0x32c>)
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f94a 	bl	8000eec <__aeabi_fdiv>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	484f      	ldr	r0, [pc, #316]	; (8001d9c <main+0x344>)
 8001c5e:	f001 f80b 	bl	8002c78 <_ZN13PIDController10processPIDEf>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4a51      	ldr	r2, [pc, #324]	; (8001dac <main+0x354>)
 8001c66:	6013      	str	r3, [r2, #0]
	if (pidVal < 0.25)
 8001c68:	4b50      	ldr	r3, [pc, #320]	; (8001dac <main+0x354>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fa25 	bl	80010c0 <__aeabi_fcmplt>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d009      	beq.n	8001c90 <main+0x238>
	{
		HAL_GPIO_WritePin(PUMP_EN_GPIO_Port, PUMP_EN_Pin, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2120      	movs	r1, #32
 8001c80:	483c      	ldr	r0, [pc, #240]	; (8001d74 <main+0x31c>)
 8001c82:	f002 f818 	bl	8003cb6 <HAL_GPIO_WritePin>
		pidVal = 0.0;
 8001c86:	4b49      	ldr	r3, [pc, #292]	; (8001dac <main+0x354>)
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e012      	b.n	8001cb6 <main+0x25e>
	}
	else
	{
		HAL_GPIO_WritePin(PUMP_EN_GPIO_Port, PUMP_EN_Pin, GPIO_PIN_RESET);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2120      	movs	r1, #32
 8001c94:	4837      	ldr	r0, [pc, #220]	; (8001d74 <main+0x31c>)
 8001c96:	f002 f80e 	bl	8003cb6 <HAL_GPIO_WritePin>
		pwmVal = 625*pidVal;
 8001c9a:	4b44      	ldr	r3, [pc, #272]	; (8001dac <main+0x354>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4944      	ldr	r1, [pc, #272]	; (8001db0 <main+0x358>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff f86f 	bl	8000d84 <__aeabi_fmul>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fa31 	bl	8001110 <__aeabi_f2uiz>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	4b40      	ldr	r3, [pc, #256]	; (8001db4 <main+0x35c>)
 8001cb4:	801a      	strh	r2, [r3, #0]
	}

	pwmVal = 625*pidVal;
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <main+0x354>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	493d      	ldr	r1, [pc, #244]	; (8001db0 <main+0x358>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f861 	bl	8000d84 <__aeabi_fmul>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fa23 	bl	8001110 <__aeabi_f2uiz>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b39      	ldr	r3, [pc, #228]	; (8001db4 <main+0x35c>)
 8001cd0:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, pwmVal);
 8001cd2:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <main+0x35c>)
 8001cd4:	881a      	ldrh	r2, [r3, #0]
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <main+0x318>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	63da      	str	r2, [r3, #60]	; 0x3c



	if (updateLCD)
 8001cdc:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <main+0x360>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d024      	beq.n	8001d2e <main+0x2d6>
	{
		lcd16x2_clear();
 8001ce4:	f7ff fe7e 	bl	80019e4 <_Z13lcd16x2_clearv>
		lcd16x2_1stLine();
 8001ce8:	f7ff fe44 	bl	8001974 <_Z15lcd16x2_1stLinev>
		lcd16x2_printf("Setpoint: %.1fcm", setpoint*100);
 8001cec:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <main+0x324>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4924      	ldr	r1, [pc, #144]	; (8001d84 <main+0x32c>)
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff f846 	bl	8000d84 <__aeabi_fmul>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fb94 	bl	8000428 <__aeabi_f2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	482d      	ldr	r0, [pc, #180]	; (8001dbc <main+0x364>)
 8001d06:	f7ff fe77 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
		lcd16x2_2ndLine();
 8001d0a:	f7ff fe3b 	bl	8001984 <_Z15lcd16x2_2ndLinev>
		lcd16x2_printf("H. atual: %.1fcm", usensor.getWaterHeight());
 8001d0e:	463b      	mov	r3, r7
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff fae5 	bl	80012e0 <_ZN12HeightSensor14getWaterHeightEv>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fb85 	bl	8000428 <__aeabi_f2d>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4827      	ldr	r0, [pc, #156]	; (8001dc0 <main+0x368>)
 8001d24:	f7ff fe68 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
		updateLCD = false;
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <main+0x360>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
	}

	sendData(usensor);
 8001d2e:	463c      	mov	r4, r7
 8001d30:	4668      	mov	r0, sp
 8001d32:	f104 0310 	add.w	r3, r4, #16
 8001d36:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f003 ff56 	bl	8005bec <memcpy>
 8001d40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001d44:	f000 fbd2 	bl	80024ec <_Z8sendData12HeightSensor>
	HAL_Delay(1000/SAMPLING_FREQUENCY);
 8001d48:	200a      	movs	r0, #10
 8001d4a:	f001 f8bb 	bl	8002ec4 <HAL_Delay>
	usensor.readSensor();
 8001d4e:	e776      	b.n	8001c3e <main+0x1e6>
 8001d50:	00000000 	.word	0x00000000
 8001d54:	40af8800 	.word	0x40af8800
 8001d58:	33333333 	.word	0x33333333
 8001d5c:	3fd33333 	.word	0x3fd33333
 8001d60:	66666666 	.word	0x66666666
 8001d64:	3fd66666 	.word	0x3fd66666
 8001d68:	40010800 	.word	0x40010800
 8001d6c:	20000318 	.word	0x20000318
 8001d70:	20000348 	.word	0x20000348
 8001d74:	40010c00 	.word	0x40010c00
 8001d78:	200004e8 	.word	0x200004e8
 8001d7c:	200004ec 	.word	0x200004ec
 8001d80:	08008988 	.word	0x08008988
 8001d84:	42c80000 	.word	0x42c80000
 8001d88:	08008994 	.word	0x08008994
 8001d8c:	20000390 	.word	0x20000390
 8001d90:	20000420 	.word	0x20000420
 8001d94:	3cc50481 	.word	0x3cc50481
 8001d98:	3fa8d4fe 	.word	0x3fa8d4fe
 8001d9c:	200004ac 	.word	0x200004ac
 8001da0:	080089a8 	.word	0x080089a8
 8001da4:	080089b8 	.word	0x080089b8
 8001da8:	200004f8 	.word	0x200004f8
 8001dac:	200004f0 	.word	0x200004f0
 8001db0:	441c4000 	.word	0x441c4000
 8001db4:	200004ea 	.word	0x200004ea
 8001db8:	200000ff 	.word	0x200000ff
 8001dbc:	080089c4 	.word	0x080089c4
 8001dc0:	080089d8 	.word	0x080089d8

08001dc4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b094      	sub	sp, #80	; 0x50
 8001dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dce:	2228      	movs	r2, #40	; 0x28
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 ff18 	bl	8005c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001df4:	2301      	movs	r3, #1
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e02:	2301      	movs	r3, #1
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e06:	2302      	movs	r3, #2
 8001e08:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e10:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f001 ff7c 	bl	8003d18 <HAL_RCC_OscConfig>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	bf14      	ite	ne
 8001e26:	2301      	movne	r3, #1
 8001e28:	2300      	moveq	r3, #0
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001e30:	f000 fc26 	bl	8002680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e34:	230f      	movs	r3, #15
 8001e36:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e44:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	2102      	movs	r1, #2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 f9e1 	bl	8004218 <HAL_RCC_ClockConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8001e66:	f000 fc0b 	bl	8002680 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e72:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 fb68 	bl	800454c <HAL_RCCEx_PeriphCLKConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf14      	ite	ne
 8001e82:	2301      	movne	r3, #1
 8001e84:	2300      	moveq	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8001e8c:	f000 fbf8 	bl	8002680 <Error_Handler>
  }
}
 8001e90:	bf00      	nop
 8001e92:	3750      	adds	r7, #80	; 0x50
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <_ZL12MX_ADC1_Initv+0x88>)
 8001eaa:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <_ZL12MX_ADC1_Initv+0x8c>)
 8001eac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001eae:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <_ZL12MX_ADC1_Initv+0x88>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <_ZL12MX_ADC1_Initv+0x88>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001eba:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <_ZL12MX_ADC1_Initv+0x88>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ec0:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <_ZL12MX_ADC1_Initv+0x88>)
 8001ec2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001ec6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ec8:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <_ZL12MX_ADC1_Initv+0x88>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <_ZL12MX_ADC1_Initv+0x88>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ed4:	4812      	ldr	r0, [pc, #72]	; (8001f20 <_ZL12MX_ADC1_Initv+0x88>)
 8001ed6:	f001 f819 	bl	8002f0c <HAL_ADC_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf14      	ite	ne
 8001ee0:	2301      	movne	r3, #1
 8001ee2:	2300      	moveq	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8001eea:	f000 fbc9 	bl	8002680 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	4619      	mov	r1, r3
 8001efe:	4808      	ldr	r0, [pc, #32]	; (8001f20 <_ZL12MX_ADC1_Initv+0x88>)
 8001f00:	f001 fa9c 	bl	800343c <HAL_ADC_ConfigChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf14      	ite	ne
 8001f0a:	2301      	movne	r3, #1
 8001f0c:	2300      	moveq	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8001f14:	f000 fbb4 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000318 	.word	0x20000318
 8001f24:	40012400 	.word	0x40012400

08001f28 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b096      	sub	sp, #88	; 0x58
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
 8001f54:	611a      	str	r2, [r3, #16]
 8001f56:	615a      	str	r2, [r3, #20]
 8001f58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 fe51 	bl	8005c08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f66:	4b57      	ldr	r3, [pc, #348]	; (80020c4 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f68:	4a57      	ldr	r2, [pc, #348]	; (80020c8 <_ZL12MX_TIM1_Initv+0x1a0>)
 8001f6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 8001f6c:	4b55      	ldr	r3, [pc, #340]	; (80020c4 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f6e:	227f      	movs	r2, #127	; 0x7f
 8001f70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	4b54      	ldr	r3, [pc, #336]	; (80020c4 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625;
 8001f78:	4b52      	ldr	r3, [pc, #328]	; (80020c4 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f7a:	f240 2271 	movw	r2, #625	; 0x271
 8001f7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f80:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f86:	4b4f      	ldr	r3, [pc, #316]	; (80020c4 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8c:	4b4d      	ldr	r3, [pc, #308]	; (80020c4 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f92:	484c      	ldr	r0, [pc, #304]	; (80020c4 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f94:	f002 fc54 	bl	8004840 <HAL_TIM_Base_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	2300      	moveq	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8001fa8:	f000 fb6a 	bl	8002680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4842      	ldr	r0, [pc, #264]	; (80020c4 <_ZL12MX_TIM1_Initv+0x19c>)
 8001fba:	f002 ff4b 	bl	8004e54 <HAL_TIM_ConfigClockSource>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8001fce:	f000 fb57 	bl	8002680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fd2:	483c      	ldr	r0, [pc, #240]	; (80020c4 <_ZL12MX_TIM1_Initv+0x19c>)
 8001fd4:	f002 fd20 	bl	8004a18 <HAL_TIM_PWM_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bf14      	ite	ne
 8001fde:	2301      	movne	r3, #1
 8001fe0:	2300      	moveq	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8001fe8:	f000 fb4a 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fec:	2300      	movs	r3, #0
 8001fee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ff4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4832      	ldr	r0, [pc, #200]	; (80020c4 <_ZL12MX_TIM1_Initv+0x19c>)
 8001ffc:	f003 fb30 	bl	8005660 <HAL_TIMEx_MasterConfigSynchronization>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf14      	ite	ne
 8002006:	2301      	movne	r3, #1
 8002008:	2300      	moveq	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8002010:	f000 fb36 	bl	8002680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002014:	2360      	movs	r3, #96	; 0x60
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800201c:	2300      	movs	r3, #0
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002020:	2300      	movs	r3, #0
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002028:	2300      	movs	r3, #0
 800202a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800202c:	2300      	movs	r3, #0
 800202e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002034:	2200      	movs	r2, #0
 8002036:	4619      	mov	r1, r3
 8002038:	4822      	ldr	r0, [pc, #136]	; (80020c4 <_ZL12MX_TIM1_Initv+0x19c>)
 800203a:	f002 fe4d 	bl	8004cd8 <HAL_TIM_PWM_ConfigChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 800204e:	f000 fb17 	bl	8002680 <Error_Handler>
  }
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8002052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002056:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800205c:	2208      	movs	r2, #8
 800205e:	4619      	mov	r1, r3
 8002060:	4818      	ldr	r0, [pc, #96]	; (80020c4 <_ZL12MX_TIM1_Initv+0x19c>)
 8002062:	f002 fe39 	bl	8004cd8 <HAL_TIM_PWM_ConfigChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 8002076:	f000 fb03 	bl	8002680 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800208e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002092:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	4619      	mov	r1, r3
 800209c:	4809      	ldr	r0, [pc, #36]	; (80020c4 <_ZL12MX_TIM1_Initv+0x19c>)
 800209e:	f003 fb3d 	bl	800571c <HAL_TIMEx_ConfigBreakDeadTime>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <_ZL12MX_TIM1_Initv+0x18e>
  {
    Error_Handler();
 80020b2:	f000 fae5 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020b6:	4803      	ldr	r0, [pc, #12]	; (80020c4 <_ZL12MX_TIM1_Initv+0x19c>)
 80020b8:	f000 fbe8 	bl	800288c <HAL_TIM_MspPostInit>

}
 80020bc:	bf00      	nop
 80020be:	3758      	adds	r7, #88	; 0x58
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000348 	.word	0x20000348
 80020c8:	40012c00 	.word	0x40012c00

080020cc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e0:	463b      	mov	r3, r7
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020e8:	4b25      	ldr	r3, [pc, #148]	; (8002180 <_ZL12MX_TIM2_Initv+0xb4>)
 80020ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80020f0:	4b23      	ldr	r3, [pc, #140]	; (8002180 <_ZL12MX_TIM2_Initv+0xb4>)
 80020f2:	2247      	movs	r2, #71	; 0x47
 80020f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <_ZL12MX_TIM2_Initv+0xb4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80020fc:	4b20      	ldr	r3, [pc, #128]	; (8002180 <_ZL12MX_TIM2_Initv+0xb4>)
 80020fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002102:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <_ZL12MX_TIM2_Initv+0xb4>)
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800210a:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <_ZL12MX_TIM2_Initv+0xb4>)
 800210c:	2200      	movs	r2, #0
 800210e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002110:	481b      	ldr	r0, [pc, #108]	; (8002180 <_ZL12MX_TIM2_Initv+0xb4>)
 8002112:	f002 fb95 	bl	8004840 <HAL_TIM_Base_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf14      	ite	ne
 800211c:	2301      	movne	r3, #1
 800211e:	2300      	moveq	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8002126:	f000 faab 	bl	8002680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800212a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800212e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002130:	f107 0308 	add.w	r3, r7, #8
 8002134:	4619      	mov	r1, r3
 8002136:	4812      	ldr	r0, [pc, #72]	; (8002180 <_ZL12MX_TIM2_Initv+0xb4>)
 8002138:	f002 fe8c 	bl	8004e54 <HAL_TIM_ConfigClockSource>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf14      	ite	ne
 8002142:	2301      	movne	r3, #1
 8002144:	2300      	moveq	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 800214c:	f000 fa98 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002150:	2300      	movs	r3, #0
 8002152:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002158:	463b      	mov	r3, r7
 800215a:	4619      	mov	r1, r3
 800215c:	4808      	ldr	r0, [pc, #32]	; (8002180 <_ZL12MX_TIM2_Initv+0xb4>)
 800215e:	f003 fa7f 	bl	8005660 <HAL_TIMEx_MasterConfigSynchronization>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf14      	ite	ne
 8002168:	2301      	movne	r3, #1
 800216a:	2300      	moveq	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8002172:	f000 fa85 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000390 	.word	0x20000390

08002184 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218a:	f107 0308 	add.w	r3, r7, #8
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002198:	463b      	mov	r3, r7
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <_ZL12MX_TIM3_Initv+0xb0>)
 80021a2:	4a25      	ldr	r2, [pc, #148]	; (8002238 <_ZL12MX_TIM3_Initv+0xb4>)
 80021a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021a6:	4b23      	ldr	r3, [pc, #140]	; (8002234 <_ZL12MX_TIM3_Initv+0xb0>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <_ZL12MX_TIM3_Initv+0xb0>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <_ZL12MX_TIM3_Initv+0xb0>)
 80021b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ba:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <_ZL12MX_TIM3_Initv+0xb0>)
 80021bc:	2200      	movs	r2, #0
 80021be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c0:	4b1c      	ldr	r3, [pc, #112]	; (8002234 <_ZL12MX_TIM3_Initv+0xb0>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021c6:	481b      	ldr	r0, [pc, #108]	; (8002234 <_ZL12MX_TIM3_Initv+0xb0>)
 80021c8:	f002 fb3a 	bl	8004840 <HAL_TIM_Base_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bf14      	ite	ne
 80021d2:	2301      	movne	r3, #1
 80021d4:	2300      	moveq	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 80021dc:	f000 fa50 	bl	8002680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021e6:	f107 0308 	add.w	r3, r7, #8
 80021ea:	4619      	mov	r1, r3
 80021ec:	4811      	ldr	r0, [pc, #68]	; (8002234 <_ZL12MX_TIM3_Initv+0xb0>)
 80021ee:	f002 fe31 	bl	8004e54 <HAL_TIM_ConfigClockSource>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf14      	ite	ne
 80021f8:	2301      	movne	r3, #1
 80021fa:	2300      	moveq	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8002202:	f000 fa3d 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800220e:	463b      	mov	r3, r7
 8002210:	4619      	mov	r1, r3
 8002212:	4808      	ldr	r0, [pc, #32]	; (8002234 <_ZL12MX_TIM3_Initv+0xb0>)
 8002214:	f003 fa24 	bl	8005660 <HAL_TIMEx_MasterConfigSynchronization>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	bf14      	ite	ne
 800221e:	2301      	movne	r3, #1
 8002220:	2300      	moveq	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 8002228:	f000 fa2a 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800222c:	bf00      	nop
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	200003d8 	.word	0x200003d8
 8002238:	40000400 	.word	0x40000400

0800223c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002242:	f107 0308 	add.w	r3, r7, #8
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002250:	463b      	mov	r3, r7
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002258:	4b24      	ldr	r3, [pc, #144]	; (80022ec <_ZL12MX_TIM4_Initv+0xb0>)
 800225a:	4a25      	ldr	r2, [pc, #148]	; (80022f0 <_ZL12MX_TIM4_Initv+0xb4>)
 800225c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 800225e:	4b23      	ldr	r3, [pc, #140]	; (80022ec <_ZL12MX_TIM4_Initv+0xb0>)
 8002260:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002264:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002266:	4b21      	ldr	r3, [pc, #132]	; (80022ec <_ZL12MX_TIM4_Initv+0xb0>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10 - 1;
 800226c:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <_ZL12MX_TIM4_Initv+0xb0>)
 800226e:	2209      	movs	r2, #9
 8002270:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002272:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <_ZL12MX_TIM4_Initv+0xb0>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002278:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <_ZL12MX_TIM4_Initv+0xb0>)
 800227a:	2200      	movs	r2, #0
 800227c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800227e:	481b      	ldr	r0, [pc, #108]	; (80022ec <_ZL12MX_TIM4_Initv+0xb0>)
 8002280:	f002 fade 	bl	8004840 <HAL_TIM_Base_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	bf14      	ite	ne
 800228a:	2301      	movne	r3, #1
 800228c:	2300      	moveq	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8002294:	f000 f9f4 	bl	8002680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800229c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	4619      	mov	r1, r3
 80022a4:	4811      	ldr	r0, [pc, #68]	; (80022ec <_ZL12MX_TIM4_Initv+0xb0>)
 80022a6:	f002 fdd5 	bl	8004e54 <HAL_TIM_ConfigClockSource>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 80022ba:	f000 f9e1 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022c6:	463b      	mov	r3, r7
 80022c8:	4619      	mov	r1, r3
 80022ca:	4808      	ldr	r0, [pc, #32]	; (80022ec <_ZL12MX_TIM4_Initv+0xb0>)
 80022cc:	f003 f9c8 	bl	8005660 <HAL_TIMEx_MasterConfigSynchronization>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bf14      	ite	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	2300      	moveq	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 80022e0:	f000 f9ce 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80022e4:	bf00      	nop
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000420 	.word	0x20000420
 80022f0:	40000800 	.word	0x40000800

080022f4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022f8:	4b13      	ldr	r3, [pc, #76]	; (8002348 <_ZL19MX_USART1_UART_Initv+0x54>)
 80022fa:	4a14      	ldr	r2, [pc, #80]	; (800234c <_ZL19MX_USART1_UART_Initv+0x58>)
 80022fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002304:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800230c:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <_ZL19MX_USART1_UART_Initv+0x54>)
 800230e:	2200      	movs	r2, #0
 8002310:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <_ZL19MX_USART1_UART_Initv+0x54>)
 800231a:	220c      	movs	r2, #12
 800231c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800232a:	4807      	ldr	r0, [pc, #28]	; (8002348 <_ZL19MX_USART1_UART_Initv+0x54>)
 800232c:	f003 fa7d 	bl	800582a <HAL_UART_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	bf14      	ite	ne
 8002336:	2301      	movne	r3, #1
 8002338:	2300      	moveq	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002340:	f000 f99e 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000468 	.word	0x20000468
 800234c:	40013800 	.word	0x40013800

08002350 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002356:	f107 0310 	add.w	r3, r7, #16
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002364:	4b45      	ldr	r3, [pc, #276]	; (800247c <_ZL12MX_GPIO_Initv+0x12c>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	4a44      	ldr	r2, [pc, #272]	; (800247c <_ZL12MX_GPIO_Initv+0x12c>)
 800236a:	f043 0310 	orr.w	r3, r3, #16
 800236e:	6193      	str	r3, [r2, #24]
 8002370:	4b42      	ldr	r3, [pc, #264]	; (800247c <_ZL12MX_GPIO_Initv+0x12c>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800237c:	4b3f      	ldr	r3, [pc, #252]	; (800247c <_ZL12MX_GPIO_Initv+0x12c>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4a3e      	ldr	r2, [pc, #248]	; (800247c <_ZL12MX_GPIO_Initv+0x12c>)
 8002382:	f043 0320 	orr.w	r3, r3, #32
 8002386:	6193      	str	r3, [r2, #24]
 8002388:	4b3c      	ldr	r3, [pc, #240]	; (800247c <_ZL12MX_GPIO_Initv+0x12c>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002394:	4b39      	ldr	r3, [pc, #228]	; (800247c <_ZL12MX_GPIO_Initv+0x12c>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4a38      	ldr	r2, [pc, #224]	; (800247c <_ZL12MX_GPIO_Initv+0x12c>)
 800239a:	f043 0304 	orr.w	r3, r3, #4
 800239e:	6193      	str	r3, [r2, #24]
 80023a0:	4b36      	ldr	r3, [pc, #216]	; (800247c <_ZL12MX_GPIO_Initv+0x12c>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ac:	4b33      	ldr	r3, [pc, #204]	; (800247c <_ZL12MX_GPIO_Initv+0x12c>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	4a32      	ldr	r2, [pc, #200]	; (800247c <_ZL12MX_GPIO_Initv+0x12c>)
 80023b2:	f043 0308 	orr.w	r3, r3, #8
 80023b6:	6193      	str	r3, [r2, #24]
 80023b8:	4b30      	ldr	r3, [pc, #192]	; (800247c <_ZL12MX_GPIO_Initv+0x12c>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80023c4:	2200      	movs	r2, #0
 80023c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ca:	482d      	ldr	r0, [pc, #180]	; (8002480 <_ZL12MX_GPIO_Initv+0x130>)
 80023cc:	f001 fc73 	bl	8003cb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG_Pin|VALVE_DIR_Pin|PUMP_EN_Pin, GPIO_PIN_RESET);
 80023d0:	2200      	movs	r2, #0
 80023d2:	f44f 51a1 	mov.w	r1, #5152	; 0x1420
 80023d6:	482b      	ldr	r0, [pc, #172]	; (8002484 <_ZL12MX_GPIO_Initv+0x134>)
 80023d8:	f001 fc6d 	bl	8003cb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 80023dc:	2200      	movs	r2, #0
 80023de:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 80023e2:	4829      	ldr	r0, [pc, #164]	; (8002488 <_ZL12MX_GPIO_Initv+0x138>)
 80023e4:	f001 fc67 	bl	8003cb6 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80023e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ee:	2301      	movs	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2302      	movs	r3, #2
 80023f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023fa:	f107 0310 	add.w	r3, r7, #16
 80023fe:	4619      	mov	r1, r3
 8002400:	481f      	ldr	r0, [pc, #124]	; (8002480 <_ZL12MX_GPIO_Initv+0x130>)
 8002402:	f001 fabd 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pin : SETPOINT_BUT_Pin */
  GPIO_InitStruct.Pin = SETPOINT_BUT_Pin;
 8002406:	2308      	movs	r3, #8
 8002408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SETPOINT_BUT_GPIO_Port, &GPIO_InitStruct);
 8002412:	f107 0310 	add.w	r3, r7, #16
 8002416:	4619      	mov	r1, r3
 8002418:	481b      	ldr	r0, [pc, #108]	; (8002488 <_ZL12MX_GPIO_Initv+0x138>)
 800241a:	f001 fab1 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin VALVE_DIR_Pin PUMP_EN_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|VALVE_DIR_Pin|PUMP_EN_Pin;
 800241e:	f44f 53a1 	mov.w	r3, #5152	; 0x1420
 8002422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002424:	2301      	movs	r3, #1
 8002426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2302      	movs	r3, #2
 800242e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002430:	f107 0310 	add.w	r3, r7, #16
 8002434:	4619      	mov	r1, r3
 8002436:	4813      	ldr	r0, [pc, #76]	; (8002484 <_ZL12MX_GPIO_Initv+0x134>)
 8002438:	f001 faa2 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 800243c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	4619      	mov	r1, r3
 8002450:	480c      	ldr	r0, [pc, #48]	; (8002484 <_ZL12MX_GPIO_Initv+0x134>)
 8002452:	f001 fa95 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8002456:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 800245a:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245c:	2301      	movs	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002464:	2301      	movs	r3, #1
 8002466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	4619      	mov	r1, r3
 800246e:	4806      	ldr	r0, [pc, #24]	; (8002488 <_ZL12MX_GPIO_Initv+0x138>)
 8002470:	f001 fa86 	bl	8003980 <HAL_GPIO_Init>

}
 8002474:	bf00      	nop
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	40011000 	.word	0x40011000
 8002484:	40010c00 	.word	0x40010c00
 8002488:	40010800 	.word	0x40010800

0800248c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	if (htim == &htim4)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d118      	bne.n	80024ce <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		pump_pid_controller.millisTicker();
 800249c:	480f      	ldr	r0, [pc, #60]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 800249e:	f000 fbaa 	bl	8002bf6 <_ZN13PIDController12millisTickerEv>
		LCDMillisCont++;
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80024ac:	801a      	strh	r2, [r3, #0]
		if (LCDMillisCont > 1000*int(LCD_UPDATE_TIME))
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024b6:	d90a      	bls.n	80024ce <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80024b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024bc:	4809      	ldr	r0, [pc, #36]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80024be:	f001 fc12 	bl	8003ce6 <HAL_GPIO_TogglePin>
			updateLCD = true;
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
			LCDMillisCont = 0;
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	801a      	strh	r2, [r3, #0]
		}
	}

}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000420 	.word	0x20000420
 80024dc:	200004ac 	.word	0x200004ac
 80024e0:	200004f4 	.word	0x200004f4
 80024e4:	40011000 	.word	0x40011000
 80024e8:	200000ff 	.word	0x200000ff

080024ec <_Z8sendData12HeightSensor>:

void sendData(HeightSensor usensor)
{
 80024ec:	b084      	sub	sp, #16
 80024ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f2:	b097      	sub	sp, #92	; 0x5c
 80024f4:	af0a      	add	r7, sp, #40	; 0x28
 80024f6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80024fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char buffer[36];
	sprintf(buffer, "%d,%.2f,%.2f,%.2f,%.2f,%.2f\n",
					HAL_GetTick() - startMillis, usensor.getDistRaw(),
 80024fe:	f000 fcd7 	bl	8002eb0 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
	sprintf(buffer, "%d,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 8002504:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <_Z8sendData12HeightSensor+0xc4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	1ad6      	subs	r6, r2, r3
					HAL_GetTick() - startMillis, usensor.getDistRaw(),
 800250a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800250e:	f7fe fecf 	bl	80012b0 <_ZN12HeightSensor10getDistRawEv>
 8002512:	4603      	mov	r3, r0
	sprintf(buffer, "%d,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 8002514:	4618      	mov	r0, r3
 8002516:	f7fd ff87 	bl	8000428 <__aeabi_f2d>
 800251a:	4604      	mov	r4, r0
 800251c:	460d      	mov	r5, r1
					usensor.getDistFiltered() ,usensor.getWaterHeight(),
 800251e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002522:	f7fe fed1 	bl	80012c8 <_ZN12HeightSensor15getDistFilteredEv>
 8002526:	4603      	mov	r3, r0
	sprintf(buffer, "%d,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 8002528:	4618      	mov	r0, r3
 800252a:	f7fd ff7d 	bl	8000428 <__aeabi_f2d>
 800252e:	4680      	mov	r8, r0
 8002530:	4689      	mov	r9, r1
					usensor.getDistFiltered() ,usensor.getWaterHeight(),
 8002532:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002536:	f7fe fed3 	bl	80012e0 <_ZN12HeightSensor14getWaterHeightEv>
 800253a:	4603      	mov	r3, r0
	sprintf(buffer, "%d,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 800253c:	4618      	mov	r0, r3
 800253e:	f7fd ff73 	bl	8000428 <__aeabi_f2d>
 8002542:	4682      	mov	sl, r0
 8002544:	468b      	mov	fp, r1
 8002546:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <_Z8sendData12HeightSensor+0xc8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fd ff6c 	bl	8000428 <__aeabi_f2d>
 8002550:	e9c7 0100 	strd	r0, r1, [r7]
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <_Z8sendData12HeightSensor+0xcc>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fd ff65 	bl	8000428 <__aeabi_f2d>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	f107 000c 	add.w	r0, r7, #12
 8002566:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800256a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800256e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002572:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002576:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800257a:	e9cd 4500 	strd	r4, r5, [sp]
 800257e:	4632      	mov	r2, r6
 8002580:	490e      	ldr	r1, [pc, #56]	; (80025bc <_Z8sendData12HeightSensor+0xd0>)
 8002582:	f003 ffa9 	bl	80064d8 <siprintf>
					setpoint, pidVal);
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 100);
 8002586:	f107 030c 	add.w	r3, r7, #12
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd fde0 	bl	8000150 <strlen>
 8002590:	4603      	mov	r3, r0
 8002592:	b29a      	uxth	r2, r3
 8002594:	f107 010c 	add.w	r1, r7, #12
 8002598:	2364      	movs	r3, #100	; 0x64
 800259a:	4809      	ldr	r0, [pc, #36]	; (80025c0 <_Z8sendData12HeightSensor+0xd4>)
 800259c:	f003 f992 	bl	80058c4 <HAL_UART_Transmit>
}
 80025a0:	bf00      	nop
 80025a2:	3734      	adds	r7, #52	; 0x34
 80025a4:	46bd      	mov	sp, r7
 80025a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025aa:	b004      	add	sp, #16
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	200004f8 	.word	0x200004f8
 80025b4:	200004ec 	.word	0x200004ec
 80025b8:	200004f0 	.word	0x200004f0
 80025bc:	080089ec 	.word	0x080089ec
 80025c0:	20000468 	.word	0x20000468

080025c4 <_Z10closeValvev>:

void closeValve()
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
	lcd16x2_clear();
 80025c8:	f7ff fa0c 	bl	80019e4 <_Z13lcd16x2_clearv>
	lcd16x2_printf("Fechando Valvula");
 80025cc:	480b      	ldr	r0, [pc, #44]	; (80025fc <_Z10closeValvev+0x38>)
 80025ce:	f7ff fa13 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
	HAL_GPIO_WritePin(VALVE_DIR_GPIO_Port, VALVE_DIR_Pin, GPIO_PIN_RESET);
 80025d2:	2200      	movs	r2, #0
 80025d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025d8:	4809      	ldr	r0, [pc, #36]	; (8002600 <_Z10closeValvev+0x3c>)
 80025da:	f001 fb6c 	bl	8003cb6 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 625);
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <_Z10closeValvev+0x40>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f240 2271 	movw	r2, #625	; 0x271
 80025e6:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(4500);
 80025e8:	f241 1094 	movw	r0, #4500	; 0x1194
 80025ec:	f000 fc6a 	bl	8002ec4 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <_Z10closeValvev+0x40>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2200      	movs	r2, #0
 80025f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	08008a0c 	.word	0x08008a0c
 8002600:	40010c00 	.word	0x40010c00
 8002604:	20000348 	.word	0x20000348

08002608 <_Z8fillTankv>:

void fillTank()
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	lcd16x2_clear();
 800260c:	f7ff f9ea 	bl	80019e4 <_Z13lcd16x2_clearv>
	lcd16x2_printf("Enchendo tanque");
 8002610:	4808      	ldr	r0, [pc, #32]	; (8002634 <_Z8fillTankv+0x2c>)
 8002612:	f7ff f9f1 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 625);
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <_Z8fillTankv+0x30>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f240 2271 	movw	r2, #625	; 0x271
 800261e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(6000);
 8002620:	f241 7070 	movw	r0, #6000	; 0x1770
 8002624:	f000 fc4e 	bl	8002ec4 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <_Z8fillTankv+0x30>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2200      	movs	r2, #0
 800262e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	08008a20 	.word	0x08008a20
 8002638:	20000348 	.word	0x20000348

0800263c <_Z9openValvev>:

void openValve()
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	lcd16x2_clear();
 8002640:	f7ff f9d0 	bl	80019e4 <_Z13lcd16x2_clearv>
	lcd16x2_printf("Abrindo Valvula");
 8002644:	480b      	ldr	r0, [pc, #44]	; (8002674 <_Z9openValvev+0x38>)
 8002646:	f7ff f9d7 	bl	80019f8 <_Z14lcd16x2_printfPKcz>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 625);
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <_Z9openValvev+0x3c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f240 2271 	movw	r2, #625	; 0x271
 8002652:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(VALVE_DIR_GPIO_Port, VALVE_DIR_Pin, GPIO_PIN_SET);
 8002654:	2201      	movs	r2, #1
 8002656:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800265a:	4808      	ldr	r0, [pc, #32]	; (800267c <_Z9openValvev+0x40>)
 800265c:	f001 fb2b 	bl	8003cb6 <HAL_GPIO_WritePin>
	HAL_Delay(1600);
 8002660:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8002664:	f000 fc2e 	bl	8002ec4 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <_Z9openValvev+0x3c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2200      	movs	r2, #0
 800266e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	08008a30 	.word	0x08008a30
 8002678:	20000348 	.word	0x20000348
 800267c:	40010c00 	.word	0x40010c00

08002680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002684:	b672      	cpsid	i
}
 8002686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002688:	e7fe      	b.n	8002688 <Error_Handler+0x8>
	...

0800268c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d107      	bne.n	80026ac <_Z41__static_initialization_and_destruction_0ii+0x20>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d102      	bne.n	80026ac <_Z41__static_initialization_and_destruction_0ii+0x20>
PIDController pump_pid_controller;
 80026a6:	4809      	ldr	r0, [pc, #36]	; (80026cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80026a8:	f000 fa76 	bl	8002b98 <_ZN13PIDControllerC1Ev>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d107      	bne.n	80026c2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d102      	bne.n	80026c2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80026bc:	4803      	ldr	r0, [pc, #12]	; (80026cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80026be:	f000 fa90 	bl	8002be2 <_ZN13PIDControllerD1Ev>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200004ac 	.word	0x200004ac

080026d0 <_GLOBAL__sub_I__Z18lcd16x2_init_8bitsP12GPIO_TypeDefttS0_ttttS0_tttt>:
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026d8:	2001      	movs	r0, #1
 80026da:	f7ff ffd7 	bl	800268c <_Z41__static_initialization_and_destruction_0ii>
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_GLOBAL__sub_D__Z18lcd16x2_init_8bitsP12GPIO_TypeDefttS0_ttttS0_tttt>:
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7ff ffcf 	bl	800268c <_Z41__static_initialization_and_destruction_0ii>
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_MspInit+0x5c>)
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	4a14      	ldr	r2, [pc, #80]	; (800274c <HAL_MspInit+0x5c>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6193      	str	r3, [r2, #24]
 8002702:	4b12      	ldr	r3, [pc, #72]	; (800274c <HAL_MspInit+0x5c>)
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_MspInit+0x5c>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a0e      	ldr	r2, [pc, #56]	; (800274c <HAL_MspInit+0x5c>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	61d3      	str	r3, [r2, #28]
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_MspInit+0x5c>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <HAL_MspInit+0x60>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	4a04      	ldr	r2, [pc, #16]	; (8002750 <HAL_MspInit+0x60>)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	40021000 	.word	0x40021000
 8002750:	40010000 	.word	0x40010000

08002754 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 0310 	add.w	r3, r7, #16
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <HAL_ADC_MspInit+0x6c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d121      	bne.n	80027b8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002774:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <HAL_ADC_MspInit+0x70>)
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <HAL_ADC_MspInit+0x70>)
 800277a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800277e:	6193      	str	r3, [r2, #24]
 8002780:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_ADC_MspInit+0x70>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_ADC_MspInit+0x70>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <HAL_ADC_MspInit+0x70>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	6193      	str	r3, [r2, #24]
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <HAL_ADC_MspInit+0x70>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = SETPOINT_POT_Pin;
 80027a4:	2301      	movs	r3, #1
 80027a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a8:	2303      	movs	r3, #3
 80027aa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SETPOINT_POT_GPIO_Port, &GPIO_InitStruct);
 80027ac:	f107 0310 	add.w	r3, r7, #16
 80027b0:	4619      	mov	r1, r3
 80027b2:	4805      	ldr	r0, [pc, #20]	; (80027c8 <HAL_ADC_MspInit+0x74>)
 80027b4:	f001 f8e4 	bl	8003980 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027b8:	bf00      	nop
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40012400 	.word	0x40012400
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40010800 	.word	0x40010800

080027cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a28      	ldr	r2, [pc, #160]	; (800287c <HAL_TIM_Base_MspInit+0xb0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d10c      	bne.n	80027f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027de:	4b28      	ldr	r3, [pc, #160]	; (8002880 <HAL_TIM_Base_MspInit+0xb4>)
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	4a27      	ldr	r2, [pc, #156]	; (8002880 <HAL_TIM_Base_MspInit+0xb4>)
 80027e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027e8:	6193      	str	r3, [r2, #24]
 80027ea:	4b25      	ldr	r3, [pc, #148]	; (8002880 <HAL_TIM_Base_MspInit+0xb4>)
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027f6:	e03c      	b.n	8002872 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002800:	d10c      	bne.n	800281c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002802:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <HAL_TIM_Base_MspInit+0xb4>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <HAL_TIM_Base_MspInit+0xb4>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	61d3      	str	r3, [r2, #28]
 800280e:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <HAL_TIM_Base_MspInit+0xb4>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]
}
 800281a:	e02a      	b.n	8002872 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_TIM_Base_MspInit+0xb8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10c      	bne.n	8002840 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002826:	4b16      	ldr	r3, [pc, #88]	; (8002880 <HAL_TIM_Base_MspInit+0xb4>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4a15      	ldr	r2, [pc, #84]	; (8002880 <HAL_TIM_Base_MspInit+0xb4>)
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	61d3      	str	r3, [r2, #28]
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <HAL_TIM_Base_MspInit+0xb4>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
}
 800283e:	e018      	b.n	8002872 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a10      	ldr	r2, [pc, #64]	; (8002888 <HAL_TIM_Base_MspInit+0xbc>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d113      	bne.n	8002872 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <HAL_TIM_Base_MspInit+0xb4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <HAL_TIM_Base_MspInit+0xb4>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	61d3      	str	r3, [r2, #28]
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <HAL_TIM_Base_MspInit+0xb4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2100      	movs	r1, #0
 8002866:	201e      	movs	r0, #30
 8002868:	f001 f853 	bl	8003912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800286c:	201e      	movs	r0, #30
 800286e:	f001 f86c 	bl	800394a <HAL_NVIC_EnableIRQ>
}
 8002872:	bf00      	nop
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40021000 	.word	0x40021000
 8002884:	40000400 	.word	0x40000400
 8002888:	40000800 	.word	0x40000800

0800288c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0310 	add.w	r3, r7, #16
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a10      	ldr	r2, [pc, #64]	; (80028e8 <HAL_TIM_MspPostInit+0x5c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d118      	bne.n	80028de <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <HAL_TIM_MspPostInit+0x60>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <HAL_TIM_MspPostInit+0x60>)
 80028b2:	f043 0308 	orr.w	r3, r3, #8
 80028b6:	6193      	str	r3, [r2, #24]
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <HAL_TIM_MspPostInit+0x60>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = VALVE_PWM_Pin|PUMP_PWM_Pin;
 80028c4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80028c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2302      	movs	r3, #2
 80028d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d2:	f107 0310 	add.w	r3, r7, #16
 80028d6:	4619      	mov	r1, r3
 80028d8:	4805      	ldr	r0, [pc, #20]	; (80028f0 <HAL_TIM_MspPostInit+0x64>)
 80028da:	f001 f851 	bl	8003980 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028de:	bf00      	nop
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40010c00 	.word	0x40010c00

080028f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a22      	ldr	r2, [pc, #136]	; (8002998 <HAL_UART_MspInit+0xa4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d13d      	bne.n	8002990 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002914:	4b21      	ldr	r3, [pc, #132]	; (800299c <HAL_UART_MspInit+0xa8>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	4a20      	ldr	r2, [pc, #128]	; (800299c <HAL_UART_MspInit+0xa8>)
 800291a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800291e:	6193      	str	r3, [r2, #24]
 8002920:	4b1e      	ldr	r3, [pc, #120]	; (800299c <HAL_UART_MspInit+0xa8>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <HAL_UART_MspInit+0xa8>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	4a1a      	ldr	r2, [pc, #104]	; (800299c <HAL_UART_MspInit+0xa8>)
 8002932:	f043 0308 	orr.w	r3, r3, #8
 8002936:	6193      	str	r3, [r2, #24]
 8002938:	4b18      	ldr	r3, [pc, #96]	; (800299c <HAL_UART_MspInit+0xa8>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002944:	2340      	movs	r3, #64	; 0x40
 8002946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	2302      	movs	r3, #2
 800294a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4619      	mov	r1, r3
 8002956:	4812      	ldr	r0, [pc, #72]	; (80029a0 <HAL_UART_MspInit+0xac>)
 8002958:	f001 f812 	bl	8003980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002968:	f107 0314 	add.w	r3, r7, #20
 800296c:	4619      	mov	r1, r3
 800296e:	480c      	ldr	r0, [pc, #48]	; (80029a0 <HAL_UART_MspInit+0xac>)
 8002970:	f001 f806 	bl	8003980 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_UART_MspInit+0xb0>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
 800298a:	4a06      	ldr	r2, [pc, #24]	; (80029a4 <HAL_UART_MspInit+0xb0>)
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002990:	bf00      	nop
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40013800 	.word	0x40013800
 800299c:	40021000 	.word	0x40021000
 80029a0:	40010c00 	.word	0x40010c00
 80029a4:	40010000 	.word	0x40010000

080029a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029ac:	e7fe      	b.n	80029ac <NMI_Handler+0x4>

080029ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b2:	e7fe      	b.n	80029b2 <HardFault_Handler+0x4>

080029b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029b8:	e7fe      	b.n	80029b8 <MemManage_Handler+0x4>

080029ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029be:	e7fe      	b.n	80029be <BusFault_Handler+0x4>

080029c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029c4:	e7fe      	b.n	80029c4 <UsageFault_Handler+0x4>

080029c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr

080029d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ee:	f000 fa4d 	bl	8002e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029fc:	4802      	ldr	r0, [pc, #8]	; (8002a08 <TIM4_IRQHandler+0x10>)
 80029fe:	f002 f863 	bl	8004ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000420 	.word	0x20000420

08002a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
	return 1;
 8002a10:	2301      	movs	r3, #1
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <_kill>:

int _kill(int pid, int sig)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a24:	f003 f8b8 	bl	8005b98 <__errno>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2216      	movs	r2, #22
 8002a2c:	601a      	str	r2, [r3, #0]
	return -1;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_exit>:

void _exit (int status)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ffe7 	bl	8002a1a <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a4c:	e7fe      	b.n	8002a4c <_exit+0x12>

08002a4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e00a      	b.n	8002a76 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a60:	f3af 8000 	nop.w
 8002a64:	4601      	mov	r1, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	60ba      	str	r2, [r7, #8]
 8002a6c:	b2ca      	uxtb	r2, r1
 8002a6e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	3301      	adds	r3, #1
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	dbf0      	blt.n	8002a60 <_read+0x12>
	}

return len;
 8002a7e:	687b      	ldr	r3, [r7, #4]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	e009      	b.n	8002aae <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	60ba      	str	r2, [r7, #8]
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	dbf1      	blt.n	8002a9a <_write+0x12>
	}
	return len;
 8002ab6:	687b      	ldr	r3, [r7, #4]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <_close>:

int _close(int file)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	return -1;
 8002ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae6:	605a      	str	r2, [r3, #4]
	return 0;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <_isatty>:

int _isatty(int file)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	return 1;
 8002afc:	2301      	movs	r3, #1
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
	return 0;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b28:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <_sbrk+0x5c>)
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <_sbrk+0x60>)
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b34:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <_sbrk+0x64>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d102      	bne.n	8002b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <_sbrk+0x64>)
 8002b3e:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <_sbrk+0x68>)
 8002b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <_sbrk+0x64>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d207      	bcs.n	8002b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b50:	f003 f822 	bl	8005b98 <__errno>
 8002b54:	4603      	mov	r3, r0
 8002b56:	220c      	movs	r2, #12
 8002b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b5e:	e009      	b.n	8002b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <_sbrk+0x64>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <_sbrk+0x64>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <_sbrk+0x64>)
 8002b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b72:	68fb      	ldr	r3, [r7, #12]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20005000 	.word	0x20005000
 8002b80:	00000400 	.word	0x00000400
 8002b84:	200004fc 	.word	0x200004fc
 8002b88:	20000520 	.word	0x20000520

08002b8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <_ZN13PIDControllerC1Ev>:
 */

#include "PIDController.h"


PIDController::PIDController()
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	611a      	str	r2, [r3, #16]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	615a      	str	r2, [r3, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	61da      	str	r2, [r3, #28]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38
{
}
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <_ZN13PIDControllerD1Ev>:
PIDController::PIDController(float kp, float ki, float kd)
  : _kp(kp), _ki(ki), _kd(kd)
{
}

PIDController::~PIDController()
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
{
}
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <_ZN13PIDController12millisTickerEv>:

void PIDController::millisTicker(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  this->_millis++;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <_ZN13PIDController7setKPIDEfff>:

void PIDController::setKPID(float kp, float ki, float kd)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b085      	sub	sp, #20
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	603b      	str	r3, [r7, #0]
  this->_kp = kp;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	601a      	str	r2, [r3, #0]
  this->_ki = ki;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	605a      	str	r2, [r3, #4]
  this->_kd = kd;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	609a      	str	r2, [r3, #8]
}
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <_ZN13PIDController11setSetpointEf>:
{
  this->_kd = kd;
}

void PIDController::setSetpoint(float setpoint)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  this->_setpoint = setpoint;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr

08002c56 <_ZN13PIDController12setPIDLimitsEff>:

void PIDController::setPIDLimits(float min, float max)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
  this->_pid_min = min;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	635a      	str	r2, [r3, #52]	; 0x34
  this->_pid_max = max;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <_ZN13PIDController10processPIDEf>:
{
  return this->_error;
}

float PIDController::processPID(float curr_point)
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  this->_curr_time = this->_millis / 1000.0;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fbac 	bl	80003e4 <__aeabi_ui2d>
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	4b47      	ldr	r3, [pc, #284]	; (8002db0 <_ZN13PIDController10processPIDEf+0x138>)
 8002c92:	f7fd fd4b 	bl	800072c <__aeabi_ddiv>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f7fd ff13 	bl	8000ac8 <__aeabi_d2f>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	621a      	str	r2, [r3, #32]
  this->_delta_time = this->_curr_time - this->_last_time;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1a      	ldr	r2, [r3, #32]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	f7fd ff5c 	bl	8000b70 <__aeabi_fsub>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24

  this->_error = this->_setpoint - curr_point;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	6839      	ldr	r1, [r7, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fd ff52 	bl	8000b70 <__aeabi_fsub>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	60da      	str	r2, [r3, #12]
  this->_sum_error  += this->_error;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f7fd ff48 	bl	8000b74 <__addsf3>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	611a      	str	r2, [r3, #16]
  this->_delta_error = this->_last_error - this->_error;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	f7fd ff3a 	bl	8000b70 <__aeabi_fsub>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	461a      	mov	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	619a      	str	r2, [r3, #24]

  this->_pid_result  = this->_kp * this->_error
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	f7fe f838 	bl	8000d84 <__aeabi_fmul>
 8002d14:	4603      	mov	r3, r0
 8002d16:	461c      	mov	r4, r3
                     + this->_ki * this->_sum_error * this->_delta_time;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f7fe f82e 	bl	8000d84 <__aeabi_fmul>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	4619      	mov	r1, r3
 8002d32:	4610      	mov	r0, r2
 8002d34:	f7fe f826 	bl	8000d84 <__aeabi_fmul>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f7fd ff19 	bl	8000b74 <__addsf3>
 8002d42:	4603      	mov	r3, r0
 8002d44:	461a      	mov	r2, r3
  this->_pid_result  = this->_kp * this->_error
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c
                     + this->_kd * this->_delta_error / this->_delta_time;

  this->_last_time = this->_curr_time;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1a      	ldr	r2, [r3, #32]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	61da      	str	r2, [r3, #28]
  this->_last_error = this->_error;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	615a      	str	r2, [r3, #20]

  this->_pid_result = this->_pid_result < this->_pid_min ? this->_pid_min : this->_pid_result;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d62:	4619      	mov	r1, r3
 8002d64:	4610      	mov	r0, r2
 8002d66:	f7fe f9ab 	bl	80010c0 <__aeabi_fcmplt>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <_ZN13PIDController10processPIDEf+0xfe>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d74:	e001      	b.n	8002d7a <_ZN13PIDController10processPIDEf+0x102>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	62d3      	str	r3, [r2, #44]	; 0x2c
  this->_pid_result = this->_pid_result > this->_pid_max ? this->_pid_max : this->_pid_result;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f7fe f9b7 	bl	80010fc <__aeabi_fcmpgt>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <_ZN13PIDController10processPIDEf+0x122>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	e001      	b.n	8002d9e <_ZN13PIDController10processPIDEf+0x126>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	62d3      	str	r3, [r2, #44]	; 0x2c

  return this->_pid_result;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd90      	pop	{r4, r7, pc}
 8002dae:	bf00      	nop
 8002db0:	408f4000 	.word	0x408f4000

08002db4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002db4:	480c      	ldr	r0, [pc, #48]	; (8002de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002db6:	490d      	ldr	r1, [pc, #52]	; (8002dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002db8:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dbc:	e002      	b.n	8002dc4 <LoopCopyDataInit>

08002dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dc2:	3304      	adds	r3, #4

08002dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc8:	d3f9      	bcc.n	8002dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dcc:	4c0a      	ldr	r4, [pc, #40]	; (8002df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dd0:	e001      	b.n	8002dd6 <LoopFillZerobss>

08002dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd4:	3204      	adds	r2, #4

08002dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd8:	d3fb      	bcc.n	8002dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002dda:	f7ff fed7 	bl	8002b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dde:	f002 fee1 	bl	8005ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002de2:	f7fe fe39 	bl	8001a58 <main>
  bx lr
 8002de6:	4770      	bx	lr
  ldr r0, =_sdata
 8002de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dec:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8002df0:	08008e6c 	.word	0x08008e6c
  ldr r2, =_sbss
 8002df4:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8002df8:	2000051c 	.word	0x2000051c

08002dfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dfc:	e7fe      	b.n	8002dfc <ADC1_2_IRQHandler>
	...

08002e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_Init+0x28>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <HAL_Init+0x28>)
 8002e0a:	f043 0310 	orr.w	r3, r3, #16
 8002e0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e10:	2003      	movs	r0, #3
 8002e12:	f000 fd73 	bl	80038fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e16:	200f      	movs	r0, #15
 8002e18:	f000 f808 	bl	8002e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e1c:	f7ff fc68 	bl	80026f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40022000 	.word	0x40022000

08002e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_InitTick+0x54>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_InitTick+0x58>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fd8b 	bl	8003966 <HAL_SYSTICK_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00e      	b.n	8002e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d80a      	bhi.n	8002e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e60:	2200      	movs	r2, #0
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e68:	f000 fd53 	bl	8003912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e6c:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <HAL_InitTick+0x5c>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000100 	.word	0x20000100
 8002e84:	20000108 	.word	0x20000108
 8002e88:	20000104 	.word	0x20000104

08002e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_IncTick+0x1c>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_IncTick+0x20>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	4a03      	ldr	r2, [pc, #12]	; (8002eac <HAL_IncTick+0x20>)
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	20000108 	.word	0x20000108
 8002eac:	20000508 	.word	0x20000508

08002eb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb4:	4b02      	ldr	r3, [pc, #8]	; (8002ec0 <HAL_GetTick+0x10>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	20000508 	.word	0x20000508

08002ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7ff fff0 	bl	8002eb0 <HAL_GetTick>
 8002ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002edc:	d005      	beq.n	8002eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ede:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <HAL_Delay+0x44>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eea:	bf00      	nop
 8002eec:	f7ff ffe0 	bl	8002eb0 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d8f7      	bhi.n	8002eec <HAL_Delay+0x28>
  {
  }
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000108 	.word	0x20000108

08002f0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0be      	b.n	80030ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d109      	bne.n	8002f50 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff fc02 	bl	8002754 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fbc5 	bl	80036e0 <ADC_ConversionStop_Disable>
 8002f56:	4603      	mov	r3, r0
 8002f58:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f040 8099 	bne.w	800309a <HAL_ADC_Init+0x18e>
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f040 8095 	bne.w	800309a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f78:	f023 0302 	bic.w	r3, r3, #2
 8002f7c:	f043 0202 	orr.w	r2, r3, #2
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f8c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7b1b      	ldrb	r3, [r3, #12]
 8002f92:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f94:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa4:	d003      	beq.n	8002fae <HAL_ADC_Init+0xa2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d102      	bne.n	8002fb4 <HAL_ADC_Init+0xa8>
 8002fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fb2:	e000      	b.n	8002fb6 <HAL_ADC_Init+0xaa>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7d1b      	ldrb	r3, [r3, #20]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d119      	bne.n	8002ff8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7b1b      	ldrb	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d109      	bne.n	8002fe0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	035a      	lsls	r2, r3, #13
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	e00b      	b.n	8002ff8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	f043 0201 	orr.w	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	430a      	orrs	r2, r1
 800300a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	4b28      	ldr	r3, [pc, #160]	; (80030b4 <HAL_ADC_Init+0x1a8>)
 8003014:	4013      	ands	r3, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	430b      	orrs	r3, r1
 800301e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003028:	d003      	beq.n	8003032 <HAL_ADC_Init+0x126>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d104      	bne.n	800303c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	3b01      	subs	r3, #1
 8003038:	051b      	lsls	r3, r3, #20
 800303a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	430a      	orrs	r2, r1
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <HAL_ADC_Init+0x1ac>)
 8003058:	4013      	ands	r3, r2
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	429a      	cmp	r2, r3
 800305e:	d10b      	bne.n	8003078 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	f023 0303 	bic.w	r3, r3, #3
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003076:	e018      	b.n	80030aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	f023 0312 	bic.w	r3, r3, #18
 8003080:	f043 0210 	orr.w	r2, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	f043 0201 	orr.w	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003098:	e007      	b.n	80030aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	f043 0210 	orr.w	r2, r3, #16
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	ffe1f7fd 	.word	0xffe1f7fd
 80030b8:	ff1f0efe 	.word	0xff1f0efe

080030bc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_Start+0x1a>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e098      	b.n	8003208 <HAL_ADC_Start+0x14c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 faa4 	bl	800362c <ADC_Enable>
 80030e4:	4603      	mov	r3, r0
 80030e6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f040 8087 	bne.w	80031fe <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a41      	ldr	r2, [pc, #260]	; (8003210 <HAL_ADC_Start+0x154>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d105      	bne.n	800311a <HAL_ADC_Start+0x5e>
 800310e:	4b41      	ldr	r3, [pc, #260]	; (8003214 <HAL_ADC_Start+0x158>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d115      	bne.n	8003146 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003130:	2b00      	cmp	r3, #0
 8003132:	d026      	beq.n	8003182 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800313c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003144:	e01d      	b.n	8003182 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2f      	ldr	r2, [pc, #188]	; (8003214 <HAL_ADC_Start+0x158>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d004      	beq.n	8003166 <HAL_ADC_Start+0xaa>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a2b      	ldr	r2, [pc, #172]	; (8003210 <HAL_ADC_Start+0x154>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d10d      	bne.n	8003182 <HAL_ADC_Start+0xc6>
 8003166:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_ADC_Start+0x158>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800317a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d006      	beq.n	800319c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	f023 0206 	bic.w	r2, r3, #6
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	62da      	str	r2, [r3, #44]	; 0x2c
 800319a:	e002      	b.n	80031a2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f06f 0202 	mvn.w	r2, #2
 80031b2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031c2:	d113      	bne.n	80031ec <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031c8:	4a11      	ldr	r2, [pc, #68]	; (8003210 <HAL_ADC_Start+0x154>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d105      	bne.n	80031da <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031ce:	4b11      	ldr	r3, [pc, #68]	; (8003214 <HAL_ADC_Start+0x158>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d108      	bne.n	80031ec <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	e00c      	b.n	8003206 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	e003      	b.n	8003206 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40012800 	.word	0x40012800
 8003214:	40012400 	.word	0x40012400

08003218 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800322e:	f7ff fe3f 	bl	8002eb0 <HAL_GetTick>
 8003232:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00b      	beq.n	800325a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	f043 0220 	orr.w	r2, r3, #32
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e0d3      	b.n	8003402 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003264:	2b00      	cmp	r3, #0
 8003266:	d131      	bne.n	80032cc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003272:	2b00      	cmp	r3, #0
 8003274:	d12a      	bne.n	80032cc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003276:	e021      	b.n	80032bc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800327e:	d01d      	beq.n	80032bc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <HAL_ADC_PollForConversion+0x7e>
 8003286:	f7ff fe13 	bl	8002eb0 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d212      	bcs.n	80032bc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	f043 0204 	orr.w	r2, r3, #4
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e0a2      	b.n	8003402 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0d6      	beq.n	8003278 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032ca:	e070      	b.n	80033ae <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80032cc:	4b4f      	ldr	r3, [pc, #316]	; (800340c <HAL_ADC_PollForConversion+0x1f4>)
 80032ce:	681c      	ldr	r4, [r3, #0]
 80032d0:	2002      	movs	r0, #2
 80032d2:	f001 f9f1 	bl	80046b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80032d6:	4603      	mov	r3, r0
 80032d8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6919      	ldr	r1, [r3, #16]
 80032e2:	4b4b      	ldr	r3, [pc, #300]	; (8003410 <HAL_ADC_PollForConversion+0x1f8>)
 80032e4:	400b      	ands	r3, r1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d118      	bne.n	800331c <HAL_ADC_PollForConversion+0x104>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68d9      	ldr	r1, [r3, #12]
 80032f0:	4b48      	ldr	r3, [pc, #288]	; (8003414 <HAL_ADC_PollForConversion+0x1fc>)
 80032f2:	400b      	ands	r3, r1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d111      	bne.n	800331c <HAL_ADC_PollForConversion+0x104>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6919      	ldr	r1, [r3, #16]
 80032fe:	4b46      	ldr	r3, [pc, #280]	; (8003418 <HAL_ADC_PollForConversion+0x200>)
 8003300:	400b      	ands	r3, r1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d108      	bne.n	8003318 <HAL_ADC_PollForConversion+0x100>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68d9      	ldr	r1, [r3, #12]
 800330c:	4b43      	ldr	r3, [pc, #268]	; (800341c <HAL_ADC_PollForConversion+0x204>)
 800330e:	400b      	ands	r3, r1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_ADC_PollForConversion+0x100>
 8003314:	2314      	movs	r3, #20
 8003316:	e020      	b.n	800335a <HAL_ADC_PollForConversion+0x142>
 8003318:	2329      	movs	r3, #41	; 0x29
 800331a:	e01e      	b.n	800335a <HAL_ADC_PollForConversion+0x142>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6919      	ldr	r1, [r3, #16]
 8003322:	4b3d      	ldr	r3, [pc, #244]	; (8003418 <HAL_ADC_PollForConversion+0x200>)
 8003324:	400b      	ands	r3, r1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d106      	bne.n	8003338 <HAL_ADC_PollForConversion+0x120>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68d9      	ldr	r1, [r3, #12]
 8003330:	4b3a      	ldr	r3, [pc, #232]	; (800341c <HAL_ADC_PollForConversion+0x204>)
 8003332:	400b      	ands	r3, r1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00d      	beq.n	8003354 <HAL_ADC_PollForConversion+0x13c>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6919      	ldr	r1, [r3, #16]
 800333e:	4b38      	ldr	r3, [pc, #224]	; (8003420 <HAL_ADC_PollForConversion+0x208>)
 8003340:	400b      	ands	r3, r1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d108      	bne.n	8003358 <HAL_ADC_PollForConversion+0x140>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68d9      	ldr	r1, [r3, #12]
 800334c:	4b34      	ldr	r3, [pc, #208]	; (8003420 <HAL_ADC_PollForConversion+0x208>)
 800334e:	400b      	ands	r3, r1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_ADC_PollForConversion+0x140>
 8003354:	2354      	movs	r3, #84	; 0x54
 8003356:	e000      	b.n	800335a <HAL_ADC_PollForConversion+0x142>
 8003358:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800335a:	fb02 f303 	mul.w	r3, r2, r3
 800335e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003360:	e021      	b.n	80033a6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003368:	d01a      	beq.n	80033a0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <HAL_ADC_PollForConversion+0x168>
 8003370:	f7ff fd9e 	bl	8002eb0 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d20f      	bcs.n	80033a0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	429a      	cmp	r2, r3
 8003386:	d90b      	bls.n	80033a0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	f043 0204 	orr.w	r2, r3, #4
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e030      	b.n	8003402 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3301      	adds	r3, #1
 80033a4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d8d9      	bhi.n	8003362 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f06f 0212 	mvn.w	r2, #18
 80033b6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033d2:	d115      	bne.n	8003400 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d111      	bne.n	8003400 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d105      	bne.n	8003400 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	f043 0201 	orr.w	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}
 800340a:	bf00      	nop
 800340c:	20000100 	.word	0x20000100
 8003410:	24924924 	.word	0x24924924
 8003414:	00924924 	.word	0x00924924
 8003418:	12492492 	.word	0x12492492
 800341c:	00492492 	.word	0x00492492
 8003420:	00249249 	.word	0x00249249

08003424 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_ADC_ConfigChannel+0x20>
 8003458:	2302      	movs	r3, #2
 800345a:	e0dc      	b.n	8003616 <HAL_ADC_ConfigChannel+0x1da>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b06      	cmp	r3, #6
 800346a:	d81c      	bhi.n	80034a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	3b05      	subs	r3, #5
 800347e:	221f      	movs	r2, #31
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	4019      	ands	r1, r3
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	3b05      	subs	r3, #5
 8003498:	fa00 f203 	lsl.w	r2, r0, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34
 80034a4:	e03c      	b.n	8003520 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b0c      	cmp	r3, #12
 80034ac:	d81c      	bhi.n	80034e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	3b23      	subs	r3, #35	; 0x23
 80034c0:	221f      	movs	r2, #31
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	4019      	ands	r1, r3
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	3b23      	subs	r3, #35	; 0x23
 80034da:	fa00 f203 	lsl.w	r2, r0, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	631a      	str	r2, [r3, #48]	; 0x30
 80034e6:	e01b      	b.n	8003520 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	3b41      	subs	r3, #65	; 0x41
 80034fa:	221f      	movs	r2, #31
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	4019      	ands	r1, r3
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	3b41      	subs	r3, #65	; 0x41
 8003514:	fa00 f203 	lsl.w	r2, r0, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b09      	cmp	r3, #9
 8003526:	d91c      	bls.n	8003562 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68d9      	ldr	r1, [r3, #12]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	4413      	add	r3, r2
 8003538:	3b1e      	subs	r3, #30
 800353a:	2207      	movs	r2, #7
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	4019      	ands	r1, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6898      	ldr	r0, [r3, #8]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	3b1e      	subs	r3, #30
 8003554:	fa00 f203 	lsl.w	r2, r0, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	60da      	str	r2, [r3, #12]
 8003560:	e019      	b.n	8003596 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6919      	ldr	r1, [r3, #16]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	4413      	add	r3, r2
 8003572:	2207      	movs	r2, #7
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	4019      	ands	r1, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	6898      	ldr	r0, [r3, #8]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	fa00 f203 	lsl.w	r2, r0, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b10      	cmp	r3, #16
 800359c:	d003      	beq.n	80035a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035a2:	2b11      	cmp	r3, #17
 80035a4:	d132      	bne.n	800360c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <HAL_ADC_ConfigChannel+0x1e4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d125      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d126      	bne.n	800360c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80035cc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d11a      	bne.n	800360c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <HAL_ADC_ConfigChannel+0x1e8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a13      	ldr	r2, [pc, #76]	; (8003628 <HAL_ADC_ConfigChannel+0x1ec>)
 80035dc:	fba2 2303 	umull	r2, r3, r2, r3
 80035e0:	0c9a      	lsrs	r2, r3, #18
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035ec:	e002      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f9      	bne.n	80035ee <HAL_ADC_ConfigChannel+0x1b2>
 80035fa:	e007      	b.n	800360c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	f043 0220 	orr.w	r2, r3, #32
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003614:	7bfb      	ldrb	r3, [r7, #15]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	40012400 	.word	0x40012400
 8003624:	20000100 	.word	0x20000100
 8003628:	431bde83 	.word	0x431bde83

0800362c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b01      	cmp	r3, #1
 8003648:	d040      	beq.n	80036cc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800365a:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <ADC_Enable+0xac>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a1f      	ldr	r2, [pc, #124]	; (80036dc <ADC_Enable+0xb0>)
 8003660:	fba2 2303 	umull	r2, r3, r2, r3
 8003664:	0c9b      	lsrs	r3, r3, #18
 8003666:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003668:	e002      	b.n	8003670 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	3b01      	subs	r3, #1
 800366e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f9      	bne.n	800366a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003676:	f7ff fc1b 	bl	8002eb0 <HAL_GetTick>
 800367a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800367c:	e01f      	b.n	80036be <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800367e:	f7ff fc17 	bl	8002eb0 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d918      	bls.n	80036be <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b01      	cmp	r3, #1
 8003698:	d011      	beq.n	80036be <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	f043 0210 	orr.w	r2, r3, #16
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	f043 0201 	orr.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e007      	b.n	80036ce <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d1d8      	bne.n	800367e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000100 	.word	0x20000100
 80036dc:	431bde83 	.word	0x431bde83

080036e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d12e      	bne.n	8003758 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800370a:	f7ff fbd1 	bl	8002eb0 <HAL_GetTick>
 800370e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003710:	e01b      	b.n	800374a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003712:	f7ff fbcd 	bl	8002eb0 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d914      	bls.n	800374a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d10d      	bne.n	800374a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	f043 0210 	orr.w	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	f043 0201 	orr.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e007      	b.n	800375a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d0dc      	beq.n	8003712 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003780:	4013      	ands	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800378c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003796:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	60d3      	str	r3, [r2, #12]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <__NVIC_GetPriorityGrouping+0x18>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	0a1b      	lsrs	r3, r3, #8
 80037b6:	f003 0307 	and.w	r3, r3, #7
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	db0b      	blt.n	80037f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	f003 021f 	and.w	r2, r3, #31
 80037e0:	4906      	ldr	r1, [pc, #24]	; (80037fc <__NVIC_EnableIRQ+0x34>)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	2001      	movs	r0, #1
 80037ea:	fa00 f202 	lsl.w	r2, r0, r2
 80037ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	e000e100 	.word	0xe000e100

08003800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	6039      	str	r1, [r7, #0]
 800380a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003810:	2b00      	cmp	r3, #0
 8003812:	db0a      	blt.n	800382a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	490c      	ldr	r1, [pc, #48]	; (800384c <__NVIC_SetPriority+0x4c>)
 800381a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381e:	0112      	lsls	r2, r2, #4
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	440b      	add	r3, r1
 8003824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003828:	e00a      	b.n	8003840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	4908      	ldr	r1, [pc, #32]	; (8003850 <__NVIC_SetPriority+0x50>)
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	3b04      	subs	r3, #4
 8003838:	0112      	lsls	r2, r2, #4
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	440b      	add	r3, r1
 800383e:	761a      	strb	r2, [r3, #24]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	e000e100 	.word	0xe000e100
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003854:	b480      	push	{r7}
 8003856:	b089      	sub	sp, #36	; 0x24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f1c3 0307 	rsb	r3, r3, #7
 800386e:	2b04      	cmp	r3, #4
 8003870:	bf28      	it	cs
 8003872:	2304      	movcs	r3, #4
 8003874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3304      	adds	r3, #4
 800387a:	2b06      	cmp	r3, #6
 800387c:	d902      	bls.n	8003884 <NVIC_EncodePriority+0x30>
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3b03      	subs	r3, #3
 8003882:	e000      	b.n	8003886 <NVIC_EncodePriority+0x32>
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43da      	mvns	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	401a      	ands	r2, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800389c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	fa01 f303 	lsl.w	r3, r1, r3
 80038a6:	43d9      	mvns	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ac:	4313      	orrs	r3, r2
         );
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3724      	adds	r7, #36	; 0x24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c8:	d301      	bcc.n	80038ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ca:	2301      	movs	r3, #1
 80038cc:	e00f      	b.n	80038ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ce:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <SysTick_Config+0x40>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d6:	210f      	movs	r1, #15
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038dc:	f7ff ff90 	bl	8003800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <SysTick_Config+0x40>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <SysTick_Config+0x40>)
 80038e8:	2207      	movs	r2, #7
 80038ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	e000e010 	.word	0xe000e010

080038fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff2d 	bl	8003764 <__NVIC_SetPriorityGrouping>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003924:	f7ff ff42 	bl	80037ac <__NVIC_GetPriorityGrouping>
 8003928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f7ff ff90 	bl	8003854 <NVIC_EncodePriority>
 8003934:	4602      	mov	r2, r0
 8003936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff5f 	bl	8003800 <__NVIC_SetPriority>
}
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	4603      	mov	r3, r0
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff35 	bl	80037c8 <__NVIC_EnableIRQ>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ffa2 	bl	80038b8 <SysTick_Config>
 8003974:	4603      	mov	r3, r0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003980:	b480      	push	{r7}
 8003982:	b08b      	sub	sp, #44	; 0x2c
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800398a:	2300      	movs	r3, #0
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800398e:	2300      	movs	r3, #0
 8003990:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003992:	e169      	b.n	8003c68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003994:	2201      	movs	r2, #1
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69fa      	ldr	r2, [r7, #28]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	f040 8158 	bne.w	8003c62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	4a9a      	ldr	r2, [pc, #616]	; (8003c20 <HAL_GPIO_Init+0x2a0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d05e      	beq.n	8003a7a <HAL_GPIO_Init+0xfa>
 80039bc:	4a98      	ldr	r2, [pc, #608]	; (8003c20 <HAL_GPIO_Init+0x2a0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d875      	bhi.n	8003aae <HAL_GPIO_Init+0x12e>
 80039c2:	4a98      	ldr	r2, [pc, #608]	; (8003c24 <HAL_GPIO_Init+0x2a4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d058      	beq.n	8003a7a <HAL_GPIO_Init+0xfa>
 80039c8:	4a96      	ldr	r2, [pc, #600]	; (8003c24 <HAL_GPIO_Init+0x2a4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d86f      	bhi.n	8003aae <HAL_GPIO_Init+0x12e>
 80039ce:	4a96      	ldr	r2, [pc, #600]	; (8003c28 <HAL_GPIO_Init+0x2a8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d052      	beq.n	8003a7a <HAL_GPIO_Init+0xfa>
 80039d4:	4a94      	ldr	r2, [pc, #592]	; (8003c28 <HAL_GPIO_Init+0x2a8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d869      	bhi.n	8003aae <HAL_GPIO_Init+0x12e>
 80039da:	4a94      	ldr	r2, [pc, #592]	; (8003c2c <HAL_GPIO_Init+0x2ac>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d04c      	beq.n	8003a7a <HAL_GPIO_Init+0xfa>
 80039e0:	4a92      	ldr	r2, [pc, #584]	; (8003c2c <HAL_GPIO_Init+0x2ac>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d863      	bhi.n	8003aae <HAL_GPIO_Init+0x12e>
 80039e6:	4a92      	ldr	r2, [pc, #584]	; (8003c30 <HAL_GPIO_Init+0x2b0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d046      	beq.n	8003a7a <HAL_GPIO_Init+0xfa>
 80039ec:	4a90      	ldr	r2, [pc, #576]	; (8003c30 <HAL_GPIO_Init+0x2b0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d85d      	bhi.n	8003aae <HAL_GPIO_Init+0x12e>
 80039f2:	2b12      	cmp	r3, #18
 80039f4:	d82a      	bhi.n	8003a4c <HAL_GPIO_Init+0xcc>
 80039f6:	2b12      	cmp	r3, #18
 80039f8:	d859      	bhi.n	8003aae <HAL_GPIO_Init+0x12e>
 80039fa:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <HAL_GPIO_Init+0x80>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a7b 	.word	0x08003a7b
 8003a04:	08003a55 	.word	0x08003a55
 8003a08:	08003a67 	.word	0x08003a67
 8003a0c:	08003aa9 	.word	0x08003aa9
 8003a10:	08003aaf 	.word	0x08003aaf
 8003a14:	08003aaf 	.word	0x08003aaf
 8003a18:	08003aaf 	.word	0x08003aaf
 8003a1c:	08003aaf 	.word	0x08003aaf
 8003a20:	08003aaf 	.word	0x08003aaf
 8003a24:	08003aaf 	.word	0x08003aaf
 8003a28:	08003aaf 	.word	0x08003aaf
 8003a2c:	08003aaf 	.word	0x08003aaf
 8003a30:	08003aaf 	.word	0x08003aaf
 8003a34:	08003aaf 	.word	0x08003aaf
 8003a38:	08003aaf 	.word	0x08003aaf
 8003a3c:	08003aaf 	.word	0x08003aaf
 8003a40:	08003aaf 	.word	0x08003aaf
 8003a44:	08003a5d 	.word	0x08003a5d
 8003a48:	08003a71 	.word	0x08003a71
 8003a4c:	4a79      	ldr	r2, [pc, #484]	; (8003c34 <HAL_GPIO_Init+0x2b4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a52:	e02c      	b.n	8003aae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	623b      	str	r3, [r7, #32]
          break;
 8003a5a:	e029      	b.n	8003ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	3304      	adds	r3, #4
 8003a62:	623b      	str	r3, [r7, #32]
          break;
 8003a64:	e024      	b.n	8003ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	623b      	str	r3, [r7, #32]
          break;
 8003a6e:	e01f      	b.n	8003ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	330c      	adds	r3, #12
 8003a76:	623b      	str	r3, [r7, #32]
          break;
 8003a78:	e01a      	b.n	8003ab0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a82:	2304      	movs	r3, #4
 8003a84:	623b      	str	r3, [r7, #32]
          break;
 8003a86:	e013      	b.n	8003ab0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d105      	bne.n	8003a9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a90:	2308      	movs	r3, #8
 8003a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	611a      	str	r2, [r3, #16]
          break;
 8003a9a:	e009      	b.n	8003ab0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	615a      	str	r2, [r3, #20]
          break;
 8003aa6:	e003      	b.n	8003ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	623b      	str	r3, [r7, #32]
          break;
 8003aac:	e000      	b.n	8003ab0 <HAL_GPIO_Init+0x130>
          break;
 8003aae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	2bff      	cmp	r3, #255	; 0xff
 8003ab4:	d801      	bhi.n	8003aba <HAL_GPIO_Init+0x13a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	e001      	b.n	8003abe <HAL_GPIO_Init+0x13e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3304      	adds	r3, #4
 8003abe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2bff      	cmp	r3, #255	; 0xff
 8003ac4:	d802      	bhi.n	8003acc <HAL_GPIO_Init+0x14c>
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	e002      	b.n	8003ad2 <HAL_GPIO_Init+0x152>
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	3b08      	subs	r3, #8
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	210f      	movs	r1, #15
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	401a      	ands	r2, r3
 8003ae4:	6a39      	ldr	r1, [r7, #32]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aec:	431a      	orrs	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	f000 80b1 	beq.w	8003c62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b00:	4b4d      	ldr	r3, [pc, #308]	; (8003c38 <HAL_GPIO_Init+0x2b8>)
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	4a4c      	ldr	r2, [pc, #304]	; (8003c38 <HAL_GPIO_Init+0x2b8>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6193      	str	r3, [r2, #24]
 8003b0c:	4b4a      	ldr	r3, [pc, #296]	; (8003c38 <HAL_GPIO_Init+0x2b8>)
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	60bb      	str	r3, [r7, #8]
 8003b16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b18:	4a48      	ldr	r2, [pc, #288]	; (8003c3c <HAL_GPIO_Init+0x2bc>)
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	089b      	lsrs	r3, r3, #2
 8003b1e:	3302      	adds	r3, #2
 8003b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	220f      	movs	r2, #15
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a40      	ldr	r2, [pc, #256]	; (8003c40 <HAL_GPIO_Init+0x2c0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d013      	beq.n	8003b6c <HAL_GPIO_Init+0x1ec>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a3f      	ldr	r2, [pc, #252]	; (8003c44 <HAL_GPIO_Init+0x2c4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00d      	beq.n	8003b68 <HAL_GPIO_Init+0x1e8>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a3e      	ldr	r2, [pc, #248]	; (8003c48 <HAL_GPIO_Init+0x2c8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d007      	beq.n	8003b64 <HAL_GPIO_Init+0x1e4>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a3d      	ldr	r2, [pc, #244]	; (8003c4c <HAL_GPIO_Init+0x2cc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d101      	bne.n	8003b60 <HAL_GPIO_Init+0x1e0>
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e006      	b.n	8003b6e <HAL_GPIO_Init+0x1ee>
 8003b60:	2304      	movs	r3, #4
 8003b62:	e004      	b.n	8003b6e <HAL_GPIO_Init+0x1ee>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e002      	b.n	8003b6e <HAL_GPIO_Init+0x1ee>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e000      	b.n	8003b6e <HAL_GPIO_Init+0x1ee>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b70:	f002 0203 	and.w	r2, r2, #3
 8003b74:	0092      	lsls	r2, r2, #2
 8003b76:	4093      	lsls	r3, r2
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b7e:	492f      	ldr	r1, [pc, #188]	; (8003c3c <HAL_GPIO_Init+0x2bc>)
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	089b      	lsrs	r3, r3, #2
 8003b84:	3302      	adds	r3, #2
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d006      	beq.n	8003ba6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b98:	4b2d      	ldr	r3, [pc, #180]	; (8003c50 <HAL_GPIO_Init+0x2d0>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	492c      	ldr	r1, [pc, #176]	; (8003c50 <HAL_GPIO_Init+0x2d0>)
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]
 8003ba4:	e006      	b.n	8003bb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ba6:	4b2a      	ldr	r3, [pc, #168]	; (8003c50 <HAL_GPIO_Init+0x2d0>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	43db      	mvns	r3, r3
 8003bae:	4928      	ldr	r1, [pc, #160]	; (8003c50 <HAL_GPIO_Init+0x2d0>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d006      	beq.n	8003bce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003bc0:	4b23      	ldr	r3, [pc, #140]	; (8003c50 <HAL_GPIO_Init+0x2d0>)
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	4922      	ldr	r1, [pc, #136]	; (8003c50 <HAL_GPIO_Init+0x2d0>)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]
 8003bcc:	e006      	b.n	8003bdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003bce:	4b20      	ldr	r3, [pc, #128]	; (8003c50 <HAL_GPIO_Init+0x2d0>)
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	491e      	ldr	r1, [pc, #120]	; (8003c50 <HAL_GPIO_Init+0x2d0>)
 8003bd8:	4013      	ands	r3, r2
 8003bda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d006      	beq.n	8003bf6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003be8:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <HAL_GPIO_Init+0x2d0>)
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	4918      	ldr	r1, [pc, #96]	; (8003c50 <HAL_GPIO_Init+0x2d0>)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]
 8003bf4:	e006      	b.n	8003c04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003bf6:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <HAL_GPIO_Init+0x2d0>)
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	4914      	ldr	r1, [pc, #80]	; (8003c50 <HAL_GPIO_Init+0x2d0>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d021      	beq.n	8003c54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <HAL_GPIO_Init+0x2d0>)
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	490e      	ldr	r1, [pc, #56]	; (8003c50 <HAL_GPIO_Init+0x2d0>)
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60cb      	str	r3, [r1, #12]
 8003c1c:	e021      	b.n	8003c62 <HAL_GPIO_Init+0x2e2>
 8003c1e:	bf00      	nop
 8003c20:	10320000 	.word	0x10320000
 8003c24:	10310000 	.word	0x10310000
 8003c28:	10220000 	.word	0x10220000
 8003c2c:	10210000 	.word	0x10210000
 8003c30:	10120000 	.word	0x10120000
 8003c34:	10110000 	.word	0x10110000
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	40010000 	.word	0x40010000
 8003c40:	40010800 	.word	0x40010800
 8003c44:	40010c00 	.word	0x40010c00
 8003c48:	40011000 	.word	0x40011000
 8003c4c:	40011400 	.word	0x40011400
 8003c50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_GPIO_Init+0x304>)
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	4909      	ldr	r1, [pc, #36]	; (8003c84 <HAL_GPIO_Init+0x304>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	3301      	adds	r3, #1
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f47f ae8e 	bne.w	8003994 <HAL_GPIO_Init+0x14>
  }
}
 8003c78:	bf00      	nop
 8003c7a:	bf00      	nop
 8003c7c:	372c      	adds	r7, #44	; 0x2c
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr
 8003c84:	40010400 	.word	0x40010400

08003c88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	887b      	ldrh	r3, [r7, #2]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
 8003ca4:	e001      	b.n	8003caa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr

08003cb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	807b      	strh	r3, [r7, #2]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cc6:	787b      	ldrb	r3, [r7, #1]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d003      	beq.n	8003cd4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ccc:	887a      	ldrh	r2, [r7, #2]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003cd2:	e003      	b.n	8003cdc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003cd4:	887b      	ldrh	r3, [r7, #2]
 8003cd6:	041a      	lsls	r2, r3, #16
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	611a      	str	r2, [r3, #16]
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b085      	sub	sp, #20
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cf8:	887a      	ldrh	r2, [r7, #2]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	041a      	lsls	r2, r3, #16
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	43d9      	mvns	r1, r3
 8003d04:	887b      	ldrh	r3, [r7, #2]
 8003d06:	400b      	ands	r3, r1
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	611a      	str	r2, [r3, #16]
}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e26c      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8087 	beq.w	8003e46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d38:	4b92      	ldr	r3, [pc, #584]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d00c      	beq.n	8003d5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d44:	4b8f      	ldr	r3, [pc, #572]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 030c 	and.w	r3, r3, #12
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d112      	bne.n	8003d76 <HAL_RCC_OscConfig+0x5e>
 8003d50:	4b8c      	ldr	r3, [pc, #560]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5c:	d10b      	bne.n	8003d76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5e:	4b89      	ldr	r3, [pc, #548]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d06c      	beq.n	8003e44 <HAL_RCC_OscConfig+0x12c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d168      	bne.n	8003e44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e246      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCC_OscConfig+0x76>
 8003d80:	4b80      	ldr	r3, [pc, #512]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a7f      	ldr	r2, [pc, #508]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	e02e      	b.n	8003dec <HAL_RCC_OscConfig+0xd4>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x98>
 8003d96:	4b7b      	ldr	r3, [pc, #492]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a7a      	ldr	r2, [pc, #488]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b78      	ldr	r3, [pc, #480]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a77      	ldr	r2, [pc, #476]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e01d      	b.n	8003dec <HAL_RCC_OscConfig+0xd4>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0xbc>
 8003dba:	4b72      	ldr	r3, [pc, #456]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a71      	ldr	r2, [pc, #452]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	4b6f      	ldr	r3, [pc, #444]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a6e      	ldr	r2, [pc, #440]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e00b      	b.n	8003dec <HAL_RCC_OscConfig+0xd4>
 8003dd4:	4b6b      	ldr	r3, [pc, #428]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a6a      	ldr	r2, [pc, #424]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4b68      	ldr	r3, [pc, #416]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a67      	ldr	r2, [pc, #412]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d013      	beq.n	8003e1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7ff f85c 	bl	8002eb0 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7ff f858 	bl	8002eb0 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	; 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e1fa      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	4b5d      	ldr	r3, [pc, #372]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0xe4>
 8003e1a:	e014      	b.n	8003e46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1c:	f7ff f848 	bl	8002eb0 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e24:	f7ff f844 	bl	8002eb0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e1e6      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e36:	4b53      	ldr	r3, [pc, #332]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x10c>
 8003e42:	e000      	b.n	8003e46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d063      	beq.n	8003f1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e52:	4b4c      	ldr	r3, [pc, #304]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e5e:	4b49      	ldr	r3, [pc, #292]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d11c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x18c>
 8003e6a:	4b46      	ldr	r3, [pc, #280]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d116      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e76:	4b43      	ldr	r3, [pc, #268]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_RCC_OscConfig+0x176>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d001      	beq.n	8003e8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e1ba      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8e:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4939      	ldr	r1, [pc, #228]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea2:	e03a      	b.n	8003f1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eac:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb2:	f7fe fffd 	bl	8002eb0 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eba:	f7fe fff9 	bl	8002eb0 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e19b      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ecc:	4b2d      	ldr	r3, [pc, #180]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	4b2a      	ldr	r3, [pc, #168]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4927      	ldr	r1, [pc, #156]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]
 8003eec:	e015      	b.n	8003f1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eee:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef4:	f7fe ffdc 	bl	8002eb0 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003efc:	f7fe ffd8 	bl	8002eb0 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e17a      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d03a      	beq.n	8003f9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d019      	beq.n	8003f62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2e:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <HAL_RCC_OscConfig+0x274>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f34:	f7fe ffbc 	bl	8002eb0 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f3c:	f7fe ffb8 	bl	8002eb0 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e15a      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	; (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	f000 fad8 	bl	8004510 <RCC_Delay>
 8003f60:	e01c      	b.n	8003f9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f62:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <HAL_RCC_OscConfig+0x274>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f68:	f7fe ffa2 	bl	8002eb0 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6e:	e00f      	b.n	8003f90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f70:	f7fe ff9e 	bl	8002eb0 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d908      	bls.n	8003f90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e140      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000
 8003f88:	42420000 	.word	0x42420000
 8003f8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f90:	4b9e      	ldr	r3, [pc, #632]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e9      	bne.n	8003f70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80a6 	beq.w	80040f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003faa:	2300      	movs	r3, #0
 8003fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fae:	4b97      	ldr	r3, [pc, #604]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10d      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fba:	4b94      	ldr	r3, [pc, #592]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	4a93      	ldr	r2, [pc, #588]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8003fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	61d3      	str	r3, [r2, #28]
 8003fc6:	4b91      	ldr	r3, [pc, #580]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd6:	4b8e      	ldr	r3, [pc, #568]	; (8004210 <HAL_RCC_OscConfig+0x4f8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d118      	bne.n	8004014 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fe2:	4b8b      	ldr	r3, [pc, #556]	; (8004210 <HAL_RCC_OscConfig+0x4f8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a8a      	ldr	r2, [pc, #552]	; (8004210 <HAL_RCC_OscConfig+0x4f8>)
 8003fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fee:	f7fe ff5f 	bl	8002eb0 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff6:	f7fe ff5b 	bl	8002eb0 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b64      	cmp	r3, #100	; 0x64
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e0fd      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004008:	4b81      	ldr	r3, [pc, #516]	; (8004210 <HAL_RCC_OscConfig+0x4f8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d106      	bne.n	800402a <HAL_RCC_OscConfig+0x312>
 800401c:	4b7b      	ldr	r3, [pc, #492]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	4a7a      	ldr	r2, [pc, #488]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	6213      	str	r3, [r2, #32]
 8004028:	e02d      	b.n	8004086 <HAL_RCC_OscConfig+0x36e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10c      	bne.n	800404c <HAL_RCC_OscConfig+0x334>
 8004032:	4b76      	ldr	r3, [pc, #472]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	4a75      	ldr	r2, [pc, #468]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	6213      	str	r3, [r2, #32]
 800403e:	4b73      	ldr	r3, [pc, #460]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	4a72      	ldr	r2, [pc, #456]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004044:	f023 0304 	bic.w	r3, r3, #4
 8004048:	6213      	str	r3, [r2, #32]
 800404a:	e01c      	b.n	8004086 <HAL_RCC_OscConfig+0x36e>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	2b05      	cmp	r3, #5
 8004052:	d10c      	bne.n	800406e <HAL_RCC_OscConfig+0x356>
 8004054:	4b6d      	ldr	r3, [pc, #436]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	4a6c      	ldr	r2, [pc, #432]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 800405a:	f043 0304 	orr.w	r3, r3, #4
 800405e:	6213      	str	r3, [r2, #32]
 8004060:	4b6a      	ldr	r3, [pc, #424]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	4a69      	ldr	r2, [pc, #420]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6213      	str	r3, [r2, #32]
 800406c:	e00b      	b.n	8004086 <HAL_RCC_OscConfig+0x36e>
 800406e:	4b67      	ldr	r3, [pc, #412]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	4a66      	ldr	r2, [pc, #408]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	6213      	str	r3, [r2, #32]
 800407a:	4b64      	ldr	r3, [pc, #400]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	4a63      	ldr	r2, [pc, #396]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004080:	f023 0304 	bic.w	r3, r3, #4
 8004084:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d015      	beq.n	80040ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408e:	f7fe ff0f 	bl	8002eb0 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004094:	e00a      	b.n	80040ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004096:	f7fe ff0b 	bl	8002eb0 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e0ab      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	4b57      	ldr	r3, [pc, #348]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0ee      	beq.n	8004096 <HAL_RCC_OscConfig+0x37e>
 80040b8:	e014      	b.n	80040e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ba:	f7fe fef9 	bl	8002eb0 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c0:	e00a      	b.n	80040d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7fe fef5 	bl	8002eb0 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e095      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d8:	4b4c      	ldr	r3, [pc, #304]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1ee      	bne.n	80040c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d105      	bne.n	80040f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ea:	4b48      	ldr	r3, [pc, #288]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	4a47      	ldr	r2, [pc, #284]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 80040f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 8081 	beq.w	8004202 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004100:	4b42      	ldr	r3, [pc, #264]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b08      	cmp	r3, #8
 800410a:	d061      	beq.n	80041d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d146      	bne.n	80041a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004114:	4b3f      	ldr	r3, [pc, #252]	; (8004214 <HAL_RCC_OscConfig+0x4fc>)
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411a:	f7fe fec9 	bl	8002eb0 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004122:	f7fe fec5 	bl	8002eb0 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e067      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004134:	4b35      	ldr	r3, [pc, #212]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f0      	bne.n	8004122 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004148:	d108      	bne.n	800415c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800414a:	4b30      	ldr	r3, [pc, #192]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	492d      	ldr	r1, [pc, #180]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004158:	4313      	orrs	r3, r2
 800415a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800415c:	4b2b      	ldr	r3, [pc, #172]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a19      	ldr	r1, [r3, #32]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	430b      	orrs	r3, r1
 800416e:	4927      	ldr	r1, [pc, #156]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004174:	4b27      	ldr	r3, [pc, #156]	; (8004214 <HAL_RCC_OscConfig+0x4fc>)
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417a:	f7fe fe99 	bl	8002eb0 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004182:	f7fe fe95 	bl	8002eb0 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e037      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004194:	4b1d      	ldr	r3, [pc, #116]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x46a>
 80041a0:	e02f      	b.n	8004202 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a2:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <HAL_RCC_OscConfig+0x4fc>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7fe fe82 	bl	8002eb0 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b0:	f7fe fe7e 	bl	8002eb0 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e020      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c2:	4b12      	ldr	r3, [pc, #72]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x498>
 80041ce:	e018      	b.n	8004202 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e013      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041dc:	4b0b      	ldr	r3, [pc, #44]	; (800420c <HAL_RCC_OscConfig+0x4f4>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d106      	bne.n	80041fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d001      	beq.n	8004202 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3718      	adds	r7, #24
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40021000 	.word	0x40021000
 8004210:	40007000 	.word	0x40007000
 8004214:	42420060 	.word	0x42420060

08004218 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0d0      	b.n	80043ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800422c:	4b6a      	ldr	r3, [pc, #424]	; (80043d8 <HAL_RCC_ClockConfig+0x1c0>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d910      	bls.n	800425c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423a:	4b67      	ldr	r3, [pc, #412]	; (80043d8 <HAL_RCC_ClockConfig+0x1c0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f023 0207 	bic.w	r2, r3, #7
 8004242:	4965      	ldr	r1, [pc, #404]	; (80043d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	4313      	orrs	r3, r2
 8004248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800424a:	4b63      	ldr	r3, [pc, #396]	; (80043d8 <HAL_RCC_ClockConfig+0x1c0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0b8      	b.n	80043ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d020      	beq.n	80042aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004274:	4b59      	ldr	r3, [pc, #356]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4a58      	ldr	r2, [pc, #352]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800427e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800428c:	4b53      	ldr	r3, [pc, #332]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4a52      	ldr	r2, [pc, #328]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 8004292:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004296:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004298:	4b50      	ldr	r3, [pc, #320]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	494d      	ldr	r1, [pc, #308]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d040      	beq.n	8004338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d107      	bne.n	80042ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042be:	4b47      	ldr	r3, [pc, #284]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d115      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e07f      	b.n	80043ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d6:	4b41      	ldr	r3, [pc, #260]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e073      	b.n	80043ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e6:	4b3d      	ldr	r3, [pc, #244]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e06b      	b.n	80043ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042f6:	4b39      	ldr	r3, [pc, #228]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f023 0203 	bic.w	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4936      	ldr	r1, [pc, #216]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	4313      	orrs	r3, r2
 8004306:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004308:	f7fe fdd2 	bl	8002eb0 <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430e:	e00a      	b.n	8004326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004310:	f7fe fdce 	bl	8002eb0 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e053      	b.n	80043ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	4b2d      	ldr	r3, [pc, #180]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 020c 	and.w	r2, r3, #12
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	429a      	cmp	r2, r3
 8004336:	d1eb      	bne.n	8004310 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004338:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <HAL_RCC_ClockConfig+0x1c0>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d210      	bcs.n	8004368 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 0207 	bic.w	r2, r3, #7
 800434e:	4922      	ldr	r1, [pc, #136]	; (80043d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004356:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e032      	b.n	80043ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004374:	4b19      	ldr	r3, [pc, #100]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4916      	ldr	r1, [pc, #88]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	4313      	orrs	r3, r2
 8004384:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	490e      	ldr	r1, [pc, #56]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043a6:	f000 f821 	bl	80043ec <HAL_RCC_GetSysClockFreq>
 80043aa:	4602      	mov	r2, r0
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	490a      	ldr	r1, [pc, #40]	; (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 80043b8:	5ccb      	ldrb	r3, [r1, r3]
 80043ba:	fa22 f303 	lsr.w	r3, r2, r3
 80043be:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <HAL_RCC_ClockConfig+0x1cc>)
 80043c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043c2:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <HAL_RCC_ClockConfig+0x1d0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fd30 	bl	8002e2c <HAL_InitTick>

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40022000 	.word	0x40022000
 80043dc:	40021000 	.word	0x40021000
 80043e0:	08008a60 	.word	0x08008a60
 80043e4:	20000100 	.word	0x20000100
 80043e8:	20000104 	.word	0x20000104

080043ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043ec:	b490      	push	{r4, r7}
 80043ee:	b08a      	sub	sp, #40	; 0x28
 80043f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043f2:	4b2a      	ldr	r3, [pc, #168]	; (800449c <HAL_RCC_GetSysClockFreq+0xb0>)
 80043f4:	1d3c      	adds	r4, r7, #4
 80043f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043fc:	f240 2301 	movw	r3, #513	; 0x201
 8004400:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	2300      	movs	r3, #0
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004416:	4b22      	ldr	r3, [pc, #136]	; (80044a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f003 030c 	and.w	r3, r3, #12
 8004422:	2b04      	cmp	r3, #4
 8004424:	d002      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0x40>
 8004426:	2b08      	cmp	r3, #8
 8004428:	d003      	beq.n	8004432 <HAL_RCC_GetSysClockFreq+0x46>
 800442a:	e02d      	b.n	8004488 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800442c:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800442e:	623b      	str	r3, [r7, #32]
      break;
 8004430:	e02d      	b.n	800448e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	0c9b      	lsrs	r3, r3, #18
 8004436:	f003 030f 	and.w	r3, r3, #15
 800443a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800443e:	4413      	add	r3, r2
 8004440:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004444:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004450:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	0c5b      	lsrs	r3, r3, #17
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800445e:	4413      	add	r3, r2
 8004460:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004464:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	4a0e      	ldr	r2, [pc, #56]	; (80044a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800446a:	fb02 f203 	mul.w	r2, r2, r3
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	fbb2 f3f3 	udiv	r3, r2, r3
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
 8004476:	e004      	b.n	8004482 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	4a0b      	ldr	r2, [pc, #44]	; (80044a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800447c:	fb02 f303 	mul.w	r3, r2, r3
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	623b      	str	r3, [r7, #32]
      break;
 8004486:	e002      	b.n	800448e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004488:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800448a:	623b      	str	r3, [r7, #32]
      break;
 800448c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800448e:	6a3b      	ldr	r3, [r7, #32]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3728      	adds	r7, #40	; 0x28
 8004494:	46bd      	mov	sp, r7
 8004496:	bc90      	pop	{r4, r7}
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	08008a40 	.word	0x08008a40
 80044a0:	40021000 	.word	0x40021000
 80044a4:	007a1200 	.word	0x007a1200
 80044a8:	003d0900 	.word	0x003d0900

080044ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044b0:	4b02      	ldr	r3, [pc, #8]	; (80044bc <HAL_RCC_GetHCLKFreq+0x10>)
 80044b2:	681b      	ldr	r3, [r3, #0]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr
 80044bc:	20000100 	.word	0x20000100

080044c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044c4:	f7ff fff2 	bl	80044ac <HAL_RCC_GetHCLKFreq>
 80044c8:	4602      	mov	r2, r0
 80044ca:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	0a1b      	lsrs	r3, r3, #8
 80044d0:	f003 0307 	and.w	r3, r3, #7
 80044d4:	4903      	ldr	r1, [pc, #12]	; (80044e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d6:	5ccb      	ldrb	r3, [r1, r3]
 80044d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044dc:	4618      	mov	r0, r3
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40021000 	.word	0x40021000
 80044e4:	08008a70 	.word	0x08008a70

080044e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044ec:	f7ff ffde 	bl	80044ac <HAL_RCC_GetHCLKFreq>
 80044f0:	4602      	mov	r2, r0
 80044f2:	4b05      	ldr	r3, [pc, #20]	; (8004508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	0adb      	lsrs	r3, r3, #11
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	4903      	ldr	r1, [pc, #12]	; (800450c <HAL_RCC_GetPCLK2Freq+0x24>)
 80044fe:	5ccb      	ldrb	r3, [r1, r3]
 8004500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004504:	4618      	mov	r0, r3
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40021000 	.word	0x40021000
 800450c:	08008a70 	.word	0x08008a70

08004510 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004518:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <RCC_Delay+0x34>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <RCC_Delay+0x38>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	0a5b      	lsrs	r3, r3, #9
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800452c:	bf00      	nop
  }
  while (Delay --);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1e5a      	subs	r2, r3, #1
 8004532:	60fa      	str	r2, [r7, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f9      	bne.n	800452c <RCC_Delay+0x1c>
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr
 8004544:	20000100 	.word	0x20000100
 8004548:	10624dd3 	.word	0x10624dd3

0800454c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d07d      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004568:	2300      	movs	r3, #0
 800456a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800456c:	4b4f      	ldr	r3, [pc, #316]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10d      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004578:	4b4c      	ldr	r3, [pc, #304]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	4a4b      	ldr	r2, [pc, #300]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004582:	61d3      	str	r3, [r2, #28]
 8004584:	4b49      	ldr	r3, [pc, #292]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458c:	60bb      	str	r3, [r7, #8]
 800458e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004590:	2301      	movs	r3, #1
 8004592:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004594:	4b46      	ldr	r3, [pc, #280]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459c:	2b00      	cmp	r3, #0
 800459e:	d118      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a0:	4b43      	ldr	r3, [pc, #268]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a42      	ldr	r2, [pc, #264]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ac:	f7fe fc80 	bl	8002eb0 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b2:	e008      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b4:	f7fe fc7c 	bl	8002eb0 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b64      	cmp	r3, #100	; 0x64
 80045c0:	d901      	bls.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e06d      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c6:	4b3a      	ldr	r3, [pc, #232]	; (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045d2:	4b36      	ldr	r3, [pc, #216]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d02e      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d027      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045f0:	4b2e      	ldr	r3, [pc, #184]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045fa:	4b2e      	ldr	r3, [pc, #184]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004600:	4b2c      	ldr	r3, [pc, #176]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004606:	4a29      	ldr	r2, [pc, #164]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d014      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7fe fc4b 	bl	8002eb0 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461c:	e00a      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461e:	f7fe fc47 	bl	8002eb0 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	f241 3288 	movw	r2, #5000	; 0x1388
 800462c:	4293      	cmp	r3, r2
 800462e:	d901      	bls.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e036      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004634:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ee      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004640:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4917      	ldr	r1, [pc, #92]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464e:	4313      	orrs	r3, r2
 8004650:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004652:	7dfb      	ldrb	r3, [r7, #23]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d105      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004658:	4b14      	ldr	r3, [pc, #80]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	4a13      	ldr	r2, [pc, #76]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004662:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004670:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	490b      	ldr	r1, [pc, #44]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467e:	4313      	orrs	r3, r2
 8004680:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800468e:	4b07      	ldr	r3, [pc, #28]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	4904      	ldr	r1, [pc, #16]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469c:	4313      	orrs	r3, r2
 800469e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40021000 	.word	0x40021000
 80046b0:	40007000 	.word	0x40007000
 80046b4:	42420440 	.word	0x42420440

080046b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b08d      	sub	sp, #52	; 0x34
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80046c0:	4b5a      	ldr	r3, [pc, #360]	; (800482c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80046c2:	f107 040c 	add.w	r4, r7, #12
 80046c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80046cc:	f240 2301 	movw	r3, #513	; 0x201
 80046d0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
 80046d6:	2300      	movs	r3, #0
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046da:	2300      	movs	r3, #0
 80046dc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	2300      	movs	r3, #0
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b10      	cmp	r3, #16
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b10      	cmp	r3, #16
 80046f0:	f200 8091 	bhi.w	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d04c      	beq.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d07c      	beq.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004700:	e089      	b.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8004702:	4b4b      	ldr	r3, [pc, #300]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004708:	4b49      	ldr	r3, [pc, #292]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8082 	beq.w	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	0c9b      	lsrs	r3, r3, #18
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004722:	4413      	add	r3, r2
 8004724:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004728:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d018      	beq.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004734:	4b3e      	ldr	r3, [pc, #248]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	0c5b      	lsrs	r3, r3, #17
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004742:	4413      	add	r3, r2
 8004744:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00d      	beq.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004754:	4a37      	ldr	r2, [pc, #220]	; (8004834 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	fbb2 f2f3 	udiv	r2, r2, r3
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	fb02 f303 	mul.w	r3, r2, r3
 8004762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004764:	e004      	b.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	4a33      	ldr	r2, [pc, #204]	; (8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004770:	4b2f      	ldr	r3, [pc, #188]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800477c:	d102      	bne.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004782:	e04a      	b.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	4a2c      	ldr	r2, [pc, #176]	; (800483c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	085b      	lsrs	r3, r3, #1
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004792:	e042      	b.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004794:	4b26      	ldr	r3, [pc, #152]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a4:	d108      	bne.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80047b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b6:	e01f      	b.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c2:	d109      	bne.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80047c4:	4b1a      	ldr	r3, [pc, #104]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80047d0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047d6:	e00f      	b.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047e2:	d11c      	bne.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80047e4:	4b12      	ldr	r3, [pc, #72]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d016      	beq.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80047f0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80047f6:	e012      	b.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80047f8:	e011      	b.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80047fa:	f7ff fe75 	bl	80044e8 <HAL_RCC_GetPCLK2Freq>
 80047fe:	4602      	mov	r2, r0
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	0b9b      	lsrs	r3, r3, #14
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	3301      	adds	r3, #1
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004814:	e004      	b.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004816:	bf00      	nop
 8004818:	e002      	b.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800481a:	bf00      	nop
 800481c:	e000      	b.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800481e:	bf00      	nop
    }
  }
  return (frequency);
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004822:	4618      	mov	r0, r3
 8004824:	3734      	adds	r7, #52	; 0x34
 8004826:	46bd      	mov	sp, r7
 8004828:	bd90      	pop	{r4, r7, pc}
 800482a:	bf00      	nop
 800482c:	08008a50 	.word	0x08008a50
 8004830:	40021000 	.word	0x40021000
 8004834:	007a1200 	.word	0x007a1200
 8004838:	003d0900 	.word	0x003d0900
 800483c:	aaaaaaab 	.word	0xaaaaaaab

08004840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e041      	b.n	80048d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fd ffb0 	bl	80027cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f000 fbd0 	bl	8005024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d001      	beq.n	80048f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e032      	b.n	800495e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a18      	ldr	r2, [pc, #96]	; (8004968 <HAL_TIM_Base_Start+0x88>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00e      	beq.n	8004928 <HAL_TIM_Base_Start+0x48>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004912:	d009      	beq.n	8004928 <HAL_TIM_Base_Start+0x48>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a14      	ldr	r2, [pc, #80]	; (800496c <HAL_TIM_Base_Start+0x8c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_TIM_Base_Start+0x48>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a13      	ldr	r2, [pc, #76]	; (8004970 <HAL_TIM_Base_Start+0x90>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d111      	bne.n	800494c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b06      	cmp	r3, #6
 8004938:	d010      	beq.n	800495c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0201 	orr.w	r2, r2, #1
 8004948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494a:	e007      	b.n	800495c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr
 8004968:	40012c00 	.word	0x40012c00
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800

08004974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d001      	beq.n	800498c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e03a      	b.n	8004a02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0201 	orr.w	r2, r2, #1
 80049a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a18      	ldr	r2, [pc, #96]	; (8004a0c <HAL_TIM_Base_Start_IT+0x98>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00e      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x58>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b6:	d009      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x58>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a14      	ldr	r2, [pc, #80]	; (8004a10 <HAL_TIM_Base_Start_IT+0x9c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x58>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a13      	ldr	r2, [pc, #76]	; (8004a14 <HAL_TIM_Base_Start_IT+0xa0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d111      	bne.n	80049f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b06      	cmp	r3, #6
 80049dc:	d010      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0201 	orr.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ee:	e007      	b.n	8004a00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	40000400 	.word	0x40000400
 8004a14:	40000800 	.word	0x40000800

08004a18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e041      	b.n	8004aae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f839 	bl	8004ab6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3304      	adds	r3, #4
 8004a54:	4619      	mov	r1, r3
 8004a56:	4610      	mov	r0, r2
 8004a58:	f000 fae4 	bl	8005024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d122      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d11b      	bne.n	8004b24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0202 	mvn.w	r2, #2
 8004af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fa6f 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004b10:	e005      	b.n	8004b1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fa62 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fa71 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d122      	bne.n	8004b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d11b      	bne.n	8004b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0204 	mvn.w	r2, #4
 8004b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa45 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004b64:	e005      	b.n	8004b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fa38 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fa47 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d122      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d11b      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0208 	mvn.w	r2, #8
 8004b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fa1b 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fa0e 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fa1d 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2b10      	cmp	r3, #16
 8004bd8:	d122      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d11b      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0210 	mvn.w	r2, #16
 8004bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f9f1 	bl	8004fee <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f9e4 	bl	8004fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f9f3 	bl	8005000 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d10e      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d107      	bne.n	8004c4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0201 	mvn.w	r2, #1
 8004c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fd fc20 	bl	800248c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c56:	2b80      	cmp	r3, #128	; 0x80
 8004c58:	d10e      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c64:	2b80      	cmp	r3, #128	; 0x80
 8004c66:	d107      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fdac 	bl	80057d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c82:	2b40      	cmp	r3, #64	; 0x40
 8004c84:	d10e      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d107      	bne.n	8004ca4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f9b7 	bl	8005012 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b20      	cmp	r3, #32
 8004cb0:	d10e      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f003 0320 	and.w	r3, r3, #32
 8004cbc:	2b20      	cmp	r3, #32
 8004cbe:	d107      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0220 	mvn.w	r2, #32
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fd77 	bl	80057be <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e0ac      	b.n	8004e4c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b0c      	cmp	r3, #12
 8004cfe:	f200 809f 	bhi.w	8004e40 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004d02:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004d3d 	.word	0x08004d3d
 8004d0c:	08004e41 	.word	0x08004e41
 8004d10:	08004e41 	.word	0x08004e41
 8004d14:	08004e41 	.word	0x08004e41
 8004d18:	08004d7d 	.word	0x08004d7d
 8004d1c:	08004e41 	.word	0x08004e41
 8004d20:	08004e41 	.word	0x08004e41
 8004d24:	08004e41 	.word	0x08004e41
 8004d28:	08004dbf 	.word	0x08004dbf
 8004d2c:	08004e41 	.word	0x08004e41
 8004d30:	08004e41 	.word	0x08004e41
 8004d34:	08004e41 	.word	0x08004e41
 8004d38:	08004dff 	.word	0x08004dff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f9d0 	bl	80050e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0208 	orr.w	r2, r2, #8
 8004d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0204 	bic.w	r2, r2, #4
 8004d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6999      	ldr	r1, [r3, #24]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	619a      	str	r2, [r3, #24]
      break;
 8004d7a:	e062      	b.n	8004e42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fa16 	bl	80051b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6999      	ldr	r1, [r3, #24]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	021a      	lsls	r2, r3, #8
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	619a      	str	r2, [r3, #24]
      break;
 8004dbc:	e041      	b.n	8004e42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fa5f 	bl	8005288 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f042 0208 	orr.w	r2, r2, #8
 8004dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0204 	bic.w	r2, r2, #4
 8004de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69d9      	ldr	r1, [r3, #28]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	691a      	ldr	r2, [r3, #16]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	61da      	str	r2, [r3, #28]
      break;
 8004dfc:	e021      	b.n	8004e42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 faa9 	bl	800535c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69da      	ldr	r2, [r3, #28]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	69d9      	ldr	r1, [r3, #28]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	021a      	lsls	r2, r3, #8
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	61da      	str	r2, [r3, #28]
      break;
 8004e3e:	e000      	b.n	8004e42 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004e40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_TIM_ConfigClockSource+0x18>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e0b3      	b.n	8004fd4 <HAL_TIM_ConfigClockSource+0x180>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea4:	d03e      	beq.n	8004f24 <HAL_TIM_ConfigClockSource+0xd0>
 8004ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eaa:	f200 8087 	bhi.w	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb2:	f000 8085 	beq.w	8004fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eba:	d87f      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004ebc:	2b70      	cmp	r3, #112	; 0x70
 8004ebe:	d01a      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0xa2>
 8004ec0:	2b70      	cmp	r3, #112	; 0x70
 8004ec2:	d87b      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004ec4:	2b60      	cmp	r3, #96	; 0x60
 8004ec6:	d050      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0x116>
 8004ec8:	2b60      	cmp	r3, #96	; 0x60
 8004eca:	d877      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004ecc:	2b50      	cmp	r3, #80	; 0x50
 8004ece:	d03c      	beq.n	8004f4a <HAL_TIM_ConfigClockSource+0xf6>
 8004ed0:	2b50      	cmp	r3, #80	; 0x50
 8004ed2:	d873      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
 8004ed6:	d058      	beq.n	8004f8a <HAL_TIM_ConfigClockSource+0x136>
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d86f      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004edc:	2b30      	cmp	r3, #48	; 0x30
 8004ede:	d064      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x156>
 8004ee0:	2b30      	cmp	r3, #48	; 0x30
 8004ee2:	d86b      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d060      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x156>
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d867      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d05c      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x156>
 8004ef0:	2b10      	cmp	r3, #16
 8004ef2:	d05a      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ef4:	e062      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6899      	ldr	r1, [r3, #8]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f000 faee 	bl	80054e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	609a      	str	r2, [r3, #8]
      break;
 8004f22:	e04e      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6818      	ldr	r0, [r3, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	6899      	ldr	r1, [r3, #8]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f000 fad7 	bl	80054e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f46:	609a      	str	r2, [r3, #8]
      break;
 8004f48:	e03b      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6818      	ldr	r0, [r3, #0]
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	6859      	ldr	r1, [r3, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	461a      	mov	r2, r3
 8004f58:	f000 fa4e 	bl	80053f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2150      	movs	r1, #80	; 0x50
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 faa5 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004f68:	e02b      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6859      	ldr	r1, [r3, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f000 fa6c 	bl	8005454 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2160      	movs	r1, #96	; 0x60
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fa95 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004f88:	e01b      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6859      	ldr	r1, [r3, #4]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	461a      	mov	r2, r3
 8004f98:	f000 fa2e 	bl	80053f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2140      	movs	r1, #64	; 0x40
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fa85 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004fa8:	e00b      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	f000 fa7c 	bl	80054b2 <TIM_ITRx_SetConfig>
        break;
 8004fba:	e002      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004fbc:	bf00      	nop
 8004fbe:	e000      	b.n	8004fc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004fc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr

08004fee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr

08005000 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr

08005012 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr

08005024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a29      	ldr	r2, [pc, #164]	; (80050dc <TIM_Base_SetConfig+0xb8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00b      	beq.n	8005054 <TIM_Base_SetConfig+0x30>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005042:	d007      	beq.n	8005054 <TIM_Base_SetConfig+0x30>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a26      	ldr	r2, [pc, #152]	; (80050e0 <TIM_Base_SetConfig+0xbc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d003      	beq.n	8005054 <TIM_Base_SetConfig+0x30>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a25      	ldr	r2, [pc, #148]	; (80050e4 <TIM_Base_SetConfig+0xc0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d108      	bne.n	8005066 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <TIM_Base_SetConfig+0xb8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00b      	beq.n	8005086 <TIM_Base_SetConfig+0x62>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005074:	d007      	beq.n	8005086 <TIM_Base_SetConfig+0x62>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a19      	ldr	r2, [pc, #100]	; (80050e0 <TIM_Base_SetConfig+0xbc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d003      	beq.n	8005086 <TIM_Base_SetConfig+0x62>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <TIM_Base_SetConfig+0xc0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d108      	bne.n	8005098 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a07      	ldr	r2, [pc, #28]	; (80050dc <TIM_Base_SetConfig+0xb8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d103      	bne.n	80050cc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	615a      	str	r2, [r3, #20]
}
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr
 80050dc:	40012c00 	.word	0x40012c00
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800

080050e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	f023 0201 	bic.w	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f023 0303 	bic.w	r3, r3, #3
 800511e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4313      	orrs	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f023 0302 	bic.w	r3, r3, #2
 8005130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a1c      	ldr	r2, [pc, #112]	; (80051b0 <TIM_OC1_SetConfig+0xc8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d10c      	bne.n	800515e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f023 0308 	bic.w	r3, r3, #8
 800514a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f023 0304 	bic.w	r3, r3, #4
 800515c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a13      	ldr	r2, [pc, #76]	; (80051b0 <TIM_OC1_SetConfig+0xc8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d111      	bne.n	800518a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800516c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	621a      	str	r2, [r3, #32]
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40012c00 	.word	0x40012c00

080051b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0210 	bic.w	r2, r3, #16
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f023 0320 	bic.w	r3, r3, #32
 80051fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <TIM_OC2_SetConfig+0xd0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d10d      	bne.n	8005230 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800521a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a14      	ldr	r2, [pc, #80]	; (8005284 <TIM_OC2_SetConfig+0xd0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d113      	bne.n	8005260 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800523e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005246:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	4313      	orrs	r3, r2
 800525e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr
 8005284:	40012c00 	.word	0x40012c00

08005288 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0303 	bic.w	r3, r3, #3
 80052be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a1d      	ldr	r2, [pc, #116]	; (8005358 <TIM_OC3_SetConfig+0xd0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d10d      	bne.n	8005302 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a14      	ldr	r2, [pc, #80]	; (8005358 <TIM_OC3_SetConfig+0xd0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d113      	bne.n	8005332 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	621a      	str	r2, [r3, #32]
}
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40012c00 	.word	0x40012c00

0800535c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	031b      	lsls	r3, r3, #12
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a0f      	ldr	r2, [pc, #60]	; (80053f4 <TIM_OC4_SetConfig+0x98>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d109      	bne.n	80053d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	019b      	lsls	r3, r3, #6
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr
 80053f4:	40012c00 	.word	0x40012c00

080053f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f023 0201 	bic.w	r2, r3, #1
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f023 030a 	bic.w	r3, r3, #10
 8005434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	621a      	str	r2, [r3, #32]
}
 800544a:	bf00      	nop
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f023 0210 	bic.w	r2, r3, #16
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800547e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	031b      	lsls	r3, r3, #12
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005490:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	621a      	str	r2, [r3, #32]
}
 80054a8:	bf00      	nop
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr

080054b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f043 0307 	orr.w	r3, r3, #7
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	609a      	str	r2, [r3, #8]
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr

080054e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b087      	sub	sp, #28
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005500:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	021a      	lsls	r2, r3, #8
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	431a      	orrs	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4313      	orrs	r3, r2
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	609a      	str	r2, [r3, #8]
}
 800551a:	bf00      	nop
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <HAL_TIMEx_PWMN_Start+0x24>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	bf14      	ite	ne
 8005540:	2301      	movne	r3, #1
 8005542:	2300      	moveq	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	e022      	b.n	800558e <HAL_TIMEx_PWMN_Start+0x6a>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b04      	cmp	r3, #4
 800554c:	d109      	bne.n	8005562 <HAL_TIMEx_PWMN_Start+0x3e>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b01      	cmp	r3, #1
 8005558:	bf14      	ite	ne
 800555a:	2301      	movne	r3, #1
 800555c:	2300      	moveq	r3, #0
 800555e:	b2db      	uxtb	r3, r3
 8005560:	e015      	b.n	800558e <HAL_TIMEx_PWMN_Start+0x6a>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d109      	bne.n	800557c <HAL_TIMEx_PWMN_Start+0x58>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	bf14      	ite	ne
 8005574:	2301      	movne	r3, #1
 8005576:	2300      	moveq	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e008      	b.n	800558e <HAL_TIMEx_PWMN_Start+0x6a>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	bf14      	ite	ne
 8005588:	2301      	movne	r3, #1
 800558a:	2300      	moveq	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e059      	b.n	800564a <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d104      	bne.n	80055a6 <HAL_TIMEx_PWMN_Start+0x82>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055a4:	e013      	b.n	80055ce <HAL_TIMEx_PWMN_Start+0xaa>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d104      	bne.n	80055b6 <HAL_TIMEx_PWMN_Start+0x92>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055b4:	e00b      	b.n	80055ce <HAL_TIMEx_PWMN_Start+0xaa>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d104      	bne.n	80055c6 <HAL_TIMEx_PWMN_Start+0xa2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c4:	e003      	b.n	80055ce <HAL_TIMEx_PWMN_Start+0xaa>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2202      	movs	r2, #2
 80055ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2204      	movs	r2, #4
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 f903 	bl	80057e2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a18      	ldr	r2, [pc, #96]	; (8005654 <HAL_TIMEx_PWMN_Start+0x130>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d00e      	beq.n	8005614 <HAL_TIMEx_PWMN_Start+0xf0>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fe:	d009      	beq.n	8005614 <HAL_TIMEx_PWMN_Start+0xf0>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a14      	ldr	r2, [pc, #80]	; (8005658 <HAL_TIMEx_PWMN_Start+0x134>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d004      	beq.n	8005614 <HAL_TIMEx_PWMN_Start+0xf0>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a13      	ldr	r2, [pc, #76]	; (800565c <HAL_TIMEx_PWMN_Start+0x138>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d111      	bne.n	8005638 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b06      	cmp	r3, #6
 8005624:	d010      	beq.n	8005648 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0201 	orr.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005636:	e007      	b.n	8005648 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0201 	orr.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40012c00 	.word	0x40012c00
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800

08005660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005674:	2302      	movs	r3, #2
 8005676:	e046      	b.n	8005706 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a16      	ldr	r2, [pc, #88]	; (8005710 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c4:	d009      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a12      	ldr	r2, [pc, #72]	; (8005714 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a10      	ldr	r2, [pc, #64]	; (8005718 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d10c      	bne.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40000400 	.word	0x40000400
 8005718:	40000800 	.word	0x40000800

0800571c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005734:	2302      	movs	r3, #2
 8005736:	e03d      	b.n	80057b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bc80      	pop	{r7}
 80057bc:	4770      	bx	lr

080057be <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057be:	b480      	push	{r7}
 80057c0:	b083      	sub	sp, #12
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr

080057e2 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b087      	sub	sp, #28
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	2204      	movs	r2, #4
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a1a      	ldr	r2, [r3, #32]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	43db      	mvns	r3, r3
 8005804:	401a      	ands	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a1a      	ldr	r2, [r3, #32]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	fa01 f303 	lsl.w	r3, r1, r3
 800581a:	431a      	orrs	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	621a      	str	r2, [r3, #32]
}
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	bc80      	pop	{r7}
 8005828:	4770      	bx	lr

0800582a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e03f      	b.n	80058bc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d106      	bne.n	8005856 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7fd f84f 	bl	80028f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2224      	movs	r2, #36	; 0x24
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800586c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f904 	bl	8005a7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005882:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695a      	ldr	r2, [r3, #20]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005892:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	; 0x28
 80058c8:	af02      	add	r7, sp, #8
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	603b      	str	r3, [r7, #0]
 80058d0:	4613      	mov	r3, r2
 80058d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	d17c      	bne.n	80059de <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_UART_Transmit+0x2c>
 80058ea:	88fb      	ldrh	r3, [r7, #6]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e075      	b.n	80059e0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_UART_Transmit+0x3e>
 80058fe:	2302      	movs	r3, #2
 8005900:	e06e      	b.n	80059e0 <HAL_UART_Transmit+0x11c>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2221      	movs	r2, #33	; 0x21
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005918:	f7fd faca 	bl	8002eb0 <HAL_GetTick>
 800591c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	88fa      	ldrh	r2, [r7, #6]
 8005922:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	88fa      	ldrh	r2, [r7, #6]
 8005928:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005932:	d108      	bne.n	8005946 <HAL_UART_Transmit+0x82>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d104      	bne.n	8005946 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800593c:	2300      	movs	r3, #0
 800593e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	61bb      	str	r3, [r7, #24]
 8005944:	e003      	b.n	800594e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800594a:	2300      	movs	r3, #0
 800594c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005956:	e02a      	b.n	80059ae <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2200      	movs	r2, #0
 8005960:	2180      	movs	r1, #128	; 0x80
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f840 	bl	80059e8 <UART_WaitOnFlagUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e036      	b.n	80059e0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10b      	bne.n	8005990 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005986:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	3302      	adds	r3, #2
 800598c:	61bb      	str	r3, [r7, #24]
 800598e:	e007      	b.n	80059a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	781a      	ldrb	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	3301      	adds	r3, #1
 800599e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1cf      	bne.n	8005958 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2200      	movs	r2, #0
 80059c0:	2140      	movs	r1, #64	; 0x40
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 f810 	bl	80059e8 <UART_WaitOnFlagUntilTimeout>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e006      	b.n	80059e0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	e000      	b.n	80059e0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80059de:	2302      	movs	r3, #2
  }
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3720      	adds	r7, #32
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	603b      	str	r3, [r7, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059f8:	e02c      	b.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a00:	d028      	beq.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a08:	f7fd fa52 	bl	8002eb0 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d21d      	bcs.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a26:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695a      	ldr	r2, [r3, #20]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0201 	bic.w	r2, r2, #1
 8005a36:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e00f      	b.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d0c3      	beq.n	80059fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005ab6:	f023 030c 	bic.w	r3, r3, #12
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6812      	ldr	r2, [r2, #0]
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	430b      	orrs	r3, r1
 8005ac2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a2c      	ldr	r2, [pc, #176]	; (8005b90 <UART_SetConfig+0x114>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d103      	bne.n	8005aec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ae4:	f7fe fd00 	bl	80044e8 <HAL_RCC_GetPCLK2Freq>
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	e002      	b.n	8005af2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005aec:	f7fe fce8 	bl	80044c0 <HAL_RCC_GetPCLK1Freq>
 8005af0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009a      	lsls	r2, r3, #2
 8005afc:	441a      	add	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	4a22      	ldr	r2, [pc, #136]	; (8005b94 <UART_SetConfig+0x118>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	0119      	lsls	r1, r3, #4
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4613      	mov	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	009a      	lsls	r2, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b28:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <UART_SetConfig+0x118>)
 8005b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	2064      	movs	r0, #100	; 0x64
 8005b32:	fb00 f303 	mul.w	r3, r0, r3
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	3332      	adds	r3, #50	; 0x32
 8005b3c:	4a15      	ldr	r2, [pc, #84]	; (8005b94 <UART_SetConfig+0x118>)
 8005b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b42:	095b      	lsrs	r3, r3, #5
 8005b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b48:	4419      	add	r1, r3
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	009a      	lsls	r2, r3, #2
 8005b54:	441a      	add	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b60:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <UART_SetConfig+0x118>)
 8005b62:	fba3 0302 	umull	r0, r3, r3, r2
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	2064      	movs	r0, #100	; 0x64
 8005b6a:	fb00 f303 	mul.w	r3, r0, r3
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	3332      	adds	r3, #50	; 0x32
 8005b74:	4a07      	ldr	r2, [pc, #28]	; (8005b94 <UART_SetConfig+0x118>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	f003 020f 	and.w	r2, r3, #15
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	440a      	add	r2, r1
 8005b86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b88:	bf00      	nop
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	40013800 	.word	0x40013800
 8005b94:	51eb851f 	.word	0x51eb851f

08005b98 <__errno>:
 8005b98:	4b01      	ldr	r3, [pc, #4]	; (8005ba0 <__errno+0x8>)
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	2000010c 	.word	0x2000010c

08005ba4 <__libc_init_array>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	2600      	movs	r6, #0
 8005ba8:	4d0c      	ldr	r5, [pc, #48]	; (8005bdc <__libc_init_array+0x38>)
 8005baa:	4c0d      	ldr	r4, [pc, #52]	; (8005be0 <__libc_init_array+0x3c>)
 8005bac:	1b64      	subs	r4, r4, r5
 8005bae:	10a4      	asrs	r4, r4, #2
 8005bb0:	42a6      	cmp	r6, r4
 8005bb2:	d109      	bne.n	8005bc8 <__libc_init_array+0x24>
 8005bb4:	f002 fedc 	bl	8008970 <_init>
 8005bb8:	2600      	movs	r6, #0
 8005bba:	4d0a      	ldr	r5, [pc, #40]	; (8005be4 <__libc_init_array+0x40>)
 8005bbc:	4c0a      	ldr	r4, [pc, #40]	; (8005be8 <__libc_init_array+0x44>)
 8005bbe:	1b64      	subs	r4, r4, r5
 8005bc0:	10a4      	asrs	r4, r4, #2
 8005bc2:	42a6      	cmp	r6, r4
 8005bc4:	d105      	bne.n	8005bd2 <__libc_init_array+0x2e>
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bcc:	4798      	blx	r3
 8005bce:	3601      	adds	r6, #1
 8005bd0:	e7ee      	b.n	8005bb0 <__libc_init_array+0xc>
 8005bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd6:	4798      	blx	r3
 8005bd8:	3601      	adds	r6, #1
 8005bda:	e7f2      	b.n	8005bc2 <__libc_init_array+0x1e>
 8005bdc:	08008e5c 	.word	0x08008e5c
 8005be0:	08008e5c 	.word	0x08008e5c
 8005be4:	08008e5c 	.word	0x08008e5c
 8005be8:	08008e64 	.word	0x08008e64

08005bec <memcpy>:
 8005bec:	440a      	add	r2, r1
 8005bee:	4291      	cmp	r1, r2
 8005bf0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005bf4:	d100      	bne.n	8005bf8 <memcpy+0xc>
 8005bf6:	4770      	bx	lr
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bfe:	4291      	cmp	r1, r2
 8005c00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c04:	d1f9      	bne.n	8005bfa <memcpy+0xe>
 8005c06:	bd10      	pop	{r4, pc}

08005c08 <memset>:
 8005c08:	4603      	mov	r3, r0
 8005c0a:	4402      	add	r2, r0
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d100      	bne.n	8005c12 <memset+0xa>
 8005c10:	4770      	bx	lr
 8005c12:	f803 1b01 	strb.w	r1, [r3], #1
 8005c16:	e7f9      	b.n	8005c0c <memset+0x4>

08005c18 <__cvt>:
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c1e:	461f      	mov	r7, r3
 8005c20:	bfbb      	ittet	lt
 8005c22:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005c26:	461f      	movlt	r7, r3
 8005c28:	2300      	movge	r3, #0
 8005c2a:	232d      	movlt	r3, #45	; 0x2d
 8005c2c:	b088      	sub	sp, #32
 8005c2e:	4614      	mov	r4, r2
 8005c30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c32:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005c34:	7013      	strb	r3, [r2, #0]
 8005c36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c38:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005c3c:	f023 0820 	bic.w	r8, r3, #32
 8005c40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c44:	d005      	beq.n	8005c52 <__cvt+0x3a>
 8005c46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c4a:	d100      	bne.n	8005c4e <__cvt+0x36>
 8005c4c:	3501      	adds	r5, #1
 8005c4e:	2302      	movs	r3, #2
 8005c50:	e000      	b.n	8005c54 <__cvt+0x3c>
 8005c52:	2303      	movs	r3, #3
 8005c54:	aa07      	add	r2, sp, #28
 8005c56:	9204      	str	r2, [sp, #16]
 8005c58:	aa06      	add	r2, sp, #24
 8005c5a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005c5e:	e9cd 3500 	strd	r3, r5, [sp]
 8005c62:	4622      	mov	r2, r4
 8005c64:	463b      	mov	r3, r7
 8005c66:	f000 fd07 	bl	8006678 <_dtoa_r>
 8005c6a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c6e:	4606      	mov	r6, r0
 8005c70:	d102      	bne.n	8005c78 <__cvt+0x60>
 8005c72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c74:	07db      	lsls	r3, r3, #31
 8005c76:	d522      	bpl.n	8005cbe <__cvt+0xa6>
 8005c78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c7c:	eb06 0905 	add.w	r9, r6, r5
 8005c80:	d110      	bne.n	8005ca4 <__cvt+0x8c>
 8005c82:	7833      	ldrb	r3, [r6, #0]
 8005c84:	2b30      	cmp	r3, #48	; 0x30
 8005c86:	d10a      	bne.n	8005c9e <__cvt+0x86>
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	4639      	mov	r1, r7
 8005c90:	f7fa fe8a 	bl	80009a8 <__aeabi_dcmpeq>
 8005c94:	b918      	cbnz	r0, 8005c9e <__cvt+0x86>
 8005c96:	f1c5 0501 	rsb	r5, r5, #1
 8005c9a:	f8ca 5000 	str.w	r5, [sl]
 8005c9e:	f8da 3000 	ldr.w	r3, [sl]
 8005ca2:	4499      	add	r9, r3
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	4620      	mov	r0, r4
 8005caa:	4639      	mov	r1, r7
 8005cac:	f7fa fe7c 	bl	80009a8 <__aeabi_dcmpeq>
 8005cb0:	b108      	cbz	r0, 8005cb6 <__cvt+0x9e>
 8005cb2:	f8cd 901c 	str.w	r9, [sp, #28]
 8005cb6:	2230      	movs	r2, #48	; 0x30
 8005cb8:	9b07      	ldr	r3, [sp, #28]
 8005cba:	454b      	cmp	r3, r9
 8005cbc:	d307      	bcc.n	8005cce <__cvt+0xb6>
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	9b07      	ldr	r3, [sp, #28]
 8005cc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005cc4:	1b9b      	subs	r3, r3, r6
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	b008      	add	sp, #32
 8005cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cce:	1c59      	adds	r1, r3, #1
 8005cd0:	9107      	str	r1, [sp, #28]
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	e7f0      	b.n	8005cb8 <__cvt+0xa0>

08005cd6 <__exponent>:
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cda:	2900      	cmp	r1, #0
 8005cdc:	f803 2b02 	strb.w	r2, [r3], #2
 8005ce0:	bfb6      	itet	lt
 8005ce2:	222d      	movlt	r2, #45	; 0x2d
 8005ce4:	222b      	movge	r2, #43	; 0x2b
 8005ce6:	4249      	neglt	r1, r1
 8005ce8:	2909      	cmp	r1, #9
 8005cea:	7042      	strb	r2, [r0, #1]
 8005cec:	dd2b      	ble.n	8005d46 <__exponent+0x70>
 8005cee:	f10d 0407 	add.w	r4, sp, #7
 8005cf2:	46a4      	mov	ip, r4
 8005cf4:	270a      	movs	r7, #10
 8005cf6:	fb91 f6f7 	sdiv	r6, r1, r7
 8005cfa:	460a      	mov	r2, r1
 8005cfc:	46a6      	mov	lr, r4
 8005cfe:	fb07 1516 	mls	r5, r7, r6, r1
 8005d02:	2a63      	cmp	r2, #99	; 0x63
 8005d04:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005d08:	4631      	mov	r1, r6
 8005d0a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005d0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d12:	dcf0      	bgt.n	8005cf6 <__exponent+0x20>
 8005d14:	3130      	adds	r1, #48	; 0x30
 8005d16:	f1ae 0502 	sub.w	r5, lr, #2
 8005d1a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d1e:	4629      	mov	r1, r5
 8005d20:	1c44      	adds	r4, r0, #1
 8005d22:	4561      	cmp	r1, ip
 8005d24:	d30a      	bcc.n	8005d3c <__exponent+0x66>
 8005d26:	f10d 0209 	add.w	r2, sp, #9
 8005d2a:	eba2 020e 	sub.w	r2, r2, lr
 8005d2e:	4565      	cmp	r5, ip
 8005d30:	bf88      	it	hi
 8005d32:	2200      	movhi	r2, #0
 8005d34:	4413      	add	r3, r2
 8005d36:	1a18      	subs	r0, r3, r0
 8005d38:	b003      	add	sp, #12
 8005d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d40:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d44:	e7ed      	b.n	8005d22 <__exponent+0x4c>
 8005d46:	2330      	movs	r3, #48	; 0x30
 8005d48:	3130      	adds	r1, #48	; 0x30
 8005d4a:	7083      	strb	r3, [r0, #2]
 8005d4c:	70c1      	strb	r1, [r0, #3]
 8005d4e:	1d03      	adds	r3, r0, #4
 8005d50:	e7f1      	b.n	8005d36 <__exponent+0x60>
	...

08005d54 <_printf_float>:
 8005d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d58:	b091      	sub	sp, #68	; 0x44
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005d60:	4616      	mov	r6, r2
 8005d62:	461f      	mov	r7, r3
 8005d64:	4605      	mov	r5, r0
 8005d66:	f001 fa75 	bl	8007254 <_localeconv_r>
 8005d6a:	6803      	ldr	r3, [r0, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005d70:	f7fa f9ee 	bl	8000150 <strlen>
 8005d74:	2300      	movs	r3, #0
 8005d76:	930e      	str	r3, [sp, #56]	; 0x38
 8005d78:	f8d8 3000 	ldr.w	r3, [r8]
 8005d7c:	900a      	str	r0, [sp, #40]	; 0x28
 8005d7e:	3307      	adds	r3, #7
 8005d80:	f023 0307 	bic.w	r3, r3, #7
 8005d84:	f103 0208 	add.w	r2, r3, #8
 8005d88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005d8c:	f8d4 b000 	ldr.w	fp, [r4]
 8005d90:	f8c8 2000 	str.w	r2, [r8]
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d9c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005da0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005da4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005daa:	4640      	mov	r0, r8
 8005dac:	4b9c      	ldr	r3, [pc, #624]	; (8006020 <_printf_float+0x2cc>)
 8005dae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005db0:	f7fa fe2c 	bl	8000a0c <__aeabi_dcmpun>
 8005db4:	bb70      	cbnz	r0, 8005e14 <_printf_float+0xc0>
 8005db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dba:	4640      	mov	r0, r8
 8005dbc:	4b98      	ldr	r3, [pc, #608]	; (8006020 <_printf_float+0x2cc>)
 8005dbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dc0:	f7fa fe06 	bl	80009d0 <__aeabi_dcmple>
 8005dc4:	bb30      	cbnz	r0, 8005e14 <_printf_float+0xc0>
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4640      	mov	r0, r8
 8005dcc:	4651      	mov	r1, sl
 8005dce:	f7fa fdf5 	bl	80009bc <__aeabi_dcmplt>
 8005dd2:	b110      	cbz	r0, 8005dda <_printf_float+0x86>
 8005dd4:	232d      	movs	r3, #45	; 0x2d
 8005dd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dda:	4b92      	ldr	r3, [pc, #584]	; (8006024 <_printf_float+0x2d0>)
 8005ddc:	4892      	ldr	r0, [pc, #584]	; (8006028 <_printf_float+0x2d4>)
 8005dde:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005de2:	bf94      	ite	ls
 8005de4:	4698      	movls	r8, r3
 8005de6:	4680      	movhi	r8, r0
 8005de8:	2303      	movs	r3, #3
 8005dea:	f04f 0a00 	mov.w	sl, #0
 8005dee:	6123      	str	r3, [r4, #16]
 8005df0:	f02b 0304 	bic.w	r3, fp, #4
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	4633      	mov	r3, r6
 8005df8:	4621      	mov	r1, r4
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	9700      	str	r7, [sp, #0]
 8005dfe:	aa0f      	add	r2, sp, #60	; 0x3c
 8005e00:	f000 f9d4 	bl	80061ac <_printf_common>
 8005e04:	3001      	adds	r0, #1
 8005e06:	f040 8090 	bne.w	8005f2a <_printf_float+0x1d6>
 8005e0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e0e:	b011      	add	sp, #68	; 0x44
 8005e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e14:	4642      	mov	r2, r8
 8005e16:	4653      	mov	r3, sl
 8005e18:	4640      	mov	r0, r8
 8005e1a:	4651      	mov	r1, sl
 8005e1c:	f7fa fdf6 	bl	8000a0c <__aeabi_dcmpun>
 8005e20:	b148      	cbz	r0, 8005e36 <_printf_float+0xe2>
 8005e22:	f1ba 0f00 	cmp.w	sl, #0
 8005e26:	bfb8      	it	lt
 8005e28:	232d      	movlt	r3, #45	; 0x2d
 8005e2a:	4880      	ldr	r0, [pc, #512]	; (800602c <_printf_float+0x2d8>)
 8005e2c:	bfb8      	it	lt
 8005e2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e32:	4b7f      	ldr	r3, [pc, #508]	; (8006030 <_printf_float+0x2dc>)
 8005e34:	e7d3      	b.n	8005dde <_printf_float+0x8a>
 8005e36:	6863      	ldr	r3, [r4, #4]
 8005e38:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	d142      	bne.n	8005ec6 <_printf_float+0x172>
 8005e40:	2306      	movs	r3, #6
 8005e42:	6063      	str	r3, [r4, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	9206      	str	r2, [sp, #24]
 8005e48:	aa0e      	add	r2, sp, #56	; 0x38
 8005e4a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005e4e:	aa0d      	add	r2, sp, #52	; 0x34
 8005e50:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005e54:	9203      	str	r2, [sp, #12]
 8005e56:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005e5a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005e5e:	6023      	str	r3, [r4, #0]
 8005e60:	6863      	ldr	r3, [r4, #4]
 8005e62:	4642      	mov	r2, r8
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	4628      	mov	r0, r5
 8005e68:	4653      	mov	r3, sl
 8005e6a:	910b      	str	r1, [sp, #44]	; 0x2c
 8005e6c:	f7ff fed4 	bl	8005c18 <__cvt>
 8005e70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e72:	4680      	mov	r8, r0
 8005e74:	2947      	cmp	r1, #71	; 0x47
 8005e76:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e78:	d108      	bne.n	8005e8c <_printf_float+0x138>
 8005e7a:	1cc8      	adds	r0, r1, #3
 8005e7c:	db02      	blt.n	8005e84 <_printf_float+0x130>
 8005e7e:	6863      	ldr	r3, [r4, #4]
 8005e80:	4299      	cmp	r1, r3
 8005e82:	dd40      	ble.n	8005f06 <_printf_float+0x1b2>
 8005e84:	f1a9 0902 	sub.w	r9, r9, #2
 8005e88:	fa5f f989 	uxtb.w	r9, r9
 8005e8c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e90:	d81f      	bhi.n	8005ed2 <_printf_float+0x17e>
 8005e92:	464a      	mov	r2, r9
 8005e94:	3901      	subs	r1, #1
 8005e96:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e9a:	910d      	str	r1, [sp, #52]	; 0x34
 8005e9c:	f7ff ff1b 	bl	8005cd6 <__exponent>
 8005ea0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ea2:	4682      	mov	sl, r0
 8005ea4:	1813      	adds	r3, r2, r0
 8005ea6:	2a01      	cmp	r2, #1
 8005ea8:	6123      	str	r3, [r4, #16]
 8005eaa:	dc02      	bgt.n	8005eb2 <_printf_float+0x15e>
 8005eac:	6822      	ldr	r2, [r4, #0]
 8005eae:	07d2      	lsls	r2, r2, #31
 8005eb0:	d501      	bpl.n	8005eb6 <_printf_float+0x162>
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	6123      	str	r3, [r4, #16]
 8005eb6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d09b      	beq.n	8005df6 <_printf_float+0xa2>
 8005ebe:	232d      	movs	r3, #45	; 0x2d
 8005ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ec4:	e797      	b.n	8005df6 <_printf_float+0xa2>
 8005ec6:	2947      	cmp	r1, #71	; 0x47
 8005ec8:	d1bc      	bne.n	8005e44 <_printf_float+0xf0>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1ba      	bne.n	8005e44 <_printf_float+0xf0>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e7b7      	b.n	8005e42 <_printf_float+0xee>
 8005ed2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005ed6:	d118      	bne.n	8005f0a <_printf_float+0x1b6>
 8005ed8:	2900      	cmp	r1, #0
 8005eda:	6863      	ldr	r3, [r4, #4]
 8005edc:	dd0b      	ble.n	8005ef6 <_printf_float+0x1a2>
 8005ede:	6121      	str	r1, [r4, #16]
 8005ee0:	b913      	cbnz	r3, 8005ee8 <_printf_float+0x194>
 8005ee2:	6822      	ldr	r2, [r4, #0]
 8005ee4:	07d0      	lsls	r0, r2, #31
 8005ee6:	d502      	bpl.n	8005eee <_printf_float+0x19a>
 8005ee8:	3301      	adds	r3, #1
 8005eea:	440b      	add	r3, r1
 8005eec:	6123      	str	r3, [r4, #16]
 8005eee:	f04f 0a00 	mov.w	sl, #0
 8005ef2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ef4:	e7df      	b.n	8005eb6 <_printf_float+0x162>
 8005ef6:	b913      	cbnz	r3, 8005efe <_printf_float+0x1aa>
 8005ef8:	6822      	ldr	r2, [r4, #0]
 8005efa:	07d2      	lsls	r2, r2, #31
 8005efc:	d501      	bpl.n	8005f02 <_printf_float+0x1ae>
 8005efe:	3302      	adds	r3, #2
 8005f00:	e7f4      	b.n	8005eec <_printf_float+0x198>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e7f2      	b.n	8005eec <_printf_float+0x198>
 8005f06:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f0c:	4299      	cmp	r1, r3
 8005f0e:	db05      	blt.n	8005f1c <_printf_float+0x1c8>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	6121      	str	r1, [r4, #16]
 8005f14:	07d8      	lsls	r0, r3, #31
 8005f16:	d5ea      	bpl.n	8005eee <_printf_float+0x19a>
 8005f18:	1c4b      	adds	r3, r1, #1
 8005f1a:	e7e7      	b.n	8005eec <_printf_float+0x198>
 8005f1c:	2900      	cmp	r1, #0
 8005f1e:	bfcc      	ite	gt
 8005f20:	2201      	movgt	r2, #1
 8005f22:	f1c1 0202 	rsble	r2, r1, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	e7e0      	b.n	8005eec <_printf_float+0x198>
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	055a      	lsls	r2, r3, #21
 8005f2e:	d407      	bmi.n	8005f40 <_printf_float+0x1ec>
 8005f30:	6923      	ldr	r3, [r4, #16]
 8005f32:	4642      	mov	r2, r8
 8005f34:	4631      	mov	r1, r6
 8005f36:	4628      	mov	r0, r5
 8005f38:	47b8      	blx	r7
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	d12b      	bne.n	8005f96 <_printf_float+0x242>
 8005f3e:	e764      	b.n	8005e0a <_printf_float+0xb6>
 8005f40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f44:	f240 80dd 	bls.w	8006102 <_printf_float+0x3ae>
 8005f48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f7fa fd2a 	bl	80009a8 <__aeabi_dcmpeq>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d033      	beq.n	8005fc0 <_printf_float+0x26c>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	4a35      	ldr	r2, [pc, #212]	; (8006034 <_printf_float+0x2e0>)
 8005f60:	47b8      	blx	r7
 8005f62:	3001      	adds	r0, #1
 8005f64:	f43f af51 	beq.w	8005e0a <_printf_float+0xb6>
 8005f68:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	db02      	blt.n	8005f76 <_printf_float+0x222>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	07d8      	lsls	r0, r3, #31
 8005f74:	d50f      	bpl.n	8005f96 <_printf_float+0x242>
 8005f76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	47b8      	blx	r7
 8005f80:	3001      	adds	r0, #1
 8005f82:	f43f af42 	beq.w	8005e0a <_printf_float+0xb6>
 8005f86:	f04f 0800 	mov.w	r8, #0
 8005f8a:	f104 091a 	add.w	r9, r4, #26
 8005f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f90:	3b01      	subs	r3, #1
 8005f92:	4543      	cmp	r3, r8
 8005f94:	dc09      	bgt.n	8005faa <_printf_float+0x256>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	079b      	lsls	r3, r3, #30
 8005f9a:	f100 8102 	bmi.w	80061a2 <_printf_float+0x44e>
 8005f9e:	68e0      	ldr	r0, [r4, #12]
 8005fa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fa2:	4298      	cmp	r0, r3
 8005fa4:	bfb8      	it	lt
 8005fa6:	4618      	movlt	r0, r3
 8005fa8:	e731      	b.n	8005e0e <_printf_float+0xba>
 8005faa:	2301      	movs	r3, #1
 8005fac:	464a      	mov	r2, r9
 8005fae:	4631      	mov	r1, r6
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	47b8      	blx	r7
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	f43f af28 	beq.w	8005e0a <_printf_float+0xb6>
 8005fba:	f108 0801 	add.w	r8, r8, #1
 8005fbe:	e7e6      	b.n	8005f8e <_printf_float+0x23a>
 8005fc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	dc38      	bgt.n	8006038 <_printf_float+0x2e4>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4628      	mov	r0, r5
 8005fcc:	4a19      	ldr	r2, [pc, #100]	; (8006034 <_printf_float+0x2e0>)
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f43f af1a 	beq.w	8005e0a <_printf_float+0xb6>
 8005fd6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	d102      	bne.n	8005fe4 <_printf_float+0x290>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	07d9      	lsls	r1, r3, #31
 8005fe2:	d5d8      	bpl.n	8005f96 <_printf_float+0x242>
 8005fe4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fe8:	4631      	mov	r1, r6
 8005fea:	4628      	mov	r0, r5
 8005fec:	47b8      	blx	r7
 8005fee:	3001      	adds	r0, #1
 8005ff0:	f43f af0b 	beq.w	8005e0a <_printf_float+0xb6>
 8005ff4:	f04f 0900 	mov.w	r9, #0
 8005ff8:	f104 0a1a 	add.w	sl, r4, #26
 8005ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ffe:	425b      	negs	r3, r3
 8006000:	454b      	cmp	r3, r9
 8006002:	dc01      	bgt.n	8006008 <_printf_float+0x2b4>
 8006004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006006:	e794      	b.n	8005f32 <_printf_float+0x1de>
 8006008:	2301      	movs	r3, #1
 800600a:	4652      	mov	r2, sl
 800600c:	4631      	mov	r1, r6
 800600e:	4628      	mov	r0, r5
 8006010:	47b8      	blx	r7
 8006012:	3001      	adds	r0, #1
 8006014:	f43f aef9 	beq.w	8005e0a <_printf_float+0xb6>
 8006018:	f109 0901 	add.w	r9, r9, #1
 800601c:	e7ee      	b.n	8005ffc <_printf_float+0x2a8>
 800601e:	bf00      	nop
 8006020:	7fefffff 	.word	0x7fefffff
 8006024:	08008a7c 	.word	0x08008a7c
 8006028:	08008a80 	.word	0x08008a80
 800602c:	08008a88 	.word	0x08008a88
 8006030:	08008a84 	.word	0x08008a84
 8006034:	08008a8c 	.word	0x08008a8c
 8006038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800603a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800603c:	429a      	cmp	r2, r3
 800603e:	bfa8      	it	ge
 8006040:	461a      	movge	r2, r3
 8006042:	2a00      	cmp	r2, #0
 8006044:	4691      	mov	r9, r2
 8006046:	dc37      	bgt.n	80060b8 <_printf_float+0x364>
 8006048:	f04f 0b00 	mov.w	fp, #0
 800604c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006050:	f104 021a 	add.w	r2, r4, #26
 8006054:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006058:	ebaa 0309 	sub.w	r3, sl, r9
 800605c:	455b      	cmp	r3, fp
 800605e:	dc33      	bgt.n	80060c8 <_printf_float+0x374>
 8006060:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006064:	429a      	cmp	r2, r3
 8006066:	db3b      	blt.n	80060e0 <_printf_float+0x38c>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	07da      	lsls	r2, r3, #31
 800606c:	d438      	bmi.n	80060e0 <_printf_float+0x38c>
 800606e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006070:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006072:	eba2 030a 	sub.w	r3, r2, sl
 8006076:	eba2 0901 	sub.w	r9, r2, r1
 800607a:	4599      	cmp	r9, r3
 800607c:	bfa8      	it	ge
 800607e:	4699      	movge	r9, r3
 8006080:	f1b9 0f00 	cmp.w	r9, #0
 8006084:	dc34      	bgt.n	80060f0 <_printf_float+0x39c>
 8006086:	f04f 0800 	mov.w	r8, #0
 800608a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800608e:	f104 0a1a 	add.w	sl, r4, #26
 8006092:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006096:	1a9b      	subs	r3, r3, r2
 8006098:	eba3 0309 	sub.w	r3, r3, r9
 800609c:	4543      	cmp	r3, r8
 800609e:	f77f af7a 	ble.w	8005f96 <_printf_float+0x242>
 80060a2:	2301      	movs	r3, #1
 80060a4:	4652      	mov	r2, sl
 80060a6:	4631      	mov	r1, r6
 80060a8:	4628      	mov	r0, r5
 80060aa:	47b8      	blx	r7
 80060ac:	3001      	adds	r0, #1
 80060ae:	f43f aeac 	beq.w	8005e0a <_printf_float+0xb6>
 80060b2:	f108 0801 	add.w	r8, r8, #1
 80060b6:	e7ec      	b.n	8006092 <_printf_float+0x33e>
 80060b8:	4613      	mov	r3, r2
 80060ba:	4631      	mov	r1, r6
 80060bc:	4642      	mov	r2, r8
 80060be:	4628      	mov	r0, r5
 80060c0:	47b8      	blx	r7
 80060c2:	3001      	adds	r0, #1
 80060c4:	d1c0      	bne.n	8006048 <_printf_float+0x2f4>
 80060c6:	e6a0      	b.n	8005e0a <_printf_float+0xb6>
 80060c8:	2301      	movs	r3, #1
 80060ca:	4631      	mov	r1, r6
 80060cc:	4628      	mov	r0, r5
 80060ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80060d0:	47b8      	blx	r7
 80060d2:	3001      	adds	r0, #1
 80060d4:	f43f ae99 	beq.w	8005e0a <_printf_float+0xb6>
 80060d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060da:	f10b 0b01 	add.w	fp, fp, #1
 80060de:	e7b9      	b.n	8006054 <_printf_float+0x300>
 80060e0:	4631      	mov	r1, r6
 80060e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060e6:	4628      	mov	r0, r5
 80060e8:	47b8      	blx	r7
 80060ea:	3001      	adds	r0, #1
 80060ec:	d1bf      	bne.n	800606e <_printf_float+0x31a>
 80060ee:	e68c      	b.n	8005e0a <_printf_float+0xb6>
 80060f0:	464b      	mov	r3, r9
 80060f2:	4631      	mov	r1, r6
 80060f4:	4628      	mov	r0, r5
 80060f6:	eb08 020a 	add.w	r2, r8, sl
 80060fa:	47b8      	blx	r7
 80060fc:	3001      	adds	r0, #1
 80060fe:	d1c2      	bne.n	8006086 <_printf_float+0x332>
 8006100:	e683      	b.n	8005e0a <_printf_float+0xb6>
 8006102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006104:	2a01      	cmp	r2, #1
 8006106:	dc01      	bgt.n	800610c <_printf_float+0x3b8>
 8006108:	07db      	lsls	r3, r3, #31
 800610a:	d537      	bpl.n	800617c <_printf_float+0x428>
 800610c:	2301      	movs	r3, #1
 800610e:	4642      	mov	r2, r8
 8006110:	4631      	mov	r1, r6
 8006112:	4628      	mov	r0, r5
 8006114:	47b8      	blx	r7
 8006116:	3001      	adds	r0, #1
 8006118:	f43f ae77 	beq.w	8005e0a <_printf_float+0xb6>
 800611c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006120:	4631      	mov	r1, r6
 8006122:	4628      	mov	r0, r5
 8006124:	47b8      	blx	r7
 8006126:	3001      	adds	r0, #1
 8006128:	f43f ae6f 	beq.w	8005e0a <_printf_float+0xb6>
 800612c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006130:	2200      	movs	r2, #0
 8006132:	2300      	movs	r3, #0
 8006134:	f7fa fc38 	bl	80009a8 <__aeabi_dcmpeq>
 8006138:	b9d8      	cbnz	r0, 8006172 <_printf_float+0x41e>
 800613a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800613c:	f108 0201 	add.w	r2, r8, #1
 8006140:	3b01      	subs	r3, #1
 8006142:	4631      	mov	r1, r6
 8006144:	4628      	mov	r0, r5
 8006146:	47b8      	blx	r7
 8006148:	3001      	adds	r0, #1
 800614a:	d10e      	bne.n	800616a <_printf_float+0x416>
 800614c:	e65d      	b.n	8005e0a <_printf_float+0xb6>
 800614e:	2301      	movs	r3, #1
 8006150:	464a      	mov	r2, r9
 8006152:	4631      	mov	r1, r6
 8006154:	4628      	mov	r0, r5
 8006156:	47b8      	blx	r7
 8006158:	3001      	adds	r0, #1
 800615a:	f43f ae56 	beq.w	8005e0a <_printf_float+0xb6>
 800615e:	f108 0801 	add.w	r8, r8, #1
 8006162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006164:	3b01      	subs	r3, #1
 8006166:	4543      	cmp	r3, r8
 8006168:	dcf1      	bgt.n	800614e <_printf_float+0x3fa>
 800616a:	4653      	mov	r3, sl
 800616c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006170:	e6e0      	b.n	8005f34 <_printf_float+0x1e0>
 8006172:	f04f 0800 	mov.w	r8, #0
 8006176:	f104 091a 	add.w	r9, r4, #26
 800617a:	e7f2      	b.n	8006162 <_printf_float+0x40e>
 800617c:	2301      	movs	r3, #1
 800617e:	4642      	mov	r2, r8
 8006180:	e7df      	b.n	8006142 <_printf_float+0x3ee>
 8006182:	2301      	movs	r3, #1
 8006184:	464a      	mov	r2, r9
 8006186:	4631      	mov	r1, r6
 8006188:	4628      	mov	r0, r5
 800618a:	47b8      	blx	r7
 800618c:	3001      	adds	r0, #1
 800618e:	f43f ae3c 	beq.w	8005e0a <_printf_float+0xb6>
 8006192:	f108 0801 	add.w	r8, r8, #1
 8006196:	68e3      	ldr	r3, [r4, #12]
 8006198:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800619a:	1a5b      	subs	r3, r3, r1
 800619c:	4543      	cmp	r3, r8
 800619e:	dcf0      	bgt.n	8006182 <_printf_float+0x42e>
 80061a0:	e6fd      	b.n	8005f9e <_printf_float+0x24a>
 80061a2:	f04f 0800 	mov.w	r8, #0
 80061a6:	f104 0919 	add.w	r9, r4, #25
 80061aa:	e7f4      	b.n	8006196 <_printf_float+0x442>

080061ac <_printf_common>:
 80061ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b0:	4616      	mov	r6, r2
 80061b2:	4699      	mov	r9, r3
 80061b4:	688a      	ldr	r2, [r1, #8]
 80061b6:	690b      	ldr	r3, [r1, #16]
 80061b8:	4607      	mov	r7, r0
 80061ba:	4293      	cmp	r3, r2
 80061bc:	bfb8      	it	lt
 80061be:	4613      	movlt	r3, r2
 80061c0:	6033      	str	r3, [r6, #0]
 80061c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061c6:	460c      	mov	r4, r1
 80061c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061cc:	b10a      	cbz	r2, 80061d2 <_printf_common+0x26>
 80061ce:	3301      	adds	r3, #1
 80061d0:	6033      	str	r3, [r6, #0]
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	0699      	lsls	r1, r3, #26
 80061d6:	bf42      	ittt	mi
 80061d8:	6833      	ldrmi	r3, [r6, #0]
 80061da:	3302      	addmi	r3, #2
 80061dc:	6033      	strmi	r3, [r6, #0]
 80061de:	6825      	ldr	r5, [r4, #0]
 80061e0:	f015 0506 	ands.w	r5, r5, #6
 80061e4:	d106      	bne.n	80061f4 <_printf_common+0x48>
 80061e6:	f104 0a19 	add.w	sl, r4, #25
 80061ea:	68e3      	ldr	r3, [r4, #12]
 80061ec:	6832      	ldr	r2, [r6, #0]
 80061ee:	1a9b      	subs	r3, r3, r2
 80061f0:	42ab      	cmp	r3, r5
 80061f2:	dc28      	bgt.n	8006246 <_printf_common+0x9a>
 80061f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061f8:	1e13      	subs	r3, r2, #0
 80061fa:	6822      	ldr	r2, [r4, #0]
 80061fc:	bf18      	it	ne
 80061fe:	2301      	movne	r3, #1
 8006200:	0692      	lsls	r2, r2, #26
 8006202:	d42d      	bmi.n	8006260 <_printf_common+0xb4>
 8006204:	4649      	mov	r1, r9
 8006206:	4638      	mov	r0, r7
 8006208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800620c:	47c0      	blx	r8
 800620e:	3001      	adds	r0, #1
 8006210:	d020      	beq.n	8006254 <_printf_common+0xa8>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	68e5      	ldr	r5, [r4, #12]
 8006216:	f003 0306 	and.w	r3, r3, #6
 800621a:	2b04      	cmp	r3, #4
 800621c:	bf18      	it	ne
 800621e:	2500      	movne	r5, #0
 8006220:	6832      	ldr	r2, [r6, #0]
 8006222:	f04f 0600 	mov.w	r6, #0
 8006226:	68a3      	ldr	r3, [r4, #8]
 8006228:	bf08      	it	eq
 800622a:	1aad      	subeq	r5, r5, r2
 800622c:	6922      	ldr	r2, [r4, #16]
 800622e:	bf08      	it	eq
 8006230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006234:	4293      	cmp	r3, r2
 8006236:	bfc4      	itt	gt
 8006238:	1a9b      	subgt	r3, r3, r2
 800623a:	18ed      	addgt	r5, r5, r3
 800623c:	341a      	adds	r4, #26
 800623e:	42b5      	cmp	r5, r6
 8006240:	d11a      	bne.n	8006278 <_printf_common+0xcc>
 8006242:	2000      	movs	r0, #0
 8006244:	e008      	b.n	8006258 <_printf_common+0xac>
 8006246:	2301      	movs	r3, #1
 8006248:	4652      	mov	r2, sl
 800624a:	4649      	mov	r1, r9
 800624c:	4638      	mov	r0, r7
 800624e:	47c0      	blx	r8
 8006250:	3001      	adds	r0, #1
 8006252:	d103      	bne.n	800625c <_printf_common+0xb0>
 8006254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800625c:	3501      	adds	r5, #1
 800625e:	e7c4      	b.n	80061ea <_printf_common+0x3e>
 8006260:	2030      	movs	r0, #48	; 0x30
 8006262:	18e1      	adds	r1, r4, r3
 8006264:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800626e:	4422      	add	r2, r4
 8006270:	3302      	adds	r3, #2
 8006272:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006276:	e7c5      	b.n	8006204 <_printf_common+0x58>
 8006278:	2301      	movs	r3, #1
 800627a:	4622      	mov	r2, r4
 800627c:	4649      	mov	r1, r9
 800627e:	4638      	mov	r0, r7
 8006280:	47c0      	blx	r8
 8006282:	3001      	adds	r0, #1
 8006284:	d0e6      	beq.n	8006254 <_printf_common+0xa8>
 8006286:	3601      	adds	r6, #1
 8006288:	e7d9      	b.n	800623e <_printf_common+0x92>
	...

0800628c <_printf_i>:
 800628c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	460c      	mov	r4, r1
 8006292:	7e27      	ldrb	r7, [r4, #24]
 8006294:	4691      	mov	r9, r2
 8006296:	2f78      	cmp	r7, #120	; 0x78
 8006298:	4680      	mov	r8, r0
 800629a:	469a      	mov	sl, r3
 800629c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800629e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062a2:	d807      	bhi.n	80062b4 <_printf_i+0x28>
 80062a4:	2f62      	cmp	r7, #98	; 0x62
 80062a6:	d80a      	bhi.n	80062be <_printf_i+0x32>
 80062a8:	2f00      	cmp	r7, #0
 80062aa:	f000 80d9 	beq.w	8006460 <_printf_i+0x1d4>
 80062ae:	2f58      	cmp	r7, #88	; 0x58
 80062b0:	f000 80a4 	beq.w	80063fc <_printf_i+0x170>
 80062b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062bc:	e03a      	b.n	8006334 <_printf_i+0xa8>
 80062be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062c2:	2b15      	cmp	r3, #21
 80062c4:	d8f6      	bhi.n	80062b4 <_printf_i+0x28>
 80062c6:	a001      	add	r0, pc, #4	; (adr r0, 80062cc <_printf_i+0x40>)
 80062c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80062cc:	08006325 	.word	0x08006325
 80062d0:	08006339 	.word	0x08006339
 80062d4:	080062b5 	.word	0x080062b5
 80062d8:	080062b5 	.word	0x080062b5
 80062dc:	080062b5 	.word	0x080062b5
 80062e0:	080062b5 	.word	0x080062b5
 80062e4:	08006339 	.word	0x08006339
 80062e8:	080062b5 	.word	0x080062b5
 80062ec:	080062b5 	.word	0x080062b5
 80062f0:	080062b5 	.word	0x080062b5
 80062f4:	080062b5 	.word	0x080062b5
 80062f8:	08006447 	.word	0x08006447
 80062fc:	08006369 	.word	0x08006369
 8006300:	08006429 	.word	0x08006429
 8006304:	080062b5 	.word	0x080062b5
 8006308:	080062b5 	.word	0x080062b5
 800630c:	08006469 	.word	0x08006469
 8006310:	080062b5 	.word	0x080062b5
 8006314:	08006369 	.word	0x08006369
 8006318:	080062b5 	.word	0x080062b5
 800631c:	080062b5 	.word	0x080062b5
 8006320:	08006431 	.word	0x08006431
 8006324:	680b      	ldr	r3, [r1, #0]
 8006326:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800632a:	1d1a      	adds	r2, r3, #4
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	600a      	str	r2, [r1, #0]
 8006330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006334:	2301      	movs	r3, #1
 8006336:	e0a4      	b.n	8006482 <_printf_i+0x1f6>
 8006338:	6825      	ldr	r5, [r4, #0]
 800633a:	6808      	ldr	r0, [r1, #0]
 800633c:	062e      	lsls	r6, r5, #24
 800633e:	f100 0304 	add.w	r3, r0, #4
 8006342:	d50a      	bpl.n	800635a <_printf_i+0xce>
 8006344:	6805      	ldr	r5, [r0, #0]
 8006346:	600b      	str	r3, [r1, #0]
 8006348:	2d00      	cmp	r5, #0
 800634a:	da03      	bge.n	8006354 <_printf_i+0xc8>
 800634c:	232d      	movs	r3, #45	; 0x2d
 800634e:	426d      	negs	r5, r5
 8006350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006354:	230a      	movs	r3, #10
 8006356:	485e      	ldr	r0, [pc, #376]	; (80064d0 <_printf_i+0x244>)
 8006358:	e019      	b.n	800638e <_printf_i+0x102>
 800635a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800635e:	6805      	ldr	r5, [r0, #0]
 8006360:	600b      	str	r3, [r1, #0]
 8006362:	bf18      	it	ne
 8006364:	b22d      	sxthne	r5, r5
 8006366:	e7ef      	b.n	8006348 <_printf_i+0xbc>
 8006368:	680b      	ldr	r3, [r1, #0]
 800636a:	6825      	ldr	r5, [r4, #0]
 800636c:	1d18      	adds	r0, r3, #4
 800636e:	6008      	str	r0, [r1, #0]
 8006370:	0628      	lsls	r0, r5, #24
 8006372:	d501      	bpl.n	8006378 <_printf_i+0xec>
 8006374:	681d      	ldr	r5, [r3, #0]
 8006376:	e002      	b.n	800637e <_printf_i+0xf2>
 8006378:	0669      	lsls	r1, r5, #25
 800637a:	d5fb      	bpl.n	8006374 <_printf_i+0xe8>
 800637c:	881d      	ldrh	r5, [r3, #0]
 800637e:	2f6f      	cmp	r7, #111	; 0x6f
 8006380:	bf0c      	ite	eq
 8006382:	2308      	moveq	r3, #8
 8006384:	230a      	movne	r3, #10
 8006386:	4852      	ldr	r0, [pc, #328]	; (80064d0 <_printf_i+0x244>)
 8006388:	2100      	movs	r1, #0
 800638a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800638e:	6866      	ldr	r6, [r4, #4]
 8006390:	2e00      	cmp	r6, #0
 8006392:	bfa8      	it	ge
 8006394:	6821      	ldrge	r1, [r4, #0]
 8006396:	60a6      	str	r6, [r4, #8]
 8006398:	bfa4      	itt	ge
 800639a:	f021 0104 	bicge.w	r1, r1, #4
 800639e:	6021      	strge	r1, [r4, #0]
 80063a0:	b90d      	cbnz	r5, 80063a6 <_printf_i+0x11a>
 80063a2:	2e00      	cmp	r6, #0
 80063a4:	d04d      	beq.n	8006442 <_printf_i+0x1b6>
 80063a6:	4616      	mov	r6, r2
 80063a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80063ac:	fb03 5711 	mls	r7, r3, r1, r5
 80063b0:	5dc7      	ldrb	r7, [r0, r7]
 80063b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063b6:	462f      	mov	r7, r5
 80063b8:	42bb      	cmp	r3, r7
 80063ba:	460d      	mov	r5, r1
 80063bc:	d9f4      	bls.n	80063a8 <_printf_i+0x11c>
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d10b      	bne.n	80063da <_printf_i+0x14e>
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	07df      	lsls	r7, r3, #31
 80063c6:	d508      	bpl.n	80063da <_printf_i+0x14e>
 80063c8:	6923      	ldr	r3, [r4, #16]
 80063ca:	6861      	ldr	r1, [r4, #4]
 80063cc:	4299      	cmp	r1, r3
 80063ce:	bfde      	ittt	le
 80063d0:	2330      	movle	r3, #48	; 0x30
 80063d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063d6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80063da:	1b92      	subs	r2, r2, r6
 80063dc:	6122      	str	r2, [r4, #16]
 80063de:	464b      	mov	r3, r9
 80063e0:	4621      	mov	r1, r4
 80063e2:	4640      	mov	r0, r8
 80063e4:	f8cd a000 	str.w	sl, [sp]
 80063e8:	aa03      	add	r2, sp, #12
 80063ea:	f7ff fedf 	bl	80061ac <_printf_common>
 80063ee:	3001      	adds	r0, #1
 80063f0:	d14c      	bne.n	800648c <_printf_i+0x200>
 80063f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063f6:	b004      	add	sp, #16
 80063f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fc:	4834      	ldr	r0, [pc, #208]	; (80064d0 <_printf_i+0x244>)
 80063fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006402:	680e      	ldr	r6, [r1, #0]
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	f856 5b04 	ldr.w	r5, [r6], #4
 800640a:	061f      	lsls	r7, r3, #24
 800640c:	600e      	str	r6, [r1, #0]
 800640e:	d514      	bpl.n	800643a <_printf_i+0x1ae>
 8006410:	07d9      	lsls	r1, r3, #31
 8006412:	bf44      	itt	mi
 8006414:	f043 0320 	orrmi.w	r3, r3, #32
 8006418:	6023      	strmi	r3, [r4, #0]
 800641a:	b91d      	cbnz	r5, 8006424 <_printf_i+0x198>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	f023 0320 	bic.w	r3, r3, #32
 8006422:	6023      	str	r3, [r4, #0]
 8006424:	2310      	movs	r3, #16
 8006426:	e7af      	b.n	8006388 <_printf_i+0xfc>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	f043 0320 	orr.w	r3, r3, #32
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	2378      	movs	r3, #120	; 0x78
 8006432:	4828      	ldr	r0, [pc, #160]	; (80064d4 <_printf_i+0x248>)
 8006434:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006438:	e7e3      	b.n	8006402 <_printf_i+0x176>
 800643a:	065e      	lsls	r6, r3, #25
 800643c:	bf48      	it	mi
 800643e:	b2ad      	uxthmi	r5, r5
 8006440:	e7e6      	b.n	8006410 <_printf_i+0x184>
 8006442:	4616      	mov	r6, r2
 8006444:	e7bb      	b.n	80063be <_printf_i+0x132>
 8006446:	680b      	ldr	r3, [r1, #0]
 8006448:	6826      	ldr	r6, [r4, #0]
 800644a:	1d1d      	adds	r5, r3, #4
 800644c:	6960      	ldr	r0, [r4, #20]
 800644e:	600d      	str	r5, [r1, #0]
 8006450:	0635      	lsls	r5, r6, #24
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	d501      	bpl.n	800645a <_printf_i+0x1ce>
 8006456:	6018      	str	r0, [r3, #0]
 8006458:	e002      	b.n	8006460 <_printf_i+0x1d4>
 800645a:	0671      	lsls	r1, r6, #25
 800645c:	d5fb      	bpl.n	8006456 <_printf_i+0x1ca>
 800645e:	8018      	strh	r0, [r3, #0]
 8006460:	2300      	movs	r3, #0
 8006462:	4616      	mov	r6, r2
 8006464:	6123      	str	r3, [r4, #16]
 8006466:	e7ba      	b.n	80063de <_printf_i+0x152>
 8006468:	680b      	ldr	r3, [r1, #0]
 800646a:	1d1a      	adds	r2, r3, #4
 800646c:	600a      	str	r2, [r1, #0]
 800646e:	681e      	ldr	r6, [r3, #0]
 8006470:	2100      	movs	r1, #0
 8006472:	4630      	mov	r0, r6
 8006474:	6862      	ldr	r2, [r4, #4]
 8006476:	f000 fef9 	bl	800726c <memchr>
 800647a:	b108      	cbz	r0, 8006480 <_printf_i+0x1f4>
 800647c:	1b80      	subs	r0, r0, r6
 800647e:	6060      	str	r0, [r4, #4]
 8006480:	6863      	ldr	r3, [r4, #4]
 8006482:	6123      	str	r3, [r4, #16]
 8006484:	2300      	movs	r3, #0
 8006486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800648a:	e7a8      	b.n	80063de <_printf_i+0x152>
 800648c:	4632      	mov	r2, r6
 800648e:	4649      	mov	r1, r9
 8006490:	4640      	mov	r0, r8
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	47d0      	blx	sl
 8006496:	3001      	adds	r0, #1
 8006498:	d0ab      	beq.n	80063f2 <_printf_i+0x166>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	079b      	lsls	r3, r3, #30
 800649e:	d413      	bmi.n	80064c8 <_printf_i+0x23c>
 80064a0:	68e0      	ldr	r0, [r4, #12]
 80064a2:	9b03      	ldr	r3, [sp, #12]
 80064a4:	4298      	cmp	r0, r3
 80064a6:	bfb8      	it	lt
 80064a8:	4618      	movlt	r0, r3
 80064aa:	e7a4      	b.n	80063f6 <_printf_i+0x16a>
 80064ac:	2301      	movs	r3, #1
 80064ae:	4632      	mov	r2, r6
 80064b0:	4649      	mov	r1, r9
 80064b2:	4640      	mov	r0, r8
 80064b4:	47d0      	blx	sl
 80064b6:	3001      	adds	r0, #1
 80064b8:	d09b      	beq.n	80063f2 <_printf_i+0x166>
 80064ba:	3501      	adds	r5, #1
 80064bc:	68e3      	ldr	r3, [r4, #12]
 80064be:	9903      	ldr	r1, [sp, #12]
 80064c0:	1a5b      	subs	r3, r3, r1
 80064c2:	42ab      	cmp	r3, r5
 80064c4:	dcf2      	bgt.n	80064ac <_printf_i+0x220>
 80064c6:	e7eb      	b.n	80064a0 <_printf_i+0x214>
 80064c8:	2500      	movs	r5, #0
 80064ca:	f104 0619 	add.w	r6, r4, #25
 80064ce:	e7f5      	b.n	80064bc <_printf_i+0x230>
 80064d0:	08008a8e 	.word	0x08008a8e
 80064d4:	08008a9f 	.word	0x08008a9f

080064d8 <siprintf>:
 80064d8:	b40e      	push	{r1, r2, r3}
 80064da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064de:	b500      	push	{lr}
 80064e0:	b09c      	sub	sp, #112	; 0x70
 80064e2:	ab1d      	add	r3, sp, #116	; 0x74
 80064e4:	9002      	str	r0, [sp, #8]
 80064e6:	9006      	str	r0, [sp, #24]
 80064e8:	9107      	str	r1, [sp, #28]
 80064ea:	9104      	str	r1, [sp, #16]
 80064ec:	4808      	ldr	r0, [pc, #32]	; (8006510 <siprintf+0x38>)
 80064ee:	4909      	ldr	r1, [pc, #36]	; (8006514 <siprintf+0x3c>)
 80064f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064f4:	9105      	str	r1, [sp, #20]
 80064f6:	6800      	ldr	r0, [r0, #0]
 80064f8:	a902      	add	r1, sp, #8
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	f001 fb56 	bl	8007bac <_svfiprintf_r>
 8006500:	2200      	movs	r2, #0
 8006502:	9b02      	ldr	r3, [sp, #8]
 8006504:	701a      	strb	r2, [r3, #0]
 8006506:	b01c      	add	sp, #112	; 0x70
 8006508:	f85d eb04 	ldr.w	lr, [sp], #4
 800650c:	b003      	add	sp, #12
 800650e:	4770      	bx	lr
 8006510:	2000010c 	.word	0x2000010c
 8006514:	ffff0208 	.word	0xffff0208

08006518 <_vsiprintf_r>:
 8006518:	b500      	push	{lr}
 800651a:	b09b      	sub	sp, #108	; 0x6c
 800651c:	9100      	str	r1, [sp, #0]
 800651e:	9104      	str	r1, [sp, #16]
 8006520:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006524:	9105      	str	r1, [sp, #20]
 8006526:	9102      	str	r1, [sp, #8]
 8006528:	4905      	ldr	r1, [pc, #20]	; (8006540 <_vsiprintf_r+0x28>)
 800652a:	9103      	str	r1, [sp, #12]
 800652c:	4669      	mov	r1, sp
 800652e:	f001 fb3d 	bl	8007bac <_svfiprintf_r>
 8006532:	2200      	movs	r2, #0
 8006534:	9b00      	ldr	r3, [sp, #0]
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	b01b      	add	sp, #108	; 0x6c
 800653a:	f85d fb04 	ldr.w	pc, [sp], #4
 800653e:	bf00      	nop
 8006540:	ffff0208 	.word	0xffff0208

08006544 <vsiprintf>:
 8006544:	4613      	mov	r3, r2
 8006546:	460a      	mov	r2, r1
 8006548:	4601      	mov	r1, r0
 800654a:	4802      	ldr	r0, [pc, #8]	; (8006554 <vsiprintf+0x10>)
 800654c:	6800      	ldr	r0, [r0, #0]
 800654e:	f7ff bfe3 	b.w	8006518 <_vsiprintf_r>
 8006552:	bf00      	nop
 8006554:	2000010c 	.word	0x2000010c

08006558 <quorem>:
 8006558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655c:	6903      	ldr	r3, [r0, #16]
 800655e:	690c      	ldr	r4, [r1, #16]
 8006560:	4607      	mov	r7, r0
 8006562:	42a3      	cmp	r3, r4
 8006564:	f2c0 8083 	blt.w	800666e <quorem+0x116>
 8006568:	3c01      	subs	r4, #1
 800656a:	f100 0514 	add.w	r5, r0, #20
 800656e:	f101 0814 	add.w	r8, r1, #20
 8006572:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800657c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006580:	3301      	adds	r3, #1
 8006582:	429a      	cmp	r2, r3
 8006584:	fbb2 f6f3 	udiv	r6, r2, r3
 8006588:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800658c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006590:	d332      	bcc.n	80065f8 <quorem+0xa0>
 8006592:	f04f 0e00 	mov.w	lr, #0
 8006596:	4640      	mov	r0, r8
 8006598:	46ac      	mov	ip, r5
 800659a:	46f2      	mov	sl, lr
 800659c:	f850 2b04 	ldr.w	r2, [r0], #4
 80065a0:	b293      	uxth	r3, r2
 80065a2:	fb06 e303 	mla	r3, r6, r3, lr
 80065a6:	0c12      	lsrs	r2, r2, #16
 80065a8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80065ac:	fb06 e202 	mla	r2, r6, r2, lr
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	ebaa 0303 	sub.w	r3, sl, r3
 80065b6:	f8dc a000 	ldr.w	sl, [ip]
 80065ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80065be:	fa1f fa8a 	uxth.w	sl, sl
 80065c2:	4453      	add	r3, sl
 80065c4:	fa1f fa82 	uxth.w	sl, r2
 80065c8:	f8dc 2000 	ldr.w	r2, [ip]
 80065cc:	4581      	cmp	r9, r0
 80065ce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80065d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065e0:	f84c 3b04 	str.w	r3, [ip], #4
 80065e4:	d2da      	bcs.n	800659c <quorem+0x44>
 80065e6:	f855 300b 	ldr.w	r3, [r5, fp]
 80065ea:	b92b      	cbnz	r3, 80065f8 <quorem+0xa0>
 80065ec:	9b01      	ldr	r3, [sp, #4]
 80065ee:	3b04      	subs	r3, #4
 80065f0:	429d      	cmp	r5, r3
 80065f2:	461a      	mov	r2, r3
 80065f4:	d32f      	bcc.n	8006656 <quorem+0xfe>
 80065f6:	613c      	str	r4, [r7, #16]
 80065f8:	4638      	mov	r0, r7
 80065fa:	f001 f8bf 	bl	800777c <__mcmp>
 80065fe:	2800      	cmp	r0, #0
 8006600:	db25      	blt.n	800664e <quorem+0xf6>
 8006602:	4628      	mov	r0, r5
 8006604:	f04f 0c00 	mov.w	ip, #0
 8006608:	3601      	adds	r6, #1
 800660a:	f858 1b04 	ldr.w	r1, [r8], #4
 800660e:	f8d0 e000 	ldr.w	lr, [r0]
 8006612:	b28b      	uxth	r3, r1
 8006614:	ebac 0303 	sub.w	r3, ip, r3
 8006618:	fa1f f28e 	uxth.w	r2, lr
 800661c:	4413      	add	r3, r2
 800661e:	0c0a      	lsrs	r2, r1, #16
 8006620:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006624:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006628:	b29b      	uxth	r3, r3
 800662a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800662e:	45c1      	cmp	r9, r8
 8006630:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006634:	f840 3b04 	str.w	r3, [r0], #4
 8006638:	d2e7      	bcs.n	800660a <quorem+0xb2>
 800663a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800663e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006642:	b922      	cbnz	r2, 800664e <quorem+0xf6>
 8006644:	3b04      	subs	r3, #4
 8006646:	429d      	cmp	r5, r3
 8006648:	461a      	mov	r2, r3
 800664a:	d30a      	bcc.n	8006662 <quorem+0x10a>
 800664c:	613c      	str	r4, [r7, #16]
 800664e:	4630      	mov	r0, r6
 8006650:	b003      	add	sp, #12
 8006652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	3b04      	subs	r3, #4
 800665a:	2a00      	cmp	r2, #0
 800665c:	d1cb      	bne.n	80065f6 <quorem+0x9e>
 800665e:	3c01      	subs	r4, #1
 8006660:	e7c6      	b.n	80065f0 <quorem+0x98>
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	3b04      	subs	r3, #4
 8006666:	2a00      	cmp	r2, #0
 8006668:	d1f0      	bne.n	800664c <quorem+0xf4>
 800666a:	3c01      	subs	r4, #1
 800666c:	e7eb      	b.n	8006646 <quorem+0xee>
 800666e:	2000      	movs	r0, #0
 8006670:	e7ee      	b.n	8006650 <quorem+0xf8>
 8006672:	0000      	movs	r0, r0
 8006674:	0000      	movs	r0, r0
	...

08006678 <_dtoa_r>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	4616      	mov	r6, r2
 800667e:	461f      	mov	r7, r3
 8006680:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006682:	b099      	sub	sp, #100	; 0x64
 8006684:	4605      	mov	r5, r0
 8006686:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800668a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800668e:	b974      	cbnz	r4, 80066ae <_dtoa_r+0x36>
 8006690:	2010      	movs	r0, #16
 8006692:	f000 fde3 	bl	800725c <malloc>
 8006696:	4602      	mov	r2, r0
 8006698:	6268      	str	r0, [r5, #36]	; 0x24
 800669a:	b920      	cbnz	r0, 80066a6 <_dtoa_r+0x2e>
 800669c:	21ea      	movs	r1, #234	; 0xea
 800669e:	4bae      	ldr	r3, [pc, #696]	; (8006958 <_dtoa_r+0x2e0>)
 80066a0:	48ae      	ldr	r0, [pc, #696]	; (800695c <_dtoa_r+0x2e4>)
 80066a2:	f001 fb93 	bl	8007dcc <__assert_func>
 80066a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066aa:	6004      	str	r4, [r0, #0]
 80066ac:	60c4      	str	r4, [r0, #12]
 80066ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80066b0:	6819      	ldr	r1, [r3, #0]
 80066b2:	b151      	cbz	r1, 80066ca <_dtoa_r+0x52>
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	2301      	movs	r3, #1
 80066b8:	4093      	lsls	r3, r2
 80066ba:	604a      	str	r2, [r1, #4]
 80066bc:	608b      	str	r3, [r1, #8]
 80066be:	4628      	mov	r0, r5
 80066c0:	f000 fe22 	bl	8007308 <_Bfree>
 80066c4:	2200      	movs	r2, #0
 80066c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	1e3b      	subs	r3, r7, #0
 80066cc:	bfaf      	iteee	ge
 80066ce:	2300      	movge	r3, #0
 80066d0:	2201      	movlt	r2, #1
 80066d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80066d6:	9305      	strlt	r3, [sp, #20]
 80066d8:	bfa8      	it	ge
 80066da:	f8c8 3000 	strge.w	r3, [r8]
 80066de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80066e2:	4b9f      	ldr	r3, [pc, #636]	; (8006960 <_dtoa_r+0x2e8>)
 80066e4:	bfb8      	it	lt
 80066e6:	f8c8 2000 	strlt.w	r2, [r8]
 80066ea:	ea33 0309 	bics.w	r3, r3, r9
 80066ee:	d119      	bne.n	8006724 <_dtoa_r+0xac>
 80066f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80066f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066fc:	4333      	orrs	r3, r6
 80066fe:	f000 8580 	beq.w	8007202 <_dtoa_r+0xb8a>
 8006702:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006704:	b953      	cbnz	r3, 800671c <_dtoa_r+0xa4>
 8006706:	4b97      	ldr	r3, [pc, #604]	; (8006964 <_dtoa_r+0x2ec>)
 8006708:	e022      	b.n	8006750 <_dtoa_r+0xd8>
 800670a:	4b97      	ldr	r3, [pc, #604]	; (8006968 <_dtoa_r+0x2f0>)
 800670c:	9308      	str	r3, [sp, #32]
 800670e:	3308      	adds	r3, #8
 8006710:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006712:	6013      	str	r3, [r2, #0]
 8006714:	9808      	ldr	r0, [sp, #32]
 8006716:	b019      	add	sp, #100	; 0x64
 8006718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671c:	4b91      	ldr	r3, [pc, #580]	; (8006964 <_dtoa_r+0x2ec>)
 800671e:	9308      	str	r3, [sp, #32]
 8006720:	3303      	adds	r3, #3
 8006722:	e7f5      	b.n	8006710 <_dtoa_r+0x98>
 8006724:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006728:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800672c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006730:	2200      	movs	r2, #0
 8006732:	2300      	movs	r3, #0
 8006734:	f7fa f938 	bl	80009a8 <__aeabi_dcmpeq>
 8006738:	4680      	mov	r8, r0
 800673a:	b158      	cbz	r0, 8006754 <_dtoa_r+0xdc>
 800673c:	2301      	movs	r3, #1
 800673e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 8559 	beq.w	80071fc <_dtoa_r+0xb84>
 800674a:	4888      	ldr	r0, [pc, #544]	; (800696c <_dtoa_r+0x2f4>)
 800674c:	6018      	str	r0, [r3, #0]
 800674e:	1e43      	subs	r3, r0, #1
 8006750:	9308      	str	r3, [sp, #32]
 8006752:	e7df      	b.n	8006714 <_dtoa_r+0x9c>
 8006754:	ab16      	add	r3, sp, #88	; 0x58
 8006756:	9301      	str	r3, [sp, #4]
 8006758:	ab17      	add	r3, sp, #92	; 0x5c
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	4628      	mov	r0, r5
 800675e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006762:	f001 f8b7 	bl	80078d4 <__d2b>
 8006766:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800676a:	4682      	mov	sl, r0
 800676c:	2c00      	cmp	r4, #0
 800676e:	d07e      	beq.n	800686e <_dtoa_r+0x1f6>
 8006770:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006776:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800677a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800677e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006782:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006786:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800678a:	2200      	movs	r2, #0
 800678c:	4b78      	ldr	r3, [pc, #480]	; (8006970 <_dtoa_r+0x2f8>)
 800678e:	f7f9 fceb 	bl	8000168 <__aeabi_dsub>
 8006792:	a36b      	add	r3, pc, #428	; (adr r3, 8006940 <_dtoa_r+0x2c8>)
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f7f9 fe9e 	bl	80004d8 <__aeabi_dmul>
 800679c:	a36a      	add	r3, pc, #424	; (adr r3, 8006948 <_dtoa_r+0x2d0>)
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f7f9 fce3 	bl	800016c <__adddf3>
 80067a6:	4606      	mov	r6, r0
 80067a8:	4620      	mov	r0, r4
 80067aa:	460f      	mov	r7, r1
 80067ac:	f7f9 fe2a 	bl	8000404 <__aeabi_i2d>
 80067b0:	a367      	add	r3, pc, #412	; (adr r3, 8006950 <_dtoa_r+0x2d8>)
 80067b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b6:	f7f9 fe8f 	bl	80004d8 <__aeabi_dmul>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4630      	mov	r0, r6
 80067c0:	4639      	mov	r1, r7
 80067c2:	f7f9 fcd3 	bl	800016c <__adddf3>
 80067c6:	4606      	mov	r6, r0
 80067c8:	460f      	mov	r7, r1
 80067ca:	f7fa f935 	bl	8000a38 <__aeabi_d2iz>
 80067ce:	2200      	movs	r2, #0
 80067d0:	4681      	mov	r9, r0
 80067d2:	2300      	movs	r3, #0
 80067d4:	4630      	mov	r0, r6
 80067d6:	4639      	mov	r1, r7
 80067d8:	f7fa f8f0 	bl	80009bc <__aeabi_dcmplt>
 80067dc:	b148      	cbz	r0, 80067f2 <_dtoa_r+0x17a>
 80067de:	4648      	mov	r0, r9
 80067e0:	f7f9 fe10 	bl	8000404 <__aeabi_i2d>
 80067e4:	4632      	mov	r2, r6
 80067e6:	463b      	mov	r3, r7
 80067e8:	f7fa f8de 	bl	80009a8 <__aeabi_dcmpeq>
 80067ec:	b908      	cbnz	r0, 80067f2 <_dtoa_r+0x17a>
 80067ee:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80067f2:	f1b9 0f16 	cmp.w	r9, #22
 80067f6:	d857      	bhi.n	80068a8 <_dtoa_r+0x230>
 80067f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067fc:	4b5d      	ldr	r3, [pc, #372]	; (8006974 <_dtoa_r+0x2fc>)
 80067fe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	f7fa f8d9 	bl	80009bc <__aeabi_dcmplt>
 800680a:	2800      	cmp	r0, #0
 800680c:	d04e      	beq.n	80068ac <_dtoa_r+0x234>
 800680e:	2300      	movs	r3, #0
 8006810:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006814:	930f      	str	r3, [sp, #60]	; 0x3c
 8006816:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006818:	1b1c      	subs	r4, r3, r4
 800681a:	1e63      	subs	r3, r4, #1
 800681c:	9309      	str	r3, [sp, #36]	; 0x24
 800681e:	bf49      	itett	mi
 8006820:	f1c4 0301 	rsbmi	r3, r4, #1
 8006824:	2300      	movpl	r3, #0
 8006826:	9306      	strmi	r3, [sp, #24]
 8006828:	2300      	movmi	r3, #0
 800682a:	bf54      	ite	pl
 800682c:	9306      	strpl	r3, [sp, #24]
 800682e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006830:	f1b9 0f00 	cmp.w	r9, #0
 8006834:	db3c      	blt.n	80068b0 <_dtoa_r+0x238>
 8006836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006838:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800683c:	444b      	add	r3, r9
 800683e:	9309      	str	r3, [sp, #36]	; 0x24
 8006840:	2300      	movs	r3, #0
 8006842:	930a      	str	r3, [sp, #40]	; 0x28
 8006844:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006846:	2b09      	cmp	r3, #9
 8006848:	d86c      	bhi.n	8006924 <_dtoa_r+0x2ac>
 800684a:	2b05      	cmp	r3, #5
 800684c:	bfc4      	itt	gt
 800684e:	3b04      	subgt	r3, #4
 8006850:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006852:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006854:	bfc8      	it	gt
 8006856:	2400      	movgt	r4, #0
 8006858:	f1a3 0302 	sub.w	r3, r3, #2
 800685c:	bfd8      	it	le
 800685e:	2401      	movle	r4, #1
 8006860:	2b03      	cmp	r3, #3
 8006862:	f200 808b 	bhi.w	800697c <_dtoa_r+0x304>
 8006866:	e8df f003 	tbb	[pc, r3]
 800686a:	4f2d      	.short	0x4f2d
 800686c:	5b4d      	.short	0x5b4d
 800686e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006872:	441c      	add	r4, r3
 8006874:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006878:	2b20      	cmp	r3, #32
 800687a:	bfc3      	ittte	gt
 800687c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006880:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006884:	fa09 f303 	lslgt.w	r3, r9, r3
 8006888:	f1c3 0320 	rsble	r3, r3, #32
 800688c:	bfc6      	itte	gt
 800688e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006892:	4318      	orrgt	r0, r3
 8006894:	fa06 f003 	lslle.w	r0, r6, r3
 8006898:	f7f9 fda4 	bl	80003e4 <__aeabi_ui2d>
 800689c:	2301      	movs	r3, #1
 800689e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80068a2:	3c01      	subs	r4, #1
 80068a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80068a6:	e770      	b.n	800678a <_dtoa_r+0x112>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e7b3      	b.n	8006814 <_dtoa_r+0x19c>
 80068ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80068ae:	e7b2      	b.n	8006816 <_dtoa_r+0x19e>
 80068b0:	9b06      	ldr	r3, [sp, #24]
 80068b2:	eba3 0309 	sub.w	r3, r3, r9
 80068b6:	9306      	str	r3, [sp, #24]
 80068b8:	f1c9 0300 	rsb	r3, r9, #0
 80068bc:	930a      	str	r3, [sp, #40]	; 0x28
 80068be:	2300      	movs	r3, #0
 80068c0:	930e      	str	r3, [sp, #56]	; 0x38
 80068c2:	e7bf      	b.n	8006844 <_dtoa_r+0x1cc>
 80068c4:	2300      	movs	r3, #0
 80068c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80068c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	dc59      	bgt.n	8006982 <_dtoa_r+0x30a>
 80068ce:	f04f 0b01 	mov.w	fp, #1
 80068d2:	465b      	mov	r3, fp
 80068d4:	f8cd b008 	str.w	fp, [sp, #8]
 80068d8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80068dc:	2200      	movs	r2, #0
 80068de:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80068e0:	6042      	str	r2, [r0, #4]
 80068e2:	2204      	movs	r2, #4
 80068e4:	f102 0614 	add.w	r6, r2, #20
 80068e8:	429e      	cmp	r6, r3
 80068ea:	6841      	ldr	r1, [r0, #4]
 80068ec:	d94f      	bls.n	800698e <_dtoa_r+0x316>
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 fcca 	bl	8007288 <_Balloc>
 80068f4:	9008      	str	r0, [sp, #32]
 80068f6:	2800      	cmp	r0, #0
 80068f8:	d14d      	bne.n	8006996 <_dtoa_r+0x31e>
 80068fa:	4602      	mov	r2, r0
 80068fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006900:	4b1d      	ldr	r3, [pc, #116]	; (8006978 <_dtoa_r+0x300>)
 8006902:	e6cd      	b.n	80066a0 <_dtoa_r+0x28>
 8006904:	2301      	movs	r3, #1
 8006906:	e7de      	b.n	80068c6 <_dtoa_r+0x24e>
 8006908:	2300      	movs	r3, #0
 800690a:	930b      	str	r3, [sp, #44]	; 0x2c
 800690c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800690e:	eb09 0b03 	add.w	fp, r9, r3
 8006912:	f10b 0301 	add.w	r3, fp, #1
 8006916:	2b01      	cmp	r3, #1
 8006918:	9302      	str	r3, [sp, #8]
 800691a:	bfb8      	it	lt
 800691c:	2301      	movlt	r3, #1
 800691e:	e7dd      	b.n	80068dc <_dtoa_r+0x264>
 8006920:	2301      	movs	r3, #1
 8006922:	e7f2      	b.n	800690a <_dtoa_r+0x292>
 8006924:	2401      	movs	r4, #1
 8006926:	2300      	movs	r3, #0
 8006928:	940b      	str	r4, [sp, #44]	; 0x2c
 800692a:	9322      	str	r3, [sp, #136]	; 0x88
 800692c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8006930:	2200      	movs	r2, #0
 8006932:	2312      	movs	r3, #18
 8006934:	f8cd b008 	str.w	fp, [sp, #8]
 8006938:	9223      	str	r2, [sp, #140]	; 0x8c
 800693a:	e7cf      	b.n	80068dc <_dtoa_r+0x264>
 800693c:	f3af 8000 	nop.w
 8006940:	636f4361 	.word	0x636f4361
 8006944:	3fd287a7 	.word	0x3fd287a7
 8006948:	8b60c8b3 	.word	0x8b60c8b3
 800694c:	3fc68a28 	.word	0x3fc68a28
 8006950:	509f79fb 	.word	0x509f79fb
 8006954:	3fd34413 	.word	0x3fd34413
 8006958:	08008abd 	.word	0x08008abd
 800695c:	08008ad4 	.word	0x08008ad4
 8006960:	7ff00000 	.word	0x7ff00000
 8006964:	08008ab9 	.word	0x08008ab9
 8006968:	08008ab0 	.word	0x08008ab0
 800696c:	08008a8d 	.word	0x08008a8d
 8006970:	3ff80000 	.word	0x3ff80000
 8006974:	08008bd0 	.word	0x08008bd0
 8006978:	08008b33 	.word	0x08008b33
 800697c:	2301      	movs	r3, #1
 800697e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006980:	e7d4      	b.n	800692c <_dtoa_r+0x2b4>
 8006982:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006986:	465b      	mov	r3, fp
 8006988:	f8cd b008 	str.w	fp, [sp, #8]
 800698c:	e7a6      	b.n	80068dc <_dtoa_r+0x264>
 800698e:	3101      	adds	r1, #1
 8006990:	6041      	str	r1, [r0, #4]
 8006992:	0052      	lsls	r2, r2, #1
 8006994:	e7a6      	b.n	80068e4 <_dtoa_r+0x26c>
 8006996:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006998:	9a08      	ldr	r2, [sp, #32]
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	9b02      	ldr	r3, [sp, #8]
 800699e:	2b0e      	cmp	r3, #14
 80069a0:	f200 80a8 	bhi.w	8006af4 <_dtoa_r+0x47c>
 80069a4:	2c00      	cmp	r4, #0
 80069a6:	f000 80a5 	beq.w	8006af4 <_dtoa_r+0x47c>
 80069aa:	f1b9 0f00 	cmp.w	r9, #0
 80069ae:	dd34      	ble.n	8006a1a <_dtoa_r+0x3a2>
 80069b0:	4a9a      	ldr	r2, [pc, #616]	; (8006c1c <_dtoa_r+0x5a4>)
 80069b2:	f009 030f 	and.w	r3, r9, #15
 80069b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069ba:	f419 7f80 	tst.w	r9, #256	; 0x100
 80069be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80069c6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80069ca:	d016      	beq.n	80069fa <_dtoa_r+0x382>
 80069cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069d0:	4b93      	ldr	r3, [pc, #588]	; (8006c20 <_dtoa_r+0x5a8>)
 80069d2:	2703      	movs	r7, #3
 80069d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069d8:	f7f9 fea8 	bl	800072c <__aeabi_ddiv>
 80069dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069e0:	f004 040f 	and.w	r4, r4, #15
 80069e4:	4e8e      	ldr	r6, [pc, #568]	; (8006c20 <_dtoa_r+0x5a8>)
 80069e6:	b954      	cbnz	r4, 80069fe <_dtoa_r+0x386>
 80069e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069f0:	f7f9 fe9c 	bl	800072c <__aeabi_ddiv>
 80069f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069f8:	e029      	b.n	8006a4e <_dtoa_r+0x3d6>
 80069fa:	2702      	movs	r7, #2
 80069fc:	e7f2      	b.n	80069e4 <_dtoa_r+0x36c>
 80069fe:	07e1      	lsls	r1, r4, #31
 8006a00:	d508      	bpl.n	8006a14 <_dtoa_r+0x39c>
 8006a02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a0a:	f7f9 fd65 	bl	80004d8 <__aeabi_dmul>
 8006a0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a12:	3701      	adds	r7, #1
 8006a14:	1064      	asrs	r4, r4, #1
 8006a16:	3608      	adds	r6, #8
 8006a18:	e7e5      	b.n	80069e6 <_dtoa_r+0x36e>
 8006a1a:	f000 80a5 	beq.w	8006b68 <_dtoa_r+0x4f0>
 8006a1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a22:	f1c9 0400 	rsb	r4, r9, #0
 8006a26:	4b7d      	ldr	r3, [pc, #500]	; (8006c1c <_dtoa_r+0x5a4>)
 8006a28:	f004 020f 	and.w	r2, r4, #15
 8006a2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	f7f9 fd50 	bl	80004d8 <__aeabi_dmul>
 8006a38:	2702      	movs	r7, #2
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a40:	4e77      	ldr	r6, [pc, #476]	; (8006c20 <_dtoa_r+0x5a8>)
 8006a42:	1124      	asrs	r4, r4, #4
 8006a44:	2c00      	cmp	r4, #0
 8006a46:	f040 8084 	bne.w	8006b52 <_dtoa_r+0x4da>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1d2      	bne.n	80069f4 <_dtoa_r+0x37c>
 8006a4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 808b 	beq.w	8006b6c <_dtoa_r+0x4f4>
 8006a56:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006a5a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006a5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a62:	2200      	movs	r2, #0
 8006a64:	4b6f      	ldr	r3, [pc, #444]	; (8006c24 <_dtoa_r+0x5ac>)
 8006a66:	f7f9 ffa9 	bl	80009bc <__aeabi_dcmplt>
 8006a6a:	2800      	cmp	r0, #0
 8006a6c:	d07e      	beq.n	8006b6c <_dtoa_r+0x4f4>
 8006a6e:	9b02      	ldr	r3, [sp, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d07b      	beq.n	8006b6c <_dtoa_r+0x4f4>
 8006a74:	f1bb 0f00 	cmp.w	fp, #0
 8006a78:	dd38      	ble.n	8006aec <_dtoa_r+0x474>
 8006a7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a7e:	2200      	movs	r2, #0
 8006a80:	4b69      	ldr	r3, [pc, #420]	; (8006c28 <_dtoa_r+0x5b0>)
 8006a82:	f7f9 fd29 	bl	80004d8 <__aeabi_dmul>
 8006a86:	465c      	mov	r4, fp
 8006a88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a8c:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8006a90:	3701      	adds	r7, #1
 8006a92:	4638      	mov	r0, r7
 8006a94:	f7f9 fcb6 	bl	8000404 <__aeabi_i2d>
 8006a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a9c:	f7f9 fd1c 	bl	80004d8 <__aeabi_dmul>
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	4b62      	ldr	r3, [pc, #392]	; (8006c2c <_dtoa_r+0x5b4>)
 8006aa4:	f7f9 fb62 	bl	800016c <__adddf3>
 8006aa8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006aac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ab0:	9611      	str	r6, [sp, #68]	; 0x44
 8006ab2:	2c00      	cmp	r4, #0
 8006ab4:	d15d      	bne.n	8006b72 <_dtoa_r+0x4fa>
 8006ab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aba:	2200      	movs	r2, #0
 8006abc:	4b5c      	ldr	r3, [pc, #368]	; (8006c30 <_dtoa_r+0x5b8>)
 8006abe:	f7f9 fb53 	bl	8000168 <__aeabi_dsub>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006aca:	4633      	mov	r3, r6
 8006acc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ace:	f7f9 ff93 	bl	80009f8 <__aeabi_dcmpgt>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	f040 829e 	bne.w	8007014 <_dtoa_r+0x99c>
 8006ad8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006adc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ade:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006ae2:	f7f9 ff6b 	bl	80009bc <__aeabi_dcmplt>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	f040 8292 	bne.w	8007010 <_dtoa_r+0x998>
 8006aec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006af0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006af4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f2c0 8153 	blt.w	8006da2 <_dtoa_r+0x72a>
 8006afc:	f1b9 0f0e 	cmp.w	r9, #14
 8006b00:	f300 814f 	bgt.w	8006da2 <_dtoa_r+0x72a>
 8006b04:	4b45      	ldr	r3, [pc, #276]	; (8006c1c <_dtoa_r+0x5a4>)
 8006b06:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006b0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b0e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006b12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f280 80db 	bge.w	8006cd0 <_dtoa_r+0x658>
 8006b1a:	9b02      	ldr	r3, [sp, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f300 80d7 	bgt.w	8006cd0 <_dtoa_r+0x658>
 8006b22:	f040 8274 	bne.w	800700e <_dtoa_r+0x996>
 8006b26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	4b40      	ldr	r3, [pc, #256]	; (8006c30 <_dtoa_r+0x5b8>)
 8006b2e:	f7f9 fcd3 	bl	80004d8 <__aeabi_dmul>
 8006b32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b36:	f7f9 ff55 	bl	80009e4 <__aeabi_dcmpge>
 8006b3a:	9c02      	ldr	r4, [sp, #8]
 8006b3c:	4626      	mov	r6, r4
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	f040 824a 	bne.w	8006fd8 <_dtoa_r+0x960>
 8006b44:	2331      	movs	r3, #49	; 0x31
 8006b46:	9f08      	ldr	r7, [sp, #32]
 8006b48:	f109 0901 	add.w	r9, r9, #1
 8006b4c:	f807 3b01 	strb.w	r3, [r7], #1
 8006b50:	e246      	b.n	8006fe0 <_dtoa_r+0x968>
 8006b52:	07e2      	lsls	r2, r4, #31
 8006b54:	d505      	bpl.n	8006b62 <_dtoa_r+0x4ea>
 8006b56:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b5a:	f7f9 fcbd 	bl	80004d8 <__aeabi_dmul>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	3701      	adds	r7, #1
 8006b62:	1064      	asrs	r4, r4, #1
 8006b64:	3608      	adds	r6, #8
 8006b66:	e76d      	b.n	8006a44 <_dtoa_r+0x3cc>
 8006b68:	2702      	movs	r7, #2
 8006b6a:	e770      	b.n	8006a4e <_dtoa_r+0x3d6>
 8006b6c:	46c8      	mov	r8, r9
 8006b6e:	9c02      	ldr	r4, [sp, #8]
 8006b70:	e78f      	b.n	8006a92 <_dtoa_r+0x41a>
 8006b72:	9908      	ldr	r1, [sp, #32]
 8006b74:	4b29      	ldr	r3, [pc, #164]	; (8006c1c <_dtoa_r+0x5a4>)
 8006b76:	4421      	add	r1, r4
 8006b78:	9112      	str	r1, [sp, #72]	; 0x48
 8006b7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b80:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006b84:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b88:	2900      	cmp	r1, #0
 8006b8a:	d055      	beq.n	8006c38 <_dtoa_r+0x5c0>
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	4929      	ldr	r1, [pc, #164]	; (8006c34 <_dtoa_r+0x5bc>)
 8006b90:	f7f9 fdcc 	bl	800072c <__aeabi_ddiv>
 8006b94:	463b      	mov	r3, r7
 8006b96:	4632      	mov	r2, r6
 8006b98:	f7f9 fae6 	bl	8000168 <__aeabi_dsub>
 8006b9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ba0:	9f08      	ldr	r7, [sp, #32]
 8006ba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ba6:	f7f9 ff47 	bl	8000a38 <__aeabi_d2iz>
 8006baa:	4604      	mov	r4, r0
 8006bac:	f7f9 fc2a 	bl	8000404 <__aeabi_i2d>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bb8:	f7f9 fad6 	bl	8000168 <__aeabi_dsub>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	3430      	adds	r4, #48	; 0x30
 8006bc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006bca:	f807 4b01 	strb.w	r4, [r7], #1
 8006bce:	f7f9 fef5 	bl	80009bc <__aeabi_dcmplt>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d174      	bne.n	8006cc0 <_dtoa_r+0x648>
 8006bd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bda:	2000      	movs	r0, #0
 8006bdc:	4911      	ldr	r1, [pc, #68]	; (8006c24 <_dtoa_r+0x5ac>)
 8006bde:	f7f9 fac3 	bl	8000168 <__aeabi_dsub>
 8006be2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006be6:	f7f9 fee9 	bl	80009bc <__aeabi_dcmplt>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	f040 80b6 	bne.w	8006d5c <_dtoa_r+0x6e4>
 8006bf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bf2:	429f      	cmp	r7, r3
 8006bf4:	f43f af7a 	beq.w	8006aec <_dtoa_r+0x474>
 8006bf8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <_dtoa_r+0x5b0>)
 8006c00:	f7f9 fc6a 	bl	80004d8 <__aeabi_dmul>
 8006c04:	2200      	movs	r2, #0
 8006c06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c0e:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <_dtoa_r+0x5b0>)
 8006c10:	f7f9 fc62 	bl	80004d8 <__aeabi_dmul>
 8006c14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c18:	e7c3      	b.n	8006ba2 <_dtoa_r+0x52a>
 8006c1a:	bf00      	nop
 8006c1c:	08008bd0 	.word	0x08008bd0
 8006c20:	08008ba8 	.word	0x08008ba8
 8006c24:	3ff00000 	.word	0x3ff00000
 8006c28:	40240000 	.word	0x40240000
 8006c2c:	401c0000 	.word	0x401c0000
 8006c30:	40140000 	.word	0x40140000
 8006c34:	3fe00000 	.word	0x3fe00000
 8006c38:	4630      	mov	r0, r6
 8006c3a:	4639      	mov	r1, r7
 8006c3c:	f7f9 fc4c 	bl	80004d8 <__aeabi_dmul>
 8006c40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c42:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c46:	9c08      	ldr	r4, [sp, #32]
 8006c48:	9314      	str	r3, [sp, #80]	; 0x50
 8006c4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c4e:	f7f9 fef3 	bl	8000a38 <__aeabi_d2iz>
 8006c52:	9015      	str	r0, [sp, #84]	; 0x54
 8006c54:	f7f9 fbd6 	bl	8000404 <__aeabi_i2d>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c60:	f7f9 fa82 	bl	8000168 <__aeabi_dsub>
 8006c64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c66:	4606      	mov	r6, r0
 8006c68:	3330      	adds	r3, #48	; 0x30
 8006c6a:	f804 3b01 	strb.w	r3, [r4], #1
 8006c6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c70:	460f      	mov	r7, r1
 8006c72:	429c      	cmp	r4, r3
 8006c74:	f04f 0200 	mov.w	r2, #0
 8006c78:	d124      	bne.n	8006cc4 <_dtoa_r+0x64c>
 8006c7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c7e:	4bb3      	ldr	r3, [pc, #716]	; (8006f4c <_dtoa_r+0x8d4>)
 8006c80:	f7f9 fa74 	bl	800016c <__adddf3>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	4630      	mov	r0, r6
 8006c8a:	4639      	mov	r1, r7
 8006c8c:	f7f9 feb4 	bl	80009f8 <__aeabi_dcmpgt>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d162      	bne.n	8006d5a <_dtoa_r+0x6e2>
 8006c94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c98:	2000      	movs	r0, #0
 8006c9a:	49ac      	ldr	r1, [pc, #688]	; (8006f4c <_dtoa_r+0x8d4>)
 8006c9c:	f7f9 fa64 	bl	8000168 <__aeabi_dsub>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4630      	mov	r0, r6
 8006ca6:	4639      	mov	r1, r7
 8006ca8:	f7f9 fe88 	bl	80009bc <__aeabi_dcmplt>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	f43f af1d 	beq.w	8006aec <_dtoa_r+0x474>
 8006cb2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006cb4:	1e7b      	subs	r3, r7, #1
 8006cb6:	9314      	str	r3, [sp, #80]	; 0x50
 8006cb8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006cbc:	2b30      	cmp	r3, #48	; 0x30
 8006cbe:	d0f8      	beq.n	8006cb2 <_dtoa_r+0x63a>
 8006cc0:	46c1      	mov	r9, r8
 8006cc2:	e03a      	b.n	8006d3a <_dtoa_r+0x6c2>
 8006cc4:	4ba2      	ldr	r3, [pc, #648]	; (8006f50 <_dtoa_r+0x8d8>)
 8006cc6:	f7f9 fc07 	bl	80004d8 <__aeabi_dmul>
 8006cca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cce:	e7bc      	b.n	8006c4a <_dtoa_r+0x5d2>
 8006cd0:	9f08      	ldr	r7, [sp, #32]
 8006cd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cda:	f7f9 fd27 	bl	800072c <__aeabi_ddiv>
 8006cde:	f7f9 feab 	bl	8000a38 <__aeabi_d2iz>
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	f7f9 fb8e 	bl	8000404 <__aeabi_i2d>
 8006ce8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cec:	f7f9 fbf4 	bl	80004d8 <__aeabi_dmul>
 8006cf0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cfc:	f7f9 fa34 	bl	8000168 <__aeabi_dsub>
 8006d00:	f807 6b01 	strb.w	r6, [r7], #1
 8006d04:	9e08      	ldr	r6, [sp, #32]
 8006d06:	9b02      	ldr	r3, [sp, #8]
 8006d08:	1bbe      	subs	r6, r7, r6
 8006d0a:	42b3      	cmp	r3, r6
 8006d0c:	d13a      	bne.n	8006d84 <_dtoa_r+0x70c>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	f7f9 fa2b 	bl	800016c <__adddf3>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d22:	f7f9 fe69 	bl	80009f8 <__aeabi_dcmpgt>
 8006d26:	bb58      	cbnz	r0, 8006d80 <_dtoa_r+0x708>
 8006d28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d30:	f7f9 fe3a 	bl	80009a8 <__aeabi_dcmpeq>
 8006d34:	b108      	cbz	r0, 8006d3a <_dtoa_r+0x6c2>
 8006d36:	07e1      	lsls	r1, r4, #31
 8006d38:	d422      	bmi.n	8006d80 <_dtoa_r+0x708>
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	4651      	mov	r1, sl
 8006d3e:	f000 fae3 	bl	8007308 <_Bfree>
 8006d42:	2300      	movs	r3, #0
 8006d44:	703b      	strb	r3, [r7, #0]
 8006d46:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006d48:	f109 0001 	add.w	r0, r9, #1
 8006d4c:	6018      	str	r0, [r3, #0]
 8006d4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f43f acdf 	beq.w	8006714 <_dtoa_r+0x9c>
 8006d56:	601f      	str	r7, [r3, #0]
 8006d58:	e4dc      	b.n	8006714 <_dtoa_r+0x9c>
 8006d5a:	4627      	mov	r7, r4
 8006d5c:	463b      	mov	r3, r7
 8006d5e:	461f      	mov	r7, r3
 8006d60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d64:	2a39      	cmp	r2, #57	; 0x39
 8006d66:	d107      	bne.n	8006d78 <_dtoa_r+0x700>
 8006d68:	9a08      	ldr	r2, [sp, #32]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d1f7      	bne.n	8006d5e <_dtoa_r+0x6e6>
 8006d6e:	2230      	movs	r2, #48	; 0x30
 8006d70:	9908      	ldr	r1, [sp, #32]
 8006d72:	f108 0801 	add.w	r8, r8, #1
 8006d76:	700a      	strb	r2, [r1, #0]
 8006d78:	781a      	ldrb	r2, [r3, #0]
 8006d7a:	3201      	adds	r2, #1
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e79f      	b.n	8006cc0 <_dtoa_r+0x648>
 8006d80:	46c8      	mov	r8, r9
 8006d82:	e7eb      	b.n	8006d5c <_dtoa_r+0x6e4>
 8006d84:	2200      	movs	r2, #0
 8006d86:	4b72      	ldr	r3, [pc, #456]	; (8006f50 <_dtoa_r+0x8d8>)
 8006d88:	f7f9 fba6 	bl	80004d8 <__aeabi_dmul>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d94:	2200      	movs	r2, #0
 8006d96:	2300      	movs	r3, #0
 8006d98:	f7f9 fe06 	bl	80009a8 <__aeabi_dcmpeq>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d098      	beq.n	8006cd2 <_dtoa_r+0x65a>
 8006da0:	e7cb      	b.n	8006d3a <_dtoa_r+0x6c2>
 8006da2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006da4:	2a00      	cmp	r2, #0
 8006da6:	f000 80cd 	beq.w	8006f44 <_dtoa_r+0x8cc>
 8006daa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006dac:	2a01      	cmp	r2, #1
 8006dae:	f300 80af 	bgt.w	8006f10 <_dtoa_r+0x898>
 8006db2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006db4:	2a00      	cmp	r2, #0
 8006db6:	f000 80a7 	beq.w	8006f08 <_dtoa_r+0x890>
 8006dba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006dbe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006dc0:	9f06      	ldr	r7, [sp, #24]
 8006dc2:	9a06      	ldr	r2, [sp, #24]
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	441a      	add	r2, r3
 8006dc8:	9206      	str	r2, [sp, #24]
 8006dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dcc:	4628      	mov	r0, r5
 8006dce:	441a      	add	r2, r3
 8006dd0:	9209      	str	r2, [sp, #36]	; 0x24
 8006dd2:	f000 fb53 	bl	800747c <__i2b>
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	2f00      	cmp	r7, #0
 8006dda:	dd0c      	ble.n	8006df6 <_dtoa_r+0x77e>
 8006ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	dd09      	ble.n	8006df6 <_dtoa_r+0x77e>
 8006de2:	42bb      	cmp	r3, r7
 8006de4:	bfa8      	it	ge
 8006de6:	463b      	movge	r3, r7
 8006de8:	9a06      	ldr	r2, [sp, #24]
 8006dea:	1aff      	subs	r7, r7, r3
 8006dec:	1ad2      	subs	r2, r2, r3
 8006dee:	9206      	str	r2, [sp, #24]
 8006df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	9309      	str	r3, [sp, #36]	; 0x24
 8006df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df8:	b1f3      	cbz	r3, 8006e38 <_dtoa_r+0x7c0>
 8006dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80a9 	beq.w	8006f54 <_dtoa_r+0x8dc>
 8006e02:	2c00      	cmp	r4, #0
 8006e04:	dd10      	ble.n	8006e28 <_dtoa_r+0x7b0>
 8006e06:	4631      	mov	r1, r6
 8006e08:	4622      	mov	r2, r4
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f000 fbf0 	bl	80075f0 <__pow5mult>
 8006e10:	4652      	mov	r2, sl
 8006e12:	4601      	mov	r1, r0
 8006e14:	4606      	mov	r6, r0
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 fb46 	bl	80074a8 <__multiply>
 8006e1c:	4680      	mov	r8, r0
 8006e1e:	4651      	mov	r1, sl
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 fa71 	bl	8007308 <_Bfree>
 8006e26:	46c2      	mov	sl, r8
 8006e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e2a:	1b1a      	subs	r2, r3, r4
 8006e2c:	d004      	beq.n	8006e38 <_dtoa_r+0x7c0>
 8006e2e:	4651      	mov	r1, sl
 8006e30:	4628      	mov	r0, r5
 8006e32:	f000 fbdd 	bl	80075f0 <__pow5mult>
 8006e36:	4682      	mov	sl, r0
 8006e38:	2101      	movs	r1, #1
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	f000 fb1e 	bl	800747c <__i2b>
 8006e40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e42:	4604      	mov	r4, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f340 8087 	ble.w	8006f58 <_dtoa_r+0x8e0>
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	4601      	mov	r1, r0
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f000 fbce 	bl	80075f0 <__pow5mult>
 8006e54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e56:	4604      	mov	r4, r0
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	f340 8080 	ble.w	8006f5e <_dtoa_r+0x8e6>
 8006e5e:	f04f 0800 	mov.w	r8, #0
 8006e62:	6923      	ldr	r3, [r4, #16]
 8006e64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e68:	6918      	ldr	r0, [r3, #16]
 8006e6a:	f000 fab9 	bl	80073e0 <__hi0bits>
 8006e6e:	f1c0 0020 	rsb	r0, r0, #32
 8006e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e74:	4418      	add	r0, r3
 8006e76:	f010 001f 	ands.w	r0, r0, #31
 8006e7a:	f000 8092 	beq.w	8006fa2 <_dtoa_r+0x92a>
 8006e7e:	f1c0 0320 	rsb	r3, r0, #32
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	f340 808a 	ble.w	8006f9c <_dtoa_r+0x924>
 8006e88:	f1c0 001c 	rsb	r0, r0, #28
 8006e8c:	9b06      	ldr	r3, [sp, #24]
 8006e8e:	4407      	add	r7, r0
 8006e90:	4403      	add	r3, r0
 8006e92:	9306      	str	r3, [sp, #24]
 8006e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e96:	4403      	add	r3, r0
 8006e98:	9309      	str	r3, [sp, #36]	; 0x24
 8006e9a:	9b06      	ldr	r3, [sp, #24]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	dd05      	ble.n	8006eac <_dtoa_r+0x834>
 8006ea0:	4651      	mov	r1, sl
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	f000 fbfd 	bl	80076a4 <__lshift>
 8006eaa:	4682      	mov	sl, r0
 8006eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	dd05      	ble.n	8006ebe <_dtoa_r+0x846>
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	f000 fbf4 	bl	80076a4 <__lshift>
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d070      	beq.n	8006fa6 <_dtoa_r+0x92e>
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	4650      	mov	r0, sl
 8006ec8:	f000 fc58 	bl	800777c <__mcmp>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	da6a      	bge.n	8006fa6 <_dtoa_r+0x92e>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	4651      	mov	r1, sl
 8006ed4:	220a      	movs	r2, #10
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f000 fa38 	bl	800734c <__multadd>
 8006edc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ede:	4682      	mov	sl, r0
 8006ee0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 8193 	beq.w	8007210 <_dtoa_r+0xb98>
 8006eea:	4631      	mov	r1, r6
 8006eec:	2300      	movs	r3, #0
 8006eee:	220a      	movs	r2, #10
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	f000 fa2b 	bl	800734c <__multadd>
 8006ef6:	f1bb 0f00 	cmp.w	fp, #0
 8006efa:	4606      	mov	r6, r0
 8006efc:	f300 8093 	bgt.w	8007026 <_dtoa_r+0x9ae>
 8006f00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	dc57      	bgt.n	8006fb6 <_dtoa_r+0x93e>
 8006f06:	e08e      	b.n	8007026 <_dtoa_r+0x9ae>
 8006f08:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f0e:	e756      	b.n	8006dbe <_dtoa_r+0x746>
 8006f10:	9b02      	ldr	r3, [sp, #8]
 8006f12:	1e5c      	subs	r4, r3, #1
 8006f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f16:	42a3      	cmp	r3, r4
 8006f18:	bfb7      	itett	lt
 8006f1a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006f1c:	1b1c      	subge	r4, r3, r4
 8006f1e:	1ae2      	sublt	r2, r4, r3
 8006f20:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006f22:	bfbe      	ittt	lt
 8006f24:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006f26:	189b      	addlt	r3, r3, r2
 8006f28:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006f2a:	9b02      	ldr	r3, [sp, #8]
 8006f2c:	bfb8      	it	lt
 8006f2e:	2400      	movlt	r4, #0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bfbb      	ittet	lt
 8006f34:	9b06      	ldrlt	r3, [sp, #24]
 8006f36:	9a02      	ldrlt	r2, [sp, #8]
 8006f38:	9f06      	ldrge	r7, [sp, #24]
 8006f3a:	1a9f      	sublt	r7, r3, r2
 8006f3c:	bfac      	ite	ge
 8006f3e:	9b02      	ldrge	r3, [sp, #8]
 8006f40:	2300      	movlt	r3, #0
 8006f42:	e73e      	b.n	8006dc2 <_dtoa_r+0x74a>
 8006f44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f46:	9f06      	ldr	r7, [sp, #24]
 8006f48:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006f4a:	e745      	b.n	8006dd8 <_dtoa_r+0x760>
 8006f4c:	3fe00000 	.word	0x3fe00000
 8006f50:	40240000 	.word	0x40240000
 8006f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f56:	e76a      	b.n	8006e2e <_dtoa_r+0x7b6>
 8006f58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	dc19      	bgt.n	8006f92 <_dtoa_r+0x91a>
 8006f5e:	9b04      	ldr	r3, [sp, #16]
 8006f60:	b9bb      	cbnz	r3, 8006f92 <_dtoa_r+0x91a>
 8006f62:	9b05      	ldr	r3, [sp, #20]
 8006f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f68:	b99b      	cbnz	r3, 8006f92 <_dtoa_r+0x91a>
 8006f6a:	9b05      	ldr	r3, [sp, #20]
 8006f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f70:	0d1b      	lsrs	r3, r3, #20
 8006f72:	051b      	lsls	r3, r3, #20
 8006f74:	b183      	cbz	r3, 8006f98 <_dtoa_r+0x920>
 8006f76:	f04f 0801 	mov.w	r8, #1
 8006f7a:	9b06      	ldr	r3, [sp, #24]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	9306      	str	r3, [sp, #24]
 8006f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f82:	3301      	adds	r3, #1
 8006f84:	9309      	str	r3, [sp, #36]	; 0x24
 8006f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f47f af6a 	bne.w	8006e62 <_dtoa_r+0x7ea>
 8006f8e:	2001      	movs	r0, #1
 8006f90:	e76f      	b.n	8006e72 <_dtoa_r+0x7fa>
 8006f92:	f04f 0800 	mov.w	r8, #0
 8006f96:	e7f6      	b.n	8006f86 <_dtoa_r+0x90e>
 8006f98:	4698      	mov	r8, r3
 8006f9a:	e7f4      	b.n	8006f86 <_dtoa_r+0x90e>
 8006f9c:	f43f af7d 	beq.w	8006e9a <_dtoa_r+0x822>
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	301c      	adds	r0, #28
 8006fa4:	e772      	b.n	8006e8c <_dtoa_r+0x814>
 8006fa6:	9b02      	ldr	r3, [sp, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dc36      	bgt.n	800701a <_dtoa_r+0x9a2>
 8006fac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	dd33      	ble.n	800701a <_dtoa_r+0x9a2>
 8006fb2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006fb6:	f1bb 0f00 	cmp.w	fp, #0
 8006fba:	d10d      	bne.n	8006fd8 <_dtoa_r+0x960>
 8006fbc:	4621      	mov	r1, r4
 8006fbe:	465b      	mov	r3, fp
 8006fc0:	2205      	movs	r2, #5
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f000 f9c2 	bl	800734c <__multadd>
 8006fc8:	4601      	mov	r1, r0
 8006fca:	4604      	mov	r4, r0
 8006fcc:	4650      	mov	r0, sl
 8006fce:	f000 fbd5 	bl	800777c <__mcmp>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	f73f adb6 	bgt.w	8006b44 <_dtoa_r+0x4cc>
 8006fd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006fda:	9f08      	ldr	r7, [sp, #32]
 8006fdc:	ea6f 0903 	mvn.w	r9, r3
 8006fe0:	f04f 0800 	mov.w	r8, #0
 8006fe4:	4621      	mov	r1, r4
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f000 f98e 	bl	8007308 <_Bfree>
 8006fec:	2e00      	cmp	r6, #0
 8006fee:	f43f aea4 	beq.w	8006d3a <_dtoa_r+0x6c2>
 8006ff2:	f1b8 0f00 	cmp.w	r8, #0
 8006ff6:	d005      	beq.n	8007004 <_dtoa_r+0x98c>
 8006ff8:	45b0      	cmp	r8, r6
 8006ffa:	d003      	beq.n	8007004 <_dtoa_r+0x98c>
 8006ffc:	4641      	mov	r1, r8
 8006ffe:	4628      	mov	r0, r5
 8007000:	f000 f982 	bl	8007308 <_Bfree>
 8007004:	4631      	mov	r1, r6
 8007006:	4628      	mov	r0, r5
 8007008:	f000 f97e 	bl	8007308 <_Bfree>
 800700c:	e695      	b.n	8006d3a <_dtoa_r+0x6c2>
 800700e:	2400      	movs	r4, #0
 8007010:	4626      	mov	r6, r4
 8007012:	e7e1      	b.n	8006fd8 <_dtoa_r+0x960>
 8007014:	46c1      	mov	r9, r8
 8007016:	4626      	mov	r6, r4
 8007018:	e594      	b.n	8006b44 <_dtoa_r+0x4cc>
 800701a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800701c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 80fc 	beq.w	800721e <_dtoa_r+0xba6>
 8007026:	2f00      	cmp	r7, #0
 8007028:	dd05      	ble.n	8007036 <_dtoa_r+0x9be>
 800702a:	4631      	mov	r1, r6
 800702c:	463a      	mov	r2, r7
 800702e:	4628      	mov	r0, r5
 8007030:	f000 fb38 	bl	80076a4 <__lshift>
 8007034:	4606      	mov	r6, r0
 8007036:	f1b8 0f00 	cmp.w	r8, #0
 800703a:	d05c      	beq.n	80070f6 <_dtoa_r+0xa7e>
 800703c:	4628      	mov	r0, r5
 800703e:	6871      	ldr	r1, [r6, #4]
 8007040:	f000 f922 	bl	8007288 <_Balloc>
 8007044:	4607      	mov	r7, r0
 8007046:	b928      	cbnz	r0, 8007054 <_dtoa_r+0x9dc>
 8007048:	4602      	mov	r2, r0
 800704a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800704e:	4b7e      	ldr	r3, [pc, #504]	; (8007248 <_dtoa_r+0xbd0>)
 8007050:	f7ff bb26 	b.w	80066a0 <_dtoa_r+0x28>
 8007054:	6932      	ldr	r2, [r6, #16]
 8007056:	f106 010c 	add.w	r1, r6, #12
 800705a:	3202      	adds	r2, #2
 800705c:	0092      	lsls	r2, r2, #2
 800705e:	300c      	adds	r0, #12
 8007060:	f7fe fdc4 	bl	8005bec <memcpy>
 8007064:	2201      	movs	r2, #1
 8007066:	4639      	mov	r1, r7
 8007068:	4628      	mov	r0, r5
 800706a:	f000 fb1b 	bl	80076a4 <__lshift>
 800706e:	46b0      	mov	r8, r6
 8007070:	4606      	mov	r6, r0
 8007072:	9b08      	ldr	r3, [sp, #32]
 8007074:	3301      	adds	r3, #1
 8007076:	9302      	str	r3, [sp, #8]
 8007078:	9b08      	ldr	r3, [sp, #32]
 800707a:	445b      	add	r3, fp
 800707c:	930a      	str	r3, [sp, #40]	; 0x28
 800707e:	9b04      	ldr	r3, [sp, #16]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	9309      	str	r3, [sp, #36]	; 0x24
 8007086:	9b02      	ldr	r3, [sp, #8]
 8007088:	4621      	mov	r1, r4
 800708a:	4650      	mov	r0, sl
 800708c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007090:	f7ff fa62 	bl	8006558 <quorem>
 8007094:	4603      	mov	r3, r0
 8007096:	4641      	mov	r1, r8
 8007098:	3330      	adds	r3, #48	; 0x30
 800709a:	9004      	str	r0, [sp, #16]
 800709c:	4650      	mov	r0, sl
 800709e:	930b      	str	r3, [sp, #44]	; 0x2c
 80070a0:	f000 fb6c 	bl	800777c <__mcmp>
 80070a4:	4632      	mov	r2, r6
 80070a6:	9006      	str	r0, [sp, #24]
 80070a8:	4621      	mov	r1, r4
 80070aa:	4628      	mov	r0, r5
 80070ac:	f000 fb82 	bl	80077b4 <__mdiff>
 80070b0:	68c2      	ldr	r2, [r0, #12]
 80070b2:	4607      	mov	r7, r0
 80070b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070b6:	bb02      	cbnz	r2, 80070fa <_dtoa_r+0xa82>
 80070b8:	4601      	mov	r1, r0
 80070ba:	4650      	mov	r0, sl
 80070bc:	f000 fb5e 	bl	800777c <__mcmp>
 80070c0:	4602      	mov	r2, r0
 80070c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070c4:	4639      	mov	r1, r7
 80070c6:	4628      	mov	r0, r5
 80070c8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80070cc:	f000 f91c 	bl	8007308 <_Bfree>
 80070d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070d4:	9f02      	ldr	r7, [sp, #8]
 80070d6:	ea43 0102 	orr.w	r1, r3, r2
 80070da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070dc:	430b      	orrs	r3, r1
 80070de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070e0:	d10d      	bne.n	80070fe <_dtoa_r+0xa86>
 80070e2:	2b39      	cmp	r3, #57	; 0x39
 80070e4:	d027      	beq.n	8007136 <_dtoa_r+0xabe>
 80070e6:	9a06      	ldr	r2, [sp, #24]
 80070e8:	2a00      	cmp	r2, #0
 80070ea:	dd01      	ble.n	80070f0 <_dtoa_r+0xa78>
 80070ec:	9b04      	ldr	r3, [sp, #16]
 80070ee:	3331      	adds	r3, #49	; 0x31
 80070f0:	f88b 3000 	strb.w	r3, [fp]
 80070f4:	e776      	b.n	8006fe4 <_dtoa_r+0x96c>
 80070f6:	4630      	mov	r0, r6
 80070f8:	e7b9      	b.n	800706e <_dtoa_r+0x9f6>
 80070fa:	2201      	movs	r2, #1
 80070fc:	e7e2      	b.n	80070c4 <_dtoa_r+0xa4c>
 80070fe:	9906      	ldr	r1, [sp, #24]
 8007100:	2900      	cmp	r1, #0
 8007102:	db04      	blt.n	800710e <_dtoa_r+0xa96>
 8007104:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007106:	4301      	orrs	r1, r0
 8007108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800710a:	4301      	orrs	r1, r0
 800710c:	d120      	bne.n	8007150 <_dtoa_r+0xad8>
 800710e:	2a00      	cmp	r2, #0
 8007110:	ddee      	ble.n	80070f0 <_dtoa_r+0xa78>
 8007112:	4651      	mov	r1, sl
 8007114:	2201      	movs	r2, #1
 8007116:	4628      	mov	r0, r5
 8007118:	9302      	str	r3, [sp, #8]
 800711a:	f000 fac3 	bl	80076a4 <__lshift>
 800711e:	4621      	mov	r1, r4
 8007120:	4682      	mov	sl, r0
 8007122:	f000 fb2b 	bl	800777c <__mcmp>
 8007126:	2800      	cmp	r0, #0
 8007128:	9b02      	ldr	r3, [sp, #8]
 800712a:	dc02      	bgt.n	8007132 <_dtoa_r+0xaba>
 800712c:	d1e0      	bne.n	80070f0 <_dtoa_r+0xa78>
 800712e:	07da      	lsls	r2, r3, #31
 8007130:	d5de      	bpl.n	80070f0 <_dtoa_r+0xa78>
 8007132:	2b39      	cmp	r3, #57	; 0x39
 8007134:	d1da      	bne.n	80070ec <_dtoa_r+0xa74>
 8007136:	2339      	movs	r3, #57	; 0x39
 8007138:	f88b 3000 	strb.w	r3, [fp]
 800713c:	463b      	mov	r3, r7
 800713e:	461f      	mov	r7, r3
 8007140:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007144:	3b01      	subs	r3, #1
 8007146:	2a39      	cmp	r2, #57	; 0x39
 8007148:	d050      	beq.n	80071ec <_dtoa_r+0xb74>
 800714a:	3201      	adds	r2, #1
 800714c:	701a      	strb	r2, [r3, #0]
 800714e:	e749      	b.n	8006fe4 <_dtoa_r+0x96c>
 8007150:	2a00      	cmp	r2, #0
 8007152:	dd03      	ble.n	800715c <_dtoa_r+0xae4>
 8007154:	2b39      	cmp	r3, #57	; 0x39
 8007156:	d0ee      	beq.n	8007136 <_dtoa_r+0xabe>
 8007158:	3301      	adds	r3, #1
 800715a:	e7c9      	b.n	80070f0 <_dtoa_r+0xa78>
 800715c:	9a02      	ldr	r2, [sp, #8]
 800715e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007160:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007164:	428a      	cmp	r2, r1
 8007166:	d02a      	beq.n	80071be <_dtoa_r+0xb46>
 8007168:	4651      	mov	r1, sl
 800716a:	2300      	movs	r3, #0
 800716c:	220a      	movs	r2, #10
 800716e:	4628      	mov	r0, r5
 8007170:	f000 f8ec 	bl	800734c <__multadd>
 8007174:	45b0      	cmp	r8, r6
 8007176:	4682      	mov	sl, r0
 8007178:	f04f 0300 	mov.w	r3, #0
 800717c:	f04f 020a 	mov.w	r2, #10
 8007180:	4641      	mov	r1, r8
 8007182:	4628      	mov	r0, r5
 8007184:	d107      	bne.n	8007196 <_dtoa_r+0xb1e>
 8007186:	f000 f8e1 	bl	800734c <__multadd>
 800718a:	4680      	mov	r8, r0
 800718c:	4606      	mov	r6, r0
 800718e:	9b02      	ldr	r3, [sp, #8]
 8007190:	3301      	adds	r3, #1
 8007192:	9302      	str	r3, [sp, #8]
 8007194:	e777      	b.n	8007086 <_dtoa_r+0xa0e>
 8007196:	f000 f8d9 	bl	800734c <__multadd>
 800719a:	4631      	mov	r1, r6
 800719c:	4680      	mov	r8, r0
 800719e:	2300      	movs	r3, #0
 80071a0:	220a      	movs	r2, #10
 80071a2:	4628      	mov	r0, r5
 80071a4:	f000 f8d2 	bl	800734c <__multadd>
 80071a8:	4606      	mov	r6, r0
 80071aa:	e7f0      	b.n	800718e <_dtoa_r+0xb16>
 80071ac:	f1bb 0f00 	cmp.w	fp, #0
 80071b0:	bfcc      	ite	gt
 80071b2:	465f      	movgt	r7, fp
 80071b4:	2701      	movle	r7, #1
 80071b6:	f04f 0800 	mov.w	r8, #0
 80071ba:	9a08      	ldr	r2, [sp, #32]
 80071bc:	4417      	add	r7, r2
 80071be:	4651      	mov	r1, sl
 80071c0:	2201      	movs	r2, #1
 80071c2:	4628      	mov	r0, r5
 80071c4:	9302      	str	r3, [sp, #8]
 80071c6:	f000 fa6d 	bl	80076a4 <__lshift>
 80071ca:	4621      	mov	r1, r4
 80071cc:	4682      	mov	sl, r0
 80071ce:	f000 fad5 	bl	800777c <__mcmp>
 80071d2:	2800      	cmp	r0, #0
 80071d4:	dcb2      	bgt.n	800713c <_dtoa_r+0xac4>
 80071d6:	d102      	bne.n	80071de <_dtoa_r+0xb66>
 80071d8:	9b02      	ldr	r3, [sp, #8]
 80071da:	07db      	lsls	r3, r3, #31
 80071dc:	d4ae      	bmi.n	800713c <_dtoa_r+0xac4>
 80071de:	463b      	mov	r3, r7
 80071e0:	461f      	mov	r7, r3
 80071e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071e6:	2a30      	cmp	r2, #48	; 0x30
 80071e8:	d0fa      	beq.n	80071e0 <_dtoa_r+0xb68>
 80071ea:	e6fb      	b.n	8006fe4 <_dtoa_r+0x96c>
 80071ec:	9a08      	ldr	r2, [sp, #32]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d1a5      	bne.n	800713e <_dtoa_r+0xac6>
 80071f2:	2331      	movs	r3, #49	; 0x31
 80071f4:	f109 0901 	add.w	r9, r9, #1
 80071f8:	7013      	strb	r3, [r2, #0]
 80071fa:	e6f3      	b.n	8006fe4 <_dtoa_r+0x96c>
 80071fc:	4b13      	ldr	r3, [pc, #76]	; (800724c <_dtoa_r+0xbd4>)
 80071fe:	f7ff baa7 	b.w	8006750 <_dtoa_r+0xd8>
 8007202:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007204:	2b00      	cmp	r3, #0
 8007206:	f47f aa80 	bne.w	800670a <_dtoa_r+0x92>
 800720a:	4b11      	ldr	r3, [pc, #68]	; (8007250 <_dtoa_r+0xbd8>)
 800720c:	f7ff baa0 	b.w	8006750 <_dtoa_r+0xd8>
 8007210:	f1bb 0f00 	cmp.w	fp, #0
 8007214:	dc03      	bgt.n	800721e <_dtoa_r+0xba6>
 8007216:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007218:	2b02      	cmp	r3, #2
 800721a:	f73f aecc 	bgt.w	8006fb6 <_dtoa_r+0x93e>
 800721e:	9f08      	ldr	r7, [sp, #32]
 8007220:	4621      	mov	r1, r4
 8007222:	4650      	mov	r0, sl
 8007224:	f7ff f998 	bl	8006558 <quorem>
 8007228:	9a08      	ldr	r2, [sp, #32]
 800722a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800722e:	f807 3b01 	strb.w	r3, [r7], #1
 8007232:	1aba      	subs	r2, r7, r2
 8007234:	4593      	cmp	fp, r2
 8007236:	ddb9      	ble.n	80071ac <_dtoa_r+0xb34>
 8007238:	4651      	mov	r1, sl
 800723a:	2300      	movs	r3, #0
 800723c:	220a      	movs	r2, #10
 800723e:	4628      	mov	r0, r5
 8007240:	f000 f884 	bl	800734c <__multadd>
 8007244:	4682      	mov	sl, r0
 8007246:	e7eb      	b.n	8007220 <_dtoa_r+0xba8>
 8007248:	08008b33 	.word	0x08008b33
 800724c:	08008a8c 	.word	0x08008a8c
 8007250:	08008ab0 	.word	0x08008ab0

08007254 <_localeconv_r>:
 8007254:	4800      	ldr	r0, [pc, #0]	; (8007258 <_localeconv_r+0x4>)
 8007256:	4770      	bx	lr
 8007258:	20000260 	.word	0x20000260

0800725c <malloc>:
 800725c:	4b02      	ldr	r3, [pc, #8]	; (8007268 <malloc+0xc>)
 800725e:	4601      	mov	r1, r0
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	f000 bbed 	b.w	8007a40 <_malloc_r>
 8007266:	bf00      	nop
 8007268:	2000010c 	.word	0x2000010c

0800726c <memchr>:
 800726c:	4603      	mov	r3, r0
 800726e:	b510      	push	{r4, lr}
 8007270:	b2c9      	uxtb	r1, r1
 8007272:	4402      	add	r2, r0
 8007274:	4293      	cmp	r3, r2
 8007276:	4618      	mov	r0, r3
 8007278:	d101      	bne.n	800727e <memchr+0x12>
 800727a:	2000      	movs	r0, #0
 800727c:	e003      	b.n	8007286 <memchr+0x1a>
 800727e:	7804      	ldrb	r4, [r0, #0]
 8007280:	3301      	adds	r3, #1
 8007282:	428c      	cmp	r4, r1
 8007284:	d1f6      	bne.n	8007274 <memchr+0x8>
 8007286:	bd10      	pop	{r4, pc}

08007288 <_Balloc>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800728c:	4604      	mov	r4, r0
 800728e:	460d      	mov	r5, r1
 8007290:	b976      	cbnz	r6, 80072b0 <_Balloc+0x28>
 8007292:	2010      	movs	r0, #16
 8007294:	f7ff ffe2 	bl	800725c <malloc>
 8007298:	4602      	mov	r2, r0
 800729a:	6260      	str	r0, [r4, #36]	; 0x24
 800729c:	b920      	cbnz	r0, 80072a8 <_Balloc+0x20>
 800729e:	2166      	movs	r1, #102	; 0x66
 80072a0:	4b17      	ldr	r3, [pc, #92]	; (8007300 <_Balloc+0x78>)
 80072a2:	4818      	ldr	r0, [pc, #96]	; (8007304 <_Balloc+0x7c>)
 80072a4:	f000 fd92 	bl	8007dcc <__assert_func>
 80072a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072ac:	6006      	str	r6, [r0, #0]
 80072ae:	60c6      	str	r6, [r0, #12]
 80072b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80072b2:	68f3      	ldr	r3, [r6, #12]
 80072b4:	b183      	cbz	r3, 80072d8 <_Balloc+0x50>
 80072b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072be:	b9b8      	cbnz	r0, 80072f0 <_Balloc+0x68>
 80072c0:	2101      	movs	r1, #1
 80072c2:	fa01 f605 	lsl.w	r6, r1, r5
 80072c6:	1d72      	adds	r2, r6, #5
 80072c8:	4620      	mov	r0, r4
 80072ca:	0092      	lsls	r2, r2, #2
 80072cc:	f000 fb5e 	bl	800798c <_calloc_r>
 80072d0:	b160      	cbz	r0, 80072ec <_Balloc+0x64>
 80072d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072d6:	e00e      	b.n	80072f6 <_Balloc+0x6e>
 80072d8:	2221      	movs	r2, #33	; 0x21
 80072da:	2104      	movs	r1, #4
 80072dc:	4620      	mov	r0, r4
 80072de:	f000 fb55 	bl	800798c <_calloc_r>
 80072e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072e4:	60f0      	str	r0, [r6, #12]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1e4      	bne.n	80072b6 <_Balloc+0x2e>
 80072ec:	2000      	movs	r0, #0
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	6802      	ldr	r2, [r0, #0]
 80072f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072f6:	2300      	movs	r3, #0
 80072f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072fc:	e7f7      	b.n	80072ee <_Balloc+0x66>
 80072fe:	bf00      	nop
 8007300:	08008abd 	.word	0x08008abd
 8007304:	08008b44 	.word	0x08008b44

08007308 <_Bfree>:
 8007308:	b570      	push	{r4, r5, r6, lr}
 800730a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800730c:	4605      	mov	r5, r0
 800730e:	460c      	mov	r4, r1
 8007310:	b976      	cbnz	r6, 8007330 <_Bfree+0x28>
 8007312:	2010      	movs	r0, #16
 8007314:	f7ff ffa2 	bl	800725c <malloc>
 8007318:	4602      	mov	r2, r0
 800731a:	6268      	str	r0, [r5, #36]	; 0x24
 800731c:	b920      	cbnz	r0, 8007328 <_Bfree+0x20>
 800731e:	218a      	movs	r1, #138	; 0x8a
 8007320:	4b08      	ldr	r3, [pc, #32]	; (8007344 <_Bfree+0x3c>)
 8007322:	4809      	ldr	r0, [pc, #36]	; (8007348 <_Bfree+0x40>)
 8007324:	f000 fd52 	bl	8007dcc <__assert_func>
 8007328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800732c:	6006      	str	r6, [r0, #0]
 800732e:	60c6      	str	r6, [r0, #12]
 8007330:	b13c      	cbz	r4, 8007342 <_Bfree+0x3a>
 8007332:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007334:	6862      	ldr	r2, [r4, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800733c:	6021      	str	r1, [r4, #0]
 800733e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007342:	bd70      	pop	{r4, r5, r6, pc}
 8007344:	08008abd 	.word	0x08008abd
 8007348:	08008b44 	.word	0x08008b44

0800734c <__multadd>:
 800734c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007350:	4698      	mov	r8, r3
 8007352:	460c      	mov	r4, r1
 8007354:	2300      	movs	r3, #0
 8007356:	690e      	ldr	r6, [r1, #16]
 8007358:	4607      	mov	r7, r0
 800735a:	f101 0014 	add.w	r0, r1, #20
 800735e:	6805      	ldr	r5, [r0, #0]
 8007360:	3301      	adds	r3, #1
 8007362:	b2a9      	uxth	r1, r5
 8007364:	fb02 8101 	mla	r1, r2, r1, r8
 8007368:	0c2d      	lsrs	r5, r5, #16
 800736a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800736e:	fb02 c505 	mla	r5, r2, r5, ip
 8007372:	b289      	uxth	r1, r1
 8007374:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007378:	429e      	cmp	r6, r3
 800737a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800737e:	f840 1b04 	str.w	r1, [r0], #4
 8007382:	dcec      	bgt.n	800735e <__multadd+0x12>
 8007384:	f1b8 0f00 	cmp.w	r8, #0
 8007388:	d022      	beq.n	80073d0 <__multadd+0x84>
 800738a:	68a3      	ldr	r3, [r4, #8]
 800738c:	42b3      	cmp	r3, r6
 800738e:	dc19      	bgt.n	80073c4 <__multadd+0x78>
 8007390:	6861      	ldr	r1, [r4, #4]
 8007392:	4638      	mov	r0, r7
 8007394:	3101      	adds	r1, #1
 8007396:	f7ff ff77 	bl	8007288 <_Balloc>
 800739a:	4605      	mov	r5, r0
 800739c:	b928      	cbnz	r0, 80073aa <__multadd+0x5e>
 800739e:	4602      	mov	r2, r0
 80073a0:	21b5      	movs	r1, #181	; 0xb5
 80073a2:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <__multadd+0x8c>)
 80073a4:	480d      	ldr	r0, [pc, #52]	; (80073dc <__multadd+0x90>)
 80073a6:	f000 fd11 	bl	8007dcc <__assert_func>
 80073aa:	6922      	ldr	r2, [r4, #16]
 80073ac:	f104 010c 	add.w	r1, r4, #12
 80073b0:	3202      	adds	r2, #2
 80073b2:	0092      	lsls	r2, r2, #2
 80073b4:	300c      	adds	r0, #12
 80073b6:	f7fe fc19 	bl	8005bec <memcpy>
 80073ba:	4621      	mov	r1, r4
 80073bc:	4638      	mov	r0, r7
 80073be:	f7ff ffa3 	bl	8007308 <_Bfree>
 80073c2:	462c      	mov	r4, r5
 80073c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80073c8:	3601      	adds	r6, #1
 80073ca:	f8c3 8014 	str.w	r8, [r3, #20]
 80073ce:	6126      	str	r6, [r4, #16]
 80073d0:	4620      	mov	r0, r4
 80073d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d6:	bf00      	nop
 80073d8:	08008b33 	.word	0x08008b33
 80073dc:	08008b44 	.word	0x08008b44

080073e0 <__hi0bits>:
 80073e0:	0c02      	lsrs	r2, r0, #16
 80073e2:	0412      	lsls	r2, r2, #16
 80073e4:	4603      	mov	r3, r0
 80073e6:	b9ca      	cbnz	r2, 800741c <__hi0bits+0x3c>
 80073e8:	0403      	lsls	r3, r0, #16
 80073ea:	2010      	movs	r0, #16
 80073ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80073f0:	bf04      	itt	eq
 80073f2:	021b      	lsleq	r3, r3, #8
 80073f4:	3008      	addeq	r0, #8
 80073f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80073fa:	bf04      	itt	eq
 80073fc:	011b      	lsleq	r3, r3, #4
 80073fe:	3004      	addeq	r0, #4
 8007400:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007404:	bf04      	itt	eq
 8007406:	009b      	lsleq	r3, r3, #2
 8007408:	3002      	addeq	r0, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	db05      	blt.n	800741a <__hi0bits+0x3a>
 800740e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007412:	f100 0001 	add.w	r0, r0, #1
 8007416:	bf08      	it	eq
 8007418:	2020      	moveq	r0, #32
 800741a:	4770      	bx	lr
 800741c:	2000      	movs	r0, #0
 800741e:	e7e5      	b.n	80073ec <__hi0bits+0xc>

08007420 <__lo0bits>:
 8007420:	6803      	ldr	r3, [r0, #0]
 8007422:	4602      	mov	r2, r0
 8007424:	f013 0007 	ands.w	r0, r3, #7
 8007428:	d00b      	beq.n	8007442 <__lo0bits+0x22>
 800742a:	07d9      	lsls	r1, r3, #31
 800742c:	d422      	bmi.n	8007474 <__lo0bits+0x54>
 800742e:	0798      	lsls	r0, r3, #30
 8007430:	bf49      	itett	mi
 8007432:	085b      	lsrmi	r3, r3, #1
 8007434:	089b      	lsrpl	r3, r3, #2
 8007436:	2001      	movmi	r0, #1
 8007438:	6013      	strmi	r3, [r2, #0]
 800743a:	bf5c      	itt	pl
 800743c:	2002      	movpl	r0, #2
 800743e:	6013      	strpl	r3, [r2, #0]
 8007440:	4770      	bx	lr
 8007442:	b299      	uxth	r1, r3
 8007444:	b909      	cbnz	r1, 800744a <__lo0bits+0x2a>
 8007446:	2010      	movs	r0, #16
 8007448:	0c1b      	lsrs	r3, r3, #16
 800744a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800744e:	bf04      	itt	eq
 8007450:	0a1b      	lsreq	r3, r3, #8
 8007452:	3008      	addeq	r0, #8
 8007454:	0719      	lsls	r1, r3, #28
 8007456:	bf04      	itt	eq
 8007458:	091b      	lsreq	r3, r3, #4
 800745a:	3004      	addeq	r0, #4
 800745c:	0799      	lsls	r1, r3, #30
 800745e:	bf04      	itt	eq
 8007460:	089b      	lsreq	r3, r3, #2
 8007462:	3002      	addeq	r0, #2
 8007464:	07d9      	lsls	r1, r3, #31
 8007466:	d403      	bmi.n	8007470 <__lo0bits+0x50>
 8007468:	085b      	lsrs	r3, r3, #1
 800746a:	f100 0001 	add.w	r0, r0, #1
 800746e:	d003      	beq.n	8007478 <__lo0bits+0x58>
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	4770      	bx	lr
 8007474:	2000      	movs	r0, #0
 8007476:	4770      	bx	lr
 8007478:	2020      	movs	r0, #32
 800747a:	4770      	bx	lr

0800747c <__i2b>:
 800747c:	b510      	push	{r4, lr}
 800747e:	460c      	mov	r4, r1
 8007480:	2101      	movs	r1, #1
 8007482:	f7ff ff01 	bl	8007288 <_Balloc>
 8007486:	4602      	mov	r2, r0
 8007488:	b928      	cbnz	r0, 8007496 <__i2b+0x1a>
 800748a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800748e:	4b04      	ldr	r3, [pc, #16]	; (80074a0 <__i2b+0x24>)
 8007490:	4804      	ldr	r0, [pc, #16]	; (80074a4 <__i2b+0x28>)
 8007492:	f000 fc9b 	bl	8007dcc <__assert_func>
 8007496:	2301      	movs	r3, #1
 8007498:	6144      	str	r4, [r0, #20]
 800749a:	6103      	str	r3, [r0, #16]
 800749c:	bd10      	pop	{r4, pc}
 800749e:	bf00      	nop
 80074a0:	08008b33 	.word	0x08008b33
 80074a4:	08008b44 	.word	0x08008b44

080074a8 <__multiply>:
 80074a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	4614      	mov	r4, r2
 80074ae:	690a      	ldr	r2, [r1, #16]
 80074b0:	6923      	ldr	r3, [r4, #16]
 80074b2:	460d      	mov	r5, r1
 80074b4:	429a      	cmp	r2, r3
 80074b6:	bfbe      	ittt	lt
 80074b8:	460b      	movlt	r3, r1
 80074ba:	4625      	movlt	r5, r4
 80074bc:	461c      	movlt	r4, r3
 80074be:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80074c2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80074c6:	68ab      	ldr	r3, [r5, #8]
 80074c8:	6869      	ldr	r1, [r5, #4]
 80074ca:	eb0a 0709 	add.w	r7, sl, r9
 80074ce:	42bb      	cmp	r3, r7
 80074d0:	b085      	sub	sp, #20
 80074d2:	bfb8      	it	lt
 80074d4:	3101      	addlt	r1, #1
 80074d6:	f7ff fed7 	bl	8007288 <_Balloc>
 80074da:	b930      	cbnz	r0, 80074ea <__multiply+0x42>
 80074dc:	4602      	mov	r2, r0
 80074de:	f240 115d 	movw	r1, #349	; 0x15d
 80074e2:	4b41      	ldr	r3, [pc, #260]	; (80075e8 <__multiply+0x140>)
 80074e4:	4841      	ldr	r0, [pc, #260]	; (80075ec <__multiply+0x144>)
 80074e6:	f000 fc71 	bl	8007dcc <__assert_func>
 80074ea:	f100 0614 	add.w	r6, r0, #20
 80074ee:	4633      	mov	r3, r6
 80074f0:	2200      	movs	r2, #0
 80074f2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80074f6:	4543      	cmp	r3, r8
 80074f8:	d31e      	bcc.n	8007538 <__multiply+0x90>
 80074fa:	f105 0c14 	add.w	ip, r5, #20
 80074fe:	f104 0314 	add.w	r3, r4, #20
 8007502:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007506:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800750a:	9202      	str	r2, [sp, #8]
 800750c:	ebac 0205 	sub.w	r2, ip, r5
 8007510:	3a15      	subs	r2, #21
 8007512:	f022 0203 	bic.w	r2, r2, #3
 8007516:	3204      	adds	r2, #4
 8007518:	f105 0115 	add.w	r1, r5, #21
 800751c:	458c      	cmp	ip, r1
 800751e:	bf38      	it	cc
 8007520:	2204      	movcc	r2, #4
 8007522:	9201      	str	r2, [sp, #4]
 8007524:	9a02      	ldr	r2, [sp, #8]
 8007526:	9303      	str	r3, [sp, #12]
 8007528:	429a      	cmp	r2, r3
 800752a:	d808      	bhi.n	800753e <__multiply+0x96>
 800752c:	2f00      	cmp	r7, #0
 800752e:	dc55      	bgt.n	80075dc <__multiply+0x134>
 8007530:	6107      	str	r7, [r0, #16]
 8007532:	b005      	add	sp, #20
 8007534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007538:	f843 2b04 	str.w	r2, [r3], #4
 800753c:	e7db      	b.n	80074f6 <__multiply+0x4e>
 800753e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007542:	f1ba 0f00 	cmp.w	sl, #0
 8007546:	d020      	beq.n	800758a <__multiply+0xe2>
 8007548:	46b1      	mov	r9, r6
 800754a:	2200      	movs	r2, #0
 800754c:	f105 0e14 	add.w	lr, r5, #20
 8007550:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007554:	f8d9 b000 	ldr.w	fp, [r9]
 8007558:	b2a1      	uxth	r1, r4
 800755a:	fa1f fb8b 	uxth.w	fp, fp
 800755e:	fb0a b101 	mla	r1, sl, r1, fp
 8007562:	4411      	add	r1, r2
 8007564:	f8d9 2000 	ldr.w	r2, [r9]
 8007568:	0c24      	lsrs	r4, r4, #16
 800756a:	0c12      	lsrs	r2, r2, #16
 800756c:	fb0a 2404 	mla	r4, sl, r4, r2
 8007570:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007574:	b289      	uxth	r1, r1
 8007576:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800757a:	45f4      	cmp	ip, lr
 800757c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007580:	f849 1b04 	str.w	r1, [r9], #4
 8007584:	d8e4      	bhi.n	8007550 <__multiply+0xa8>
 8007586:	9901      	ldr	r1, [sp, #4]
 8007588:	5072      	str	r2, [r6, r1]
 800758a:	9a03      	ldr	r2, [sp, #12]
 800758c:	3304      	adds	r3, #4
 800758e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007592:	f1b9 0f00 	cmp.w	r9, #0
 8007596:	d01f      	beq.n	80075d8 <__multiply+0x130>
 8007598:	46b6      	mov	lr, r6
 800759a:	f04f 0a00 	mov.w	sl, #0
 800759e:	6834      	ldr	r4, [r6, #0]
 80075a0:	f105 0114 	add.w	r1, r5, #20
 80075a4:	880a      	ldrh	r2, [r1, #0]
 80075a6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80075aa:	b2a4      	uxth	r4, r4
 80075ac:	fb09 b202 	mla	r2, r9, r2, fp
 80075b0:	4492      	add	sl, r2
 80075b2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80075b6:	f84e 4b04 	str.w	r4, [lr], #4
 80075ba:	f851 4b04 	ldr.w	r4, [r1], #4
 80075be:	f8be 2000 	ldrh.w	r2, [lr]
 80075c2:	0c24      	lsrs	r4, r4, #16
 80075c4:	fb09 2404 	mla	r4, r9, r4, r2
 80075c8:	458c      	cmp	ip, r1
 80075ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80075ce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80075d2:	d8e7      	bhi.n	80075a4 <__multiply+0xfc>
 80075d4:	9a01      	ldr	r2, [sp, #4]
 80075d6:	50b4      	str	r4, [r6, r2]
 80075d8:	3604      	adds	r6, #4
 80075da:	e7a3      	b.n	8007524 <__multiply+0x7c>
 80075dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1a5      	bne.n	8007530 <__multiply+0x88>
 80075e4:	3f01      	subs	r7, #1
 80075e6:	e7a1      	b.n	800752c <__multiply+0x84>
 80075e8:	08008b33 	.word	0x08008b33
 80075ec:	08008b44 	.word	0x08008b44

080075f0 <__pow5mult>:
 80075f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f4:	4615      	mov	r5, r2
 80075f6:	f012 0203 	ands.w	r2, r2, #3
 80075fa:	4606      	mov	r6, r0
 80075fc:	460f      	mov	r7, r1
 80075fe:	d007      	beq.n	8007610 <__pow5mult+0x20>
 8007600:	4c25      	ldr	r4, [pc, #148]	; (8007698 <__pow5mult+0xa8>)
 8007602:	3a01      	subs	r2, #1
 8007604:	2300      	movs	r3, #0
 8007606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800760a:	f7ff fe9f 	bl	800734c <__multadd>
 800760e:	4607      	mov	r7, r0
 8007610:	10ad      	asrs	r5, r5, #2
 8007612:	d03d      	beq.n	8007690 <__pow5mult+0xa0>
 8007614:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007616:	b97c      	cbnz	r4, 8007638 <__pow5mult+0x48>
 8007618:	2010      	movs	r0, #16
 800761a:	f7ff fe1f 	bl	800725c <malloc>
 800761e:	4602      	mov	r2, r0
 8007620:	6270      	str	r0, [r6, #36]	; 0x24
 8007622:	b928      	cbnz	r0, 8007630 <__pow5mult+0x40>
 8007624:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007628:	4b1c      	ldr	r3, [pc, #112]	; (800769c <__pow5mult+0xac>)
 800762a:	481d      	ldr	r0, [pc, #116]	; (80076a0 <__pow5mult+0xb0>)
 800762c:	f000 fbce 	bl	8007dcc <__assert_func>
 8007630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007634:	6004      	str	r4, [r0, #0]
 8007636:	60c4      	str	r4, [r0, #12]
 8007638:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800763c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007640:	b94c      	cbnz	r4, 8007656 <__pow5mult+0x66>
 8007642:	f240 2171 	movw	r1, #625	; 0x271
 8007646:	4630      	mov	r0, r6
 8007648:	f7ff ff18 	bl	800747c <__i2b>
 800764c:	2300      	movs	r3, #0
 800764e:	4604      	mov	r4, r0
 8007650:	f8c8 0008 	str.w	r0, [r8, #8]
 8007654:	6003      	str	r3, [r0, #0]
 8007656:	f04f 0900 	mov.w	r9, #0
 800765a:	07eb      	lsls	r3, r5, #31
 800765c:	d50a      	bpl.n	8007674 <__pow5mult+0x84>
 800765e:	4639      	mov	r1, r7
 8007660:	4622      	mov	r2, r4
 8007662:	4630      	mov	r0, r6
 8007664:	f7ff ff20 	bl	80074a8 <__multiply>
 8007668:	4680      	mov	r8, r0
 800766a:	4639      	mov	r1, r7
 800766c:	4630      	mov	r0, r6
 800766e:	f7ff fe4b 	bl	8007308 <_Bfree>
 8007672:	4647      	mov	r7, r8
 8007674:	106d      	asrs	r5, r5, #1
 8007676:	d00b      	beq.n	8007690 <__pow5mult+0xa0>
 8007678:	6820      	ldr	r0, [r4, #0]
 800767a:	b938      	cbnz	r0, 800768c <__pow5mult+0x9c>
 800767c:	4622      	mov	r2, r4
 800767e:	4621      	mov	r1, r4
 8007680:	4630      	mov	r0, r6
 8007682:	f7ff ff11 	bl	80074a8 <__multiply>
 8007686:	6020      	str	r0, [r4, #0]
 8007688:	f8c0 9000 	str.w	r9, [r0]
 800768c:	4604      	mov	r4, r0
 800768e:	e7e4      	b.n	800765a <__pow5mult+0x6a>
 8007690:	4638      	mov	r0, r7
 8007692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007696:	bf00      	nop
 8007698:	08008c98 	.word	0x08008c98
 800769c:	08008abd 	.word	0x08008abd
 80076a0:	08008b44 	.word	0x08008b44

080076a4 <__lshift>:
 80076a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a8:	460c      	mov	r4, r1
 80076aa:	4607      	mov	r7, r0
 80076ac:	4691      	mov	r9, r2
 80076ae:	6923      	ldr	r3, [r4, #16]
 80076b0:	6849      	ldr	r1, [r1, #4]
 80076b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076b6:	68a3      	ldr	r3, [r4, #8]
 80076b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076bc:	f108 0601 	add.w	r6, r8, #1
 80076c0:	42b3      	cmp	r3, r6
 80076c2:	db0b      	blt.n	80076dc <__lshift+0x38>
 80076c4:	4638      	mov	r0, r7
 80076c6:	f7ff fddf 	bl	8007288 <_Balloc>
 80076ca:	4605      	mov	r5, r0
 80076cc:	b948      	cbnz	r0, 80076e2 <__lshift+0x3e>
 80076ce:	4602      	mov	r2, r0
 80076d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80076d4:	4b27      	ldr	r3, [pc, #156]	; (8007774 <__lshift+0xd0>)
 80076d6:	4828      	ldr	r0, [pc, #160]	; (8007778 <__lshift+0xd4>)
 80076d8:	f000 fb78 	bl	8007dcc <__assert_func>
 80076dc:	3101      	adds	r1, #1
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	e7ee      	b.n	80076c0 <__lshift+0x1c>
 80076e2:	2300      	movs	r3, #0
 80076e4:	f100 0114 	add.w	r1, r0, #20
 80076e8:	f100 0210 	add.w	r2, r0, #16
 80076ec:	4618      	mov	r0, r3
 80076ee:	4553      	cmp	r3, sl
 80076f0:	db33      	blt.n	800775a <__lshift+0xb6>
 80076f2:	6920      	ldr	r0, [r4, #16]
 80076f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076f8:	f104 0314 	add.w	r3, r4, #20
 80076fc:	f019 091f 	ands.w	r9, r9, #31
 8007700:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007704:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007708:	d02b      	beq.n	8007762 <__lshift+0xbe>
 800770a:	468a      	mov	sl, r1
 800770c:	2200      	movs	r2, #0
 800770e:	f1c9 0e20 	rsb	lr, r9, #32
 8007712:	6818      	ldr	r0, [r3, #0]
 8007714:	fa00 f009 	lsl.w	r0, r0, r9
 8007718:	4302      	orrs	r2, r0
 800771a:	f84a 2b04 	str.w	r2, [sl], #4
 800771e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007722:	459c      	cmp	ip, r3
 8007724:	fa22 f20e 	lsr.w	r2, r2, lr
 8007728:	d8f3      	bhi.n	8007712 <__lshift+0x6e>
 800772a:	ebac 0304 	sub.w	r3, ip, r4
 800772e:	3b15      	subs	r3, #21
 8007730:	f023 0303 	bic.w	r3, r3, #3
 8007734:	3304      	adds	r3, #4
 8007736:	f104 0015 	add.w	r0, r4, #21
 800773a:	4584      	cmp	ip, r0
 800773c:	bf38      	it	cc
 800773e:	2304      	movcc	r3, #4
 8007740:	50ca      	str	r2, [r1, r3]
 8007742:	b10a      	cbz	r2, 8007748 <__lshift+0xa4>
 8007744:	f108 0602 	add.w	r6, r8, #2
 8007748:	3e01      	subs	r6, #1
 800774a:	4638      	mov	r0, r7
 800774c:	4621      	mov	r1, r4
 800774e:	612e      	str	r6, [r5, #16]
 8007750:	f7ff fdda 	bl	8007308 <_Bfree>
 8007754:	4628      	mov	r0, r5
 8007756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800775a:	f842 0f04 	str.w	r0, [r2, #4]!
 800775e:	3301      	adds	r3, #1
 8007760:	e7c5      	b.n	80076ee <__lshift+0x4a>
 8007762:	3904      	subs	r1, #4
 8007764:	f853 2b04 	ldr.w	r2, [r3], #4
 8007768:	459c      	cmp	ip, r3
 800776a:	f841 2f04 	str.w	r2, [r1, #4]!
 800776e:	d8f9      	bhi.n	8007764 <__lshift+0xc0>
 8007770:	e7ea      	b.n	8007748 <__lshift+0xa4>
 8007772:	bf00      	nop
 8007774:	08008b33 	.word	0x08008b33
 8007778:	08008b44 	.word	0x08008b44

0800777c <__mcmp>:
 800777c:	4603      	mov	r3, r0
 800777e:	690a      	ldr	r2, [r1, #16]
 8007780:	6900      	ldr	r0, [r0, #16]
 8007782:	b530      	push	{r4, r5, lr}
 8007784:	1a80      	subs	r0, r0, r2
 8007786:	d10d      	bne.n	80077a4 <__mcmp+0x28>
 8007788:	3314      	adds	r3, #20
 800778a:	3114      	adds	r1, #20
 800778c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007790:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007794:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007798:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800779c:	4295      	cmp	r5, r2
 800779e:	d002      	beq.n	80077a6 <__mcmp+0x2a>
 80077a0:	d304      	bcc.n	80077ac <__mcmp+0x30>
 80077a2:	2001      	movs	r0, #1
 80077a4:	bd30      	pop	{r4, r5, pc}
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	d3f4      	bcc.n	8007794 <__mcmp+0x18>
 80077aa:	e7fb      	b.n	80077a4 <__mcmp+0x28>
 80077ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077b0:	e7f8      	b.n	80077a4 <__mcmp+0x28>
	...

080077b4 <__mdiff>:
 80077b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b8:	460c      	mov	r4, r1
 80077ba:	4606      	mov	r6, r0
 80077bc:	4611      	mov	r1, r2
 80077be:	4620      	mov	r0, r4
 80077c0:	4692      	mov	sl, r2
 80077c2:	f7ff ffdb 	bl	800777c <__mcmp>
 80077c6:	1e05      	subs	r5, r0, #0
 80077c8:	d111      	bne.n	80077ee <__mdiff+0x3a>
 80077ca:	4629      	mov	r1, r5
 80077cc:	4630      	mov	r0, r6
 80077ce:	f7ff fd5b 	bl	8007288 <_Balloc>
 80077d2:	4602      	mov	r2, r0
 80077d4:	b928      	cbnz	r0, 80077e2 <__mdiff+0x2e>
 80077d6:	f240 2132 	movw	r1, #562	; 0x232
 80077da:	4b3c      	ldr	r3, [pc, #240]	; (80078cc <__mdiff+0x118>)
 80077dc:	483c      	ldr	r0, [pc, #240]	; (80078d0 <__mdiff+0x11c>)
 80077de:	f000 faf5 	bl	8007dcc <__assert_func>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077e8:	4610      	mov	r0, r2
 80077ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ee:	bfa4      	itt	ge
 80077f0:	4653      	movge	r3, sl
 80077f2:	46a2      	movge	sl, r4
 80077f4:	4630      	mov	r0, r6
 80077f6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80077fa:	bfa6      	itte	ge
 80077fc:	461c      	movge	r4, r3
 80077fe:	2500      	movge	r5, #0
 8007800:	2501      	movlt	r5, #1
 8007802:	f7ff fd41 	bl	8007288 <_Balloc>
 8007806:	4602      	mov	r2, r0
 8007808:	b918      	cbnz	r0, 8007812 <__mdiff+0x5e>
 800780a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800780e:	4b2f      	ldr	r3, [pc, #188]	; (80078cc <__mdiff+0x118>)
 8007810:	e7e4      	b.n	80077dc <__mdiff+0x28>
 8007812:	f100 0814 	add.w	r8, r0, #20
 8007816:	f8da 7010 	ldr.w	r7, [sl, #16]
 800781a:	60c5      	str	r5, [r0, #12]
 800781c:	f04f 0c00 	mov.w	ip, #0
 8007820:	f10a 0514 	add.w	r5, sl, #20
 8007824:	f10a 0010 	add.w	r0, sl, #16
 8007828:	46c2      	mov	sl, r8
 800782a:	6926      	ldr	r6, [r4, #16]
 800782c:	f104 0914 	add.w	r9, r4, #20
 8007830:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007834:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007838:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800783c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007840:	fa1f f18b 	uxth.w	r1, fp
 8007844:	4461      	add	r1, ip
 8007846:	fa1f fc83 	uxth.w	ip, r3
 800784a:	0c1b      	lsrs	r3, r3, #16
 800784c:	eba1 010c 	sub.w	r1, r1, ip
 8007850:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007854:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007858:	b289      	uxth	r1, r1
 800785a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800785e:	454e      	cmp	r6, r9
 8007860:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007864:	f84a 3b04 	str.w	r3, [sl], #4
 8007868:	d8e6      	bhi.n	8007838 <__mdiff+0x84>
 800786a:	1b33      	subs	r3, r6, r4
 800786c:	3b15      	subs	r3, #21
 800786e:	f023 0303 	bic.w	r3, r3, #3
 8007872:	3415      	adds	r4, #21
 8007874:	3304      	adds	r3, #4
 8007876:	42a6      	cmp	r6, r4
 8007878:	bf38      	it	cc
 800787a:	2304      	movcc	r3, #4
 800787c:	441d      	add	r5, r3
 800787e:	4443      	add	r3, r8
 8007880:	461e      	mov	r6, r3
 8007882:	462c      	mov	r4, r5
 8007884:	4574      	cmp	r4, lr
 8007886:	d30e      	bcc.n	80078a6 <__mdiff+0xf2>
 8007888:	f10e 0103 	add.w	r1, lr, #3
 800788c:	1b49      	subs	r1, r1, r5
 800788e:	f021 0103 	bic.w	r1, r1, #3
 8007892:	3d03      	subs	r5, #3
 8007894:	45ae      	cmp	lr, r5
 8007896:	bf38      	it	cc
 8007898:	2100      	movcc	r1, #0
 800789a:	4419      	add	r1, r3
 800789c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80078a0:	b18b      	cbz	r3, 80078c6 <__mdiff+0x112>
 80078a2:	6117      	str	r7, [r2, #16]
 80078a4:	e7a0      	b.n	80077e8 <__mdiff+0x34>
 80078a6:	f854 8b04 	ldr.w	r8, [r4], #4
 80078aa:	fa1f f188 	uxth.w	r1, r8
 80078ae:	4461      	add	r1, ip
 80078b0:	1408      	asrs	r0, r1, #16
 80078b2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80078b6:	b289      	uxth	r1, r1
 80078b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80078bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078c0:	f846 1b04 	str.w	r1, [r6], #4
 80078c4:	e7de      	b.n	8007884 <__mdiff+0xd0>
 80078c6:	3f01      	subs	r7, #1
 80078c8:	e7e8      	b.n	800789c <__mdiff+0xe8>
 80078ca:	bf00      	nop
 80078cc:	08008b33 	.word	0x08008b33
 80078d0:	08008b44 	.word	0x08008b44

080078d4 <__d2b>:
 80078d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80078d8:	2101      	movs	r1, #1
 80078da:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80078de:	4690      	mov	r8, r2
 80078e0:	461d      	mov	r5, r3
 80078e2:	f7ff fcd1 	bl	8007288 <_Balloc>
 80078e6:	4604      	mov	r4, r0
 80078e8:	b930      	cbnz	r0, 80078f8 <__d2b+0x24>
 80078ea:	4602      	mov	r2, r0
 80078ec:	f240 310a 	movw	r1, #778	; 0x30a
 80078f0:	4b24      	ldr	r3, [pc, #144]	; (8007984 <__d2b+0xb0>)
 80078f2:	4825      	ldr	r0, [pc, #148]	; (8007988 <__d2b+0xb4>)
 80078f4:	f000 fa6a 	bl	8007dcc <__assert_func>
 80078f8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80078fc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007900:	bb2d      	cbnz	r5, 800794e <__d2b+0x7a>
 8007902:	9301      	str	r3, [sp, #4]
 8007904:	f1b8 0300 	subs.w	r3, r8, #0
 8007908:	d026      	beq.n	8007958 <__d2b+0x84>
 800790a:	4668      	mov	r0, sp
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	f7ff fd87 	bl	8007420 <__lo0bits>
 8007912:	9900      	ldr	r1, [sp, #0]
 8007914:	b1f0      	cbz	r0, 8007954 <__d2b+0x80>
 8007916:	9a01      	ldr	r2, [sp, #4]
 8007918:	f1c0 0320 	rsb	r3, r0, #32
 800791c:	fa02 f303 	lsl.w	r3, r2, r3
 8007920:	430b      	orrs	r3, r1
 8007922:	40c2      	lsrs	r2, r0
 8007924:	6163      	str	r3, [r4, #20]
 8007926:	9201      	str	r2, [sp, #4]
 8007928:	9b01      	ldr	r3, [sp, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	bf14      	ite	ne
 800792e:	2102      	movne	r1, #2
 8007930:	2101      	moveq	r1, #1
 8007932:	61a3      	str	r3, [r4, #24]
 8007934:	6121      	str	r1, [r4, #16]
 8007936:	b1c5      	cbz	r5, 800796a <__d2b+0x96>
 8007938:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800793c:	4405      	add	r5, r0
 800793e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007942:	603d      	str	r5, [r7, #0]
 8007944:	6030      	str	r0, [r6, #0]
 8007946:	4620      	mov	r0, r4
 8007948:	b002      	add	sp, #8
 800794a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800794e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007952:	e7d6      	b.n	8007902 <__d2b+0x2e>
 8007954:	6161      	str	r1, [r4, #20]
 8007956:	e7e7      	b.n	8007928 <__d2b+0x54>
 8007958:	a801      	add	r0, sp, #4
 800795a:	f7ff fd61 	bl	8007420 <__lo0bits>
 800795e:	2101      	movs	r1, #1
 8007960:	9b01      	ldr	r3, [sp, #4]
 8007962:	6121      	str	r1, [r4, #16]
 8007964:	6163      	str	r3, [r4, #20]
 8007966:	3020      	adds	r0, #32
 8007968:	e7e5      	b.n	8007936 <__d2b+0x62>
 800796a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800796e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007972:	6038      	str	r0, [r7, #0]
 8007974:	6918      	ldr	r0, [r3, #16]
 8007976:	f7ff fd33 	bl	80073e0 <__hi0bits>
 800797a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800797e:	6031      	str	r1, [r6, #0]
 8007980:	e7e1      	b.n	8007946 <__d2b+0x72>
 8007982:	bf00      	nop
 8007984:	08008b33 	.word	0x08008b33
 8007988:	08008b44 	.word	0x08008b44

0800798c <_calloc_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	fb02 f501 	mul.w	r5, r2, r1
 8007992:	4629      	mov	r1, r5
 8007994:	f000 f854 	bl	8007a40 <_malloc_r>
 8007998:	4604      	mov	r4, r0
 800799a:	b118      	cbz	r0, 80079a4 <_calloc_r+0x18>
 800799c:	462a      	mov	r2, r5
 800799e:	2100      	movs	r1, #0
 80079a0:	f7fe f932 	bl	8005c08 <memset>
 80079a4:	4620      	mov	r0, r4
 80079a6:	bd38      	pop	{r3, r4, r5, pc}

080079a8 <_free_r>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4605      	mov	r5, r0
 80079ac:	2900      	cmp	r1, #0
 80079ae:	d043      	beq.n	8007a38 <_free_r+0x90>
 80079b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079b4:	1f0c      	subs	r4, r1, #4
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	bfb8      	it	lt
 80079ba:	18e4      	addlt	r4, r4, r3
 80079bc:	f000 fa62 	bl	8007e84 <__malloc_lock>
 80079c0:	4a1e      	ldr	r2, [pc, #120]	; (8007a3c <_free_r+0x94>)
 80079c2:	6813      	ldr	r3, [r2, #0]
 80079c4:	4610      	mov	r0, r2
 80079c6:	b933      	cbnz	r3, 80079d6 <_free_r+0x2e>
 80079c8:	6063      	str	r3, [r4, #4]
 80079ca:	6014      	str	r4, [r2, #0]
 80079cc:	4628      	mov	r0, r5
 80079ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079d2:	f000 ba5d 	b.w	8007e90 <__malloc_unlock>
 80079d6:	42a3      	cmp	r3, r4
 80079d8:	d90a      	bls.n	80079f0 <_free_r+0x48>
 80079da:	6821      	ldr	r1, [r4, #0]
 80079dc:	1862      	adds	r2, r4, r1
 80079de:	4293      	cmp	r3, r2
 80079e0:	bf01      	itttt	eq
 80079e2:	681a      	ldreq	r2, [r3, #0]
 80079e4:	685b      	ldreq	r3, [r3, #4]
 80079e6:	1852      	addeq	r2, r2, r1
 80079e8:	6022      	streq	r2, [r4, #0]
 80079ea:	6063      	str	r3, [r4, #4]
 80079ec:	6004      	str	r4, [r0, #0]
 80079ee:	e7ed      	b.n	80079cc <_free_r+0x24>
 80079f0:	461a      	mov	r2, r3
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	b10b      	cbz	r3, 80079fa <_free_r+0x52>
 80079f6:	42a3      	cmp	r3, r4
 80079f8:	d9fa      	bls.n	80079f0 <_free_r+0x48>
 80079fa:	6811      	ldr	r1, [r2, #0]
 80079fc:	1850      	adds	r0, r2, r1
 80079fe:	42a0      	cmp	r0, r4
 8007a00:	d10b      	bne.n	8007a1a <_free_r+0x72>
 8007a02:	6820      	ldr	r0, [r4, #0]
 8007a04:	4401      	add	r1, r0
 8007a06:	1850      	adds	r0, r2, r1
 8007a08:	4283      	cmp	r3, r0
 8007a0a:	6011      	str	r1, [r2, #0]
 8007a0c:	d1de      	bne.n	80079cc <_free_r+0x24>
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	4401      	add	r1, r0
 8007a14:	6011      	str	r1, [r2, #0]
 8007a16:	6053      	str	r3, [r2, #4]
 8007a18:	e7d8      	b.n	80079cc <_free_r+0x24>
 8007a1a:	d902      	bls.n	8007a22 <_free_r+0x7a>
 8007a1c:	230c      	movs	r3, #12
 8007a1e:	602b      	str	r3, [r5, #0]
 8007a20:	e7d4      	b.n	80079cc <_free_r+0x24>
 8007a22:	6820      	ldr	r0, [r4, #0]
 8007a24:	1821      	adds	r1, r4, r0
 8007a26:	428b      	cmp	r3, r1
 8007a28:	bf01      	itttt	eq
 8007a2a:	6819      	ldreq	r1, [r3, #0]
 8007a2c:	685b      	ldreq	r3, [r3, #4]
 8007a2e:	1809      	addeq	r1, r1, r0
 8007a30:	6021      	streq	r1, [r4, #0]
 8007a32:	6063      	str	r3, [r4, #4]
 8007a34:	6054      	str	r4, [r2, #4]
 8007a36:	e7c9      	b.n	80079cc <_free_r+0x24>
 8007a38:	bd38      	pop	{r3, r4, r5, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000500 	.word	0x20000500

08007a40 <_malloc_r>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	1ccd      	adds	r5, r1, #3
 8007a44:	f025 0503 	bic.w	r5, r5, #3
 8007a48:	3508      	adds	r5, #8
 8007a4a:	2d0c      	cmp	r5, #12
 8007a4c:	bf38      	it	cc
 8007a4e:	250c      	movcc	r5, #12
 8007a50:	2d00      	cmp	r5, #0
 8007a52:	4606      	mov	r6, r0
 8007a54:	db01      	blt.n	8007a5a <_malloc_r+0x1a>
 8007a56:	42a9      	cmp	r1, r5
 8007a58:	d903      	bls.n	8007a62 <_malloc_r+0x22>
 8007a5a:	230c      	movs	r3, #12
 8007a5c:	6033      	str	r3, [r6, #0]
 8007a5e:	2000      	movs	r0, #0
 8007a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a62:	f000 fa0f 	bl	8007e84 <__malloc_lock>
 8007a66:	4921      	ldr	r1, [pc, #132]	; (8007aec <_malloc_r+0xac>)
 8007a68:	680a      	ldr	r2, [r1, #0]
 8007a6a:	4614      	mov	r4, r2
 8007a6c:	b99c      	cbnz	r4, 8007a96 <_malloc_r+0x56>
 8007a6e:	4f20      	ldr	r7, [pc, #128]	; (8007af0 <_malloc_r+0xb0>)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	b923      	cbnz	r3, 8007a7e <_malloc_r+0x3e>
 8007a74:	4621      	mov	r1, r4
 8007a76:	4630      	mov	r0, r6
 8007a78:	f000 f998 	bl	8007dac <_sbrk_r>
 8007a7c:	6038      	str	r0, [r7, #0]
 8007a7e:	4629      	mov	r1, r5
 8007a80:	4630      	mov	r0, r6
 8007a82:	f000 f993 	bl	8007dac <_sbrk_r>
 8007a86:	1c43      	adds	r3, r0, #1
 8007a88:	d123      	bne.n	8007ad2 <_malloc_r+0x92>
 8007a8a:	230c      	movs	r3, #12
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	6033      	str	r3, [r6, #0]
 8007a90:	f000 f9fe 	bl	8007e90 <__malloc_unlock>
 8007a94:	e7e3      	b.n	8007a5e <_malloc_r+0x1e>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	1b5b      	subs	r3, r3, r5
 8007a9a:	d417      	bmi.n	8007acc <_malloc_r+0x8c>
 8007a9c:	2b0b      	cmp	r3, #11
 8007a9e:	d903      	bls.n	8007aa8 <_malloc_r+0x68>
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	441c      	add	r4, r3
 8007aa4:	6025      	str	r5, [r4, #0]
 8007aa6:	e004      	b.n	8007ab2 <_malloc_r+0x72>
 8007aa8:	6863      	ldr	r3, [r4, #4]
 8007aaa:	42a2      	cmp	r2, r4
 8007aac:	bf0c      	ite	eq
 8007aae:	600b      	streq	r3, [r1, #0]
 8007ab0:	6053      	strne	r3, [r2, #4]
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f000 f9ec 	bl	8007e90 <__malloc_unlock>
 8007ab8:	f104 000b 	add.w	r0, r4, #11
 8007abc:	1d23      	adds	r3, r4, #4
 8007abe:	f020 0007 	bic.w	r0, r0, #7
 8007ac2:	1ac2      	subs	r2, r0, r3
 8007ac4:	d0cc      	beq.n	8007a60 <_malloc_r+0x20>
 8007ac6:	1a1b      	subs	r3, r3, r0
 8007ac8:	50a3      	str	r3, [r4, r2]
 8007aca:	e7c9      	b.n	8007a60 <_malloc_r+0x20>
 8007acc:	4622      	mov	r2, r4
 8007ace:	6864      	ldr	r4, [r4, #4]
 8007ad0:	e7cc      	b.n	8007a6c <_malloc_r+0x2c>
 8007ad2:	1cc4      	adds	r4, r0, #3
 8007ad4:	f024 0403 	bic.w	r4, r4, #3
 8007ad8:	42a0      	cmp	r0, r4
 8007ada:	d0e3      	beq.n	8007aa4 <_malloc_r+0x64>
 8007adc:	1a21      	subs	r1, r4, r0
 8007ade:	4630      	mov	r0, r6
 8007ae0:	f000 f964 	bl	8007dac <_sbrk_r>
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d1dd      	bne.n	8007aa4 <_malloc_r+0x64>
 8007ae8:	e7cf      	b.n	8007a8a <_malloc_r+0x4a>
 8007aea:	bf00      	nop
 8007aec:	20000500 	.word	0x20000500
 8007af0:	20000504 	.word	0x20000504

08007af4 <__ssputs_r>:
 8007af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af8:	688e      	ldr	r6, [r1, #8]
 8007afa:	4682      	mov	sl, r0
 8007afc:	429e      	cmp	r6, r3
 8007afe:	460c      	mov	r4, r1
 8007b00:	4690      	mov	r8, r2
 8007b02:	461f      	mov	r7, r3
 8007b04:	d838      	bhi.n	8007b78 <__ssputs_r+0x84>
 8007b06:	898a      	ldrh	r2, [r1, #12]
 8007b08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b0c:	d032      	beq.n	8007b74 <__ssputs_r+0x80>
 8007b0e:	6825      	ldr	r5, [r4, #0]
 8007b10:	6909      	ldr	r1, [r1, #16]
 8007b12:	3301      	adds	r3, #1
 8007b14:	eba5 0901 	sub.w	r9, r5, r1
 8007b18:	6965      	ldr	r5, [r4, #20]
 8007b1a:	444b      	add	r3, r9
 8007b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b24:	106d      	asrs	r5, r5, #1
 8007b26:	429d      	cmp	r5, r3
 8007b28:	bf38      	it	cc
 8007b2a:	461d      	movcc	r5, r3
 8007b2c:	0553      	lsls	r3, r2, #21
 8007b2e:	d531      	bpl.n	8007b94 <__ssputs_r+0xa0>
 8007b30:	4629      	mov	r1, r5
 8007b32:	f7ff ff85 	bl	8007a40 <_malloc_r>
 8007b36:	4606      	mov	r6, r0
 8007b38:	b950      	cbnz	r0, 8007b50 <__ssputs_r+0x5c>
 8007b3a:	230c      	movs	r3, #12
 8007b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b40:	f8ca 3000 	str.w	r3, [sl]
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b4a:	81a3      	strh	r3, [r4, #12]
 8007b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b50:	464a      	mov	r2, r9
 8007b52:	6921      	ldr	r1, [r4, #16]
 8007b54:	f7fe f84a 	bl	8005bec <memcpy>
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b62:	81a3      	strh	r3, [r4, #12]
 8007b64:	6126      	str	r6, [r4, #16]
 8007b66:	444e      	add	r6, r9
 8007b68:	6026      	str	r6, [r4, #0]
 8007b6a:	463e      	mov	r6, r7
 8007b6c:	6165      	str	r5, [r4, #20]
 8007b6e:	eba5 0509 	sub.w	r5, r5, r9
 8007b72:	60a5      	str	r5, [r4, #8]
 8007b74:	42be      	cmp	r6, r7
 8007b76:	d900      	bls.n	8007b7a <__ssputs_r+0x86>
 8007b78:	463e      	mov	r6, r7
 8007b7a:	4632      	mov	r2, r6
 8007b7c:	4641      	mov	r1, r8
 8007b7e:	6820      	ldr	r0, [r4, #0]
 8007b80:	f000 f966 	bl	8007e50 <memmove>
 8007b84:	68a3      	ldr	r3, [r4, #8]
 8007b86:	6822      	ldr	r2, [r4, #0]
 8007b88:	1b9b      	subs	r3, r3, r6
 8007b8a:	4432      	add	r2, r6
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	60a3      	str	r3, [r4, #8]
 8007b90:	6022      	str	r2, [r4, #0]
 8007b92:	e7db      	b.n	8007b4c <__ssputs_r+0x58>
 8007b94:	462a      	mov	r2, r5
 8007b96:	f000 f981 	bl	8007e9c <_realloc_r>
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d1e1      	bne.n	8007b64 <__ssputs_r+0x70>
 8007ba0:	4650      	mov	r0, sl
 8007ba2:	6921      	ldr	r1, [r4, #16]
 8007ba4:	f7ff ff00 	bl	80079a8 <_free_r>
 8007ba8:	e7c7      	b.n	8007b3a <__ssputs_r+0x46>
	...

08007bac <_svfiprintf_r>:
 8007bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb0:	4698      	mov	r8, r3
 8007bb2:	898b      	ldrh	r3, [r1, #12]
 8007bb4:	4607      	mov	r7, r0
 8007bb6:	061b      	lsls	r3, r3, #24
 8007bb8:	460d      	mov	r5, r1
 8007bba:	4614      	mov	r4, r2
 8007bbc:	b09d      	sub	sp, #116	; 0x74
 8007bbe:	d50e      	bpl.n	8007bde <_svfiprintf_r+0x32>
 8007bc0:	690b      	ldr	r3, [r1, #16]
 8007bc2:	b963      	cbnz	r3, 8007bde <_svfiprintf_r+0x32>
 8007bc4:	2140      	movs	r1, #64	; 0x40
 8007bc6:	f7ff ff3b 	bl	8007a40 <_malloc_r>
 8007bca:	6028      	str	r0, [r5, #0]
 8007bcc:	6128      	str	r0, [r5, #16]
 8007bce:	b920      	cbnz	r0, 8007bda <_svfiprintf_r+0x2e>
 8007bd0:	230c      	movs	r3, #12
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bd8:	e0d1      	b.n	8007d7e <_svfiprintf_r+0x1d2>
 8007bda:	2340      	movs	r3, #64	; 0x40
 8007bdc:	616b      	str	r3, [r5, #20]
 8007bde:	2300      	movs	r3, #0
 8007be0:	9309      	str	r3, [sp, #36]	; 0x24
 8007be2:	2320      	movs	r3, #32
 8007be4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007be8:	2330      	movs	r3, #48	; 0x30
 8007bea:	f04f 0901 	mov.w	r9, #1
 8007bee:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bf2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d98 <_svfiprintf_r+0x1ec>
 8007bf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bfa:	4623      	mov	r3, r4
 8007bfc:	469a      	mov	sl, r3
 8007bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c02:	b10a      	cbz	r2, 8007c08 <_svfiprintf_r+0x5c>
 8007c04:	2a25      	cmp	r2, #37	; 0x25
 8007c06:	d1f9      	bne.n	8007bfc <_svfiprintf_r+0x50>
 8007c08:	ebba 0b04 	subs.w	fp, sl, r4
 8007c0c:	d00b      	beq.n	8007c26 <_svfiprintf_r+0x7a>
 8007c0e:	465b      	mov	r3, fp
 8007c10:	4622      	mov	r2, r4
 8007c12:	4629      	mov	r1, r5
 8007c14:	4638      	mov	r0, r7
 8007c16:	f7ff ff6d 	bl	8007af4 <__ssputs_r>
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	f000 80aa 	beq.w	8007d74 <_svfiprintf_r+0x1c8>
 8007c20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c22:	445a      	add	r2, fp
 8007c24:	9209      	str	r2, [sp, #36]	; 0x24
 8007c26:	f89a 3000 	ldrb.w	r3, [sl]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 80a2 	beq.w	8007d74 <_svfiprintf_r+0x1c8>
 8007c30:	2300      	movs	r3, #0
 8007c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c3a:	f10a 0a01 	add.w	sl, sl, #1
 8007c3e:	9304      	str	r3, [sp, #16]
 8007c40:	9307      	str	r3, [sp, #28]
 8007c42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c46:	931a      	str	r3, [sp, #104]	; 0x68
 8007c48:	4654      	mov	r4, sl
 8007c4a:	2205      	movs	r2, #5
 8007c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c50:	4851      	ldr	r0, [pc, #324]	; (8007d98 <_svfiprintf_r+0x1ec>)
 8007c52:	f7ff fb0b 	bl	800726c <memchr>
 8007c56:	9a04      	ldr	r2, [sp, #16]
 8007c58:	b9d8      	cbnz	r0, 8007c92 <_svfiprintf_r+0xe6>
 8007c5a:	06d0      	lsls	r0, r2, #27
 8007c5c:	bf44      	itt	mi
 8007c5e:	2320      	movmi	r3, #32
 8007c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c64:	0711      	lsls	r1, r2, #28
 8007c66:	bf44      	itt	mi
 8007c68:	232b      	movmi	r3, #43	; 0x2b
 8007c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c72:	2b2a      	cmp	r3, #42	; 0x2a
 8007c74:	d015      	beq.n	8007ca2 <_svfiprintf_r+0xf6>
 8007c76:	4654      	mov	r4, sl
 8007c78:	2000      	movs	r0, #0
 8007c7a:	f04f 0c0a 	mov.w	ip, #10
 8007c7e:	9a07      	ldr	r2, [sp, #28]
 8007c80:	4621      	mov	r1, r4
 8007c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c86:	3b30      	subs	r3, #48	; 0x30
 8007c88:	2b09      	cmp	r3, #9
 8007c8a:	d94e      	bls.n	8007d2a <_svfiprintf_r+0x17e>
 8007c8c:	b1b0      	cbz	r0, 8007cbc <_svfiprintf_r+0x110>
 8007c8e:	9207      	str	r2, [sp, #28]
 8007c90:	e014      	b.n	8007cbc <_svfiprintf_r+0x110>
 8007c92:	eba0 0308 	sub.w	r3, r0, r8
 8007c96:	fa09 f303 	lsl.w	r3, r9, r3
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	46a2      	mov	sl, r4
 8007c9e:	9304      	str	r3, [sp, #16]
 8007ca0:	e7d2      	b.n	8007c48 <_svfiprintf_r+0x9c>
 8007ca2:	9b03      	ldr	r3, [sp, #12]
 8007ca4:	1d19      	adds	r1, r3, #4
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	9103      	str	r1, [sp, #12]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	bfbb      	ittet	lt
 8007cae:	425b      	neglt	r3, r3
 8007cb0:	f042 0202 	orrlt.w	r2, r2, #2
 8007cb4:	9307      	strge	r3, [sp, #28]
 8007cb6:	9307      	strlt	r3, [sp, #28]
 8007cb8:	bfb8      	it	lt
 8007cba:	9204      	strlt	r2, [sp, #16]
 8007cbc:	7823      	ldrb	r3, [r4, #0]
 8007cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8007cc0:	d10c      	bne.n	8007cdc <_svfiprintf_r+0x130>
 8007cc2:	7863      	ldrb	r3, [r4, #1]
 8007cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8007cc6:	d135      	bne.n	8007d34 <_svfiprintf_r+0x188>
 8007cc8:	9b03      	ldr	r3, [sp, #12]
 8007cca:	3402      	adds	r4, #2
 8007ccc:	1d1a      	adds	r2, r3, #4
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	9203      	str	r2, [sp, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	bfb8      	it	lt
 8007cd6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007cda:	9305      	str	r3, [sp, #20]
 8007cdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007da8 <_svfiprintf_r+0x1fc>
 8007ce0:	2203      	movs	r2, #3
 8007ce2:	4650      	mov	r0, sl
 8007ce4:	7821      	ldrb	r1, [r4, #0]
 8007ce6:	f7ff fac1 	bl	800726c <memchr>
 8007cea:	b140      	cbz	r0, 8007cfe <_svfiprintf_r+0x152>
 8007cec:	2340      	movs	r3, #64	; 0x40
 8007cee:	eba0 000a 	sub.w	r0, r0, sl
 8007cf2:	fa03 f000 	lsl.w	r0, r3, r0
 8007cf6:	9b04      	ldr	r3, [sp, #16]
 8007cf8:	3401      	adds	r4, #1
 8007cfa:	4303      	orrs	r3, r0
 8007cfc:	9304      	str	r3, [sp, #16]
 8007cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d02:	2206      	movs	r2, #6
 8007d04:	4825      	ldr	r0, [pc, #148]	; (8007d9c <_svfiprintf_r+0x1f0>)
 8007d06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d0a:	f7ff faaf 	bl	800726c <memchr>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d038      	beq.n	8007d84 <_svfiprintf_r+0x1d8>
 8007d12:	4b23      	ldr	r3, [pc, #140]	; (8007da0 <_svfiprintf_r+0x1f4>)
 8007d14:	bb1b      	cbnz	r3, 8007d5e <_svfiprintf_r+0x1b2>
 8007d16:	9b03      	ldr	r3, [sp, #12]
 8007d18:	3307      	adds	r3, #7
 8007d1a:	f023 0307 	bic.w	r3, r3, #7
 8007d1e:	3308      	adds	r3, #8
 8007d20:	9303      	str	r3, [sp, #12]
 8007d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d24:	4433      	add	r3, r6
 8007d26:	9309      	str	r3, [sp, #36]	; 0x24
 8007d28:	e767      	b.n	8007bfa <_svfiprintf_r+0x4e>
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	2001      	movs	r0, #1
 8007d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d32:	e7a5      	b.n	8007c80 <_svfiprintf_r+0xd4>
 8007d34:	2300      	movs	r3, #0
 8007d36:	f04f 0c0a 	mov.w	ip, #10
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	3401      	adds	r4, #1
 8007d3e:	9305      	str	r3, [sp, #20]
 8007d40:	4620      	mov	r0, r4
 8007d42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d46:	3a30      	subs	r2, #48	; 0x30
 8007d48:	2a09      	cmp	r2, #9
 8007d4a:	d903      	bls.n	8007d54 <_svfiprintf_r+0x1a8>
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d0c5      	beq.n	8007cdc <_svfiprintf_r+0x130>
 8007d50:	9105      	str	r1, [sp, #20]
 8007d52:	e7c3      	b.n	8007cdc <_svfiprintf_r+0x130>
 8007d54:	4604      	mov	r4, r0
 8007d56:	2301      	movs	r3, #1
 8007d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d5c:	e7f0      	b.n	8007d40 <_svfiprintf_r+0x194>
 8007d5e:	ab03      	add	r3, sp, #12
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	462a      	mov	r2, r5
 8007d64:	4638      	mov	r0, r7
 8007d66:	4b0f      	ldr	r3, [pc, #60]	; (8007da4 <_svfiprintf_r+0x1f8>)
 8007d68:	a904      	add	r1, sp, #16
 8007d6a:	f7fd fff3 	bl	8005d54 <_printf_float>
 8007d6e:	1c42      	adds	r2, r0, #1
 8007d70:	4606      	mov	r6, r0
 8007d72:	d1d6      	bne.n	8007d22 <_svfiprintf_r+0x176>
 8007d74:	89ab      	ldrh	r3, [r5, #12]
 8007d76:	065b      	lsls	r3, r3, #25
 8007d78:	f53f af2c 	bmi.w	8007bd4 <_svfiprintf_r+0x28>
 8007d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d7e:	b01d      	add	sp, #116	; 0x74
 8007d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d84:	ab03      	add	r3, sp, #12
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	462a      	mov	r2, r5
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	4b05      	ldr	r3, [pc, #20]	; (8007da4 <_svfiprintf_r+0x1f8>)
 8007d8e:	a904      	add	r1, sp, #16
 8007d90:	f7fe fa7c 	bl	800628c <_printf_i>
 8007d94:	e7eb      	b.n	8007d6e <_svfiprintf_r+0x1c2>
 8007d96:	bf00      	nop
 8007d98:	08008ca4 	.word	0x08008ca4
 8007d9c:	08008cae 	.word	0x08008cae
 8007da0:	08005d55 	.word	0x08005d55
 8007da4:	08007af5 	.word	0x08007af5
 8007da8:	08008caa 	.word	0x08008caa

08007dac <_sbrk_r>:
 8007dac:	b538      	push	{r3, r4, r5, lr}
 8007dae:	2300      	movs	r3, #0
 8007db0:	4d05      	ldr	r5, [pc, #20]	; (8007dc8 <_sbrk_r+0x1c>)
 8007db2:	4604      	mov	r4, r0
 8007db4:	4608      	mov	r0, r1
 8007db6:	602b      	str	r3, [r5, #0]
 8007db8:	f7fa feb2 	bl	8002b20 <_sbrk>
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	d102      	bne.n	8007dc6 <_sbrk_r+0x1a>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	b103      	cbz	r3, 8007dc6 <_sbrk_r+0x1a>
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	2000050c 	.word	0x2000050c

08007dcc <__assert_func>:
 8007dcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dce:	4614      	mov	r4, r2
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	4b09      	ldr	r3, [pc, #36]	; (8007df8 <__assert_func+0x2c>)
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68d8      	ldr	r0, [r3, #12]
 8007dda:	b14c      	cbz	r4, 8007df0 <__assert_func+0x24>
 8007ddc:	4b07      	ldr	r3, [pc, #28]	; (8007dfc <__assert_func+0x30>)
 8007dde:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007de2:	9100      	str	r1, [sp, #0]
 8007de4:	462b      	mov	r3, r5
 8007de6:	4906      	ldr	r1, [pc, #24]	; (8007e00 <__assert_func+0x34>)
 8007de8:	f000 f80e 	bl	8007e08 <fiprintf>
 8007dec:	f000 faa2 	bl	8008334 <abort>
 8007df0:	4b04      	ldr	r3, [pc, #16]	; (8007e04 <__assert_func+0x38>)
 8007df2:	461c      	mov	r4, r3
 8007df4:	e7f3      	b.n	8007dde <__assert_func+0x12>
 8007df6:	bf00      	nop
 8007df8:	2000010c 	.word	0x2000010c
 8007dfc:	08008cb5 	.word	0x08008cb5
 8007e00:	08008cc2 	.word	0x08008cc2
 8007e04:	08008cf0 	.word	0x08008cf0

08007e08 <fiprintf>:
 8007e08:	b40e      	push	{r1, r2, r3}
 8007e0a:	b503      	push	{r0, r1, lr}
 8007e0c:	4601      	mov	r1, r0
 8007e0e:	ab03      	add	r3, sp, #12
 8007e10:	4805      	ldr	r0, [pc, #20]	; (8007e28 <fiprintf+0x20>)
 8007e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e16:	6800      	ldr	r0, [r0, #0]
 8007e18:	9301      	str	r3, [sp, #4]
 8007e1a:	f000 f88d 	bl	8007f38 <_vfiprintf_r>
 8007e1e:	b002      	add	sp, #8
 8007e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e24:	b003      	add	sp, #12
 8007e26:	4770      	bx	lr
 8007e28:	2000010c 	.word	0x2000010c

08007e2c <__ascii_mbtowc>:
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	b901      	cbnz	r1, 8007e32 <__ascii_mbtowc+0x6>
 8007e30:	a901      	add	r1, sp, #4
 8007e32:	b142      	cbz	r2, 8007e46 <__ascii_mbtowc+0x1a>
 8007e34:	b14b      	cbz	r3, 8007e4a <__ascii_mbtowc+0x1e>
 8007e36:	7813      	ldrb	r3, [r2, #0]
 8007e38:	600b      	str	r3, [r1, #0]
 8007e3a:	7812      	ldrb	r2, [r2, #0]
 8007e3c:	1e10      	subs	r0, r2, #0
 8007e3e:	bf18      	it	ne
 8007e40:	2001      	movne	r0, #1
 8007e42:	b002      	add	sp, #8
 8007e44:	4770      	bx	lr
 8007e46:	4610      	mov	r0, r2
 8007e48:	e7fb      	b.n	8007e42 <__ascii_mbtowc+0x16>
 8007e4a:	f06f 0001 	mvn.w	r0, #1
 8007e4e:	e7f8      	b.n	8007e42 <__ascii_mbtowc+0x16>

08007e50 <memmove>:
 8007e50:	4288      	cmp	r0, r1
 8007e52:	b510      	push	{r4, lr}
 8007e54:	eb01 0402 	add.w	r4, r1, r2
 8007e58:	d902      	bls.n	8007e60 <memmove+0x10>
 8007e5a:	4284      	cmp	r4, r0
 8007e5c:	4623      	mov	r3, r4
 8007e5e:	d807      	bhi.n	8007e70 <memmove+0x20>
 8007e60:	1e43      	subs	r3, r0, #1
 8007e62:	42a1      	cmp	r1, r4
 8007e64:	d008      	beq.n	8007e78 <memmove+0x28>
 8007e66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e6e:	e7f8      	b.n	8007e62 <memmove+0x12>
 8007e70:	4601      	mov	r1, r0
 8007e72:	4402      	add	r2, r0
 8007e74:	428a      	cmp	r2, r1
 8007e76:	d100      	bne.n	8007e7a <memmove+0x2a>
 8007e78:	bd10      	pop	{r4, pc}
 8007e7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e82:	e7f7      	b.n	8007e74 <memmove+0x24>

08007e84 <__malloc_lock>:
 8007e84:	4801      	ldr	r0, [pc, #4]	; (8007e8c <__malloc_lock+0x8>)
 8007e86:	f000 bc15 	b.w	80086b4 <__retarget_lock_acquire_recursive>
 8007e8a:	bf00      	nop
 8007e8c:	20000514 	.word	0x20000514

08007e90 <__malloc_unlock>:
 8007e90:	4801      	ldr	r0, [pc, #4]	; (8007e98 <__malloc_unlock+0x8>)
 8007e92:	f000 bc10 	b.w	80086b6 <__retarget_lock_release_recursive>
 8007e96:	bf00      	nop
 8007e98:	20000514 	.word	0x20000514

08007e9c <_realloc_r>:
 8007e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9e:	4607      	mov	r7, r0
 8007ea0:	4614      	mov	r4, r2
 8007ea2:	460e      	mov	r6, r1
 8007ea4:	b921      	cbnz	r1, 8007eb0 <_realloc_r+0x14>
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007eac:	f7ff bdc8 	b.w	8007a40 <_malloc_r>
 8007eb0:	b922      	cbnz	r2, 8007ebc <_realloc_r+0x20>
 8007eb2:	f7ff fd79 	bl	80079a8 <_free_r>
 8007eb6:	4625      	mov	r5, r4
 8007eb8:	4628      	mov	r0, r5
 8007eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ebc:	f000 fc60 	bl	8008780 <_malloc_usable_size_r>
 8007ec0:	42a0      	cmp	r0, r4
 8007ec2:	d20f      	bcs.n	8007ee4 <_realloc_r+0x48>
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	f7ff fdba 	bl	8007a40 <_malloc_r>
 8007ecc:	4605      	mov	r5, r0
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d0f2      	beq.n	8007eb8 <_realloc_r+0x1c>
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	f7fd fe89 	bl	8005bec <memcpy>
 8007eda:	4631      	mov	r1, r6
 8007edc:	4638      	mov	r0, r7
 8007ede:	f7ff fd63 	bl	80079a8 <_free_r>
 8007ee2:	e7e9      	b.n	8007eb8 <_realloc_r+0x1c>
 8007ee4:	4635      	mov	r5, r6
 8007ee6:	e7e7      	b.n	8007eb8 <_realloc_r+0x1c>

08007ee8 <__sfputc_r>:
 8007ee8:	6893      	ldr	r3, [r2, #8]
 8007eea:	b410      	push	{r4}
 8007eec:	3b01      	subs	r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	6093      	str	r3, [r2, #8]
 8007ef2:	da07      	bge.n	8007f04 <__sfputc_r+0x1c>
 8007ef4:	6994      	ldr	r4, [r2, #24]
 8007ef6:	42a3      	cmp	r3, r4
 8007ef8:	db01      	blt.n	8007efe <__sfputc_r+0x16>
 8007efa:	290a      	cmp	r1, #10
 8007efc:	d102      	bne.n	8007f04 <__sfputc_r+0x1c>
 8007efe:	bc10      	pop	{r4}
 8007f00:	f000 b94a 	b.w	8008198 <__swbuf_r>
 8007f04:	6813      	ldr	r3, [r2, #0]
 8007f06:	1c58      	adds	r0, r3, #1
 8007f08:	6010      	str	r0, [r2, #0]
 8007f0a:	7019      	strb	r1, [r3, #0]
 8007f0c:	4608      	mov	r0, r1
 8007f0e:	bc10      	pop	{r4}
 8007f10:	4770      	bx	lr

08007f12 <__sfputs_r>:
 8007f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f14:	4606      	mov	r6, r0
 8007f16:	460f      	mov	r7, r1
 8007f18:	4614      	mov	r4, r2
 8007f1a:	18d5      	adds	r5, r2, r3
 8007f1c:	42ac      	cmp	r4, r5
 8007f1e:	d101      	bne.n	8007f24 <__sfputs_r+0x12>
 8007f20:	2000      	movs	r0, #0
 8007f22:	e007      	b.n	8007f34 <__sfputs_r+0x22>
 8007f24:	463a      	mov	r2, r7
 8007f26:	4630      	mov	r0, r6
 8007f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f2c:	f7ff ffdc 	bl	8007ee8 <__sfputc_r>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d1f3      	bne.n	8007f1c <__sfputs_r+0xa>
 8007f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f38 <_vfiprintf_r>:
 8007f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	460d      	mov	r5, r1
 8007f3e:	4614      	mov	r4, r2
 8007f40:	4698      	mov	r8, r3
 8007f42:	4606      	mov	r6, r0
 8007f44:	b09d      	sub	sp, #116	; 0x74
 8007f46:	b118      	cbz	r0, 8007f50 <_vfiprintf_r+0x18>
 8007f48:	6983      	ldr	r3, [r0, #24]
 8007f4a:	b90b      	cbnz	r3, 8007f50 <_vfiprintf_r+0x18>
 8007f4c:	f000 fb14 	bl	8008578 <__sinit>
 8007f50:	4b89      	ldr	r3, [pc, #548]	; (8008178 <_vfiprintf_r+0x240>)
 8007f52:	429d      	cmp	r5, r3
 8007f54:	d11b      	bne.n	8007f8e <_vfiprintf_r+0x56>
 8007f56:	6875      	ldr	r5, [r6, #4]
 8007f58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f5a:	07d9      	lsls	r1, r3, #31
 8007f5c:	d405      	bmi.n	8007f6a <_vfiprintf_r+0x32>
 8007f5e:	89ab      	ldrh	r3, [r5, #12]
 8007f60:	059a      	lsls	r2, r3, #22
 8007f62:	d402      	bmi.n	8007f6a <_vfiprintf_r+0x32>
 8007f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f66:	f000 fba5 	bl	80086b4 <__retarget_lock_acquire_recursive>
 8007f6a:	89ab      	ldrh	r3, [r5, #12]
 8007f6c:	071b      	lsls	r3, r3, #28
 8007f6e:	d501      	bpl.n	8007f74 <_vfiprintf_r+0x3c>
 8007f70:	692b      	ldr	r3, [r5, #16]
 8007f72:	b9eb      	cbnz	r3, 8007fb0 <_vfiprintf_r+0x78>
 8007f74:	4629      	mov	r1, r5
 8007f76:	4630      	mov	r0, r6
 8007f78:	f000 f96e 	bl	8008258 <__swsetup_r>
 8007f7c:	b1c0      	cbz	r0, 8007fb0 <_vfiprintf_r+0x78>
 8007f7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f80:	07dc      	lsls	r4, r3, #31
 8007f82:	d50e      	bpl.n	8007fa2 <_vfiprintf_r+0x6a>
 8007f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f88:	b01d      	add	sp, #116	; 0x74
 8007f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8e:	4b7b      	ldr	r3, [pc, #492]	; (800817c <_vfiprintf_r+0x244>)
 8007f90:	429d      	cmp	r5, r3
 8007f92:	d101      	bne.n	8007f98 <_vfiprintf_r+0x60>
 8007f94:	68b5      	ldr	r5, [r6, #8]
 8007f96:	e7df      	b.n	8007f58 <_vfiprintf_r+0x20>
 8007f98:	4b79      	ldr	r3, [pc, #484]	; (8008180 <_vfiprintf_r+0x248>)
 8007f9a:	429d      	cmp	r5, r3
 8007f9c:	bf08      	it	eq
 8007f9e:	68f5      	ldreq	r5, [r6, #12]
 8007fa0:	e7da      	b.n	8007f58 <_vfiprintf_r+0x20>
 8007fa2:	89ab      	ldrh	r3, [r5, #12]
 8007fa4:	0598      	lsls	r0, r3, #22
 8007fa6:	d4ed      	bmi.n	8007f84 <_vfiprintf_r+0x4c>
 8007fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007faa:	f000 fb84 	bl	80086b6 <__retarget_lock_release_recursive>
 8007fae:	e7e9      	b.n	8007f84 <_vfiprintf_r+0x4c>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fb4:	2320      	movs	r3, #32
 8007fb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fba:	2330      	movs	r3, #48	; 0x30
 8007fbc:	f04f 0901 	mov.w	r9, #1
 8007fc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fc4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008184 <_vfiprintf_r+0x24c>
 8007fc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fcc:	4623      	mov	r3, r4
 8007fce:	469a      	mov	sl, r3
 8007fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fd4:	b10a      	cbz	r2, 8007fda <_vfiprintf_r+0xa2>
 8007fd6:	2a25      	cmp	r2, #37	; 0x25
 8007fd8:	d1f9      	bne.n	8007fce <_vfiprintf_r+0x96>
 8007fda:	ebba 0b04 	subs.w	fp, sl, r4
 8007fde:	d00b      	beq.n	8007ff8 <_vfiprintf_r+0xc0>
 8007fe0:	465b      	mov	r3, fp
 8007fe2:	4622      	mov	r2, r4
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	f7ff ff93 	bl	8007f12 <__sfputs_r>
 8007fec:	3001      	adds	r0, #1
 8007fee:	f000 80aa 	beq.w	8008146 <_vfiprintf_r+0x20e>
 8007ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ff4:	445a      	add	r2, fp
 8007ff6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 80a2 	beq.w	8008146 <_vfiprintf_r+0x20e>
 8008002:	2300      	movs	r3, #0
 8008004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800800c:	f10a 0a01 	add.w	sl, sl, #1
 8008010:	9304      	str	r3, [sp, #16]
 8008012:	9307      	str	r3, [sp, #28]
 8008014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008018:	931a      	str	r3, [sp, #104]	; 0x68
 800801a:	4654      	mov	r4, sl
 800801c:	2205      	movs	r2, #5
 800801e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008022:	4858      	ldr	r0, [pc, #352]	; (8008184 <_vfiprintf_r+0x24c>)
 8008024:	f7ff f922 	bl	800726c <memchr>
 8008028:	9a04      	ldr	r2, [sp, #16]
 800802a:	b9d8      	cbnz	r0, 8008064 <_vfiprintf_r+0x12c>
 800802c:	06d1      	lsls	r1, r2, #27
 800802e:	bf44      	itt	mi
 8008030:	2320      	movmi	r3, #32
 8008032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008036:	0713      	lsls	r3, r2, #28
 8008038:	bf44      	itt	mi
 800803a:	232b      	movmi	r3, #43	; 0x2b
 800803c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008040:	f89a 3000 	ldrb.w	r3, [sl]
 8008044:	2b2a      	cmp	r3, #42	; 0x2a
 8008046:	d015      	beq.n	8008074 <_vfiprintf_r+0x13c>
 8008048:	4654      	mov	r4, sl
 800804a:	2000      	movs	r0, #0
 800804c:	f04f 0c0a 	mov.w	ip, #10
 8008050:	9a07      	ldr	r2, [sp, #28]
 8008052:	4621      	mov	r1, r4
 8008054:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008058:	3b30      	subs	r3, #48	; 0x30
 800805a:	2b09      	cmp	r3, #9
 800805c:	d94e      	bls.n	80080fc <_vfiprintf_r+0x1c4>
 800805e:	b1b0      	cbz	r0, 800808e <_vfiprintf_r+0x156>
 8008060:	9207      	str	r2, [sp, #28]
 8008062:	e014      	b.n	800808e <_vfiprintf_r+0x156>
 8008064:	eba0 0308 	sub.w	r3, r0, r8
 8008068:	fa09 f303 	lsl.w	r3, r9, r3
 800806c:	4313      	orrs	r3, r2
 800806e:	46a2      	mov	sl, r4
 8008070:	9304      	str	r3, [sp, #16]
 8008072:	e7d2      	b.n	800801a <_vfiprintf_r+0xe2>
 8008074:	9b03      	ldr	r3, [sp, #12]
 8008076:	1d19      	adds	r1, r3, #4
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	9103      	str	r1, [sp, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	bfbb      	ittet	lt
 8008080:	425b      	neglt	r3, r3
 8008082:	f042 0202 	orrlt.w	r2, r2, #2
 8008086:	9307      	strge	r3, [sp, #28]
 8008088:	9307      	strlt	r3, [sp, #28]
 800808a:	bfb8      	it	lt
 800808c:	9204      	strlt	r2, [sp, #16]
 800808e:	7823      	ldrb	r3, [r4, #0]
 8008090:	2b2e      	cmp	r3, #46	; 0x2e
 8008092:	d10c      	bne.n	80080ae <_vfiprintf_r+0x176>
 8008094:	7863      	ldrb	r3, [r4, #1]
 8008096:	2b2a      	cmp	r3, #42	; 0x2a
 8008098:	d135      	bne.n	8008106 <_vfiprintf_r+0x1ce>
 800809a:	9b03      	ldr	r3, [sp, #12]
 800809c:	3402      	adds	r4, #2
 800809e:	1d1a      	adds	r2, r3, #4
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	9203      	str	r2, [sp, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	bfb8      	it	lt
 80080a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80080ac:	9305      	str	r3, [sp, #20]
 80080ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008194 <_vfiprintf_r+0x25c>
 80080b2:	2203      	movs	r2, #3
 80080b4:	4650      	mov	r0, sl
 80080b6:	7821      	ldrb	r1, [r4, #0]
 80080b8:	f7ff f8d8 	bl	800726c <memchr>
 80080bc:	b140      	cbz	r0, 80080d0 <_vfiprintf_r+0x198>
 80080be:	2340      	movs	r3, #64	; 0x40
 80080c0:	eba0 000a 	sub.w	r0, r0, sl
 80080c4:	fa03 f000 	lsl.w	r0, r3, r0
 80080c8:	9b04      	ldr	r3, [sp, #16]
 80080ca:	3401      	adds	r4, #1
 80080cc:	4303      	orrs	r3, r0
 80080ce:	9304      	str	r3, [sp, #16]
 80080d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080d4:	2206      	movs	r2, #6
 80080d6:	482c      	ldr	r0, [pc, #176]	; (8008188 <_vfiprintf_r+0x250>)
 80080d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080dc:	f7ff f8c6 	bl	800726c <memchr>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d03f      	beq.n	8008164 <_vfiprintf_r+0x22c>
 80080e4:	4b29      	ldr	r3, [pc, #164]	; (800818c <_vfiprintf_r+0x254>)
 80080e6:	bb1b      	cbnz	r3, 8008130 <_vfiprintf_r+0x1f8>
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	3307      	adds	r3, #7
 80080ec:	f023 0307 	bic.w	r3, r3, #7
 80080f0:	3308      	adds	r3, #8
 80080f2:	9303      	str	r3, [sp, #12]
 80080f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f6:	443b      	add	r3, r7
 80080f8:	9309      	str	r3, [sp, #36]	; 0x24
 80080fa:	e767      	b.n	8007fcc <_vfiprintf_r+0x94>
 80080fc:	460c      	mov	r4, r1
 80080fe:	2001      	movs	r0, #1
 8008100:	fb0c 3202 	mla	r2, ip, r2, r3
 8008104:	e7a5      	b.n	8008052 <_vfiprintf_r+0x11a>
 8008106:	2300      	movs	r3, #0
 8008108:	f04f 0c0a 	mov.w	ip, #10
 800810c:	4619      	mov	r1, r3
 800810e:	3401      	adds	r4, #1
 8008110:	9305      	str	r3, [sp, #20]
 8008112:	4620      	mov	r0, r4
 8008114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008118:	3a30      	subs	r2, #48	; 0x30
 800811a:	2a09      	cmp	r2, #9
 800811c:	d903      	bls.n	8008126 <_vfiprintf_r+0x1ee>
 800811e:	2b00      	cmp	r3, #0
 8008120:	d0c5      	beq.n	80080ae <_vfiprintf_r+0x176>
 8008122:	9105      	str	r1, [sp, #20]
 8008124:	e7c3      	b.n	80080ae <_vfiprintf_r+0x176>
 8008126:	4604      	mov	r4, r0
 8008128:	2301      	movs	r3, #1
 800812a:	fb0c 2101 	mla	r1, ip, r1, r2
 800812e:	e7f0      	b.n	8008112 <_vfiprintf_r+0x1da>
 8008130:	ab03      	add	r3, sp, #12
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	462a      	mov	r2, r5
 8008136:	4630      	mov	r0, r6
 8008138:	4b15      	ldr	r3, [pc, #84]	; (8008190 <_vfiprintf_r+0x258>)
 800813a:	a904      	add	r1, sp, #16
 800813c:	f7fd fe0a 	bl	8005d54 <_printf_float>
 8008140:	4607      	mov	r7, r0
 8008142:	1c78      	adds	r0, r7, #1
 8008144:	d1d6      	bne.n	80080f4 <_vfiprintf_r+0x1bc>
 8008146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008148:	07d9      	lsls	r1, r3, #31
 800814a:	d405      	bmi.n	8008158 <_vfiprintf_r+0x220>
 800814c:	89ab      	ldrh	r3, [r5, #12]
 800814e:	059a      	lsls	r2, r3, #22
 8008150:	d402      	bmi.n	8008158 <_vfiprintf_r+0x220>
 8008152:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008154:	f000 faaf 	bl	80086b6 <__retarget_lock_release_recursive>
 8008158:	89ab      	ldrh	r3, [r5, #12]
 800815a:	065b      	lsls	r3, r3, #25
 800815c:	f53f af12 	bmi.w	8007f84 <_vfiprintf_r+0x4c>
 8008160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008162:	e711      	b.n	8007f88 <_vfiprintf_r+0x50>
 8008164:	ab03      	add	r3, sp, #12
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	462a      	mov	r2, r5
 800816a:	4630      	mov	r0, r6
 800816c:	4b08      	ldr	r3, [pc, #32]	; (8008190 <_vfiprintf_r+0x258>)
 800816e:	a904      	add	r1, sp, #16
 8008170:	f7fe f88c 	bl	800628c <_printf_i>
 8008174:	e7e4      	b.n	8008140 <_vfiprintf_r+0x208>
 8008176:	bf00      	nop
 8008178:	08008e1c 	.word	0x08008e1c
 800817c:	08008e3c 	.word	0x08008e3c
 8008180:	08008dfc 	.word	0x08008dfc
 8008184:	08008ca4 	.word	0x08008ca4
 8008188:	08008cae 	.word	0x08008cae
 800818c:	08005d55 	.word	0x08005d55
 8008190:	08007f13 	.word	0x08007f13
 8008194:	08008caa 	.word	0x08008caa

08008198 <__swbuf_r>:
 8008198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819a:	460e      	mov	r6, r1
 800819c:	4614      	mov	r4, r2
 800819e:	4605      	mov	r5, r0
 80081a0:	b118      	cbz	r0, 80081aa <__swbuf_r+0x12>
 80081a2:	6983      	ldr	r3, [r0, #24]
 80081a4:	b90b      	cbnz	r3, 80081aa <__swbuf_r+0x12>
 80081a6:	f000 f9e7 	bl	8008578 <__sinit>
 80081aa:	4b21      	ldr	r3, [pc, #132]	; (8008230 <__swbuf_r+0x98>)
 80081ac:	429c      	cmp	r4, r3
 80081ae:	d12b      	bne.n	8008208 <__swbuf_r+0x70>
 80081b0:	686c      	ldr	r4, [r5, #4]
 80081b2:	69a3      	ldr	r3, [r4, #24]
 80081b4:	60a3      	str	r3, [r4, #8]
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	071a      	lsls	r2, r3, #28
 80081ba:	d52f      	bpl.n	800821c <__swbuf_r+0x84>
 80081bc:	6923      	ldr	r3, [r4, #16]
 80081be:	b36b      	cbz	r3, 800821c <__swbuf_r+0x84>
 80081c0:	6923      	ldr	r3, [r4, #16]
 80081c2:	6820      	ldr	r0, [r4, #0]
 80081c4:	b2f6      	uxtb	r6, r6
 80081c6:	1ac0      	subs	r0, r0, r3
 80081c8:	6963      	ldr	r3, [r4, #20]
 80081ca:	4637      	mov	r7, r6
 80081cc:	4283      	cmp	r3, r0
 80081ce:	dc04      	bgt.n	80081da <__swbuf_r+0x42>
 80081d0:	4621      	mov	r1, r4
 80081d2:	4628      	mov	r0, r5
 80081d4:	f000 f93c 	bl	8008450 <_fflush_r>
 80081d8:	bb30      	cbnz	r0, 8008228 <__swbuf_r+0x90>
 80081da:	68a3      	ldr	r3, [r4, #8]
 80081dc:	3001      	adds	r0, #1
 80081de:	3b01      	subs	r3, #1
 80081e0:	60a3      	str	r3, [r4, #8]
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	6022      	str	r2, [r4, #0]
 80081e8:	701e      	strb	r6, [r3, #0]
 80081ea:	6963      	ldr	r3, [r4, #20]
 80081ec:	4283      	cmp	r3, r0
 80081ee:	d004      	beq.n	80081fa <__swbuf_r+0x62>
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	07db      	lsls	r3, r3, #31
 80081f4:	d506      	bpl.n	8008204 <__swbuf_r+0x6c>
 80081f6:	2e0a      	cmp	r6, #10
 80081f8:	d104      	bne.n	8008204 <__swbuf_r+0x6c>
 80081fa:	4621      	mov	r1, r4
 80081fc:	4628      	mov	r0, r5
 80081fe:	f000 f927 	bl	8008450 <_fflush_r>
 8008202:	b988      	cbnz	r0, 8008228 <__swbuf_r+0x90>
 8008204:	4638      	mov	r0, r7
 8008206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008208:	4b0a      	ldr	r3, [pc, #40]	; (8008234 <__swbuf_r+0x9c>)
 800820a:	429c      	cmp	r4, r3
 800820c:	d101      	bne.n	8008212 <__swbuf_r+0x7a>
 800820e:	68ac      	ldr	r4, [r5, #8]
 8008210:	e7cf      	b.n	80081b2 <__swbuf_r+0x1a>
 8008212:	4b09      	ldr	r3, [pc, #36]	; (8008238 <__swbuf_r+0xa0>)
 8008214:	429c      	cmp	r4, r3
 8008216:	bf08      	it	eq
 8008218:	68ec      	ldreq	r4, [r5, #12]
 800821a:	e7ca      	b.n	80081b2 <__swbuf_r+0x1a>
 800821c:	4621      	mov	r1, r4
 800821e:	4628      	mov	r0, r5
 8008220:	f000 f81a 	bl	8008258 <__swsetup_r>
 8008224:	2800      	cmp	r0, #0
 8008226:	d0cb      	beq.n	80081c0 <__swbuf_r+0x28>
 8008228:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800822c:	e7ea      	b.n	8008204 <__swbuf_r+0x6c>
 800822e:	bf00      	nop
 8008230:	08008e1c 	.word	0x08008e1c
 8008234:	08008e3c 	.word	0x08008e3c
 8008238:	08008dfc 	.word	0x08008dfc

0800823c <__ascii_wctomb>:
 800823c:	4603      	mov	r3, r0
 800823e:	4608      	mov	r0, r1
 8008240:	b141      	cbz	r1, 8008254 <__ascii_wctomb+0x18>
 8008242:	2aff      	cmp	r2, #255	; 0xff
 8008244:	d904      	bls.n	8008250 <__ascii_wctomb+0x14>
 8008246:	228a      	movs	r2, #138	; 0x8a
 8008248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	4770      	bx	lr
 8008250:	2001      	movs	r0, #1
 8008252:	700a      	strb	r2, [r1, #0]
 8008254:	4770      	bx	lr
	...

08008258 <__swsetup_r>:
 8008258:	4b32      	ldr	r3, [pc, #200]	; (8008324 <__swsetup_r+0xcc>)
 800825a:	b570      	push	{r4, r5, r6, lr}
 800825c:	681d      	ldr	r5, [r3, #0]
 800825e:	4606      	mov	r6, r0
 8008260:	460c      	mov	r4, r1
 8008262:	b125      	cbz	r5, 800826e <__swsetup_r+0x16>
 8008264:	69ab      	ldr	r3, [r5, #24]
 8008266:	b913      	cbnz	r3, 800826e <__swsetup_r+0x16>
 8008268:	4628      	mov	r0, r5
 800826a:	f000 f985 	bl	8008578 <__sinit>
 800826e:	4b2e      	ldr	r3, [pc, #184]	; (8008328 <__swsetup_r+0xd0>)
 8008270:	429c      	cmp	r4, r3
 8008272:	d10f      	bne.n	8008294 <__swsetup_r+0x3c>
 8008274:	686c      	ldr	r4, [r5, #4]
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800827c:	0719      	lsls	r1, r3, #28
 800827e:	d42c      	bmi.n	80082da <__swsetup_r+0x82>
 8008280:	06dd      	lsls	r5, r3, #27
 8008282:	d411      	bmi.n	80082a8 <__swsetup_r+0x50>
 8008284:	2309      	movs	r3, #9
 8008286:	6033      	str	r3, [r6, #0]
 8008288:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800828c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008290:	81a3      	strh	r3, [r4, #12]
 8008292:	e03e      	b.n	8008312 <__swsetup_r+0xba>
 8008294:	4b25      	ldr	r3, [pc, #148]	; (800832c <__swsetup_r+0xd4>)
 8008296:	429c      	cmp	r4, r3
 8008298:	d101      	bne.n	800829e <__swsetup_r+0x46>
 800829a:	68ac      	ldr	r4, [r5, #8]
 800829c:	e7eb      	b.n	8008276 <__swsetup_r+0x1e>
 800829e:	4b24      	ldr	r3, [pc, #144]	; (8008330 <__swsetup_r+0xd8>)
 80082a0:	429c      	cmp	r4, r3
 80082a2:	bf08      	it	eq
 80082a4:	68ec      	ldreq	r4, [r5, #12]
 80082a6:	e7e6      	b.n	8008276 <__swsetup_r+0x1e>
 80082a8:	0758      	lsls	r0, r3, #29
 80082aa:	d512      	bpl.n	80082d2 <__swsetup_r+0x7a>
 80082ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082ae:	b141      	cbz	r1, 80082c2 <__swsetup_r+0x6a>
 80082b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082b4:	4299      	cmp	r1, r3
 80082b6:	d002      	beq.n	80082be <__swsetup_r+0x66>
 80082b8:	4630      	mov	r0, r6
 80082ba:	f7ff fb75 	bl	80079a8 <_free_r>
 80082be:	2300      	movs	r3, #0
 80082c0:	6363      	str	r3, [r4, #52]	; 0x34
 80082c2:	89a3      	ldrh	r3, [r4, #12]
 80082c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082c8:	81a3      	strh	r3, [r4, #12]
 80082ca:	2300      	movs	r3, #0
 80082cc:	6063      	str	r3, [r4, #4]
 80082ce:	6923      	ldr	r3, [r4, #16]
 80082d0:	6023      	str	r3, [r4, #0]
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	f043 0308 	orr.w	r3, r3, #8
 80082d8:	81a3      	strh	r3, [r4, #12]
 80082da:	6923      	ldr	r3, [r4, #16]
 80082dc:	b94b      	cbnz	r3, 80082f2 <__swsetup_r+0x9a>
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082e8:	d003      	beq.n	80082f2 <__swsetup_r+0x9a>
 80082ea:	4621      	mov	r1, r4
 80082ec:	4630      	mov	r0, r6
 80082ee:	f000 fa07 	bl	8008700 <__smakebuf_r>
 80082f2:	89a0      	ldrh	r0, [r4, #12]
 80082f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082f8:	f010 0301 	ands.w	r3, r0, #1
 80082fc:	d00a      	beq.n	8008314 <__swsetup_r+0xbc>
 80082fe:	2300      	movs	r3, #0
 8008300:	60a3      	str	r3, [r4, #8]
 8008302:	6963      	ldr	r3, [r4, #20]
 8008304:	425b      	negs	r3, r3
 8008306:	61a3      	str	r3, [r4, #24]
 8008308:	6923      	ldr	r3, [r4, #16]
 800830a:	b943      	cbnz	r3, 800831e <__swsetup_r+0xc6>
 800830c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008310:	d1ba      	bne.n	8008288 <__swsetup_r+0x30>
 8008312:	bd70      	pop	{r4, r5, r6, pc}
 8008314:	0781      	lsls	r1, r0, #30
 8008316:	bf58      	it	pl
 8008318:	6963      	ldrpl	r3, [r4, #20]
 800831a:	60a3      	str	r3, [r4, #8]
 800831c:	e7f4      	b.n	8008308 <__swsetup_r+0xb0>
 800831e:	2000      	movs	r0, #0
 8008320:	e7f7      	b.n	8008312 <__swsetup_r+0xba>
 8008322:	bf00      	nop
 8008324:	2000010c 	.word	0x2000010c
 8008328:	08008e1c 	.word	0x08008e1c
 800832c:	08008e3c 	.word	0x08008e3c
 8008330:	08008dfc 	.word	0x08008dfc

08008334 <abort>:
 8008334:	2006      	movs	r0, #6
 8008336:	b508      	push	{r3, lr}
 8008338:	f000 fa52 	bl	80087e0 <raise>
 800833c:	2001      	movs	r0, #1
 800833e:	f7fa fb7c 	bl	8002a3a <_exit>
	...

08008344 <__sflush_r>:
 8008344:	898a      	ldrh	r2, [r1, #12]
 8008346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800834a:	4605      	mov	r5, r0
 800834c:	0710      	lsls	r0, r2, #28
 800834e:	460c      	mov	r4, r1
 8008350:	d458      	bmi.n	8008404 <__sflush_r+0xc0>
 8008352:	684b      	ldr	r3, [r1, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	dc05      	bgt.n	8008364 <__sflush_r+0x20>
 8008358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800835a:	2b00      	cmp	r3, #0
 800835c:	dc02      	bgt.n	8008364 <__sflush_r+0x20>
 800835e:	2000      	movs	r0, #0
 8008360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008366:	2e00      	cmp	r6, #0
 8008368:	d0f9      	beq.n	800835e <__sflush_r+0x1a>
 800836a:	2300      	movs	r3, #0
 800836c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008370:	682f      	ldr	r7, [r5, #0]
 8008372:	602b      	str	r3, [r5, #0]
 8008374:	d032      	beq.n	80083dc <__sflush_r+0x98>
 8008376:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	075a      	lsls	r2, r3, #29
 800837c:	d505      	bpl.n	800838a <__sflush_r+0x46>
 800837e:	6863      	ldr	r3, [r4, #4]
 8008380:	1ac0      	subs	r0, r0, r3
 8008382:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008384:	b10b      	cbz	r3, 800838a <__sflush_r+0x46>
 8008386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008388:	1ac0      	subs	r0, r0, r3
 800838a:	2300      	movs	r3, #0
 800838c:	4602      	mov	r2, r0
 800838e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008390:	4628      	mov	r0, r5
 8008392:	6a21      	ldr	r1, [r4, #32]
 8008394:	47b0      	blx	r6
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	d106      	bne.n	80083aa <__sflush_r+0x66>
 800839c:	6829      	ldr	r1, [r5, #0]
 800839e:	291d      	cmp	r1, #29
 80083a0:	d82c      	bhi.n	80083fc <__sflush_r+0xb8>
 80083a2:	4a2a      	ldr	r2, [pc, #168]	; (800844c <__sflush_r+0x108>)
 80083a4:	40ca      	lsrs	r2, r1
 80083a6:	07d6      	lsls	r6, r2, #31
 80083a8:	d528      	bpl.n	80083fc <__sflush_r+0xb8>
 80083aa:	2200      	movs	r2, #0
 80083ac:	6062      	str	r2, [r4, #4]
 80083ae:	6922      	ldr	r2, [r4, #16]
 80083b0:	04d9      	lsls	r1, r3, #19
 80083b2:	6022      	str	r2, [r4, #0]
 80083b4:	d504      	bpl.n	80083c0 <__sflush_r+0x7c>
 80083b6:	1c42      	adds	r2, r0, #1
 80083b8:	d101      	bne.n	80083be <__sflush_r+0x7a>
 80083ba:	682b      	ldr	r3, [r5, #0]
 80083bc:	b903      	cbnz	r3, 80083c0 <__sflush_r+0x7c>
 80083be:	6560      	str	r0, [r4, #84]	; 0x54
 80083c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083c2:	602f      	str	r7, [r5, #0]
 80083c4:	2900      	cmp	r1, #0
 80083c6:	d0ca      	beq.n	800835e <__sflush_r+0x1a>
 80083c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083cc:	4299      	cmp	r1, r3
 80083ce:	d002      	beq.n	80083d6 <__sflush_r+0x92>
 80083d0:	4628      	mov	r0, r5
 80083d2:	f7ff fae9 	bl	80079a8 <_free_r>
 80083d6:	2000      	movs	r0, #0
 80083d8:	6360      	str	r0, [r4, #52]	; 0x34
 80083da:	e7c1      	b.n	8008360 <__sflush_r+0x1c>
 80083dc:	6a21      	ldr	r1, [r4, #32]
 80083de:	2301      	movs	r3, #1
 80083e0:	4628      	mov	r0, r5
 80083e2:	47b0      	blx	r6
 80083e4:	1c41      	adds	r1, r0, #1
 80083e6:	d1c7      	bne.n	8008378 <__sflush_r+0x34>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0c4      	beq.n	8008378 <__sflush_r+0x34>
 80083ee:	2b1d      	cmp	r3, #29
 80083f0:	d001      	beq.n	80083f6 <__sflush_r+0xb2>
 80083f2:	2b16      	cmp	r3, #22
 80083f4:	d101      	bne.n	80083fa <__sflush_r+0xb6>
 80083f6:	602f      	str	r7, [r5, #0]
 80083f8:	e7b1      	b.n	800835e <__sflush_r+0x1a>
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008400:	81a3      	strh	r3, [r4, #12]
 8008402:	e7ad      	b.n	8008360 <__sflush_r+0x1c>
 8008404:	690f      	ldr	r7, [r1, #16]
 8008406:	2f00      	cmp	r7, #0
 8008408:	d0a9      	beq.n	800835e <__sflush_r+0x1a>
 800840a:	0793      	lsls	r3, r2, #30
 800840c:	bf18      	it	ne
 800840e:	2300      	movne	r3, #0
 8008410:	680e      	ldr	r6, [r1, #0]
 8008412:	bf08      	it	eq
 8008414:	694b      	ldreq	r3, [r1, #20]
 8008416:	eba6 0807 	sub.w	r8, r6, r7
 800841a:	600f      	str	r7, [r1, #0]
 800841c:	608b      	str	r3, [r1, #8]
 800841e:	f1b8 0f00 	cmp.w	r8, #0
 8008422:	dd9c      	ble.n	800835e <__sflush_r+0x1a>
 8008424:	4643      	mov	r3, r8
 8008426:	463a      	mov	r2, r7
 8008428:	4628      	mov	r0, r5
 800842a:	6a21      	ldr	r1, [r4, #32]
 800842c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800842e:	47b0      	blx	r6
 8008430:	2800      	cmp	r0, #0
 8008432:	dc06      	bgt.n	8008442 <__sflush_r+0xfe>
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800843a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800843e:	81a3      	strh	r3, [r4, #12]
 8008440:	e78e      	b.n	8008360 <__sflush_r+0x1c>
 8008442:	4407      	add	r7, r0
 8008444:	eba8 0800 	sub.w	r8, r8, r0
 8008448:	e7e9      	b.n	800841e <__sflush_r+0xda>
 800844a:	bf00      	nop
 800844c:	20400001 	.word	0x20400001

08008450 <_fflush_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	690b      	ldr	r3, [r1, #16]
 8008454:	4605      	mov	r5, r0
 8008456:	460c      	mov	r4, r1
 8008458:	b913      	cbnz	r3, 8008460 <_fflush_r+0x10>
 800845a:	2500      	movs	r5, #0
 800845c:	4628      	mov	r0, r5
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	b118      	cbz	r0, 800846a <_fflush_r+0x1a>
 8008462:	6983      	ldr	r3, [r0, #24]
 8008464:	b90b      	cbnz	r3, 800846a <_fflush_r+0x1a>
 8008466:	f000 f887 	bl	8008578 <__sinit>
 800846a:	4b14      	ldr	r3, [pc, #80]	; (80084bc <_fflush_r+0x6c>)
 800846c:	429c      	cmp	r4, r3
 800846e:	d11b      	bne.n	80084a8 <_fflush_r+0x58>
 8008470:	686c      	ldr	r4, [r5, #4]
 8008472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0ef      	beq.n	800845a <_fflush_r+0xa>
 800847a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800847c:	07d0      	lsls	r0, r2, #31
 800847e:	d404      	bmi.n	800848a <_fflush_r+0x3a>
 8008480:	0599      	lsls	r1, r3, #22
 8008482:	d402      	bmi.n	800848a <_fflush_r+0x3a>
 8008484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008486:	f000 f915 	bl	80086b4 <__retarget_lock_acquire_recursive>
 800848a:	4628      	mov	r0, r5
 800848c:	4621      	mov	r1, r4
 800848e:	f7ff ff59 	bl	8008344 <__sflush_r>
 8008492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008494:	4605      	mov	r5, r0
 8008496:	07da      	lsls	r2, r3, #31
 8008498:	d4e0      	bmi.n	800845c <_fflush_r+0xc>
 800849a:	89a3      	ldrh	r3, [r4, #12]
 800849c:	059b      	lsls	r3, r3, #22
 800849e:	d4dd      	bmi.n	800845c <_fflush_r+0xc>
 80084a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084a2:	f000 f908 	bl	80086b6 <__retarget_lock_release_recursive>
 80084a6:	e7d9      	b.n	800845c <_fflush_r+0xc>
 80084a8:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <_fflush_r+0x70>)
 80084aa:	429c      	cmp	r4, r3
 80084ac:	d101      	bne.n	80084b2 <_fflush_r+0x62>
 80084ae:	68ac      	ldr	r4, [r5, #8]
 80084b0:	e7df      	b.n	8008472 <_fflush_r+0x22>
 80084b2:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <_fflush_r+0x74>)
 80084b4:	429c      	cmp	r4, r3
 80084b6:	bf08      	it	eq
 80084b8:	68ec      	ldreq	r4, [r5, #12]
 80084ba:	e7da      	b.n	8008472 <_fflush_r+0x22>
 80084bc:	08008e1c 	.word	0x08008e1c
 80084c0:	08008e3c 	.word	0x08008e3c
 80084c4:	08008dfc 	.word	0x08008dfc

080084c8 <std>:
 80084c8:	2300      	movs	r3, #0
 80084ca:	b510      	push	{r4, lr}
 80084cc:	4604      	mov	r4, r0
 80084ce:	e9c0 3300 	strd	r3, r3, [r0]
 80084d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084d6:	6083      	str	r3, [r0, #8]
 80084d8:	8181      	strh	r1, [r0, #12]
 80084da:	6643      	str	r3, [r0, #100]	; 0x64
 80084dc:	81c2      	strh	r2, [r0, #14]
 80084de:	6183      	str	r3, [r0, #24]
 80084e0:	4619      	mov	r1, r3
 80084e2:	2208      	movs	r2, #8
 80084e4:	305c      	adds	r0, #92	; 0x5c
 80084e6:	f7fd fb8f 	bl	8005c08 <memset>
 80084ea:	4b05      	ldr	r3, [pc, #20]	; (8008500 <std+0x38>)
 80084ec:	6224      	str	r4, [r4, #32]
 80084ee:	6263      	str	r3, [r4, #36]	; 0x24
 80084f0:	4b04      	ldr	r3, [pc, #16]	; (8008504 <std+0x3c>)
 80084f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80084f4:	4b04      	ldr	r3, [pc, #16]	; (8008508 <std+0x40>)
 80084f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084f8:	4b04      	ldr	r3, [pc, #16]	; (800850c <std+0x44>)
 80084fa:	6323      	str	r3, [r4, #48]	; 0x30
 80084fc:	bd10      	pop	{r4, pc}
 80084fe:	bf00      	nop
 8008500:	08008819 	.word	0x08008819
 8008504:	0800883b 	.word	0x0800883b
 8008508:	08008873 	.word	0x08008873
 800850c:	08008897 	.word	0x08008897

08008510 <_cleanup_r>:
 8008510:	4901      	ldr	r1, [pc, #4]	; (8008518 <_cleanup_r+0x8>)
 8008512:	f000 b8af 	b.w	8008674 <_fwalk_reent>
 8008516:	bf00      	nop
 8008518:	08008451 	.word	0x08008451

0800851c <__sfmoreglue>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	2568      	movs	r5, #104	; 0x68
 8008520:	1e4a      	subs	r2, r1, #1
 8008522:	4355      	muls	r5, r2
 8008524:	460e      	mov	r6, r1
 8008526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800852a:	f7ff fa89 	bl	8007a40 <_malloc_r>
 800852e:	4604      	mov	r4, r0
 8008530:	b140      	cbz	r0, 8008544 <__sfmoreglue+0x28>
 8008532:	2100      	movs	r1, #0
 8008534:	e9c0 1600 	strd	r1, r6, [r0]
 8008538:	300c      	adds	r0, #12
 800853a:	60a0      	str	r0, [r4, #8]
 800853c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008540:	f7fd fb62 	bl	8005c08 <memset>
 8008544:	4620      	mov	r0, r4
 8008546:	bd70      	pop	{r4, r5, r6, pc}

08008548 <__sfp_lock_acquire>:
 8008548:	4801      	ldr	r0, [pc, #4]	; (8008550 <__sfp_lock_acquire+0x8>)
 800854a:	f000 b8b3 	b.w	80086b4 <__retarget_lock_acquire_recursive>
 800854e:	bf00      	nop
 8008550:	20000518 	.word	0x20000518

08008554 <__sfp_lock_release>:
 8008554:	4801      	ldr	r0, [pc, #4]	; (800855c <__sfp_lock_release+0x8>)
 8008556:	f000 b8ae 	b.w	80086b6 <__retarget_lock_release_recursive>
 800855a:	bf00      	nop
 800855c:	20000518 	.word	0x20000518

08008560 <__sinit_lock_acquire>:
 8008560:	4801      	ldr	r0, [pc, #4]	; (8008568 <__sinit_lock_acquire+0x8>)
 8008562:	f000 b8a7 	b.w	80086b4 <__retarget_lock_acquire_recursive>
 8008566:	bf00      	nop
 8008568:	20000513 	.word	0x20000513

0800856c <__sinit_lock_release>:
 800856c:	4801      	ldr	r0, [pc, #4]	; (8008574 <__sinit_lock_release+0x8>)
 800856e:	f000 b8a2 	b.w	80086b6 <__retarget_lock_release_recursive>
 8008572:	bf00      	nop
 8008574:	20000513 	.word	0x20000513

08008578 <__sinit>:
 8008578:	b510      	push	{r4, lr}
 800857a:	4604      	mov	r4, r0
 800857c:	f7ff fff0 	bl	8008560 <__sinit_lock_acquire>
 8008580:	69a3      	ldr	r3, [r4, #24]
 8008582:	b11b      	cbz	r3, 800858c <__sinit+0x14>
 8008584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008588:	f7ff bff0 	b.w	800856c <__sinit_lock_release>
 800858c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008590:	6523      	str	r3, [r4, #80]	; 0x50
 8008592:	4b13      	ldr	r3, [pc, #76]	; (80085e0 <__sinit+0x68>)
 8008594:	4a13      	ldr	r2, [pc, #76]	; (80085e4 <__sinit+0x6c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	62a2      	str	r2, [r4, #40]	; 0x28
 800859a:	42a3      	cmp	r3, r4
 800859c:	bf08      	it	eq
 800859e:	2301      	moveq	r3, #1
 80085a0:	4620      	mov	r0, r4
 80085a2:	bf08      	it	eq
 80085a4:	61a3      	streq	r3, [r4, #24]
 80085a6:	f000 f81f 	bl	80085e8 <__sfp>
 80085aa:	6060      	str	r0, [r4, #4]
 80085ac:	4620      	mov	r0, r4
 80085ae:	f000 f81b 	bl	80085e8 <__sfp>
 80085b2:	60a0      	str	r0, [r4, #8]
 80085b4:	4620      	mov	r0, r4
 80085b6:	f000 f817 	bl	80085e8 <__sfp>
 80085ba:	2200      	movs	r2, #0
 80085bc:	2104      	movs	r1, #4
 80085be:	60e0      	str	r0, [r4, #12]
 80085c0:	6860      	ldr	r0, [r4, #4]
 80085c2:	f7ff ff81 	bl	80084c8 <std>
 80085c6:	2201      	movs	r2, #1
 80085c8:	2109      	movs	r1, #9
 80085ca:	68a0      	ldr	r0, [r4, #8]
 80085cc:	f7ff ff7c 	bl	80084c8 <std>
 80085d0:	2202      	movs	r2, #2
 80085d2:	2112      	movs	r1, #18
 80085d4:	68e0      	ldr	r0, [r4, #12]
 80085d6:	f7ff ff77 	bl	80084c8 <std>
 80085da:	2301      	movs	r3, #1
 80085dc:	61a3      	str	r3, [r4, #24]
 80085de:	e7d1      	b.n	8008584 <__sinit+0xc>
 80085e0:	08008a78 	.word	0x08008a78
 80085e4:	08008511 	.word	0x08008511

080085e8 <__sfp>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	4607      	mov	r7, r0
 80085ec:	f7ff ffac 	bl	8008548 <__sfp_lock_acquire>
 80085f0:	4b1e      	ldr	r3, [pc, #120]	; (800866c <__sfp+0x84>)
 80085f2:	681e      	ldr	r6, [r3, #0]
 80085f4:	69b3      	ldr	r3, [r6, #24]
 80085f6:	b913      	cbnz	r3, 80085fe <__sfp+0x16>
 80085f8:	4630      	mov	r0, r6
 80085fa:	f7ff ffbd 	bl	8008578 <__sinit>
 80085fe:	3648      	adds	r6, #72	; 0x48
 8008600:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008604:	3b01      	subs	r3, #1
 8008606:	d503      	bpl.n	8008610 <__sfp+0x28>
 8008608:	6833      	ldr	r3, [r6, #0]
 800860a:	b30b      	cbz	r3, 8008650 <__sfp+0x68>
 800860c:	6836      	ldr	r6, [r6, #0]
 800860e:	e7f7      	b.n	8008600 <__sfp+0x18>
 8008610:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008614:	b9d5      	cbnz	r5, 800864c <__sfp+0x64>
 8008616:	4b16      	ldr	r3, [pc, #88]	; (8008670 <__sfp+0x88>)
 8008618:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800861c:	60e3      	str	r3, [r4, #12]
 800861e:	6665      	str	r5, [r4, #100]	; 0x64
 8008620:	f000 f847 	bl	80086b2 <__retarget_lock_init_recursive>
 8008624:	f7ff ff96 	bl	8008554 <__sfp_lock_release>
 8008628:	2208      	movs	r2, #8
 800862a:	4629      	mov	r1, r5
 800862c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008630:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008634:	6025      	str	r5, [r4, #0]
 8008636:	61a5      	str	r5, [r4, #24]
 8008638:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800863c:	f7fd fae4 	bl	8005c08 <memset>
 8008640:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008644:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008648:	4620      	mov	r0, r4
 800864a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800864c:	3468      	adds	r4, #104	; 0x68
 800864e:	e7d9      	b.n	8008604 <__sfp+0x1c>
 8008650:	2104      	movs	r1, #4
 8008652:	4638      	mov	r0, r7
 8008654:	f7ff ff62 	bl	800851c <__sfmoreglue>
 8008658:	4604      	mov	r4, r0
 800865a:	6030      	str	r0, [r6, #0]
 800865c:	2800      	cmp	r0, #0
 800865e:	d1d5      	bne.n	800860c <__sfp+0x24>
 8008660:	f7ff ff78 	bl	8008554 <__sfp_lock_release>
 8008664:	230c      	movs	r3, #12
 8008666:	603b      	str	r3, [r7, #0]
 8008668:	e7ee      	b.n	8008648 <__sfp+0x60>
 800866a:	bf00      	nop
 800866c:	08008a78 	.word	0x08008a78
 8008670:	ffff0001 	.word	0xffff0001

08008674 <_fwalk_reent>:
 8008674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008678:	4606      	mov	r6, r0
 800867a:	4688      	mov	r8, r1
 800867c:	2700      	movs	r7, #0
 800867e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008682:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008686:	f1b9 0901 	subs.w	r9, r9, #1
 800868a:	d505      	bpl.n	8008698 <_fwalk_reent+0x24>
 800868c:	6824      	ldr	r4, [r4, #0]
 800868e:	2c00      	cmp	r4, #0
 8008690:	d1f7      	bne.n	8008682 <_fwalk_reent+0xe>
 8008692:	4638      	mov	r0, r7
 8008694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008698:	89ab      	ldrh	r3, [r5, #12]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d907      	bls.n	80086ae <_fwalk_reent+0x3a>
 800869e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086a2:	3301      	adds	r3, #1
 80086a4:	d003      	beq.n	80086ae <_fwalk_reent+0x3a>
 80086a6:	4629      	mov	r1, r5
 80086a8:	4630      	mov	r0, r6
 80086aa:	47c0      	blx	r8
 80086ac:	4307      	orrs	r7, r0
 80086ae:	3568      	adds	r5, #104	; 0x68
 80086b0:	e7e9      	b.n	8008686 <_fwalk_reent+0x12>

080086b2 <__retarget_lock_init_recursive>:
 80086b2:	4770      	bx	lr

080086b4 <__retarget_lock_acquire_recursive>:
 80086b4:	4770      	bx	lr

080086b6 <__retarget_lock_release_recursive>:
 80086b6:	4770      	bx	lr

080086b8 <__swhatbuf_r>:
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	460e      	mov	r6, r1
 80086bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c0:	4614      	mov	r4, r2
 80086c2:	2900      	cmp	r1, #0
 80086c4:	461d      	mov	r5, r3
 80086c6:	b096      	sub	sp, #88	; 0x58
 80086c8:	da07      	bge.n	80086da <__swhatbuf_r+0x22>
 80086ca:	2300      	movs	r3, #0
 80086cc:	602b      	str	r3, [r5, #0]
 80086ce:	89b3      	ldrh	r3, [r6, #12]
 80086d0:	061a      	lsls	r2, r3, #24
 80086d2:	d410      	bmi.n	80086f6 <__swhatbuf_r+0x3e>
 80086d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086d8:	e00e      	b.n	80086f8 <__swhatbuf_r+0x40>
 80086da:	466a      	mov	r2, sp
 80086dc:	f000 f902 	bl	80088e4 <_fstat_r>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	dbf2      	blt.n	80086ca <__swhatbuf_r+0x12>
 80086e4:	9a01      	ldr	r2, [sp, #4]
 80086e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086ee:	425a      	negs	r2, r3
 80086f0:	415a      	adcs	r2, r3
 80086f2:	602a      	str	r2, [r5, #0]
 80086f4:	e7ee      	b.n	80086d4 <__swhatbuf_r+0x1c>
 80086f6:	2340      	movs	r3, #64	; 0x40
 80086f8:	2000      	movs	r0, #0
 80086fa:	6023      	str	r3, [r4, #0]
 80086fc:	b016      	add	sp, #88	; 0x58
 80086fe:	bd70      	pop	{r4, r5, r6, pc}

08008700 <__smakebuf_r>:
 8008700:	898b      	ldrh	r3, [r1, #12]
 8008702:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008704:	079d      	lsls	r5, r3, #30
 8008706:	4606      	mov	r6, r0
 8008708:	460c      	mov	r4, r1
 800870a:	d507      	bpl.n	800871c <__smakebuf_r+0x1c>
 800870c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	6123      	str	r3, [r4, #16]
 8008714:	2301      	movs	r3, #1
 8008716:	6163      	str	r3, [r4, #20]
 8008718:	b002      	add	sp, #8
 800871a:	bd70      	pop	{r4, r5, r6, pc}
 800871c:	466a      	mov	r2, sp
 800871e:	ab01      	add	r3, sp, #4
 8008720:	f7ff ffca 	bl	80086b8 <__swhatbuf_r>
 8008724:	9900      	ldr	r1, [sp, #0]
 8008726:	4605      	mov	r5, r0
 8008728:	4630      	mov	r0, r6
 800872a:	f7ff f989 	bl	8007a40 <_malloc_r>
 800872e:	b948      	cbnz	r0, 8008744 <__smakebuf_r+0x44>
 8008730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008734:	059a      	lsls	r2, r3, #22
 8008736:	d4ef      	bmi.n	8008718 <__smakebuf_r+0x18>
 8008738:	f023 0303 	bic.w	r3, r3, #3
 800873c:	f043 0302 	orr.w	r3, r3, #2
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	e7e3      	b.n	800870c <__smakebuf_r+0xc>
 8008744:	4b0d      	ldr	r3, [pc, #52]	; (800877c <__smakebuf_r+0x7c>)
 8008746:	62b3      	str	r3, [r6, #40]	; 0x28
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	6020      	str	r0, [r4, #0]
 800874c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008750:	81a3      	strh	r3, [r4, #12]
 8008752:	9b00      	ldr	r3, [sp, #0]
 8008754:	6120      	str	r0, [r4, #16]
 8008756:	6163      	str	r3, [r4, #20]
 8008758:	9b01      	ldr	r3, [sp, #4]
 800875a:	b15b      	cbz	r3, 8008774 <__smakebuf_r+0x74>
 800875c:	4630      	mov	r0, r6
 800875e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008762:	f000 f8d1 	bl	8008908 <_isatty_r>
 8008766:	b128      	cbz	r0, 8008774 <__smakebuf_r+0x74>
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	f023 0303 	bic.w	r3, r3, #3
 800876e:	f043 0301 	orr.w	r3, r3, #1
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	89a0      	ldrh	r0, [r4, #12]
 8008776:	4305      	orrs	r5, r0
 8008778:	81a5      	strh	r5, [r4, #12]
 800877a:	e7cd      	b.n	8008718 <__smakebuf_r+0x18>
 800877c:	08008511 	.word	0x08008511

08008780 <_malloc_usable_size_r>:
 8008780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008784:	1f18      	subs	r0, r3, #4
 8008786:	2b00      	cmp	r3, #0
 8008788:	bfbc      	itt	lt
 800878a:	580b      	ldrlt	r3, [r1, r0]
 800878c:	18c0      	addlt	r0, r0, r3
 800878e:	4770      	bx	lr

08008790 <_raise_r>:
 8008790:	291f      	cmp	r1, #31
 8008792:	b538      	push	{r3, r4, r5, lr}
 8008794:	4604      	mov	r4, r0
 8008796:	460d      	mov	r5, r1
 8008798:	d904      	bls.n	80087a4 <_raise_r+0x14>
 800879a:	2316      	movs	r3, #22
 800879c:	6003      	str	r3, [r0, #0]
 800879e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087a6:	b112      	cbz	r2, 80087ae <_raise_r+0x1e>
 80087a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087ac:	b94b      	cbnz	r3, 80087c2 <_raise_r+0x32>
 80087ae:	4620      	mov	r0, r4
 80087b0:	f000 f830 	bl	8008814 <_getpid_r>
 80087b4:	462a      	mov	r2, r5
 80087b6:	4601      	mov	r1, r0
 80087b8:	4620      	mov	r0, r4
 80087ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087be:	f000 b817 	b.w	80087f0 <_kill_r>
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d00a      	beq.n	80087dc <_raise_r+0x4c>
 80087c6:	1c59      	adds	r1, r3, #1
 80087c8:	d103      	bne.n	80087d2 <_raise_r+0x42>
 80087ca:	2316      	movs	r3, #22
 80087cc:	6003      	str	r3, [r0, #0]
 80087ce:	2001      	movs	r0, #1
 80087d0:	e7e7      	b.n	80087a2 <_raise_r+0x12>
 80087d2:	2400      	movs	r4, #0
 80087d4:	4628      	mov	r0, r5
 80087d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087da:	4798      	blx	r3
 80087dc:	2000      	movs	r0, #0
 80087de:	e7e0      	b.n	80087a2 <_raise_r+0x12>

080087e0 <raise>:
 80087e0:	4b02      	ldr	r3, [pc, #8]	; (80087ec <raise+0xc>)
 80087e2:	4601      	mov	r1, r0
 80087e4:	6818      	ldr	r0, [r3, #0]
 80087e6:	f7ff bfd3 	b.w	8008790 <_raise_r>
 80087ea:	bf00      	nop
 80087ec:	2000010c 	.word	0x2000010c

080087f0 <_kill_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	2300      	movs	r3, #0
 80087f4:	4d06      	ldr	r5, [pc, #24]	; (8008810 <_kill_r+0x20>)
 80087f6:	4604      	mov	r4, r0
 80087f8:	4608      	mov	r0, r1
 80087fa:	4611      	mov	r1, r2
 80087fc:	602b      	str	r3, [r5, #0]
 80087fe:	f7fa f90c 	bl	8002a1a <_kill>
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	d102      	bne.n	800880c <_kill_r+0x1c>
 8008806:	682b      	ldr	r3, [r5, #0]
 8008808:	b103      	cbz	r3, 800880c <_kill_r+0x1c>
 800880a:	6023      	str	r3, [r4, #0]
 800880c:	bd38      	pop	{r3, r4, r5, pc}
 800880e:	bf00      	nop
 8008810:	2000050c 	.word	0x2000050c

08008814 <_getpid_r>:
 8008814:	f7fa b8fa 	b.w	8002a0c <_getpid>

08008818 <__sread>:
 8008818:	b510      	push	{r4, lr}
 800881a:	460c      	mov	r4, r1
 800881c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008820:	f000 f894 	bl	800894c <_read_r>
 8008824:	2800      	cmp	r0, #0
 8008826:	bfab      	itete	ge
 8008828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800882a:	89a3      	ldrhlt	r3, [r4, #12]
 800882c:	181b      	addge	r3, r3, r0
 800882e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008832:	bfac      	ite	ge
 8008834:	6563      	strge	r3, [r4, #84]	; 0x54
 8008836:	81a3      	strhlt	r3, [r4, #12]
 8008838:	bd10      	pop	{r4, pc}

0800883a <__swrite>:
 800883a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800883e:	461f      	mov	r7, r3
 8008840:	898b      	ldrh	r3, [r1, #12]
 8008842:	4605      	mov	r5, r0
 8008844:	05db      	lsls	r3, r3, #23
 8008846:	460c      	mov	r4, r1
 8008848:	4616      	mov	r6, r2
 800884a:	d505      	bpl.n	8008858 <__swrite+0x1e>
 800884c:	2302      	movs	r3, #2
 800884e:	2200      	movs	r2, #0
 8008850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008854:	f000 f868 	bl	8008928 <_lseek_r>
 8008858:	89a3      	ldrh	r3, [r4, #12]
 800885a:	4632      	mov	r2, r6
 800885c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008860:	81a3      	strh	r3, [r4, #12]
 8008862:	4628      	mov	r0, r5
 8008864:	463b      	mov	r3, r7
 8008866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800886a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800886e:	f000 b817 	b.w	80088a0 <_write_r>

08008872 <__sseek>:
 8008872:	b510      	push	{r4, lr}
 8008874:	460c      	mov	r4, r1
 8008876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887a:	f000 f855 	bl	8008928 <_lseek_r>
 800887e:	1c43      	adds	r3, r0, #1
 8008880:	89a3      	ldrh	r3, [r4, #12]
 8008882:	bf15      	itete	ne
 8008884:	6560      	strne	r0, [r4, #84]	; 0x54
 8008886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800888a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800888e:	81a3      	strheq	r3, [r4, #12]
 8008890:	bf18      	it	ne
 8008892:	81a3      	strhne	r3, [r4, #12]
 8008894:	bd10      	pop	{r4, pc}

08008896 <__sclose>:
 8008896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889a:	f000 b813 	b.w	80088c4 <_close_r>
	...

080088a0 <_write_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4604      	mov	r4, r0
 80088a4:	4608      	mov	r0, r1
 80088a6:	4611      	mov	r1, r2
 80088a8:	2200      	movs	r2, #0
 80088aa:	4d05      	ldr	r5, [pc, #20]	; (80088c0 <_write_r+0x20>)
 80088ac:	602a      	str	r2, [r5, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	f7fa f8ea 	bl	8002a88 <_write>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d102      	bne.n	80088be <_write_r+0x1e>
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	b103      	cbz	r3, 80088be <_write_r+0x1e>
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	2000050c 	.word	0x2000050c

080088c4 <_close_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	2300      	movs	r3, #0
 80088c8:	4d05      	ldr	r5, [pc, #20]	; (80088e0 <_close_r+0x1c>)
 80088ca:	4604      	mov	r4, r0
 80088cc:	4608      	mov	r0, r1
 80088ce:	602b      	str	r3, [r5, #0]
 80088d0:	f7fa f8f6 	bl	8002ac0 <_close>
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	d102      	bne.n	80088de <_close_r+0x1a>
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	b103      	cbz	r3, 80088de <_close_r+0x1a>
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	2000050c 	.word	0x2000050c

080088e4 <_fstat_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	2300      	movs	r3, #0
 80088e8:	4d06      	ldr	r5, [pc, #24]	; (8008904 <_fstat_r+0x20>)
 80088ea:	4604      	mov	r4, r0
 80088ec:	4608      	mov	r0, r1
 80088ee:	4611      	mov	r1, r2
 80088f0:	602b      	str	r3, [r5, #0]
 80088f2:	f7fa f8f0 	bl	8002ad6 <_fstat>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	d102      	bne.n	8008900 <_fstat_r+0x1c>
 80088fa:	682b      	ldr	r3, [r5, #0]
 80088fc:	b103      	cbz	r3, 8008900 <_fstat_r+0x1c>
 80088fe:	6023      	str	r3, [r4, #0]
 8008900:	bd38      	pop	{r3, r4, r5, pc}
 8008902:	bf00      	nop
 8008904:	2000050c 	.word	0x2000050c

08008908 <_isatty_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	2300      	movs	r3, #0
 800890c:	4d05      	ldr	r5, [pc, #20]	; (8008924 <_isatty_r+0x1c>)
 800890e:	4604      	mov	r4, r0
 8008910:	4608      	mov	r0, r1
 8008912:	602b      	str	r3, [r5, #0]
 8008914:	f7fa f8ee 	bl	8002af4 <_isatty>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	d102      	bne.n	8008922 <_isatty_r+0x1a>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	b103      	cbz	r3, 8008922 <_isatty_r+0x1a>
 8008920:	6023      	str	r3, [r4, #0]
 8008922:	bd38      	pop	{r3, r4, r5, pc}
 8008924:	2000050c 	.word	0x2000050c

08008928 <_lseek_r>:
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	4604      	mov	r4, r0
 800892c:	4608      	mov	r0, r1
 800892e:	4611      	mov	r1, r2
 8008930:	2200      	movs	r2, #0
 8008932:	4d05      	ldr	r5, [pc, #20]	; (8008948 <_lseek_r+0x20>)
 8008934:	602a      	str	r2, [r5, #0]
 8008936:	461a      	mov	r2, r3
 8008938:	f7fa f8e6 	bl	8002b08 <_lseek>
 800893c:	1c43      	adds	r3, r0, #1
 800893e:	d102      	bne.n	8008946 <_lseek_r+0x1e>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	b103      	cbz	r3, 8008946 <_lseek_r+0x1e>
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	2000050c 	.word	0x2000050c

0800894c <_read_r>:
 800894c:	b538      	push	{r3, r4, r5, lr}
 800894e:	4604      	mov	r4, r0
 8008950:	4608      	mov	r0, r1
 8008952:	4611      	mov	r1, r2
 8008954:	2200      	movs	r2, #0
 8008956:	4d05      	ldr	r5, [pc, #20]	; (800896c <_read_r+0x20>)
 8008958:	602a      	str	r2, [r5, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	f7fa f877 	bl	8002a4e <_read>
 8008960:	1c43      	adds	r3, r0, #1
 8008962:	d102      	bne.n	800896a <_read_r+0x1e>
 8008964:	682b      	ldr	r3, [r5, #0]
 8008966:	b103      	cbz	r3, 800896a <_read_r+0x1e>
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	bd38      	pop	{r3, r4, r5, pc}
 800896c:	2000050c 	.word	0x2000050c

08008970 <_init>:
 8008970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008972:	bf00      	nop
 8008974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008976:	bc08      	pop	{r3}
 8008978:	469e      	mov	lr, r3
 800897a:	4770      	bx	lr

0800897c <_fini>:
 800897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897e:	bf00      	nop
 8008980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008982:	bc08      	pop	{r3}
 8008984:	469e      	mov	lr, r3
 8008986:	4770      	bx	lr
