
tank_level_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008760  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08008870  08008870  00018870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ce4  08008ce4  000202dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008ce4  08008ce4  000202dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ce4  08008ce4  000202dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008ce4  08008ce4  00018ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008cec  08008cec  00018cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  08008cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200002dc  08008fd0  000202dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08008fd0  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb18  00000000  00000000  00020305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002693  00000000  00000000  0002fe1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  000324b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  000333a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019011  00000000  00000000  000341b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e933  00000000  00000000  0004d1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092319  00000000  00000000  0005bafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ede15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e4  00000000  00000000  000ede68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002dc 	.word	0x200002dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08008858 	.word	0x08008858

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002e0 	.word	0x200002e0
 800014c:	08008858 	.word	0x08008858

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <_Z14FIRFilter_InitP9FIRFilter>:

#include "HeightSensor.h"


void FIRFilter_Init(FIRFilter *fir)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2b3e      	cmp	r3, #62	; 0x3e
 8001160:	d809      	bhi.n	8001176 <_Z14FIRFilter_InitP9FIRFilter+0x26>
    fir->buf[n] = 0.0f;
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0100 	mov.w	r1, #0
 800116a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	3301      	adds	r3, #1
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	e7f2      	b.n	800115c <_Z14FIRFilter_InitP9FIRFilter+0xc>
  fir->bufIndex = 0;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  fir->out = 0.0f;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
	...

08001194 <_Z16FIRFilter_UpdateP9FIRFilterf>:


float FIRFilter_Update(FIRFilter *fir, float inp)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  fir->buf[fir->bufIndex] = inp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80011a4:	4619      	mov	r1, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

  fir->bufIndex++;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80011b4:	3301      	adds	r3, #1
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  if(fir->bufIndex == FILTER_NUM_COEFFS)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80011c4:	2b3f      	cmp	r3, #63	; 0x3f
 80011c6:	d103      	bne.n	80011d0 <_Z16FIRFilter_UpdateP9FIRFilterf+0x3c>
    fir->bufIndex = 0;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc

  fir->out = 0.0f;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  uint8_t sumIndex = fir->bufIndex;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80011e0:	73fb      	strb	r3, [r7, #15]

  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	73bb      	strb	r3, [r7, #14]
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	2b3e      	cmp	r3, #62	; 0x3e
 80011ea:	d824      	bhi.n	8001236 <_Z16FIRFilter_UpdateP9FIRFilterf+0xa2>
  {
    if (sumIndex > 0) sumIndex--;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <_Z16FIRFilter_UpdateP9FIRFilterf+0x66>
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	e001      	b.n	80011fe <_Z16FIRFilter_UpdateP9FIRFilterf+0x6a>
    else sumIndex = FILTER_NUM_COEFFS - 1;
 80011fa:	233e      	movs	r3, #62	; 0x3e
 80011fc:	73fb      	strb	r3, [r7, #15]
    fir->out += FIR_COEFFS[n] * fir->buf[sumIndex];
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <_Z16FIRFilter_UpdateP9FIRFilterf+0xb0>)
 8001208:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fdb5 	bl	8000d84 <__aeabi_fmul>
 800121a:	4603      	mov	r3, r0
 800121c:	4619      	mov	r1, r3
 800121e:	4620      	mov	r0, r4
 8001220:	f7ff fca8 	bl	8000b74 <__addsf3>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  for (uint8_t n=0; n<FILTER_NUM_COEFFS; n++)
 800122e:	7bbb      	ldrb	r3, [r7, #14]
 8001230:	3301      	adds	r3, #1
 8001232:	73bb      	strb	r3, [r7, #14]
 8001234:	e7d7      	b.n	80011e6 <_Z16FIRFilter_UpdateP9FIRFilterf+0x52>
  }

  return fir->out;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	20000000 	.word	0x20000000

08001248 <_ZN12HeightSensorC1EP12GPIO_TypeDeftS1_t17TIM_HandleTypeDef>:


HeightSensor::HeightSensor(GPIO_TypeDef* TRIG_PORT, uint16_t TRIG_PIN,
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	4613      	mov	r3, r2
 8001256:	80fb      	strh	r3, [r7, #6]
	  	   	   	   	   	   GPIO_TypeDef* ECHO_PORT, uint16_t ECHO_PIN,
						   TIM_HandleTypeDef HTIM)
							: trig_port(TRIG_PORT), trig_pin(TRIG_PIN),
							  echo_port(ECHO_PORT), echo_pin(ECHO_PIN),
							  htim(HTIM){
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	88fa      	ldrh	r2, [r7, #6]
 8001262:	809a      	strh	r2, [r3, #4]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	609a      	str	r2, [r3, #8]
							  echo_port(ECHO_PORT), echo_pin(ECHO_PIN),
 800126a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
							  htim(HTIM){
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	819a      	strh	r2, [r3, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3310      	adds	r3, #16
 8001276:	f107 011c 	add.w	r1, r7, #28
 800127a:	2248      	movs	r2, #72	; 0x48
 800127c:	4618      	mov	r0, r3
 800127e:	f004 fc29 	bl	8005ad4 <memcpy>
	FIRFilter_Init(&lpf);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3358      	adds	r3, #88	; 0x58
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff62 	bl	8001150 <_Z14FIRFilter_InitP9FIRFilter>

	HAL_TIM_Base_Start(&htim);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3310      	adds	r3, #16
 8001290:	4618      	mov	r0, r3
 8001292:	f003 fa99 	bl	80047c8 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	889b      	ldrh	r3, [r3, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	4619      	mov	r1, r3
 80012a2:	f002 fc7c 	bl	8003b9e <HAL_GPIO_WritePin>
}
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_ZN12HeightSensor10getDistRawEv>:

float HeightSensor::getDistRaw()
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	return dist_raw;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <_ZN12HeightSensor15getDistFilteredEv>:

float HeightSensor::getDistFiltered()
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	return dist_filtered;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <_ZN12HeightSensor14getWaterHeightEv>:

float HeightSensor::getWaterHeight()
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	return water_height;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <_ZN12HeightSensor10readSensorEv>:


void HeightSensor::readSensor()
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	889b      	ldrh	r3, [r3, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	4619      	mov	r1, r3
 800130c:	f002 fc47 	bl	8003b9e <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim, 0);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim) < 10);  // wait for 10 us
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	2b09      	cmp	r3, #9
 8001320:	bf94      	ite	ls
 8001322:	2301      	movls	r3, #1
 8001324:	2300      	movhi	r3, #0
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	d000      	beq.n	800132e <_ZN12HeightSensor10readSensorEv+0x36>
 800132c:	e7f4      	b.n	8001318 <_ZN12HeightSensor10readSensorEv+0x20>
	HAL_GPIO_WritePin(trig_port, trig_pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	889b      	ldrh	r3, [r3, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	4619      	mov	r1, r3
 800133a:	f002 fc30 	bl	8003b9e <HAL_GPIO_WritePin>

	uint32_t millis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 800133e:	f001 fd2b 	bl	8002d98 <HAL_GetTick>
 8001342:	6178      	str	r0, [r7, #20]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (echo_port, echo_pin)) && millis + 10 >  HAL_GetTick());
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f002 fc0c 	bl	8003b70 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <_ZN12HeightSensor10readSensorEv+0x7a>
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f103 040a 	add.w	r4, r3, #10
 8001364:	f001 fd18 	bl	8002d98 <HAL_GetTick>
 8001368:	4603      	mov	r3, r0
 800136a:	429c      	cmp	r4, r3
 800136c:	d901      	bls.n	8001372 <_ZN12HeightSensor10readSensorEv+0x7a>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <_ZN12HeightSensor10readSensorEv+0x7c>
 8001372:	2300      	movs	r3, #0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d000      	beq.n	800137a <_ZN12HeightSensor10readSensorEv+0x82>
 8001378:	e7e4      	b.n	8001344 <_ZN12HeightSensor10readSensorEv+0x4c>
	uint32_t time1 = __HAL_TIM_GET_COUNTER (&htim);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001380:	613b      	str	r3, [r7, #16]

	millis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001382:	f001 fd09 	bl	8002d98 <HAL_GetTick>
 8001386:	6178      	str	r0, [r7, #20]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (echo_port, echo_pin)) && millis + 50 > HAL_GetTick());
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001392:	b29b      	uxth	r3, r3
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f002 fbea 	bl	8003b70 <HAL_GPIO_ReadPin>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <_ZN12HeightSensor10readSensorEv+0xbe>
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80013a8:	f001 fcf6 	bl	8002d98 <HAL_GetTick>
 80013ac:	4603      	mov	r3, r0
 80013ae:	429c      	cmp	r4, r3
 80013b0:	d901      	bls.n	80013b6 <_ZN12HeightSensor10readSensorEv+0xbe>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <_ZN12HeightSensor10readSensorEv+0xc0>
 80013b6:	2300      	movs	r3, #0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d000      	beq.n	80013be <_ZN12HeightSensor10readSensorEv+0xc6>
 80013bc:	e7e4      	b.n	8001388 <_ZN12HeightSensor10readSensorEv+0x90>
	uint32_t time2 = __HAL_TIM_GET_COUNTER (&htim);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	60fb      	str	r3, [r7, #12]

	uint16_t distance_mm = (time2 - time1)* 0.34/2;
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f809 	bl	80003e4 <__aeabi_ui2d>
 80013d2:	a32f      	add	r3, pc, #188	; (adr r3, 8001490 <_ZN12HeightSensor10readSensorEv+0x198>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff f87e 	bl	80004d8 <__aeabi_dmul>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ec:	f7ff f99e 	bl	800072c <__aeabi_ddiv>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fb46 	bl	8000a88 <__aeabi_d2uiz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	817b      	strh	r3, [r7, #10]

	dist_raw = (distance_mm/10.0) < CONE_HEIGHT ? (distance_mm/10.0) : CONE_HEIGHT;
 8001400:	897b      	ldrh	r3, [r7, #10]
 8001402:	4618      	mov	r0, r3
 8001404:	f7fe fffe 	bl	8000404 <__aeabi_i2d>
 8001408:	f04f 0200 	mov.w	r2, #0
 800140c:	4b22      	ldr	r3, [pc, #136]	; (8001498 <_ZN12HeightSensor10readSensorEv+0x1a0>)
 800140e:	f7ff f98d 	bl	800072c <__aeabi_ddiv>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b1f      	ldr	r3, [pc, #124]	; (800149c <_ZN12HeightSensor10readSensorEv+0x1a4>)
 8001420:	f7ff facc 	bl	80009bc <__aeabi_dcmplt>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d010      	beq.n	800144c <_ZN12HeightSensor10readSensorEv+0x154>
 800142a:	897b      	ldrh	r3, [r7, #10]
 800142c:	4618      	mov	r0, r3
 800142e:	f7fe ffe9 	bl	8000404 <__aeabi_i2d>
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <_ZN12HeightSensor10readSensorEv+0x1a0>)
 8001438:	f7ff f978 	bl	800072c <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff fb40 	bl	8000ac8 <__aeabi_d2f>
 8001448:	4603      	mov	r3, r0
 800144a:	e000      	b.n	800144e <_ZN12HeightSensor10readSensorEv+0x156>
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <_ZN12HeightSensor10readSensorEv+0x1a8>)
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
	dist_filtered = FIRFilter_Update(&lpf, dist_raw);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8001460:	4619      	mov	r1, r3
 8001462:	4610      	mov	r0, r2
 8001464:	f7ff fe96 	bl	8001194 <_Z16FIRFilter_UpdateP9FIRFilterf>
 8001468:	4602      	mov	r2, r0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	water_height = CONE_HEIGHT - dist_filtered;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001476:	4619      	mov	r1, r3
 8001478:	4809      	ldr	r0, [pc, #36]	; (80014a0 <_ZN12HeightSensor10readSensorEv+0x1a8>)
 800147a:	f7ff fb79 	bl	8000b70 <__aeabi_fsub>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
}
 8001488:	bf00      	nop
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd90      	pop	{r4, r7, pc}
 8001490:	5c28f5c3 	.word	0x5c28f5c3
 8001494:	3fd5c28f 	.word	0x3fd5c28f
 8001498:	40240000 	.word	0x40240000
 800149c:	40518000 	.word	0x40518000
 80014a0:	428c0000 	.word	0x428c0000

080014a4 <_ZL14DWT_Delay_Initv>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <_ZL14DWT_Delay_Initv+0x60>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4a15      	ldr	r2, [pc, #84]	; (8001504 <_ZL14DWT_Delay_Initv+0x60>)
 80014ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014b2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <_ZL14DWT_Delay_Initv+0x60>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	4a12      	ldr	r2, [pc, #72]	; (8001504 <_ZL14DWT_Delay_Initv+0x60>)
 80014ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014be:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <_ZL14DWT_Delay_Initv+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a10      	ldr	r2, [pc, #64]	; (8001508 <_ZL14DWT_Delay_Initv+0x64>)
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <_ZL14DWT_Delay_Initv+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <_ZL14DWT_Delay_Initv+0x64>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <_ZL14DWT_Delay_Initv+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 80014de:	bf00      	nop
  __NOP();
 80014e0:	bf00      	nop
  __NOP();
 80014e2:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <_ZL14DWT_Delay_Initv+0x64>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf14      	ite	ne
 80014ec:	2301      	movne	r3, #1
 80014ee:	2300      	moveq	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <_ZL14DWT_Delay_Initv+0x56>
  {
    return 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e000      	b.n	80014fc <_ZL14DWT_Delay_Initv+0x58>
  }
  else
  {
    return 1;
 80014fa:	2301      	movs	r3, #1
  }
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	e000edf0 	.word	0xe000edf0
 8001508:	e0001000 	.word	0xe0001000

0800150c <_ZL12DWT_Delay_usm>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <_ZL12DWT_Delay_usm+0x48>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800151a:	f002 ff3b 	bl	8004394 <HAL_RCC_GetHCLKFreq>
 800151e:	4603      	mov	r3, r0
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <_ZL12DWT_Delay_usm+0x4c>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	0c9b      	lsrs	r3, r3, #18
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <_ZL12DWT_Delay_usm+0x48>)
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1ad2      	subs	r2, r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	bf34      	ite	cc
 800153e:	2301      	movcc	r3, #1
 8001540:	2300      	movcs	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d000      	beq.n	800154a <_ZL12DWT_Delay_usm+0x3e>
 8001548:	e7f2      	b.n	8001530 <_ZL12DWT_Delay_usm+0x24>
}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e0001000 	.word	0xe0001000
 8001558:	431bde83 	.word	0x431bde83

0800155c <_ZL19lcd16x2_enablePulsev>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8001560:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <_ZL19lcd16x2_enablePulsev+0x34>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <_ZL19lcd16x2_enablePulsev+0x38>)
 8001566:	8811      	ldrh	r1, [r2, #0]
 8001568:	2201      	movs	r2, #1
 800156a:	4618      	mov	r0, r3
 800156c:	f002 fb17 	bl	8003b9e <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8001570:	2014      	movs	r0, #20
 8001572:	f7ff ffcb 	bl	800150c <_ZL12DWT_Delay_usm>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <_ZL19lcd16x2_enablePulsev+0x34>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a06      	ldr	r2, [pc, #24]	; (8001594 <_ZL19lcd16x2_enablePulsev+0x38>)
 800157c:	8811      	ldrh	r1, [r2, #0]
 800157e:	2200      	movs	r2, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f002 fb0c 	bl	8003b9e <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 8001586:	203c      	movs	r0, #60	; 0x3c
 8001588:	f7ff ffc0 	bl	800150c <_ZL12DWT_Delay_usm>
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200002f8 	.word	0x200002f8
 8001594:	200002fe 	.word	0x200002fe

08001598 <_ZL10lcd16x2_rsb>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <_ZL10lcd16x2_rsb+0x24>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <_ZL10lcd16x2_rsb+0x28>)
 80015a8:	8811      	ldrh	r1, [r2, #0]
 80015aa:	79fa      	ldrb	r2, [r7, #7]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 faf6 	bl	8003b9e <HAL_GPIO_WritePin>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200002f8 	.word	0x200002f8
 80015c0:	200002fc 	.word	0x200002fc

080015c4 <_ZL13lcd16x2_writeh>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 80015dc:	4b5f      	ldr	r3, [pc, #380]	; (800175c <_ZL13lcd16x2_writeh+0x198>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d05a      	beq.n	800169a <_ZL13lcd16x2_writeh+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80015e4:	4b5e      	ldr	r3, [pc, #376]	; (8001760 <_ZL13lcd16x2_writeh+0x19c>)
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <_ZL13lcd16x2_writeh+0x1a0>)
 80015ea:	8819      	ldrh	r1, [r3, #0]
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	f002 fad2 	bl	8003b9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 80015fa:	4b59      	ldr	r3, [pc, #356]	; (8001760 <_ZL13lcd16x2_writeh+0x19c>)
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	4b5a      	ldr	r3, [pc, #360]	; (8001768 <_ZL13lcd16x2_writeh+0x1a4>)
 8001600:	8819      	ldrh	r1, [r3, #0]
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	b2db      	uxtb	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	f002 fac7 	bl	8003b9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001610:	4b53      	ldr	r3, [pc, #332]	; (8001760 <_ZL13lcd16x2_writeh+0x19c>)
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	4b55      	ldr	r3, [pc, #340]	; (800176c <_ZL13lcd16x2_writeh+0x1a8>)
 8001616:	8819      	ldrh	r1, [r3, #0]
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	f002 fabc 	bl	8003b9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001626:	4b4e      	ldr	r3, [pc, #312]	; (8001760 <_ZL13lcd16x2_writeh+0x19c>)
 8001628:	6818      	ldr	r0, [r3, #0]
 800162a:	4b51      	ldr	r3, [pc, #324]	; (8001770 <_ZL13lcd16x2_writeh+0x1ac>)
 800162c:	8819      	ldrh	r1, [r3, #0]
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	b2db      	uxtb	r3, r3
 8001636:	461a      	mov	r2, r3
 8001638:	f002 fab1 	bl	8003b9e <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800163c:	4b4d      	ldr	r3, [pc, #308]	; (8001774 <_ZL13lcd16x2_writeh+0x1b0>)
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	4b4d      	ldr	r3, [pc, #308]	; (8001778 <_ZL13lcd16x2_writeh+0x1b4>)
 8001642:	8819      	ldrh	r1, [r3, #0]
 8001644:	7bbb      	ldrb	r3, [r7, #14]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	f002 faa6 	bl	8003b9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8001652:	4b48      	ldr	r3, [pc, #288]	; (8001774 <_ZL13lcd16x2_writeh+0x1b0>)
 8001654:	6818      	ldr	r0, [r3, #0]
 8001656:	4b49      	ldr	r3, [pc, #292]	; (800177c <_ZL13lcd16x2_writeh+0x1b8>)
 8001658:	8819      	ldrh	r1, [r3, #0]
 800165a:	7bbb      	ldrb	r3, [r7, #14]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	b2db      	uxtb	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	f002 fa9b 	bl	8003b9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <_ZL13lcd16x2_writeh+0x1b0>)
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	4b44      	ldr	r3, [pc, #272]	; (8001780 <_ZL13lcd16x2_writeh+0x1bc>)
 800166e:	8819      	ldrh	r1, [r3, #0]
 8001670:	7bbb      	ldrb	r3, [r7, #14]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	b2db      	uxtb	r3, r3
 8001678:	461a      	mov	r2, r3
 800167a:	f002 fa90 	bl	8003b9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 800167e:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <_ZL13lcd16x2_writeh+0x1b0>)
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	4b40      	ldr	r3, [pc, #256]	; (8001784 <_ZL13lcd16x2_writeh+0x1c0>)
 8001684:	8819      	ldrh	r1, [r3, #0]
 8001686:	7bbb      	ldrb	r3, [r7, #14]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	b2db      	uxtb	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	f002 fa85 	bl	8003b9e <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8001694:	f7ff ff62 	bl	800155c <_ZL19lcd16x2_enablePulsev>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8001698:	e05b      	b.n	8001752 <_ZL13lcd16x2_writeh+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800169a:	4b36      	ldr	r3, [pc, #216]	; (8001774 <_ZL13lcd16x2_writeh+0x1b0>)
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <_ZL13lcd16x2_writeh+0x1b4>)
 80016a0:	8819      	ldrh	r1, [r3, #0]
 80016a2:	7bbb      	ldrb	r3, [r7, #14]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	461a      	mov	r2, r3
 80016ac:	f002 fa77 	bl	8003b9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80016b0:	4b30      	ldr	r3, [pc, #192]	; (8001774 <_ZL13lcd16x2_writeh+0x1b0>)
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	4b31      	ldr	r3, [pc, #196]	; (800177c <_ZL13lcd16x2_writeh+0x1b8>)
 80016b6:	8819      	ldrh	r1, [r3, #0]
 80016b8:	7bbb      	ldrb	r3, [r7, #14]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	f002 fa6c 	bl	8003b9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80016c6:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <_ZL13lcd16x2_writeh+0x1b0>)
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <_ZL13lcd16x2_writeh+0x1bc>)
 80016cc:	8819      	ldrh	r1, [r3, #0]
 80016ce:	7bbb      	ldrb	r3, [r7, #14]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	f002 fa61 	bl	8003b9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <_ZL13lcd16x2_writeh+0x1b0>)
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	4b28      	ldr	r3, [pc, #160]	; (8001784 <_ZL13lcd16x2_writeh+0x1c0>)
 80016e2:	8819      	ldrh	r1, [r3, #0]
 80016e4:	7bbb      	ldrb	r3, [r7, #14]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	f002 fa56 	bl	8003b9e <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 80016f2:	f7ff ff33 	bl	800155c <_ZL19lcd16x2_enablePulsev>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 80016f6:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <_ZL13lcd16x2_writeh+0x1b0>)
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <_ZL13lcd16x2_writeh+0x1b4>)
 80016fc:	8819      	ldrh	r1, [r3, #0]
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	f002 fa49 	bl	8003b9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <_ZL13lcd16x2_writeh+0x1b0>)
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <_ZL13lcd16x2_writeh+0x1b8>)
 8001712:	8819      	ldrh	r1, [r3, #0]
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	f002 fa3e 	bl	8003b9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <_ZL13lcd16x2_writeh+0x1b0>)
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <_ZL13lcd16x2_writeh+0x1bc>)
 8001728:	8819      	ldrh	r1, [r3, #0]
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	f002 fa33 	bl	8003b9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <_ZL13lcd16x2_writeh+0x1b0>)
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <_ZL13lcd16x2_writeh+0x1c0>)
 800173e:	8819      	ldrh	r1, [r3, #0]
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	b2db      	uxtb	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	f002 fa28 	bl	8003b9e <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 800174e:	f7ff ff05 	bl	800155c <_ZL19lcd16x2_enablePulsev>
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200000fc 	.word	0x200000fc
 8001760:	20000300 	.word	0x20000300
 8001764:	20000304 	.word	0x20000304
 8001768:	20000306 	.word	0x20000306
 800176c:	20000308 	.word	0x20000308
 8001770:	2000030a 	.word	0x2000030a
 8001774:	2000030c 	.word	0x2000030c
 8001778:	20000310 	.word	0x20000310
 800177c:	20000312 	.word	0x20000312
 8001780:	20000314 	.word	0x20000314
 8001784:	20000316 	.word	0x20000316

08001788 <_ZL20lcd16x2_writeCommandh>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff ff00 	bl	8001598 <_ZL10lcd16x2_rsb>
  lcd16x2_write(cmd);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff12 	bl	80015c4 <_ZL13lcd16x2_writeh>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_ZL17lcd16x2_writeDatah>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 80017b2:	2001      	movs	r0, #1
 80017b4:	f7ff fef0 	bl	8001598 <_ZL10lcd16x2_rsb>
  lcd16x2_write(data);
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff02 	bl	80015c4 <_ZL13lcd16x2_writeh>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_ZL14lcd16x2_write4h>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff fedc 	bl	8001598 <_ZL10lcd16x2_rsb>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <_ZL14lcd16x2_write4h+0x7c>)
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	4b18      	ldr	r3, [pc, #96]	; (8001848 <_ZL14lcd16x2_write4h+0x80>)
 80017e6:	8819      	ldrh	r1, [r3, #0]
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	f002 f9d4 	bl	8003b9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <_ZL14lcd16x2_write4h+0x7c>)
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <_ZL14lcd16x2_write4h+0x84>)
 80017fc:	8819      	ldrh	r1, [r3, #0]
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	b2db      	uxtb	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	f002 f9c9 	bl	8003b9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <_ZL14lcd16x2_write4h+0x7c>)
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <_ZL14lcd16x2_write4h+0x88>)
 8001812:	8819      	ldrh	r1, [r3, #0]
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	b2db      	uxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	f002 f9be 	bl	8003b9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <_ZL14lcd16x2_write4h+0x7c>)
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <_ZL14lcd16x2_write4h+0x8c>)
 8001828:	8819      	ldrh	r1, [r3, #0]
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	f002 f9b3 	bl	8003b9e <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8001838:	f7ff fe90 	bl	800155c <_ZL19lcd16x2_enablePulsev>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000030c 	.word	0x2000030c
 8001848:	20000310 	.word	0x20000310
 800184c:	20000312 	.word	0x20000312
 8001850:	20000314 	.word	0x20000314
 8001854:	20000316 	.word	0x20000316

08001858 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	817b      	strh	r3, [r7, #10]
 8001866:	4613      	mov	r3, r2
 8001868:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 800186a:	f7ff fe1b 	bl	80014a4 <_ZL14DWT_Delay_Initv>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 800186e:	4a24      	ldr	r2, [pc, #144]	; (8001900 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xa8>)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8001874:	4a23      	ldr	r2, [pc, #140]	; (8001904 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xac>)
 8001876:	897b      	ldrh	r3, [r7, #10]
 8001878:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 800187a:	4a23      	ldr	r2, [pc, #140]	; (8001908 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb0>)
 800187c:	893b      	ldrh	r3, [r7, #8]
 800187e:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8001880:	4a22      	ldr	r2, [pc, #136]	; (800190c <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb4>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8001886:	4a22      	ldr	r2, [pc, #136]	; (8001910 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xb8>)
 8001888:	8b3b      	ldrh	r3, [r7, #24]
 800188a:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 800188c:	4a21      	ldr	r2, [pc, #132]	; (8001914 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xbc>)
 800188e:	8bbb      	ldrh	r3, [r7, #28]
 8001890:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8001892:	4a21      	ldr	r2, [pc, #132]	; (8001918 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc0>)
 8001894:	8c3b      	ldrh	r3, [r7, #32]
 8001896:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8001898:	4a20      	ldr	r2, [pc, #128]	; (800191c <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc4>)
 800189a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800189c:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xc8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 80018a4:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt+0xcc>)
 80018a6:	2228      	movs	r2, #40	; 0x28
 80018a8:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 80018aa:	2014      	movs	r0, #20
 80018ac:	f001 fa7e 	bl	8002dac <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f7ff ff89 	bl	80017c8 <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(5);
 80018b6:	2005      	movs	r0, #5
 80018b8:	f001 fa78 	bl	8002dac <HAL_Delay>
  lcd16x2_write4(0x3);
 80018bc:	2003      	movs	r0, #3
 80018be:	f7ff ff83 	bl	80017c8 <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 80018c2:	2001      	movs	r0, #1
 80018c4:	f001 fa72 	bl	8002dac <HAL_Delay>
  lcd16x2_write4(0x3);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f7ff ff7d 	bl	80017c8 <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f001 fa6c 	bl	8002dac <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 80018d4:	2002      	movs	r0, #2
 80018d6:	f7ff ff77 	bl	80017c8 <_ZL14lcd16x2_write4h>
  LCD_MS_DELAY(1);
 80018da:	2001      	movs	r0, #1
 80018dc:	f001 fa66 	bl	8002dac <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 80018e0:	2028      	movs	r0, #40	; 0x28
 80018e2:	f7ff ff51 	bl	8001788 <_ZL20lcd16x2_writeCommandh>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 80018e6:	200f      	movs	r0, #15
 80018e8:	f7ff ff4e 	bl	8001788 <_ZL20lcd16x2_writeCommandh>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7ff ff4b 	bl	8001788 <_ZL20lcd16x2_writeCommandh>
  LCD_MS_DELAY(3);
 80018f2:	2003      	movs	r0, #3
 80018f4:	f001 fa5a 	bl	8002dac <HAL_Delay>
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200002f8 	.word	0x200002f8
 8001904:	200002fc 	.word	0x200002fc
 8001908:	200002fe 	.word	0x200002fe
 800190c:	2000030c 	.word	0x2000030c
 8001910:	20000310 	.word	0x20000310
 8001914:	20000312 	.word	0x20000312
 8001918:	20000314 	.word	0x20000314
 800191c:	20000316 	.word	0x20000316
 8001920:	200000fc 	.word	0x200000fc
 8001924:	200000fe 	.word	0x200000fe

08001928 <_Z17lcd16x2_setCursorhh>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	460a      	mov	r2, r1
 8001932:	71fb      	strb	r3, [r7, #7]
 8001934:	4613      	mov	r3, r2
 8001936:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d108      	bne.n	8001958 <_Z17lcd16x2_setCursorhh+0x30>
  {
    maskData |= (0x80);
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800194c:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff19 	bl	8001788 <_ZL20lcd16x2_writeCommandh>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8001956:	e007      	b.n	8001968 <_Z17lcd16x2_setCursorhh+0x40>
    maskData |= (0xc0);
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800195e:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff10 	bl	8001788 <_ZL20lcd16x2_writeCommandh>
}
 8001968:	bf00      	nop
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_Z15lcd16x2_1stLinev>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 8001974:	2100      	movs	r1, #0
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ffd6 	bl	8001928 <_Z17lcd16x2_setCursorhh>
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <_Z15lcd16x2_2ndLinev>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8001984:	2100      	movs	r1, #0
 8001986:	2001      	movs	r0, #1
 8001988:	f7ff ffce 	bl	8001928 <_Z17lcd16x2_setCursorhh>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <_Z18lcd16x2_cursorShowb>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  if(state)
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00c      	beq.n	80019ba <_Z18lcd16x2_cursorShowb+0x2a>
  {
    DisplayControl |= (0x03);
 80019a0:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <_Z18lcd16x2_cursorShowb+0x4c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	f043 0303 	orr.w	r3, r3, #3
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <_Z18lcd16x2_cursorShowb+0x4c>)
 80019ac:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <_Z18lcd16x2_cursorShowb+0x4c>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fee8 	bl	8001788 <_ZL20lcd16x2_writeCommandh>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 80019b8:	e00b      	b.n	80019d2 <_Z18lcd16x2_cursorShowb+0x42>
    DisplayControl &= ~(0x03);
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <_Z18lcd16x2_cursorShowb+0x4c>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	f023 0303 	bic.w	r3, r3, #3
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <_Z18lcd16x2_cursorShowb+0x4c>)
 80019c6:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <_Z18lcd16x2_cursorShowb+0x4c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fedb 	bl	8001788 <_ZL20lcd16x2_writeCommandh>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200000fd 	.word	0x200000fd

080019e0 <_Z13lcd16x2_clearv>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff fecf 	bl	8001788 <_ZL20lcd16x2_writeCommandh>
  LCD_MS_DELAY(3);
 80019ea:	2003      	movs	r0, #3
 80019ec:	f001 f9de 	bl	8002dac <HAL_Delay>
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_Z14lcd16x2_printfPKcz>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 80019f4:	b40f      	push	{r0, r1, r2, r3}
 80019f6:	b590      	push	{r4, r7, lr}
 80019f8:	b089      	sub	sp, #36	; 0x24
 80019fa:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 80019fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a00:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f004 fd0e 	bl	800642c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	77fb      	strb	r3, [r7, #31]
 8001a14:	7ffc      	ldrb	r4, [r7, #31]
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fb98 	bl	8000150 <strlen>
 8001a20:	4603      	mov	r3, r0
 8001a22:	429c      	cmp	r4, r3
 8001a24:	d20f      	bcs.n	8001a46 <_Z14lcd16x2_printfPKcz+0x52>
 8001a26:	7ffb      	ldrb	r3, [r7, #31]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d80c      	bhi.n	8001a46 <_Z14lcd16x2_printfPKcz+0x52>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 8001a2c:	7ffb      	ldrb	r3, [r7, #31]
 8001a2e:	f107 0220 	add.w	r2, r7, #32
 8001a32:	4413      	add	r3, r2
 8001a34:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff feb5 	bl	80017a8 <_ZL17lcd16x2_writeDatah>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001a3e:	7ffb      	ldrb	r3, [r7, #31]
 8001a40:	3301      	adds	r3, #1
 8001a42:	77fb      	strb	r3, [r7, #31]
 8001a44:	e7e6      	b.n	8001a14 <_Z14lcd16x2_printfPKcz+0x20>
  }
}
 8001a46:	bf00      	nop
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a50:	b004      	add	sp, #16
 8001a52:	4770      	bx	lr
 8001a54:	0000      	movs	r0, r0
	...

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
 8001a5e:	af56      	add	r7, sp, #344	; 0x158
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a60:	f001 f942 	bl	8002ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a64:	f000 f976 	bl	8001d54 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a68:	f000 fc3a 	bl	80022e0 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8001a6c:	f000 faf6 	bl	800205c <_ZL12MX_TIM2_Initv>
  MX_ADC1_Init();
 8001a70:	f000 f9da 	bl	8001e28 <_ZL12MX_ADC1_Initv>
  MX_TIM4_Init();
 8001a74:	f000 fbaa 	bl	80021cc <_ZL12MX_TIM4_Initv>
  MX_TIM1_Init();
 8001a78:	f000 fa1e 	bl	8001eb8 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8001a7c:	f000 fb4a 	bl	8002114 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 8001a80:	f000 fc00 	bl	8002284 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

  lcd16x2_init_4bits(LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_EN_Pin,
 8001a84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a88:	9303      	str	r3, [sp, #12]
 8001a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	4b98      	ldr	r3, [pc, #608]	; (8001d00 <main+0x2a8>)
 8001a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aa6:	4896      	ldr	r0, [pc, #600]	; (8001d00 <main+0x2a8>)
 8001aa8:	f7ff fed6 	bl	8001858 <_Z18lcd16x2_init_4bitsP12GPIO_TypeDefttS0_tttt>
		  	  	  	 LCD_D4_GPIO_Port, LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin);

  lcd16x2_cursorShow(false);
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff ff6f 	bl	8001990 <_Z18lcd16x2_cursorShowb>

  HAL_ADC_Start(&hadc1);
 8001ab2:	4894      	ldr	r0, [pc, #592]	; (8001d04 <main+0x2ac>)
 8001ab4:	f001 fa76 	bl	8002fa4 <HAL_ADC_Start>

  HAL_GPIO_WritePin(PUMP_EN_GPIO_Port, PUMP_EN_Pin, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	2120      	movs	r1, #32
 8001abc:	4892      	ldr	r0, [pc, #584]	; (8001d08 <main+0x2b0>)
 8001abe:	f002 f86e 	bl	8003b9e <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, 0);
 8001ac2:	4b92      	ldr	r3, [pc, #584]	; (8001d0c <main+0x2b4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	63da      	str	r2, [r3, #60]	; 0x3c

  while(!HAL_GPIO_ReadPin(SETPOINT_BUT_GPIO_Port, SETPOINT_BUT_Pin))
 8001aca:	2108      	movs	r1, #8
 8001acc:	488c      	ldr	r0, [pc, #560]	; (8001d00 <main+0x2a8>)
 8001ace:	f002 f84f 	bl	8003b70 <HAL_GPIO_ReadPin>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf0c      	ite	eq
 8001ad8:	2301      	moveq	r3, #1
 8001ada:	2300      	movne	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d04b      	beq.n	8001b7a <main+0x122>
  {
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001ae2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ae6:	4887      	ldr	r0, [pc, #540]	; (8001d04 <main+0x2ac>)
 8001ae8:	f001 fb0a 	bl	8003100 <HAL_ADC_PollForConversion>
	  potVal = HAL_ADC_GetValue(&hadc1);
 8001aec:	4885      	ldr	r0, [pc, #532]	; (8001d04 <main+0x2ac>)
 8001aee:	f001 fc0d 	bl	800330c <HAL_ADC_GetValue>
 8001af2:	4603      	mov	r3, r0
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	4b86      	ldr	r3, [pc, #536]	; (8001d10 <main+0x2b8>)
 8001af8:	801a      	strh	r2, [r3, #0]
	  setpoint = 0.35 + 0.30*(potVal/4036.0);
 8001afa:	4b85      	ldr	r3, [pc, #532]	; (8001d10 <main+0x2b8>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fc80 	bl	8000404 <__aeabi_i2d>
 8001b04:	a378      	add	r3, pc, #480	; (adr r3, 8001ce8 <main+0x290>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	f7fe fe0f 	bl	800072c <__aeabi_ddiv>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	a376      	add	r3, pc, #472	; (adr r3, 8001cf0 <main+0x298>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	f7fe fcdc 	bl	80004d8 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	a373      	add	r3, pc, #460	; (adr r3, 8001cf8 <main+0x2a0>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe fb1d 	bl	800016c <__adddf3>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7fe ffc5 	bl	8000ac8 <__aeabi_d2f>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a74      	ldr	r2, [pc, #464]	; (8001d14 <main+0x2bc>)
 8001b42:	6013      	str	r3, [r2, #0]
	  lcd16x2_clear();
 8001b44:	f7ff ff4c 	bl	80019e0 <_Z13lcd16x2_clearv>
	  lcd16x2_printf("Setpoint: ");
 8001b48:	4873      	ldr	r0, [pc, #460]	; (8001d18 <main+0x2c0>)
 8001b4a:	f7ff ff53 	bl	80019f4 <_Z14lcd16x2_printfPKcz>
	  lcd16x2_2ndLine();
 8001b4e:	f7ff ff17 	bl	8001980 <_Z15lcd16x2_2ndLinev>
	  lcd16x2_printf("         %.1f cm", 100*setpoint);
 8001b52:	4b70      	ldr	r3, [pc, #448]	; (8001d14 <main+0x2bc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4971      	ldr	r1, [pc, #452]	; (8001d1c <main+0x2c4>)
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff f913 	bl	8000d84 <__aeabi_fmul>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fc61 	bl	8000428 <__aeabi_f2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	486d      	ldr	r0, [pc, #436]	; (8001d20 <main+0x2c8>)
 8001b6c:	f7ff ff42 	bl	80019f4 <_Z14lcd16x2_printfPKcz>
	  HAL_Delay(300);
 8001b70:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b74:	f001 f91a 	bl	8002dac <HAL_Delay>
  while(!HAL_GPIO_ReadPin(SETPOINT_BUT_GPIO_Port, SETPOINT_BUT_Pin))
 8001b78:	e7a7      	b.n	8001aca <main+0x72>
  }

  HeightSensor usensor(TRIG_GPIO_Port, TRIG_Pin, ECHO_GPIO_Port, ECHO_Pin, htim2);
 8001b7a:	463c      	mov	r4, r7
 8001b7c:	4a69      	ldr	r2, [pc, #420]	; (8001d24 <main+0x2cc>)
 8001b7e:	ab01      	add	r3, sp, #4
 8001b80:	4611      	mov	r1, r2
 8001b82:	2248      	movs	r2, #72	; 0x48
 8001b84:	4618      	mov	r0, r3
 8001b86:	f003 ffa5 	bl	8005ad4 <memcpy>
 8001b8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	4b5d      	ldr	r3, [pc, #372]	; (8001d08 <main+0x2b0>)
 8001b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b96:	495c      	ldr	r1, [pc, #368]	; (8001d08 <main+0x2b0>)
 8001b98:	4620      	mov	r0, r4
 8001b9a:	f7ff fb55 	bl	8001248 <_ZN12HeightSensorC1EP12GPIO_TypeDeftS1_t17TIM_HandleTypeDef>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001b9e:	2108      	movs	r1, #8
 8001ba0:	485a      	ldr	r0, [pc, #360]	; (8001d0c <main+0x2b4>)
 8001ba2:	f003 fc33 	bl	800540c <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	4858      	ldr	r0, [pc, #352]	; (8001d0c <main+0x2b4>)
 8001baa:	f003 fc2f 	bl	800540c <HAL_TIMEx_PWMN_Start>
  HAL_GPIO_WritePin(PUMP_EN_GPIO_Port, PUMP_EN_Pin, GPIO_PIN_SET);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2120      	movs	r1, #32
 8001bb2:	4855      	ldr	r0, [pc, #340]	; (8001d08 <main+0x2b0>)
 8001bb4:	f001 fff3 	bl	8003b9e <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim4);
 8001bb8:	485b      	ldr	r0, [pc, #364]	; (8001d28 <main+0x2d0>)
 8001bba:	f002 fe4f 	bl	800485c <HAL_TIM_Base_Start_IT>

  pump_pid_controller.setKPID(22.0, 0.000015, 0.0);
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	4a5a      	ldr	r2, [pc, #360]	; (8001d2c <main+0x2d4>)
 8001bc4:	495a      	ldr	r1, [pc, #360]	; (8001d30 <main+0x2d8>)
 8001bc6:	485b      	ldr	r0, [pc, #364]	; (8001d34 <main+0x2dc>)
 8001bc8:	f000 ff9f 	bl	8002b0a <_ZN13PIDController7setKPIDEfff>
  pump_pid_controller.setPIDLimits(0.0f, 1.0f);
 8001bcc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bd0:	f04f 0100 	mov.w	r1, #0
 8001bd4:	4857      	ldr	r0, [pc, #348]	; (8001d34 <main+0x2dc>)
 8001bd6:	f000 ffba 	bl	8002b4e <_ZN13PIDController12setPIDLimitsEff>
  pump_pid_controller.setSetpoint(setpoint);
 8001bda:	4b4e      	ldr	r3, [pc, #312]	; (8001d14 <main+0x2bc>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4619      	mov	r1, r3
 8001be0:	4854      	ldr	r0, [pc, #336]	; (8001d34 <main+0x2dc>)
 8001be2:	f000 ffa7 	bl	8002b34 <_ZN13PIDController11setSetpointEf>

  setInitialValveOpening();
 8001be6:	f000 fcaf 	bl	8002548 <_Z22setInitialValveOpeningv>

  startMillis = HAL_GetTick();
 8001bea:	f001 f8d5 	bl	8002d98 <HAL_GetTick>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4a51      	ldr	r2, [pc, #324]	; (8001d38 <main+0x2e0>)
 8001bf2:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	usensor.readSensor();
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fb7e 	bl	80012f8 <_ZN12HeightSensor10readSensorEv>

	pidVal = pump_pid_controller.processPID(usensor.getWaterHeight()/100);
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fb6e 	bl	80012e0 <_ZN12HeightSensor14getWaterHeightEv>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4945      	ldr	r1, [pc, #276]	; (8001d1c <main+0x2c4>)
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff f96f 	bl	8000eec <__aeabi_fdiv>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4619      	mov	r1, r3
 8001c12:	4848      	ldr	r0, [pc, #288]	; (8001d34 <main+0x2dc>)
 8001c14:	f000 ffac 	bl	8002b70 <_ZN13PIDController10processPIDEf>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4a48      	ldr	r2, [pc, #288]	; (8001d3c <main+0x2e4>)
 8001c1c:	6013      	str	r3, [r2, #0]
	if (pidVal < 0.3)
 8001c1e:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <main+0x2e4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fc00 	bl	8000428 <__aeabi_f2d>
 8001c28:	a331      	add	r3, pc, #196	; (adr r3, 8001cf0 <main+0x298>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	f7fe fec5 	bl	80009bc <__aeabi_dcmplt>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <main+0x1f2>
	{
		HAL_GPIO_WritePin(PUMP_EN_GPIO_Port, PUMP_EN_Pin, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2120      	movs	r1, #32
 8001c3c:	4832      	ldr	r0, [pc, #200]	; (8001d08 <main+0x2b0>)
 8001c3e:	f001 ffae 	bl	8003b9e <HAL_GPIO_WritePin>
		pwmVal = 0;
 8001c42:	4b3f      	ldr	r3, [pc, #252]	; (8001d40 <main+0x2e8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	801a      	strh	r2, [r3, #0]
 8001c48:	e012      	b.n	8001c70 <main+0x218>
	}
	else
	{
		HAL_GPIO_WritePin(PUMP_EN_GPIO_Port, PUMP_EN_Pin, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2120      	movs	r1, #32
 8001c4e:	482e      	ldr	r0, [pc, #184]	; (8001d08 <main+0x2b0>)
 8001c50:	f001 ffa5 	bl	8003b9e <HAL_GPIO_WritePin>
		pwmVal = 625*pidVal;
 8001c54:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <main+0x2e4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	493a      	ldr	r1, [pc, #232]	; (8001d44 <main+0x2ec>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f892 	bl	8000d84 <__aeabi_fmul>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fa54 	bl	8001110 <__aeabi_f2uiz>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <main+0x2e8>)
 8001c6e:	801a      	strh	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3, pwmVal);
 8001c70:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <main+0x2e8>)
 8001c72:	881a      	ldrh	r2, [r3, #0]
 8001c74:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <main+0x2b4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	63da      	str	r2, [r3, #60]	; 0x3c

	if (updateLCD)
 8001c7a:	4b33      	ldr	r3, [pc, #204]	; (8001d48 <main+0x2f0>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01f      	beq.n	8001cc2 <main+0x26a>
	{
		lcd16x2_clear();
 8001c82:	f7ff fead 	bl	80019e0 <_Z13lcd16x2_clearv>
		lcd16x2_1stLine();
 8001c86:	f7ff fe73 	bl	8001970 <_Z15lcd16x2_1stLinev>
		//lcd16x2_printf("Setpoint: %.1fcm", setpoint*100);
		lcd16x2_printf("H: %.1fcm", usensor.getWaterHeight());
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fb27 	bl	80012e0 <_ZN12HeightSensor14getWaterHeightEv>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fbc7 	bl	8000428 <__aeabi_f2d>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	482b      	ldr	r0, [pc, #172]	; (8001d4c <main+0x2f4>)
 8001ca0:	f7ff fea8 	bl	80019f4 <_Z14lcd16x2_printfPKcz>
		lcd16x2_2ndLine();
 8001ca4:	f7ff fe6c 	bl	8001980 <_Z15lcd16x2_2ndLinev>
		lcd16x2_printf("PWM: %.2f", pidVal);
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <main+0x2e4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fbbb 	bl	8000428 <__aeabi_f2d>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4826      	ldr	r0, [pc, #152]	; (8001d50 <main+0x2f8>)
 8001cb8:	f7ff fe9c 	bl	80019f4 <_Z14lcd16x2_printfPKcz>
		//lcd16x2_printf("H. atual: %.1fcm", usensor.getWaterHeight());
		updateLCD = false;
 8001cbc:	4b22      	ldr	r3, [pc, #136]	; (8001d48 <main+0x2f0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
	}

	sendData(usensor);
 8001cc2:	463c      	mov	r4, r7
 8001cc4:	4668      	mov	r0, sp
 8001cc6:	f104 0310 	add.w	r3, r4, #16
 8001cca:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f003 ff00 	bl	8005ad4 <memcpy>
 8001cd4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cd8:	f000 fbca 	bl	8002470 <_Z8sendData12HeightSensor>
	HAL_Delay(1000/SAMPLING_FREQUENCY);
 8001cdc:	200a      	movs	r0, #10
 8001cde:	f001 f865 	bl	8002dac <HAL_Delay>
	usensor.readSensor();
 8001ce2:	e787      	b.n	8001bf4 <main+0x19c>
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	00000000 	.word	0x00000000
 8001cec:	40af8800 	.word	0x40af8800
 8001cf0:	33333333 	.word	0x33333333
 8001cf4:	3fd33333 	.word	0x3fd33333
 8001cf8:	66666666 	.word	0x66666666
 8001cfc:	3fd66666 	.word	0x3fd66666
 8001d00:	40010800 	.word	0x40010800
 8001d04:	20000318 	.word	0x20000318
 8001d08:	40010c00 	.word	0x40010c00
 8001d0c:	20000348 	.word	0x20000348
 8001d10:	200004e8 	.word	0x200004e8
 8001d14:	200004ec 	.word	0x200004ec
 8001d18:	08008870 	.word	0x08008870
 8001d1c:	42c80000 	.word	0x42c80000
 8001d20:	0800887c 	.word	0x0800887c
 8001d24:	20000390 	.word	0x20000390
 8001d28:	20000420 	.word	0x20000420
 8001d2c:	377ba882 	.word	0x377ba882
 8001d30:	41b00000 	.word	0x41b00000
 8001d34:	200004ac 	.word	0x200004ac
 8001d38:	200004f8 	.word	0x200004f8
 8001d3c:	200004f0 	.word	0x200004f0
 8001d40:	200004ea 	.word	0x200004ea
 8001d44:	441c4000 	.word	0x441c4000
 8001d48:	200000ff 	.word	0x200000ff
 8001d4c:	08008890 	.word	0x08008890
 8001d50:	0800889c 	.word	0x0800889c

08001d54 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b094      	sub	sp, #80	; 0x50
 8001d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d5e:	2228      	movs	r2, #40	; 0x28
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 fec4 	bl	8005af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d84:	2301      	movs	r3, #1
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d92:	2301      	movs	r3, #1
 8001d94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d96:	2302      	movs	r3, #2
 8001d98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001da0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001da4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001daa:	4618      	mov	r0, r3
 8001dac:	f001 ff28 	bl	8003c00 <HAL_RCC_OscConfig>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	bf14      	ite	ne
 8001db6:	2301      	movne	r3, #1
 8001db8:	2300      	moveq	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001dc0:	f000 fbe8 	bl	8002594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc4:	230f      	movs	r3, #15
 8001dc6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dd4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	2102      	movs	r1, #2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f002 f98d 	bl	8004100 <HAL_RCC_ClockConfig>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf14      	ite	ne
 8001dec:	2301      	movne	r3, #1
 8001dee:	2300      	moveq	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8001df6:	f000 fbcd 	bl	8002594 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e02:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	4618      	mov	r0, r3
 8001e08:	f002 fb14 	bl	8004434 <HAL_RCCEx_PeriphCLKConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bf14      	ite	ne
 8001e12:	2301      	movne	r3, #1
 8001e14:	2300      	moveq	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <_Z18SystemClock_Configv+0xcc>
  {
    Error_Handler();
 8001e1c:	f000 fbba 	bl	8002594 <Error_Handler>
  }
}
 8001e20:	bf00      	nop
 8001e22:	3750      	adds	r7, #80	; 0x50
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e38:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <_ZL12MX_ADC1_Initv+0x88>)
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	; (8001eb4 <_ZL12MX_ADC1_Initv+0x8c>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <_ZL12MX_ADC1_Initv+0x88>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e44:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <_ZL12MX_ADC1_Initv+0x88>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <_ZL12MX_ADC1_Initv+0x88>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <_ZL12MX_ADC1_Initv+0x88>)
 8001e52:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001e56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e58:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <_ZL12MX_ADC1_Initv+0x88>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <_ZL12MX_ADC1_Initv+0x88>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e64:	4812      	ldr	r0, [pc, #72]	; (8001eb0 <_ZL12MX_ADC1_Initv+0x88>)
 8001e66:	f000 ffc5 	bl	8002df4 <HAL_ADC_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8001e7a:	f000 fb8b 	bl	8002594 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4808      	ldr	r0, [pc, #32]	; (8001eb0 <_ZL12MX_ADC1_Initv+0x88>)
 8001e90:	f001 fa48 	bl	8003324 <HAL_ADC_ConfigChannel>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf14      	ite	ne
 8001e9a:	2301      	movne	r3, #1
 8001e9c:	2300      	moveq	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8001ea4:	f000 fb76 	bl	8002594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ea8:	bf00      	nop
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000318 	.word	0x20000318
 8001eb4:	40012400 	.word	0x40012400

08001eb8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b096      	sub	sp, #88	; 0x58
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ebe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ecc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	611a      	str	r2, [r3, #16]
 8001ee6:	615a      	str	r2, [r3, #20]
 8001ee8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	2220      	movs	r2, #32
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fdfd 	bl	8005af0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ef6:	4b57      	ldr	r3, [pc, #348]	; (8002054 <_ZL12MX_TIM1_Initv+0x19c>)
 8001ef8:	4a57      	ldr	r2, [pc, #348]	; (8002058 <_ZL12MX_TIM1_Initv+0x1a0>)
 8001efa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 8001efc:	4b55      	ldr	r3, [pc, #340]	; (8002054 <_ZL12MX_TIM1_Initv+0x19c>)
 8001efe:	227f      	movs	r2, #127	; 0x7f
 8001f00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f02:	4b54      	ldr	r3, [pc, #336]	; (8002054 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625;
 8001f08:	4b52      	ldr	r3, [pc, #328]	; (8002054 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f0a:	f240 2271 	movw	r2, #625	; 0x271
 8001f0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f10:	4b50      	ldr	r3, [pc, #320]	; (8002054 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f16:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1c:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f22:	484c      	ldr	r0, [pc, #304]	; (8002054 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f24:	f002 fc00 	bl	8004728 <HAL_TIM_Base_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf14      	ite	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	2300      	moveq	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8001f38:	f000 fb2c 	bl	8002594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f46:	4619      	mov	r1, r3
 8001f48:	4842      	ldr	r0, [pc, #264]	; (8002054 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f4a:	f002 fef7 	bl	8004d3c <HAL_TIM_ConfigClockSource>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bf14      	ite	ne
 8001f54:	2301      	movne	r3, #1
 8001f56:	2300      	moveq	r3, #0
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8001f5e:	f000 fb19 	bl	8002594 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f62:	483c      	ldr	r0, [pc, #240]	; (8002054 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f64:	f002 fccc 	bl	8004900 <HAL_TIM_PWM_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	bf14      	ite	ne
 8001f6e:	2301      	movne	r3, #1
 8001f70:	2300      	moveq	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8001f78:	f000 fb0c 	bl	8002594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4832      	ldr	r0, [pc, #200]	; (8002054 <_ZL12MX_TIM1_Initv+0x19c>)
 8001f8c:	f003 fadc 	bl	8005548 <HAL_TIMEx_MasterConfigSynchronization>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	bf14      	ite	ne
 8001f96:	2301      	movne	r3, #1
 8001f98:	2300      	moveq	r3, #0
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8001fa0:	f000 faf8 	bl	8002594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fa4:	2360      	movs	r3, #96	; 0x60
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4822      	ldr	r0, [pc, #136]	; (8002054 <_ZL12MX_TIM1_Initv+0x19c>)
 8001fca:	f002 fdf9 	bl	8004bc0 <HAL_TIM_PWM_ConfigChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf14      	ite	ne
 8001fd4:	2301      	movne	r3, #1
 8001fd6:	2300      	moveq	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8001fde:	f000 fad9 	bl	8002594 <Error_Handler>
  }
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fec:	2208      	movs	r2, #8
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4818      	ldr	r0, [pc, #96]	; (8002054 <_ZL12MX_TIM1_Initv+0x19c>)
 8001ff2:	f002 fde5 	bl	8004bc0 <HAL_TIM_PWM_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf14      	ite	ne
 8001ffc:	2301      	movne	r3, #1
 8001ffe:	2300      	moveq	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 8002006:	f000 fac5 	bl	8002594 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002012:	2300      	movs	r3, #0
 8002014:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800201e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002022:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	4619      	mov	r1, r3
 800202c:	4809      	ldr	r0, [pc, #36]	; (8002054 <_ZL12MX_TIM1_Initv+0x19c>)
 800202e:	f003 fae9 	bl	8005604 <HAL_TIMEx_ConfigBreakDeadTime>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <_ZL12MX_TIM1_Initv+0x18e>
  {
    Error_Handler();
 8002042:	f000 faa7 	bl	8002594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002046:	4803      	ldr	r0, [pc, #12]	; (8002054 <_ZL12MX_TIM1_Initv+0x19c>)
 8002048:	f000 fbaa 	bl	80027a0 <HAL_TIM_MspPostInit>

}
 800204c:	bf00      	nop
 800204e:	3758      	adds	r7, #88	; 0x58
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000348 	.word	0x20000348
 8002058:	40012c00 	.word	0x40012c00

0800205c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
 800206e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002070:	463b      	mov	r3, r7
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002078:	4b25      	ldr	r3, [pc, #148]	; (8002110 <_ZL12MX_TIM2_Initv+0xb4>)
 800207a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800207e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002080:	4b23      	ldr	r3, [pc, #140]	; (8002110 <_ZL12MX_TIM2_Initv+0xb4>)
 8002082:	2247      	movs	r2, #71	; 0x47
 8002084:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <_ZL12MX_TIM2_Initv+0xb4>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800208c:	4b20      	ldr	r3, [pc, #128]	; (8002110 <_ZL12MX_TIM2_Initv+0xb4>)
 800208e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002092:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <_ZL12MX_TIM2_Initv+0xb4>)
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <_ZL12MX_TIM2_Initv+0xb4>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020a0:	481b      	ldr	r0, [pc, #108]	; (8002110 <_ZL12MX_TIM2_Initv+0xb4>)
 80020a2:	f002 fb41 	bl	8004728 <HAL_TIM_Base_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf14      	ite	ne
 80020ac:	2301      	movne	r3, #1
 80020ae:	2300      	moveq	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80020b6:	f000 fa6d 	bl	8002594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020c0:	f107 0308 	add.w	r3, r7, #8
 80020c4:	4619      	mov	r1, r3
 80020c6:	4812      	ldr	r0, [pc, #72]	; (8002110 <_ZL12MX_TIM2_Initv+0xb4>)
 80020c8:	f002 fe38 	bl	8004d3c <HAL_TIM_ConfigClockSource>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf14      	ite	ne
 80020d2:	2301      	movne	r3, #1
 80020d4:	2300      	moveq	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 80020dc:	f000 fa5a 	bl	8002594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020e8:	463b      	mov	r3, r7
 80020ea:	4619      	mov	r1, r3
 80020ec:	4808      	ldr	r0, [pc, #32]	; (8002110 <_ZL12MX_TIM2_Initv+0xb4>)
 80020ee:	f003 fa2b 	bl	8005548 <HAL_TIMEx_MasterConfigSynchronization>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf14      	ite	ne
 80020f8:	2301      	movne	r3, #1
 80020fa:	2300      	moveq	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8002102:	f000 fa47 	bl	8002594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000390 	.word	0x20000390

08002114 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211a:	f107 0308 	add.w	r3, r7, #8
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002128:	463b      	mov	r3, r7
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002130:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <_ZL12MX_TIM3_Initv+0xb0>)
 8002132:	4a25      	ldr	r2, [pc, #148]	; (80021c8 <_ZL12MX_TIM3_Initv+0xb4>)
 8002134:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002136:	4b23      	ldr	r3, [pc, #140]	; (80021c4 <_ZL12MX_TIM3_Initv+0xb0>)
 8002138:	2200      	movs	r2, #0
 800213a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <_ZL12MX_TIM3_Initv+0xb0>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <_ZL12MX_TIM3_Initv+0xb0>)
 8002144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002148:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214a:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <_ZL12MX_TIM3_Initv+0xb0>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002150:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <_ZL12MX_TIM3_Initv+0xb0>)
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002156:	481b      	ldr	r0, [pc, #108]	; (80021c4 <_ZL12MX_TIM3_Initv+0xb0>)
 8002158:	f002 fae6 	bl	8004728 <HAL_TIM_Base_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	bf14      	ite	ne
 8002162:	2301      	movne	r3, #1
 8002164:	2300      	moveq	r3, #0
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 800216c:	f000 fa12 	bl	8002594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002174:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002176:	f107 0308 	add.w	r3, r7, #8
 800217a:	4619      	mov	r1, r3
 800217c:	4811      	ldr	r0, [pc, #68]	; (80021c4 <_ZL12MX_TIM3_Initv+0xb0>)
 800217e:	f002 fddd 	bl	8004d3c <HAL_TIM_ConfigClockSource>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf14      	ite	ne
 8002188:	2301      	movne	r3, #1
 800218a:	2300      	moveq	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8002192:	f000 f9ff 	bl	8002594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800219e:	463b      	mov	r3, r7
 80021a0:	4619      	mov	r1, r3
 80021a2:	4808      	ldr	r0, [pc, #32]	; (80021c4 <_ZL12MX_TIM3_Initv+0xb0>)
 80021a4:	f003 f9d0 	bl	8005548 <HAL_TIMEx_MasterConfigSynchronization>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	bf14      	ite	ne
 80021ae:	2301      	movne	r3, #1
 80021b0:	2300      	moveq	r3, #0
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 80021b8:	f000 f9ec 	bl	8002594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021bc:	bf00      	nop
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	200003d8 	.word	0x200003d8
 80021c8:	40000400 	.word	0x40000400

080021cc <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e0:	463b      	mov	r3, r7
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021e8:	4b24      	ldr	r3, [pc, #144]	; (800227c <_ZL12MX_TIM4_Initv+0xb0>)
 80021ea:	4a25      	ldr	r2, [pc, #148]	; (8002280 <_ZL12MX_TIM4_Initv+0xb4>)
 80021ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 80021ee:	4b23      	ldr	r3, [pc, #140]	; (800227c <_ZL12MX_TIM4_Initv+0xb0>)
 80021f0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80021f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f6:	4b21      	ldr	r3, [pc, #132]	; (800227c <_ZL12MX_TIM4_Initv+0xb0>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10 - 1;
 80021fc:	4b1f      	ldr	r3, [pc, #124]	; (800227c <_ZL12MX_TIM4_Initv+0xb0>)
 80021fe:	2209      	movs	r2, #9
 8002200:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <_ZL12MX_TIM4_Initv+0xb0>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002208:	4b1c      	ldr	r3, [pc, #112]	; (800227c <_ZL12MX_TIM4_Initv+0xb0>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800220e:	481b      	ldr	r0, [pc, #108]	; (800227c <_ZL12MX_TIM4_Initv+0xb0>)
 8002210:	f002 fa8a 	bl	8004728 <HAL_TIM_Base_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	bf14      	ite	ne
 800221a:	2301      	movne	r3, #1
 800221c:	2300      	moveq	r3, #0
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <_ZL12MX_TIM4_Initv+0x5c>
  {
    Error_Handler();
 8002224:	f000 f9b6 	bl	8002594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	4619      	mov	r1, r3
 8002234:	4811      	ldr	r0, [pc, #68]	; (800227c <_ZL12MX_TIM4_Initv+0xb0>)
 8002236:	f002 fd81 	bl	8004d3c <HAL_TIM_ConfigClockSource>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	bf14      	ite	ne
 8002240:	2301      	movne	r3, #1
 8002242:	2300      	moveq	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <_ZL12MX_TIM4_Initv+0x82>
  {
    Error_Handler();
 800224a:	f000 f9a3 	bl	8002594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002256:	463b      	mov	r3, r7
 8002258:	4619      	mov	r1, r3
 800225a:	4808      	ldr	r0, [pc, #32]	; (800227c <_ZL12MX_TIM4_Initv+0xb0>)
 800225c:	f003 f974 	bl	8005548 <HAL_TIMEx_MasterConfigSynchronization>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	bf14      	ite	ne
 8002266:	2301      	movne	r3, #1
 8002268:	2300      	moveq	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <_ZL12MX_TIM4_Initv+0xa8>
  {
    Error_Handler();
 8002270:	f000 f990 	bl	8002594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000420 	.word	0x20000420
 8002280:	40000800 	.word	0x40000800

08002284 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 800228a:	4a14      	ldr	r2, [pc, #80]	; (80022dc <_ZL19MX_USART1_UART_Initv+0x58>)
 800228c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80022aa:	220c      	movs	r2, #12
 80022ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ba:	4807      	ldr	r0, [pc, #28]	; (80022d8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80022bc:	f003 fa29 	bl	8005712 <HAL_UART_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf14      	ite	ne
 80022c6:	2301      	movne	r3, #1
 80022c8:	2300      	moveq	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80022d0:	f000 f960 	bl	8002594 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000468 	.word	0x20000468
 80022dc:	40013800 	.word	0x40013800

080022e0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e6:	f107 0310 	add.w	r3, r7, #16
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f4:	4b45      	ldr	r3, [pc, #276]	; (800240c <_ZL12MX_GPIO_Initv+0x12c>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a44      	ldr	r2, [pc, #272]	; (800240c <_ZL12MX_GPIO_Initv+0x12c>)
 80022fa:	f043 0310 	orr.w	r3, r3, #16
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b42      	ldr	r3, [pc, #264]	; (800240c <_ZL12MX_GPIO_Initv+0x12c>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800230c:	4b3f      	ldr	r3, [pc, #252]	; (800240c <_ZL12MX_GPIO_Initv+0x12c>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a3e      	ldr	r2, [pc, #248]	; (800240c <_ZL12MX_GPIO_Initv+0x12c>)
 8002312:	f043 0320 	orr.w	r3, r3, #32
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b3c      	ldr	r3, [pc, #240]	; (800240c <_ZL12MX_GPIO_Initv+0x12c>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002324:	4b39      	ldr	r3, [pc, #228]	; (800240c <_ZL12MX_GPIO_Initv+0x12c>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a38      	ldr	r2, [pc, #224]	; (800240c <_ZL12MX_GPIO_Initv+0x12c>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6193      	str	r3, [r2, #24]
 8002330:	4b36      	ldr	r3, [pc, #216]	; (800240c <_ZL12MX_GPIO_Initv+0x12c>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800233c:	4b33      	ldr	r3, [pc, #204]	; (800240c <_ZL12MX_GPIO_Initv+0x12c>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	4a32      	ldr	r2, [pc, #200]	; (800240c <_ZL12MX_GPIO_Initv+0x12c>)
 8002342:	f043 0308 	orr.w	r3, r3, #8
 8002346:	6193      	str	r3, [r2, #24]
 8002348:	4b30      	ldr	r3, [pc, #192]	; (800240c <_ZL12MX_GPIO_Initv+0x12c>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002354:	2200      	movs	r2, #0
 8002356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800235a:	482d      	ldr	r0, [pc, #180]	; (8002410 <_ZL12MX_GPIO_Initv+0x130>)
 800235c:	f001 fc1f 	bl	8003b9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG_Pin|VALVE_DIR_Pin|PUMP_EN_Pin, GPIO_PIN_RESET);
 8002360:	2200      	movs	r2, #0
 8002362:	f44f 51a1 	mov.w	r1, #5152	; 0x1420
 8002366:	482b      	ldr	r0, [pc, #172]	; (8002414 <_ZL12MX_GPIO_Initv+0x134>)
 8002368:	f001 fc19 	bl	8003b9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 800236c:	2200      	movs	r2, #0
 800236e:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 8002372:	4829      	ldr	r0, [pc, #164]	; (8002418 <_ZL12MX_GPIO_Initv+0x138>)
 8002374:	f001 fc13 	bl	8003b9e <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800237c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237e:	2301      	movs	r3, #1
 8002380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2302      	movs	r3, #2
 8002388:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238a:	f107 0310 	add.w	r3, r7, #16
 800238e:	4619      	mov	r1, r3
 8002390:	481f      	ldr	r0, [pc, #124]	; (8002410 <_ZL12MX_GPIO_Initv+0x130>)
 8002392:	f001 fa69 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pin : SETPOINT_BUT_Pin */
  GPIO_InitStruct.Pin = SETPOINT_BUT_Pin;
 8002396:	2308      	movs	r3, #8
 8002398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SETPOINT_BUT_GPIO_Port, &GPIO_InitStruct);
 80023a2:	f107 0310 	add.w	r3, r7, #16
 80023a6:	4619      	mov	r1, r3
 80023a8:	481b      	ldr	r0, [pc, #108]	; (8002418 <_ZL12MX_GPIO_Initv+0x138>)
 80023aa:	f001 fa5d 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin VALVE_DIR_Pin PUMP_EN_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|VALVE_DIR_Pin|PUMP_EN_Pin;
 80023ae:	f44f 53a1 	mov.w	r3, #5152	; 0x1420
 80023b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2302      	movs	r3, #2
 80023be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	4619      	mov	r1, r3
 80023c6:	4813      	ldr	r0, [pc, #76]	; (8002414 <_ZL12MX_GPIO_Initv+0x134>)
 80023c8:	f001 fa4e 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 80023cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 0310 	add.w	r3, r7, #16
 80023de:	4619      	mov	r1, r3
 80023e0:	480c      	ldr	r0, [pc, #48]	; (8002414 <_ZL12MX_GPIO_Initv+0x134>)
 80023e2:	f001 fa41 	bl	8003868 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 80023e6:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 80023ea:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ec:	2301      	movs	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80023f4:	2301      	movs	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f8:	f107 0310 	add.w	r3, r7, #16
 80023fc:	4619      	mov	r1, r3
 80023fe:	4806      	ldr	r0, [pc, #24]	; (8002418 <_ZL12MX_GPIO_Initv+0x138>)
 8002400:	f001 fa32 	bl	8003868 <HAL_GPIO_Init>

}
 8002404:	bf00      	nop
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	40011000 	.word	0x40011000
 8002414:	40010c00 	.word	0x40010c00
 8002418:	40010800 	.word	0x40010800

0800241c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
	if (htim == &htim4)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d115      	bne.n	8002458 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		LCDMillisCont++;
 800242c:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	3301      	adds	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002436:	801a      	strh	r2, [r3, #0]
		if (LCDMillisCont > 1000*int(LCD_UPDATE_TIME))
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002440:	d90a      	bls.n	8002458 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002442:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002446:	4808      	ldr	r0, [pc, #32]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002448:	f001 fbc1 	bl	8003bce <HAL_GPIO_TogglePin>
			updateLCD = true;
 800244c:	4b07      	ldr	r3, [pc, #28]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]
			LCDMillisCont = 0;
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002454:	2200      	movs	r2, #0
 8002456:	801a      	strh	r2, [r3, #0]
		}
	}

}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000420 	.word	0x20000420
 8002464:	200004f4 	.word	0x200004f4
 8002468:	40011000 	.word	0x40011000
 800246c:	200000ff 	.word	0x200000ff

08002470 <_Z8sendData12HeightSensor>:

void sendData(HeightSensor usensor)
{
 8002470:	b084      	sub	sp, #16
 8002472:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002476:	b097      	sub	sp, #92	; 0x5c
 8002478:	af0a      	add	r7, sp, #40	; 0x28
 800247a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800247e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char buffer[36];
	sprintf(buffer, "%d,%.2f,%.2f,%.2f,%.2f,%.2f\n",
					HAL_GetTick() - startMillis, usensor.getDistRaw(),
 8002482:	f000 fc89 	bl	8002d98 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
	sprintf(buffer, "%d,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 8002488:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <_Z8sendData12HeightSensor+0xc4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	1ad6      	subs	r6, r2, r3
					HAL_GetTick() - startMillis, usensor.getDistRaw(),
 800248e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002492:	f7fe ff0d 	bl	80012b0 <_ZN12HeightSensor10getDistRawEv>
 8002496:	4603      	mov	r3, r0
	sprintf(buffer, "%d,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 8002498:	4618      	mov	r0, r3
 800249a:	f7fd ffc5 	bl	8000428 <__aeabi_f2d>
 800249e:	4604      	mov	r4, r0
 80024a0:	460d      	mov	r5, r1
					usensor.getDistFiltered() ,usensor.getWaterHeight(),
 80024a2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80024a6:	f7fe ff0f 	bl	80012c8 <_ZN12HeightSensor15getDistFilteredEv>
 80024aa:	4603      	mov	r3, r0
	sprintf(buffer, "%d,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fd ffbb 	bl	8000428 <__aeabi_f2d>
 80024b2:	4680      	mov	r8, r0
 80024b4:	4689      	mov	r9, r1
					usensor.getDistFiltered() ,usensor.getWaterHeight(),
 80024b6:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80024ba:	f7fe ff11 	bl	80012e0 <_ZN12HeightSensor14getWaterHeightEv>
 80024be:	4603      	mov	r3, r0
	sprintf(buffer, "%d,%.2f,%.2f,%.2f,%.2f,%.2f\n",
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fd ffb1 	bl	8000428 <__aeabi_f2d>
 80024c6:	4682      	mov	sl, r0
 80024c8:	468b      	mov	fp, r1
 80024ca:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <_Z8sendData12HeightSensor+0xc8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fd ffaa 	bl	8000428 <__aeabi_f2d>
 80024d4:	e9c7 0100 	strd	r0, r1, [r7]
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <_Z8sendData12HeightSensor+0xcc>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd ffa3 	bl	8000428 <__aeabi_f2d>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	f107 000c 	add.w	r0, r7, #12
 80024ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80024ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80024f6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80024fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80024fe:	e9cd 4500 	strd	r4, r5, [sp]
 8002502:	4632      	mov	r2, r6
 8002504:	490e      	ldr	r1, [pc, #56]	; (8002540 <_Z8sendData12HeightSensor+0xd0>)
 8002506:	f003 ff5b 	bl	80063c0 <siprintf>
					setpoint, pidVal);
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 100);
 800250a:	f107 030c 	add.w	r3, r7, #12
 800250e:	4618      	mov	r0, r3
 8002510:	f7fd fe1e 	bl	8000150 <strlen>
 8002514:	4603      	mov	r3, r0
 8002516:	b29a      	uxth	r2, r3
 8002518:	f107 010c 	add.w	r1, r7, #12
 800251c:	2364      	movs	r3, #100	; 0x64
 800251e:	4809      	ldr	r0, [pc, #36]	; (8002544 <_Z8sendData12HeightSensor+0xd4>)
 8002520:	f003 f944 	bl	80057ac <HAL_UART_Transmit>
}
 8002524:	bf00      	nop
 8002526:	3734      	adds	r7, #52	; 0x34
 8002528:	46bd      	mov	sp, r7
 800252a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800252e:	b004      	add	sp, #16
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	200004f8 	.word	0x200004f8
 8002538:	200004ec 	.word	0x200004ec
 800253c:	200004f0 	.word	0x200004f0
 8002540:	080088a8 	.word	0x080088a8
 8002544:	20000468 	.word	0x20000468

08002548 <_Z22setInitialValveOpeningv>:

void setInitialValveOpening()
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VALVE_DIR_GPIO_Port, VALVE_DIR_Pin, GPIO_PIN_RESET);
 800254c:	2200      	movs	r2, #0
 800254e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002552:	480e      	ldr	r0, [pc, #56]	; (800258c <_Z22setInitialValveOpeningv+0x44>)
 8002554:	f001 fb23 	bl	8003b9e <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 625);
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <_Z22setInitialValveOpeningv+0x48>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f240 2271 	movw	r2, #625	; 0x271
 8002560:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(8000);
 8002562:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002566:	f000 fc21 	bl	8002dac <HAL_Delay>
	HAL_GPIO_WritePin(VALVE_DIR_GPIO_Port, VALVE_DIR_Pin, GPIO_PIN_SET);
 800256a:	2201      	movs	r2, #1
 800256c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002570:	4806      	ldr	r0, [pc, #24]	; (800258c <_Z22setInitialValveOpeningv+0x44>)
 8002572:	f001 fb14 	bl	8003b9e <HAL_GPIO_WritePin>
	HAL_Delay(4000);
 8002576:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800257a:	f000 fc17 	bl	8002dac <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, 0);
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <_Z22setInitialValveOpeningv+0x48>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2200      	movs	r2, #0
 8002584:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40010c00 	.word	0x40010c00
 8002590:	20000348 	.word	0x20000348

08002594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002598:	b672      	cpsid	i
}
 800259a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800259c:	e7fe      	b.n	800259c <Error_Handler+0x8>
	...

080025a0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d107      	bne.n	80025c0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d102      	bne.n	80025c0 <_Z41__static_initialization_and_destruction_0ii+0x20>
PIDController pump_pid_controller;
 80025ba:	4809      	ldr	r0, [pc, #36]	; (80025e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80025bc:	f000 fa76 	bl	8002aac <_ZN13PIDControllerC1Ev>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d107      	bne.n	80025d6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d102      	bne.n	80025d6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80025d0:	4803      	ldr	r0, [pc, #12]	; (80025e0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80025d2:	f000 fa90 	bl	8002af6 <_ZN13PIDControllerD1Ev>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200004ac 	.word	0x200004ac

080025e4 <_GLOBAL__sub_I__Z18lcd16x2_init_8bitsP12GPIO_TypeDefttS0_ttttS0_tttt>:
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025ec:	2001      	movs	r0, #1
 80025ee:	f7ff ffd7 	bl	80025a0 <_Z41__static_initialization_and_destruction_0ii>
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <_GLOBAL__sub_D__Z18lcd16x2_init_8bitsP12GPIO_TypeDefttS0_ttttS0_tttt>:
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7ff ffcf 	bl	80025a0 <_Z41__static_initialization_and_destruction_0ii>
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <HAL_MspInit+0x5c>)
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	4a14      	ldr	r2, [pc, #80]	; (8002660 <HAL_MspInit+0x5c>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6193      	str	r3, [r2, #24]
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_MspInit+0x5c>)
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <HAL_MspInit+0x5c>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <HAL_MspInit+0x5c>)
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800262c:	61d3      	str	r3, [r2, #28]
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_MspInit+0x5c>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_MspInit+0x60>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	4a04      	ldr	r2, [pc, #16]	; (8002664 <HAL_MspInit+0x60>)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002656:	bf00      	nop
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr
 8002660:	40021000 	.word	0x40021000
 8002664:	40010000 	.word	0x40010000

08002668 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 0310 	add.w	r3, r7, #16
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <HAL_ADC_MspInit+0x6c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d121      	bne.n	80026cc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002688:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <HAL_ADC_MspInit+0x70>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <HAL_ADC_MspInit+0x70>)
 800268e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002692:	6193      	str	r3, [r2, #24]
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <HAL_ADC_MspInit+0x70>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a0:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <HAL_ADC_MspInit+0x70>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	4a0c      	ldr	r2, [pc, #48]	; (80026d8 <HAL_ADC_MspInit+0x70>)
 80026a6:	f043 0304 	orr.w	r3, r3, #4
 80026aa:	6193      	str	r3, [r2, #24]
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <HAL_ADC_MspInit+0x70>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = SETPOINT_POT_Pin;
 80026b8:	2301      	movs	r3, #1
 80026ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026bc:	2303      	movs	r3, #3
 80026be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SETPOINT_POT_GPIO_Port, &GPIO_InitStruct);
 80026c0:	f107 0310 	add.w	r3, r7, #16
 80026c4:	4619      	mov	r1, r3
 80026c6:	4805      	ldr	r0, [pc, #20]	; (80026dc <HAL_ADC_MspInit+0x74>)
 80026c8:	f001 f8ce 	bl	8003868 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026cc:	bf00      	nop
 80026ce:	3720      	adds	r7, #32
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40012400 	.word	0x40012400
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40010800 	.word	0x40010800

080026e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a28      	ldr	r2, [pc, #160]	; (8002790 <HAL_TIM_Base_MspInit+0xb0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d10c      	bne.n	800270c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026f2:	4b28      	ldr	r3, [pc, #160]	; (8002794 <HAL_TIM_Base_MspInit+0xb4>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	4a27      	ldr	r2, [pc, #156]	; (8002794 <HAL_TIM_Base_MspInit+0xb4>)
 80026f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026fc:	6193      	str	r3, [r2, #24]
 80026fe:	4b25      	ldr	r3, [pc, #148]	; (8002794 <HAL_TIM_Base_MspInit+0xb4>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800270a:	e03c      	b.n	8002786 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002714:	d10c      	bne.n	8002730 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002716:	4b1f      	ldr	r3, [pc, #124]	; (8002794 <HAL_TIM_Base_MspInit+0xb4>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <HAL_TIM_Base_MspInit+0xb4>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	61d3      	str	r3, [r2, #28]
 8002722:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <HAL_TIM_Base_MspInit+0xb4>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]
}
 800272e:	e02a      	b.n	8002786 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a18      	ldr	r2, [pc, #96]	; (8002798 <HAL_TIM_Base_MspInit+0xb8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10c      	bne.n	8002754 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800273a:	4b16      	ldr	r3, [pc, #88]	; (8002794 <HAL_TIM_Base_MspInit+0xb4>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	4a15      	ldr	r2, [pc, #84]	; (8002794 <HAL_TIM_Base_MspInit+0xb4>)
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	61d3      	str	r3, [r2, #28]
 8002746:	4b13      	ldr	r3, [pc, #76]	; (8002794 <HAL_TIM_Base_MspInit+0xb4>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
}
 8002752:	e018      	b.n	8002786 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a10      	ldr	r2, [pc, #64]	; (800279c <HAL_TIM_Base_MspInit+0xbc>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d113      	bne.n	8002786 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800275e:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <HAL_TIM_Base_MspInit+0xb4>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4a0c      	ldr	r2, [pc, #48]	; (8002794 <HAL_TIM_Base_MspInit+0xb4>)
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	61d3      	str	r3, [r2, #28]
 800276a:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_TIM_Base_MspInit+0xb4>)
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	201e      	movs	r0, #30
 800277c:	f001 f83d 	bl	80037fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002780:	201e      	movs	r0, #30
 8002782:	f001 f856 	bl	8003832 <HAL_NVIC_EnableIRQ>
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40021000 	.word	0x40021000
 8002798:	40000400 	.word	0x40000400
 800279c:	40000800 	.word	0x40000800

080027a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a10      	ldr	r2, [pc, #64]	; (80027fc <HAL_TIM_MspPostInit+0x5c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d118      	bne.n	80027f2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_TIM_MspPostInit+0x60>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <HAL_TIM_MspPostInit+0x60>)
 80027c6:	f043 0308 	orr.w	r3, r3, #8
 80027ca:	6193      	str	r3, [r2, #24]
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <HAL_TIM_MspPostInit+0x60>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = VALVE_PWM_Pin|PUMP_PWM_Pin;
 80027d8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80027dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2302      	movs	r3, #2
 80027e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e6:	f107 0310 	add.w	r3, r7, #16
 80027ea:	4619      	mov	r1, r3
 80027ec:	4805      	ldr	r0, [pc, #20]	; (8002804 <HAL_TIM_MspPostInit+0x64>)
 80027ee:	f001 f83b 	bl	8003868 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027f2:	bf00      	nop
 80027f4:	3720      	adds	r7, #32
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40012c00 	.word	0x40012c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40010c00 	.word	0x40010c00

08002808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a22      	ldr	r2, [pc, #136]	; (80028ac <HAL_UART_MspInit+0xa4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d13d      	bne.n	80028a4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002828:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <HAL_UART_MspInit+0xa8>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	4a20      	ldr	r2, [pc, #128]	; (80028b0 <HAL_UART_MspInit+0xa8>)
 800282e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002832:	6193      	str	r3, [r2, #24]
 8002834:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <HAL_UART_MspInit+0xa8>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_UART_MspInit+0xa8>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <HAL_UART_MspInit+0xa8>)
 8002846:	f043 0308 	orr.w	r3, r3, #8
 800284a:	6193      	str	r3, [r2, #24]
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_UART_MspInit+0xa8>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002858:	2340      	movs	r3, #64	; 0x40
 800285a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002860:	2303      	movs	r3, #3
 8002862:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	4619      	mov	r1, r3
 800286a:	4812      	ldr	r0, [pc, #72]	; (80028b4 <HAL_UART_MspInit+0xac>)
 800286c:	f000 fffc 	bl	8003868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002874:	2300      	movs	r3, #0
 8002876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4619      	mov	r1, r3
 8002882:	480c      	ldr	r0, [pc, #48]	; (80028b4 <HAL_UART_MspInit+0xac>)
 8002884:	f000 fff0 	bl	8003868 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_UART_MspInit+0xb0>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
 800289e:	4a06      	ldr	r2, [pc, #24]	; (80028b8 <HAL_UART_MspInit+0xb0>)
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028a4:	bf00      	nop
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40013800 	.word	0x40013800
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010c00 	.word	0x40010c00
 80028b8:	40010000 	.word	0x40010000

080028bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <NMI_Handler+0x4>

080028c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c6:	e7fe      	b.n	80028c6 <HardFault_Handler+0x4>

080028c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <MemManage_Handler+0x4>

080028ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d2:	e7fe      	b.n	80028d2 <BusFault_Handler+0x4>

080028d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <UsageFault_Handler+0x4>

080028da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002902:	f000 fa37 	bl	8002d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <TIM4_IRQHandler+0x10>)
 8002912:	f002 f84d 	bl	80049b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000420 	.word	0x20000420

08002920 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
	return 1;
 8002924:	2301      	movs	r3, #1
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <_kill>:

int _kill(int pid, int sig)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002938:	f003 f8a2 	bl	8005a80 <__errno>
 800293c:	4603      	mov	r3, r0
 800293e:	2216      	movs	r2, #22
 8002940:	601a      	str	r2, [r3, #0]
	return -1;
 8002942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <_exit>:

void _exit (int status)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002956:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff ffe7 	bl	800292e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002960:	e7fe      	b.n	8002960 <_exit+0x12>

08002962 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b086      	sub	sp, #24
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e00a      	b.n	800298a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002974:	f3af 8000 	nop.w
 8002978:	4601      	mov	r1, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	60ba      	str	r2, [r7, #8]
 8002980:	b2ca      	uxtb	r2, r1
 8002982:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3301      	adds	r3, #1
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	429a      	cmp	r2, r3
 8002990:	dbf0      	blt.n	8002974 <_read+0x12>
	}

return len;
 8002992:	687b      	ldr	r3, [r7, #4]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	e009      	b.n	80029c2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	60ba      	str	r2, [r7, #8]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	3301      	adds	r3, #1
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	dbf1      	blt.n	80029ae <_write+0x12>
	}
	return len;
 80029ca:	687b      	ldr	r3, [r7, #4]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_close>:

int _close(int file)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
	return -1;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
 80029f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029fa:	605a      	str	r2, [r3, #4]
	return 0;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <_isatty>:

int _isatty(int file)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	return 1;
 8002a10:	2301      	movs	r3, #1
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
	return 0;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a3c:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <_sbrk+0x5c>)
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <_sbrk+0x60>)
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <_sbrk+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d102      	bne.n	8002a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <_sbrk+0x64>)
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <_sbrk+0x68>)
 8002a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <_sbrk+0x64>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d207      	bcs.n	8002a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a64:	f003 f80c 	bl	8005a80 <__errno>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a72:	e009      	b.n	8002a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <_sbrk+0x64>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <_sbrk+0x64>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <_sbrk+0x64>)
 8002a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a86:	68fb      	ldr	r3, [r7, #12]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20005000 	.word	0x20005000
 8002a94:	00000400 	.word	0x00000400
 8002a98:	200004fc 	.word	0x200004fc
 8002a9c:	20000520 	.word	0x20000520

08002aa0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <_ZN13PIDControllerC1Ev>:
 */

#include "PIDController.h"


PIDController::PIDController()
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	615a      	str	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	61da      	str	r2, [r3, #28]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
{
}
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <_ZN13PIDControllerD1Ev>:
PIDController::PIDController(float kp, float ki, float kd)
  : _kp(kp), _ki(ki), _kd(kd)
{
}

PIDController::~PIDController()
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
{
}
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <_ZN13PIDController7setKPIDEfff>:
{
  this->_millis++;
}

void PIDController::setKPID(float kp, float ki, float kd)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	603b      	str	r3, [r7, #0]
  this->_kp = kp;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	601a      	str	r2, [r3, #0]
  this->_ki = ki;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	605a      	str	r2, [r3, #4]
  this->_kd = kd;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	609a      	str	r2, [r3, #8]
}
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <_ZN13PIDController11setSetpointEf>:
{
  this->_kd = kd;
}

void PIDController::setSetpoint(float setpoint)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  this->_setpoint = setpoint;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <_ZN13PIDController12setPIDLimitsEff>:

void PIDController::setPIDLimits(float min, float max)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
  this->_pid_min = min;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	635a      	str	r2, [r3, #52]	; 0x34
  this->_pid_max = max;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <_ZN13PIDController10processPIDEf>:

float PIDController::processPID(float curr_point)
{
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  this->_curr_time = this->_millis / 1000;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	4a46      	ldr	r2, [pc, #280]	; (8002c98 <_ZN13PIDController10processPIDEf+0x128>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	099b      	lsrs	r3, r3, #6
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe f8a4 	bl	8000cd4 <__aeabi_ui2f>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	621a      	str	r2, [r3, #32]
  this->_delta_time = this->_curr_time - this->_last_time;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1a      	ldr	r2, [r3, #32]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	f7fd ffe7 	bl	8000b70 <__aeabi_fsub>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24

  this->_error = this->_setpoint - curr_point;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	6839      	ldr	r1, [r7, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd ffdd 	bl	8000b70 <__aeabi_fsub>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	60da      	str	r2, [r3, #12]
  this->_sum_error  += this->_error;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4610      	mov	r0, r2
 8002bca:	f7fd ffd3 	bl	8000b74 <__addsf3>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	611a      	str	r2, [r3, #16]
  this->_delta_error = this->_error - this->_last_error;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	4619      	mov	r1, r3
 8002be0:	4610      	mov	r0, r2
 8002be2:	f7fd ffc5 	bl	8000b70 <__aeabi_fsub>
 8002be6:	4603      	mov	r3, r0
 8002be8:	461a      	mov	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	619a      	str	r2, [r3, #24]

  this->_pid_result  = this->_kp * this->_error
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f7fe f8c3 	bl	8000d84 <__aeabi_fmul>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	461c      	mov	r4, r3
                     + this->_ki * this->_sum_error * this->_curr_time;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	f7fe f8b9 	bl	8000d84 <__aeabi_fmul>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	f7fe f8b1 	bl	8000d84 <__aeabi_fmul>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4619      	mov	r1, r3
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7fd ffa4 	bl	8000b74 <__addsf3>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	461a      	mov	r2, r3
  this->_pid_result  = this->_kp * this->_error
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	62da      	str	r2, [r3, #44]	; 0x2c
                    //  + this->_kd * this->_delta_error / this->_delta_time;

  this->_last_time = this->_curr_time;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1a      	ldr	r2, [r3, #32]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	61da      	str	r2, [r3, #28]
  this->_last_error = this->_error;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	615a      	str	r2, [r3, #20]

  this->_pid_result = this->_pid_result < this->_pid_min ? this->_pid_min : this->_pid_result;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	f7fe fa36 	bl	80010c0 <__aeabi_fcmplt>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <_ZN13PIDController10processPIDEf+0xf0>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5e:	e001      	b.n	8002c64 <_ZN13PIDController10processPIDEf+0xf4>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	62d3      	str	r3, [r2, #44]	; 0x2c
  this->_pid_result = this->_pid_result > this->_pid_max ? this->_pid_max : this->_pid_result;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7fe fa42 	bl	80010fc <__aeabi_fcmpgt>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d002      	beq.n	8002c84 <_ZN13PIDController10processPIDEf+0x114>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	e001      	b.n	8002c88 <_ZN13PIDController10processPIDEf+0x118>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

  return this->_pid_result;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd90      	pop	{r4, r7, pc}
 8002c98:	10624dd3 	.word	0x10624dd3

08002c9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c9c:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c9e:	490d      	ldr	r1, [pc, #52]	; (8002cd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ca0:	4a0d      	ldr	r2, [pc, #52]	; (8002cd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ca4:	e002      	b.n	8002cac <LoopCopyDataInit>

08002ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002caa:	3304      	adds	r3, #4

08002cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb0:	d3f9      	bcc.n	8002ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cb4:	4c0a      	ldr	r4, [pc, #40]	; (8002ce0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cb8:	e001      	b.n	8002cbe <LoopFillZerobss>

08002cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cbc:	3204      	adds	r2, #4

08002cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc0:	d3fb      	bcc.n	8002cba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cc2:	f7ff feed 	bl	8002aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cc6:	f002 fee1 	bl	8005a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cca:	f7fe fec5 	bl	8001a58 <main>
  bx lr
 8002cce:	4770      	bx	lr
  ldr r0, =_sdata
 8002cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd4:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8002cd8:	08008cf4 	.word	0x08008cf4
  ldr r2, =_sbss
 8002cdc:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8002ce0:	2000051c 	.word	0x2000051c

08002ce4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ce4:	e7fe      	b.n	8002ce4 <ADC1_2_IRQHandler>
	...

08002ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_Init+0x28>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a07      	ldr	r2, [pc, #28]	; (8002d10 <HAL_Init+0x28>)
 8002cf2:	f043 0310 	orr.w	r3, r3, #16
 8002cf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf8:	2003      	movs	r0, #3
 8002cfa:	f000 fd73 	bl	80037e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cfe:	200f      	movs	r0, #15
 8002d00:	f000 f808 	bl	8002d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d04:	f7ff fc7e 	bl	8002604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40022000 	.word	0x40022000

08002d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_InitTick+0x54>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_InitTick+0x58>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	4619      	mov	r1, r3
 8002d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fd8b 	bl	800384e <HAL_SYSTICK_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e00e      	b.n	8002d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b0f      	cmp	r3, #15
 8002d46:	d80a      	bhi.n	8002d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d50:	f000 fd53 	bl	80037fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d54:	4a06      	ldr	r2, [pc, #24]	; (8002d70 <HAL_InitTick+0x5c>)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e000      	b.n	8002d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000100 	.word	0x20000100
 8002d6c:	20000108 	.word	0x20000108
 8002d70:	20000104 	.word	0x20000104

08002d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_IncTick+0x1c>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_IncTick+0x20>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	4a03      	ldr	r2, [pc, #12]	; (8002d94 <HAL_IncTick+0x20>)
 8002d86:	6013      	str	r3, [r2, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	20000108 	.word	0x20000108
 8002d94:	20000508 	.word	0x20000508

08002d98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d9c:	4b02      	ldr	r3, [pc, #8]	; (8002da8 <HAL_GetTick+0x10>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	20000508 	.word	0x20000508

08002dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db4:	f7ff fff0 	bl	8002d98 <HAL_GetTick>
 8002db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dc4:	d005      	beq.n	8002dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_Delay+0x44>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4413      	add	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dd2:	bf00      	nop
 8002dd4:	f7ff ffe0 	bl	8002d98 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d8f7      	bhi.n	8002dd4 <HAL_Delay+0x28>
  {
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000108 	.word	0x20000108

08002df4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e0be      	b.n	8002f94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff fc18 	bl	8002668 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fbc5 	bl	80035c8 <ADC_ConversionStop_Disable>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f040 8099 	bne.w	8002f82 <HAL_ADC_Init+0x18e>
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f040 8095 	bne.w	8002f82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e60:	f023 0302 	bic.w	r3, r3, #2
 8002e64:	f043 0202 	orr.w	r2, r3, #2
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7b1b      	ldrb	r3, [r3, #12]
 8002e7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e8c:	d003      	beq.n	8002e96 <HAL_ADC_Init+0xa2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <HAL_ADC_Init+0xa8>
 8002e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e9a:	e000      	b.n	8002e9e <HAL_ADC_Init+0xaa>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7d1b      	ldrb	r3, [r3, #20]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d119      	bne.n	8002ee0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	7b1b      	ldrb	r3, [r3, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	035a      	lsls	r2, r3, #13
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	e00b      	b.n	8002ee0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	f043 0201 	orr.w	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <HAL_ADC_Init+0x1a8>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	68b9      	ldr	r1, [r7, #8]
 8002f04:	430b      	orrs	r3, r1
 8002f06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f10:	d003      	beq.n	8002f1a <HAL_ADC_Init+0x126>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d104      	bne.n	8002f24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	051b      	lsls	r3, r3, #20
 8002f22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <HAL_ADC_Init+0x1ac>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d10b      	bne.n	8002f60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f52:	f023 0303 	bic.w	r3, r3, #3
 8002f56:	f043 0201 	orr.w	r2, r3, #1
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f5e:	e018      	b.n	8002f92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	f023 0312 	bic.w	r3, r3, #18
 8002f68:	f043 0210 	orr.w	r2, r3, #16
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	f043 0201 	orr.w	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f80:	e007      	b.n	8002f92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	f043 0210 	orr.w	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	ffe1f7fd 	.word	0xffe1f7fd
 8002fa0:	ff1f0efe 	.word	0xff1f0efe

08002fa4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_Start+0x1a>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e098      	b.n	80030f0 <HAL_ADC_Start+0x14c>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 faa4 	bl	8003514 <ADC_Enable>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f040 8087 	bne.w	80030e6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a41      	ldr	r2, [pc, #260]	; (80030f8 <HAL_ADC_Start+0x154>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d105      	bne.n	8003002 <HAL_ADC_Start+0x5e>
 8002ff6:	4b41      	ldr	r3, [pc, #260]	; (80030fc <HAL_ADC_Start+0x158>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d115      	bne.n	800302e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d026      	beq.n	800306a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003024:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800302c:	e01d      	b.n	800306a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a2f      	ldr	r2, [pc, #188]	; (80030fc <HAL_ADC_Start+0x158>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d004      	beq.n	800304e <HAL_ADC_Start+0xaa>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2b      	ldr	r2, [pc, #172]	; (80030f8 <HAL_ADC_Start+0x154>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d10d      	bne.n	800306a <HAL_ADC_Start+0xc6>
 800304e:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <HAL_ADC_Start+0x158>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003056:	2b00      	cmp	r3, #0
 8003058:	d007      	beq.n	800306a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003062:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d006      	beq.n	8003084 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	f023 0206 	bic.w	r2, r3, #6
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	62da      	str	r2, [r3, #44]	; 0x2c
 8003082:	e002      	b.n	800308a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f06f 0202 	mvn.w	r2, #2
 800309a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030a6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030aa:	d113      	bne.n	80030d4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80030b0:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <HAL_ADC_Start+0x154>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d105      	bne.n	80030c2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_ADC_Start+0x158>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d108      	bne.n	80030d4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80030d0:	609a      	str	r2, [r3, #8]
 80030d2:	e00c      	b.n	80030ee <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	e003      	b.n	80030ee <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40012800 	.word	0x40012800
 80030fc:	40012400 	.word	0x40012400

08003100 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003116:	f7ff fe3f 	bl	8002d98 <HAL_GetTick>
 800311a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	f043 0220 	orr.w	r2, r3, #32
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e0d3      	b.n	80032ea <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d131      	bne.n	80031b4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800315a:	2b00      	cmp	r3, #0
 800315c:	d12a      	bne.n	80031b4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800315e:	e021      	b.n	80031a4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003166:	d01d      	beq.n	80031a4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <HAL_ADC_PollForConversion+0x7e>
 800316e:	f7ff fe13 	bl	8002d98 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	429a      	cmp	r2, r3
 800317c:	d212      	bcs.n	80031a4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10b      	bne.n	80031a4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	f043 0204 	orr.w	r2, r3, #4
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e0a2      	b.n	80032ea <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0d6      	beq.n	8003160 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80031b2:	e070      	b.n	8003296 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80031b4:	4b4f      	ldr	r3, [pc, #316]	; (80032f4 <HAL_ADC_PollForConversion+0x1f4>)
 80031b6:	681c      	ldr	r4, [r3, #0]
 80031b8:	2002      	movs	r0, #2
 80031ba:	f001 f9f1 	bl	80045a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80031be:	4603      	mov	r3, r0
 80031c0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6919      	ldr	r1, [r3, #16]
 80031ca:	4b4b      	ldr	r3, [pc, #300]	; (80032f8 <HAL_ADC_PollForConversion+0x1f8>)
 80031cc:	400b      	ands	r3, r1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d118      	bne.n	8003204 <HAL_ADC_PollForConversion+0x104>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68d9      	ldr	r1, [r3, #12]
 80031d8:	4b48      	ldr	r3, [pc, #288]	; (80032fc <HAL_ADC_PollForConversion+0x1fc>)
 80031da:	400b      	ands	r3, r1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d111      	bne.n	8003204 <HAL_ADC_PollForConversion+0x104>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6919      	ldr	r1, [r3, #16]
 80031e6:	4b46      	ldr	r3, [pc, #280]	; (8003300 <HAL_ADC_PollForConversion+0x200>)
 80031e8:	400b      	ands	r3, r1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d108      	bne.n	8003200 <HAL_ADC_PollForConversion+0x100>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68d9      	ldr	r1, [r3, #12]
 80031f4:	4b43      	ldr	r3, [pc, #268]	; (8003304 <HAL_ADC_PollForConversion+0x204>)
 80031f6:	400b      	ands	r3, r1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_ADC_PollForConversion+0x100>
 80031fc:	2314      	movs	r3, #20
 80031fe:	e020      	b.n	8003242 <HAL_ADC_PollForConversion+0x142>
 8003200:	2329      	movs	r3, #41	; 0x29
 8003202:	e01e      	b.n	8003242 <HAL_ADC_PollForConversion+0x142>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6919      	ldr	r1, [r3, #16]
 800320a:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <HAL_ADC_PollForConversion+0x200>)
 800320c:	400b      	ands	r3, r1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_ADC_PollForConversion+0x120>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68d9      	ldr	r1, [r3, #12]
 8003218:	4b3a      	ldr	r3, [pc, #232]	; (8003304 <HAL_ADC_PollForConversion+0x204>)
 800321a:	400b      	ands	r3, r1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00d      	beq.n	800323c <HAL_ADC_PollForConversion+0x13c>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6919      	ldr	r1, [r3, #16]
 8003226:	4b38      	ldr	r3, [pc, #224]	; (8003308 <HAL_ADC_PollForConversion+0x208>)
 8003228:	400b      	ands	r3, r1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d108      	bne.n	8003240 <HAL_ADC_PollForConversion+0x140>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68d9      	ldr	r1, [r3, #12]
 8003234:	4b34      	ldr	r3, [pc, #208]	; (8003308 <HAL_ADC_PollForConversion+0x208>)
 8003236:	400b      	ands	r3, r1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_ADC_PollForConversion+0x140>
 800323c:	2354      	movs	r3, #84	; 0x54
 800323e:	e000      	b.n	8003242 <HAL_ADC_PollForConversion+0x142>
 8003240:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003242:	fb02 f303 	mul.w	r3, r2, r3
 8003246:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003248:	e021      	b.n	800328e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003250:	d01a      	beq.n	8003288 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <HAL_ADC_PollForConversion+0x168>
 8003258:	f7ff fd9e 	bl	8002d98 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d20f      	bcs.n	8003288 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	429a      	cmp	r2, r3
 800326e:	d90b      	bls.n	8003288 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	f043 0204 	orr.w	r2, r3, #4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e030      	b.n	80032ea <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3301      	adds	r3, #1
 800328c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	429a      	cmp	r2, r3
 8003294:	d8d9      	bhi.n	800324a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f06f 0212 	mvn.w	r2, #18
 800329e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80032b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80032ba:	d115      	bne.n	80032e8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d111      	bne.n	80032e8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	f043 0201 	orr.w	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	371c      	adds	r7, #28
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd90      	pop	{r4, r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000100 	.word	0x20000100
 80032f8:	24924924 	.word	0x24924924
 80032fc:	00924924 	.word	0x00924924
 8003300:	12492492 	.word	0x12492492
 8003304:	00492492 	.word	0x00492492
 8003308:	00249249 	.word	0x00249249

0800330c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x20>
 8003340:	2302      	movs	r3, #2
 8003342:	e0dc      	b.n	80034fe <HAL_ADC_ConfigChannel+0x1da>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b06      	cmp	r3, #6
 8003352:	d81c      	bhi.n	800338e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	3b05      	subs	r3, #5
 8003366:	221f      	movs	r2, #31
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	4019      	ands	r1, r3
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	3b05      	subs	r3, #5
 8003380:	fa00 f203 	lsl.w	r2, r0, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	635a      	str	r2, [r3, #52]	; 0x34
 800338c:	e03c      	b.n	8003408 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b0c      	cmp	r3, #12
 8003394:	d81c      	bhi.n	80033d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	3b23      	subs	r3, #35	; 0x23
 80033a8:	221f      	movs	r2, #31
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	4019      	ands	r1, r3
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	3b23      	subs	r3, #35	; 0x23
 80033c2:	fa00 f203 	lsl.w	r2, r0, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30
 80033ce:	e01b      	b.n	8003408 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	3b41      	subs	r3, #65	; 0x41
 80033e2:	221f      	movs	r2, #31
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	4019      	ands	r1, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	3b41      	subs	r3, #65	; 0x41
 80033fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b09      	cmp	r3, #9
 800340e:	d91c      	bls.n	800344a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68d9      	ldr	r1, [r3, #12]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	3b1e      	subs	r3, #30
 8003422:	2207      	movs	r2, #7
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	4019      	ands	r1, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6898      	ldr	r0, [r3, #8]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	3b1e      	subs	r3, #30
 800343c:	fa00 f203 	lsl.w	r2, r0, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	60da      	str	r2, [r3, #12]
 8003448:	e019      	b.n	800347e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6919      	ldr	r1, [r3, #16]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4413      	add	r3, r2
 800345a:	2207      	movs	r2, #7
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	4019      	ands	r1, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	6898      	ldr	r0, [r3, #8]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4613      	mov	r3, r2
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4413      	add	r3, r2
 8003472:	fa00 f203 	lsl.w	r2, r0, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b10      	cmp	r3, #16
 8003484:	d003      	beq.n	800348e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800348a:	2b11      	cmp	r3, #17
 800348c:	d132      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <HAL_ADC_ConfigChannel+0x1e4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d125      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d126      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80034b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b10      	cmp	r3, #16
 80034bc:	d11a      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034be:	4b13      	ldr	r3, [pc, #76]	; (800350c <HAL_ADC_ConfigChannel+0x1e8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a13      	ldr	r2, [pc, #76]	; (8003510 <HAL_ADC_ConfigChannel+0x1ec>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	0c9a      	lsrs	r2, r3, #18
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034d4:	e002      	b.n	80034dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3b01      	subs	r3, #1
 80034da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f9      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x1b2>
 80034e2:	e007      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	40012400 	.word	0x40012400
 800350c:	20000100 	.word	0x20000100
 8003510:	431bde83 	.word	0x431bde83

08003514 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b01      	cmp	r3, #1
 8003530:	d040      	beq.n	80035b4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0201 	orr.w	r2, r2, #1
 8003540:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003542:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <ADC_Enable+0xac>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1f      	ldr	r2, [pc, #124]	; (80035c4 <ADC_Enable+0xb0>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	0c9b      	lsrs	r3, r3, #18
 800354e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003550:	e002      	b.n	8003558 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	3b01      	subs	r3, #1
 8003556:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f9      	bne.n	8003552 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800355e:	f7ff fc1b 	bl	8002d98 <HAL_GetTick>
 8003562:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003564:	e01f      	b.n	80035a6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003566:	f7ff fc17 	bl	8002d98 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d918      	bls.n	80035a6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d011      	beq.n	80035a6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	f043 0210 	orr.w	r2, r3, #16
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	f043 0201 	orr.w	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e007      	b.n	80035b6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d1d8      	bne.n	8003566 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000100 	.word	0x20000100
 80035c4:	431bde83 	.word	0x431bde83

080035c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d12e      	bne.n	8003640 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035f2:	f7ff fbd1 	bl	8002d98 <HAL_GetTick>
 80035f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035f8:	e01b      	b.n	8003632 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035fa:	f7ff fbcd 	bl	8002d98 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d914      	bls.n	8003632 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b01      	cmp	r3, #1
 8003614:	d10d      	bne.n	8003632 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361a:	f043 0210 	orr.w	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	f043 0201 	orr.w	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e007      	b.n	8003642 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b01      	cmp	r3, #1
 800363e:	d0dc      	beq.n	80035fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <__NVIC_SetPriorityGrouping+0x44>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003668:	4013      	ands	r3, r2
 800366a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800367c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800367e:	4a04      	ldr	r2, [pc, #16]	; (8003690 <__NVIC_SetPriorityGrouping+0x44>)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	60d3      	str	r3, [r2, #12]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <__NVIC_GetPriorityGrouping+0x18>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	f003 0307 	and.w	r3, r3, #7
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	db0b      	blt.n	80036da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	f003 021f 	and.w	r2, r3, #31
 80036c8:	4906      	ldr	r1, [pc, #24]	; (80036e4 <__NVIC_EnableIRQ+0x34>)
 80036ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	2001      	movs	r0, #1
 80036d2:	fa00 f202 	lsl.w	r2, r0, r2
 80036d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	e000e100 	.word	0xe000e100

080036e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	6039      	str	r1, [r7, #0]
 80036f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	db0a      	blt.n	8003712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	490c      	ldr	r1, [pc, #48]	; (8003734 <__NVIC_SetPriority+0x4c>)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	0112      	lsls	r2, r2, #4
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	440b      	add	r3, r1
 800370c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003710:	e00a      	b.n	8003728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	b2da      	uxtb	r2, r3
 8003716:	4908      	ldr	r1, [pc, #32]	; (8003738 <__NVIC_SetPriority+0x50>)
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	3b04      	subs	r3, #4
 8003720:	0112      	lsls	r2, r2, #4
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	440b      	add	r3, r1
 8003726:	761a      	strb	r2, [r3, #24]
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	e000e100 	.word	0xe000e100
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800373c:	b480      	push	{r7}
 800373e:	b089      	sub	sp, #36	; 0x24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f1c3 0307 	rsb	r3, r3, #7
 8003756:	2b04      	cmp	r3, #4
 8003758:	bf28      	it	cs
 800375a:	2304      	movcs	r3, #4
 800375c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3304      	adds	r3, #4
 8003762:	2b06      	cmp	r3, #6
 8003764:	d902      	bls.n	800376c <NVIC_EncodePriority+0x30>
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	3b03      	subs	r3, #3
 800376a:	e000      	b.n	800376e <NVIC_EncodePriority+0x32>
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43da      	mvns	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	401a      	ands	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003784:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	fa01 f303 	lsl.w	r3, r1, r3
 800378e:	43d9      	mvns	r1, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003794:	4313      	orrs	r3, r2
         );
}
 8003796:	4618      	mov	r0, r3
 8003798:	3724      	adds	r7, #36	; 0x24
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr

080037a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037b0:	d301      	bcc.n	80037b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037b2:	2301      	movs	r3, #1
 80037b4:	e00f      	b.n	80037d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b6:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <SysTick_Config+0x40>)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037be:	210f      	movs	r1, #15
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037c4:	f7ff ff90 	bl	80036e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <SysTick_Config+0x40>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <SysTick_Config+0x40>)
 80037d0:	2207      	movs	r2, #7
 80037d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	e000e010 	.word	0xe000e010

080037e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff2d 	bl	800364c <__NVIC_SetPriorityGrouping>
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	4603      	mov	r3, r0
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800380c:	f7ff ff42 	bl	8003694 <__NVIC_GetPriorityGrouping>
 8003810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	6978      	ldr	r0, [r7, #20]
 8003818:	f7ff ff90 	bl	800373c <NVIC_EncodePriority>
 800381c:	4602      	mov	r2, r0
 800381e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff ff5f 	bl	80036e8 <__NVIC_SetPriority>
}
 800382a:	bf00      	nop
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	4603      	mov	r3, r0
 800383a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff35 	bl	80036b0 <__NVIC_EnableIRQ>
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff ffa2 	bl	80037a0 <SysTick_Config>
 800385c:	4603      	mov	r3, r0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003868:	b480      	push	{r7}
 800386a:	b08b      	sub	sp, #44	; 0x2c
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003872:	2300      	movs	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003876:	2300      	movs	r3, #0
 8003878:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800387a:	e169      	b.n	8003b50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800387c:	2201      	movs	r2, #1
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	429a      	cmp	r2, r3
 8003896:	f040 8158 	bne.w	8003b4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4a9a      	ldr	r2, [pc, #616]	; (8003b08 <HAL_GPIO_Init+0x2a0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d05e      	beq.n	8003962 <HAL_GPIO_Init+0xfa>
 80038a4:	4a98      	ldr	r2, [pc, #608]	; (8003b08 <HAL_GPIO_Init+0x2a0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d875      	bhi.n	8003996 <HAL_GPIO_Init+0x12e>
 80038aa:	4a98      	ldr	r2, [pc, #608]	; (8003b0c <HAL_GPIO_Init+0x2a4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d058      	beq.n	8003962 <HAL_GPIO_Init+0xfa>
 80038b0:	4a96      	ldr	r2, [pc, #600]	; (8003b0c <HAL_GPIO_Init+0x2a4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d86f      	bhi.n	8003996 <HAL_GPIO_Init+0x12e>
 80038b6:	4a96      	ldr	r2, [pc, #600]	; (8003b10 <HAL_GPIO_Init+0x2a8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d052      	beq.n	8003962 <HAL_GPIO_Init+0xfa>
 80038bc:	4a94      	ldr	r2, [pc, #592]	; (8003b10 <HAL_GPIO_Init+0x2a8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d869      	bhi.n	8003996 <HAL_GPIO_Init+0x12e>
 80038c2:	4a94      	ldr	r2, [pc, #592]	; (8003b14 <HAL_GPIO_Init+0x2ac>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d04c      	beq.n	8003962 <HAL_GPIO_Init+0xfa>
 80038c8:	4a92      	ldr	r2, [pc, #584]	; (8003b14 <HAL_GPIO_Init+0x2ac>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d863      	bhi.n	8003996 <HAL_GPIO_Init+0x12e>
 80038ce:	4a92      	ldr	r2, [pc, #584]	; (8003b18 <HAL_GPIO_Init+0x2b0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d046      	beq.n	8003962 <HAL_GPIO_Init+0xfa>
 80038d4:	4a90      	ldr	r2, [pc, #576]	; (8003b18 <HAL_GPIO_Init+0x2b0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d85d      	bhi.n	8003996 <HAL_GPIO_Init+0x12e>
 80038da:	2b12      	cmp	r3, #18
 80038dc:	d82a      	bhi.n	8003934 <HAL_GPIO_Init+0xcc>
 80038de:	2b12      	cmp	r3, #18
 80038e0:	d859      	bhi.n	8003996 <HAL_GPIO_Init+0x12e>
 80038e2:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <HAL_GPIO_Init+0x80>)
 80038e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e8:	08003963 	.word	0x08003963
 80038ec:	0800393d 	.word	0x0800393d
 80038f0:	0800394f 	.word	0x0800394f
 80038f4:	08003991 	.word	0x08003991
 80038f8:	08003997 	.word	0x08003997
 80038fc:	08003997 	.word	0x08003997
 8003900:	08003997 	.word	0x08003997
 8003904:	08003997 	.word	0x08003997
 8003908:	08003997 	.word	0x08003997
 800390c:	08003997 	.word	0x08003997
 8003910:	08003997 	.word	0x08003997
 8003914:	08003997 	.word	0x08003997
 8003918:	08003997 	.word	0x08003997
 800391c:	08003997 	.word	0x08003997
 8003920:	08003997 	.word	0x08003997
 8003924:	08003997 	.word	0x08003997
 8003928:	08003997 	.word	0x08003997
 800392c:	08003945 	.word	0x08003945
 8003930:	08003959 	.word	0x08003959
 8003934:	4a79      	ldr	r2, [pc, #484]	; (8003b1c <HAL_GPIO_Init+0x2b4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800393a:	e02c      	b.n	8003996 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	623b      	str	r3, [r7, #32]
          break;
 8003942:	e029      	b.n	8003998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	3304      	adds	r3, #4
 800394a:	623b      	str	r3, [r7, #32]
          break;
 800394c:	e024      	b.n	8003998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	3308      	adds	r3, #8
 8003954:	623b      	str	r3, [r7, #32]
          break;
 8003956:	e01f      	b.n	8003998 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	330c      	adds	r3, #12
 800395e:	623b      	str	r3, [r7, #32]
          break;
 8003960:	e01a      	b.n	8003998 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800396a:	2304      	movs	r3, #4
 800396c:	623b      	str	r3, [r7, #32]
          break;
 800396e:	e013      	b.n	8003998 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d105      	bne.n	8003984 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003978:	2308      	movs	r3, #8
 800397a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69fa      	ldr	r2, [r7, #28]
 8003980:	611a      	str	r2, [r3, #16]
          break;
 8003982:	e009      	b.n	8003998 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003984:	2308      	movs	r3, #8
 8003986:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	615a      	str	r2, [r3, #20]
          break;
 800398e:	e003      	b.n	8003998 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003990:	2300      	movs	r3, #0
 8003992:	623b      	str	r3, [r7, #32]
          break;
 8003994:	e000      	b.n	8003998 <HAL_GPIO_Init+0x130>
          break;
 8003996:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2bff      	cmp	r3, #255	; 0xff
 800399c:	d801      	bhi.n	80039a2 <HAL_GPIO_Init+0x13a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	e001      	b.n	80039a6 <HAL_GPIO_Init+0x13e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3304      	adds	r3, #4
 80039a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2bff      	cmp	r3, #255	; 0xff
 80039ac:	d802      	bhi.n	80039b4 <HAL_GPIO_Init+0x14c>
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	e002      	b.n	80039ba <HAL_GPIO_Init+0x152>
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	3b08      	subs	r3, #8
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	210f      	movs	r1, #15
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	fa01 f303 	lsl.w	r3, r1, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	401a      	ands	r2, r3
 80039cc:	6a39      	ldr	r1, [r7, #32]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	fa01 f303 	lsl.w	r3, r1, r3
 80039d4:	431a      	orrs	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 80b1 	beq.w	8003b4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039e8:	4b4d      	ldr	r3, [pc, #308]	; (8003b20 <HAL_GPIO_Init+0x2b8>)
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	4a4c      	ldr	r2, [pc, #304]	; (8003b20 <HAL_GPIO_Init+0x2b8>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6193      	str	r3, [r2, #24]
 80039f4:	4b4a      	ldr	r3, [pc, #296]	; (8003b20 <HAL_GPIO_Init+0x2b8>)
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a00:	4a48      	ldr	r2, [pc, #288]	; (8003b24 <HAL_GPIO_Init+0x2bc>)
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	089b      	lsrs	r3, r3, #2
 8003a06:	3302      	adds	r3, #2
 8003a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	220f      	movs	r2, #15
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4013      	ands	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a40      	ldr	r2, [pc, #256]	; (8003b28 <HAL_GPIO_Init+0x2c0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d013      	beq.n	8003a54 <HAL_GPIO_Init+0x1ec>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a3f      	ldr	r2, [pc, #252]	; (8003b2c <HAL_GPIO_Init+0x2c4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00d      	beq.n	8003a50 <HAL_GPIO_Init+0x1e8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a3e      	ldr	r2, [pc, #248]	; (8003b30 <HAL_GPIO_Init+0x2c8>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d007      	beq.n	8003a4c <HAL_GPIO_Init+0x1e4>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a3d      	ldr	r2, [pc, #244]	; (8003b34 <HAL_GPIO_Init+0x2cc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d101      	bne.n	8003a48 <HAL_GPIO_Init+0x1e0>
 8003a44:	2303      	movs	r3, #3
 8003a46:	e006      	b.n	8003a56 <HAL_GPIO_Init+0x1ee>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	e004      	b.n	8003a56 <HAL_GPIO_Init+0x1ee>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e002      	b.n	8003a56 <HAL_GPIO_Init+0x1ee>
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <HAL_GPIO_Init+0x1ee>
 8003a54:	2300      	movs	r3, #0
 8003a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a58:	f002 0203 	and.w	r2, r2, #3
 8003a5c:	0092      	lsls	r2, r2, #2
 8003a5e:	4093      	lsls	r3, r2
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a66:	492f      	ldr	r1, [pc, #188]	; (8003b24 <HAL_GPIO_Init+0x2bc>)
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	089b      	lsrs	r3, r3, #2
 8003a6c:	3302      	adds	r3, #2
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d006      	beq.n	8003a8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a80:	4b2d      	ldr	r3, [pc, #180]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	492c      	ldr	r1, [pc, #176]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	600b      	str	r3, [r1, #0]
 8003a8c:	e006      	b.n	8003a9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a8e:	4b2a      	ldr	r3, [pc, #168]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	4928      	ldr	r1, [pc, #160]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d006      	beq.n	8003ab6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003aa8:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	4922      	ldr	r1, [pc, #136]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
 8003ab4:	e006      	b.n	8003ac4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ab6:	4b20      	ldr	r3, [pc, #128]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	491e      	ldr	r1, [pc, #120]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d006      	beq.n	8003ade <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	4918      	ldr	r1, [pc, #96]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]
 8003adc:	e006      	b.n	8003aec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ade:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	4914      	ldr	r1, [pc, #80]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d021      	beq.n	8003b3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003af8:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	490e      	ldr	r1, [pc, #56]	; (8003b38 <HAL_GPIO_Init+0x2d0>)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60cb      	str	r3, [r1, #12]
 8003b04:	e021      	b.n	8003b4a <HAL_GPIO_Init+0x2e2>
 8003b06:	bf00      	nop
 8003b08:	10320000 	.word	0x10320000
 8003b0c:	10310000 	.word	0x10310000
 8003b10:	10220000 	.word	0x10220000
 8003b14:	10210000 	.word	0x10210000
 8003b18:	10120000 	.word	0x10120000
 8003b1c:	10110000 	.word	0x10110000
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40010000 	.word	0x40010000
 8003b28:	40010800 	.word	0x40010800
 8003b2c:	40010c00 	.word	0x40010c00
 8003b30:	40011000 	.word	0x40011000
 8003b34:	40011400 	.word	0x40011400
 8003b38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_GPIO_Init+0x304>)
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	4909      	ldr	r1, [pc, #36]	; (8003b6c <HAL_GPIO_Init+0x304>)
 8003b46:	4013      	ands	r3, r2
 8003b48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f47f ae8e 	bne.w	800387c <HAL_GPIO_Init+0x14>
  }
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	372c      	adds	r7, #44	; 0x2c
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	40010400 	.word	0x40010400

08003b70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	887b      	ldrh	r3, [r7, #2]
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
 8003b8c:	e001      	b.n	8003b92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	807b      	strh	r3, [r7, #2]
 8003baa:	4613      	mov	r3, r2
 8003bac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bae:	787b      	ldrb	r3, [r7, #1]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bb4:	887a      	ldrh	r2, [r7, #2]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003bba:	e003      	b.n	8003bc4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bbc:	887b      	ldrh	r3, [r7, #2]
 8003bbe:	041a      	lsls	r2, r3, #16
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	611a      	str	r2, [r3, #16]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b085      	sub	sp, #20
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003be0:	887a      	ldrh	r2, [r7, #2]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4013      	ands	r3, r2
 8003be6:	041a      	lsls	r2, r3, #16
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	43d9      	mvns	r1, r3
 8003bec:	887b      	ldrh	r3, [r7, #2]
 8003bee:	400b      	ands	r3, r1
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	611a      	str	r2, [r3, #16]
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e26c      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8087 	beq.w	8003d2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c20:	4b92      	ldr	r3, [pc, #584]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d00c      	beq.n	8003c46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c2c:	4b8f      	ldr	r3, [pc, #572]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 030c 	and.w	r3, r3, #12
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d112      	bne.n	8003c5e <HAL_RCC_OscConfig+0x5e>
 8003c38:	4b8c      	ldr	r3, [pc, #560]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c44:	d10b      	bne.n	8003c5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c46:	4b89      	ldr	r3, [pc, #548]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d06c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x12c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d168      	bne.n	8003d2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e246      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x76>
 8003c68:	4b80      	ldr	r3, [pc, #512]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a7f      	ldr	r2, [pc, #508]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	e02e      	b.n	8003cd4 <HAL_RCC_OscConfig+0xd4>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x98>
 8003c7e:	4b7b      	ldr	r3, [pc, #492]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a7a      	ldr	r2, [pc, #488]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b78      	ldr	r3, [pc, #480]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a77      	ldr	r2, [pc, #476]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e01d      	b.n	8003cd4 <HAL_RCC_OscConfig+0xd4>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0xbc>
 8003ca2:	4b72      	ldr	r3, [pc, #456]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a71      	ldr	r2, [pc, #452]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	4b6f      	ldr	r3, [pc, #444]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a6e      	ldr	r2, [pc, #440]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCC_OscConfig+0xd4>
 8003cbc:	4b6b      	ldr	r3, [pc, #428]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a6a      	ldr	r2, [pc, #424]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	4b68      	ldr	r3, [pc, #416]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a67      	ldr	r2, [pc, #412]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d013      	beq.n	8003d04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cdc:	f7ff f85c 	bl	8002d98 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7ff f858 	bl	8002d98 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	; 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e1fa      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	4b5d      	ldr	r3, [pc, #372]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0xe4>
 8003d02:	e014      	b.n	8003d2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7ff f848 	bl	8002d98 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7ff f844 	bl	8002d98 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e1e6      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1e:	4b53      	ldr	r3, [pc, #332]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x10c>
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d063      	beq.n	8003e02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d3a:	4b4c      	ldr	r3, [pc, #304]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00b      	beq.n	8003d5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d46:	4b49      	ldr	r3, [pc, #292]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d11c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x18c>
 8003d52:	4b46      	ldr	r3, [pc, #280]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d116      	bne.n	8003d8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5e:	4b43      	ldr	r3, [pc, #268]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_RCC_OscConfig+0x176>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d001      	beq.n	8003d76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e1ba      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d76:	4b3d      	ldr	r3, [pc, #244]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4939      	ldr	r1, [pc, #228]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8a:	e03a      	b.n	8003e02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d020      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d94:	4b36      	ldr	r3, [pc, #216]	; (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9a:	f7fe fffd 	bl	8002d98 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da2:	f7fe fff9 	bl	8002d98 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e19b      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db4:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0f0      	beq.n	8003da2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc0:	4b2a      	ldr	r3, [pc, #168]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4927      	ldr	r1, [pc, #156]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	600b      	str	r3, [r1, #0]
 8003dd4:	e015      	b.n	8003e02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dd6:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe ffdc 	bl	8002d98 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de4:	f7fe ffd8 	bl	8002d98 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e17a      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df6:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d03a      	beq.n	8003e84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d019      	beq.n	8003e4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e16:	4b17      	ldr	r3, [pc, #92]	; (8003e74 <HAL_RCC_OscConfig+0x274>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1c:	f7fe ffbc 	bl	8002d98 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e24:	f7fe ffb8 	bl	8002d98 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e15a      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e42:	2001      	movs	r0, #1
 8003e44:	f000 fad8 	bl	80043f8 <RCC_Delay>
 8003e48:	e01c      	b.n	8003e84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <HAL_RCC_OscConfig+0x274>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e50:	f7fe ffa2 	bl	8002d98 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e56:	e00f      	b.n	8003e78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e58:	f7fe ff9e 	bl	8002d98 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d908      	bls.n	8003e78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e140      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	42420000 	.word	0x42420000
 8003e74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e78:	4b9e      	ldr	r3, [pc, #632]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e9      	bne.n	8003e58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80a6 	beq.w	8003fde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e96:	4b97      	ldr	r3, [pc, #604]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10d      	bne.n	8003ebe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	4b94      	ldr	r3, [pc, #592]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	4a93      	ldr	r2, [pc, #588]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eac:	61d3      	str	r3, [r2, #28]
 8003eae:	4b91      	ldr	r3, [pc, #580]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebe:	4b8e      	ldr	r3, [pc, #568]	; (80040f8 <HAL_RCC_OscConfig+0x4f8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d118      	bne.n	8003efc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eca:	4b8b      	ldr	r3, [pc, #556]	; (80040f8 <HAL_RCC_OscConfig+0x4f8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a8a      	ldr	r2, [pc, #552]	; (80040f8 <HAL_RCC_OscConfig+0x4f8>)
 8003ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed6:	f7fe ff5f 	bl	8002d98 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ede:	f7fe ff5b 	bl	8002d98 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b64      	cmp	r3, #100	; 0x64
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0fd      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef0:	4b81      	ldr	r3, [pc, #516]	; (80040f8 <HAL_RCC_OscConfig+0x4f8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d106      	bne.n	8003f12 <HAL_RCC_OscConfig+0x312>
 8003f04:	4b7b      	ldr	r3, [pc, #492]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	4a7a      	ldr	r2, [pc, #488]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	6213      	str	r3, [r2, #32]
 8003f10:	e02d      	b.n	8003f6e <HAL_RCC_OscConfig+0x36e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x334>
 8003f1a:	4b76      	ldr	r3, [pc, #472]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	4a75      	ldr	r2, [pc, #468]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	6213      	str	r3, [r2, #32]
 8003f26:	4b73      	ldr	r3, [pc, #460]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	4a72      	ldr	r2, [pc, #456]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f2c:	f023 0304 	bic.w	r3, r3, #4
 8003f30:	6213      	str	r3, [r2, #32]
 8003f32:	e01c      	b.n	8003f6e <HAL_RCC_OscConfig+0x36e>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	2b05      	cmp	r3, #5
 8003f3a:	d10c      	bne.n	8003f56 <HAL_RCC_OscConfig+0x356>
 8003f3c:	4b6d      	ldr	r3, [pc, #436]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	4a6c      	ldr	r2, [pc, #432]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f42:	f043 0304 	orr.w	r3, r3, #4
 8003f46:	6213      	str	r3, [r2, #32]
 8003f48:	4b6a      	ldr	r3, [pc, #424]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	4a69      	ldr	r2, [pc, #420]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	6213      	str	r3, [r2, #32]
 8003f54:	e00b      	b.n	8003f6e <HAL_RCC_OscConfig+0x36e>
 8003f56:	4b67      	ldr	r3, [pc, #412]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4a66      	ldr	r2, [pc, #408]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	6213      	str	r3, [r2, #32]
 8003f62:	4b64      	ldr	r3, [pc, #400]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	4a63      	ldr	r2, [pc, #396]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f68:	f023 0304 	bic.w	r3, r3, #4
 8003f6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d015      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f76:	f7fe ff0f 	bl	8002d98 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fe ff0b 	bl	8002d98 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e0ab      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f94:	4b57      	ldr	r3, [pc, #348]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0ee      	beq.n	8003f7e <HAL_RCC_OscConfig+0x37e>
 8003fa0:	e014      	b.n	8003fcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa2:	f7fe fef9 	bl	8002d98 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa8:	e00a      	b.n	8003fc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003faa:	f7fe fef5 	bl	8002d98 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e095      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc0:	4b4c      	ldr	r3, [pc, #304]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1ee      	bne.n	8003faa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d105      	bne.n	8003fde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd2:	4b48      	ldr	r3, [pc, #288]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	4a47      	ldr	r2, [pc, #284]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 8081 	beq.w	80040ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fe8:	4b42      	ldr	r3, [pc, #264]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 030c 	and.w	r3, r3, #12
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d061      	beq.n	80040b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d146      	bne.n	800408a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffc:	4b3f      	ldr	r3, [pc, #252]	; (80040fc <HAL_RCC_OscConfig+0x4fc>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004002:	f7fe fec9 	bl	8002d98 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400a:	f7fe fec5 	bl	8002d98 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e067      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800401c:	4b35      	ldr	r3, [pc, #212]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1f0      	bne.n	800400a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004030:	d108      	bne.n	8004044 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004032:	4b30      	ldr	r3, [pc, #192]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	492d      	ldr	r1, [pc, #180]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004044:	4b2b      	ldr	r3, [pc, #172]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a19      	ldr	r1, [r3, #32]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	430b      	orrs	r3, r1
 8004056:	4927      	ldr	r1, [pc, #156]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800405c:	4b27      	ldr	r3, [pc, #156]	; (80040fc <HAL_RCC_OscConfig+0x4fc>)
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004062:	f7fe fe99 	bl	8002d98 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406a:	f7fe fe95 	bl	8002d98 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e037      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800407c:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x46a>
 8004088:	e02f      	b.n	80040ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408a:	4b1c      	ldr	r3, [pc, #112]	; (80040fc <HAL_RCC_OscConfig+0x4fc>)
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004090:	f7fe fe82 	bl	8002d98 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004098:	f7fe fe7e 	bl	8002d98 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e020      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x498>
 80040b6:	e018      	b.n	80040ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e013      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040c4:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <HAL_RCC_OscConfig+0x4f4>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d106      	bne.n	80040e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d001      	beq.n	80040ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40007000 	.word	0x40007000
 80040fc:	42420060 	.word	0x42420060

08004100 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0d0      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004114:	4b6a      	ldr	r3, [pc, #424]	; (80042c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d910      	bls.n	8004144 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b67      	ldr	r3, [pc, #412]	; (80042c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 0207 	bic.w	r2, r3, #7
 800412a:	4965      	ldr	r1, [pc, #404]	; (80042c0 <HAL_RCC_ClockConfig+0x1c0>)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b63      	ldr	r3, [pc, #396]	; (80042c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0b8      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d020      	beq.n	8004192 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800415c:	4b59      	ldr	r3, [pc, #356]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	4a58      	ldr	r2, [pc, #352]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004162:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004166:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004174:	4b53      	ldr	r3, [pc, #332]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a52      	ldr	r2, [pc, #328]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800417e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004180:	4b50      	ldr	r3, [pc, #320]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	494d      	ldr	r1, [pc, #308]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 800418e:	4313      	orrs	r3, r2
 8004190:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d040      	beq.n	8004220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a6:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d115      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e07f      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041be:	4b41      	ldr	r3, [pc, #260]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e073      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ce:	4b3d      	ldr	r3, [pc, #244]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e06b      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041de:	4b39      	ldr	r3, [pc, #228]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f023 0203 	bic.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	4936      	ldr	r1, [pc, #216]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041f0:	f7fe fdd2 	bl	8002d98 <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	e00a      	b.n	800420e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f8:	f7fe fdce 	bl	8002d98 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	; 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e053      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420e:	4b2d      	ldr	r3, [pc, #180]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f003 020c 	and.w	r2, r3, #12
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	429a      	cmp	r2, r3
 800421e:	d1eb      	bne.n	80041f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004220:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d210      	bcs.n	8004250 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 0207 	bic.w	r2, r3, #7
 8004236:	4922      	ldr	r1, [pc, #136]	; (80042c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	4313      	orrs	r3, r2
 800423c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e032      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800425c:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4916      	ldr	r1, [pc, #88]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 800426a:	4313      	orrs	r3, r2
 800426c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d009      	beq.n	800428e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800427a:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	490e      	ldr	r1, [pc, #56]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 800428a:	4313      	orrs	r3, r2
 800428c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800428e:	f000 f821 	bl	80042d4 <HAL_RCC_GetSysClockFreq>
 8004292:	4602      	mov	r2, r0
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	490a      	ldr	r1, [pc, #40]	; (80042c8 <HAL_RCC_ClockConfig+0x1c8>)
 80042a0:	5ccb      	ldrb	r3, [r1, r3]
 80042a2:	fa22 f303 	lsr.w	r3, r2, r3
 80042a6:	4a09      	ldr	r2, [pc, #36]	; (80042cc <HAL_RCC_ClockConfig+0x1cc>)
 80042a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <HAL_RCC_ClockConfig+0x1d0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe fd30 	bl	8002d14 <HAL_InitTick>

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40022000 	.word	0x40022000
 80042c4:	40021000 	.word	0x40021000
 80042c8:	080088e8 	.word	0x080088e8
 80042cc:	20000100 	.word	0x20000100
 80042d0:	20000104 	.word	0x20000104

080042d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d4:	b490      	push	{r4, r7}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80042da:	4b2a      	ldr	r3, [pc, #168]	; (8004384 <HAL_RCC_GetSysClockFreq+0xb0>)
 80042dc:	1d3c      	adds	r4, r7, #4
 80042de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80042e4:	f240 2301 	movw	r3, #513	; 0x201
 80042e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	2300      	movs	r3, #0
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	2300      	movs	r3, #0
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042fe:	4b22      	ldr	r3, [pc, #136]	; (8004388 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b04      	cmp	r3, #4
 800430c:	d002      	beq.n	8004314 <HAL_RCC_GetSysClockFreq+0x40>
 800430e:	2b08      	cmp	r3, #8
 8004310:	d003      	beq.n	800431a <HAL_RCC_GetSysClockFreq+0x46>
 8004312:	e02d      	b.n	8004370 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004314:	4b1d      	ldr	r3, [pc, #116]	; (800438c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004316:	623b      	str	r3, [r7, #32]
      break;
 8004318:	e02d      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	0c9b      	lsrs	r3, r3, #18
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004326:	4413      	add	r3, r2
 8004328:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800432c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d013      	beq.n	8004360 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004338:	4b13      	ldr	r3, [pc, #76]	; (8004388 <HAL_RCC_GetSysClockFreq+0xb4>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	0c5b      	lsrs	r3, r3, #17
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004346:	4413      	add	r3, r2
 8004348:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800434c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	4a0e      	ldr	r2, [pc, #56]	; (800438c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004352:	fb02 f203 	mul.w	r2, r2, r3
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	fbb2 f3f3 	udiv	r3, r2, r3
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
 800435e:	e004      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	4a0b      	ldr	r2, [pc, #44]	; (8004390 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004364:	fb02 f303 	mul.w	r3, r2, r3
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	623b      	str	r3, [r7, #32]
      break;
 800436e:	e002      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004370:	4b06      	ldr	r3, [pc, #24]	; (800438c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004372:	623b      	str	r3, [r7, #32]
      break;
 8004374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004376:	6a3b      	ldr	r3, [r7, #32]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3728      	adds	r7, #40	; 0x28
 800437c:	46bd      	mov	sp, r7
 800437e:	bc90      	pop	{r4, r7}
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	080088c8 	.word	0x080088c8
 8004388:	40021000 	.word	0x40021000
 800438c:	007a1200 	.word	0x007a1200
 8004390:	003d0900 	.word	0x003d0900

08004394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004398:	4b02      	ldr	r3, [pc, #8]	; (80043a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800439a:	681b      	ldr	r3, [r3, #0]
}
 800439c:	4618      	mov	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr
 80043a4:	20000100 	.word	0x20000100

080043a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043ac:	f7ff fff2 	bl	8004394 <HAL_RCC_GetHCLKFreq>
 80043b0:	4602      	mov	r2, r0
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	4903      	ldr	r1, [pc, #12]	; (80043cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043be:	5ccb      	ldrb	r3, [r1, r3]
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000
 80043cc:	080088f8 	.word	0x080088f8

080043d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043d4:	f7ff ffde 	bl	8004394 <HAL_RCC_GetHCLKFreq>
 80043d8:	4602      	mov	r2, r0
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	0adb      	lsrs	r3, r3, #11
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	4903      	ldr	r1, [pc, #12]	; (80043f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043e6:	5ccb      	ldrb	r3, [r1, r3]
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40021000 	.word	0x40021000
 80043f4:	080088f8 	.word	0x080088f8

080043f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <RCC_Delay+0x34>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0a      	ldr	r2, [pc, #40]	; (8004430 <RCC_Delay+0x38>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	0a5b      	lsrs	r3, r3, #9
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004414:	bf00      	nop
  }
  while (Delay --);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1e5a      	subs	r2, r3, #1
 800441a:	60fa      	str	r2, [r7, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f9      	bne.n	8004414 <RCC_Delay+0x1c>
}
 8004420:	bf00      	nop
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr
 800442c:	20000100 	.word	0x20000100
 8004430:	10624dd3 	.word	0x10624dd3

08004434 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d07d      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004450:	2300      	movs	r3, #0
 8004452:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004454:	4b4f      	ldr	r3, [pc, #316]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10d      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004460:	4b4c      	ldr	r3, [pc, #304]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	4a4b      	ldr	r2, [pc, #300]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446a:	61d3      	str	r3, [r2, #28]
 800446c:	4b49      	ldr	r3, [pc, #292]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004478:	2301      	movs	r3, #1
 800447a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800447c:	4b46      	ldr	r3, [pc, #280]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d118      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004488:	4b43      	ldr	r3, [pc, #268]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a42      	ldr	r2, [pc, #264]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800448e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004492:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004494:	f7fe fc80 	bl	8002d98 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449a:	e008      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800449c:	f7fe fc7c 	bl	8002d98 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	; 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e06d      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ae:	4b3a      	ldr	r3, [pc, #232]	; (8004598 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044ba:	4b36      	ldr	r3, [pc, #216]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d02e      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d027      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044d8:	4b2e      	ldr	r3, [pc, #184]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044e2:	4b2e      	ldr	r3, [pc, #184]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044e8:	4b2c      	ldr	r3, [pc, #176]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80044ee:	4a29      	ldr	r2, [pc, #164]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d014      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fe:	f7fe fc4b 	bl	8002d98 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004504:	e00a      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004506:	f7fe fc47 	bl	8002d98 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f241 3288 	movw	r2, #5000	; 0x1388
 8004514:	4293      	cmp	r3, r2
 8004516:	d901      	bls.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e036      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451c:	4b1d      	ldr	r3, [pc, #116]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0ee      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004528:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	4917      	ldr	r1, [pc, #92]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004536:	4313      	orrs	r3, r2
 8004538:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800453a:	7dfb      	ldrb	r3, [r7, #23]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d105      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004540:	4b14      	ldr	r3, [pc, #80]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	4a13      	ldr	r2, [pc, #76]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800454a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	490b      	ldr	r1, [pc, #44]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004566:	4313      	orrs	r3, r2
 8004568:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b00      	cmp	r3, #0
 8004574:	d008      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004576:	4b07      	ldr	r3, [pc, #28]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	4904      	ldr	r1, [pc, #16]	; (8004594 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004584:	4313      	orrs	r3, r2
 8004586:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
 8004598:	40007000 	.word	0x40007000
 800459c:	42420440 	.word	0x42420440

080045a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045a0:	b590      	push	{r4, r7, lr}
 80045a2:	b08d      	sub	sp, #52	; 0x34
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045a8:	4b5a      	ldr	r3, [pc, #360]	; (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80045aa:	f107 040c 	add.w	r4, r7, #12
 80045ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045b4:	f240 2301 	movw	r3, #513	; 0x201
 80045b8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
 80045be:	2300      	movs	r3, #0
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c2:	2300      	movs	r3, #0
 80045c4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	2300      	movs	r3, #0
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b10      	cmp	r3, #16
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b10      	cmp	r3, #16
 80045d8:	f200 8091 	bhi.w	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d04c      	beq.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d07c      	beq.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80045e8:	e089      	b.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80045ea:	4b4b      	ldr	r3, [pc, #300]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80045f0:	4b49      	ldr	r3, [pc, #292]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8082 	beq.w	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	0c9b      	lsrs	r3, r3, #18
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800460a:	4413      	add	r3, r2
 800460c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004610:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d018      	beq.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800461c:	4b3e      	ldr	r3, [pc, #248]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	0c5b      	lsrs	r3, r3, #17
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800462a:	4413      	add	r3, r2
 800462c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00d      	beq.n	8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800463c:	4a37      	ldr	r2, [pc, #220]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	fbb2 f2f3 	udiv	r2, r2, r3
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	fb02 f303 	mul.w	r3, r2, r3
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800464c:	e004      	b.n	8004658 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	4a33      	ldr	r2, [pc, #204]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8004652:	fb02 f303 	mul.w	r3, r2, r3
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004658:	4b2f      	ldr	r3, [pc, #188]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004664:	d102      	bne.n	800466c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800466a:	e04a      	b.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800466c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4a2c      	ldr	r2, [pc, #176]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	085b      	lsrs	r3, r3, #1
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800467a:	e042      	b.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800467c:	4b26      	ldr	r3, [pc, #152]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468c:	d108      	bne.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004698:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800469c:	62bb      	str	r3, [r7, #40]	; 0x28
 800469e:	e01f      	b.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046aa:	d109      	bne.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80046ac:	4b1a      	ldr	r3, [pc, #104]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80046b8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80046bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046be:	e00f      	b.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ca:	d11c      	bne.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80046cc:	4b12      	ldr	r3, [pc, #72]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d016      	beq.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80046d8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80046de:	e012      	b.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80046e0:	e011      	b.n	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80046e2:	f7ff fe75 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
 80046e6:	4602      	mov	r2, r0
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	0b9b      	lsrs	r3, r3, #14
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	3301      	adds	r3, #1
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80046fc:	e004      	b.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80046fe:	bf00      	nop
 8004700:	e002      	b.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004702:	bf00      	nop
 8004704:	e000      	b.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004706:	bf00      	nop
    }
  }
  return (frequency);
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800470a:	4618      	mov	r0, r3
 800470c:	3734      	adds	r7, #52	; 0x34
 800470e:	46bd      	mov	sp, r7
 8004710:	bd90      	pop	{r4, r7, pc}
 8004712:	bf00      	nop
 8004714:	080088d8 	.word	0x080088d8
 8004718:	40021000 	.word	0x40021000
 800471c:	007a1200 	.word	0x007a1200
 8004720:	003d0900 	.word	0x003d0900
 8004724:	aaaaaaab 	.word	0xaaaaaaab

08004728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e041      	b.n	80047be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fd ffc6 	bl	80026e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3304      	adds	r3, #4
 8004764:	4619      	mov	r1, r3
 8004766:	4610      	mov	r0, r2
 8004768:	f000 fbd0 	bl	8004f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d001      	beq.n	80047e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e032      	b.n	8004846 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a18      	ldr	r2, [pc, #96]	; (8004850 <HAL_TIM_Base_Start+0x88>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_TIM_Base_Start+0x48>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fa:	d009      	beq.n	8004810 <HAL_TIM_Base_Start+0x48>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a14      	ldr	r2, [pc, #80]	; (8004854 <HAL_TIM_Base_Start+0x8c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_TIM_Base_Start+0x48>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a13      	ldr	r2, [pc, #76]	; (8004858 <HAL_TIM_Base_Start+0x90>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d111      	bne.n	8004834 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b06      	cmp	r3, #6
 8004820:	d010      	beq.n	8004844 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0201 	orr.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004832:	e007      	b.n	8004844 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0201 	orr.w	r2, r2, #1
 8004842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr
 8004850:	40012c00 	.word	0x40012c00
 8004854:	40000400 	.word	0x40000400
 8004858:	40000800 	.word	0x40000800

0800485c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	d001      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e03a      	b.n	80048ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a18      	ldr	r2, [pc, #96]	; (80048f4 <HAL_TIM_Base_Start_IT+0x98>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00e      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x58>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489e:	d009      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x58>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d004      	beq.n	80048b4 <HAL_TIM_Base_Start_IT+0x58>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a13      	ldr	r2, [pc, #76]	; (80048fc <HAL_TIM_Base_Start_IT+0xa0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d111      	bne.n	80048d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2b06      	cmp	r3, #6
 80048c4:	d010      	beq.n	80048e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0201 	orr.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d6:	e007      	b.n	80048e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr
 80048f4:	40012c00 	.word	0x40012c00
 80048f8:	40000400 	.word	0x40000400
 80048fc:	40000800 	.word	0x40000800

08004900 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e041      	b.n	8004996 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f839 	bl	800499e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f000 fae4 	bl	8004f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr

080049b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d122      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d11b      	bne.n	8004a0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0202 	mvn.w	r2, #2
 80049dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fa6f 	bl	8004ed6 <HAL_TIM_IC_CaptureCallback>
 80049f8:	e005      	b.n	8004a06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fa62 	bl	8004ec4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fa71 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d122      	bne.n	8004a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d11b      	bne.n	8004a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0204 	mvn.w	r2, #4
 8004a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2202      	movs	r2, #2
 8004a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 fa45 	bl	8004ed6 <HAL_TIM_IC_CaptureCallback>
 8004a4c:	e005      	b.n	8004a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fa38 	bl	8004ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fa47 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d122      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d11b      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0208 	mvn.w	r2, #8
 8004a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2204      	movs	r2, #4
 8004a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fa1b 	bl	8004ed6 <HAL_TIM_IC_CaptureCallback>
 8004aa0:	e005      	b.n	8004aae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fa0e 	bl	8004ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fa1d 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b10      	cmp	r3, #16
 8004ac0:	d122      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b10      	cmp	r3, #16
 8004ace:	d11b      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0210 	mvn.w	r2, #16
 8004ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2208      	movs	r2, #8
 8004ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f9f1 	bl	8004ed6 <HAL_TIM_IC_CaptureCallback>
 8004af4:	e005      	b.n	8004b02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f9e4 	bl	8004ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f9f3 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d10e      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d107      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0201 	mvn.w	r2, #1
 8004b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fd fc74 	bl	800241c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3e:	2b80      	cmp	r3, #128	; 0x80
 8004b40:	d10e      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4c:	2b80      	cmp	r3, #128	; 0x80
 8004b4e:	d107      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fdac 	bl	80056b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d10e      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b78:	2b40      	cmp	r3, #64	; 0x40
 8004b7a:	d107      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f9b7 	bl	8004efa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d10e      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d107      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0220 	mvn.w	r2, #32
 8004bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fd77 	bl	80056a6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bb8:	bf00      	nop
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e0ac      	b.n	8004d34 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b0c      	cmp	r3, #12
 8004be6:	f200 809f 	bhi.w	8004d28 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004bea:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf0:	08004c25 	.word	0x08004c25
 8004bf4:	08004d29 	.word	0x08004d29
 8004bf8:	08004d29 	.word	0x08004d29
 8004bfc:	08004d29 	.word	0x08004d29
 8004c00:	08004c65 	.word	0x08004c65
 8004c04:	08004d29 	.word	0x08004d29
 8004c08:	08004d29 	.word	0x08004d29
 8004c0c:	08004d29 	.word	0x08004d29
 8004c10:	08004ca7 	.word	0x08004ca7
 8004c14:	08004d29 	.word	0x08004d29
 8004c18:	08004d29 	.word	0x08004d29
 8004c1c:	08004d29 	.word	0x08004d29
 8004c20:	08004ce7 	.word	0x08004ce7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 f9d0 	bl	8004fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0208 	orr.w	r2, r2, #8
 8004c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 0204 	bic.w	r2, r2, #4
 8004c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6999      	ldr	r1, [r3, #24]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	619a      	str	r2, [r3, #24]
      break;
 8004c62:	e062      	b.n	8004d2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fa16 	bl	800509c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6999      	ldr	r1, [r3, #24]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	021a      	lsls	r2, r3, #8
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	619a      	str	r2, [r3, #24]
      break;
 8004ca4:	e041      	b.n	8004d2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f000 fa5f 	bl	8005170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0208 	orr.w	r2, r2, #8
 8004cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	69da      	ldr	r2, [r3, #28]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0204 	bic.w	r2, r2, #4
 8004cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69d9      	ldr	r1, [r3, #28]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	61da      	str	r2, [r3, #28]
      break;
 8004ce4:	e021      	b.n	8004d2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 faa9 	bl	8005244 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69d9      	ldr	r1, [r3, #28]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	021a      	lsls	r2, r3, #8
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	61da      	str	r2, [r3, #28]
      break;
 8004d26:	e000      	b.n	8004d2a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004d28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIM_ConfigClockSource+0x18>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e0b3      	b.n	8004ebc <HAL_TIM_ConfigClockSource+0x180>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8c:	d03e      	beq.n	8004e0c <HAL_TIM_ConfigClockSource+0xd0>
 8004d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d92:	f200 8087 	bhi.w	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9a:	f000 8085 	beq.w	8004ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da2:	d87f      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004da4:	2b70      	cmp	r3, #112	; 0x70
 8004da6:	d01a      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0xa2>
 8004da8:	2b70      	cmp	r3, #112	; 0x70
 8004daa:	d87b      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004dac:	2b60      	cmp	r3, #96	; 0x60
 8004dae:	d050      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x116>
 8004db0:	2b60      	cmp	r3, #96	; 0x60
 8004db2:	d877      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004db4:	2b50      	cmp	r3, #80	; 0x50
 8004db6:	d03c      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0xf6>
 8004db8:	2b50      	cmp	r3, #80	; 0x50
 8004dba:	d873      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d058      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0x136>
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	d86f      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004dc4:	2b30      	cmp	r3, #48	; 0x30
 8004dc6:	d064      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x156>
 8004dc8:	2b30      	cmp	r3, #48	; 0x30
 8004dca:	d86b      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d060      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x156>
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d867      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d05c      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x156>
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d05a      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ddc:	e062      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6899      	ldr	r1, [r3, #8]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f000 faee 	bl	80053ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e00:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	609a      	str	r2, [r3, #8]
      break;
 8004e0a:	e04e      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	6899      	ldr	r1, [r3, #8]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f000 fad7 	bl	80053ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e2e:	609a      	str	r2, [r3, #8]
      break;
 8004e30:	e03b      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6859      	ldr	r1, [r3, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f000 fa4e 	bl	80052e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2150      	movs	r1, #80	; 0x50
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 faa5 	bl	800539a <TIM_ITRx_SetConfig>
      break;
 8004e50:	e02b      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6859      	ldr	r1, [r3, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f000 fa6c 	bl	800533c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2160      	movs	r1, #96	; 0x60
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fa95 	bl	800539a <TIM_ITRx_SetConfig>
      break;
 8004e70:	e01b      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6859      	ldr	r1, [r3, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f000 fa2e 	bl	80052e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2140      	movs	r1, #64	; 0x40
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fa85 	bl	800539a <TIM_ITRx_SetConfig>
      break;
 8004e90:	e00b      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f000 fa7c 	bl	800539a <TIM_ITRx_SetConfig>
        break;
 8004ea2:	e002      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ea4:	bf00      	nop
 8004ea6:	e000      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ea8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr

08004ed6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr

08004efa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr

08004f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a29      	ldr	r2, [pc, #164]	; (8004fc4 <TIM_Base_SetConfig+0xb8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00b      	beq.n	8004f3c <TIM_Base_SetConfig+0x30>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2a:	d007      	beq.n	8004f3c <TIM_Base_SetConfig+0x30>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a26      	ldr	r2, [pc, #152]	; (8004fc8 <TIM_Base_SetConfig+0xbc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d003      	beq.n	8004f3c <TIM_Base_SetConfig+0x30>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a25      	ldr	r2, [pc, #148]	; (8004fcc <TIM_Base_SetConfig+0xc0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d108      	bne.n	8004f4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a1c      	ldr	r2, [pc, #112]	; (8004fc4 <TIM_Base_SetConfig+0xb8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00b      	beq.n	8004f6e <TIM_Base_SetConfig+0x62>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5c:	d007      	beq.n	8004f6e <TIM_Base_SetConfig+0x62>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a19      	ldr	r2, [pc, #100]	; (8004fc8 <TIM_Base_SetConfig+0xbc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d003      	beq.n	8004f6e <TIM_Base_SetConfig+0x62>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <TIM_Base_SetConfig+0xc0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d108      	bne.n	8004f80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a07      	ldr	r2, [pc, #28]	; (8004fc4 <TIM_Base_SetConfig+0xb8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d103      	bne.n	8004fb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	615a      	str	r2, [r3, #20]
}
 8004fba:	bf00      	nop
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr
 8004fc4:	40012c00 	.word	0x40012c00
 8004fc8:	40000400 	.word	0x40000400
 8004fcc:	40000800 	.word	0x40000800

08004fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 0201 	bic.w	r2, r3, #1
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0303 	bic.w	r3, r3, #3
 8005006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f023 0302 	bic.w	r3, r3, #2
 8005018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a1c      	ldr	r2, [pc, #112]	; (8005098 <TIM_OC1_SetConfig+0xc8>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d10c      	bne.n	8005046 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f023 0308 	bic.w	r3, r3, #8
 8005032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f023 0304 	bic.w	r3, r3, #4
 8005044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a13      	ldr	r2, [pc, #76]	; (8005098 <TIM_OC1_SetConfig+0xc8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d111      	bne.n	8005072 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800505c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	621a      	str	r2, [r3, #32]
}
 800508c:	bf00      	nop
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	bc80      	pop	{r7}
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40012c00 	.word	0x40012c00

0800509c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f023 0210 	bic.w	r2, r3, #16
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f023 0320 	bic.w	r3, r3, #32
 80050e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a1d      	ldr	r2, [pc, #116]	; (800516c <TIM_OC2_SetConfig+0xd0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d10d      	bne.n	8005118 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005116:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a14      	ldr	r2, [pc, #80]	; (800516c <TIM_OC2_SetConfig+0xd0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d113      	bne.n	8005148 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005126:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800512e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	40012c00 	.word	0x40012c00

08005170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0303 	bic.w	r3, r3, #3
 80051a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	021b      	lsls	r3, r3, #8
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a1d      	ldr	r2, [pc, #116]	; (8005240 <TIM_OC3_SetConfig+0xd0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d10d      	bne.n	80051ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a14      	ldr	r2, [pc, #80]	; (8005240 <TIM_OC3_SetConfig+0xd0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d113      	bne.n	800521a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	621a      	str	r2, [r3, #32]
}
 8005234:	bf00      	nop
 8005236:	371c      	adds	r7, #28
 8005238:	46bd      	mov	sp, r7
 800523a:	bc80      	pop	{r7}
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40012c00 	.word	0x40012c00

08005244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	021b      	lsls	r3, r3, #8
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800528e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	031b      	lsls	r3, r3, #12
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a0f      	ldr	r2, [pc, #60]	; (80052dc <TIM_OC4_SetConfig+0x98>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d109      	bne.n	80052b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	019b      	lsls	r3, r3, #6
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	621a      	str	r2, [r3, #32]
}
 80052d2:	bf00      	nop
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr
 80052dc:	40012c00 	.word	0x40012c00

080052e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f023 0201 	bic.w	r2, r3, #1
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800530a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	4313      	orrs	r3, r2
 8005314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f023 030a 	bic.w	r3, r3, #10
 800531c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr

0800533c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	f023 0210 	bic.w	r2, r3, #16
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005366:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	031b      	lsls	r3, r3, #12
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005378:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	621a      	str	r2, [r3, #32]
}
 8005390:	bf00      	nop
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr

0800539a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	f043 0307 	orr.w	r3, r3, #7
 80053bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	609a      	str	r2, [r3, #8]
}
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bc80      	pop	{r7}
 80053cc:	4770      	bx	lr

080053ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b087      	sub	sp, #28
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	021a      	lsls	r2, r3, #8
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	609a      	str	r2, [r3, #8]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <HAL_TIMEx_PWMN_Start+0x24>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	bf14      	ite	ne
 8005428:	2301      	movne	r3, #1
 800542a:	2300      	moveq	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e022      	b.n	8005476 <HAL_TIMEx_PWMN_Start+0x6a>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b04      	cmp	r3, #4
 8005434:	d109      	bne.n	800544a <HAL_TIMEx_PWMN_Start+0x3e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	bf14      	ite	ne
 8005442:	2301      	movne	r3, #1
 8005444:	2300      	moveq	r3, #0
 8005446:	b2db      	uxtb	r3, r3
 8005448:	e015      	b.n	8005476 <HAL_TIMEx_PWMN_Start+0x6a>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d109      	bne.n	8005464 <HAL_TIMEx_PWMN_Start+0x58>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	bf14      	ite	ne
 800545c:	2301      	movne	r3, #1
 800545e:	2300      	moveq	r3, #0
 8005460:	b2db      	uxtb	r3, r3
 8005462:	e008      	b.n	8005476 <HAL_TIMEx_PWMN_Start+0x6a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	bf14      	ite	ne
 8005470:	2301      	movne	r3, #1
 8005472:	2300      	moveq	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e059      	b.n	8005532 <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d104      	bne.n	800548e <HAL_TIMEx_PWMN_Start+0x82>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800548c:	e013      	b.n	80054b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b04      	cmp	r3, #4
 8005492:	d104      	bne.n	800549e <HAL_TIMEx_PWMN_Start+0x92>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800549c:	e00b      	b.n	80054b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d104      	bne.n	80054ae <HAL_TIMEx_PWMN_Start+0xa2>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ac:	e003      	b.n	80054b6 <HAL_TIMEx_PWMN_Start+0xaa>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2204      	movs	r2, #4
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 f903 	bl	80056ca <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a18      	ldr	r2, [pc, #96]	; (800553c <HAL_TIMEx_PWMN_Start+0x130>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00e      	beq.n	80054fc <HAL_TIMEx_PWMN_Start+0xf0>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e6:	d009      	beq.n	80054fc <HAL_TIMEx_PWMN_Start+0xf0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a14      	ldr	r2, [pc, #80]	; (8005540 <HAL_TIMEx_PWMN_Start+0x134>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d004      	beq.n	80054fc <HAL_TIMEx_PWMN_Start+0xf0>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a13      	ldr	r2, [pc, #76]	; (8005544 <HAL_TIMEx_PWMN_Start+0x138>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d111      	bne.n	8005520 <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b06      	cmp	r3, #6
 800550c:	d010      	beq.n	8005530 <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0201 	orr.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551e:	e007      	b.n	8005530 <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	40012c00 	.word	0x40012c00
 8005540:	40000400 	.word	0x40000400
 8005544:	40000800 	.word	0x40000800

08005548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800555c:	2302      	movs	r3, #2
 800555e:	e046      	b.n	80055ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00e      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ac:	d009      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a12      	ldr	r2, [pc, #72]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d004      	beq.n	80055c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a10      	ldr	r2, [pc, #64]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d10c      	bne.n	80055dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr
 80055f8:	40012c00 	.word	0x40012c00
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800

08005604 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800561c:	2302      	movs	r3, #2
 800561e:	e03d      	b.n	800569c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr

080056a6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bc80      	pop	{r7}
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bc80      	pop	{r7}
 80056c8:	4770      	bx	lr

080056ca <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b087      	sub	sp, #28
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	60f8      	str	r0, [r7, #12]
 80056d2:	60b9      	str	r1, [r7, #8]
 80056d4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	2204      	movs	r2, #4
 80056de:	fa02 f303 	lsl.w	r3, r2, r3
 80056e2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a1a      	ldr	r2, [r3, #32]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	43db      	mvns	r3, r3
 80056ec:	401a      	ands	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a1a      	ldr	r2, [r3, #32]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f003 031f 	and.w	r3, r3, #31
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005702:	431a      	orrs	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	621a      	str	r2, [r3, #32]
}
 8005708:	bf00      	nop
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr

08005712 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e03f      	b.n	80057a4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d106      	bne.n	800573e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7fd f865 	bl	8002808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2224      	movs	r2, #36	; 0x24
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005754:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f904 	bl	8005964 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800576a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695a      	ldr	r2, [r3, #20]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800577a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800578a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2220      	movs	r2, #32
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08a      	sub	sp, #40	; 0x28
 80057b0:	af02      	add	r7, sp, #8
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	4613      	mov	r3, r2
 80057ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b20      	cmp	r3, #32
 80057ca:	d17c      	bne.n	80058c6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <HAL_UART_Transmit+0x2c>
 80057d2:	88fb      	ldrh	r3, [r7, #6]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e075      	b.n	80058c8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <HAL_UART_Transmit+0x3e>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e06e      	b.n	80058c8 <HAL_UART_Transmit+0x11c>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2221      	movs	r2, #33	; 0x21
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005800:	f7fd faca 	bl	8002d98 <HAL_GetTick>
 8005804:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	88fa      	ldrh	r2, [r7, #6]
 800580a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	88fa      	ldrh	r2, [r7, #6]
 8005810:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581a:	d108      	bne.n	800582e <HAL_UART_Transmit+0x82>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d104      	bne.n	800582e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005824:	2300      	movs	r3, #0
 8005826:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	e003      	b.n	8005836 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800583e:	e02a      	b.n	8005896 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2200      	movs	r2, #0
 8005848:	2180      	movs	r1, #128	; 0x80
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 f840 	bl	80058d0 <UART_WaitOnFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e036      	b.n	80058c8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10b      	bne.n	8005878 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800586e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	3302      	adds	r3, #2
 8005874:	61bb      	str	r3, [r7, #24]
 8005876:	e007      	b.n	8005888 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	781a      	ldrb	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	3301      	adds	r3, #1
 8005886:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1cf      	bne.n	8005840 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2200      	movs	r2, #0
 80058a8:	2140      	movs	r1, #64	; 0x40
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f810 	bl	80058d0 <UART_WaitOnFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e006      	b.n	80058c8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e000      	b.n	80058c8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058c6:	2302      	movs	r3, #2
  }
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	4613      	mov	r3, r2
 80058de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e0:	e02c      	b.n	800593c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e8:	d028      	beq.n	800593c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d007      	beq.n	8005900 <UART_WaitOnFlagUntilTimeout+0x30>
 80058f0:	f7fd fa52 	bl	8002d98 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d21d      	bcs.n	800593c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800590e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695a      	ldr	r2, [r3, #20]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0201 	bic.w	r2, r2, #1
 800591e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e00f      	b.n	800595c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	4013      	ands	r3, r2
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	429a      	cmp	r2, r3
 800594a:	bf0c      	ite	eq
 800594c:	2301      	moveq	r3, #1
 800594e:	2300      	movne	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	461a      	mov	r2, r3
 8005954:	79fb      	ldrb	r3, [r7, #7]
 8005956:	429a      	cmp	r2, r3
 8005958:	d0c3      	beq.n	80058e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800599e:	f023 030c 	bic.w	r3, r3, #12
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	430b      	orrs	r3, r1
 80059aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a2c      	ldr	r2, [pc, #176]	; (8005a78 <UART_SetConfig+0x114>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d103      	bne.n	80059d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059cc:	f7fe fd00 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	e002      	b.n	80059da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059d4:	f7fe fce8 	bl	80043a8 <HAL_RCC_GetPCLK1Freq>
 80059d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	009a      	lsls	r2, r3, #2
 80059e4:	441a      	add	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f0:	4a22      	ldr	r2, [pc, #136]	; (8005a7c <UART_SetConfig+0x118>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	0119      	lsls	r1, r3, #4
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	009a      	lsls	r2, r3, #2
 8005a04:	441a      	add	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a10:	4b1a      	ldr	r3, [pc, #104]	; (8005a7c <UART_SetConfig+0x118>)
 8005a12:	fba3 0302 	umull	r0, r3, r3, r2
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	2064      	movs	r0, #100	; 0x64
 8005a1a:	fb00 f303 	mul.w	r3, r0, r3
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	3332      	adds	r3, #50	; 0x32
 8005a24:	4a15      	ldr	r2, [pc, #84]	; (8005a7c <UART_SetConfig+0x118>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a30:	4419      	add	r1, r3
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009a      	lsls	r2, r3, #2
 8005a3c:	441a      	add	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a48:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <UART_SetConfig+0x118>)
 8005a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	2064      	movs	r0, #100	; 0x64
 8005a52:	fb00 f303 	mul.w	r3, r0, r3
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	3332      	adds	r3, #50	; 0x32
 8005a5c:	4a07      	ldr	r2, [pc, #28]	; (8005a7c <UART_SetConfig+0x118>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	f003 020f 	and.w	r2, r3, #15
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	440a      	add	r2, r1
 8005a6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a70:	bf00      	nop
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40013800 	.word	0x40013800
 8005a7c:	51eb851f 	.word	0x51eb851f

08005a80 <__errno>:
 8005a80:	4b01      	ldr	r3, [pc, #4]	; (8005a88 <__errno+0x8>)
 8005a82:	6818      	ldr	r0, [r3, #0]
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	2000010c 	.word	0x2000010c

08005a8c <__libc_init_array>:
 8005a8c:	b570      	push	{r4, r5, r6, lr}
 8005a8e:	2600      	movs	r6, #0
 8005a90:	4d0c      	ldr	r5, [pc, #48]	; (8005ac4 <__libc_init_array+0x38>)
 8005a92:	4c0d      	ldr	r4, [pc, #52]	; (8005ac8 <__libc_init_array+0x3c>)
 8005a94:	1b64      	subs	r4, r4, r5
 8005a96:	10a4      	asrs	r4, r4, #2
 8005a98:	42a6      	cmp	r6, r4
 8005a9a:	d109      	bne.n	8005ab0 <__libc_init_array+0x24>
 8005a9c:	f002 fedc 	bl	8008858 <_init>
 8005aa0:	2600      	movs	r6, #0
 8005aa2:	4d0a      	ldr	r5, [pc, #40]	; (8005acc <__libc_init_array+0x40>)
 8005aa4:	4c0a      	ldr	r4, [pc, #40]	; (8005ad0 <__libc_init_array+0x44>)
 8005aa6:	1b64      	subs	r4, r4, r5
 8005aa8:	10a4      	asrs	r4, r4, #2
 8005aaa:	42a6      	cmp	r6, r4
 8005aac:	d105      	bne.n	8005aba <__libc_init_array+0x2e>
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab4:	4798      	blx	r3
 8005ab6:	3601      	adds	r6, #1
 8005ab8:	e7ee      	b.n	8005a98 <__libc_init_array+0xc>
 8005aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005abe:	4798      	blx	r3
 8005ac0:	3601      	adds	r6, #1
 8005ac2:	e7f2      	b.n	8005aaa <__libc_init_array+0x1e>
 8005ac4:	08008ce4 	.word	0x08008ce4
 8005ac8:	08008ce4 	.word	0x08008ce4
 8005acc:	08008ce4 	.word	0x08008ce4
 8005ad0:	08008cec 	.word	0x08008cec

08005ad4 <memcpy>:
 8005ad4:	440a      	add	r2, r1
 8005ad6:	4291      	cmp	r1, r2
 8005ad8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005adc:	d100      	bne.n	8005ae0 <memcpy+0xc>
 8005ade:	4770      	bx	lr
 8005ae0:	b510      	push	{r4, lr}
 8005ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ae6:	4291      	cmp	r1, r2
 8005ae8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aec:	d1f9      	bne.n	8005ae2 <memcpy+0xe>
 8005aee:	bd10      	pop	{r4, pc}

08005af0 <memset>:
 8005af0:	4603      	mov	r3, r0
 8005af2:	4402      	add	r2, r0
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d100      	bne.n	8005afa <memset+0xa>
 8005af8:	4770      	bx	lr
 8005afa:	f803 1b01 	strb.w	r1, [r3], #1
 8005afe:	e7f9      	b.n	8005af4 <memset+0x4>

08005b00 <__cvt>:
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b06:	461f      	mov	r7, r3
 8005b08:	bfbb      	ittet	lt
 8005b0a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005b0e:	461f      	movlt	r7, r3
 8005b10:	2300      	movge	r3, #0
 8005b12:	232d      	movlt	r3, #45	; 0x2d
 8005b14:	b088      	sub	sp, #32
 8005b16:	4614      	mov	r4, r2
 8005b18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b1a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005b1c:	7013      	strb	r3, [r2, #0]
 8005b1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b20:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005b24:	f023 0820 	bic.w	r8, r3, #32
 8005b28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b2c:	d005      	beq.n	8005b3a <__cvt+0x3a>
 8005b2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b32:	d100      	bne.n	8005b36 <__cvt+0x36>
 8005b34:	3501      	adds	r5, #1
 8005b36:	2302      	movs	r3, #2
 8005b38:	e000      	b.n	8005b3c <__cvt+0x3c>
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	aa07      	add	r2, sp, #28
 8005b3e:	9204      	str	r2, [sp, #16]
 8005b40:	aa06      	add	r2, sp, #24
 8005b42:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005b46:	e9cd 3500 	strd	r3, r5, [sp]
 8005b4a:	4622      	mov	r2, r4
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	f000 fd07 	bl	8006560 <_dtoa_r>
 8005b52:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b56:	4606      	mov	r6, r0
 8005b58:	d102      	bne.n	8005b60 <__cvt+0x60>
 8005b5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b5c:	07db      	lsls	r3, r3, #31
 8005b5e:	d522      	bpl.n	8005ba6 <__cvt+0xa6>
 8005b60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b64:	eb06 0905 	add.w	r9, r6, r5
 8005b68:	d110      	bne.n	8005b8c <__cvt+0x8c>
 8005b6a:	7833      	ldrb	r3, [r6, #0]
 8005b6c:	2b30      	cmp	r3, #48	; 0x30
 8005b6e:	d10a      	bne.n	8005b86 <__cvt+0x86>
 8005b70:	2200      	movs	r2, #0
 8005b72:	2300      	movs	r3, #0
 8005b74:	4620      	mov	r0, r4
 8005b76:	4639      	mov	r1, r7
 8005b78:	f7fa ff16 	bl	80009a8 <__aeabi_dcmpeq>
 8005b7c:	b918      	cbnz	r0, 8005b86 <__cvt+0x86>
 8005b7e:	f1c5 0501 	rsb	r5, r5, #1
 8005b82:	f8ca 5000 	str.w	r5, [sl]
 8005b86:	f8da 3000 	ldr.w	r3, [sl]
 8005b8a:	4499      	add	r9, r3
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2300      	movs	r3, #0
 8005b90:	4620      	mov	r0, r4
 8005b92:	4639      	mov	r1, r7
 8005b94:	f7fa ff08 	bl	80009a8 <__aeabi_dcmpeq>
 8005b98:	b108      	cbz	r0, 8005b9e <__cvt+0x9e>
 8005b9a:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b9e:	2230      	movs	r2, #48	; 0x30
 8005ba0:	9b07      	ldr	r3, [sp, #28]
 8005ba2:	454b      	cmp	r3, r9
 8005ba4:	d307      	bcc.n	8005bb6 <__cvt+0xb6>
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	9b07      	ldr	r3, [sp, #28]
 8005baa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005bac:	1b9b      	subs	r3, r3, r6
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	b008      	add	sp, #32
 8005bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb6:	1c59      	adds	r1, r3, #1
 8005bb8:	9107      	str	r1, [sp, #28]
 8005bba:	701a      	strb	r2, [r3, #0]
 8005bbc:	e7f0      	b.n	8005ba0 <__cvt+0xa0>

08005bbe <__exponent>:
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bc2:	2900      	cmp	r1, #0
 8005bc4:	f803 2b02 	strb.w	r2, [r3], #2
 8005bc8:	bfb6      	itet	lt
 8005bca:	222d      	movlt	r2, #45	; 0x2d
 8005bcc:	222b      	movge	r2, #43	; 0x2b
 8005bce:	4249      	neglt	r1, r1
 8005bd0:	2909      	cmp	r1, #9
 8005bd2:	7042      	strb	r2, [r0, #1]
 8005bd4:	dd2b      	ble.n	8005c2e <__exponent+0x70>
 8005bd6:	f10d 0407 	add.w	r4, sp, #7
 8005bda:	46a4      	mov	ip, r4
 8005bdc:	270a      	movs	r7, #10
 8005bde:	fb91 f6f7 	sdiv	r6, r1, r7
 8005be2:	460a      	mov	r2, r1
 8005be4:	46a6      	mov	lr, r4
 8005be6:	fb07 1516 	mls	r5, r7, r6, r1
 8005bea:	2a63      	cmp	r2, #99	; 0x63
 8005bec:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005bf6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005bfa:	dcf0      	bgt.n	8005bde <__exponent+0x20>
 8005bfc:	3130      	adds	r1, #48	; 0x30
 8005bfe:	f1ae 0502 	sub.w	r5, lr, #2
 8005c02:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c06:	4629      	mov	r1, r5
 8005c08:	1c44      	adds	r4, r0, #1
 8005c0a:	4561      	cmp	r1, ip
 8005c0c:	d30a      	bcc.n	8005c24 <__exponent+0x66>
 8005c0e:	f10d 0209 	add.w	r2, sp, #9
 8005c12:	eba2 020e 	sub.w	r2, r2, lr
 8005c16:	4565      	cmp	r5, ip
 8005c18:	bf88      	it	hi
 8005c1a:	2200      	movhi	r2, #0
 8005c1c:	4413      	add	r3, r2
 8005c1e:	1a18      	subs	r0, r3, r0
 8005c20:	b003      	add	sp, #12
 8005c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c28:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c2c:	e7ed      	b.n	8005c0a <__exponent+0x4c>
 8005c2e:	2330      	movs	r3, #48	; 0x30
 8005c30:	3130      	adds	r1, #48	; 0x30
 8005c32:	7083      	strb	r3, [r0, #2]
 8005c34:	70c1      	strb	r1, [r0, #3]
 8005c36:	1d03      	adds	r3, r0, #4
 8005c38:	e7f1      	b.n	8005c1e <__exponent+0x60>
	...

08005c3c <_printf_float>:
 8005c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c40:	b091      	sub	sp, #68	; 0x44
 8005c42:	460c      	mov	r4, r1
 8005c44:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005c48:	4616      	mov	r6, r2
 8005c4a:	461f      	mov	r7, r3
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	f001 fa75 	bl	800713c <_localeconv_r>
 8005c52:	6803      	ldr	r3, [r0, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	9309      	str	r3, [sp, #36]	; 0x24
 8005c58:	f7fa fa7a 	bl	8000150 <strlen>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	930e      	str	r3, [sp, #56]	; 0x38
 8005c60:	f8d8 3000 	ldr.w	r3, [r8]
 8005c64:	900a      	str	r0, [sp, #40]	; 0x28
 8005c66:	3307      	adds	r3, #7
 8005c68:	f023 0307 	bic.w	r3, r3, #7
 8005c6c:	f103 0208 	add.w	r2, r3, #8
 8005c70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005c74:	f8d4 b000 	ldr.w	fp, [r4]
 8005c78:	f8c8 2000 	str.w	r2, [r8]
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c84:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005c88:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005c8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c92:	4640      	mov	r0, r8
 8005c94:	4b9c      	ldr	r3, [pc, #624]	; (8005f08 <_printf_float+0x2cc>)
 8005c96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c98:	f7fa feb8 	bl	8000a0c <__aeabi_dcmpun>
 8005c9c:	bb70      	cbnz	r0, 8005cfc <_printf_float+0xc0>
 8005c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	4b98      	ldr	r3, [pc, #608]	; (8005f08 <_printf_float+0x2cc>)
 8005ca6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ca8:	f7fa fe92 	bl	80009d0 <__aeabi_dcmple>
 8005cac:	bb30      	cbnz	r0, 8005cfc <_printf_float+0xc0>
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	4651      	mov	r1, sl
 8005cb6:	f7fa fe81 	bl	80009bc <__aeabi_dcmplt>
 8005cba:	b110      	cbz	r0, 8005cc2 <_printf_float+0x86>
 8005cbc:	232d      	movs	r3, #45	; 0x2d
 8005cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc2:	4b92      	ldr	r3, [pc, #584]	; (8005f0c <_printf_float+0x2d0>)
 8005cc4:	4892      	ldr	r0, [pc, #584]	; (8005f10 <_printf_float+0x2d4>)
 8005cc6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005cca:	bf94      	ite	ls
 8005ccc:	4698      	movls	r8, r3
 8005cce:	4680      	movhi	r8, r0
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	f04f 0a00 	mov.w	sl, #0
 8005cd6:	6123      	str	r3, [r4, #16]
 8005cd8:	f02b 0304 	bic.w	r3, fp, #4
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	4633      	mov	r3, r6
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	9700      	str	r7, [sp, #0]
 8005ce6:	aa0f      	add	r2, sp, #60	; 0x3c
 8005ce8:	f000 f9d4 	bl	8006094 <_printf_common>
 8005cec:	3001      	adds	r0, #1
 8005cee:	f040 8090 	bne.w	8005e12 <_printf_float+0x1d6>
 8005cf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf6:	b011      	add	sp, #68	; 0x44
 8005cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	4653      	mov	r3, sl
 8005d00:	4640      	mov	r0, r8
 8005d02:	4651      	mov	r1, sl
 8005d04:	f7fa fe82 	bl	8000a0c <__aeabi_dcmpun>
 8005d08:	b148      	cbz	r0, 8005d1e <_printf_float+0xe2>
 8005d0a:	f1ba 0f00 	cmp.w	sl, #0
 8005d0e:	bfb8      	it	lt
 8005d10:	232d      	movlt	r3, #45	; 0x2d
 8005d12:	4880      	ldr	r0, [pc, #512]	; (8005f14 <_printf_float+0x2d8>)
 8005d14:	bfb8      	it	lt
 8005d16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d1a:	4b7f      	ldr	r3, [pc, #508]	; (8005f18 <_printf_float+0x2dc>)
 8005d1c:	e7d3      	b.n	8005cc6 <_printf_float+0x8a>
 8005d1e:	6863      	ldr	r3, [r4, #4]
 8005d20:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005d24:	1c5a      	adds	r2, r3, #1
 8005d26:	d142      	bne.n	8005dae <_printf_float+0x172>
 8005d28:	2306      	movs	r3, #6
 8005d2a:	6063      	str	r3, [r4, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	9206      	str	r2, [sp, #24]
 8005d30:	aa0e      	add	r2, sp, #56	; 0x38
 8005d32:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005d36:	aa0d      	add	r2, sp, #52	; 0x34
 8005d38:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005d3c:	9203      	str	r2, [sp, #12]
 8005d3e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005d42:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d46:	6023      	str	r3, [r4, #0]
 8005d48:	6863      	ldr	r3, [r4, #4]
 8005d4a:	4642      	mov	r2, r8
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	4628      	mov	r0, r5
 8005d50:	4653      	mov	r3, sl
 8005d52:	910b      	str	r1, [sp, #44]	; 0x2c
 8005d54:	f7ff fed4 	bl	8005b00 <__cvt>
 8005d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d5a:	4680      	mov	r8, r0
 8005d5c:	2947      	cmp	r1, #71	; 0x47
 8005d5e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d60:	d108      	bne.n	8005d74 <_printf_float+0x138>
 8005d62:	1cc8      	adds	r0, r1, #3
 8005d64:	db02      	blt.n	8005d6c <_printf_float+0x130>
 8005d66:	6863      	ldr	r3, [r4, #4]
 8005d68:	4299      	cmp	r1, r3
 8005d6a:	dd40      	ble.n	8005dee <_printf_float+0x1b2>
 8005d6c:	f1a9 0902 	sub.w	r9, r9, #2
 8005d70:	fa5f f989 	uxtb.w	r9, r9
 8005d74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d78:	d81f      	bhi.n	8005dba <_printf_float+0x17e>
 8005d7a:	464a      	mov	r2, r9
 8005d7c:	3901      	subs	r1, #1
 8005d7e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d82:	910d      	str	r1, [sp, #52]	; 0x34
 8005d84:	f7ff ff1b 	bl	8005bbe <__exponent>
 8005d88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d8a:	4682      	mov	sl, r0
 8005d8c:	1813      	adds	r3, r2, r0
 8005d8e:	2a01      	cmp	r2, #1
 8005d90:	6123      	str	r3, [r4, #16]
 8005d92:	dc02      	bgt.n	8005d9a <_printf_float+0x15e>
 8005d94:	6822      	ldr	r2, [r4, #0]
 8005d96:	07d2      	lsls	r2, r2, #31
 8005d98:	d501      	bpl.n	8005d9e <_printf_float+0x162>
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	6123      	str	r3, [r4, #16]
 8005d9e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d09b      	beq.n	8005cde <_printf_float+0xa2>
 8005da6:	232d      	movs	r3, #45	; 0x2d
 8005da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dac:	e797      	b.n	8005cde <_printf_float+0xa2>
 8005dae:	2947      	cmp	r1, #71	; 0x47
 8005db0:	d1bc      	bne.n	8005d2c <_printf_float+0xf0>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1ba      	bne.n	8005d2c <_printf_float+0xf0>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e7b7      	b.n	8005d2a <_printf_float+0xee>
 8005dba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005dbe:	d118      	bne.n	8005df2 <_printf_float+0x1b6>
 8005dc0:	2900      	cmp	r1, #0
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	dd0b      	ble.n	8005dde <_printf_float+0x1a2>
 8005dc6:	6121      	str	r1, [r4, #16]
 8005dc8:	b913      	cbnz	r3, 8005dd0 <_printf_float+0x194>
 8005dca:	6822      	ldr	r2, [r4, #0]
 8005dcc:	07d0      	lsls	r0, r2, #31
 8005dce:	d502      	bpl.n	8005dd6 <_printf_float+0x19a>
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	440b      	add	r3, r1
 8005dd4:	6123      	str	r3, [r4, #16]
 8005dd6:	f04f 0a00 	mov.w	sl, #0
 8005dda:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ddc:	e7df      	b.n	8005d9e <_printf_float+0x162>
 8005dde:	b913      	cbnz	r3, 8005de6 <_printf_float+0x1aa>
 8005de0:	6822      	ldr	r2, [r4, #0]
 8005de2:	07d2      	lsls	r2, r2, #31
 8005de4:	d501      	bpl.n	8005dea <_printf_float+0x1ae>
 8005de6:	3302      	adds	r3, #2
 8005de8:	e7f4      	b.n	8005dd4 <_printf_float+0x198>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e7f2      	b.n	8005dd4 <_printf_float+0x198>
 8005dee:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005df4:	4299      	cmp	r1, r3
 8005df6:	db05      	blt.n	8005e04 <_printf_float+0x1c8>
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	6121      	str	r1, [r4, #16]
 8005dfc:	07d8      	lsls	r0, r3, #31
 8005dfe:	d5ea      	bpl.n	8005dd6 <_printf_float+0x19a>
 8005e00:	1c4b      	adds	r3, r1, #1
 8005e02:	e7e7      	b.n	8005dd4 <_printf_float+0x198>
 8005e04:	2900      	cmp	r1, #0
 8005e06:	bfcc      	ite	gt
 8005e08:	2201      	movgt	r2, #1
 8005e0a:	f1c1 0202 	rsble	r2, r1, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	e7e0      	b.n	8005dd4 <_printf_float+0x198>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	055a      	lsls	r2, r3, #21
 8005e16:	d407      	bmi.n	8005e28 <_printf_float+0x1ec>
 8005e18:	6923      	ldr	r3, [r4, #16]
 8005e1a:	4642      	mov	r2, r8
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4628      	mov	r0, r5
 8005e20:	47b8      	blx	r7
 8005e22:	3001      	adds	r0, #1
 8005e24:	d12b      	bne.n	8005e7e <_printf_float+0x242>
 8005e26:	e764      	b.n	8005cf2 <_printf_float+0xb6>
 8005e28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e2c:	f240 80dd 	bls.w	8005fea <_printf_float+0x3ae>
 8005e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e34:	2200      	movs	r2, #0
 8005e36:	2300      	movs	r3, #0
 8005e38:	f7fa fdb6 	bl	80009a8 <__aeabi_dcmpeq>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	d033      	beq.n	8005ea8 <_printf_float+0x26c>
 8005e40:	2301      	movs	r3, #1
 8005e42:	4631      	mov	r1, r6
 8005e44:	4628      	mov	r0, r5
 8005e46:	4a35      	ldr	r2, [pc, #212]	; (8005f1c <_printf_float+0x2e0>)
 8005e48:	47b8      	blx	r7
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	f43f af51 	beq.w	8005cf2 <_printf_float+0xb6>
 8005e50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e54:	429a      	cmp	r2, r3
 8005e56:	db02      	blt.n	8005e5e <_printf_float+0x222>
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	07d8      	lsls	r0, r3, #31
 8005e5c:	d50f      	bpl.n	8005e7e <_printf_float+0x242>
 8005e5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e62:	4631      	mov	r1, r6
 8005e64:	4628      	mov	r0, r5
 8005e66:	47b8      	blx	r7
 8005e68:	3001      	adds	r0, #1
 8005e6a:	f43f af42 	beq.w	8005cf2 <_printf_float+0xb6>
 8005e6e:	f04f 0800 	mov.w	r8, #0
 8005e72:	f104 091a 	add.w	r9, r4, #26
 8005e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	4543      	cmp	r3, r8
 8005e7c:	dc09      	bgt.n	8005e92 <_printf_float+0x256>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	079b      	lsls	r3, r3, #30
 8005e82:	f100 8102 	bmi.w	800608a <_printf_float+0x44e>
 8005e86:	68e0      	ldr	r0, [r4, #12]
 8005e88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e8a:	4298      	cmp	r0, r3
 8005e8c:	bfb8      	it	lt
 8005e8e:	4618      	movlt	r0, r3
 8005e90:	e731      	b.n	8005cf6 <_printf_float+0xba>
 8005e92:	2301      	movs	r3, #1
 8005e94:	464a      	mov	r2, r9
 8005e96:	4631      	mov	r1, r6
 8005e98:	4628      	mov	r0, r5
 8005e9a:	47b8      	blx	r7
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	f43f af28 	beq.w	8005cf2 <_printf_float+0xb6>
 8005ea2:	f108 0801 	add.w	r8, r8, #1
 8005ea6:	e7e6      	b.n	8005e76 <_printf_float+0x23a>
 8005ea8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	dc38      	bgt.n	8005f20 <_printf_float+0x2e4>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	4a19      	ldr	r2, [pc, #100]	; (8005f1c <_printf_float+0x2e0>)
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f43f af1a 	beq.w	8005cf2 <_printf_float+0xb6>
 8005ebe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	d102      	bne.n	8005ecc <_printf_float+0x290>
 8005ec6:	6823      	ldr	r3, [r4, #0]
 8005ec8:	07d9      	lsls	r1, r3, #31
 8005eca:	d5d8      	bpl.n	8005e7e <_printf_float+0x242>
 8005ecc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	47b8      	blx	r7
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	f43f af0b 	beq.w	8005cf2 <_printf_float+0xb6>
 8005edc:	f04f 0900 	mov.w	r9, #0
 8005ee0:	f104 0a1a 	add.w	sl, r4, #26
 8005ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ee6:	425b      	negs	r3, r3
 8005ee8:	454b      	cmp	r3, r9
 8005eea:	dc01      	bgt.n	8005ef0 <_printf_float+0x2b4>
 8005eec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eee:	e794      	b.n	8005e1a <_printf_float+0x1de>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	4652      	mov	r2, sl
 8005ef4:	4631      	mov	r1, r6
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	47b8      	blx	r7
 8005efa:	3001      	adds	r0, #1
 8005efc:	f43f aef9 	beq.w	8005cf2 <_printf_float+0xb6>
 8005f00:	f109 0901 	add.w	r9, r9, #1
 8005f04:	e7ee      	b.n	8005ee4 <_printf_float+0x2a8>
 8005f06:	bf00      	nop
 8005f08:	7fefffff 	.word	0x7fefffff
 8005f0c:	08008904 	.word	0x08008904
 8005f10:	08008908 	.word	0x08008908
 8005f14:	08008910 	.word	0x08008910
 8005f18:	0800890c 	.word	0x0800890c
 8005f1c:	08008914 	.word	0x08008914
 8005f20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f24:	429a      	cmp	r2, r3
 8005f26:	bfa8      	it	ge
 8005f28:	461a      	movge	r2, r3
 8005f2a:	2a00      	cmp	r2, #0
 8005f2c:	4691      	mov	r9, r2
 8005f2e:	dc37      	bgt.n	8005fa0 <_printf_float+0x364>
 8005f30:	f04f 0b00 	mov.w	fp, #0
 8005f34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f38:	f104 021a 	add.w	r2, r4, #26
 8005f3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005f40:	ebaa 0309 	sub.w	r3, sl, r9
 8005f44:	455b      	cmp	r3, fp
 8005f46:	dc33      	bgt.n	8005fb0 <_printf_float+0x374>
 8005f48:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	db3b      	blt.n	8005fc8 <_printf_float+0x38c>
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	07da      	lsls	r2, r3, #31
 8005f54:	d438      	bmi.n	8005fc8 <_printf_float+0x38c>
 8005f56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f58:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f5a:	eba2 030a 	sub.w	r3, r2, sl
 8005f5e:	eba2 0901 	sub.w	r9, r2, r1
 8005f62:	4599      	cmp	r9, r3
 8005f64:	bfa8      	it	ge
 8005f66:	4699      	movge	r9, r3
 8005f68:	f1b9 0f00 	cmp.w	r9, #0
 8005f6c:	dc34      	bgt.n	8005fd8 <_printf_float+0x39c>
 8005f6e:	f04f 0800 	mov.w	r8, #0
 8005f72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f76:	f104 0a1a 	add.w	sl, r4, #26
 8005f7a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f7e:	1a9b      	subs	r3, r3, r2
 8005f80:	eba3 0309 	sub.w	r3, r3, r9
 8005f84:	4543      	cmp	r3, r8
 8005f86:	f77f af7a 	ble.w	8005e7e <_printf_float+0x242>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4652      	mov	r2, sl
 8005f8e:	4631      	mov	r1, r6
 8005f90:	4628      	mov	r0, r5
 8005f92:	47b8      	blx	r7
 8005f94:	3001      	adds	r0, #1
 8005f96:	f43f aeac 	beq.w	8005cf2 <_printf_float+0xb6>
 8005f9a:	f108 0801 	add.w	r8, r8, #1
 8005f9e:	e7ec      	b.n	8005f7a <_printf_float+0x33e>
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4642      	mov	r2, r8
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	47b8      	blx	r7
 8005faa:	3001      	adds	r0, #1
 8005fac:	d1c0      	bne.n	8005f30 <_printf_float+0x2f4>
 8005fae:	e6a0      	b.n	8005cf2 <_printf_float+0xb6>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	920b      	str	r2, [sp, #44]	; 0x2c
 8005fb8:	47b8      	blx	r7
 8005fba:	3001      	adds	r0, #1
 8005fbc:	f43f ae99 	beq.w	8005cf2 <_printf_float+0xb6>
 8005fc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fc2:	f10b 0b01 	add.w	fp, fp, #1
 8005fc6:	e7b9      	b.n	8005f3c <_printf_float+0x300>
 8005fc8:	4631      	mov	r1, r6
 8005fca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fce:	4628      	mov	r0, r5
 8005fd0:	47b8      	blx	r7
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d1bf      	bne.n	8005f56 <_printf_float+0x31a>
 8005fd6:	e68c      	b.n	8005cf2 <_printf_float+0xb6>
 8005fd8:	464b      	mov	r3, r9
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4628      	mov	r0, r5
 8005fde:	eb08 020a 	add.w	r2, r8, sl
 8005fe2:	47b8      	blx	r7
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d1c2      	bne.n	8005f6e <_printf_float+0x332>
 8005fe8:	e683      	b.n	8005cf2 <_printf_float+0xb6>
 8005fea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fec:	2a01      	cmp	r2, #1
 8005fee:	dc01      	bgt.n	8005ff4 <_printf_float+0x3b8>
 8005ff0:	07db      	lsls	r3, r3, #31
 8005ff2:	d537      	bpl.n	8006064 <_printf_float+0x428>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	4642      	mov	r2, r8
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	47b8      	blx	r7
 8005ffe:	3001      	adds	r0, #1
 8006000:	f43f ae77 	beq.w	8005cf2 <_printf_float+0xb6>
 8006004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	f43f ae6f 	beq.w	8005cf2 <_printf_float+0xb6>
 8006014:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006018:	2200      	movs	r2, #0
 800601a:	2300      	movs	r3, #0
 800601c:	f7fa fcc4 	bl	80009a8 <__aeabi_dcmpeq>
 8006020:	b9d8      	cbnz	r0, 800605a <_printf_float+0x41e>
 8006022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006024:	f108 0201 	add.w	r2, r8, #1
 8006028:	3b01      	subs	r3, #1
 800602a:	4631      	mov	r1, r6
 800602c:	4628      	mov	r0, r5
 800602e:	47b8      	blx	r7
 8006030:	3001      	adds	r0, #1
 8006032:	d10e      	bne.n	8006052 <_printf_float+0x416>
 8006034:	e65d      	b.n	8005cf2 <_printf_float+0xb6>
 8006036:	2301      	movs	r3, #1
 8006038:	464a      	mov	r2, r9
 800603a:	4631      	mov	r1, r6
 800603c:	4628      	mov	r0, r5
 800603e:	47b8      	blx	r7
 8006040:	3001      	adds	r0, #1
 8006042:	f43f ae56 	beq.w	8005cf2 <_printf_float+0xb6>
 8006046:	f108 0801 	add.w	r8, r8, #1
 800604a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800604c:	3b01      	subs	r3, #1
 800604e:	4543      	cmp	r3, r8
 8006050:	dcf1      	bgt.n	8006036 <_printf_float+0x3fa>
 8006052:	4653      	mov	r3, sl
 8006054:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006058:	e6e0      	b.n	8005e1c <_printf_float+0x1e0>
 800605a:	f04f 0800 	mov.w	r8, #0
 800605e:	f104 091a 	add.w	r9, r4, #26
 8006062:	e7f2      	b.n	800604a <_printf_float+0x40e>
 8006064:	2301      	movs	r3, #1
 8006066:	4642      	mov	r2, r8
 8006068:	e7df      	b.n	800602a <_printf_float+0x3ee>
 800606a:	2301      	movs	r3, #1
 800606c:	464a      	mov	r2, r9
 800606e:	4631      	mov	r1, r6
 8006070:	4628      	mov	r0, r5
 8006072:	47b8      	blx	r7
 8006074:	3001      	adds	r0, #1
 8006076:	f43f ae3c 	beq.w	8005cf2 <_printf_float+0xb6>
 800607a:	f108 0801 	add.w	r8, r8, #1
 800607e:	68e3      	ldr	r3, [r4, #12]
 8006080:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006082:	1a5b      	subs	r3, r3, r1
 8006084:	4543      	cmp	r3, r8
 8006086:	dcf0      	bgt.n	800606a <_printf_float+0x42e>
 8006088:	e6fd      	b.n	8005e86 <_printf_float+0x24a>
 800608a:	f04f 0800 	mov.w	r8, #0
 800608e:	f104 0919 	add.w	r9, r4, #25
 8006092:	e7f4      	b.n	800607e <_printf_float+0x442>

08006094 <_printf_common>:
 8006094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	4616      	mov	r6, r2
 800609a:	4699      	mov	r9, r3
 800609c:	688a      	ldr	r2, [r1, #8]
 800609e:	690b      	ldr	r3, [r1, #16]
 80060a0:	4607      	mov	r7, r0
 80060a2:	4293      	cmp	r3, r2
 80060a4:	bfb8      	it	lt
 80060a6:	4613      	movlt	r3, r2
 80060a8:	6033      	str	r3, [r6, #0]
 80060aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060ae:	460c      	mov	r4, r1
 80060b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060b4:	b10a      	cbz	r2, 80060ba <_printf_common+0x26>
 80060b6:	3301      	adds	r3, #1
 80060b8:	6033      	str	r3, [r6, #0]
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	0699      	lsls	r1, r3, #26
 80060be:	bf42      	ittt	mi
 80060c0:	6833      	ldrmi	r3, [r6, #0]
 80060c2:	3302      	addmi	r3, #2
 80060c4:	6033      	strmi	r3, [r6, #0]
 80060c6:	6825      	ldr	r5, [r4, #0]
 80060c8:	f015 0506 	ands.w	r5, r5, #6
 80060cc:	d106      	bne.n	80060dc <_printf_common+0x48>
 80060ce:	f104 0a19 	add.w	sl, r4, #25
 80060d2:	68e3      	ldr	r3, [r4, #12]
 80060d4:	6832      	ldr	r2, [r6, #0]
 80060d6:	1a9b      	subs	r3, r3, r2
 80060d8:	42ab      	cmp	r3, r5
 80060da:	dc28      	bgt.n	800612e <_printf_common+0x9a>
 80060dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060e0:	1e13      	subs	r3, r2, #0
 80060e2:	6822      	ldr	r2, [r4, #0]
 80060e4:	bf18      	it	ne
 80060e6:	2301      	movne	r3, #1
 80060e8:	0692      	lsls	r2, r2, #26
 80060ea:	d42d      	bmi.n	8006148 <_printf_common+0xb4>
 80060ec:	4649      	mov	r1, r9
 80060ee:	4638      	mov	r0, r7
 80060f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060f4:	47c0      	blx	r8
 80060f6:	3001      	adds	r0, #1
 80060f8:	d020      	beq.n	800613c <_printf_common+0xa8>
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	68e5      	ldr	r5, [r4, #12]
 80060fe:	f003 0306 	and.w	r3, r3, #6
 8006102:	2b04      	cmp	r3, #4
 8006104:	bf18      	it	ne
 8006106:	2500      	movne	r5, #0
 8006108:	6832      	ldr	r2, [r6, #0]
 800610a:	f04f 0600 	mov.w	r6, #0
 800610e:	68a3      	ldr	r3, [r4, #8]
 8006110:	bf08      	it	eq
 8006112:	1aad      	subeq	r5, r5, r2
 8006114:	6922      	ldr	r2, [r4, #16]
 8006116:	bf08      	it	eq
 8006118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800611c:	4293      	cmp	r3, r2
 800611e:	bfc4      	itt	gt
 8006120:	1a9b      	subgt	r3, r3, r2
 8006122:	18ed      	addgt	r5, r5, r3
 8006124:	341a      	adds	r4, #26
 8006126:	42b5      	cmp	r5, r6
 8006128:	d11a      	bne.n	8006160 <_printf_common+0xcc>
 800612a:	2000      	movs	r0, #0
 800612c:	e008      	b.n	8006140 <_printf_common+0xac>
 800612e:	2301      	movs	r3, #1
 8006130:	4652      	mov	r2, sl
 8006132:	4649      	mov	r1, r9
 8006134:	4638      	mov	r0, r7
 8006136:	47c0      	blx	r8
 8006138:	3001      	adds	r0, #1
 800613a:	d103      	bne.n	8006144 <_printf_common+0xb0>
 800613c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006144:	3501      	adds	r5, #1
 8006146:	e7c4      	b.n	80060d2 <_printf_common+0x3e>
 8006148:	2030      	movs	r0, #48	; 0x30
 800614a:	18e1      	adds	r1, r4, r3
 800614c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006156:	4422      	add	r2, r4
 8006158:	3302      	adds	r3, #2
 800615a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800615e:	e7c5      	b.n	80060ec <_printf_common+0x58>
 8006160:	2301      	movs	r3, #1
 8006162:	4622      	mov	r2, r4
 8006164:	4649      	mov	r1, r9
 8006166:	4638      	mov	r0, r7
 8006168:	47c0      	blx	r8
 800616a:	3001      	adds	r0, #1
 800616c:	d0e6      	beq.n	800613c <_printf_common+0xa8>
 800616e:	3601      	adds	r6, #1
 8006170:	e7d9      	b.n	8006126 <_printf_common+0x92>
	...

08006174 <_printf_i>:
 8006174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006178:	460c      	mov	r4, r1
 800617a:	7e27      	ldrb	r7, [r4, #24]
 800617c:	4691      	mov	r9, r2
 800617e:	2f78      	cmp	r7, #120	; 0x78
 8006180:	4680      	mov	r8, r0
 8006182:	469a      	mov	sl, r3
 8006184:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006186:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800618a:	d807      	bhi.n	800619c <_printf_i+0x28>
 800618c:	2f62      	cmp	r7, #98	; 0x62
 800618e:	d80a      	bhi.n	80061a6 <_printf_i+0x32>
 8006190:	2f00      	cmp	r7, #0
 8006192:	f000 80d9 	beq.w	8006348 <_printf_i+0x1d4>
 8006196:	2f58      	cmp	r7, #88	; 0x58
 8006198:	f000 80a4 	beq.w	80062e4 <_printf_i+0x170>
 800619c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061a4:	e03a      	b.n	800621c <_printf_i+0xa8>
 80061a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061aa:	2b15      	cmp	r3, #21
 80061ac:	d8f6      	bhi.n	800619c <_printf_i+0x28>
 80061ae:	a001      	add	r0, pc, #4	; (adr r0, 80061b4 <_printf_i+0x40>)
 80061b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80061b4:	0800620d 	.word	0x0800620d
 80061b8:	08006221 	.word	0x08006221
 80061bc:	0800619d 	.word	0x0800619d
 80061c0:	0800619d 	.word	0x0800619d
 80061c4:	0800619d 	.word	0x0800619d
 80061c8:	0800619d 	.word	0x0800619d
 80061cc:	08006221 	.word	0x08006221
 80061d0:	0800619d 	.word	0x0800619d
 80061d4:	0800619d 	.word	0x0800619d
 80061d8:	0800619d 	.word	0x0800619d
 80061dc:	0800619d 	.word	0x0800619d
 80061e0:	0800632f 	.word	0x0800632f
 80061e4:	08006251 	.word	0x08006251
 80061e8:	08006311 	.word	0x08006311
 80061ec:	0800619d 	.word	0x0800619d
 80061f0:	0800619d 	.word	0x0800619d
 80061f4:	08006351 	.word	0x08006351
 80061f8:	0800619d 	.word	0x0800619d
 80061fc:	08006251 	.word	0x08006251
 8006200:	0800619d 	.word	0x0800619d
 8006204:	0800619d 	.word	0x0800619d
 8006208:	08006319 	.word	0x08006319
 800620c:	680b      	ldr	r3, [r1, #0]
 800620e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006212:	1d1a      	adds	r2, r3, #4
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	600a      	str	r2, [r1, #0]
 8006218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800621c:	2301      	movs	r3, #1
 800621e:	e0a4      	b.n	800636a <_printf_i+0x1f6>
 8006220:	6825      	ldr	r5, [r4, #0]
 8006222:	6808      	ldr	r0, [r1, #0]
 8006224:	062e      	lsls	r6, r5, #24
 8006226:	f100 0304 	add.w	r3, r0, #4
 800622a:	d50a      	bpl.n	8006242 <_printf_i+0xce>
 800622c:	6805      	ldr	r5, [r0, #0]
 800622e:	600b      	str	r3, [r1, #0]
 8006230:	2d00      	cmp	r5, #0
 8006232:	da03      	bge.n	800623c <_printf_i+0xc8>
 8006234:	232d      	movs	r3, #45	; 0x2d
 8006236:	426d      	negs	r5, r5
 8006238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800623c:	230a      	movs	r3, #10
 800623e:	485e      	ldr	r0, [pc, #376]	; (80063b8 <_printf_i+0x244>)
 8006240:	e019      	b.n	8006276 <_printf_i+0x102>
 8006242:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006246:	6805      	ldr	r5, [r0, #0]
 8006248:	600b      	str	r3, [r1, #0]
 800624a:	bf18      	it	ne
 800624c:	b22d      	sxthne	r5, r5
 800624e:	e7ef      	b.n	8006230 <_printf_i+0xbc>
 8006250:	680b      	ldr	r3, [r1, #0]
 8006252:	6825      	ldr	r5, [r4, #0]
 8006254:	1d18      	adds	r0, r3, #4
 8006256:	6008      	str	r0, [r1, #0]
 8006258:	0628      	lsls	r0, r5, #24
 800625a:	d501      	bpl.n	8006260 <_printf_i+0xec>
 800625c:	681d      	ldr	r5, [r3, #0]
 800625e:	e002      	b.n	8006266 <_printf_i+0xf2>
 8006260:	0669      	lsls	r1, r5, #25
 8006262:	d5fb      	bpl.n	800625c <_printf_i+0xe8>
 8006264:	881d      	ldrh	r5, [r3, #0]
 8006266:	2f6f      	cmp	r7, #111	; 0x6f
 8006268:	bf0c      	ite	eq
 800626a:	2308      	moveq	r3, #8
 800626c:	230a      	movne	r3, #10
 800626e:	4852      	ldr	r0, [pc, #328]	; (80063b8 <_printf_i+0x244>)
 8006270:	2100      	movs	r1, #0
 8006272:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006276:	6866      	ldr	r6, [r4, #4]
 8006278:	2e00      	cmp	r6, #0
 800627a:	bfa8      	it	ge
 800627c:	6821      	ldrge	r1, [r4, #0]
 800627e:	60a6      	str	r6, [r4, #8]
 8006280:	bfa4      	itt	ge
 8006282:	f021 0104 	bicge.w	r1, r1, #4
 8006286:	6021      	strge	r1, [r4, #0]
 8006288:	b90d      	cbnz	r5, 800628e <_printf_i+0x11a>
 800628a:	2e00      	cmp	r6, #0
 800628c:	d04d      	beq.n	800632a <_printf_i+0x1b6>
 800628e:	4616      	mov	r6, r2
 8006290:	fbb5 f1f3 	udiv	r1, r5, r3
 8006294:	fb03 5711 	mls	r7, r3, r1, r5
 8006298:	5dc7      	ldrb	r7, [r0, r7]
 800629a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800629e:	462f      	mov	r7, r5
 80062a0:	42bb      	cmp	r3, r7
 80062a2:	460d      	mov	r5, r1
 80062a4:	d9f4      	bls.n	8006290 <_printf_i+0x11c>
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d10b      	bne.n	80062c2 <_printf_i+0x14e>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	07df      	lsls	r7, r3, #31
 80062ae:	d508      	bpl.n	80062c2 <_printf_i+0x14e>
 80062b0:	6923      	ldr	r3, [r4, #16]
 80062b2:	6861      	ldr	r1, [r4, #4]
 80062b4:	4299      	cmp	r1, r3
 80062b6:	bfde      	ittt	le
 80062b8:	2330      	movle	r3, #48	; 0x30
 80062ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062be:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80062c2:	1b92      	subs	r2, r2, r6
 80062c4:	6122      	str	r2, [r4, #16]
 80062c6:	464b      	mov	r3, r9
 80062c8:	4621      	mov	r1, r4
 80062ca:	4640      	mov	r0, r8
 80062cc:	f8cd a000 	str.w	sl, [sp]
 80062d0:	aa03      	add	r2, sp, #12
 80062d2:	f7ff fedf 	bl	8006094 <_printf_common>
 80062d6:	3001      	adds	r0, #1
 80062d8:	d14c      	bne.n	8006374 <_printf_i+0x200>
 80062da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062de:	b004      	add	sp, #16
 80062e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e4:	4834      	ldr	r0, [pc, #208]	; (80063b8 <_printf_i+0x244>)
 80062e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062ea:	680e      	ldr	r6, [r1, #0]
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80062f2:	061f      	lsls	r7, r3, #24
 80062f4:	600e      	str	r6, [r1, #0]
 80062f6:	d514      	bpl.n	8006322 <_printf_i+0x1ae>
 80062f8:	07d9      	lsls	r1, r3, #31
 80062fa:	bf44      	itt	mi
 80062fc:	f043 0320 	orrmi.w	r3, r3, #32
 8006300:	6023      	strmi	r3, [r4, #0]
 8006302:	b91d      	cbnz	r5, 800630c <_printf_i+0x198>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	f023 0320 	bic.w	r3, r3, #32
 800630a:	6023      	str	r3, [r4, #0]
 800630c:	2310      	movs	r3, #16
 800630e:	e7af      	b.n	8006270 <_printf_i+0xfc>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	f043 0320 	orr.w	r3, r3, #32
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	2378      	movs	r3, #120	; 0x78
 800631a:	4828      	ldr	r0, [pc, #160]	; (80063bc <_printf_i+0x248>)
 800631c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006320:	e7e3      	b.n	80062ea <_printf_i+0x176>
 8006322:	065e      	lsls	r6, r3, #25
 8006324:	bf48      	it	mi
 8006326:	b2ad      	uxthmi	r5, r5
 8006328:	e7e6      	b.n	80062f8 <_printf_i+0x184>
 800632a:	4616      	mov	r6, r2
 800632c:	e7bb      	b.n	80062a6 <_printf_i+0x132>
 800632e:	680b      	ldr	r3, [r1, #0]
 8006330:	6826      	ldr	r6, [r4, #0]
 8006332:	1d1d      	adds	r5, r3, #4
 8006334:	6960      	ldr	r0, [r4, #20]
 8006336:	600d      	str	r5, [r1, #0]
 8006338:	0635      	lsls	r5, r6, #24
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	d501      	bpl.n	8006342 <_printf_i+0x1ce>
 800633e:	6018      	str	r0, [r3, #0]
 8006340:	e002      	b.n	8006348 <_printf_i+0x1d4>
 8006342:	0671      	lsls	r1, r6, #25
 8006344:	d5fb      	bpl.n	800633e <_printf_i+0x1ca>
 8006346:	8018      	strh	r0, [r3, #0]
 8006348:	2300      	movs	r3, #0
 800634a:	4616      	mov	r6, r2
 800634c:	6123      	str	r3, [r4, #16]
 800634e:	e7ba      	b.n	80062c6 <_printf_i+0x152>
 8006350:	680b      	ldr	r3, [r1, #0]
 8006352:	1d1a      	adds	r2, r3, #4
 8006354:	600a      	str	r2, [r1, #0]
 8006356:	681e      	ldr	r6, [r3, #0]
 8006358:	2100      	movs	r1, #0
 800635a:	4630      	mov	r0, r6
 800635c:	6862      	ldr	r2, [r4, #4]
 800635e:	f000 fef9 	bl	8007154 <memchr>
 8006362:	b108      	cbz	r0, 8006368 <_printf_i+0x1f4>
 8006364:	1b80      	subs	r0, r0, r6
 8006366:	6060      	str	r0, [r4, #4]
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	6123      	str	r3, [r4, #16]
 800636c:	2300      	movs	r3, #0
 800636e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006372:	e7a8      	b.n	80062c6 <_printf_i+0x152>
 8006374:	4632      	mov	r2, r6
 8006376:	4649      	mov	r1, r9
 8006378:	4640      	mov	r0, r8
 800637a:	6923      	ldr	r3, [r4, #16]
 800637c:	47d0      	blx	sl
 800637e:	3001      	adds	r0, #1
 8006380:	d0ab      	beq.n	80062da <_printf_i+0x166>
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	079b      	lsls	r3, r3, #30
 8006386:	d413      	bmi.n	80063b0 <_printf_i+0x23c>
 8006388:	68e0      	ldr	r0, [r4, #12]
 800638a:	9b03      	ldr	r3, [sp, #12]
 800638c:	4298      	cmp	r0, r3
 800638e:	bfb8      	it	lt
 8006390:	4618      	movlt	r0, r3
 8006392:	e7a4      	b.n	80062de <_printf_i+0x16a>
 8006394:	2301      	movs	r3, #1
 8006396:	4632      	mov	r2, r6
 8006398:	4649      	mov	r1, r9
 800639a:	4640      	mov	r0, r8
 800639c:	47d0      	blx	sl
 800639e:	3001      	adds	r0, #1
 80063a0:	d09b      	beq.n	80062da <_printf_i+0x166>
 80063a2:	3501      	adds	r5, #1
 80063a4:	68e3      	ldr	r3, [r4, #12]
 80063a6:	9903      	ldr	r1, [sp, #12]
 80063a8:	1a5b      	subs	r3, r3, r1
 80063aa:	42ab      	cmp	r3, r5
 80063ac:	dcf2      	bgt.n	8006394 <_printf_i+0x220>
 80063ae:	e7eb      	b.n	8006388 <_printf_i+0x214>
 80063b0:	2500      	movs	r5, #0
 80063b2:	f104 0619 	add.w	r6, r4, #25
 80063b6:	e7f5      	b.n	80063a4 <_printf_i+0x230>
 80063b8:	08008916 	.word	0x08008916
 80063bc:	08008927 	.word	0x08008927

080063c0 <siprintf>:
 80063c0:	b40e      	push	{r1, r2, r3}
 80063c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063c6:	b500      	push	{lr}
 80063c8:	b09c      	sub	sp, #112	; 0x70
 80063ca:	ab1d      	add	r3, sp, #116	; 0x74
 80063cc:	9002      	str	r0, [sp, #8]
 80063ce:	9006      	str	r0, [sp, #24]
 80063d0:	9107      	str	r1, [sp, #28]
 80063d2:	9104      	str	r1, [sp, #16]
 80063d4:	4808      	ldr	r0, [pc, #32]	; (80063f8 <siprintf+0x38>)
 80063d6:	4909      	ldr	r1, [pc, #36]	; (80063fc <siprintf+0x3c>)
 80063d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063dc:	9105      	str	r1, [sp, #20]
 80063de:	6800      	ldr	r0, [r0, #0]
 80063e0:	a902      	add	r1, sp, #8
 80063e2:	9301      	str	r3, [sp, #4]
 80063e4:	f001 fb56 	bl	8007a94 <_svfiprintf_r>
 80063e8:	2200      	movs	r2, #0
 80063ea:	9b02      	ldr	r3, [sp, #8]
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	b01c      	add	sp, #112	; 0x70
 80063f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063f4:	b003      	add	sp, #12
 80063f6:	4770      	bx	lr
 80063f8:	2000010c 	.word	0x2000010c
 80063fc:	ffff0208 	.word	0xffff0208

08006400 <_vsiprintf_r>:
 8006400:	b500      	push	{lr}
 8006402:	b09b      	sub	sp, #108	; 0x6c
 8006404:	9100      	str	r1, [sp, #0]
 8006406:	9104      	str	r1, [sp, #16]
 8006408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800640c:	9105      	str	r1, [sp, #20]
 800640e:	9102      	str	r1, [sp, #8]
 8006410:	4905      	ldr	r1, [pc, #20]	; (8006428 <_vsiprintf_r+0x28>)
 8006412:	9103      	str	r1, [sp, #12]
 8006414:	4669      	mov	r1, sp
 8006416:	f001 fb3d 	bl	8007a94 <_svfiprintf_r>
 800641a:	2200      	movs	r2, #0
 800641c:	9b00      	ldr	r3, [sp, #0]
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	b01b      	add	sp, #108	; 0x6c
 8006422:	f85d fb04 	ldr.w	pc, [sp], #4
 8006426:	bf00      	nop
 8006428:	ffff0208 	.word	0xffff0208

0800642c <vsiprintf>:
 800642c:	4613      	mov	r3, r2
 800642e:	460a      	mov	r2, r1
 8006430:	4601      	mov	r1, r0
 8006432:	4802      	ldr	r0, [pc, #8]	; (800643c <vsiprintf+0x10>)
 8006434:	6800      	ldr	r0, [r0, #0]
 8006436:	f7ff bfe3 	b.w	8006400 <_vsiprintf_r>
 800643a:	bf00      	nop
 800643c:	2000010c 	.word	0x2000010c

08006440 <quorem>:
 8006440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006444:	6903      	ldr	r3, [r0, #16]
 8006446:	690c      	ldr	r4, [r1, #16]
 8006448:	4607      	mov	r7, r0
 800644a:	42a3      	cmp	r3, r4
 800644c:	f2c0 8083 	blt.w	8006556 <quorem+0x116>
 8006450:	3c01      	subs	r4, #1
 8006452:	f100 0514 	add.w	r5, r0, #20
 8006456:	f101 0814 	add.w	r8, r1, #20
 800645a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006464:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006468:	3301      	adds	r3, #1
 800646a:	429a      	cmp	r2, r3
 800646c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006470:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006474:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006478:	d332      	bcc.n	80064e0 <quorem+0xa0>
 800647a:	f04f 0e00 	mov.w	lr, #0
 800647e:	4640      	mov	r0, r8
 8006480:	46ac      	mov	ip, r5
 8006482:	46f2      	mov	sl, lr
 8006484:	f850 2b04 	ldr.w	r2, [r0], #4
 8006488:	b293      	uxth	r3, r2
 800648a:	fb06 e303 	mla	r3, r6, r3, lr
 800648e:	0c12      	lsrs	r2, r2, #16
 8006490:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006494:	fb06 e202 	mla	r2, r6, r2, lr
 8006498:	b29b      	uxth	r3, r3
 800649a:	ebaa 0303 	sub.w	r3, sl, r3
 800649e:	f8dc a000 	ldr.w	sl, [ip]
 80064a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064a6:	fa1f fa8a 	uxth.w	sl, sl
 80064aa:	4453      	add	r3, sl
 80064ac:	fa1f fa82 	uxth.w	sl, r2
 80064b0:	f8dc 2000 	ldr.w	r2, [ip]
 80064b4:	4581      	cmp	r9, r0
 80064b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80064ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064be:	b29b      	uxth	r3, r3
 80064c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064c8:	f84c 3b04 	str.w	r3, [ip], #4
 80064cc:	d2da      	bcs.n	8006484 <quorem+0x44>
 80064ce:	f855 300b 	ldr.w	r3, [r5, fp]
 80064d2:	b92b      	cbnz	r3, 80064e0 <quorem+0xa0>
 80064d4:	9b01      	ldr	r3, [sp, #4]
 80064d6:	3b04      	subs	r3, #4
 80064d8:	429d      	cmp	r5, r3
 80064da:	461a      	mov	r2, r3
 80064dc:	d32f      	bcc.n	800653e <quorem+0xfe>
 80064de:	613c      	str	r4, [r7, #16]
 80064e0:	4638      	mov	r0, r7
 80064e2:	f001 f8bf 	bl	8007664 <__mcmp>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	db25      	blt.n	8006536 <quorem+0xf6>
 80064ea:	4628      	mov	r0, r5
 80064ec:	f04f 0c00 	mov.w	ip, #0
 80064f0:	3601      	adds	r6, #1
 80064f2:	f858 1b04 	ldr.w	r1, [r8], #4
 80064f6:	f8d0 e000 	ldr.w	lr, [r0]
 80064fa:	b28b      	uxth	r3, r1
 80064fc:	ebac 0303 	sub.w	r3, ip, r3
 8006500:	fa1f f28e 	uxth.w	r2, lr
 8006504:	4413      	add	r3, r2
 8006506:	0c0a      	lsrs	r2, r1, #16
 8006508:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800650c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006510:	b29b      	uxth	r3, r3
 8006512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006516:	45c1      	cmp	r9, r8
 8006518:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800651c:	f840 3b04 	str.w	r3, [r0], #4
 8006520:	d2e7      	bcs.n	80064f2 <quorem+0xb2>
 8006522:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006526:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800652a:	b922      	cbnz	r2, 8006536 <quorem+0xf6>
 800652c:	3b04      	subs	r3, #4
 800652e:	429d      	cmp	r5, r3
 8006530:	461a      	mov	r2, r3
 8006532:	d30a      	bcc.n	800654a <quorem+0x10a>
 8006534:	613c      	str	r4, [r7, #16]
 8006536:	4630      	mov	r0, r6
 8006538:	b003      	add	sp, #12
 800653a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800653e:	6812      	ldr	r2, [r2, #0]
 8006540:	3b04      	subs	r3, #4
 8006542:	2a00      	cmp	r2, #0
 8006544:	d1cb      	bne.n	80064de <quorem+0x9e>
 8006546:	3c01      	subs	r4, #1
 8006548:	e7c6      	b.n	80064d8 <quorem+0x98>
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	3b04      	subs	r3, #4
 800654e:	2a00      	cmp	r2, #0
 8006550:	d1f0      	bne.n	8006534 <quorem+0xf4>
 8006552:	3c01      	subs	r4, #1
 8006554:	e7eb      	b.n	800652e <quorem+0xee>
 8006556:	2000      	movs	r0, #0
 8006558:	e7ee      	b.n	8006538 <quorem+0xf8>
 800655a:	0000      	movs	r0, r0
 800655c:	0000      	movs	r0, r0
	...

08006560 <_dtoa_r>:
 8006560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	4616      	mov	r6, r2
 8006566:	461f      	mov	r7, r3
 8006568:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800656a:	b099      	sub	sp, #100	; 0x64
 800656c:	4605      	mov	r5, r0
 800656e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006572:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006576:	b974      	cbnz	r4, 8006596 <_dtoa_r+0x36>
 8006578:	2010      	movs	r0, #16
 800657a:	f000 fde3 	bl	8007144 <malloc>
 800657e:	4602      	mov	r2, r0
 8006580:	6268      	str	r0, [r5, #36]	; 0x24
 8006582:	b920      	cbnz	r0, 800658e <_dtoa_r+0x2e>
 8006584:	21ea      	movs	r1, #234	; 0xea
 8006586:	4bae      	ldr	r3, [pc, #696]	; (8006840 <_dtoa_r+0x2e0>)
 8006588:	48ae      	ldr	r0, [pc, #696]	; (8006844 <_dtoa_r+0x2e4>)
 800658a:	f001 fb93 	bl	8007cb4 <__assert_func>
 800658e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006592:	6004      	str	r4, [r0, #0]
 8006594:	60c4      	str	r4, [r0, #12]
 8006596:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006598:	6819      	ldr	r1, [r3, #0]
 800659a:	b151      	cbz	r1, 80065b2 <_dtoa_r+0x52>
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	2301      	movs	r3, #1
 80065a0:	4093      	lsls	r3, r2
 80065a2:	604a      	str	r2, [r1, #4]
 80065a4:	608b      	str	r3, [r1, #8]
 80065a6:	4628      	mov	r0, r5
 80065a8:	f000 fe22 	bl	80071f0 <_Bfree>
 80065ac:	2200      	movs	r2, #0
 80065ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	1e3b      	subs	r3, r7, #0
 80065b4:	bfaf      	iteee	ge
 80065b6:	2300      	movge	r3, #0
 80065b8:	2201      	movlt	r2, #1
 80065ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065be:	9305      	strlt	r3, [sp, #20]
 80065c0:	bfa8      	it	ge
 80065c2:	f8c8 3000 	strge.w	r3, [r8]
 80065c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80065ca:	4b9f      	ldr	r3, [pc, #636]	; (8006848 <_dtoa_r+0x2e8>)
 80065cc:	bfb8      	it	lt
 80065ce:	f8c8 2000 	strlt.w	r2, [r8]
 80065d2:	ea33 0309 	bics.w	r3, r3, r9
 80065d6:	d119      	bne.n	800660c <_dtoa_r+0xac>
 80065d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80065dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065e4:	4333      	orrs	r3, r6
 80065e6:	f000 8580 	beq.w	80070ea <_dtoa_r+0xb8a>
 80065ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065ec:	b953      	cbnz	r3, 8006604 <_dtoa_r+0xa4>
 80065ee:	4b97      	ldr	r3, [pc, #604]	; (800684c <_dtoa_r+0x2ec>)
 80065f0:	e022      	b.n	8006638 <_dtoa_r+0xd8>
 80065f2:	4b97      	ldr	r3, [pc, #604]	; (8006850 <_dtoa_r+0x2f0>)
 80065f4:	9308      	str	r3, [sp, #32]
 80065f6:	3308      	adds	r3, #8
 80065f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	9808      	ldr	r0, [sp, #32]
 80065fe:	b019      	add	sp, #100	; 0x64
 8006600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006604:	4b91      	ldr	r3, [pc, #580]	; (800684c <_dtoa_r+0x2ec>)
 8006606:	9308      	str	r3, [sp, #32]
 8006608:	3303      	adds	r3, #3
 800660a:	e7f5      	b.n	80065f8 <_dtoa_r+0x98>
 800660c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006610:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006618:	2200      	movs	r2, #0
 800661a:	2300      	movs	r3, #0
 800661c:	f7fa f9c4 	bl	80009a8 <__aeabi_dcmpeq>
 8006620:	4680      	mov	r8, r0
 8006622:	b158      	cbz	r0, 800663c <_dtoa_r+0xdc>
 8006624:	2301      	movs	r3, #1
 8006626:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 8559 	beq.w	80070e4 <_dtoa_r+0xb84>
 8006632:	4888      	ldr	r0, [pc, #544]	; (8006854 <_dtoa_r+0x2f4>)
 8006634:	6018      	str	r0, [r3, #0]
 8006636:	1e43      	subs	r3, r0, #1
 8006638:	9308      	str	r3, [sp, #32]
 800663a:	e7df      	b.n	80065fc <_dtoa_r+0x9c>
 800663c:	ab16      	add	r3, sp, #88	; 0x58
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	ab17      	add	r3, sp, #92	; 0x5c
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	4628      	mov	r0, r5
 8006646:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800664a:	f001 f8b7 	bl	80077bc <__d2b>
 800664e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006652:	4682      	mov	sl, r0
 8006654:	2c00      	cmp	r4, #0
 8006656:	d07e      	beq.n	8006756 <_dtoa_r+0x1f6>
 8006658:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800665c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800665e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006666:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800666a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800666e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006672:	2200      	movs	r2, #0
 8006674:	4b78      	ldr	r3, [pc, #480]	; (8006858 <_dtoa_r+0x2f8>)
 8006676:	f7f9 fd77 	bl	8000168 <__aeabi_dsub>
 800667a:	a36b      	add	r3, pc, #428	; (adr r3, 8006828 <_dtoa_r+0x2c8>)
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f7f9 ff2a 	bl	80004d8 <__aeabi_dmul>
 8006684:	a36a      	add	r3, pc, #424	; (adr r3, 8006830 <_dtoa_r+0x2d0>)
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f7f9 fd6f 	bl	800016c <__adddf3>
 800668e:	4606      	mov	r6, r0
 8006690:	4620      	mov	r0, r4
 8006692:	460f      	mov	r7, r1
 8006694:	f7f9 feb6 	bl	8000404 <__aeabi_i2d>
 8006698:	a367      	add	r3, pc, #412	; (adr r3, 8006838 <_dtoa_r+0x2d8>)
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	f7f9 ff1b 	bl	80004d8 <__aeabi_dmul>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4630      	mov	r0, r6
 80066a8:	4639      	mov	r1, r7
 80066aa:	f7f9 fd5f 	bl	800016c <__adddf3>
 80066ae:	4606      	mov	r6, r0
 80066b0:	460f      	mov	r7, r1
 80066b2:	f7fa f9c1 	bl	8000a38 <__aeabi_d2iz>
 80066b6:	2200      	movs	r2, #0
 80066b8:	4681      	mov	r9, r0
 80066ba:	2300      	movs	r3, #0
 80066bc:	4630      	mov	r0, r6
 80066be:	4639      	mov	r1, r7
 80066c0:	f7fa f97c 	bl	80009bc <__aeabi_dcmplt>
 80066c4:	b148      	cbz	r0, 80066da <_dtoa_r+0x17a>
 80066c6:	4648      	mov	r0, r9
 80066c8:	f7f9 fe9c 	bl	8000404 <__aeabi_i2d>
 80066cc:	4632      	mov	r2, r6
 80066ce:	463b      	mov	r3, r7
 80066d0:	f7fa f96a 	bl	80009a8 <__aeabi_dcmpeq>
 80066d4:	b908      	cbnz	r0, 80066da <_dtoa_r+0x17a>
 80066d6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80066da:	f1b9 0f16 	cmp.w	r9, #22
 80066de:	d857      	bhi.n	8006790 <_dtoa_r+0x230>
 80066e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066e4:	4b5d      	ldr	r3, [pc, #372]	; (800685c <_dtoa_r+0x2fc>)
 80066e6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	f7fa f965 	bl	80009bc <__aeabi_dcmplt>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d04e      	beq.n	8006794 <_dtoa_r+0x234>
 80066f6:	2300      	movs	r3, #0
 80066f8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80066fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80066fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006700:	1b1c      	subs	r4, r3, r4
 8006702:	1e63      	subs	r3, r4, #1
 8006704:	9309      	str	r3, [sp, #36]	; 0x24
 8006706:	bf49      	itett	mi
 8006708:	f1c4 0301 	rsbmi	r3, r4, #1
 800670c:	2300      	movpl	r3, #0
 800670e:	9306      	strmi	r3, [sp, #24]
 8006710:	2300      	movmi	r3, #0
 8006712:	bf54      	ite	pl
 8006714:	9306      	strpl	r3, [sp, #24]
 8006716:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006718:	f1b9 0f00 	cmp.w	r9, #0
 800671c:	db3c      	blt.n	8006798 <_dtoa_r+0x238>
 800671e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006720:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006724:	444b      	add	r3, r9
 8006726:	9309      	str	r3, [sp, #36]	; 0x24
 8006728:	2300      	movs	r3, #0
 800672a:	930a      	str	r3, [sp, #40]	; 0x28
 800672c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800672e:	2b09      	cmp	r3, #9
 8006730:	d86c      	bhi.n	800680c <_dtoa_r+0x2ac>
 8006732:	2b05      	cmp	r3, #5
 8006734:	bfc4      	itt	gt
 8006736:	3b04      	subgt	r3, #4
 8006738:	9322      	strgt	r3, [sp, #136]	; 0x88
 800673a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800673c:	bfc8      	it	gt
 800673e:	2400      	movgt	r4, #0
 8006740:	f1a3 0302 	sub.w	r3, r3, #2
 8006744:	bfd8      	it	le
 8006746:	2401      	movle	r4, #1
 8006748:	2b03      	cmp	r3, #3
 800674a:	f200 808b 	bhi.w	8006864 <_dtoa_r+0x304>
 800674e:	e8df f003 	tbb	[pc, r3]
 8006752:	4f2d      	.short	0x4f2d
 8006754:	5b4d      	.short	0x5b4d
 8006756:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800675a:	441c      	add	r4, r3
 800675c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006760:	2b20      	cmp	r3, #32
 8006762:	bfc3      	ittte	gt
 8006764:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006768:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800676c:	fa09 f303 	lslgt.w	r3, r9, r3
 8006770:	f1c3 0320 	rsble	r3, r3, #32
 8006774:	bfc6      	itte	gt
 8006776:	fa26 f000 	lsrgt.w	r0, r6, r0
 800677a:	4318      	orrgt	r0, r3
 800677c:	fa06 f003 	lslle.w	r0, r6, r3
 8006780:	f7f9 fe30 	bl	80003e4 <__aeabi_ui2d>
 8006784:	2301      	movs	r3, #1
 8006786:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800678a:	3c01      	subs	r4, #1
 800678c:	9313      	str	r3, [sp, #76]	; 0x4c
 800678e:	e770      	b.n	8006672 <_dtoa_r+0x112>
 8006790:	2301      	movs	r3, #1
 8006792:	e7b3      	b.n	80066fc <_dtoa_r+0x19c>
 8006794:	900f      	str	r0, [sp, #60]	; 0x3c
 8006796:	e7b2      	b.n	80066fe <_dtoa_r+0x19e>
 8006798:	9b06      	ldr	r3, [sp, #24]
 800679a:	eba3 0309 	sub.w	r3, r3, r9
 800679e:	9306      	str	r3, [sp, #24]
 80067a0:	f1c9 0300 	rsb	r3, r9, #0
 80067a4:	930a      	str	r3, [sp, #40]	; 0x28
 80067a6:	2300      	movs	r3, #0
 80067a8:	930e      	str	r3, [sp, #56]	; 0x38
 80067aa:	e7bf      	b.n	800672c <_dtoa_r+0x1cc>
 80067ac:	2300      	movs	r3, #0
 80067ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80067b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dc59      	bgt.n	800686a <_dtoa_r+0x30a>
 80067b6:	f04f 0b01 	mov.w	fp, #1
 80067ba:	465b      	mov	r3, fp
 80067bc:	f8cd b008 	str.w	fp, [sp, #8]
 80067c0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80067c4:	2200      	movs	r2, #0
 80067c6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80067c8:	6042      	str	r2, [r0, #4]
 80067ca:	2204      	movs	r2, #4
 80067cc:	f102 0614 	add.w	r6, r2, #20
 80067d0:	429e      	cmp	r6, r3
 80067d2:	6841      	ldr	r1, [r0, #4]
 80067d4:	d94f      	bls.n	8006876 <_dtoa_r+0x316>
 80067d6:	4628      	mov	r0, r5
 80067d8:	f000 fcca 	bl	8007170 <_Balloc>
 80067dc:	9008      	str	r0, [sp, #32]
 80067de:	2800      	cmp	r0, #0
 80067e0:	d14d      	bne.n	800687e <_dtoa_r+0x31e>
 80067e2:	4602      	mov	r2, r0
 80067e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80067e8:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <_dtoa_r+0x300>)
 80067ea:	e6cd      	b.n	8006588 <_dtoa_r+0x28>
 80067ec:	2301      	movs	r3, #1
 80067ee:	e7de      	b.n	80067ae <_dtoa_r+0x24e>
 80067f0:	2300      	movs	r3, #0
 80067f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80067f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067f6:	eb09 0b03 	add.w	fp, r9, r3
 80067fa:	f10b 0301 	add.w	r3, fp, #1
 80067fe:	2b01      	cmp	r3, #1
 8006800:	9302      	str	r3, [sp, #8]
 8006802:	bfb8      	it	lt
 8006804:	2301      	movlt	r3, #1
 8006806:	e7dd      	b.n	80067c4 <_dtoa_r+0x264>
 8006808:	2301      	movs	r3, #1
 800680a:	e7f2      	b.n	80067f2 <_dtoa_r+0x292>
 800680c:	2401      	movs	r4, #1
 800680e:	2300      	movs	r3, #0
 8006810:	940b      	str	r4, [sp, #44]	; 0x2c
 8006812:	9322      	str	r3, [sp, #136]	; 0x88
 8006814:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8006818:	2200      	movs	r2, #0
 800681a:	2312      	movs	r3, #18
 800681c:	f8cd b008 	str.w	fp, [sp, #8]
 8006820:	9223      	str	r2, [sp, #140]	; 0x8c
 8006822:	e7cf      	b.n	80067c4 <_dtoa_r+0x264>
 8006824:	f3af 8000 	nop.w
 8006828:	636f4361 	.word	0x636f4361
 800682c:	3fd287a7 	.word	0x3fd287a7
 8006830:	8b60c8b3 	.word	0x8b60c8b3
 8006834:	3fc68a28 	.word	0x3fc68a28
 8006838:	509f79fb 	.word	0x509f79fb
 800683c:	3fd34413 	.word	0x3fd34413
 8006840:	08008945 	.word	0x08008945
 8006844:	0800895c 	.word	0x0800895c
 8006848:	7ff00000 	.word	0x7ff00000
 800684c:	08008941 	.word	0x08008941
 8006850:	08008938 	.word	0x08008938
 8006854:	08008915 	.word	0x08008915
 8006858:	3ff80000 	.word	0x3ff80000
 800685c:	08008a58 	.word	0x08008a58
 8006860:	080089bb 	.word	0x080089bb
 8006864:	2301      	movs	r3, #1
 8006866:	930b      	str	r3, [sp, #44]	; 0x2c
 8006868:	e7d4      	b.n	8006814 <_dtoa_r+0x2b4>
 800686a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800686e:	465b      	mov	r3, fp
 8006870:	f8cd b008 	str.w	fp, [sp, #8]
 8006874:	e7a6      	b.n	80067c4 <_dtoa_r+0x264>
 8006876:	3101      	adds	r1, #1
 8006878:	6041      	str	r1, [r0, #4]
 800687a:	0052      	lsls	r2, r2, #1
 800687c:	e7a6      	b.n	80067cc <_dtoa_r+0x26c>
 800687e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006880:	9a08      	ldr	r2, [sp, #32]
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	9b02      	ldr	r3, [sp, #8]
 8006886:	2b0e      	cmp	r3, #14
 8006888:	f200 80a8 	bhi.w	80069dc <_dtoa_r+0x47c>
 800688c:	2c00      	cmp	r4, #0
 800688e:	f000 80a5 	beq.w	80069dc <_dtoa_r+0x47c>
 8006892:	f1b9 0f00 	cmp.w	r9, #0
 8006896:	dd34      	ble.n	8006902 <_dtoa_r+0x3a2>
 8006898:	4a9a      	ldr	r2, [pc, #616]	; (8006b04 <_dtoa_r+0x5a4>)
 800689a:	f009 030f 	and.w	r3, r9, #15
 800689e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068a2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80068a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80068aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80068ae:	ea4f 1429 	mov.w	r4, r9, asr #4
 80068b2:	d016      	beq.n	80068e2 <_dtoa_r+0x382>
 80068b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068b8:	4b93      	ldr	r3, [pc, #588]	; (8006b08 <_dtoa_r+0x5a8>)
 80068ba:	2703      	movs	r7, #3
 80068bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068c0:	f7f9 ff34 	bl	800072c <__aeabi_ddiv>
 80068c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068c8:	f004 040f 	and.w	r4, r4, #15
 80068cc:	4e8e      	ldr	r6, [pc, #568]	; (8006b08 <_dtoa_r+0x5a8>)
 80068ce:	b954      	cbnz	r4, 80068e6 <_dtoa_r+0x386>
 80068d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068d8:	f7f9 ff28 	bl	800072c <__aeabi_ddiv>
 80068dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068e0:	e029      	b.n	8006936 <_dtoa_r+0x3d6>
 80068e2:	2702      	movs	r7, #2
 80068e4:	e7f2      	b.n	80068cc <_dtoa_r+0x36c>
 80068e6:	07e1      	lsls	r1, r4, #31
 80068e8:	d508      	bpl.n	80068fc <_dtoa_r+0x39c>
 80068ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068f2:	f7f9 fdf1 	bl	80004d8 <__aeabi_dmul>
 80068f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068fa:	3701      	adds	r7, #1
 80068fc:	1064      	asrs	r4, r4, #1
 80068fe:	3608      	adds	r6, #8
 8006900:	e7e5      	b.n	80068ce <_dtoa_r+0x36e>
 8006902:	f000 80a5 	beq.w	8006a50 <_dtoa_r+0x4f0>
 8006906:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800690a:	f1c9 0400 	rsb	r4, r9, #0
 800690e:	4b7d      	ldr	r3, [pc, #500]	; (8006b04 <_dtoa_r+0x5a4>)
 8006910:	f004 020f 	and.w	r2, r4, #15
 8006914:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f7f9 fddc 	bl	80004d8 <__aeabi_dmul>
 8006920:	2702      	movs	r7, #2
 8006922:	2300      	movs	r3, #0
 8006924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006928:	4e77      	ldr	r6, [pc, #476]	; (8006b08 <_dtoa_r+0x5a8>)
 800692a:	1124      	asrs	r4, r4, #4
 800692c:	2c00      	cmp	r4, #0
 800692e:	f040 8084 	bne.w	8006a3a <_dtoa_r+0x4da>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1d2      	bne.n	80068dc <_dtoa_r+0x37c>
 8006936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 808b 	beq.w	8006a54 <_dtoa_r+0x4f4>
 800693e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006942:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006946:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800694a:	2200      	movs	r2, #0
 800694c:	4b6f      	ldr	r3, [pc, #444]	; (8006b0c <_dtoa_r+0x5ac>)
 800694e:	f7fa f835 	bl	80009bc <__aeabi_dcmplt>
 8006952:	2800      	cmp	r0, #0
 8006954:	d07e      	beq.n	8006a54 <_dtoa_r+0x4f4>
 8006956:	9b02      	ldr	r3, [sp, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d07b      	beq.n	8006a54 <_dtoa_r+0x4f4>
 800695c:	f1bb 0f00 	cmp.w	fp, #0
 8006960:	dd38      	ble.n	80069d4 <_dtoa_r+0x474>
 8006962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006966:	2200      	movs	r2, #0
 8006968:	4b69      	ldr	r3, [pc, #420]	; (8006b10 <_dtoa_r+0x5b0>)
 800696a:	f7f9 fdb5 	bl	80004d8 <__aeabi_dmul>
 800696e:	465c      	mov	r4, fp
 8006970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006974:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8006978:	3701      	adds	r7, #1
 800697a:	4638      	mov	r0, r7
 800697c:	f7f9 fd42 	bl	8000404 <__aeabi_i2d>
 8006980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006984:	f7f9 fda8 	bl	80004d8 <__aeabi_dmul>
 8006988:	2200      	movs	r2, #0
 800698a:	4b62      	ldr	r3, [pc, #392]	; (8006b14 <_dtoa_r+0x5b4>)
 800698c:	f7f9 fbee 	bl	800016c <__adddf3>
 8006990:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006994:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006998:	9611      	str	r6, [sp, #68]	; 0x44
 800699a:	2c00      	cmp	r4, #0
 800699c:	d15d      	bne.n	8006a5a <_dtoa_r+0x4fa>
 800699e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069a2:	2200      	movs	r2, #0
 80069a4:	4b5c      	ldr	r3, [pc, #368]	; (8006b18 <_dtoa_r+0x5b8>)
 80069a6:	f7f9 fbdf 	bl	8000168 <__aeabi_dsub>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069b2:	4633      	mov	r3, r6
 80069b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069b6:	f7fa f81f 	bl	80009f8 <__aeabi_dcmpgt>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	f040 829e 	bne.w	8006efc <_dtoa_r+0x99c>
 80069c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80069ca:	f7f9 fff7 	bl	80009bc <__aeabi_dcmplt>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	f040 8292 	bne.w	8006ef8 <_dtoa_r+0x998>
 80069d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80069d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80069dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f2c0 8153 	blt.w	8006c8a <_dtoa_r+0x72a>
 80069e4:	f1b9 0f0e 	cmp.w	r9, #14
 80069e8:	f300 814f 	bgt.w	8006c8a <_dtoa_r+0x72a>
 80069ec:	4b45      	ldr	r3, [pc, #276]	; (8006b04 <_dtoa_r+0x5a4>)
 80069ee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80069f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80069fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f280 80db 	bge.w	8006bb8 <_dtoa_r+0x658>
 8006a02:	9b02      	ldr	r3, [sp, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f300 80d7 	bgt.w	8006bb8 <_dtoa_r+0x658>
 8006a0a:	f040 8274 	bne.w	8006ef6 <_dtoa_r+0x996>
 8006a0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a12:	2200      	movs	r2, #0
 8006a14:	4b40      	ldr	r3, [pc, #256]	; (8006b18 <_dtoa_r+0x5b8>)
 8006a16:	f7f9 fd5f 	bl	80004d8 <__aeabi_dmul>
 8006a1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a1e:	f7f9 ffe1 	bl	80009e4 <__aeabi_dcmpge>
 8006a22:	9c02      	ldr	r4, [sp, #8]
 8006a24:	4626      	mov	r6, r4
 8006a26:	2800      	cmp	r0, #0
 8006a28:	f040 824a 	bne.w	8006ec0 <_dtoa_r+0x960>
 8006a2c:	2331      	movs	r3, #49	; 0x31
 8006a2e:	9f08      	ldr	r7, [sp, #32]
 8006a30:	f109 0901 	add.w	r9, r9, #1
 8006a34:	f807 3b01 	strb.w	r3, [r7], #1
 8006a38:	e246      	b.n	8006ec8 <_dtoa_r+0x968>
 8006a3a:	07e2      	lsls	r2, r4, #31
 8006a3c:	d505      	bpl.n	8006a4a <_dtoa_r+0x4ea>
 8006a3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a42:	f7f9 fd49 	bl	80004d8 <__aeabi_dmul>
 8006a46:	2301      	movs	r3, #1
 8006a48:	3701      	adds	r7, #1
 8006a4a:	1064      	asrs	r4, r4, #1
 8006a4c:	3608      	adds	r6, #8
 8006a4e:	e76d      	b.n	800692c <_dtoa_r+0x3cc>
 8006a50:	2702      	movs	r7, #2
 8006a52:	e770      	b.n	8006936 <_dtoa_r+0x3d6>
 8006a54:	46c8      	mov	r8, r9
 8006a56:	9c02      	ldr	r4, [sp, #8]
 8006a58:	e78f      	b.n	800697a <_dtoa_r+0x41a>
 8006a5a:	9908      	ldr	r1, [sp, #32]
 8006a5c:	4b29      	ldr	r3, [pc, #164]	; (8006b04 <_dtoa_r+0x5a4>)
 8006a5e:	4421      	add	r1, r4
 8006a60:	9112      	str	r1, [sp, #72]	; 0x48
 8006a62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a68:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006a6c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a70:	2900      	cmp	r1, #0
 8006a72:	d055      	beq.n	8006b20 <_dtoa_r+0x5c0>
 8006a74:	2000      	movs	r0, #0
 8006a76:	4929      	ldr	r1, [pc, #164]	; (8006b1c <_dtoa_r+0x5bc>)
 8006a78:	f7f9 fe58 	bl	800072c <__aeabi_ddiv>
 8006a7c:	463b      	mov	r3, r7
 8006a7e:	4632      	mov	r2, r6
 8006a80:	f7f9 fb72 	bl	8000168 <__aeabi_dsub>
 8006a84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a88:	9f08      	ldr	r7, [sp, #32]
 8006a8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a8e:	f7f9 ffd3 	bl	8000a38 <__aeabi_d2iz>
 8006a92:	4604      	mov	r4, r0
 8006a94:	f7f9 fcb6 	bl	8000404 <__aeabi_i2d>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aa0:	f7f9 fb62 	bl	8000168 <__aeabi_dsub>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	3430      	adds	r4, #48	; 0x30
 8006aaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006aae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ab2:	f807 4b01 	strb.w	r4, [r7], #1
 8006ab6:	f7f9 ff81 	bl	80009bc <__aeabi_dcmplt>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d174      	bne.n	8006ba8 <_dtoa_r+0x648>
 8006abe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	4911      	ldr	r1, [pc, #68]	; (8006b0c <_dtoa_r+0x5ac>)
 8006ac6:	f7f9 fb4f 	bl	8000168 <__aeabi_dsub>
 8006aca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ace:	f7f9 ff75 	bl	80009bc <__aeabi_dcmplt>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	f040 80b6 	bne.w	8006c44 <_dtoa_r+0x6e4>
 8006ad8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ada:	429f      	cmp	r7, r3
 8006adc:	f43f af7a 	beq.w	80069d4 <_dtoa_r+0x474>
 8006ae0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <_dtoa_r+0x5b0>)
 8006ae8:	f7f9 fcf6 	bl	80004d8 <__aeabi_dmul>
 8006aec:	2200      	movs	r2, #0
 8006aee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006af2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006af6:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <_dtoa_r+0x5b0>)
 8006af8:	f7f9 fcee 	bl	80004d8 <__aeabi_dmul>
 8006afc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b00:	e7c3      	b.n	8006a8a <_dtoa_r+0x52a>
 8006b02:	bf00      	nop
 8006b04:	08008a58 	.word	0x08008a58
 8006b08:	08008a30 	.word	0x08008a30
 8006b0c:	3ff00000 	.word	0x3ff00000
 8006b10:	40240000 	.word	0x40240000
 8006b14:	401c0000 	.word	0x401c0000
 8006b18:	40140000 	.word	0x40140000
 8006b1c:	3fe00000 	.word	0x3fe00000
 8006b20:	4630      	mov	r0, r6
 8006b22:	4639      	mov	r1, r7
 8006b24:	f7f9 fcd8 	bl	80004d8 <__aeabi_dmul>
 8006b28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b2e:	9c08      	ldr	r4, [sp, #32]
 8006b30:	9314      	str	r3, [sp, #80]	; 0x50
 8006b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b36:	f7f9 ff7f 	bl	8000a38 <__aeabi_d2iz>
 8006b3a:	9015      	str	r0, [sp, #84]	; 0x54
 8006b3c:	f7f9 fc62 	bl	8000404 <__aeabi_i2d>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b48:	f7f9 fb0e 	bl	8000168 <__aeabi_dsub>
 8006b4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b4e:	4606      	mov	r6, r0
 8006b50:	3330      	adds	r3, #48	; 0x30
 8006b52:	f804 3b01 	strb.w	r3, [r4], #1
 8006b56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b58:	460f      	mov	r7, r1
 8006b5a:	429c      	cmp	r4, r3
 8006b5c:	f04f 0200 	mov.w	r2, #0
 8006b60:	d124      	bne.n	8006bac <_dtoa_r+0x64c>
 8006b62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b66:	4bb3      	ldr	r3, [pc, #716]	; (8006e34 <_dtoa_r+0x8d4>)
 8006b68:	f7f9 fb00 	bl	800016c <__adddf3>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4630      	mov	r0, r6
 8006b72:	4639      	mov	r1, r7
 8006b74:	f7f9 ff40 	bl	80009f8 <__aeabi_dcmpgt>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d162      	bne.n	8006c42 <_dtoa_r+0x6e2>
 8006b7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b80:	2000      	movs	r0, #0
 8006b82:	49ac      	ldr	r1, [pc, #688]	; (8006e34 <_dtoa_r+0x8d4>)
 8006b84:	f7f9 faf0 	bl	8000168 <__aeabi_dsub>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	4639      	mov	r1, r7
 8006b90:	f7f9 ff14 	bl	80009bc <__aeabi_dcmplt>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	f43f af1d 	beq.w	80069d4 <_dtoa_r+0x474>
 8006b9a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006b9c:	1e7b      	subs	r3, r7, #1
 8006b9e:	9314      	str	r3, [sp, #80]	; 0x50
 8006ba0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006ba4:	2b30      	cmp	r3, #48	; 0x30
 8006ba6:	d0f8      	beq.n	8006b9a <_dtoa_r+0x63a>
 8006ba8:	46c1      	mov	r9, r8
 8006baa:	e03a      	b.n	8006c22 <_dtoa_r+0x6c2>
 8006bac:	4ba2      	ldr	r3, [pc, #648]	; (8006e38 <_dtoa_r+0x8d8>)
 8006bae:	f7f9 fc93 	bl	80004d8 <__aeabi_dmul>
 8006bb2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bb6:	e7bc      	b.n	8006b32 <_dtoa_r+0x5d2>
 8006bb8:	9f08      	ldr	r7, [sp, #32]
 8006bba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bc2:	f7f9 fdb3 	bl	800072c <__aeabi_ddiv>
 8006bc6:	f7f9 ff37 	bl	8000a38 <__aeabi_d2iz>
 8006bca:	4604      	mov	r4, r0
 8006bcc:	f7f9 fc1a 	bl	8000404 <__aeabi_i2d>
 8006bd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bd4:	f7f9 fc80 	bl	80004d8 <__aeabi_dmul>
 8006bd8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4602      	mov	r2, r0
 8006be0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006be4:	f7f9 fac0 	bl	8000168 <__aeabi_dsub>
 8006be8:	f807 6b01 	strb.w	r6, [r7], #1
 8006bec:	9e08      	ldr	r6, [sp, #32]
 8006bee:	9b02      	ldr	r3, [sp, #8]
 8006bf0:	1bbe      	subs	r6, r7, r6
 8006bf2:	42b3      	cmp	r3, r6
 8006bf4:	d13a      	bne.n	8006c6c <_dtoa_r+0x70c>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	f7f9 fab7 	bl	800016c <__adddf3>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c0a:	f7f9 fef5 	bl	80009f8 <__aeabi_dcmpgt>
 8006c0e:	bb58      	cbnz	r0, 8006c68 <_dtoa_r+0x708>
 8006c10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c18:	f7f9 fec6 	bl	80009a8 <__aeabi_dcmpeq>
 8006c1c:	b108      	cbz	r0, 8006c22 <_dtoa_r+0x6c2>
 8006c1e:	07e1      	lsls	r1, r4, #31
 8006c20:	d422      	bmi.n	8006c68 <_dtoa_r+0x708>
 8006c22:	4628      	mov	r0, r5
 8006c24:	4651      	mov	r1, sl
 8006c26:	f000 fae3 	bl	80071f0 <_Bfree>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	703b      	strb	r3, [r7, #0]
 8006c2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006c30:	f109 0001 	add.w	r0, r9, #1
 8006c34:	6018      	str	r0, [r3, #0]
 8006c36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f43f acdf 	beq.w	80065fc <_dtoa_r+0x9c>
 8006c3e:	601f      	str	r7, [r3, #0]
 8006c40:	e4dc      	b.n	80065fc <_dtoa_r+0x9c>
 8006c42:	4627      	mov	r7, r4
 8006c44:	463b      	mov	r3, r7
 8006c46:	461f      	mov	r7, r3
 8006c48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c4c:	2a39      	cmp	r2, #57	; 0x39
 8006c4e:	d107      	bne.n	8006c60 <_dtoa_r+0x700>
 8006c50:	9a08      	ldr	r2, [sp, #32]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d1f7      	bne.n	8006c46 <_dtoa_r+0x6e6>
 8006c56:	2230      	movs	r2, #48	; 0x30
 8006c58:	9908      	ldr	r1, [sp, #32]
 8006c5a:	f108 0801 	add.w	r8, r8, #1
 8006c5e:	700a      	strb	r2, [r1, #0]
 8006c60:	781a      	ldrb	r2, [r3, #0]
 8006c62:	3201      	adds	r2, #1
 8006c64:	701a      	strb	r2, [r3, #0]
 8006c66:	e79f      	b.n	8006ba8 <_dtoa_r+0x648>
 8006c68:	46c8      	mov	r8, r9
 8006c6a:	e7eb      	b.n	8006c44 <_dtoa_r+0x6e4>
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	4b72      	ldr	r3, [pc, #456]	; (8006e38 <_dtoa_r+0x8d8>)
 8006c70:	f7f9 fc32 	bl	80004d8 <__aeabi_dmul>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f7f9 fe92 	bl	80009a8 <__aeabi_dcmpeq>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d098      	beq.n	8006bba <_dtoa_r+0x65a>
 8006c88:	e7cb      	b.n	8006c22 <_dtoa_r+0x6c2>
 8006c8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c8c:	2a00      	cmp	r2, #0
 8006c8e:	f000 80cd 	beq.w	8006e2c <_dtoa_r+0x8cc>
 8006c92:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006c94:	2a01      	cmp	r2, #1
 8006c96:	f300 80af 	bgt.w	8006df8 <_dtoa_r+0x898>
 8006c9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006c9c:	2a00      	cmp	r2, #0
 8006c9e:	f000 80a7 	beq.w	8006df0 <_dtoa_r+0x890>
 8006ca2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ca6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ca8:	9f06      	ldr	r7, [sp, #24]
 8006caa:	9a06      	ldr	r2, [sp, #24]
 8006cac:	2101      	movs	r1, #1
 8006cae:	441a      	add	r2, r3
 8006cb0:	9206      	str	r2, [sp, #24]
 8006cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	441a      	add	r2, r3
 8006cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8006cba:	f000 fb53 	bl	8007364 <__i2b>
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	2f00      	cmp	r7, #0
 8006cc2:	dd0c      	ble.n	8006cde <_dtoa_r+0x77e>
 8006cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	dd09      	ble.n	8006cde <_dtoa_r+0x77e>
 8006cca:	42bb      	cmp	r3, r7
 8006ccc:	bfa8      	it	ge
 8006cce:	463b      	movge	r3, r7
 8006cd0:	9a06      	ldr	r2, [sp, #24]
 8006cd2:	1aff      	subs	r7, r7, r3
 8006cd4:	1ad2      	subs	r2, r2, r3
 8006cd6:	9206      	str	r2, [sp, #24]
 8006cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8006cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ce0:	b1f3      	cbz	r3, 8006d20 <_dtoa_r+0x7c0>
 8006ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 80a9 	beq.w	8006e3c <_dtoa_r+0x8dc>
 8006cea:	2c00      	cmp	r4, #0
 8006cec:	dd10      	ble.n	8006d10 <_dtoa_r+0x7b0>
 8006cee:	4631      	mov	r1, r6
 8006cf0:	4622      	mov	r2, r4
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f000 fbf0 	bl	80074d8 <__pow5mult>
 8006cf8:	4652      	mov	r2, sl
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	4628      	mov	r0, r5
 8006d00:	f000 fb46 	bl	8007390 <__multiply>
 8006d04:	4680      	mov	r8, r0
 8006d06:	4651      	mov	r1, sl
 8006d08:	4628      	mov	r0, r5
 8006d0a:	f000 fa71 	bl	80071f0 <_Bfree>
 8006d0e:	46c2      	mov	sl, r8
 8006d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d12:	1b1a      	subs	r2, r3, r4
 8006d14:	d004      	beq.n	8006d20 <_dtoa_r+0x7c0>
 8006d16:	4651      	mov	r1, sl
 8006d18:	4628      	mov	r0, r5
 8006d1a:	f000 fbdd 	bl	80074d8 <__pow5mult>
 8006d1e:	4682      	mov	sl, r0
 8006d20:	2101      	movs	r1, #1
 8006d22:	4628      	mov	r0, r5
 8006d24:	f000 fb1e 	bl	8007364 <__i2b>
 8006d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f340 8087 	ble.w	8006e40 <_dtoa_r+0x8e0>
 8006d32:	461a      	mov	r2, r3
 8006d34:	4601      	mov	r1, r0
 8006d36:	4628      	mov	r0, r5
 8006d38:	f000 fbce 	bl	80074d8 <__pow5mult>
 8006d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d3e:	4604      	mov	r4, r0
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	f340 8080 	ble.w	8006e46 <_dtoa_r+0x8e6>
 8006d46:	f04f 0800 	mov.w	r8, #0
 8006d4a:	6923      	ldr	r3, [r4, #16]
 8006d4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d50:	6918      	ldr	r0, [r3, #16]
 8006d52:	f000 fab9 	bl	80072c8 <__hi0bits>
 8006d56:	f1c0 0020 	rsb	r0, r0, #32
 8006d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d5c:	4418      	add	r0, r3
 8006d5e:	f010 001f 	ands.w	r0, r0, #31
 8006d62:	f000 8092 	beq.w	8006e8a <_dtoa_r+0x92a>
 8006d66:	f1c0 0320 	rsb	r3, r0, #32
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	f340 808a 	ble.w	8006e84 <_dtoa_r+0x924>
 8006d70:	f1c0 001c 	rsb	r0, r0, #28
 8006d74:	9b06      	ldr	r3, [sp, #24]
 8006d76:	4407      	add	r7, r0
 8006d78:	4403      	add	r3, r0
 8006d7a:	9306      	str	r3, [sp, #24]
 8006d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d7e:	4403      	add	r3, r0
 8006d80:	9309      	str	r3, [sp, #36]	; 0x24
 8006d82:	9b06      	ldr	r3, [sp, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	dd05      	ble.n	8006d94 <_dtoa_r+0x834>
 8006d88:	4651      	mov	r1, sl
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f000 fbfd 	bl	800758c <__lshift>
 8006d92:	4682      	mov	sl, r0
 8006d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	dd05      	ble.n	8006da6 <_dtoa_r+0x846>
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f000 fbf4 	bl	800758c <__lshift>
 8006da4:	4604      	mov	r4, r0
 8006da6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d070      	beq.n	8006e8e <_dtoa_r+0x92e>
 8006dac:	4621      	mov	r1, r4
 8006dae:	4650      	mov	r0, sl
 8006db0:	f000 fc58 	bl	8007664 <__mcmp>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	da6a      	bge.n	8006e8e <_dtoa_r+0x92e>
 8006db8:	2300      	movs	r3, #0
 8006dba:	4651      	mov	r1, sl
 8006dbc:	220a      	movs	r2, #10
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f000 fa38 	bl	8007234 <__multadd>
 8006dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc6:	4682      	mov	sl, r0
 8006dc8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 8193 	beq.w	80070f8 <_dtoa_r+0xb98>
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	220a      	movs	r2, #10
 8006dd8:	4628      	mov	r0, r5
 8006dda:	f000 fa2b 	bl	8007234 <__multadd>
 8006dde:	f1bb 0f00 	cmp.w	fp, #0
 8006de2:	4606      	mov	r6, r0
 8006de4:	f300 8093 	bgt.w	8006f0e <_dtoa_r+0x9ae>
 8006de8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	dc57      	bgt.n	8006e9e <_dtoa_r+0x93e>
 8006dee:	e08e      	b.n	8006f0e <_dtoa_r+0x9ae>
 8006df0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006df2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006df6:	e756      	b.n	8006ca6 <_dtoa_r+0x746>
 8006df8:	9b02      	ldr	r3, [sp, #8]
 8006dfa:	1e5c      	subs	r4, r3, #1
 8006dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dfe:	42a3      	cmp	r3, r4
 8006e00:	bfb7      	itett	lt
 8006e02:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e04:	1b1c      	subge	r4, r3, r4
 8006e06:	1ae2      	sublt	r2, r4, r3
 8006e08:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006e0a:	bfbe      	ittt	lt
 8006e0c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006e0e:	189b      	addlt	r3, r3, r2
 8006e10:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006e12:	9b02      	ldr	r3, [sp, #8]
 8006e14:	bfb8      	it	lt
 8006e16:	2400      	movlt	r4, #0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	bfbb      	ittet	lt
 8006e1c:	9b06      	ldrlt	r3, [sp, #24]
 8006e1e:	9a02      	ldrlt	r2, [sp, #8]
 8006e20:	9f06      	ldrge	r7, [sp, #24]
 8006e22:	1a9f      	sublt	r7, r3, r2
 8006e24:	bfac      	ite	ge
 8006e26:	9b02      	ldrge	r3, [sp, #8]
 8006e28:	2300      	movlt	r3, #0
 8006e2a:	e73e      	b.n	8006caa <_dtoa_r+0x74a>
 8006e2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e2e:	9f06      	ldr	r7, [sp, #24]
 8006e30:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e32:	e745      	b.n	8006cc0 <_dtoa_r+0x760>
 8006e34:	3fe00000 	.word	0x3fe00000
 8006e38:	40240000 	.word	0x40240000
 8006e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e3e:	e76a      	b.n	8006d16 <_dtoa_r+0x7b6>
 8006e40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	dc19      	bgt.n	8006e7a <_dtoa_r+0x91a>
 8006e46:	9b04      	ldr	r3, [sp, #16]
 8006e48:	b9bb      	cbnz	r3, 8006e7a <_dtoa_r+0x91a>
 8006e4a:	9b05      	ldr	r3, [sp, #20]
 8006e4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e50:	b99b      	cbnz	r3, 8006e7a <_dtoa_r+0x91a>
 8006e52:	9b05      	ldr	r3, [sp, #20]
 8006e54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e58:	0d1b      	lsrs	r3, r3, #20
 8006e5a:	051b      	lsls	r3, r3, #20
 8006e5c:	b183      	cbz	r3, 8006e80 <_dtoa_r+0x920>
 8006e5e:	f04f 0801 	mov.w	r8, #1
 8006e62:	9b06      	ldr	r3, [sp, #24]
 8006e64:	3301      	adds	r3, #1
 8006e66:	9306      	str	r3, [sp, #24]
 8006e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f47f af6a 	bne.w	8006d4a <_dtoa_r+0x7ea>
 8006e76:	2001      	movs	r0, #1
 8006e78:	e76f      	b.n	8006d5a <_dtoa_r+0x7fa>
 8006e7a:	f04f 0800 	mov.w	r8, #0
 8006e7e:	e7f6      	b.n	8006e6e <_dtoa_r+0x90e>
 8006e80:	4698      	mov	r8, r3
 8006e82:	e7f4      	b.n	8006e6e <_dtoa_r+0x90e>
 8006e84:	f43f af7d 	beq.w	8006d82 <_dtoa_r+0x822>
 8006e88:	4618      	mov	r0, r3
 8006e8a:	301c      	adds	r0, #28
 8006e8c:	e772      	b.n	8006d74 <_dtoa_r+0x814>
 8006e8e:	9b02      	ldr	r3, [sp, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	dc36      	bgt.n	8006f02 <_dtoa_r+0x9a2>
 8006e94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	dd33      	ble.n	8006f02 <_dtoa_r+0x9a2>
 8006e9a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006e9e:	f1bb 0f00 	cmp.w	fp, #0
 8006ea2:	d10d      	bne.n	8006ec0 <_dtoa_r+0x960>
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	465b      	mov	r3, fp
 8006ea8:	2205      	movs	r2, #5
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f000 f9c2 	bl	8007234 <__multadd>
 8006eb0:	4601      	mov	r1, r0
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4650      	mov	r0, sl
 8006eb6:	f000 fbd5 	bl	8007664 <__mcmp>
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	f73f adb6 	bgt.w	8006a2c <_dtoa_r+0x4cc>
 8006ec0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ec2:	9f08      	ldr	r7, [sp, #32]
 8006ec4:	ea6f 0903 	mvn.w	r9, r3
 8006ec8:	f04f 0800 	mov.w	r8, #0
 8006ecc:	4621      	mov	r1, r4
 8006ece:	4628      	mov	r0, r5
 8006ed0:	f000 f98e 	bl	80071f0 <_Bfree>
 8006ed4:	2e00      	cmp	r6, #0
 8006ed6:	f43f aea4 	beq.w	8006c22 <_dtoa_r+0x6c2>
 8006eda:	f1b8 0f00 	cmp.w	r8, #0
 8006ede:	d005      	beq.n	8006eec <_dtoa_r+0x98c>
 8006ee0:	45b0      	cmp	r8, r6
 8006ee2:	d003      	beq.n	8006eec <_dtoa_r+0x98c>
 8006ee4:	4641      	mov	r1, r8
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 f982 	bl	80071f0 <_Bfree>
 8006eec:	4631      	mov	r1, r6
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f000 f97e 	bl	80071f0 <_Bfree>
 8006ef4:	e695      	b.n	8006c22 <_dtoa_r+0x6c2>
 8006ef6:	2400      	movs	r4, #0
 8006ef8:	4626      	mov	r6, r4
 8006efa:	e7e1      	b.n	8006ec0 <_dtoa_r+0x960>
 8006efc:	46c1      	mov	r9, r8
 8006efe:	4626      	mov	r6, r4
 8006f00:	e594      	b.n	8006a2c <_dtoa_r+0x4cc>
 8006f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f04:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 80fc 	beq.w	8007106 <_dtoa_r+0xba6>
 8006f0e:	2f00      	cmp	r7, #0
 8006f10:	dd05      	ble.n	8006f1e <_dtoa_r+0x9be>
 8006f12:	4631      	mov	r1, r6
 8006f14:	463a      	mov	r2, r7
 8006f16:	4628      	mov	r0, r5
 8006f18:	f000 fb38 	bl	800758c <__lshift>
 8006f1c:	4606      	mov	r6, r0
 8006f1e:	f1b8 0f00 	cmp.w	r8, #0
 8006f22:	d05c      	beq.n	8006fde <_dtoa_r+0xa7e>
 8006f24:	4628      	mov	r0, r5
 8006f26:	6871      	ldr	r1, [r6, #4]
 8006f28:	f000 f922 	bl	8007170 <_Balloc>
 8006f2c:	4607      	mov	r7, r0
 8006f2e:	b928      	cbnz	r0, 8006f3c <_dtoa_r+0x9dc>
 8006f30:	4602      	mov	r2, r0
 8006f32:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f36:	4b7e      	ldr	r3, [pc, #504]	; (8007130 <_dtoa_r+0xbd0>)
 8006f38:	f7ff bb26 	b.w	8006588 <_dtoa_r+0x28>
 8006f3c:	6932      	ldr	r2, [r6, #16]
 8006f3e:	f106 010c 	add.w	r1, r6, #12
 8006f42:	3202      	adds	r2, #2
 8006f44:	0092      	lsls	r2, r2, #2
 8006f46:	300c      	adds	r0, #12
 8006f48:	f7fe fdc4 	bl	8005ad4 <memcpy>
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	4639      	mov	r1, r7
 8006f50:	4628      	mov	r0, r5
 8006f52:	f000 fb1b 	bl	800758c <__lshift>
 8006f56:	46b0      	mov	r8, r6
 8006f58:	4606      	mov	r6, r0
 8006f5a:	9b08      	ldr	r3, [sp, #32]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	9302      	str	r3, [sp, #8]
 8006f60:	9b08      	ldr	r3, [sp, #32]
 8006f62:	445b      	add	r3, fp
 8006f64:	930a      	str	r3, [sp, #40]	; 0x28
 8006f66:	9b04      	ldr	r3, [sp, #16]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f6e:	9b02      	ldr	r3, [sp, #8]
 8006f70:	4621      	mov	r1, r4
 8006f72:	4650      	mov	r0, sl
 8006f74:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006f78:	f7ff fa62 	bl	8006440 <quorem>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	4641      	mov	r1, r8
 8006f80:	3330      	adds	r3, #48	; 0x30
 8006f82:	9004      	str	r0, [sp, #16]
 8006f84:	4650      	mov	r0, sl
 8006f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f88:	f000 fb6c 	bl	8007664 <__mcmp>
 8006f8c:	4632      	mov	r2, r6
 8006f8e:	9006      	str	r0, [sp, #24]
 8006f90:	4621      	mov	r1, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 fb82 	bl	800769c <__mdiff>
 8006f98:	68c2      	ldr	r2, [r0, #12]
 8006f9a:	4607      	mov	r7, r0
 8006f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f9e:	bb02      	cbnz	r2, 8006fe2 <_dtoa_r+0xa82>
 8006fa0:	4601      	mov	r1, r0
 8006fa2:	4650      	mov	r0, sl
 8006fa4:	f000 fb5e 	bl	8007664 <__mcmp>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fac:	4639      	mov	r1, r7
 8006fae:	4628      	mov	r0, r5
 8006fb0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006fb4:	f000 f91c 	bl	80071f0 <_Bfree>
 8006fb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fbc:	9f02      	ldr	r7, [sp, #8]
 8006fbe:	ea43 0102 	orr.w	r1, r3, r2
 8006fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fc8:	d10d      	bne.n	8006fe6 <_dtoa_r+0xa86>
 8006fca:	2b39      	cmp	r3, #57	; 0x39
 8006fcc:	d027      	beq.n	800701e <_dtoa_r+0xabe>
 8006fce:	9a06      	ldr	r2, [sp, #24]
 8006fd0:	2a00      	cmp	r2, #0
 8006fd2:	dd01      	ble.n	8006fd8 <_dtoa_r+0xa78>
 8006fd4:	9b04      	ldr	r3, [sp, #16]
 8006fd6:	3331      	adds	r3, #49	; 0x31
 8006fd8:	f88b 3000 	strb.w	r3, [fp]
 8006fdc:	e776      	b.n	8006ecc <_dtoa_r+0x96c>
 8006fde:	4630      	mov	r0, r6
 8006fe0:	e7b9      	b.n	8006f56 <_dtoa_r+0x9f6>
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	e7e2      	b.n	8006fac <_dtoa_r+0xa4c>
 8006fe6:	9906      	ldr	r1, [sp, #24]
 8006fe8:	2900      	cmp	r1, #0
 8006fea:	db04      	blt.n	8006ff6 <_dtoa_r+0xa96>
 8006fec:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006fee:	4301      	orrs	r1, r0
 8006ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ff2:	4301      	orrs	r1, r0
 8006ff4:	d120      	bne.n	8007038 <_dtoa_r+0xad8>
 8006ff6:	2a00      	cmp	r2, #0
 8006ff8:	ddee      	ble.n	8006fd8 <_dtoa_r+0xa78>
 8006ffa:	4651      	mov	r1, sl
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	4628      	mov	r0, r5
 8007000:	9302      	str	r3, [sp, #8]
 8007002:	f000 fac3 	bl	800758c <__lshift>
 8007006:	4621      	mov	r1, r4
 8007008:	4682      	mov	sl, r0
 800700a:	f000 fb2b 	bl	8007664 <__mcmp>
 800700e:	2800      	cmp	r0, #0
 8007010:	9b02      	ldr	r3, [sp, #8]
 8007012:	dc02      	bgt.n	800701a <_dtoa_r+0xaba>
 8007014:	d1e0      	bne.n	8006fd8 <_dtoa_r+0xa78>
 8007016:	07da      	lsls	r2, r3, #31
 8007018:	d5de      	bpl.n	8006fd8 <_dtoa_r+0xa78>
 800701a:	2b39      	cmp	r3, #57	; 0x39
 800701c:	d1da      	bne.n	8006fd4 <_dtoa_r+0xa74>
 800701e:	2339      	movs	r3, #57	; 0x39
 8007020:	f88b 3000 	strb.w	r3, [fp]
 8007024:	463b      	mov	r3, r7
 8007026:	461f      	mov	r7, r3
 8007028:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800702c:	3b01      	subs	r3, #1
 800702e:	2a39      	cmp	r2, #57	; 0x39
 8007030:	d050      	beq.n	80070d4 <_dtoa_r+0xb74>
 8007032:	3201      	adds	r2, #1
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	e749      	b.n	8006ecc <_dtoa_r+0x96c>
 8007038:	2a00      	cmp	r2, #0
 800703a:	dd03      	ble.n	8007044 <_dtoa_r+0xae4>
 800703c:	2b39      	cmp	r3, #57	; 0x39
 800703e:	d0ee      	beq.n	800701e <_dtoa_r+0xabe>
 8007040:	3301      	adds	r3, #1
 8007042:	e7c9      	b.n	8006fd8 <_dtoa_r+0xa78>
 8007044:	9a02      	ldr	r2, [sp, #8]
 8007046:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007048:	f802 3c01 	strb.w	r3, [r2, #-1]
 800704c:	428a      	cmp	r2, r1
 800704e:	d02a      	beq.n	80070a6 <_dtoa_r+0xb46>
 8007050:	4651      	mov	r1, sl
 8007052:	2300      	movs	r3, #0
 8007054:	220a      	movs	r2, #10
 8007056:	4628      	mov	r0, r5
 8007058:	f000 f8ec 	bl	8007234 <__multadd>
 800705c:	45b0      	cmp	r8, r6
 800705e:	4682      	mov	sl, r0
 8007060:	f04f 0300 	mov.w	r3, #0
 8007064:	f04f 020a 	mov.w	r2, #10
 8007068:	4641      	mov	r1, r8
 800706a:	4628      	mov	r0, r5
 800706c:	d107      	bne.n	800707e <_dtoa_r+0xb1e>
 800706e:	f000 f8e1 	bl	8007234 <__multadd>
 8007072:	4680      	mov	r8, r0
 8007074:	4606      	mov	r6, r0
 8007076:	9b02      	ldr	r3, [sp, #8]
 8007078:	3301      	adds	r3, #1
 800707a:	9302      	str	r3, [sp, #8]
 800707c:	e777      	b.n	8006f6e <_dtoa_r+0xa0e>
 800707e:	f000 f8d9 	bl	8007234 <__multadd>
 8007082:	4631      	mov	r1, r6
 8007084:	4680      	mov	r8, r0
 8007086:	2300      	movs	r3, #0
 8007088:	220a      	movs	r2, #10
 800708a:	4628      	mov	r0, r5
 800708c:	f000 f8d2 	bl	8007234 <__multadd>
 8007090:	4606      	mov	r6, r0
 8007092:	e7f0      	b.n	8007076 <_dtoa_r+0xb16>
 8007094:	f1bb 0f00 	cmp.w	fp, #0
 8007098:	bfcc      	ite	gt
 800709a:	465f      	movgt	r7, fp
 800709c:	2701      	movle	r7, #1
 800709e:	f04f 0800 	mov.w	r8, #0
 80070a2:	9a08      	ldr	r2, [sp, #32]
 80070a4:	4417      	add	r7, r2
 80070a6:	4651      	mov	r1, sl
 80070a8:	2201      	movs	r2, #1
 80070aa:	4628      	mov	r0, r5
 80070ac:	9302      	str	r3, [sp, #8]
 80070ae:	f000 fa6d 	bl	800758c <__lshift>
 80070b2:	4621      	mov	r1, r4
 80070b4:	4682      	mov	sl, r0
 80070b6:	f000 fad5 	bl	8007664 <__mcmp>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	dcb2      	bgt.n	8007024 <_dtoa_r+0xac4>
 80070be:	d102      	bne.n	80070c6 <_dtoa_r+0xb66>
 80070c0:	9b02      	ldr	r3, [sp, #8]
 80070c2:	07db      	lsls	r3, r3, #31
 80070c4:	d4ae      	bmi.n	8007024 <_dtoa_r+0xac4>
 80070c6:	463b      	mov	r3, r7
 80070c8:	461f      	mov	r7, r3
 80070ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070ce:	2a30      	cmp	r2, #48	; 0x30
 80070d0:	d0fa      	beq.n	80070c8 <_dtoa_r+0xb68>
 80070d2:	e6fb      	b.n	8006ecc <_dtoa_r+0x96c>
 80070d4:	9a08      	ldr	r2, [sp, #32]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d1a5      	bne.n	8007026 <_dtoa_r+0xac6>
 80070da:	2331      	movs	r3, #49	; 0x31
 80070dc:	f109 0901 	add.w	r9, r9, #1
 80070e0:	7013      	strb	r3, [r2, #0]
 80070e2:	e6f3      	b.n	8006ecc <_dtoa_r+0x96c>
 80070e4:	4b13      	ldr	r3, [pc, #76]	; (8007134 <_dtoa_r+0xbd4>)
 80070e6:	f7ff baa7 	b.w	8006638 <_dtoa_r+0xd8>
 80070ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	f47f aa80 	bne.w	80065f2 <_dtoa_r+0x92>
 80070f2:	4b11      	ldr	r3, [pc, #68]	; (8007138 <_dtoa_r+0xbd8>)
 80070f4:	f7ff baa0 	b.w	8006638 <_dtoa_r+0xd8>
 80070f8:	f1bb 0f00 	cmp.w	fp, #0
 80070fc:	dc03      	bgt.n	8007106 <_dtoa_r+0xba6>
 80070fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007100:	2b02      	cmp	r3, #2
 8007102:	f73f aecc 	bgt.w	8006e9e <_dtoa_r+0x93e>
 8007106:	9f08      	ldr	r7, [sp, #32]
 8007108:	4621      	mov	r1, r4
 800710a:	4650      	mov	r0, sl
 800710c:	f7ff f998 	bl	8006440 <quorem>
 8007110:	9a08      	ldr	r2, [sp, #32]
 8007112:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007116:	f807 3b01 	strb.w	r3, [r7], #1
 800711a:	1aba      	subs	r2, r7, r2
 800711c:	4593      	cmp	fp, r2
 800711e:	ddb9      	ble.n	8007094 <_dtoa_r+0xb34>
 8007120:	4651      	mov	r1, sl
 8007122:	2300      	movs	r3, #0
 8007124:	220a      	movs	r2, #10
 8007126:	4628      	mov	r0, r5
 8007128:	f000 f884 	bl	8007234 <__multadd>
 800712c:	4682      	mov	sl, r0
 800712e:	e7eb      	b.n	8007108 <_dtoa_r+0xba8>
 8007130:	080089bb 	.word	0x080089bb
 8007134:	08008914 	.word	0x08008914
 8007138:	08008938 	.word	0x08008938

0800713c <_localeconv_r>:
 800713c:	4800      	ldr	r0, [pc, #0]	; (8007140 <_localeconv_r+0x4>)
 800713e:	4770      	bx	lr
 8007140:	20000260 	.word	0x20000260

08007144 <malloc>:
 8007144:	4b02      	ldr	r3, [pc, #8]	; (8007150 <malloc+0xc>)
 8007146:	4601      	mov	r1, r0
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	f000 bbed 	b.w	8007928 <_malloc_r>
 800714e:	bf00      	nop
 8007150:	2000010c 	.word	0x2000010c

08007154 <memchr>:
 8007154:	4603      	mov	r3, r0
 8007156:	b510      	push	{r4, lr}
 8007158:	b2c9      	uxtb	r1, r1
 800715a:	4402      	add	r2, r0
 800715c:	4293      	cmp	r3, r2
 800715e:	4618      	mov	r0, r3
 8007160:	d101      	bne.n	8007166 <memchr+0x12>
 8007162:	2000      	movs	r0, #0
 8007164:	e003      	b.n	800716e <memchr+0x1a>
 8007166:	7804      	ldrb	r4, [r0, #0]
 8007168:	3301      	adds	r3, #1
 800716a:	428c      	cmp	r4, r1
 800716c:	d1f6      	bne.n	800715c <memchr+0x8>
 800716e:	bd10      	pop	{r4, pc}

08007170 <_Balloc>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007174:	4604      	mov	r4, r0
 8007176:	460d      	mov	r5, r1
 8007178:	b976      	cbnz	r6, 8007198 <_Balloc+0x28>
 800717a:	2010      	movs	r0, #16
 800717c:	f7ff ffe2 	bl	8007144 <malloc>
 8007180:	4602      	mov	r2, r0
 8007182:	6260      	str	r0, [r4, #36]	; 0x24
 8007184:	b920      	cbnz	r0, 8007190 <_Balloc+0x20>
 8007186:	2166      	movs	r1, #102	; 0x66
 8007188:	4b17      	ldr	r3, [pc, #92]	; (80071e8 <_Balloc+0x78>)
 800718a:	4818      	ldr	r0, [pc, #96]	; (80071ec <_Balloc+0x7c>)
 800718c:	f000 fd92 	bl	8007cb4 <__assert_func>
 8007190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007194:	6006      	str	r6, [r0, #0]
 8007196:	60c6      	str	r6, [r0, #12]
 8007198:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800719a:	68f3      	ldr	r3, [r6, #12]
 800719c:	b183      	cbz	r3, 80071c0 <_Balloc+0x50>
 800719e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071a6:	b9b8      	cbnz	r0, 80071d8 <_Balloc+0x68>
 80071a8:	2101      	movs	r1, #1
 80071aa:	fa01 f605 	lsl.w	r6, r1, r5
 80071ae:	1d72      	adds	r2, r6, #5
 80071b0:	4620      	mov	r0, r4
 80071b2:	0092      	lsls	r2, r2, #2
 80071b4:	f000 fb5e 	bl	8007874 <_calloc_r>
 80071b8:	b160      	cbz	r0, 80071d4 <_Balloc+0x64>
 80071ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071be:	e00e      	b.n	80071de <_Balloc+0x6e>
 80071c0:	2221      	movs	r2, #33	; 0x21
 80071c2:	2104      	movs	r1, #4
 80071c4:	4620      	mov	r0, r4
 80071c6:	f000 fb55 	bl	8007874 <_calloc_r>
 80071ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071cc:	60f0      	str	r0, [r6, #12]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1e4      	bne.n	800719e <_Balloc+0x2e>
 80071d4:	2000      	movs	r0, #0
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	6802      	ldr	r2, [r0, #0]
 80071da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071de:	2300      	movs	r3, #0
 80071e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071e4:	e7f7      	b.n	80071d6 <_Balloc+0x66>
 80071e6:	bf00      	nop
 80071e8:	08008945 	.word	0x08008945
 80071ec:	080089cc 	.word	0x080089cc

080071f0 <_Bfree>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071f4:	4605      	mov	r5, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	b976      	cbnz	r6, 8007218 <_Bfree+0x28>
 80071fa:	2010      	movs	r0, #16
 80071fc:	f7ff ffa2 	bl	8007144 <malloc>
 8007200:	4602      	mov	r2, r0
 8007202:	6268      	str	r0, [r5, #36]	; 0x24
 8007204:	b920      	cbnz	r0, 8007210 <_Bfree+0x20>
 8007206:	218a      	movs	r1, #138	; 0x8a
 8007208:	4b08      	ldr	r3, [pc, #32]	; (800722c <_Bfree+0x3c>)
 800720a:	4809      	ldr	r0, [pc, #36]	; (8007230 <_Bfree+0x40>)
 800720c:	f000 fd52 	bl	8007cb4 <__assert_func>
 8007210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007214:	6006      	str	r6, [r0, #0]
 8007216:	60c6      	str	r6, [r0, #12]
 8007218:	b13c      	cbz	r4, 800722a <_Bfree+0x3a>
 800721a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800721c:	6862      	ldr	r2, [r4, #4]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007224:	6021      	str	r1, [r4, #0]
 8007226:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	08008945 	.word	0x08008945
 8007230:	080089cc 	.word	0x080089cc

08007234 <__multadd>:
 8007234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007238:	4698      	mov	r8, r3
 800723a:	460c      	mov	r4, r1
 800723c:	2300      	movs	r3, #0
 800723e:	690e      	ldr	r6, [r1, #16]
 8007240:	4607      	mov	r7, r0
 8007242:	f101 0014 	add.w	r0, r1, #20
 8007246:	6805      	ldr	r5, [r0, #0]
 8007248:	3301      	adds	r3, #1
 800724a:	b2a9      	uxth	r1, r5
 800724c:	fb02 8101 	mla	r1, r2, r1, r8
 8007250:	0c2d      	lsrs	r5, r5, #16
 8007252:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007256:	fb02 c505 	mla	r5, r2, r5, ip
 800725a:	b289      	uxth	r1, r1
 800725c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007260:	429e      	cmp	r6, r3
 8007262:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007266:	f840 1b04 	str.w	r1, [r0], #4
 800726a:	dcec      	bgt.n	8007246 <__multadd+0x12>
 800726c:	f1b8 0f00 	cmp.w	r8, #0
 8007270:	d022      	beq.n	80072b8 <__multadd+0x84>
 8007272:	68a3      	ldr	r3, [r4, #8]
 8007274:	42b3      	cmp	r3, r6
 8007276:	dc19      	bgt.n	80072ac <__multadd+0x78>
 8007278:	6861      	ldr	r1, [r4, #4]
 800727a:	4638      	mov	r0, r7
 800727c:	3101      	adds	r1, #1
 800727e:	f7ff ff77 	bl	8007170 <_Balloc>
 8007282:	4605      	mov	r5, r0
 8007284:	b928      	cbnz	r0, 8007292 <__multadd+0x5e>
 8007286:	4602      	mov	r2, r0
 8007288:	21b5      	movs	r1, #181	; 0xb5
 800728a:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <__multadd+0x8c>)
 800728c:	480d      	ldr	r0, [pc, #52]	; (80072c4 <__multadd+0x90>)
 800728e:	f000 fd11 	bl	8007cb4 <__assert_func>
 8007292:	6922      	ldr	r2, [r4, #16]
 8007294:	f104 010c 	add.w	r1, r4, #12
 8007298:	3202      	adds	r2, #2
 800729a:	0092      	lsls	r2, r2, #2
 800729c:	300c      	adds	r0, #12
 800729e:	f7fe fc19 	bl	8005ad4 <memcpy>
 80072a2:	4621      	mov	r1, r4
 80072a4:	4638      	mov	r0, r7
 80072a6:	f7ff ffa3 	bl	80071f0 <_Bfree>
 80072aa:	462c      	mov	r4, r5
 80072ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80072b0:	3601      	adds	r6, #1
 80072b2:	f8c3 8014 	str.w	r8, [r3, #20]
 80072b6:	6126      	str	r6, [r4, #16]
 80072b8:	4620      	mov	r0, r4
 80072ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072be:	bf00      	nop
 80072c0:	080089bb 	.word	0x080089bb
 80072c4:	080089cc 	.word	0x080089cc

080072c8 <__hi0bits>:
 80072c8:	0c02      	lsrs	r2, r0, #16
 80072ca:	0412      	lsls	r2, r2, #16
 80072cc:	4603      	mov	r3, r0
 80072ce:	b9ca      	cbnz	r2, 8007304 <__hi0bits+0x3c>
 80072d0:	0403      	lsls	r3, r0, #16
 80072d2:	2010      	movs	r0, #16
 80072d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80072d8:	bf04      	itt	eq
 80072da:	021b      	lsleq	r3, r3, #8
 80072dc:	3008      	addeq	r0, #8
 80072de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072e2:	bf04      	itt	eq
 80072e4:	011b      	lsleq	r3, r3, #4
 80072e6:	3004      	addeq	r0, #4
 80072e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072ec:	bf04      	itt	eq
 80072ee:	009b      	lsleq	r3, r3, #2
 80072f0:	3002      	addeq	r0, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	db05      	blt.n	8007302 <__hi0bits+0x3a>
 80072f6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80072fa:	f100 0001 	add.w	r0, r0, #1
 80072fe:	bf08      	it	eq
 8007300:	2020      	moveq	r0, #32
 8007302:	4770      	bx	lr
 8007304:	2000      	movs	r0, #0
 8007306:	e7e5      	b.n	80072d4 <__hi0bits+0xc>

08007308 <__lo0bits>:
 8007308:	6803      	ldr	r3, [r0, #0]
 800730a:	4602      	mov	r2, r0
 800730c:	f013 0007 	ands.w	r0, r3, #7
 8007310:	d00b      	beq.n	800732a <__lo0bits+0x22>
 8007312:	07d9      	lsls	r1, r3, #31
 8007314:	d422      	bmi.n	800735c <__lo0bits+0x54>
 8007316:	0798      	lsls	r0, r3, #30
 8007318:	bf49      	itett	mi
 800731a:	085b      	lsrmi	r3, r3, #1
 800731c:	089b      	lsrpl	r3, r3, #2
 800731e:	2001      	movmi	r0, #1
 8007320:	6013      	strmi	r3, [r2, #0]
 8007322:	bf5c      	itt	pl
 8007324:	2002      	movpl	r0, #2
 8007326:	6013      	strpl	r3, [r2, #0]
 8007328:	4770      	bx	lr
 800732a:	b299      	uxth	r1, r3
 800732c:	b909      	cbnz	r1, 8007332 <__lo0bits+0x2a>
 800732e:	2010      	movs	r0, #16
 8007330:	0c1b      	lsrs	r3, r3, #16
 8007332:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007336:	bf04      	itt	eq
 8007338:	0a1b      	lsreq	r3, r3, #8
 800733a:	3008      	addeq	r0, #8
 800733c:	0719      	lsls	r1, r3, #28
 800733e:	bf04      	itt	eq
 8007340:	091b      	lsreq	r3, r3, #4
 8007342:	3004      	addeq	r0, #4
 8007344:	0799      	lsls	r1, r3, #30
 8007346:	bf04      	itt	eq
 8007348:	089b      	lsreq	r3, r3, #2
 800734a:	3002      	addeq	r0, #2
 800734c:	07d9      	lsls	r1, r3, #31
 800734e:	d403      	bmi.n	8007358 <__lo0bits+0x50>
 8007350:	085b      	lsrs	r3, r3, #1
 8007352:	f100 0001 	add.w	r0, r0, #1
 8007356:	d003      	beq.n	8007360 <__lo0bits+0x58>
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	4770      	bx	lr
 800735c:	2000      	movs	r0, #0
 800735e:	4770      	bx	lr
 8007360:	2020      	movs	r0, #32
 8007362:	4770      	bx	lr

08007364 <__i2b>:
 8007364:	b510      	push	{r4, lr}
 8007366:	460c      	mov	r4, r1
 8007368:	2101      	movs	r1, #1
 800736a:	f7ff ff01 	bl	8007170 <_Balloc>
 800736e:	4602      	mov	r2, r0
 8007370:	b928      	cbnz	r0, 800737e <__i2b+0x1a>
 8007372:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007376:	4b04      	ldr	r3, [pc, #16]	; (8007388 <__i2b+0x24>)
 8007378:	4804      	ldr	r0, [pc, #16]	; (800738c <__i2b+0x28>)
 800737a:	f000 fc9b 	bl	8007cb4 <__assert_func>
 800737e:	2301      	movs	r3, #1
 8007380:	6144      	str	r4, [r0, #20]
 8007382:	6103      	str	r3, [r0, #16]
 8007384:	bd10      	pop	{r4, pc}
 8007386:	bf00      	nop
 8007388:	080089bb 	.word	0x080089bb
 800738c:	080089cc 	.word	0x080089cc

08007390 <__multiply>:
 8007390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007394:	4614      	mov	r4, r2
 8007396:	690a      	ldr	r2, [r1, #16]
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	460d      	mov	r5, r1
 800739c:	429a      	cmp	r2, r3
 800739e:	bfbe      	ittt	lt
 80073a0:	460b      	movlt	r3, r1
 80073a2:	4625      	movlt	r5, r4
 80073a4:	461c      	movlt	r4, r3
 80073a6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80073aa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80073ae:	68ab      	ldr	r3, [r5, #8]
 80073b0:	6869      	ldr	r1, [r5, #4]
 80073b2:	eb0a 0709 	add.w	r7, sl, r9
 80073b6:	42bb      	cmp	r3, r7
 80073b8:	b085      	sub	sp, #20
 80073ba:	bfb8      	it	lt
 80073bc:	3101      	addlt	r1, #1
 80073be:	f7ff fed7 	bl	8007170 <_Balloc>
 80073c2:	b930      	cbnz	r0, 80073d2 <__multiply+0x42>
 80073c4:	4602      	mov	r2, r0
 80073c6:	f240 115d 	movw	r1, #349	; 0x15d
 80073ca:	4b41      	ldr	r3, [pc, #260]	; (80074d0 <__multiply+0x140>)
 80073cc:	4841      	ldr	r0, [pc, #260]	; (80074d4 <__multiply+0x144>)
 80073ce:	f000 fc71 	bl	8007cb4 <__assert_func>
 80073d2:	f100 0614 	add.w	r6, r0, #20
 80073d6:	4633      	mov	r3, r6
 80073d8:	2200      	movs	r2, #0
 80073da:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80073de:	4543      	cmp	r3, r8
 80073e0:	d31e      	bcc.n	8007420 <__multiply+0x90>
 80073e2:	f105 0c14 	add.w	ip, r5, #20
 80073e6:	f104 0314 	add.w	r3, r4, #20
 80073ea:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80073ee:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80073f2:	9202      	str	r2, [sp, #8]
 80073f4:	ebac 0205 	sub.w	r2, ip, r5
 80073f8:	3a15      	subs	r2, #21
 80073fa:	f022 0203 	bic.w	r2, r2, #3
 80073fe:	3204      	adds	r2, #4
 8007400:	f105 0115 	add.w	r1, r5, #21
 8007404:	458c      	cmp	ip, r1
 8007406:	bf38      	it	cc
 8007408:	2204      	movcc	r2, #4
 800740a:	9201      	str	r2, [sp, #4]
 800740c:	9a02      	ldr	r2, [sp, #8]
 800740e:	9303      	str	r3, [sp, #12]
 8007410:	429a      	cmp	r2, r3
 8007412:	d808      	bhi.n	8007426 <__multiply+0x96>
 8007414:	2f00      	cmp	r7, #0
 8007416:	dc55      	bgt.n	80074c4 <__multiply+0x134>
 8007418:	6107      	str	r7, [r0, #16]
 800741a:	b005      	add	sp, #20
 800741c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007420:	f843 2b04 	str.w	r2, [r3], #4
 8007424:	e7db      	b.n	80073de <__multiply+0x4e>
 8007426:	f8b3 a000 	ldrh.w	sl, [r3]
 800742a:	f1ba 0f00 	cmp.w	sl, #0
 800742e:	d020      	beq.n	8007472 <__multiply+0xe2>
 8007430:	46b1      	mov	r9, r6
 8007432:	2200      	movs	r2, #0
 8007434:	f105 0e14 	add.w	lr, r5, #20
 8007438:	f85e 4b04 	ldr.w	r4, [lr], #4
 800743c:	f8d9 b000 	ldr.w	fp, [r9]
 8007440:	b2a1      	uxth	r1, r4
 8007442:	fa1f fb8b 	uxth.w	fp, fp
 8007446:	fb0a b101 	mla	r1, sl, r1, fp
 800744a:	4411      	add	r1, r2
 800744c:	f8d9 2000 	ldr.w	r2, [r9]
 8007450:	0c24      	lsrs	r4, r4, #16
 8007452:	0c12      	lsrs	r2, r2, #16
 8007454:	fb0a 2404 	mla	r4, sl, r4, r2
 8007458:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800745c:	b289      	uxth	r1, r1
 800745e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007462:	45f4      	cmp	ip, lr
 8007464:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007468:	f849 1b04 	str.w	r1, [r9], #4
 800746c:	d8e4      	bhi.n	8007438 <__multiply+0xa8>
 800746e:	9901      	ldr	r1, [sp, #4]
 8007470:	5072      	str	r2, [r6, r1]
 8007472:	9a03      	ldr	r2, [sp, #12]
 8007474:	3304      	adds	r3, #4
 8007476:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800747a:	f1b9 0f00 	cmp.w	r9, #0
 800747e:	d01f      	beq.n	80074c0 <__multiply+0x130>
 8007480:	46b6      	mov	lr, r6
 8007482:	f04f 0a00 	mov.w	sl, #0
 8007486:	6834      	ldr	r4, [r6, #0]
 8007488:	f105 0114 	add.w	r1, r5, #20
 800748c:	880a      	ldrh	r2, [r1, #0]
 800748e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007492:	b2a4      	uxth	r4, r4
 8007494:	fb09 b202 	mla	r2, r9, r2, fp
 8007498:	4492      	add	sl, r2
 800749a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800749e:	f84e 4b04 	str.w	r4, [lr], #4
 80074a2:	f851 4b04 	ldr.w	r4, [r1], #4
 80074a6:	f8be 2000 	ldrh.w	r2, [lr]
 80074aa:	0c24      	lsrs	r4, r4, #16
 80074ac:	fb09 2404 	mla	r4, r9, r4, r2
 80074b0:	458c      	cmp	ip, r1
 80074b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80074b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80074ba:	d8e7      	bhi.n	800748c <__multiply+0xfc>
 80074bc:	9a01      	ldr	r2, [sp, #4]
 80074be:	50b4      	str	r4, [r6, r2]
 80074c0:	3604      	adds	r6, #4
 80074c2:	e7a3      	b.n	800740c <__multiply+0x7c>
 80074c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1a5      	bne.n	8007418 <__multiply+0x88>
 80074cc:	3f01      	subs	r7, #1
 80074ce:	e7a1      	b.n	8007414 <__multiply+0x84>
 80074d0:	080089bb 	.word	0x080089bb
 80074d4:	080089cc 	.word	0x080089cc

080074d8 <__pow5mult>:
 80074d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074dc:	4615      	mov	r5, r2
 80074de:	f012 0203 	ands.w	r2, r2, #3
 80074e2:	4606      	mov	r6, r0
 80074e4:	460f      	mov	r7, r1
 80074e6:	d007      	beq.n	80074f8 <__pow5mult+0x20>
 80074e8:	4c25      	ldr	r4, [pc, #148]	; (8007580 <__pow5mult+0xa8>)
 80074ea:	3a01      	subs	r2, #1
 80074ec:	2300      	movs	r3, #0
 80074ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074f2:	f7ff fe9f 	bl	8007234 <__multadd>
 80074f6:	4607      	mov	r7, r0
 80074f8:	10ad      	asrs	r5, r5, #2
 80074fa:	d03d      	beq.n	8007578 <__pow5mult+0xa0>
 80074fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80074fe:	b97c      	cbnz	r4, 8007520 <__pow5mult+0x48>
 8007500:	2010      	movs	r0, #16
 8007502:	f7ff fe1f 	bl	8007144 <malloc>
 8007506:	4602      	mov	r2, r0
 8007508:	6270      	str	r0, [r6, #36]	; 0x24
 800750a:	b928      	cbnz	r0, 8007518 <__pow5mult+0x40>
 800750c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007510:	4b1c      	ldr	r3, [pc, #112]	; (8007584 <__pow5mult+0xac>)
 8007512:	481d      	ldr	r0, [pc, #116]	; (8007588 <__pow5mult+0xb0>)
 8007514:	f000 fbce 	bl	8007cb4 <__assert_func>
 8007518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800751c:	6004      	str	r4, [r0, #0]
 800751e:	60c4      	str	r4, [r0, #12]
 8007520:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007528:	b94c      	cbnz	r4, 800753e <__pow5mult+0x66>
 800752a:	f240 2171 	movw	r1, #625	; 0x271
 800752e:	4630      	mov	r0, r6
 8007530:	f7ff ff18 	bl	8007364 <__i2b>
 8007534:	2300      	movs	r3, #0
 8007536:	4604      	mov	r4, r0
 8007538:	f8c8 0008 	str.w	r0, [r8, #8]
 800753c:	6003      	str	r3, [r0, #0]
 800753e:	f04f 0900 	mov.w	r9, #0
 8007542:	07eb      	lsls	r3, r5, #31
 8007544:	d50a      	bpl.n	800755c <__pow5mult+0x84>
 8007546:	4639      	mov	r1, r7
 8007548:	4622      	mov	r2, r4
 800754a:	4630      	mov	r0, r6
 800754c:	f7ff ff20 	bl	8007390 <__multiply>
 8007550:	4680      	mov	r8, r0
 8007552:	4639      	mov	r1, r7
 8007554:	4630      	mov	r0, r6
 8007556:	f7ff fe4b 	bl	80071f0 <_Bfree>
 800755a:	4647      	mov	r7, r8
 800755c:	106d      	asrs	r5, r5, #1
 800755e:	d00b      	beq.n	8007578 <__pow5mult+0xa0>
 8007560:	6820      	ldr	r0, [r4, #0]
 8007562:	b938      	cbnz	r0, 8007574 <__pow5mult+0x9c>
 8007564:	4622      	mov	r2, r4
 8007566:	4621      	mov	r1, r4
 8007568:	4630      	mov	r0, r6
 800756a:	f7ff ff11 	bl	8007390 <__multiply>
 800756e:	6020      	str	r0, [r4, #0]
 8007570:	f8c0 9000 	str.w	r9, [r0]
 8007574:	4604      	mov	r4, r0
 8007576:	e7e4      	b.n	8007542 <__pow5mult+0x6a>
 8007578:	4638      	mov	r0, r7
 800757a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800757e:	bf00      	nop
 8007580:	08008b20 	.word	0x08008b20
 8007584:	08008945 	.word	0x08008945
 8007588:	080089cc 	.word	0x080089cc

0800758c <__lshift>:
 800758c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007590:	460c      	mov	r4, r1
 8007592:	4607      	mov	r7, r0
 8007594:	4691      	mov	r9, r2
 8007596:	6923      	ldr	r3, [r4, #16]
 8007598:	6849      	ldr	r1, [r1, #4]
 800759a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800759e:	68a3      	ldr	r3, [r4, #8]
 80075a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075a4:	f108 0601 	add.w	r6, r8, #1
 80075a8:	42b3      	cmp	r3, r6
 80075aa:	db0b      	blt.n	80075c4 <__lshift+0x38>
 80075ac:	4638      	mov	r0, r7
 80075ae:	f7ff fddf 	bl	8007170 <_Balloc>
 80075b2:	4605      	mov	r5, r0
 80075b4:	b948      	cbnz	r0, 80075ca <__lshift+0x3e>
 80075b6:	4602      	mov	r2, r0
 80075b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075bc:	4b27      	ldr	r3, [pc, #156]	; (800765c <__lshift+0xd0>)
 80075be:	4828      	ldr	r0, [pc, #160]	; (8007660 <__lshift+0xd4>)
 80075c0:	f000 fb78 	bl	8007cb4 <__assert_func>
 80075c4:	3101      	adds	r1, #1
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	e7ee      	b.n	80075a8 <__lshift+0x1c>
 80075ca:	2300      	movs	r3, #0
 80075cc:	f100 0114 	add.w	r1, r0, #20
 80075d0:	f100 0210 	add.w	r2, r0, #16
 80075d4:	4618      	mov	r0, r3
 80075d6:	4553      	cmp	r3, sl
 80075d8:	db33      	blt.n	8007642 <__lshift+0xb6>
 80075da:	6920      	ldr	r0, [r4, #16]
 80075dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075e0:	f104 0314 	add.w	r3, r4, #20
 80075e4:	f019 091f 	ands.w	r9, r9, #31
 80075e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075f0:	d02b      	beq.n	800764a <__lshift+0xbe>
 80075f2:	468a      	mov	sl, r1
 80075f4:	2200      	movs	r2, #0
 80075f6:	f1c9 0e20 	rsb	lr, r9, #32
 80075fa:	6818      	ldr	r0, [r3, #0]
 80075fc:	fa00 f009 	lsl.w	r0, r0, r9
 8007600:	4302      	orrs	r2, r0
 8007602:	f84a 2b04 	str.w	r2, [sl], #4
 8007606:	f853 2b04 	ldr.w	r2, [r3], #4
 800760a:	459c      	cmp	ip, r3
 800760c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007610:	d8f3      	bhi.n	80075fa <__lshift+0x6e>
 8007612:	ebac 0304 	sub.w	r3, ip, r4
 8007616:	3b15      	subs	r3, #21
 8007618:	f023 0303 	bic.w	r3, r3, #3
 800761c:	3304      	adds	r3, #4
 800761e:	f104 0015 	add.w	r0, r4, #21
 8007622:	4584      	cmp	ip, r0
 8007624:	bf38      	it	cc
 8007626:	2304      	movcc	r3, #4
 8007628:	50ca      	str	r2, [r1, r3]
 800762a:	b10a      	cbz	r2, 8007630 <__lshift+0xa4>
 800762c:	f108 0602 	add.w	r6, r8, #2
 8007630:	3e01      	subs	r6, #1
 8007632:	4638      	mov	r0, r7
 8007634:	4621      	mov	r1, r4
 8007636:	612e      	str	r6, [r5, #16]
 8007638:	f7ff fdda 	bl	80071f0 <_Bfree>
 800763c:	4628      	mov	r0, r5
 800763e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007642:	f842 0f04 	str.w	r0, [r2, #4]!
 8007646:	3301      	adds	r3, #1
 8007648:	e7c5      	b.n	80075d6 <__lshift+0x4a>
 800764a:	3904      	subs	r1, #4
 800764c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007650:	459c      	cmp	ip, r3
 8007652:	f841 2f04 	str.w	r2, [r1, #4]!
 8007656:	d8f9      	bhi.n	800764c <__lshift+0xc0>
 8007658:	e7ea      	b.n	8007630 <__lshift+0xa4>
 800765a:	bf00      	nop
 800765c:	080089bb 	.word	0x080089bb
 8007660:	080089cc 	.word	0x080089cc

08007664 <__mcmp>:
 8007664:	4603      	mov	r3, r0
 8007666:	690a      	ldr	r2, [r1, #16]
 8007668:	6900      	ldr	r0, [r0, #16]
 800766a:	b530      	push	{r4, r5, lr}
 800766c:	1a80      	subs	r0, r0, r2
 800766e:	d10d      	bne.n	800768c <__mcmp+0x28>
 8007670:	3314      	adds	r3, #20
 8007672:	3114      	adds	r1, #20
 8007674:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007678:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800767c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007680:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007684:	4295      	cmp	r5, r2
 8007686:	d002      	beq.n	800768e <__mcmp+0x2a>
 8007688:	d304      	bcc.n	8007694 <__mcmp+0x30>
 800768a:	2001      	movs	r0, #1
 800768c:	bd30      	pop	{r4, r5, pc}
 800768e:	42a3      	cmp	r3, r4
 8007690:	d3f4      	bcc.n	800767c <__mcmp+0x18>
 8007692:	e7fb      	b.n	800768c <__mcmp+0x28>
 8007694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007698:	e7f8      	b.n	800768c <__mcmp+0x28>
	...

0800769c <__mdiff>:
 800769c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a0:	460c      	mov	r4, r1
 80076a2:	4606      	mov	r6, r0
 80076a4:	4611      	mov	r1, r2
 80076a6:	4620      	mov	r0, r4
 80076a8:	4692      	mov	sl, r2
 80076aa:	f7ff ffdb 	bl	8007664 <__mcmp>
 80076ae:	1e05      	subs	r5, r0, #0
 80076b0:	d111      	bne.n	80076d6 <__mdiff+0x3a>
 80076b2:	4629      	mov	r1, r5
 80076b4:	4630      	mov	r0, r6
 80076b6:	f7ff fd5b 	bl	8007170 <_Balloc>
 80076ba:	4602      	mov	r2, r0
 80076bc:	b928      	cbnz	r0, 80076ca <__mdiff+0x2e>
 80076be:	f240 2132 	movw	r1, #562	; 0x232
 80076c2:	4b3c      	ldr	r3, [pc, #240]	; (80077b4 <__mdiff+0x118>)
 80076c4:	483c      	ldr	r0, [pc, #240]	; (80077b8 <__mdiff+0x11c>)
 80076c6:	f000 faf5 	bl	8007cb4 <__assert_func>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076d0:	4610      	mov	r0, r2
 80076d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d6:	bfa4      	itt	ge
 80076d8:	4653      	movge	r3, sl
 80076da:	46a2      	movge	sl, r4
 80076dc:	4630      	mov	r0, r6
 80076de:	f8da 1004 	ldr.w	r1, [sl, #4]
 80076e2:	bfa6      	itte	ge
 80076e4:	461c      	movge	r4, r3
 80076e6:	2500      	movge	r5, #0
 80076e8:	2501      	movlt	r5, #1
 80076ea:	f7ff fd41 	bl	8007170 <_Balloc>
 80076ee:	4602      	mov	r2, r0
 80076f0:	b918      	cbnz	r0, 80076fa <__mdiff+0x5e>
 80076f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80076f6:	4b2f      	ldr	r3, [pc, #188]	; (80077b4 <__mdiff+0x118>)
 80076f8:	e7e4      	b.n	80076c4 <__mdiff+0x28>
 80076fa:	f100 0814 	add.w	r8, r0, #20
 80076fe:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007702:	60c5      	str	r5, [r0, #12]
 8007704:	f04f 0c00 	mov.w	ip, #0
 8007708:	f10a 0514 	add.w	r5, sl, #20
 800770c:	f10a 0010 	add.w	r0, sl, #16
 8007710:	46c2      	mov	sl, r8
 8007712:	6926      	ldr	r6, [r4, #16]
 8007714:	f104 0914 	add.w	r9, r4, #20
 8007718:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800771c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007720:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007724:	f859 3b04 	ldr.w	r3, [r9], #4
 8007728:	fa1f f18b 	uxth.w	r1, fp
 800772c:	4461      	add	r1, ip
 800772e:	fa1f fc83 	uxth.w	ip, r3
 8007732:	0c1b      	lsrs	r3, r3, #16
 8007734:	eba1 010c 	sub.w	r1, r1, ip
 8007738:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800773c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007740:	b289      	uxth	r1, r1
 8007742:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007746:	454e      	cmp	r6, r9
 8007748:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800774c:	f84a 3b04 	str.w	r3, [sl], #4
 8007750:	d8e6      	bhi.n	8007720 <__mdiff+0x84>
 8007752:	1b33      	subs	r3, r6, r4
 8007754:	3b15      	subs	r3, #21
 8007756:	f023 0303 	bic.w	r3, r3, #3
 800775a:	3415      	adds	r4, #21
 800775c:	3304      	adds	r3, #4
 800775e:	42a6      	cmp	r6, r4
 8007760:	bf38      	it	cc
 8007762:	2304      	movcc	r3, #4
 8007764:	441d      	add	r5, r3
 8007766:	4443      	add	r3, r8
 8007768:	461e      	mov	r6, r3
 800776a:	462c      	mov	r4, r5
 800776c:	4574      	cmp	r4, lr
 800776e:	d30e      	bcc.n	800778e <__mdiff+0xf2>
 8007770:	f10e 0103 	add.w	r1, lr, #3
 8007774:	1b49      	subs	r1, r1, r5
 8007776:	f021 0103 	bic.w	r1, r1, #3
 800777a:	3d03      	subs	r5, #3
 800777c:	45ae      	cmp	lr, r5
 800777e:	bf38      	it	cc
 8007780:	2100      	movcc	r1, #0
 8007782:	4419      	add	r1, r3
 8007784:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007788:	b18b      	cbz	r3, 80077ae <__mdiff+0x112>
 800778a:	6117      	str	r7, [r2, #16]
 800778c:	e7a0      	b.n	80076d0 <__mdiff+0x34>
 800778e:	f854 8b04 	ldr.w	r8, [r4], #4
 8007792:	fa1f f188 	uxth.w	r1, r8
 8007796:	4461      	add	r1, ip
 8007798:	1408      	asrs	r0, r1, #16
 800779a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800779e:	b289      	uxth	r1, r1
 80077a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80077a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077a8:	f846 1b04 	str.w	r1, [r6], #4
 80077ac:	e7de      	b.n	800776c <__mdiff+0xd0>
 80077ae:	3f01      	subs	r7, #1
 80077b0:	e7e8      	b.n	8007784 <__mdiff+0xe8>
 80077b2:	bf00      	nop
 80077b4:	080089bb 	.word	0x080089bb
 80077b8:	080089cc 	.word	0x080089cc

080077bc <__d2b>:
 80077bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80077c0:	2101      	movs	r1, #1
 80077c2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80077c6:	4690      	mov	r8, r2
 80077c8:	461d      	mov	r5, r3
 80077ca:	f7ff fcd1 	bl	8007170 <_Balloc>
 80077ce:	4604      	mov	r4, r0
 80077d0:	b930      	cbnz	r0, 80077e0 <__d2b+0x24>
 80077d2:	4602      	mov	r2, r0
 80077d4:	f240 310a 	movw	r1, #778	; 0x30a
 80077d8:	4b24      	ldr	r3, [pc, #144]	; (800786c <__d2b+0xb0>)
 80077da:	4825      	ldr	r0, [pc, #148]	; (8007870 <__d2b+0xb4>)
 80077dc:	f000 fa6a 	bl	8007cb4 <__assert_func>
 80077e0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80077e4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80077e8:	bb2d      	cbnz	r5, 8007836 <__d2b+0x7a>
 80077ea:	9301      	str	r3, [sp, #4]
 80077ec:	f1b8 0300 	subs.w	r3, r8, #0
 80077f0:	d026      	beq.n	8007840 <__d2b+0x84>
 80077f2:	4668      	mov	r0, sp
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	f7ff fd87 	bl	8007308 <__lo0bits>
 80077fa:	9900      	ldr	r1, [sp, #0]
 80077fc:	b1f0      	cbz	r0, 800783c <__d2b+0x80>
 80077fe:	9a01      	ldr	r2, [sp, #4]
 8007800:	f1c0 0320 	rsb	r3, r0, #32
 8007804:	fa02 f303 	lsl.w	r3, r2, r3
 8007808:	430b      	orrs	r3, r1
 800780a:	40c2      	lsrs	r2, r0
 800780c:	6163      	str	r3, [r4, #20]
 800780e:	9201      	str	r2, [sp, #4]
 8007810:	9b01      	ldr	r3, [sp, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	bf14      	ite	ne
 8007816:	2102      	movne	r1, #2
 8007818:	2101      	moveq	r1, #1
 800781a:	61a3      	str	r3, [r4, #24]
 800781c:	6121      	str	r1, [r4, #16]
 800781e:	b1c5      	cbz	r5, 8007852 <__d2b+0x96>
 8007820:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007824:	4405      	add	r5, r0
 8007826:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800782a:	603d      	str	r5, [r7, #0]
 800782c:	6030      	str	r0, [r6, #0]
 800782e:	4620      	mov	r0, r4
 8007830:	b002      	add	sp, #8
 8007832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800783a:	e7d6      	b.n	80077ea <__d2b+0x2e>
 800783c:	6161      	str	r1, [r4, #20]
 800783e:	e7e7      	b.n	8007810 <__d2b+0x54>
 8007840:	a801      	add	r0, sp, #4
 8007842:	f7ff fd61 	bl	8007308 <__lo0bits>
 8007846:	2101      	movs	r1, #1
 8007848:	9b01      	ldr	r3, [sp, #4]
 800784a:	6121      	str	r1, [r4, #16]
 800784c:	6163      	str	r3, [r4, #20]
 800784e:	3020      	adds	r0, #32
 8007850:	e7e5      	b.n	800781e <__d2b+0x62>
 8007852:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007856:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800785a:	6038      	str	r0, [r7, #0]
 800785c:	6918      	ldr	r0, [r3, #16]
 800785e:	f7ff fd33 	bl	80072c8 <__hi0bits>
 8007862:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007866:	6031      	str	r1, [r6, #0]
 8007868:	e7e1      	b.n	800782e <__d2b+0x72>
 800786a:	bf00      	nop
 800786c:	080089bb 	.word	0x080089bb
 8007870:	080089cc 	.word	0x080089cc

08007874 <_calloc_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	fb02 f501 	mul.w	r5, r2, r1
 800787a:	4629      	mov	r1, r5
 800787c:	f000 f854 	bl	8007928 <_malloc_r>
 8007880:	4604      	mov	r4, r0
 8007882:	b118      	cbz	r0, 800788c <_calloc_r+0x18>
 8007884:	462a      	mov	r2, r5
 8007886:	2100      	movs	r1, #0
 8007888:	f7fe f932 	bl	8005af0 <memset>
 800788c:	4620      	mov	r0, r4
 800788e:	bd38      	pop	{r3, r4, r5, pc}

08007890 <_free_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4605      	mov	r5, r0
 8007894:	2900      	cmp	r1, #0
 8007896:	d043      	beq.n	8007920 <_free_r+0x90>
 8007898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800789c:	1f0c      	subs	r4, r1, #4
 800789e:	2b00      	cmp	r3, #0
 80078a0:	bfb8      	it	lt
 80078a2:	18e4      	addlt	r4, r4, r3
 80078a4:	f000 fa62 	bl	8007d6c <__malloc_lock>
 80078a8:	4a1e      	ldr	r2, [pc, #120]	; (8007924 <_free_r+0x94>)
 80078aa:	6813      	ldr	r3, [r2, #0]
 80078ac:	4610      	mov	r0, r2
 80078ae:	b933      	cbnz	r3, 80078be <_free_r+0x2e>
 80078b0:	6063      	str	r3, [r4, #4]
 80078b2:	6014      	str	r4, [r2, #0]
 80078b4:	4628      	mov	r0, r5
 80078b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078ba:	f000 ba5d 	b.w	8007d78 <__malloc_unlock>
 80078be:	42a3      	cmp	r3, r4
 80078c0:	d90a      	bls.n	80078d8 <_free_r+0x48>
 80078c2:	6821      	ldr	r1, [r4, #0]
 80078c4:	1862      	adds	r2, r4, r1
 80078c6:	4293      	cmp	r3, r2
 80078c8:	bf01      	itttt	eq
 80078ca:	681a      	ldreq	r2, [r3, #0]
 80078cc:	685b      	ldreq	r3, [r3, #4]
 80078ce:	1852      	addeq	r2, r2, r1
 80078d0:	6022      	streq	r2, [r4, #0]
 80078d2:	6063      	str	r3, [r4, #4]
 80078d4:	6004      	str	r4, [r0, #0]
 80078d6:	e7ed      	b.n	80078b4 <_free_r+0x24>
 80078d8:	461a      	mov	r2, r3
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	b10b      	cbz	r3, 80078e2 <_free_r+0x52>
 80078de:	42a3      	cmp	r3, r4
 80078e0:	d9fa      	bls.n	80078d8 <_free_r+0x48>
 80078e2:	6811      	ldr	r1, [r2, #0]
 80078e4:	1850      	adds	r0, r2, r1
 80078e6:	42a0      	cmp	r0, r4
 80078e8:	d10b      	bne.n	8007902 <_free_r+0x72>
 80078ea:	6820      	ldr	r0, [r4, #0]
 80078ec:	4401      	add	r1, r0
 80078ee:	1850      	adds	r0, r2, r1
 80078f0:	4283      	cmp	r3, r0
 80078f2:	6011      	str	r1, [r2, #0]
 80078f4:	d1de      	bne.n	80078b4 <_free_r+0x24>
 80078f6:	6818      	ldr	r0, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	4401      	add	r1, r0
 80078fc:	6011      	str	r1, [r2, #0]
 80078fe:	6053      	str	r3, [r2, #4]
 8007900:	e7d8      	b.n	80078b4 <_free_r+0x24>
 8007902:	d902      	bls.n	800790a <_free_r+0x7a>
 8007904:	230c      	movs	r3, #12
 8007906:	602b      	str	r3, [r5, #0]
 8007908:	e7d4      	b.n	80078b4 <_free_r+0x24>
 800790a:	6820      	ldr	r0, [r4, #0]
 800790c:	1821      	adds	r1, r4, r0
 800790e:	428b      	cmp	r3, r1
 8007910:	bf01      	itttt	eq
 8007912:	6819      	ldreq	r1, [r3, #0]
 8007914:	685b      	ldreq	r3, [r3, #4]
 8007916:	1809      	addeq	r1, r1, r0
 8007918:	6021      	streq	r1, [r4, #0]
 800791a:	6063      	str	r3, [r4, #4]
 800791c:	6054      	str	r4, [r2, #4]
 800791e:	e7c9      	b.n	80078b4 <_free_r+0x24>
 8007920:	bd38      	pop	{r3, r4, r5, pc}
 8007922:	bf00      	nop
 8007924:	20000500 	.word	0x20000500

08007928 <_malloc_r>:
 8007928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792a:	1ccd      	adds	r5, r1, #3
 800792c:	f025 0503 	bic.w	r5, r5, #3
 8007930:	3508      	adds	r5, #8
 8007932:	2d0c      	cmp	r5, #12
 8007934:	bf38      	it	cc
 8007936:	250c      	movcc	r5, #12
 8007938:	2d00      	cmp	r5, #0
 800793a:	4606      	mov	r6, r0
 800793c:	db01      	blt.n	8007942 <_malloc_r+0x1a>
 800793e:	42a9      	cmp	r1, r5
 8007940:	d903      	bls.n	800794a <_malloc_r+0x22>
 8007942:	230c      	movs	r3, #12
 8007944:	6033      	str	r3, [r6, #0]
 8007946:	2000      	movs	r0, #0
 8007948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800794a:	f000 fa0f 	bl	8007d6c <__malloc_lock>
 800794e:	4921      	ldr	r1, [pc, #132]	; (80079d4 <_malloc_r+0xac>)
 8007950:	680a      	ldr	r2, [r1, #0]
 8007952:	4614      	mov	r4, r2
 8007954:	b99c      	cbnz	r4, 800797e <_malloc_r+0x56>
 8007956:	4f20      	ldr	r7, [pc, #128]	; (80079d8 <_malloc_r+0xb0>)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	b923      	cbnz	r3, 8007966 <_malloc_r+0x3e>
 800795c:	4621      	mov	r1, r4
 800795e:	4630      	mov	r0, r6
 8007960:	f000 f998 	bl	8007c94 <_sbrk_r>
 8007964:	6038      	str	r0, [r7, #0]
 8007966:	4629      	mov	r1, r5
 8007968:	4630      	mov	r0, r6
 800796a:	f000 f993 	bl	8007c94 <_sbrk_r>
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	d123      	bne.n	80079ba <_malloc_r+0x92>
 8007972:	230c      	movs	r3, #12
 8007974:	4630      	mov	r0, r6
 8007976:	6033      	str	r3, [r6, #0]
 8007978:	f000 f9fe 	bl	8007d78 <__malloc_unlock>
 800797c:	e7e3      	b.n	8007946 <_malloc_r+0x1e>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	1b5b      	subs	r3, r3, r5
 8007982:	d417      	bmi.n	80079b4 <_malloc_r+0x8c>
 8007984:	2b0b      	cmp	r3, #11
 8007986:	d903      	bls.n	8007990 <_malloc_r+0x68>
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	441c      	add	r4, r3
 800798c:	6025      	str	r5, [r4, #0]
 800798e:	e004      	b.n	800799a <_malloc_r+0x72>
 8007990:	6863      	ldr	r3, [r4, #4]
 8007992:	42a2      	cmp	r2, r4
 8007994:	bf0c      	ite	eq
 8007996:	600b      	streq	r3, [r1, #0]
 8007998:	6053      	strne	r3, [r2, #4]
 800799a:	4630      	mov	r0, r6
 800799c:	f000 f9ec 	bl	8007d78 <__malloc_unlock>
 80079a0:	f104 000b 	add.w	r0, r4, #11
 80079a4:	1d23      	adds	r3, r4, #4
 80079a6:	f020 0007 	bic.w	r0, r0, #7
 80079aa:	1ac2      	subs	r2, r0, r3
 80079ac:	d0cc      	beq.n	8007948 <_malloc_r+0x20>
 80079ae:	1a1b      	subs	r3, r3, r0
 80079b0:	50a3      	str	r3, [r4, r2]
 80079b2:	e7c9      	b.n	8007948 <_malloc_r+0x20>
 80079b4:	4622      	mov	r2, r4
 80079b6:	6864      	ldr	r4, [r4, #4]
 80079b8:	e7cc      	b.n	8007954 <_malloc_r+0x2c>
 80079ba:	1cc4      	adds	r4, r0, #3
 80079bc:	f024 0403 	bic.w	r4, r4, #3
 80079c0:	42a0      	cmp	r0, r4
 80079c2:	d0e3      	beq.n	800798c <_malloc_r+0x64>
 80079c4:	1a21      	subs	r1, r4, r0
 80079c6:	4630      	mov	r0, r6
 80079c8:	f000 f964 	bl	8007c94 <_sbrk_r>
 80079cc:	3001      	adds	r0, #1
 80079ce:	d1dd      	bne.n	800798c <_malloc_r+0x64>
 80079d0:	e7cf      	b.n	8007972 <_malloc_r+0x4a>
 80079d2:	bf00      	nop
 80079d4:	20000500 	.word	0x20000500
 80079d8:	20000504 	.word	0x20000504

080079dc <__ssputs_r>:
 80079dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079e0:	688e      	ldr	r6, [r1, #8]
 80079e2:	4682      	mov	sl, r0
 80079e4:	429e      	cmp	r6, r3
 80079e6:	460c      	mov	r4, r1
 80079e8:	4690      	mov	r8, r2
 80079ea:	461f      	mov	r7, r3
 80079ec:	d838      	bhi.n	8007a60 <__ssputs_r+0x84>
 80079ee:	898a      	ldrh	r2, [r1, #12]
 80079f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079f4:	d032      	beq.n	8007a5c <__ssputs_r+0x80>
 80079f6:	6825      	ldr	r5, [r4, #0]
 80079f8:	6909      	ldr	r1, [r1, #16]
 80079fa:	3301      	adds	r3, #1
 80079fc:	eba5 0901 	sub.w	r9, r5, r1
 8007a00:	6965      	ldr	r5, [r4, #20]
 8007a02:	444b      	add	r3, r9
 8007a04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a0c:	106d      	asrs	r5, r5, #1
 8007a0e:	429d      	cmp	r5, r3
 8007a10:	bf38      	it	cc
 8007a12:	461d      	movcc	r5, r3
 8007a14:	0553      	lsls	r3, r2, #21
 8007a16:	d531      	bpl.n	8007a7c <__ssputs_r+0xa0>
 8007a18:	4629      	mov	r1, r5
 8007a1a:	f7ff ff85 	bl	8007928 <_malloc_r>
 8007a1e:	4606      	mov	r6, r0
 8007a20:	b950      	cbnz	r0, 8007a38 <__ssputs_r+0x5c>
 8007a22:	230c      	movs	r3, #12
 8007a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a28:	f8ca 3000 	str.w	r3, [sl]
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a38:	464a      	mov	r2, r9
 8007a3a:	6921      	ldr	r1, [r4, #16]
 8007a3c:	f7fe f84a 	bl	8005ad4 <memcpy>
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4a:	81a3      	strh	r3, [r4, #12]
 8007a4c:	6126      	str	r6, [r4, #16]
 8007a4e:	444e      	add	r6, r9
 8007a50:	6026      	str	r6, [r4, #0]
 8007a52:	463e      	mov	r6, r7
 8007a54:	6165      	str	r5, [r4, #20]
 8007a56:	eba5 0509 	sub.w	r5, r5, r9
 8007a5a:	60a5      	str	r5, [r4, #8]
 8007a5c:	42be      	cmp	r6, r7
 8007a5e:	d900      	bls.n	8007a62 <__ssputs_r+0x86>
 8007a60:	463e      	mov	r6, r7
 8007a62:	4632      	mov	r2, r6
 8007a64:	4641      	mov	r1, r8
 8007a66:	6820      	ldr	r0, [r4, #0]
 8007a68:	f000 f966 	bl	8007d38 <memmove>
 8007a6c:	68a3      	ldr	r3, [r4, #8]
 8007a6e:	6822      	ldr	r2, [r4, #0]
 8007a70:	1b9b      	subs	r3, r3, r6
 8007a72:	4432      	add	r2, r6
 8007a74:	2000      	movs	r0, #0
 8007a76:	60a3      	str	r3, [r4, #8]
 8007a78:	6022      	str	r2, [r4, #0]
 8007a7a:	e7db      	b.n	8007a34 <__ssputs_r+0x58>
 8007a7c:	462a      	mov	r2, r5
 8007a7e:	f000 f981 	bl	8007d84 <_realloc_r>
 8007a82:	4606      	mov	r6, r0
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d1e1      	bne.n	8007a4c <__ssputs_r+0x70>
 8007a88:	4650      	mov	r0, sl
 8007a8a:	6921      	ldr	r1, [r4, #16]
 8007a8c:	f7ff ff00 	bl	8007890 <_free_r>
 8007a90:	e7c7      	b.n	8007a22 <__ssputs_r+0x46>
	...

08007a94 <_svfiprintf_r>:
 8007a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a98:	4698      	mov	r8, r3
 8007a9a:	898b      	ldrh	r3, [r1, #12]
 8007a9c:	4607      	mov	r7, r0
 8007a9e:	061b      	lsls	r3, r3, #24
 8007aa0:	460d      	mov	r5, r1
 8007aa2:	4614      	mov	r4, r2
 8007aa4:	b09d      	sub	sp, #116	; 0x74
 8007aa6:	d50e      	bpl.n	8007ac6 <_svfiprintf_r+0x32>
 8007aa8:	690b      	ldr	r3, [r1, #16]
 8007aaa:	b963      	cbnz	r3, 8007ac6 <_svfiprintf_r+0x32>
 8007aac:	2140      	movs	r1, #64	; 0x40
 8007aae:	f7ff ff3b 	bl	8007928 <_malloc_r>
 8007ab2:	6028      	str	r0, [r5, #0]
 8007ab4:	6128      	str	r0, [r5, #16]
 8007ab6:	b920      	cbnz	r0, 8007ac2 <_svfiprintf_r+0x2e>
 8007ab8:	230c      	movs	r3, #12
 8007aba:	603b      	str	r3, [r7, #0]
 8007abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ac0:	e0d1      	b.n	8007c66 <_svfiprintf_r+0x1d2>
 8007ac2:	2340      	movs	r3, #64	; 0x40
 8007ac4:	616b      	str	r3, [r5, #20]
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8007aca:	2320      	movs	r3, #32
 8007acc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ad0:	2330      	movs	r3, #48	; 0x30
 8007ad2:	f04f 0901 	mov.w	r9, #1
 8007ad6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ada:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007c80 <_svfiprintf_r+0x1ec>
 8007ade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ae2:	4623      	mov	r3, r4
 8007ae4:	469a      	mov	sl, r3
 8007ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aea:	b10a      	cbz	r2, 8007af0 <_svfiprintf_r+0x5c>
 8007aec:	2a25      	cmp	r2, #37	; 0x25
 8007aee:	d1f9      	bne.n	8007ae4 <_svfiprintf_r+0x50>
 8007af0:	ebba 0b04 	subs.w	fp, sl, r4
 8007af4:	d00b      	beq.n	8007b0e <_svfiprintf_r+0x7a>
 8007af6:	465b      	mov	r3, fp
 8007af8:	4622      	mov	r2, r4
 8007afa:	4629      	mov	r1, r5
 8007afc:	4638      	mov	r0, r7
 8007afe:	f7ff ff6d 	bl	80079dc <__ssputs_r>
 8007b02:	3001      	adds	r0, #1
 8007b04:	f000 80aa 	beq.w	8007c5c <_svfiprintf_r+0x1c8>
 8007b08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b0a:	445a      	add	r2, fp
 8007b0c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 80a2 	beq.w	8007c5c <_svfiprintf_r+0x1c8>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b22:	f10a 0a01 	add.w	sl, sl, #1
 8007b26:	9304      	str	r3, [sp, #16]
 8007b28:	9307      	str	r3, [sp, #28]
 8007b2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b2e:	931a      	str	r3, [sp, #104]	; 0x68
 8007b30:	4654      	mov	r4, sl
 8007b32:	2205      	movs	r2, #5
 8007b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b38:	4851      	ldr	r0, [pc, #324]	; (8007c80 <_svfiprintf_r+0x1ec>)
 8007b3a:	f7ff fb0b 	bl	8007154 <memchr>
 8007b3e:	9a04      	ldr	r2, [sp, #16]
 8007b40:	b9d8      	cbnz	r0, 8007b7a <_svfiprintf_r+0xe6>
 8007b42:	06d0      	lsls	r0, r2, #27
 8007b44:	bf44      	itt	mi
 8007b46:	2320      	movmi	r3, #32
 8007b48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b4c:	0711      	lsls	r1, r2, #28
 8007b4e:	bf44      	itt	mi
 8007b50:	232b      	movmi	r3, #43	; 0x2b
 8007b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b56:	f89a 3000 	ldrb.w	r3, [sl]
 8007b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b5c:	d015      	beq.n	8007b8a <_svfiprintf_r+0xf6>
 8007b5e:	4654      	mov	r4, sl
 8007b60:	2000      	movs	r0, #0
 8007b62:	f04f 0c0a 	mov.w	ip, #10
 8007b66:	9a07      	ldr	r2, [sp, #28]
 8007b68:	4621      	mov	r1, r4
 8007b6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b6e:	3b30      	subs	r3, #48	; 0x30
 8007b70:	2b09      	cmp	r3, #9
 8007b72:	d94e      	bls.n	8007c12 <_svfiprintf_r+0x17e>
 8007b74:	b1b0      	cbz	r0, 8007ba4 <_svfiprintf_r+0x110>
 8007b76:	9207      	str	r2, [sp, #28]
 8007b78:	e014      	b.n	8007ba4 <_svfiprintf_r+0x110>
 8007b7a:	eba0 0308 	sub.w	r3, r0, r8
 8007b7e:	fa09 f303 	lsl.w	r3, r9, r3
 8007b82:	4313      	orrs	r3, r2
 8007b84:	46a2      	mov	sl, r4
 8007b86:	9304      	str	r3, [sp, #16]
 8007b88:	e7d2      	b.n	8007b30 <_svfiprintf_r+0x9c>
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	1d19      	adds	r1, r3, #4
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	9103      	str	r1, [sp, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	bfbb      	ittet	lt
 8007b96:	425b      	neglt	r3, r3
 8007b98:	f042 0202 	orrlt.w	r2, r2, #2
 8007b9c:	9307      	strge	r3, [sp, #28]
 8007b9e:	9307      	strlt	r3, [sp, #28]
 8007ba0:	bfb8      	it	lt
 8007ba2:	9204      	strlt	r2, [sp, #16]
 8007ba4:	7823      	ldrb	r3, [r4, #0]
 8007ba6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ba8:	d10c      	bne.n	8007bc4 <_svfiprintf_r+0x130>
 8007baa:	7863      	ldrb	r3, [r4, #1]
 8007bac:	2b2a      	cmp	r3, #42	; 0x2a
 8007bae:	d135      	bne.n	8007c1c <_svfiprintf_r+0x188>
 8007bb0:	9b03      	ldr	r3, [sp, #12]
 8007bb2:	3402      	adds	r4, #2
 8007bb4:	1d1a      	adds	r2, r3, #4
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	9203      	str	r2, [sp, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bfb8      	it	lt
 8007bbe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007bc2:	9305      	str	r3, [sp, #20]
 8007bc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c90 <_svfiprintf_r+0x1fc>
 8007bc8:	2203      	movs	r2, #3
 8007bca:	4650      	mov	r0, sl
 8007bcc:	7821      	ldrb	r1, [r4, #0]
 8007bce:	f7ff fac1 	bl	8007154 <memchr>
 8007bd2:	b140      	cbz	r0, 8007be6 <_svfiprintf_r+0x152>
 8007bd4:	2340      	movs	r3, #64	; 0x40
 8007bd6:	eba0 000a 	sub.w	r0, r0, sl
 8007bda:	fa03 f000 	lsl.w	r0, r3, r0
 8007bde:	9b04      	ldr	r3, [sp, #16]
 8007be0:	3401      	adds	r4, #1
 8007be2:	4303      	orrs	r3, r0
 8007be4:	9304      	str	r3, [sp, #16]
 8007be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bea:	2206      	movs	r2, #6
 8007bec:	4825      	ldr	r0, [pc, #148]	; (8007c84 <_svfiprintf_r+0x1f0>)
 8007bee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bf2:	f7ff faaf 	bl	8007154 <memchr>
 8007bf6:	2800      	cmp	r0, #0
 8007bf8:	d038      	beq.n	8007c6c <_svfiprintf_r+0x1d8>
 8007bfa:	4b23      	ldr	r3, [pc, #140]	; (8007c88 <_svfiprintf_r+0x1f4>)
 8007bfc:	bb1b      	cbnz	r3, 8007c46 <_svfiprintf_r+0x1b2>
 8007bfe:	9b03      	ldr	r3, [sp, #12]
 8007c00:	3307      	adds	r3, #7
 8007c02:	f023 0307 	bic.w	r3, r3, #7
 8007c06:	3308      	adds	r3, #8
 8007c08:	9303      	str	r3, [sp, #12]
 8007c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c0c:	4433      	add	r3, r6
 8007c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c10:	e767      	b.n	8007ae2 <_svfiprintf_r+0x4e>
 8007c12:	460c      	mov	r4, r1
 8007c14:	2001      	movs	r0, #1
 8007c16:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c1a:	e7a5      	b.n	8007b68 <_svfiprintf_r+0xd4>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f04f 0c0a 	mov.w	ip, #10
 8007c22:	4619      	mov	r1, r3
 8007c24:	3401      	adds	r4, #1
 8007c26:	9305      	str	r3, [sp, #20]
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c2e:	3a30      	subs	r2, #48	; 0x30
 8007c30:	2a09      	cmp	r2, #9
 8007c32:	d903      	bls.n	8007c3c <_svfiprintf_r+0x1a8>
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0c5      	beq.n	8007bc4 <_svfiprintf_r+0x130>
 8007c38:	9105      	str	r1, [sp, #20]
 8007c3a:	e7c3      	b.n	8007bc4 <_svfiprintf_r+0x130>
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	2301      	movs	r3, #1
 8007c40:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c44:	e7f0      	b.n	8007c28 <_svfiprintf_r+0x194>
 8007c46:	ab03      	add	r3, sp, #12
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	462a      	mov	r2, r5
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	4b0f      	ldr	r3, [pc, #60]	; (8007c8c <_svfiprintf_r+0x1f8>)
 8007c50:	a904      	add	r1, sp, #16
 8007c52:	f7fd fff3 	bl	8005c3c <_printf_float>
 8007c56:	1c42      	adds	r2, r0, #1
 8007c58:	4606      	mov	r6, r0
 8007c5a:	d1d6      	bne.n	8007c0a <_svfiprintf_r+0x176>
 8007c5c:	89ab      	ldrh	r3, [r5, #12]
 8007c5e:	065b      	lsls	r3, r3, #25
 8007c60:	f53f af2c 	bmi.w	8007abc <_svfiprintf_r+0x28>
 8007c64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c66:	b01d      	add	sp, #116	; 0x74
 8007c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6c:	ab03      	add	r3, sp, #12
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	462a      	mov	r2, r5
 8007c72:	4638      	mov	r0, r7
 8007c74:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <_svfiprintf_r+0x1f8>)
 8007c76:	a904      	add	r1, sp, #16
 8007c78:	f7fe fa7c 	bl	8006174 <_printf_i>
 8007c7c:	e7eb      	b.n	8007c56 <_svfiprintf_r+0x1c2>
 8007c7e:	bf00      	nop
 8007c80:	08008b2c 	.word	0x08008b2c
 8007c84:	08008b36 	.word	0x08008b36
 8007c88:	08005c3d 	.word	0x08005c3d
 8007c8c:	080079dd 	.word	0x080079dd
 8007c90:	08008b32 	.word	0x08008b32

08007c94 <_sbrk_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	2300      	movs	r3, #0
 8007c98:	4d05      	ldr	r5, [pc, #20]	; (8007cb0 <_sbrk_r+0x1c>)
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	4608      	mov	r0, r1
 8007c9e:	602b      	str	r3, [r5, #0]
 8007ca0:	f7fa fec8 	bl	8002a34 <_sbrk>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d102      	bne.n	8007cae <_sbrk_r+0x1a>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	b103      	cbz	r3, 8007cae <_sbrk_r+0x1a>
 8007cac:	6023      	str	r3, [r4, #0]
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	2000050c 	.word	0x2000050c

08007cb4 <__assert_func>:
 8007cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cb6:	4614      	mov	r4, r2
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4b09      	ldr	r3, [pc, #36]	; (8007ce0 <__assert_func+0x2c>)
 8007cbc:	4605      	mov	r5, r0
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68d8      	ldr	r0, [r3, #12]
 8007cc2:	b14c      	cbz	r4, 8007cd8 <__assert_func+0x24>
 8007cc4:	4b07      	ldr	r3, [pc, #28]	; (8007ce4 <__assert_func+0x30>)
 8007cc6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007cca:	9100      	str	r1, [sp, #0]
 8007ccc:	462b      	mov	r3, r5
 8007cce:	4906      	ldr	r1, [pc, #24]	; (8007ce8 <__assert_func+0x34>)
 8007cd0:	f000 f80e 	bl	8007cf0 <fiprintf>
 8007cd4:	f000 faa2 	bl	800821c <abort>
 8007cd8:	4b04      	ldr	r3, [pc, #16]	; (8007cec <__assert_func+0x38>)
 8007cda:	461c      	mov	r4, r3
 8007cdc:	e7f3      	b.n	8007cc6 <__assert_func+0x12>
 8007cde:	bf00      	nop
 8007ce0:	2000010c 	.word	0x2000010c
 8007ce4:	08008b3d 	.word	0x08008b3d
 8007ce8:	08008b4a 	.word	0x08008b4a
 8007cec:	08008b78 	.word	0x08008b78

08007cf0 <fiprintf>:
 8007cf0:	b40e      	push	{r1, r2, r3}
 8007cf2:	b503      	push	{r0, r1, lr}
 8007cf4:	4601      	mov	r1, r0
 8007cf6:	ab03      	add	r3, sp, #12
 8007cf8:	4805      	ldr	r0, [pc, #20]	; (8007d10 <fiprintf+0x20>)
 8007cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cfe:	6800      	ldr	r0, [r0, #0]
 8007d00:	9301      	str	r3, [sp, #4]
 8007d02:	f000 f88d 	bl	8007e20 <_vfiprintf_r>
 8007d06:	b002      	add	sp, #8
 8007d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d0c:	b003      	add	sp, #12
 8007d0e:	4770      	bx	lr
 8007d10:	2000010c 	.word	0x2000010c

08007d14 <__ascii_mbtowc>:
 8007d14:	b082      	sub	sp, #8
 8007d16:	b901      	cbnz	r1, 8007d1a <__ascii_mbtowc+0x6>
 8007d18:	a901      	add	r1, sp, #4
 8007d1a:	b142      	cbz	r2, 8007d2e <__ascii_mbtowc+0x1a>
 8007d1c:	b14b      	cbz	r3, 8007d32 <__ascii_mbtowc+0x1e>
 8007d1e:	7813      	ldrb	r3, [r2, #0]
 8007d20:	600b      	str	r3, [r1, #0]
 8007d22:	7812      	ldrb	r2, [r2, #0]
 8007d24:	1e10      	subs	r0, r2, #0
 8007d26:	bf18      	it	ne
 8007d28:	2001      	movne	r0, #1
 8007d2a:	b002      	add	sp, #8
 8007d2c:	4770      	bx	lr
 8007d2e:	4610      	mov	r0, r2
 8007d30:	e7fb      	b.n	8007d2a <__ascii_mbtowc+0x16>
 8007d32:	f06f 0001 	mvn.w	r0, #1
 8007d36:	e7f8      	b.n	8007d2a <__ascii_mbtowc+0x16>

08007d38 <memmove>:
 8007d38:	4288      	cmp	r0, r1
 8007d3a:	b510      	push	{r4, lr}
 8007d3c:	eb01 0402 	add.w	r4, r1, r2
 8007d40:	d902      	bls.n	8007d48 <memmove+0x10>
 8007d42:	4284      	cmp	r4, r0
 8007d44:	4623      	mov	r3, r4
 8007d46:	d807      	bhi.n	8007d58 <memmove+0x20>
 8007d48:	1e43      	subs	r3, r0, #1
 8007d4a:	42a1      	cmp	r1, r4
 8007d4c:	d008      	beq.n	8007d60 <memmove+0x28>
 8007d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d56:	e7f8      	b.n	8007d4a <memmove+0x12>
 8007d58:	4601      	mov	r1, r0
 8007d5a:	4402      	add	r2, r0
 8007d5c:	428a      	cmp	r2, r1
 8007d5e:	d100      	bne.n	8007d62 <memmove+0x2a>
 8007d60:	bd10      	pop	{r4, pc}
 8007d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d6a:	e7f7      	b.n	8007d5c <memmove+0x24>

08007d6c <__malloc_lock>:
 8007d6c:	4801      	ldr	r0, [pc, #4]	; (8007d74 <__malloc_lock+0x8>)
 8007d6e:	f000 bc15 	b.w	800859c <__retarget_lock_acquire_recursive>
 8007d72:	bf00      	nop
 8007d74:	20000514 	.word	0x20000514

08007d78 <__malloc_unlock>:
 8007d78:	4801      	ldr	r0, [pc, #4]	; (8007d80 <__malloc_unlock+0x8>)
 8007d7a:	f000 bc10 	b.w	800859e <__retarget_lock_release_recursive>
 8007d7e:	bf00      	nop
 8007d80:	20000514 	.word	0x20000514

08007d84 <_realloc_r>:
 8007d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d86:	4607      	mov	r7, r0
 8007d88:	4614      	mov	r4, r2
 8007d8a:	460e      	mov	r6, r1
 8007d8c:	b921      	cbnz	r1, 8007d98 <_realloc_r+0x14>
 8007d8e:	4611      	mov	r1, r2
 8007d90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d94:	f7ff bdc8 	b.w	8007928 <_malloc_r>
 8007d98:	b922      	cbnz	r2, 8007da4 <_realloc_r+0x20>
 8007d9a:	f7ff fd79 	bl	8007890 <_free_r>
 8007d9e:	4625      	mov	r5, r4
 8007da0:	4628      	mov	r0, r5
 8007da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007da4:	f000 fc60 	bl	8008668 <_malloc_usable_size_r>
 8007da8:	42a0      	cmp	r0, r4
 8007daa:	d20f      	bcs.n	8007dcc <_realloc_r+0x48>
 8007dac:	4621      	mov	r1, r4
 8007dae:	4638      	mov	r0, r7
 8007db0:	f7ff fdba 	bl	8007928 <_malloc_r>
 8007db4:	4605      	mov	r5, r0
 8007db6:	2800      	cmp	r0, #0
 8007db8:	d0f2      	beq.n	8007da0 <_realloc_r+0x1c>
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	f7fd fe89 	bl	8005ad4 <memcpy>
 8007dc2:	4631      	mov	r1, r6
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	f7ff fd63 	bl	8007890 <_free_r>
 8007dca:	e7e9      	b.n	8007da0 <_realloc_r+0x1c>
 8007dcc:	4635      	mov	r5, r6
 8007dce:	e7e7      	b.n	8007da0 <_realloc_r+0x1c>

08007dd0 <__sfputc_r>:
 8007dd0:	6893      	ldr	r3, [r2, #8]
 8007dd2:	b410      	push	{r4}
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	6093      	str	r3, [r2, #8]
 8007dda:	da07      	bge.n	8007dec <__sfputc_r+0x1c>
 8007ddc:	6994      	ldr	r4, [r2, #24]
 8007dde:	42a3      	cmp	r3, r4
 8007de0:	db01      	blt.n	8007de6 <__sfputc_r+0x16>
 8007de2:	290a      	cmp	r1, #10
 8007de4:	d102      	bne.n	8007dec <__sfputc_r+0x1c>
 8007de6:	bc10      	pop	{r4}
 8007de8:	f000 b94a 	b.w	8008080 <__swbuf_r>
 8007dec:	6813      	ldr	r3, [r2, #0]
 8007dee:	1c58      	adds	r0, r3, #1
 8007df0:	6010      	str	r0, [r2, #0]
 8007df2:	7019      	strb	r1, [r3, #0]
 8007df4:	4608      	mov	r0, r1
 8007df6:	bc10      	pop	{r4}
 8007df8:	4770      	bx	lr

08007dfa <__sfputs_r>:
 8007dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dfc:	4606      	mov	r6, r0
 8007dfe:	460f      	mov	r7, r1
 8007e00:	4614      	mov	r4, r2
 8007e02:	18d5      	adds	r5, r2, r3
 8007e04:	42ac      	cmp	r4, r5
 8007e06:	d101      	bne.n	8007e0c <__sfputs_r+0x12>
 8007e08:	2000      	movs	r0, #0
 8007e0a:	e007      	b.n	8007e1c <__sfputs_r+0x22>
 8007e0c:	463a      	mov	r2, r7
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e14:	f7ff ffdc 	bl	8007dd0 <__sfputc_r>
 8007e18:	1c43      	adds	r3, r0, #1
 8007e1a:	d1f3      	bne.n	8007e04 <__sfputs_r+0xa>
 8007e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e20 <_vfiprintf_r>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	460d      	mov	r5, r1
 8007e26:	4614      	mov	r4, r2
 8007e28:	4698      	mov	r8, r3
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	b09d      	sub	sp, #116	; 0x74
 8007e2e:	b118      	cbz	r0, 8007e38 <_vfiprintf_r+0x18>
 8007e30:	6983      	ldr	r3, [r0, #24]
 8007e32:	b90b      	cbnz	r3, 8007e38 <_vfiprintf_r+0x18>
 8007e34:	f000 fb14 	bl	8008460 <__sinit>
 8007e38:	4b89      	ldr	r3, [pc, #548]	; (8008060 <_vfiprintf_r+0x240>)
 8007e3a:	429d      	cmp	r5, r3
 8007e3c:	d11b      	bne.n	8007e76 <_vfiprintf_r+0x56>
 8007e3e:	6875      	ldr	r5, [r6, #4]
 8007e40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e42:	07d9      	lsls	r1, r3, #31
 8007e44:	d405      	bmi.n	8007e52 <_vfiprintf_r+0x32>
 8007e46:	89ab      	ldrh	r3, [r5, #12]
 8007e48:	059a      	lsls	r2, r3, #22
 8007e4a:	d402      	bmi.n	8007e52 <_vfiprintf_r+0x32>
 8007e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e4e:	f000 fba5 	bl	800859c <__retarget_lock_acquire_recursive>
 8007e52:	89ab      	ldrh	r3, [r5, #12]
 8007e54:	071b      	lsls	r3, r3, #28
 8007e56:	d501      	bpl.n	8007e5c <_vfiprintf_r+0x3c>
 8007e58:	692b      	ldr	r3, [r5, #16]
 8007e5a:	b9eb      	cbnz	r3, 8007e98 <_vfiprintf_r+0x78>
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f000 f96e 	bl	8008140 <__swsetup_r>
 8007e64:	b1c0      	cbz	r0, 8007e98 <_vfiprintf_r+0x78>
 8007e66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e68:	07dc      	lsls	r4, r3, #31
 8007e6a:	d50e      	bpl.n	8007e8a <_vfiprintf_r+0x6a>
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e70:	b01d      	add	sp, #116	; 0x74
 8007e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e76:	4b7b      	ldr	r3, [pc, #492]	; (8008064 <_vfiprintf_r+0x244>)
 8007e78:	429d      	cmp	r5, r3
 8007e7a:	d101      	bne.n	8007e80 <_vfiprintf_r+0x60>
 8007e7c:	68b5      	ldr	r5, [r6, #8]
 8007e7e:	e7df      	b.n	8007e40 <_vfiprintf_r+0x20>
 8007e80:	4b79      	ldr	r3, [pc, #484]	; (8008068 <_vfiprintf_r+0x248>)
 8007e82:	429d      	cmp	r5, r3
 8007e84:	bf08      	it	eq
 8007e86:	68f5      	ldreq	r5, [r6, #12]
 8007e88:	e7da      	b.n	8007e40 <_vfiprintf_r+0x20>
 8007e8a:	89ab      	ldrh	r3, [r5, #12]
 8007e8c:	0598      	lsls	r0, r3, #22
 8007e8e:	d4ed      	bmi.n	8007e6c <_vfiprintf_r+0x4c>
 8007e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e92:	f000 fb84 	bl	800859e <__retarget_lock_release_recursive>
 8007e96:	e7e9      	b.n	8007e6c <_vfiprintf_r+0x4c>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9c:	2320      	movs	r3, #32
 8007e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ea2:	2330      	movs	r3, #48	; 0x30
 8007ea4:	f04f 0901 	mov.w	r9, #1
 8007ea8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800806c <_vfiprintf_r+0x24c>
 8007eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eb4:	4623      	mov	r3, r4
 8007eb6:	469a      	mov	sl, r3
 8007eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ebc:	b10a      	cbz	r2, 8007ec2 <_vfiprintf_r+0xa2>
 8007ebe:	2a25      	cmp	r2, #37	; 0x25
 8007ec0:	d1f9      	bne.n	8007eb6 <_vfiprintf_r+0x96>
 8007ec2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ec6:	d00b      	beq.n	8007ee0 <_vfiprintf_r+0xc0>
 8007ec8:	465b      	mov	r3, fp
 8007eca:	4622      	mov	r2, r4
 8007ecc:	4629      	mov	r1, r5
 8007ece:	4630      	mov	r0, r6
 8007ed0:	f7ff ff93 	bl	8007dfa <__sfputs_r>
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	f000 80aa 	beq.w	800802e <_vfiprintf_r+0x20e>
 8007eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007edc:	445a      	add	r2, fp
 8007ede:	9209      	str	r2, [sp, #36]	; 0x24
 8007ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 80a2 	beq.w	800802e <_vfiprintf_r+0x20e>
 8007eea:	2300      	movs	r3, #0
 8007eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ef4:	f10a 0a01 	add.w	sl, sl, #1
 8007ef8:	9304      	str	r3, [sp, #16]
 8007efa:	9307      	str	r3, [sp, #28]
 8007efc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f00:	931a      	str	r3, [sp, #104]	; 0x68
 8007f02:	4654      	mov	r4, sl
 8007f04:	2205      	movs	r2, #5
 8007f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f0a:	4858      	ldr	r0, [pc, #352]	; (800806c <_vfiprintf_r+0x24c>)
 8007f0c:	f7ff f922 	bl	8007154 <memchr>
 8007f10:	9a04      	ldr	r2, [sp, #16]
 8007f12:	b9d8      	cbnz	r0, 8007f4c <_vfiprintf_r+0x12c>
 8007f14:	06d1      	lsls	r1, r2, #27
 8007f16:	bf44      	itt	mi
 8007f18:	2320      	movmi	r3, #32
 8007f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f1e:	0713      	lsls	r3, r2, #28
 8007f20:	bf44      	itt	mi
 8007f22:	232b      	movmi	r3, #43	; 0x2b
 8007f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f28:	f89a 3000 	ldrb.w	r3, [sl]
 8007f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f2e:	d015      	beq.n	8007f5c <_vfiprintf_r+0x13c>
 8007f30:	4654      	mov	r4, sl
 8007f32:	2000      	movs	r0, #0
 8007f34:	f04f 0c0a 	mov.w	ip, #10
 8007f38:	9a07      	ldr	r2, [sp, #28]
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f40:	3b30      	subs	r3, #48	; 0x30
 8007f42:	2b09      	cmp	r3, #9
 8007f44:	d94e      	bls.n	8007fe4 <_vfiprintf_r+0x1c4>
 8007f46:	b1b0      	cbz	r0, 8007f76 <_vfiprintf_r+0x156>
 8007f48:	9207      	str	r2, [sp, #28]
 8007f4a:	e014      	b.n	8007f76 <_vfiprintf_r+0x156>
 8007f4c:	eba0 0308 	sub.w	r3, r0, r8
 8007f50:	fa09 f303 	lsl.w	r3, r9, r3
 8007f54:	4313      	orrs	r3, r2
 8007f56:	46a2      	mov	sl, r4
 8007f58:	9304      	str	r3, [sp, #16]
 8007f5a:	e7d2      	b.n	8007f02 <_vfiprintf_r+0xe2>
 8007f5c:	9b03      	ldr	r3, [sp, #12]
 8007f5e:	1d19      	adds	r1, r3, #4
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	9103      	str	r1, [sp, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	bfbb      	ittet	lt
 8007f68:	425b      	neglt	r3, r3
 8007f6a:	f042 0202 	orrlt.w	r2, r2, #2
 8007f6e:	9307      	strge	r3, [sp, #28]
 8007f70:	9307      	strlt	r3, [sp, #28]
 8007f72:	bfb8      	it	lt
 8007f74:	9204      	strlt	r2, [sp, #16]
 8007f76:	7823      	ldrb	r3, [r4, #0]
 8007f78:	2b2e      	cmp	r3, #46	; 0x2e
 8007f7a:	d10c      	bne.n	8007f96 <_vfiprintf_r+0x176>
 8007f7c:	7863      	ldrb	r3, [r4, #1]
 8007f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f80:	d135      	bne.n	8007fee <_vfiprintf_r+0x1ce>
 8007f82:	9b03      	ldr	r3, [sp, #12]
 8007f84:	3402      	adds	r4, #2
 8007f86:	1d1a      	adds	r2, r3, #4
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	9203      	str	r2, [sp, #12]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	bfb8      	it	lt
 8007f90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007f94:	9305      	str	r3, [sp, #20]
 8007f96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800807c <_vfiprintf_r+0x25c>
 8007f9a:	2203      	movs	r2, #3
 8007f9c:	4650      	mov	r0, sl
 8007f9e:	7821      	ldrb	r1, [r4, #0]
 8007fa0:	f7ff f8d8 	bl	8007154 <memchr>
 8007fa4:	b140      	cbz	r0, 8007fb8 <_vfiprintf_r+0x198>
 8007fa6:	2340      	movs	r3, #64	; 0x40
 8007fa8:	eba0 000a 	sub.w	r0, r0, sl
 8007fac:	fa03 f000 	lsl.w	r0, r3, r0
 8007fb0:	9b04      	ldr	r3, [sp, #16]
 8007fb2:	3401      	adds	r4, #1
 8007fb4:	4303      	orrs	r3, r0
 8007fb6:	9304      	str	r3, [sp, #16]
 8007fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fbc:	2206      	movs	r2, #6
 8007fbe:	482c      	ldr	r0, [pc, #176]	; (8008070 <_vfiprintf_r+0x250>)
 8007fc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fc4:	f7ff f8c6 	bl	8007154 <memchr>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d03f      	beq.n	800804c <_vfiprintf_r+0x22c>
 8007fcc:	4b29      	ldr	r3, [pc, #164]	; (8008074 <_vfiprintf_r+0x254>)
 8007fce:	bb1b      	cbnz	r3, 8008018 <_vfiprintf_r+0x1f8>
 8007fd0:	9b03      	ldr	r3, [sp, #12]
 8007fd2:	3307      	adds	r3, #7
 8007fd4:	f023 0307 	bic.w	r3, r3, #7
 8007fd8:	3308      	adds	r3, #8
 8007fda:	9303      	str	r3, [sp, #12]
 8007fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fde:	443b      	add	r3, r7
 8007fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe2:	e767      	b.n	8007eb4 <_vfiprintf_r+0x94>
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	2001      	movs	r0, #1
 8007fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fec:	e7a5      	b.n	8007f3a <_vfiprintf_r+0x11a>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	f04f 0c0a 	mov.w	ip, #10
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	3401      	adds	r4, #1
 8007ff8:	9305      	str	r3, [sp, #20]
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008000:	3a30      	subs	r2, #48	; 0x30
 8008002:	2a09      	cmp	r2, #9
 8008004:	d903      	bls.n	800800e <_vfiprintf_r+0x1ee>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d0c5      	beq.n	8007f96 <_vfiprintf_r+0x176>
 800800a:	9105      	str	r1, [sp, #20]
 800800c:	e7c3      	b.n	8007f96 <_vfiprintf_r+0x176>
 800800e:	4604      	mov	r4, r0
 8008010:	2301      	movs	r3, #1
 8008012:	fb0c 2101 	mla	r1, ip, r1, r2
 8008016:	e7f0      	b.n	8007ffa <_vfiprintf_r+0x1da>
 8008018:	ab03      	add	r3, sp, #12
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	462a      	mov	r2, r5
 800801e:	4630      	mov	r0, r6
 8008020:	4b15      	ldr	r3, [pc, #84]	; (8008078 <_vfiprintf_r+0x258>)
 8008022:	a904      	add	r1, sp, #16
 8008024:	f7fd fe0a 	bl	8005c3c <_printf_float>
 8008028:	4607      	mov	r7, r0
 800802a:	1c78      	adds	r0, r7, #1
 800802c:	d1d6      	bne.n	8007fdc <_vfiprintf_r+0x1bc>
 800802e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008030:	07d9      	lsls	r1, r3, #31
 8008032:	d405      	bmi.n	8008040 <_vfiprintf_r+0x220>
 8008034:	89ab      	ldrh	r3, [r5, #12]
 8008036:	059a      	lsls	r2, r3, #22
 8008038:	d402      	bmi.n	8008040 <_vfiprintf_r+0x220>
 800803a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800803c:	f000 faaf 	bl	800859e <__retarget_lock_release_recursive>
 8008040:	89ab      	ldrh	r3, [r5, #12]
 8008042:	065b      	lsls	r3, r3, #25
 8008044:	f53f af12 	bmi.w	8007e6c <_vfiprintf_r+0x4c>
 8008048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800804a:	e711      	b.n	8007e70 <_vfiprintf_r+0x50>
 800804c:	ab03      	add	r3, sp, #12
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	462a      	mov	r2, r5
 8008052:	4630      	mov	r0, r6
 8008054:	4b08      	ldr	r3, [pc, #32]	; (8008078 <_vfiprintf_r+0x258>)
 8008056:	a904      	add	r1, sp, #16
 8008058:	f7fe f88c 	bl	8006174 <_printf_i>
 800805c:	e7e4      	b.n	8008028 <_vfiprintf_r+0x208>
 800805e:	bf00      	nop
 8008060:	08008ca4 	.word	0x08008ca4
 8008064:	08008cc4 	.word	0x08008cc4
 8008068:	08008c84 	.word	0x08008c84
 800806c:	08008b2c 	.word	0x08008b2c
 8008070:	08008b36 	.word	0x08008b36
 8008074:	08005c3d 	.word	0x08005c3d
 8008078:	08007dfb 	.word	0x08007dfb
 800807c:	08008b32 	.word	0x08008b32

08008080 <__swbuf_r>:
 8008080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008082:	460e      	mov	r6, r1
 8008084:	4614      	mov	r4, r2
 8008086:	4605      	mov	r5, r0
 8008088:	b118      	cbz	r0, 8008092 <__swbuf_r+0x12>
 800808a:	6983      	ldr	r3, [r0, #24]
 800808c:	b90b      	cbnz	r3, 8008092 <__swbuf_r+0x12>
 800808e:	f000 f9e7 	bl	8008460 <__sinit>
 8008092:	4b21      	ldr	r3, [pc, #132]	; (8008118 <__swbuf_r+0x98>)
 8008094:	429c      	cmp	r4, r3
 8008096:	d12b      	bne.n	80080f0 <__swbuf_r+0x70>
 8008098:	686c      	ldr	r4, [r5, #4]
 800809a:	69a3      	ldr	r3, [r4, #24]
 800809c:	60a3      	str	r3, [r4, #8]
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	071a      	lsls	r2, r3, #28
 80080a2:	d52f      	bpl.n	8008104 <__swbuf_r+0x84>
 80080a4:	6923      	ldr	r3, [r4, #16]
 80080a6:	b36b      	cbz	r3, 8008104 <__swbuf_r+0x84>
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	6820      	ldr	r0, [r4, #0]
 80080ac:	b2f6      	uxtb	r6, r6
 80080ae:	1ac0      	subs	r0, r0, r3
 80080b0:	6963      	ldr	r3, [r4, #20]
 80080b2:	4637      	mov	r7, r6
 80080b4:	4283      	cmp	r3, r0
 80080b6:	dc04      	bgt.n	80080c2 <__swbuf_r+0x42>
 80080b8:	4621      	mov	r1, r4
 80080ba:	4628      	mov	r0, r5
 80080bc:	f000 f93c 	bl	8008338 <_fflush_r>
 80080c0:	bb30      	cbnz	r0, 8008110 <__swbuf_r+0x90>
 80080c2:	68a3      	ldr	r3, [r4, #8]
 80080c4:	3001      	adds	r0, #1
 80080c6:	3b01      	subs	r3, #1
 80080c8:	60a3      	str	r3, [r4, #8]
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	6022      	str	r2, [r4, #0]
 80080d0:	701e      	strb	r6, [r3, #0]
 80080d2:	6963      	ldr	r3, [r4, #20]
 80080d4:	4283      	cmp	r3, r0
 80080d6:	d004      	beq.n	80080e2 <__swbuf_r+0x62>
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	07db      	lsls	r3, r3, #31
 80080dc:	d506      	bpl.n	80080ec <__swbuf_r+0x6c>
 80080de:	2e0a      	cmp	r6, #10
 80080e0:	d104      	bne.n	80080ec <__swbuf_r+0x6c>
 80080e2:	4621      	mov	r1, r4
 80080e4:	4628      	mov	r0, r5
 80080e6:	f000 f927 	bl	8008338 <_fflush_r>
 80080ea:	b988      	cbnz	r0, 8008110 <__swbuf_r+0x90>
 80080ec:	4638      	mov	r0, r7
 80080ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080f0:	4b0a      	ldr	r3, [pc, #40]	; (800811c <__swbuf_r+0x9c>)
 80080f2:	429c      	cmp	r4, r3
 80080f4:	d101      	bne.n	80080fa <__swbuf_r+0x7a>
 80080f6:	68ac      	ldr	r4, [r5, #8]
 80080f8:	e7cf      	b.n	800809a <__swbuf_r+0x1a>
 80080fa:	4b09      	ldr	r3, [pc, #36]	; (8008120 <__swbuf_r+0xa0>)
 80080fc:	429c      	cmp	r4, r3
 80080fe:	bf08      	it	eq
 8008100:	68ec      	ldreq	r4, [r5, #12]
 8008102:	e7ca      	b.n	800809a <__swbuf_r+0x1a>
 8008104:	4621      	mov	r1, r4
 8008106:	4628      	mov	r0, r5
 8008108:	f000 f81a 	bl	8008140 <__swsetup_r>
 800810c:	2800      	cmp	r0, #0
 800810e:	d0cb      	beq.n	80080a8 <__swbuf_r+0x28>
 8008110:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008114:	e7ea      	b.n	80080ec <__swbuf_r+0x6c>
 8008116:	bf00      	nop
 8008118:	08008ca4 	.word	0x08008ca4
 800811c:	08008cc4 	.word	0x08008cc4
 8008120:	08008c84 	.word	0x08008c84

08008124 <__ascii_wctomb>:
 8008124:	4603      	mov	r3, r0
 8008126:	4608      	mov	r0, r1
 8008128:	b141      	cbz	r1, 800813c <__ascii_wctomb+0x18>
 800812a:	2aff      	cmp	r2, #255	; 0xff
 800812c:	d904      	bls.n	8008138 <__ascii_wctomb+0x14>
 800812e:	228a      	movs	r2, #138	; 0x8a
 8008130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	4770      	bx	lr
 8008138:	2001      	movs	r0, #1
 800813a:	700a      	strb	r2, [r1, #0]
 800813c:	4770      	bx	lr
	...

08008140 <__swsetup_r>:
 8008140:	4b32      	ldr	r3, [pc, #200]	; (800820c <__swsetup_r+0xcc>)
 8008142:	b570      	push	{r4, r5, r6, lr}
 8008144:	681d      	ldr	r5, [r3, #0]
 8008146:	4606      	mov	r6, r0
 8008148:	460c      	mov	r4, r1
 800814a:	b125      	cbz	r5, 8008156 <__swsetup_r+0x16>
 800814c:	69ab      	ldr	r3, [r5, #24]
 800814e:	b913      	cbnz	r3, 8008156 <__swsetup_r+0x16>
 8008150:	4628      	mov	r0, r5
 8008152:	f000 f985 	bl	8008460 <__sinit>
 8008156:	4b2e      	ldr	r3, [pc, #184]	; (8008210 <__swsetup_r+0xd0>)
 8008158:	429c      	cmp	r4, r3
 800815a:	d10f      	bne.n	800817c <__swsetup_r+0x3c>
 800815c:	686c      	ldr	r4, [r5, #4]
 800815e:	89a3      	ldrh	r3, [r4, #12]
 8008160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008164:	0719      	lsls	r1, r3, #28
 8008166:	d42c      	bmi.n	80081c2 <__swsetup_r+0x82>
 8008168:	06dd      	lsls	r5, r3, #27
 800816a:	d411      	bmi.n	8008190 <__swsetup_r+0x50>
 800816c:	2309      	movs	r3, #9
 800816e:	6033      	str	r3, [r6, #0]
 8008170:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008178:	81a3      	strh	r3, [r4, #12]
 800817a:	e03e      	b.n	80081fa <__swsetup_r+0xba>
 800817c:	4b25      	ldr	r3, [pc, #148]	; (8008214 <__swsetup_r+0xd4>)
 800817e:	429c      	cmp	r4, r3
 8008180:	d101      	bne.n	8008186 <__swsetup_r+0x46>
 8008182:	68ac      	ldr	r4, [r5, #8]
 8008184:	e7eb      	b.n	800815e <__swsetup_r+0x1e>
 8008186:	4b24      	ldr	r3, [pc, #144]	; (8008218 <__swsetup_r+0xd8>)
 8008188:	429c      	cmp	r4, r3
 800818a:	bf08      	it	eq
 800818c:	68ec      	ldreq	r4, [r5, #12]
 800818e:	e7e6      	b.n	800815e <__swsetup_r+0x1e>
 8008190:	0758      	lsls	r0, r3, #29
 8008192:	d512      	bpl.n	80081ba <__swsetup_r+0x7a>
 8008194:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008196:	b141      	cbz	r1, 80081aa <__swsetup_r+0x6a>
 8008198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800819c:	4299      	cmp	r1, r3
 800819e:	d002      	beq.n	80081a6 <__swsetup_r+0x66>
 80081a0:	4630      	mov	r0, r6
 80081a2:	f7ff fb75 	bl	8007890 <_free_r>
 80081a6:	2300      	movs	r3, #0
 80081a8:	6363      	str	r3, [r4, #52]	; 0x34
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081b0:	81a3      	strh	r3, [r4, #12]
 80081b2:	2300      	movs	r3, #0
 80081b4:	6063      	str	r3, [r4, #4]
 80081b6:	6923      	ldr	r3, [r4, #16]
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	f043 0308 	orr.w	r3, r3, #8
 80081c0:	81a3      	strh	r3, [r4, #12]
 80081c2:	6923      	ldr	r3, [r4, #16]
 80081c4:	b94b      	cbnz	r3, 80081da <__swsetup_r+0x9a>
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081d0:	d003      	beq.n	80081da <__swsetup_r+0x9a>
 80081d2:	4621      	mov	r1, r4
 80081d4:	4630      	mov	r0, r6
 80081d6:	f000 fa07 	bl	80085e8 <__smakebuf_r>
 80081da:	89a0      	ldrh	r0, [r4, #12]
 80081dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081e0:	f010 0301 	ands.w	r3, r0, #1
 80081e4:	d00a      	beq.n	80081fc <__swsetup_r+0xbc>
 80081e6:	2300      	movs	r3, #0
 80081e8:	60a3      	str	r3, [r4, #8]
 80081ea:	6963      	ldr	r3, [r4, #20]
 80081ec:	425b      	negs	r3, r3
 80081ee:	61a3      	str	r3, [r4, #24]
 80081f0:	6923      	ldr	r3, [r4, #16]
 80081f2:	b943      	cbnz	r3, 8008206 <__swsetup_r+0xc6>
 80081f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081f8:	d1ba      	bne.n	8008170 <__swsetup_r+0x30>
 80081fa:	bd70      	pop	{r4, r5, r6, pc}
 80081fc:	0781      	lsls	r1, r0, #30
 80081fe:	bf58      	it	pl
 8008200:	6963      	ldrpl	r3, [r4, #20]
 8008202:	60a3      	str	r3, [r4, #8]
 8008204:	e7f4      	b.n	80081f0 <__swsetup_r+0xb0>
 8008206:	2000      	movs	r0, #0
 8008208:	e7f7      	b.n	80081fa <__swsetup_r+0xba>
 800820a:	bf00      	nop
 800820c:	2000010c 	.word	0x2000010c
 8008210:	08008ca4 	.word	0x08008ca4
 8008214:	08008cc4 	.word	0x08008cc4
 8008218:	08008c84 	.word	0x08008c84

0800821c <abort>:
 800821c:	2006      	movs	r0, #6
 800821e:	b508      	push	{r3, lr}
 8008220:	f000 fa52 	bl	80086c8 <raise>
 8008224:	2001      	movs	r0, #1
 8008226:	f7fa fb92 	bl	800294e <_exit>
	...

0800822c <__sflush_r>:
 800822c:	898a      	ldrh	r2, [r1, #12]
 800822e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008232:	4605      	mov	r5, r0
 8008234:	0710      	lsls	r0, r2, #28
 8008236:	460c      	mov	r4, r1
 8008238:	d458      	bmi.n	80082ec <__sflush_r+0xc0>
 800823a:	684b      	ldr	r3, [r1, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	dc05      	bgt.n	800824c <__sflush_r+0x20>
 8008240:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008242:	2b00      	cmp	r3, #0
 8008244:	dc02      	bgt.n	800824c <__sflush_r+0x20>
 8008246:	2000      	movs	r0, #0
 8008248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800824c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800824e:	2e00      	cmp	r6, #0
 8008250:	d0f9      	beq.n	8008246 <__sflush_r+0x1a>
 8008252:	2300      	movs	r3, #0
 8008254:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008258:	682f      	ldr	r7, [r5, #0]
 800825a:	602b      	str	r3, [r5, #0]
 800825c:	d032      	beq.n	80082c4 <__sflush_r+0x98>
 800825e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	075a      	lsls	r2, r3, #29
 8008264:	d505      	bpl.n	8008272 <__sflush_r+0x46>
 8008266:	6863      	ldr	r3, [r4, #4]
 8008268:	1ac0      	subs	r0, r0, r3
 800826a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800826c:	b10b      	cbz	r3, 8008272 <__sflush_r+0x46>
 800826e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008270:	1ac0      	subs	r0, r0, r3
 8008272:	2300      	movs	r3, #0
 8008274:	4602      	mov	r2, r0
 8008276:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008278:	4628      	mov	r0, r5
 800827a:	6a21      	ldr	r1, [r4, #32]
 800827c:	47b0      	blx	r6
 800827e:	1c43      	adds	r3, r0, #1
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	d106      	bne.n	8008292 <__sflush_r+0x66>
 8008284:	6829      	ldr	r1, [r5, #0]
 8008286:	291d      	cmp	r1, #29
 8008288:	d82c      	bhi.n	80082e4 <__sflush_r+0xb8>
 800828a:	4a2a      	ldr	r2, [pc, #168]	; (8008334 <__sflush_r+0x108>)
 800828c:	40ca      	lsrs	r2, r1
 800828e:	07d6      	lsls	r6, r2, #31
 8008290:	d528      	bpl.n	80082e4 <__sflush_r+0xb8>
 8008292:	2200      	movs	r2, #0
 8008294:	6062      	str	r2, [r4, #4]
 8008296:	6922      	ldr	r2, [r4, #16]
 8008298:	04d9      	lsls	r1, r3, #19
 800829a:	6022      	str	r2, [r4, #0]
 800829c:	d504      	bpl.n	80082a8 <__sflush_r+0x7c>
 800829e:	1c42      	adds	r2, r0, #1
 80082a0:	d101      	bne.n	80082a6 <__sflush_r+0x7a>
 80082a2:	682b      	ldr	r3, [r5, #0]
 80082a4:	b903      	cbnz	r3, 80082a8 <__sflush_r+0x7c>
 80082a6:	6560      	str	r0, [r4, #84]	; 0x54
 80082a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082aa:	602f      	str	r7, [r5, #0]
 80082ac:	2900      	cmp	r1, #0
 80082ae:	d0ca      	beq.n	8008246 <__sflush_r+0x1a>
 80082b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082b4:	4299      	cmp	r1, r3
 80082b6:	d002      	beq.n	80082be <__sflush_r+0x92>
 80082b8:	4628      	mov	r0, r5
 80082ba:	f7ff fae9 	bl	8007890 <_free_r>
 80082be:	2000      	movs	r0, #0
 80082c0:	6360      	str	r0, [r4, #52]	; 0x34
 80082c2:	e7c1      	b.n	8008248 <__sflush_r+0x1c>
 80082c4:	6a21      	ldr	r1, [r4, #32]
 80082c6:	2301      	movs	r3, #1
 80082c8:	4628      	mov	r0, r5
 80082ca:	47b0      	blx	r6
 80082cc:	1c41      	adds	r1, r0, #1
 80082ce:	d1c7      	bne.n	8008260 <__sflush_r+0x34>
 80082d0:	682b      	ldr	r3, [r5, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d0c4      	beq.n	8008260 <__sflush_r+0x34>
 80082d6:	2b1d      	cmp	r3, #29
 80082d8:	d001      	beq.n	80082de <__sflush_r+0xb2>
 80082da:	2b16      	cmp	r3, #22
 80082dc:	d101      	bne.n	80082e2 <__sflush_r+0xb6>
 80082de:	602f      	str	r7, [r5, #0]
 80082e0:	e7b1      	b.n	8008246 <__sflush_r+0x1a>
 80082e2:	89a3      	ldrh	r3, [r4, #12]
 80082e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082e8:	81a3      	strh	r3, [r4, #12]
 80082ea:	e7ad      	b.n	8008248 <__sflush_r+0x1c>
 80082ec:	690f      	ldr	r7, [r1, #16]
 80082ee:	2f00      	cmp	r7, #0
 80082f0:	d0a9      	beq.n	8008246 <__sflush_r+0x1a>
 80082f2:	0793      	lsls	r3, r2, #30
 80082f4:	bf18      	it	ne
 80082f6:	2300      	movne	r3, #0
 80082f8:	680e      	ldr	r6, [r1, #0]
 80082fa:	bf08      	it	eq
 80082fc:	694b      	ldreq	r3, [r1, #20]
 80082fe:	eba6 0807 	sub.w	r8, r6, r7
 8008302:	600f      	str	r7, [r1, #0]
 8008304:	608b      	str	r3, [r1, #8]
 8008306:	f1b8 0f00 	cmp.w	r8, #0
 800830a:	dd9c      	ble.n	8008246 <__sflush_r+0x1a>
 800830c:	4643      	mov	r3, r8
 800830e:	463a      	mov	r2, r7
 8008310:	4628      	mov	r0, r5
 8008312:	6a21      	ldr	r1, [r4, #32]
 8008314:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008316:	47b0      	blx	r6
 8008318:	2800      	cmp	r0, #0
 800831a:	dc06      	bgt.n	800832a <__sflush_r+0xfe>
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008326:	81a3      	strh	r3, [r4, #12]
 8008328:	e78e      	b.n	8008248 <__sflush_r+0x1c>
 800832a:	4407      	add	r7, r0
 800832c:	eba8 0800 	sub.w	r8, r8, r0
 8008330:	e7e9      	b.n	8008306 <__sflush_r+0xda>
 8008332:	bf00      	nop
 8008334:	20400001 	.word	0x20400001

08008338 <_fflush_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	690b      	ldr	r3, [r1, #16]
 800833c:	4605      	mov	r5, r0
 800833e:	460c      	mov	r4, r1
 8008340:	b913      	cbnz	r3, 8008348 <_fflush_r+0x10>
 8008342:	2500      	movs	r5, #0
 8008344:	4628      	mov	r0, r5
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	b118      	cbz	r0, 8008352 <_fflush_r+0x1a>
 800834a:	6983      	ldr	r3, [r0, #24]
 800834c:	b90b      	cbnz	r3, 8008352 <_fflush_r+0x1a>
 800834e:	f000 f887 	bl	8008460 <__sinit>
 8008352:	4b14      	ldr	r3, [pc, #80]	; (80083a4 <_fflush_r+0x6c>)
 8008354:	429c      	cmp	r4, r3
 8008356:	d11b      	bne.n	8008390 <_fflush_r+0x58>
 8008358:	686c      	ldr	r4, [r5, #4]
 800835a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0ef      	beq.n	8008342 <_fflush_r+0xa>
 8008362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008364:	07d0      	lsls	r0, r2, #31
 8008366:	d404      	bmi.n	8008372 <_fflush_r+0x3a>
 8008368:	0599      	lsls	r1, r3, #22
 800836a:	d402      	bmi.n	8008372 <_fflush_r+0x3a>
 800836c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800836e:	f000 f915 	bl	800859c <__retarget_lock_acquire_recursive>
 8008372:	4628      	mov	r0, r5
 8008374:	4621      	mov	r1, r4
 8008376:	f7ff ff59 	bl	800822c <__sflush_r>
 800837a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800837c:	4605      	mov	r5, r0
 800837e:	07da      	lsls	r2, r3, #31
 8008380:	d4e0      	bmi.n	8008344 <_fflush_r+0xc>
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	059b      	lsls	r3, r3, #22
 8008386:	d4dd      	bmi.n	8008344 <_fflush_r+0xc>
 8008388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800838a:	f000 f908 	bl	800859e <__retarget_lock_release_recursive>
 800838e:	e7d9      	b.n	8008344 <_fflush_r+0xc>
 8008390:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <_fflush_r+0x70>)
 8008392:	429c      	cmp	r4, r3
 8008394:	d101      	bne.n	800839a <_fflush_r+0x62>
 8008396:	68ac      	ldr	r4, [r5, #8]
 8008398:	e7df      	b.n	800835a <_fflush_r+0x22>
 800839a:	4b04      	ldr	r3, [pc, #16]	; (80083ac <_fflush_r+0x74>)
 800839c:	429c      	cmp	r4, r3
 800839e:	bf08      	it	eq
 80083a0:	68ec      	ldreq	r4, [r5, #12]
 80083a2:	e7da      	b.n	800835a <_fflush_r+0x22>
 80083a4:	08008ca4 	.word	0x08008ca4
 80083a8:	08008cc4 	.word	0x08008cc4
 80083ac:	08008c84 	.word	0x08008c84

080083b0 <std>:
 80083b0:	2300      	movs	r3, #0
 80083b2:	b510      	push	{r4, lr}
 80083b4:	4604      	mov	r4, r0
 80083b6:	e9c0 3300 	strd	r3, r3, [r0]
 80083ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083be:	6083      	str	r3, [r0, #8]
 80083c0:	8181      	strh	r1, [r0, #12]
 80083c2:	6643      	str	r3, [r0, #100]	; 0x64
 80083c4:	81c2      	strh	r2, [r0, #14]
 80083c6:	6183      	str	r3, [r0, #24]
 80083c8:	4619      	mov	r1, r3
 80083ca:	2208      	movs	r2, #8
 80083cc:	305c      	adds	r0, #92	; 0x5c
 80083ce:	f7fd fb8f 	bl	8005af0 <memset>
 80083d2:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <std+0x38>)
 80083d4:	6224      	str	r4, [r4, #32]
 80083d6:	6263      	str	r3, [r4, #36]	; 0x24
 80083d8:	4b04      	ldr	r3, [pc, #16]	; (80083ec <std+0x3c>)
 80083da:	62a3      	str	r3, [r4, #40]	; 0x28
 80083dc:	4b04      	ldr	r3, [pc, #16]	; (80083f0 <std+0x40>)
 80083de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083e0:	4b04      	ldr	r3, [pc, #16]	; (80083f4 <std+0x44>)
 80083e2:	6323      	str	r3, [r4, #48]	; 0x30
 80083e4:	bd10      	pop	{r4, pc}
 80083e6:	bf00      	nop
 80083e8:	08008701 	.word	0x08008701
 80083ec:	08008723 	.word	0x08008723
 80083f0:	0800875b 	.word	0x0800875b
 80083f4:	0800877f 	.word	0x0800877f

080083f8 <_cleanup_r>:
 80083f8:	4901      	ldr	r1, [pc, #4]	; (8008400 <_cleanup_r+0x8>)
 80083fa:	f000 b8af 	b.w	800855c <_fwalk_reent>
 80083fe:	bf00      	nop
 8008400:	08008339 	.word	0x08008339

08008404 <__sfmoreglue>:
 8008404:	b570      	push	{r4, r5, r6, lr}
 8008406:	2568      	movs	r5, #104	; 0x68
 8008408:	1e4a      	subs	r2, r1, #1
 800840a:	4355      	muls	r5, r2
 800840c:	460e      	mov	r6, r1
 800840e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008412:	f7ff fa89 	bl	8007928 <_malloc_r>
 8008416:	4604      	mov	r4, r0
 8008418:	b140      	cbz	r0, 800842c <__sfmoreglue+0x28>
 800841a:	2100      	movs	r1, #0
 800841c:	e9c0 1600 	strd	r1, r6, [r0]
 8008420:	300c      	adds	r0, #12
 8008422:	60a0      	str	r0, [r4, #8]
 8008424:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008428:	f7fd fb62 	bl	8005af0 <memset>
 800842c:	4620      	mov	r0, r4
 800842e:	bd70      	pop	{r4, r5, r6, pc}

08008430 <__sfp_lock_acquire>:
 8008430:	4801      	ldr	r0, [pc, #4]	; (8008438 <__sfp_lock_acquire+0x8>)
 8008432:	f000 b8b3 	b.w	800859c <__retarget_lock_acquire_recursive>
 8008436:	bf00      	nop
 8008438:	20000518 	.word	0x20000518

0800843c <__sfp_lock_release>:
 800843c:	4801      	ldr	r0, [pc, #4]	; (8008444 <__sfp_lock_release+0x8>)
 800843e:	f000 b8ae 	b.w	800859e <__retarget_lock_release_recursive>
 8008442:	bf00      	nop
 8008444:	20000518 	.word	0x20000518

08008448 <__sinit_lock_acquire>:
 8008448:	4801      	ldr	r0, [pc, #4]	; (8008450 <__sinit_lock_acquire+0x8>)
 800844a:	f000 b8a7 	b.w	800859c <__retarget_lock_acquire_recursive>
 800844e:	bf00      	nop
 8008450:	20000513 	.word	0x20000513

08008454 <__sinit_lock_release>:
 8008454:	4801      	ldr	r0, [pc, #4]	; (800845c <__sinit_lock_release+0x8>)
 8008456:	f000 b8a2 	b.w	800859e <__retarget_lock_release_recursive>
 800845a:	bf00      	nop
 800845c:	20000513 	.word	0x20000513

08008460 <__sinit>:
 8008460:	b510      	push	{r4, lr}
 8008462:	4604      	mov	r4, r0
 8008464:	f7ff fff0 	bl	8008448 <__sinit_lock_acquire>
 8008468:	69a3      	ldr	r3, [r4, #24]
 800846a:	b11b      	cbz	r3, 8008474 <__sinit+0x14>
 800846c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008470:	f7ff bff0 	b.w	8008454 <__sinit_lock_release>
 8008474:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008478:	6523      	str	r3, [r4, #80]	; 0x50
 800847a:	4b13      	ldr	r3, [pc, #76]	; (80084c8 <__sinit+0x68>)
 800847c:	4a13      	ldr	r2, [pc, #76]	; (80084cc <__sinit+0x6c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	62a2      	str	r2, [r4, #40]	; 0x28
 8008482:	42a3      	cmp	r3, r4
 8008484:	bf08      	it	eq
 8008486:	2301      	moveq	r3, #1
 8008488:	4620      	mov	r0, r4
 800848a:	bf08      	it	eq
 800848c:	61a3      	streq	r3, [r4, #24]
 800848e:	f000 f81f 	bl	80084d0 <__sfp>
 8008492:	6060      	str	r0, [r4, #4]
 8008494:	4620      	mov	r0, r4
 8008496:	f000 f81b 	bl	80084d0 <__sfp>
 800849a:	60a0      	str	r0, [r4, #8]
 800849c:	4620      	mov	r0, r4
 800849e:	f000 f817 	bl	80084d0 <__sfp>
 80084a2:	2200      	movs	r2, #0
 80084a4:	2104      	movs	r1, #4
 80084a6:	60e0      	str	r0, [r4, #12]
 80084a8:	6860      	ldr	r0, [r4, #4]
 80084aa:	f7ff ff81 	bl	80083b0 <std>
 80084ae:	2201      	movs	r2, #1
 80084b0:	2109      	movs	r1, #9
 80084b2:	68a0      	ldr	r0, [r4, #8]
 80084b4:	f7ff ff7c 	bl	80083b0 <std>
 80084b8:	2202      	movs	r2, #2
 80084ba:	2112      	movs	r1, #18
 80084bc:	68e0      	ldr	r0, [r4, #12]
 80084be:	f7ff ff77 	bl	80083b0 <std>
 80084c2:	2301      	movs	r3, #1
 80084c4:	61a3      	str	r3, [r4, #24]
 80084c6:	e7d1      	b.n	800846c <__sinit+0xc>
 80084c8:	08008900 	.word	0x08008900
 80084cc:	080083f9 	.word	0x080083f9

080084d0 <__sfp>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	4607      	mov	r7, r0
 80084d4:	f7ff ffac 	bl	8008430 <__sfp_lock_acquire>
 80084d8:	4b1e      	ldr	r3, [pc, #120]	; (8008554 <__sfp+0x84>)
 80084da:	681e      	ldr	r6, [r3, #0]
 80084dc:	69b3      	ldr	r3, [r6, #24]
 80084de:	b913      	cbnz	r3, 80084e6 <__sfp+0x16>
 80084e0:	4630      	mov	r0, r6
 80084e2:	f7ff ffbd 	bl	8008460 <__sinit>
 80084e6:	3648      	adds	r6, #72	; 0x48
 80084e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084ec:	3b01      	subs	r3, #1
 80084ee:	d503      	bpl.n	80084f8 <__sfp+0x28>
 80084f0:	6833      	ldr	r3, [r6, #0]
 80084f2:	b30b      	cbz	r3, 8008538 <__sfp+0x68>
 80084f4:	6836      	ldr	r6, [r6, #0]
 80084f6:	e7f7      	b.n	80084e8 <__sfp+0x18>
 80084f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084fc:	b9d5      	cbnz	r5, 8008534 <__sfp+0x64>
 80084fe:	4b16      	ldr	r3, [pc, #88]	; (8008558 <__sfp+0x88>)
 8008500:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008504:	60e3      	str	r3, [r4, #12]
 8008506:	6665      	str	r5, [r4, #100]	; 0x64
 8008508:	f000 f847 	bl	800859a <__retarget_lock_init_recursive>
 800850c:	f7ff ff96 	bl	800843c <__sfp_lock_release>
 8008510:	2208      	movs	r2, #8
 8008512:	4629      	mov	r1, r5
 8008514:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008518:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800851c:	6025      	str	r5, [r4, #0]
 800851e:	61a5      	str	r5, [r4, #24]
 8008520:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008524:	f7fd fae4 	bl	8005af0 <memset>
 8008528:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800852c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008530:	4620      	mov	r0, r4
 8008532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008534:	3468      	adds	r4, #104	; 0x68
 8008536:	e7d9      	b.n	80084ec <__sfp+0x1c>
 8008538:	2104      	movs	r1, #4
 800853a:	4638      	mov	r0, r7
 800853c:	f7ff ff62 	bl	8008404 <__sfmoreglue>
 8008540:	4604      	mov	r4, r0
 8008542:	6030      	str	r0, [r6, #0]
 8008544:	2800      	cmp	r0, #0
 8008546:	d1d5      	bne.n	80084f4 <__sfp+0x24>
 8008548:	f7ff ff78 	bl	800843c <__sfp_lock_release>
 800854c:	230c      	movs	r3, #12
 800854e:	603b      	str	r3, [r7, #0]
 8008550:	e7ee      	b.n	8008530 <__sfp+0x60>
 8008552:	bf00      	nop
 8008554:	08008900 	.word	0x08008900
 8008558:	ffff0001 	.word	0xffff0001

0800855c <_fwalk_reent>:
 800855c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008560:	4606      	mov	r6, r0
 8008562:	4688      	mov	r8, r1
 8008564:	2700      	movs	r7, #0
 8008566:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800856a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800856e:	f1b9 0901 	subs.w	r9, r9, #1
 8008572:	d505      	bpl.n	8008580 <_fwalk_reent+0x24>
 8008574:	6824      	ldr	r4, [r4, #0]
 8008576:	2c00      	cmp	r4, #0
 8008578:	d1f7      	bne.n	800856a <_fwalk_reent+0xe>
 800857a:	4638      	mov	r0, r7
 800857c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008580:	89ab      	ldrh	r3, [r5, #12]
 8008582:	2b01      	cmp	r3, #1
 8008584:	d907      	bls.n	8008596 <_fwalk_reent+0x3a>
 8008586:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800858a:	3301      	adds	r3, #1
 800858c:	d003      	beq.n	8008596 <_fwalk_reent+0x3a>
 800858e:	4629      	mov	r1, r5
 8008590:	4630      	mov	r0, r6
 8008592:	47c0      	blx	r8
 8008594:	4307      	orrs	r7, r0
 8008596:	3568      	adds	r5, #104	; 0x68
 8008598:	e7e9      	b.n	800856e <_fwalk_reent+0x12>

0800859a <__retarget_lock_init_recursive>:
 800859a:	4770      	bx	lr

0800859c <__retarget_lock_acquire_recursive>:
 800859c:	4770      	bx	lr

0800859e <__retarget_lock_release_recursive>:
 800859e:	4770      	bx	lr

080085a0 <__swhatbuf_r>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	460e      	mov	r6, r1
 80085a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a8:	4614      	mov	r4, r2
 80085aa:	2900      	cmp	r1, #0
 80085ac:	461d      	mov	r5, r3
 80085ae:	b096      	sub	sp, #88	; 0x58
 80085b0:	da07      	bge.n	80085c2 <__swhatbuf_r+0x22>
 80085b2:	2300      	movs	r3, #0
 80085b4:	602b      	str	r3, [r5, #0]
 80085b6:	89b3      	ldrh	r3, [r6, #12]
 80085b8:	061a      	lsls	r2, r3, #24
 80085ba:	d410      	bmi.n	80085de <__swhatbuf_r+0x3e>
 80085bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085c0:	e00e      	b.n	80085e0 <__swhatbuf_r+0x40>
 80085c2:	466a      	mov	r2, sp
 80085c4:	f000 f902 	bl	80087cc <_fstat_r>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	dbf2      	blt.n	80085b2 <__swhatbuf_r+0x12>
 80085cc:	9a01      	ldr	r2, [sp, #4]
 80085ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085d6:	425a      	negs	r2, r3
 80085d8:	415a      	adcs	r2, r3
 80085da:	602a      	str	r2, [r5, #0]
 80085dc:	e7ee      	b.n	80085bc <__swhatbuf_r+0x1c>
 80085de:	2340      	movs	r3, #64	; 0x40
 80085e0:	2000      	movs	r0, #0
 80085e2:	6023      	str	r3, [r4, #0]
 80085e4:	b016      	add	sp, #88	; 0x58
 80085e6:	bd70      	pop	{r4, r5, r6, pc}

080085e8 <__smakebuf_r>:
 80085e8:	898b      	ldrh	r3, [r1, #12]
 80085ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085ec:	079d      	lsls	r5, r3, #30
 80085ee:	4606      	mov	r6, r0
 80085f0:	460c      	mov	r4, r1
 80085f2:	d507      	bpl.n	8008604 <__smakebuf_r+0x1c>
 80085f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	6123      	str	r3, [r4, #16]
 80085fc:	2301      	movs	r3, #1
 80085fe:	6163      	str	r3, [r4, #20]
 8008600:	b002      	add	sp, #8
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	466a      	mov	r2, sp
 8008606:	ab01      	add	r3, sp, #4
 8008608:	f7ff ffca 	bl	80085a0 <__swhatbuf_r>
 800860c:	9900      	ldr	r1, [sp, #0]
 800860e:	4605      	mov	r5, r0
 8008610:	4630      	mov	r0, r6
 8008612:	f7ff f989 	bl	8007928 <_malloc_r>
 8008616:	b948      	cbnz	r0, 800862c <__smakebuf_r+0x44>
 8008618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800861c:	059a      	lsls	r2, r3, #22
 800861e:	d4ef      	bmi.n	8008600 <__smakebuf_r+0x18>
 8008620:	f023 0303 	bic.w	r3, r3, #3
 8008624:	f043 0302 	orr.w	r3, r3, #2
 8008628:	81a3      	strh	r3, [r4, #12]
 800862a:	e7e3      	b.n	80085f4 <__smakebuf_r+0xc>
 800862c:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <__smakebuf_r+0x7c>)
 800862e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008630:	89a3      	ldrh	r3, [r4, #12]
 8008632:	6020      	str	r0, [r4, #0]
 8008634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008638:	81a3      	strh	r3, [r4, #12]
 800863a:	9b00      	ldr	r3, [sp, #0]
 800863c:	6120      	str	r0, [r4, #16]
 800863e:	6163      	str	r3, [r4, #20]
 8008640:	9b01      	ldr	r3, [sp, #4]
 8008642:	b15b      	cbz	r3, 800865c <__smakebuf_r+0x74>
 8008644:	4630      	mov	r0, r6
 8008646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800864a:	f000 f8d1 	bl	80087f0 <_isatty_r>
 800864e:	b128      	cbz	r0, 800865c <__smakebuf_r+0x74>
 8008650:	89a3      	ldrh	r3, [r4, #12]
 8008652:	f023 0303 	bic.w	r3, r3, #3
 8008656:	f043 0301 	orr.w	r3, r3, #1
 800865a:	81a3      	strh	r3, [r4, #12]
 800865c:	89a0      	ldrh	r0, [r4, #12]
 800865e:	4305      	orrs	r5, r0
 8008660:	81a5      	strh	r5, [r4, #12]
 8008662:	e7cd      	b.n	8008600 <__smakebuf_r+0x18>
 8008664:	080083f9 	.word	0x080083f9

08008668 <_malloc_usable_size_r>:
 8008668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800866c:	1f18      	subs	r0, r3, #4
 800866e:	2b00      	cmp	r3, #0
 8008670:	bfbc      	itt	lt
 8008672:	580b      	ldrlt	r3, [r1, r0]
 8008674:	18c0      	addlt	r0, r0, r3
 8008676:	4770      	bx	lr

08008678 <_raise_r>:
 8008678:	291f      	cmp	r1, #31
 800867a:	b538      	push	{r3, r4, r5, lr}
 800867c:	4604      	mov	r4, r0
 800867e:	460d      	mov	r5, r1
 8008680:	d904      	bls.n	800868c <_raise_r+0x14>
 8008682:	2316      	movs	r3, #22
 8008684:	6003      	str	r3, [r0, #0]
 8008686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800868a:	bd38      	pop	{r3, r4, r5, pc}
 800868c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800868e:	b112      	cbz	r2, 8008696 <_raise_r+0x1e>
 8008690:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008694:	b94b      	cbnz	r3, 80086aa <_raise_r+0x32>
 8008696:	4620      	mov	r0, r4
 8008698:	f000 f830 	bl	80086fc <_getpid_r>
 800869c:	462a      	mov	r2, r5
 800869e:	4601      	mov	r1, r0
 80086a0:	4620      	mov	r0, r4
 80086a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086a6:	f000 b817 	b.w	80086d8 <_kill_r>
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d00a      	beq.n	80086c4 <_raise_r+0x4c>
 80086ae:	1c59      	adds	r1, r3, #1
 80086b0:	d103      	bne.n	80086ba <_raise_r+0x42>
 80086b2:	2316      	movs	r3, #22
 80086b4:	6003      	str	r3, [r0, #0]
 80086b6:	2001      	movs	r0, #1
 80086b8:	e7e7      	b.n	800868a <_raise_r+0x12>
 80086ba:	2400      	movs	r4, #0
 80086bc:	4628      	mov	r0, r5
 80086be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80086c2:	4798      	blx	r3
 80086c4:	2000      	movs	r0, #0
 80086c6:	e7e0      	b.n	800868a <_raise_r+0x12>

080086c8 <raise>:
 80086c8:	4b02      	ldr	r3, [pc, #8]	; (80086d4 <raise+0xc>)
 80086ca:	4601      	mov	r1, r0
 80086cc:	6818      	ldr	r0, [r3, #0]
 80086ce:	f7ff bfd3 	b.w	8008678 <_raise_r>
 80086d2:	bf00      	nop
 80086d4:	2000010c 	.word	0x2000010c

080086d8 <_kill_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	2300      	movs	r3, #0
 80086dc:	4d06      	ldr	r5, [pc, #24]	; (80086f8 <_kill_r+0x20>)
 80086de:	4604      	mov	r4, r0
 80086e0:	4608      	mov	r0, r1
 80086e2:	4611      	mov	r1, r2
 80086e4:	602b      	str	r3, [r5, #0]
 80086e6:	f7fa f922 	bl	800292e <_kill>
 80086ea:	1c43      	adds	r3, r0, #1
 80086ec:	d102      	bne.n	80086f4 <_kill_r+0x1c>
 80086ee:	682b      	ldr	r3, [r5, #0]
 80086f0:	b103      	cbz	r3, 80086f4 <_kill_r+0x1c>
 80086f2:	6023      	str	r3, [r4, #0]
 80086f4:	bd38      	pop	{r3, r4, r5, pc}
 80086f6:	bf00      	nop
 80086f8:	2000050c 	.word	0x2000050c

080086fc <_getpid_r>:
 80086fc:	f7fa b910 	b.w	8002920 <_getpid>

08008700 <__sread>:
 8008700:	b510      	push	{r4, lr}
 8008702:	460c      	mov	r4, r1
 8008704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008708:	f000 f894 	bl	8008834 <_read_r>
 800870c:	2800      	cmp	r0, #0
 800870e:	bfab      	itete	ge
 8008710:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008712:	89a3      	ldrhlt	r3, [r4, #12]
 8008714:	181b      	addge	r3, r3, r0
 8008716:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800871a:	bfac      	ite	ge
 800871c:	6563      	strge	r3, [r4, #84]	; 0x54
 800871e:	81a3      	strhlt	r3, [r4, #12]
 8008720:	bd10      	pop	{r4, pc}

08008722 <__swrite>:
 8008722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008726:	461f      	mov	r7, r3
 8008728:	898b      	ldrh	r3, [r1, #12]
 800872a:	4605      	mov	r5, r0
 800872c:	05db      	lsls	r3, r3, #23
 800872e:	460c      	mov	r4, r1
 8008730:	4616      	mov	r6, r2
 8008732:	d505      	bpl.n	8008740 <__swrite+0x1e>
 8008734:	2302      	movs	r3, #2
 8008736:	2200      	movs	r2, #0
 8008738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800873c:	f000 f868 	bl	8008810 <_lseek_r>
 8008740:	89a3      	ldrh	r3, [r4, #12]
 8008742:	4632      	mov	r2, r6
 8008744:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008748:	81a3      	strh	r3, [r4, #12]
 800874a:	4628      	mov	r0, r5
 800874c:	463b      	mov	r3, r7
 800874e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008756:	f000 b817 	b.w	8008788 <_write_r>

0800875a <__sseek>:
 800875a:	b510      	push	{r4, lr}
 800875c:	460c      	mov	r4, r1
 800875e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008762:	f000 f855 	bl	8008810 <_lseek_r>
 8008766:	1c43      	adds	r3, r0, #1
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	bf15      	itete	ne
 800876c:	6560      	strne	r0, [r4, #84]	; 0x54
 800876e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008772:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008776:	81a3      	strheq	r3, [r4, #12]
 8008778:	bf18      	it	ne
 800877a:	81a3      	strhne	r3, [r4, #12]
 800877c:	bd10      	pop	{r4, pc}

0800877e <__sclose>:
 800877e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008782:	f000 b813 	b.w	80087ac <_close_r>
	...

08008788 <_write_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4604      	mov	r4, r0
 800878c:	4608      	mov	r0, r1
 800878e:	4611      	mov	r1, r2
 8008790:	2200      	movs	r2, #0
 8008792:	4d05      	ldr	r5, [pc, #20]	; (80087a8 <_write_r+0x20>)
 8008794:	602a      	str	r2, [r5, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	f7fa f900 	bl	800299c <_write>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_write_r+0x1e>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_write_r+0x1e>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	2000050c 	.word	0x2000050c

080087ac <_close_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	2300      	movs	r3, #0
 80087b0:	4d05      	ldr	r5, [pc, #20]	; (80087c8 <_close_r+0x1c>)
 80087b2:	4604      	mov	r4, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	602b      	str	r3, [r5, #0]
 80087b8:	f7fa f90c 	bl	80029d4 <_close>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_close_r+0x1a>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_close_r+0x1a>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	2000050c 	.word	0x2000050c

080087cc <_fstat_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	2300      	movs	r3, #0
 80087d0:	4d06      	ldr	r5, [pc, #24]	; (80087ec <_fstat_r+0x20>)
 80087d2:	4604      	mov	r4, r0
 80087d4:	4608      	mov	r0, r1
 80087d6:	4611      	mov	r1, r2
 80087d8:	602b      	str	r3, [r5, #0]
 80087da:	f7fa f906 	bl	80029ea <_fstat>
 80087de:	1c43      	adds	r3, r0, #1
 80087e0:	d102      	bne.n	80087e8 <_fstat_r+0x1c>
 80087e2:	682b      	ldr	r3, [r5, #0]
 80087e4:	b103      	cbz	r3, 80087e8 <_fstat_r+0x1c>
 80087e6:	6023      	str	r3, [r4, #0]
 80087e8:	bd38      	pop	{r3, r4, r5, pc}
 80087ea:	bf00      	nop
 80087ec:	2000050c 	.word	0x2000050c

080087f0 <_isatty_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	2300      	movs	r3, #0
 80087f4:	4d05      	ldr	r5, [pc, #20]	; (800880c <_isatty_r+0x1c>)
 80087f6:	4604      	mov	r4, r0
 80087f8:	4608      	mov	r0, r1
 80087fa:	602b      	str	r3, [r5, #0]
 80087fc:	f7fa f904 	bl	8002a08 <_isatty>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d102      	bne.n	800880a <_isatty_r+0x1a>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	b103      	cbz	r3, 800880a <_isatty_r+0x1a>
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	2000050c 	.word	0x2000050c

08008810 <_lseek_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4604      	mov	r4, r0
 8008814:	4608      	mov	r0, r1
 8008816:	4611      	mov	r1, r2
 8008818:	2200      	movs	r2, #0
 800881a:	4d05      	ldr	r5, [pc, #20]	; (8008830 <_lseek_r+0x20>)
 800881c:	602a      	str	r2, [r5, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	f7fa f8fc 	bl	8002a1c <_lseek>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d102      	bne.n	800882e <_lseek_r+0x1e>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	b103      	cbz	r3, 800882e <_lseek_r+0x1e>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	2000050c 	.word	0x2000050c

08008834 <_read_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4604      	mov	r4, r0
 8008838:	4608      	mov	r0, r1
 800883a:	4611      	mov	r1, r2
 800883c:	2200      	movs	r2, #0
 800883e:	4d05      	ldr	r5, [pc, #20]	; (8008854 <_read_r+0x20>)
 8008840:	602a      	str	r2, [r5, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	f7fa f88d 	bl	8002962 <_read>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	d102      	bne.n	8008852 <_read_r+0x1e>
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	b103      	cbz	r3, 8008852 <_read_r+0x1e>
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	2000050c 	.word	0x2000050c

08008858 <_init>:
 8008858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885a:	bf00      	nop
 800885c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800885e:	bc08      	pop	{r3}
 8008860:	469e      	mov	lr, r3
 8008862:	4770      	bx	lr

08008864 <_fini>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	bf00      	nop
 8008868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800886a:	bc08      	pop	{r3}
 800886c:	469e      	mov	lr, r3
 800886e:	4770      	bx	lr
