
tank_level_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08005900  08005900  00015900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d2c  08005d2c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08005d2c  08005d2c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d2c  08005d2c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d2c  08005d2c  00015d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d30  08005d30  00015d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08005d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  200001e0  08005f14  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08005f14  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a80f  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b4a  00000000  00000000  0002aa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002c568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002d010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185cb  00000000  00000000  0002d9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa79  00000000  00000000  00045fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e46  00000000  00000000  00050a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da86a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d08  00000000  00000000  000da8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080058e4 	.word	0x080058e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080058e4 	.word	0x080058e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <DWT_Delay_Init>:

/* private functions prototypes */
/**
 * @brief DWT Cortex Tick counter for Microsecond delay
 */
static uint32_t DWT_Delay_Init(void) {
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <DWT_Delay_Init+0x58>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	4a13      	ldr	r2, [pc, #76]	; (8000b80 <DWT_Delay_Init+0x58>)
 8000b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b36:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <DWT_Delay_Init+0x58>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <DWT_Delay_Init+0x58>)
 8000b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b42:	60d3      	str	r3, [r2, #12]
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <DWT_Delay_Init+0x5c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <DWT_Delay_Init+0x5c>)
 8000b4a:	f023 0301 	bic.w	r3, r3, #1
 8000b4e:	6013      	str	r3, [r2, #0]
  /* Enable clock cycle counter */
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <DWT_Delay_Init+0x5c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0b      	ldr	r2, [pc, #44]	; (8000b84 <DWT_Delay_Init+0x5c>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6013      	str	r3, [r2, #0]
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <DWT_Delay_Init+0x5c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  /* 3 NO OPERATION instructions */
  __NOP();
 8000b62:	bf00      	nop
  __NOP();
 8000b64:	bf00      	nop
  __NOP();
 8000b66:	bf00      	nop
  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <DWT_Delay_Init+0x5c>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <DWT_Delay_Init+0x4c>
  {
    return 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	e000      	b.n	8000b76 <DWT_Delay_Init+0x4e>
  }
  else
  {
    return 1;
 8000b74:	2301      	movs	r3, #1
  }
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000edf0 	.word	0xe000edf0
 8000b84:	e0001000 	.word	0xe0001000

08000b88 <DWT_Delay_us>:

__STATIC_INLINE void DWT_Delay_us(volatile uint32_t usec)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <DWT_Delay_us+0x40>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	60fb      	str	r3, [r7, #12]
 usec *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000b96:	f001 fcfd 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <DWT_Delay_us+0x44>)
 8000b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba2:	0c9b      	lsrs	r3, r3, #18
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	fb02 f303 	mul.w	r3, r2, r3
 8000baa:	607b      	str	r3, [r7, #4]
 while ((DWT->CYCCNT - clk_cycle_start) < usec);
 8000bac:	bf00      	nop
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <DWT_Delay_us+0x40>)
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	1ad2      	subs	r2, r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d3f8      	bcc.n	8000bae <DWT_Delay_us+0x26>
}
 8000bbc:	bf00      	nop
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e0001000 	.word	0xe0001000
 8000bcc:	431bde83 	.word	0x431bde83

08000bd0 <lcd16x2_enablePulse>:

/**
 * @brief Enable Pulse function
 */
static void lcd16x2_enablePulse(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <lcd16x2_enablePulse+0x34>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <lcd16x2_enablePulse+0x38>)
 8000bda:	8811      	ldrh	r1, [r2, #0]
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 f8dd 	bl	8001d9e <HAL_GPIO_WritePin>
  DWT_Delay_us(T_CONST);
 8000be4:	2014      	movs	r0, #20
 8000be6:	f7ff ffcf 	bl	8000b88 <DWT_Delay_us>
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <lcd16x2_enablePulse+0x34>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <lcd16x2_enablePulse+0x38>)
 8000bf0:	8811      	ldrh	r1, [r2, #0]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 f8d2 	bl	8001d9e <HAL_GPIO_WritePin>
  DWT_Delay_us(60);
 8000bfa:	203c      	movs	r0, #60	; 0x3c
 8000bfc:	f7ff ffc4 	bl	8000b88 <DWT_Delay_us>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200001fc 	.word	0x200001fc
 8000c08:	20000202 	.word	0x20000202

08000c0c <lcd16x2_rs>:

/**
 * @brief RS control
 */
static void lcd16x2_rs(bool state)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, (GPIO_PinState)state);
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <lcd16x2_rs+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <lcd16x2_rs+0x28>)
 8000c1c:	8811      	ldrh	r1, [r2, #0]
 8000c1e:	79fa      	ldrb	r2, [r7, #7]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 f8bc 	bl	8001d9e <HAL_GPIO_WritePin>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001fc 	.word	0x200001fc
 8000c34:	20000200 	.word	0x20000200

08000c38 <lcd16x2_write>:

/**
 * @brief Write parallel signal to lcd
 */
static void lcd16x2_write(uint8_t wbyte)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  uint8_t LSB_nibble = wbyte&0xF, MSB_nibble = (wbyte>>4)&0xF;
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 030f 	and.w	r3, r3, #15
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	091b      	lsrs	r3, r3, #4
 8000c4e:	73bb      	strb	r3, [r7, #14]
  if(is8BitsMode)
 8000c50:	4b5f      	ldr	r3, [pc, #380]	; (8000dd0 <lcd16x2_write+0x198>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d05a      	beq.n	8000d0e <lcd16x2_write+0xd6>
  {
    //LSB data
    HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000c58:	4b5e      	ldr	r3, [pc, #376]	; (8000dd4 <lcd16x2_write+0x19c>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	4b5e      	ldr	r3, [pc, #376]	; (8000dd8 <lcd16x2_write+0x1a0>)
 8000c5e:	8819      	ldrh	r1, [r3, #0]
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	f001 f898 	bl	8001d9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000c6e:	4b59      	ldr	r3, [pc, #356]	; (8000dd4 <lcd16x2_write+0x19c>)
 8000c70:	6818      	ldr	r0, [r3, #0]
 8000c72:	4b5a      	ldr	r3, [pc, #360]	; (8000ddc <lcd16x2_write+0x1a4>)
 8000c74:	8819      	ldrh	r1, [r3, #0]
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f001 f88d 	bl	8001d9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000c84:	4b53      	ldr	r3, [pc, #332]	; (8000dd4 <lcd16x2_write+0x19c>)
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	4b55      	ldr	r3, [pc, #340]	; (8000de0 <lcd16x2_write+0x1a8>)
 8000c8a:	8819      	ldrh	r1, [r3, #0]
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	f001 f882 	bl	8001d9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000c9a:	4b4e      	ldr	r3, [pc, #312]	; (8000dd4 <lcd16x2_write+0x19c>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	4b51      	ldr	r3, [pc, #324]	; (8000de4 <lcd16x2_write+0x1ac>)
 8000ca0:	8819      	ldrh	r1, [r3, #0]
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	f003 0308 	and.w	r3, r3, #8
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	461a      	mov	r2, r3
 8000cac:	f001 f877 	bl	8001d9e <HAL_GPIO_WritePin>
    //MSB data
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000cb0:	4b4d      	ldr	r3, [pc, #308]	; (8000de8 <lcd16x2_write+0x1b0>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <lcd16x2_write+0x1b4>)
 8000cb6:	8819      	ldrh	r1, [r3, #0]
 8000cb8:	7bbb      	ldrb	r3, [r7, #14]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	f001 f86c 	bl	8001d9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000cc6:	4b48      	ldr	r3, [pc, #288]	; (8000de8 <lcd16x2_write+0x1b0>)
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	4b49      	ldr	r3, [pc, #292]	; (8000df0 <lcd16x2_write+0x1b8>)
 8000ccc:	8819      	ldrh	r1, [r3, #0]
 8000cce:	7bbb      	ldrb	r3, [r7, #14]
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	f001 f861 	bl	8001d9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000cdc:	4b42      	ldr	r3, [pc, #264]	; (8000de8 <lcd16x2_write+0x1b0>)
 8000cde:	6818      	ldr	r0, [r3, #0]
 8000ce0:	4b44      	ldr	r3, [pc, #272]	; (8000df4 <lcd16x2_write+0x1bc>)
 8000ce2:	8819      	ldrh	r1, [r3, #0]
 8000ce4:	7bbb      	ldrb	r3, [r7, #14]
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	461a      	mov	r2, r3
 8000cee:	f001 f856 	bl	8001d9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000cf2:	4b3d      	ldr	r3, [pc, #244]	; (8000de8 <lcd16x2_write+0x1b0>)
 8000cf4:	6818      	ldr	r0, [r3, #0]
 8000cf6:	4b40      	ldr	r3, [pc, #256]	; (8000df8 <lcd16x2_write+0x1c0>)
 8000cf8:	8819      	ldrh	r1, [r3, #0]
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	461a      	mov	r2, r3
 8000d04:	f001 f84b 	bl	8001d9e <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000d08:	f7ff ff62 	bl	8000bd0 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
    lcd16x2_enablePulse();
  }
}
 8000d0c:	e05b      	b.n	8000dc6 <lcd16x2_write+0x18e>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 8000d0e:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <lcd16x2_write+0x1b0>)
 8000d10:	6818      	ldr	r0, [r3, #0]
 8000d12:	4b36      	ldr	r3, [pc, #216]	; (8000dec <lcd16x2_write+0x1b4>)
 8000d14:	8819      	ldrh	r1, [r3, #0]
 8000d16:	7bbb      	ldrb	r3, [r7, #14]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	f001 f83d 	bl	8001d9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8000d24:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <lcd16x2_write+0x1b0>)
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <lcd16x2_write+0x1b8>)
 8000d2a:	8819      	ldrh	r1, [r3, #0]
 8000d2c:	7bbb      	ldrb	r3, [r7, #14]
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	461a      	mov	r2, r3
 8000d36:	f001 f832 	bl	8001d9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <lcd16x2_write+0x1b0>)
 8000d3c:	6818      	ldr	r0, [r3, #0]
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <lcd16x2_write+0x1bc>)
 8000d40:	8819      	ldrh	r1, [r3, #0]
 8000d42:	7bbb      	ldrb	r3, [r7, #14]
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	f001 f827 	bl	8001d9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8000d50:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <lcd16x2_write+0x1b0>)
 8000d52:	6818      	ldr	r0, [r3, #0]
 8000d54:	4b28      	ldr	r3, [pc, #160]	; (8000df8 <lcd16x2_write+0x1c0>)
 8000d56:	8819      	ldrh	r1, [r3, #0]
 8000d58:	7bbb      	ldrb	r3, [r7, #14]
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	f001 f81c 	bl	8001d9e <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000d66:	f7ff ff33 	bl	8000bd0 <lcd16x2_enablePulse>
    HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <lcd16x2_write+0x1b0>)
 8000d6c:	6818      	ldr	r0, [r3, #0]
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <lcd16x2_write+0x1b4>)
 8000d70:	8819      	ldrh	r1, [r3, #0]
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f001 f80f 	bl	8001d9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <lcd16x2_write+0x1b0>)
 8000d82:	6818      	ldr	r0, [r3, #0]
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <lcd16x2_write+0x1b8>)
 8000d86:	8819      	ldrh	r1, [r3, #0]
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	f001 f804 	bl	8001d9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <lcd16x2_write+0x1b0>)
 8000d98:	6818      	ldr	r0, [r3, #0]
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <lcd16x2_write+0x1bc>)
 8000d9c:	8819      	ldrh	r1, [r3, #0]
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	461a      	mov	r2, r3
 8000da8:	f000 fff9 	bl	8001d9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <lcd16x2_write+0x1b0>)
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <lcd16x2_write+0x1c0>)
 8000db2:	8819      	ldrh	r1, [r3, #0]
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	f000 ffee 	bl	8001d9e <HAL_GPIO_WritePin>
    lcd16x2_enablePulse();
 8000dc2:	f7ff ff05 	bl	8000bd0 <lcd16x2_enablePulse>
}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000204 	.word	0x20000204
 8000dd8:	20000208 	.word	0x20000208
 8000ddc:	2000020a 	.word	0x2000020a
 8000de0:	2000020c 	.word	0x2000020c
 8000de4:	2000020e 	.word	0x2000020e
 8000de8:	20000210 	.word	0x20000210
 8000dec:	20000214 	.word	0x20000214
 8000df0:	20000216 	.word	0x20000216
 8000df4:	20000218 	.word	0x20000218
 8000df8:	2000021a 	.word	0x2000021a

08000dfc <lcd16x2_writeCommand>:

/**
 * @brief Write command
 */
static void lcd16x2_writeCommand(uint8_t cmd)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff ff00 	bl	8000c0c <lcd16x2_rs>
  lcd16x2_write(cmd);
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff12 	bl	8000c38 <lcd16x2_write>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <lcd16x2_writeData>:

/**
 * @brief Write data
 */
static void lcd16x2_writeData(uint8_t data)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(true);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f7ff fef0 	bl	8000c0c <lcd16x2_rs>
  lcd16x2_write(data);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff02 	bl	8000c38 <lcd16x2_write>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <lcd16x2_write4>:

/**
 * @brief 4-bits write
 */
static void lcd16x2_write4(uint8_t nib)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  nib &= 0xF;
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 030f 	and.w	r3, r3, #15
 8000e4c:	71fb      	strb	r3, [r7, #7]
  lcd16x2_rs(false);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fedc 	bl	8000c0c <lcd16x2_rs>
  //LSB data
  HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(nib&0x1));
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <lcd16x2_write4+0x7c>)
 8000e56:	6818      	ldr	r0, [r3, #0]
 8000e58:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <lcd16x2_write4+0x80>)
 8000e5a:	8819      	ldrh	r1, [r3, #0]
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	461a      	mov	r2, r3
 8000e66:	f000 ff9a 	bl	8001d9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(nib&0x2));
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <lcd16x2_write4+0x7c>)
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <lcd16x2_write4+0x84>)
 8000e70:	8819      	ldrh	r1, [r3, #0]
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	f000 ff8f 	bl	8001d9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(nib&0x4));
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <lcd16x2_write4+0x7c>)
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <lcd16x2_write4+0x88>)
 8000e86:	8819      	ldrh	r1, [r3, #0]
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	461a      	mov	r2, r3
 8000e92:	f000 ff84 	bl	8001d9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(nib&0x8));
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <lcd16x2_write4+0x7c>)
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <lcd16x2_write4+0x8c>)
 8000e9c:	8819      	ldrh	r1, [r3, #0]
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 0308 	and.w	r3, r3, #8
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	f000 ff79 	bl	8001d9e <HAL_GPIO_WritePin>
  lcd16x2_enablePulse();
 8000eac:	f7ff fe90 	bl	8000bd0 <lcd16x2_enablePulse>
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000210 	.word	0x20000210
 8000ebc:	20000214 	.word	0x20000214
 8000ec0:	20000216 	.word	0x20000216
 8000ec4:	20000218 	.word	0x20000218
 8000ec8:	2000021a 	.word	0x2000021a

08000ecc <lcd16x2_init_4bits>:
 * @param[in] x_pin GPIO pin (e.g. GPIO_PIN_1)
 */
void lcd16x2_init_4bits(
    GPIO_TypeDef* port_rs_e, uint16_t rs_pin, uint16_t e_pin,
    GPIO_TypeDef* port_4_7, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	817b      	strh	r3, [r7, #10]
 8000eda:	4613      	mov	r3, r2
 8000edc:	813b      	strh	r3, [r7, #8]
  DWT_Delay_Init();
 8000ede:	f7ff fe23 	bl	8000b28 <DWT_Delay_Init>
  //Set GPIO Ports and Pins data
  PORT_RS_and_E = port_rs_e;
 8000ee2:	4a24      	ldr	r2, [pc, #144]	; (8000f74 <lcd16x2_init_4bits+0xa8>)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8000ee8:	4a23      	ldr	r2, [pc, #140]	; (8000f78 <lcd16x2_init_4bits+0xac>)
 8000eea:	897b      	ldrh	r3, [r7, #10]
 8000eec:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 8000eee:	4a23      	ldr	r2, [pc, #140]	; (8000f7c <lcd16x2_init_4bits+0xb0>)
 8000ef0:	893b      	ldrh	r3, [r7, #8]
 8000ef2:	8013      	strh	r3, [r2, #0]
  PORT_MSB = port_4_7;
 8000ef4:	4a22      	ldr	r2, [pc, #136]	; (8000f80 <lcd16x2_init_4bits+0xb4>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8000efa:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <lcd16x2_init_4bits+0xb8>)
 8000efc:	8b3b      	ldrh	r3, [r7, #24]
 8000efe:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 8000f00:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <lcd16x2_init_4bits+0xbc>)
 8000f02:	8bbb      	ldrh	r3, [r7, #28]
 8000f04:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8000f06:	4a21      	ldr	r2, [pc, #132]	; (8000f8c <lcd16x2_init_4bits+0xc0>)
 8000f08:	8c3b      	ldrh	r3, [r7, #32]
 8000f0a:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8000f0c:	4a20      	ldr	r2, [pc, #128]	; (8000f90 <lcd16x2_init_4bits+0xc4>)
 8000f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f10:	8013      	strh	r3, [r2, #0]
  is8BitsMode = false;
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <lcd16x2_init_4bits+0xc8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
  FunctionSet = 0x28;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <lcd16x2_init_4bits+0xcc>)
 8000f1a:	2228      	movs	r2, #40	; 0x28
 8000f1c:	701a      	strb	r2, [r3, #0]

  //Initialise LCD
  //1. Wait at least 15ms
  LCD_MS_DELAY(20);
 8000f1e:	2014      	movs	r0, #20
 8000f20:	f000 fc9a 	bl	8001858 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_write4(0x3);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f7ff ff89 	bl	8000e3c <lcd16x2_write4>
  LCD_MS_DELAY(5);
 8000f2a:	2005      	movs	r0, #5
 8000f2c:	f000 fc94 	bl	8001858 <HAL_Delay>
  lcd16x2_write4(0x3);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f7ff ff83 	bl	8000e3c <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 fc8e 	bl	8001858 <HAL_Delay>
  lcd16x2_write4(0x3);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f7ff ff7d 	bl	8000e3c <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000f42:	2001      	movs	r0, #1
 8000f44:	f000 fc88 	bl	8001858 <HAL_Delay>
  lcd16x2_write4(0x2);  //4 bit mode
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f7ff ff77 	bl	8000e3c <lcd16x2_write4>
  LCD_MS_DELAY(1);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f000 fc82 	bl	8001858 <HAL_Delay>
  //4. Function set; Enable 2 lines, Data length to 4 bits
  lcd16x2_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000f54:	2028      	movs	r0, #40	; 0x28
 8000f56:	f7ff ff51 	bl	8000dfc <lcd16x2_writeCommand>
  //3. Display control (Display ON, Cursor ON, blink cursor)
  lcd16x2_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f7ff ff4e 	bl	8000dfc <lcd16x2_writeCommand>
  //4. Clear LCD and return home
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff ff4b 	bl	8000dfc <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 8000f66:	2003      	movs	r0, #3
 8000f68:	f000 fc76 	bl	8001858 <HAL_Delay>
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200001fc 	.word	0x200001fc
 8000f78:	20000200 	.word	0x20000200
 8000f7c:	20000202 	.word	0x20000202
 8000f80:	20000210 	.word	0x20000210
 8000f84:	20000214 	.word	0x20000214
 8000f88:	20000216 	.word	0x20000216
 8000f8c:	20000218 	.word	0x20000218
 8000f90:	2000021a 	.word	0x2000021a
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000002 	.word	0x20000002

08000f9c <lcd16x2_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_setCursor(uint8_t row, uint8_t col)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000fac:	79bb      	ldrb	r3, [r7, #6]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d108      	bne.n	8000fcc <lcd16x2_setCursor+0x30>
  {
    maskData |= (0x80);
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fc0:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff19 	bl	8000dfc <lcd16x2_writeCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_writeCommand(maskData);
  }
}
 8000fca:	e007      	b.n	8000fdc <lcd16x2_setCursor+0x40>
    maskData |= (0xc0);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000fd2:	73fb      	strb	r3, [r7, #15]
    lcd16x2_writeCommand(maskData);
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff10 	bl	8000dfc <lcd16x2_writeCommand>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <lcd16x2_1stLine>:
/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_1stLine(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(0,0);
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2000      	movs	r0, #0
 8000fec:	f7ff ffd6 	bl	8000f9c <lcd16x2_setCursor>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <lcd16x2_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_2ndLine(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  lcd16x2_setCursor(1,0);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f7ff ffce 	bl	8000f9c <lcd16x2_setCursor>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <lcd16x2_cursorShow>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_cursorShow(bool state)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if(state)
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00c      	beq.n	800102e <lcd16x2_cursorShow+0x2a>
  {
    DisplayControl |= (0x03);
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <lcd16x2_cursorShow+0x4c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	f043 0303 	orr.w	r3, r3, #3
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <lcd16x2_cursorShow+0x4c>)
 8001020:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <lcd16x2_cursorShow+0x4c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fee8 	bl	8000dfc <lcd16x2_writeCommand>
  else
  {
    DisplayControl &= ~(0x03);
    lcd16x2_writeCommand(DisplayControl);
  }
}
 800102c:	e00b      	b.n	8001046 <lcd16x2_cursorShow+0x42>
    DisplayControl &= ~(0x03);
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <lcd16x2_cursorShow+0x4c>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	f023 0303 	bic.w	r3, r3, #3
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <lcd16x2_cursorShow+0x4c>)
 800103a:	701a      	strb	r2, [r3, #0]
    lcd16x2_writeCommand(DisplayControl);
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <lcd16x2_cursorShow+0x4c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fedb 	bl	8000dfc <lcd16x2_writeCommand>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000001 	.word	0x20000001

08001054 <lcd16x2_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_clear(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  lcd16x2_writeCommand(LCD_CLEARDISPLAY);
 8001058:	2001      	movs	r0, #1
 800105a:	f7ff fecf 	bl	8000dfc <lcd16x2_writeCommand>
  LCD_MS_DELAY(3);
 800105e:	2003      	movs	r0, #3
 8001060:	f000 fbfa 	bl	8001858 <HAL_Delay>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <lcd16x2_printf>:

/**
 * @brief Print to display any datatype (e.g. lcd16x2_printf("Value1 = %.1f", 123.45))
 */
void lcd16x2_printf(const char* str, ...)
{
 8001068:	b40f      	push	{r0, r1, r2, r3}
 800106a:	b590      	push	{r4, r7, lr}
 800106c:	b089      	sub	sp, #36	; 0x24
 800106e:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8001070:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001074:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800107e:	4618      	mov	r0, r3
 8001080:	f002 fa0c 	bl	800349c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001084:	2300      	movs	r3, #0
 8001086:	77fb      	strb	r3, [r7, #31]
 8001088:	e00b      	b.n	80010a2 <lcd16x2_printf+0x3a>
  {
    lcd16x2_writeData((uint8_t)stringArray[i]);
 800108a:	7ffb      	ldrb	r3, [r7, #31]
 800108c:	f107 0220 	add.w	r2, r7, #32
 8001090:	4413      	add	r3, r2
 8001092:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fec0 	bl	8000e1c <lcd16x2_writeData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800109c:	7ffb      	ldrb	r3, [r7, #31]
 800109e:	3301      	adds	r3, #1
 80010a0:	77fb      	strb	r3, [r7, #31]
 80010a2:	7ffc      	ldrb	r4, [r7, #31]
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff f851 	bl	8000150 <strlen>
 80010ae:	4603      	mov	r3, r0
 80010b0:	429c      	cmp	r4, r3
 80010b2:	d202      	bcs.n	80010ba <lcd16x2_printf+0x52>
 80010b4:	7ffb      	ldrb	r3, [r7, #31]
 80010b6:	2b0f      	cmp	r3, #15
 80010b8:	d9e7      	bls.n	800108a <lcd16x2_printf+0x22>
  }
}
 80010ba:	bf00      	nop
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80010c4:	b004      	add	sp, #16
 80010c6:	4770      	bx	lr

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ce:	f000 fb61 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d2:	f000 f8d3 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d6:	f000 f963 	bl	80013a0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010da:	f000 f915 	bl	8001308 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80010de:	485c      	ldr	r0, [pc, #368]	; (8001250 <main+0x188>)
 80010e0:	f001 fad0 	bl	8002684 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ea:	485a      	ldr	r0, [pc, #360]	; (8001254 <main+0x18c>)
 80010ec:	f000 fe57 	bl	8001d9e <HAL_GPIO_WritePin>

  lcd16x2_init_4bits(LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_EN_Pin,
 80010f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f4:	9303      	str	r3, [sp, #12]
 80010f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4b53      	ldr	r3, [pc, #332]	; (8001258 <main+0x190>)
 800110a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800110e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001112:	4851      	ldr	r0, [pc, #324]	; (8001258 <main+0x190>)
 8001114:	f7ff feda 	bl	8000ecc <lcd16x2_init_4bits>
		  	  	  	 LCD_D4_GPIO_Port, LCD_D4_Pin, LCD_D5_Pin, LCD_D6_Pin, LCD_D7_Pin);

  lcd16x2_printf("Heeelloo world!!");
 8001118:	4850      	ldr	r0, [pc, #320]	; (800125c <main+0x194>)
 800111a:	f7ff ffa5 	bl	8001068 <lcd16x2_printf>
  HAL_Delay(1000);
 800111e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001122:	f000 fb99 	bl	8001858 <HAL_Delay>
  lcd16x2_clear();
 8001126:	f7ff ff95 	bl	8001054 <lcd16x2_clear>
  lcd16x2_cursorShow(false);
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff ff6a 	bl	8001004 <lcd16x2_cursorShow>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001134:	484a      	ldr	r0, [pc, #296]	; (8001260 <main+0x198>)
 8001136:	f000 fe4a 	bl	8001dce <HAL_GPIO_TogglePin>

	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001140:	4844      	ldr	r0, [pc, #272]	; (8001254 <main+0x18c>)
 8001142:	f000 fe2c 	bl	8001d9e <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001146:	4b42      	ldr	r3, [pc, #264]	; (8001250 <main+0x188>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim2) < 10);  // wait for 10 us
 800114e:	bf00      	nop
 8001150:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <main+0x188>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	2b09      	cmp	r3, #9
 8001158:	d9fa      	bls.n	8001150 <main+0x88>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001160:	483c      	ldr	r0, [pc, #240]	; (8001254 <main+0x18c>)
 8001162:	f000 fe1c 	bl	8001d9e <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001166:	f000 fb6d 	bl	8001844 <HAL_GetTick>
 800116a:	4603      	mov	r3, r0
 800116c:	4a3d      	ldr	r2, [pc, #244]	; (8001264 <main+0x19c>)
 800116e:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 10 >  HAL_GetTick());
 8001170:	bf00      	nop
 8001172:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001176:	4837      	ldr	r0, [pc, #220]	; (8001254 <main+0x18c>)
 8001178:	f000 fdfa 	bl	8001d70 <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d108      	bne.n	8001194 <main+0xcc>
 8001182:	4b38      	ldr	r3, [pc, #224]	; (8001264 <main+0x19c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f103 040a 	add.w	r4, r3, #10
 800118a:	f000 fb5b 	bl	8001844 <HAL_GetTick>
 800118e:	4603      	mov	r3, r0
 8001190:	429c      	cmp	r4, r3
 8001192:	d8ee      	bhi.n	8001172 <main+0xaa>
	Value1 = __HAL_TIM_GET_COUNTER (&htim2);
 8001194:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <main+0x188>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	4a33      	ldr	r2, [pc, #204]	; (8001268 <main+0x1a0>)
 800119c:	6013      	str	r3, [r2, #0]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 800119e:	f000 fb51 	bl	8001844 <HAL_GetTick>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a2f      	ldr	r2, [pc, #188]	; (8001264 <main+0x19c>)
 80011a6:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_GPIO_Port, ECHO_Pin)) && pMillis + 50 > HAL_GetTick());
 80011a8:	bf00      	nop
 80011aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ae:	4829      	ldr	r0, [pc, #164]	; (8001254 <main+0x18c>)
 80011b0:	f000 fdde 	bl	8001d70 <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d008      	beq.n	80011cc <main+0x104>
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <main+0x19c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80011c2:	f000 fb3f 	bl	8001844 <HAL_GetTick>
 80011c6:	4603      	mov	r3, r0
 80011c8:	429c      	cmp	r4, r3
 80011ca:	d8ee      	bhi.n	80011aa <main+0xe2>
	Value2 = __HAL_TIM_GET_COUNTER (&htim2);
 80011cc:	4b20      	ldr	r3, [pc, #128]	; (8001250 <main+0x188>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	4a26      	ldr	r2, [pc, #152]	; (800126c <main+0x1a4>)
 80011d4:	6013      	str	r3, [r2, #0]

	Distance = (Value2-Value1)* 0.034/2;
 80011d6:	4b25      	ldr	r3, [pc, #148]	; (800126c <main+0x1a4>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <main+0x1a0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f8ff 	bl	80003e4 <__aeabi_ui2d>
 80011e6:	a318      	add	r3, pc, #96	; (adr r3, 8001248 <main+0x180>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff f974 	bl	80004d8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001200:	f7ff fa94 	bl	800072c <__aeabi_ddiv>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fc3c 	bl	8000a88 <__aeabi_d2f>
 8001210:	4603      	mov	r3, r0
 8001212:	4a17      	ldr	r2, [pc, #92]	; (8001270 <main+0x1a8>)
 8001214:	6013      	str	r3, [r2, #0]

	lcd16x2_clear();
 8001216:	f7ff ff1d 	bl	8001054 <lcd16x2_clear>
	lcd16x2_1stLine();
 800121a:	f7ff fee3 	bl	8000fe4 <lcd16x2_1stLine>
	lcd16x2_printf("Distance:");
 800121e:	4815      	ldr	r0, [pc, #84]	; (8001274 <main+0x1ac>)
 8001220:	f7ff ff22 	bl	8001068 <lcd16x2_printf>
	lcd16x2_2ndLine();
 8001224:	f7ff fee6 	bl	8000ff4 <lcd16x2_2ndLine>
	lcd16x2_printf("%.2f cm", Distance);
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <main+0x1a8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f8fb 	bl	8000428 <__aeabi_f2d>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4810      	ldr	r0, [pc, #64]	; (8001278 <main+0x1b0>)
 8001238:	f7ff ff16 	bl	8001068 <lcd16x2_printf>
	HAL_Delay(1000);
 800123c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001240:	f000 fb0a 	bl	8001858 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001244:	e774      	b.n	8001130 <main+0x68>
 8001246:	bf00      	nop
 8001248:	b020c49c 	.word	0xb020c49c
 800124c:	3fa16872 	.word	0x3fa16872
 8001250:	20000238 	.word	0x20000238
 8001254:	40010c00 	.word	0x40010c00
 8001258:	40010800 	.word	0x40010800
 800125c:	08005900 	.word	0x08005900
 8001260:	40011000 	.word	0x40011000
 8001264:	20000234 	.word	0x20000234
 8001268:	2000021c 	.word	0x2000021c
 800126c:	20000220 	.word	0x20000220
 8001270:	20000224 	.word	0x20000224
 8001274:	08005914 	.word	0x08005914
 8001278:	08005920 	.word	0x08005920

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b090      	sub	sp, #64	; 0x40
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0318 	add.w	r3, r7, #24
 8001286:	2228      	movs	r2, #40	; 0x28
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fc88 	bl	8002ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800129e:	2301      	movs	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ac:	2301      	movs	r3, #1
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b0:	2302      	movs	r3, #2
 80012b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c0:	f107 0318 	add.w	r3, r7, #24
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 fd9b 	bl	8001e00 <HAL_RCC_OscConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80012d0:	f000 f8f8 	bl	80014c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d4:	230f      	movs	r3, #15
 80012d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d8:	2302      	movs	r3, #2
 80012da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2102      	movs	r1, #2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 f806 	bl	8002300 <HAL_RCC_ClockConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012fa:	f000 f8e3 	bl	80014c4 <Error_Handler>
  }
}
 80012fe:	bf00      	nop
 8001300:	3740      	adds	r7, #64	; 0x40
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_TIM2_Init+0x94>)
 8001326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800132a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_TIM2_Init+0x94>)
 800132e:	2247      	movs	r2, #71	; 0x47
 8001330:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM2_Init+0x94>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_TIM2_Init+0x94>)
 800133a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_TIM2_Init+0x94>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_TIM2_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <MX_TIM2_Init+0x94>)
 800134e:	f001 f949 	bl	80025e4 <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001358:	f000 f8b4 	bl	80014c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_TIM2_Init+0x94>)
 800136a:	f001 f9d5 	bl	8002718 <HAL_TIM_ConfigClockSource>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001374:	f000 f8a6 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_TIM2_Init+0x94>)
 8001386:	f001 fb83 	bl	8002a90 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001390:	f000 f898 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000238 	.word	0x20000238

080013a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b4:	4b3f      	ldr	r3, [pc, #252]	; (80014b4 <MX_GPIO_Init+0x114>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	4a3e      	ldr	r2, [pc, #248]	; (80014b4 <MX_GPIO_Init+0x114>)
 80013ba:	f043 0310 	orr.w	r3, r3, #16
 80013be:	6193      	str	r3, [r2, #24]
 80013c0:	4b3c      	ldr	r3, [pc, #240]	; (80014b4 <MX_GPIO_Init+0x114>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013cc:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <MX_GPIO_Init+0x114>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a38      	ldr	r2, [pc, #224]	; (80014b4 <MX_GPIO_Init+0x114>)
 80013d2:	f043 0320 	orr.w	r3, r3, #32
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <MX_GPIO_Init+0x114>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0320 	and.w	r3, r3, #32
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <MX_GPIO_Init+0x114>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a32      	ldr	r2, [pc, #200]	; (80014b4 <MX_GPIO_Init+0x114>)
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <MX_GPIO_Init+0x114>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <MX_GPIO_Init+0x114>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a2c      	ldr	r2, [pc, #176]	; (80014b4 <MX_GPIO_Init+0x114>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <MX_GPIO_Init+0x114>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141a:	4827      	ldr	r0, [pc, #156]	; (80014b8 <MX_GPIO_Init+0x118>)
 800141c:	f000 fcbf 	bl	8001d9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001426:	4825      	ldr	r0, [pc, #148]	; (80014bc <MX_GPIO_Init+0x11c>)
 8001428:	f000 fcb9 	bl	8001d9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 8001432:	4823      	ldr	r0, [pc, #140]	; (80014c0 <MX_GPIO_Init+0x120>)
 8001434:	f000 fcb3 	bl	8001d9e <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	2301      	movs	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2302      	movs	r3, #2
 8001448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	4619      	mov	r1, r3
 8001450:	4819      	ldr	r0, [pc, #100]	; (80014b8 <MX_GPIO_Init+0x118>)
 8001452:	f000 fb09 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800145a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2302      	movs	r3, #2
 8001466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	4619      	mov	r1, r3
 800146e:	4813      	ldr	r0, [pc, #76]	; (80014bc <MX_GPIO_Init+0x11c>)
 8001470:	f000 fafa 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001474:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <MX_GPIO_Init+0x11c>)
 800148a:	f000 faed 	bl	8001a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 800148e:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 8001492:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001494:	2301      	movs	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800149c:	2301      	movs	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4619      	mov	r1, r3
 80014a6:	4806      	ldr	r0, [pc, #24]	; (80014c0 <MX_GPIO_Init+0x120>)
 80014a8:	f000 fade 	bl	8001a68 <HAL_GPIO_Init>

}
 80014ac:	bf00      	nop
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40011000 	.word	0x40011000
 80014bc:	40010c00 	.word	0x40010c00
 80014c0:	40010800 	.word	0x40010800

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	e7fe      	b.n	80014cc <Error_Handler+0x8>
	...

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_MspInit+0x5c>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	4a14      	ldr	r2, [pc, #80]	; (800152c <HAL_MspInit+0x5c>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6193      	str	r3, [r2, #24]
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_MspInit+0x5c>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_MspInit+0x5c>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a0e      	ldr	r2, [pc, #56]	; (800152c <HAL_MspInit+0x5c>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f8:	61d3      	str	r3, [r2, #28]
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_MspInit+0x5c>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_MspInit+0x60>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	4a04      	ldr	r2, [pc, #16]	; (8001530 <HAL_MspInit+0x60>)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000

08001534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001544:	d10b      	bne.n	800155e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_TIM_Base_MspInit+0x34>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_TIM_Base_MspInit+0x34>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	61d3      	str	r3, [r2, #28]
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_TIM_Base_MspInit+0x34>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40021000 	.word	0x40021000

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <NMI_Handler+0x4>

08001572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <HardFault_Handler+0x4>

08001578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <MemManage_Handler+0x4>

0800157e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <BusFault_Handler+0x4>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <UsageFault_Handler+0x4>

0800158a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b2:	f000 f935 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
	return 1;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <_kill>:

int _kill(int pid, int sig)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015d2:	f001 fabb 	bl	8002b4c <__errno>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2216      	movs	r2, #22
 80015da:	601a      	str	r2, [r3, #0]
	return -1;
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_exit>:

void _exit (int status)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ffe7 	bl	80015c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80015fa:	e7fe      	b.n	80015fa <_exit+0x12>

080015fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e00a      	b.n	8001624 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800160e:	f3af 8000 	nop.w
 8001612:	4601      	mov	r1, r0
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	60ba      	str	r2, [r7, #8]
 800161a:	b2ca      	uxtb	r2, r1
 800161c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	dbf0      	blt.n	800160e <_read+0x12>
	}

return len;
 800162c:	687b      	ldr	r3, [r7, #4]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e009      	b.n	800165c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	60ba      	str	r2, [r7, #8]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3301      	adds	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	dbf1      	blt.n	8001648 <_write+0x12>
	}
	return len;
 8001664:	687b      	ldr	r3, [r7, #4]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_close>:

int _close(int file)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
	return -1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001694:	605a      	str	r2, [r3, #4]
	return 0;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <_isatty>:

int _isatty(int file)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
	return 1;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
	return 0;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
	...

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f001 fa24 	bl	8002b4c <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20005000 	.word	0x20005000
 8001730:	00000400 	.word	0x00000400
 8001734:	20000228 	.word	0x20000228
 8001738:	20000298 	.word	0x20000298

0800173c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001760:	4c0a      	ldr	r4, [pc, #40]	; (800178c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800176e:	f7ff ffe5 	bl	800173c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001772:	f001 f9f1 	bl	8002b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001776:	f7ff fca7 	bl	80010c8 <main>
  bx lr
 800177a:	4770      	bx	lr
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001784:	08005d34 	.word	0x08005d34
  ldr r2, =_sbss
 8001788:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800178c:	20000294 	.word	0x20000294

08001790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC1_2_IRQHandler>
	...

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_Init+0x28>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_Init+0x28>)
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 f92b 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	200f      	movs	r0, #15
 80017ac:	f000 f808 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff fe8e 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40022000 	.word	0x40022000

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x54>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x58>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f935 	bl	8001a4e <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d80a      	bhi.n	800180a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017fc:	f000 f90b 	bl	8001a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <HAL_InitTick+0x5c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000004 	.word	0x20000004
 8001818:	2000000c 	.word	0x2000000c
 800181c:	20000008 	.word	0x20000008

08001820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_IncTick+0x1c>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_IncTick+0x20>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a03      	ldr	r2, [pc, #12]	; (8001840 <HAL_IncTick+0x20>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	2000000c 	.word	0x2000000c
 8001840:	20000280 	.word	0x20000280

08001844 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;
 8001848:	4b02      	ldr	r3, [pc, #8]	; (8001854 <HAL_GetTick+0x10>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	20000280 	.word	0x20000280

08001858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff fff0 	bl	8001844 <HAL_GetTick>
 8001864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001870:	d005      	beq.n	800187e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_Delay+0x44>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800187e:	bf00      	nop
 8001880:	f7ff ffe0 	bl	8001844 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	429a      	cmp	r2, r3
 800188e:	d8f7      	bhi.n	8001880 <HAL_Delay+0x28>
  {
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000000c 	.word	0x2000000c

080018a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018bc:	4013      	ands	r3, r2
 80018be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d2:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <__NVIC_SetPriorityGrouping+0x44>)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	60d3      	str	r3, [r2, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <__NVIC_GetPriorityGrouping+0x18>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	f003 0307 	and.w	r3, r3, #7
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	6039      	str	r1, [r7, #0]
 800190e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	2b00      	cmp	r3, #0
 8001916:	db0a      	blt.n	800192e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	490c      	ldr	r1, [pc, #48]	; (8001950 <__NVIC_SetPriority+0x4c>)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	0112      	lsls	r2, r2, #4
 8001924:	b2d2      	uxtb	r2, r2
 8001926:	440b      	add	r3, r1
 8001928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800192c:	e00a      	b.n	8001944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4908      	ldr	r1, [pc, #32]	; (8001954 <__NVIC_SetPriority+0x50>)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	3b04      	subs	r3, #4
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	440b      	add	r3, r1
 8001942:	761a      	strb	r2, [r3, #24]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000e100 	.word	0xe000e100
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f1c3 0307 	rsb	r3, r3, #7
 8001972:	2b04      	cmp	r3, #4
 8001974:	bf28      	it	cs
 8001976:	2304      	movcs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3304      	adds	r3, #4
 800197e:	2b06      	cmp	r3, #6
 8001980:	d902      	bls.n	8001988 <NVIC_EncodePriority+0x30>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3b03      	subs	r3, #3
 8001986:	e000      	b.n	800198a <NVIC_EncodePriority+0x32>
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	401a      	ands	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	4313      	orrs	r3, r2
         );
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3724      	adds	r7, #36	; 0x24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e0:	f7ff ff90 	bl	8001904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff49 	bl	80018a0 <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a28:	f7ff ff5e 	bl	80018e8 <__NVIC_GetPriorityGrouping>
 8001a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7ff ff90 	bl	8001958 <NVIC_EncodePriority>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff5f 	bl	8001904 <__NVIC_SetPriority>
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffb0 	bl	80019bc <SysTick_Config>
 8001a5c:	4603      	mov	r3, r0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b08b      	sub	sp, #44	; 0x2c
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a7a:	e169      	b.n	8001d50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	f040 8158 	bne.w	8001d4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4a9a      	ldr	r2, [pc, #616]	; (8001d08 <HAL_GPIO_Init+0x2a0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d05e      	beq.n	8001b62 <HAL_GPIO_Init+0xfa>
 8001aa4:	4a98      	ldr	r2, [pc, #608]	; (8001d08 <HAL_GPIO_Init+0x2a0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d875      	bhi.n	8001b96 <HAL_GPIO_Init+0x12e>
 8001aaa:	4a98      	ldr	r2, [pc, #608]	; (8001d0c <HAL_GPIO_Init+0x2a4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d058      	beq.n	8001b62 <HAL_GPIO_Init+0xfa>
 8001ab0:	4a96      	ldr	r2, [pc, #600]	; (8001d0c <HAL_GPIO_Init+0x2a4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d86f      	bhi.n	8001b96 <HAL_GPIO_Init+0x12e>
 8001ab6:	4a96      	ldr	r2, [pc, #600]	; (8001d10 <HAL_GPIO_Init+0x2a8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d052      	beq.n	8001b62 <HAL_GPIO_Init+0xfa>
 8001abc:	4a94      	ldr	r2, [pc, #592]	; (8001d10 <HAL_GPIO_Init+0x2a8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d869      	bhi.n	8001b96 <HAL_GPIO_Init+0x12e>
 8001ac2:	4a94      	ldr	r2, [pc, #592]	; (8001d14 <HAL_GPIO_Init+0x2ac>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d04c      	beq.n	8001b62 <HAL_GPIO_Init+0xfa>
 8001ac8:	4a92      	ldr	r2, [pc, #584]	; (8001d14 <HAL_GPIO_Init+0x2ac>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d863      	bhi.n	8001b96 <HAL_GPIO_Init+0x12e>
 8001ace:	4a92      	ldr	r2, [pc, #584]	; (8001d18 <HAL_GPIO_Init+0x2b0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d046      	beq.n	8001b62 <HAL_GPIO_Init+0xfa>
 8001ad4:	4a90      	ldr	r2, [pc, #576]	; (8001d18 <HAL_GPIO_Init+0x2b0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d85d      	bhi.n	8001b96 <HAL_GPIO_Init+0x12e>
 8001ada:	2b12      	cmp	r3, #18
 8001adc:	d82a      	bhi.n	8001b34 <HAL_GPIO_Init+0xcc>
 8001ade:	2b12      	cmp	r3, #18
 8001ae0:	d859      	bhi.n	8001b96 <HAL_GPIO_Init+0x12e>
 8001ae2:	a201      	add	r2, pc, #4	; (adr r2, 8001ae8 <HAL_GPIO_Init+0x80>)
 8001ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae8:	08001b63 	.word	0x08001b63
 8001aec:	08001b3d 	.word	0x08001b3d
 8001af0:	08001b4f 	.word	0x08001b4f
 8001af4:	08001b91 	.word	0x08001b91
 8001af8:	08001b97 	.word	0x08001b97
 8001afc:	08001b97 	.word	0x08001b97
 8001b00:	08001b97 	.word	0x08001b97
 8001b04:	08001b97 	.word	0x08001b97
 8001b08:	08001b97 	.word	0x08001b97
 8001b0c:	08001b97 	.word	0x08001b97
 8001b10:	08001b97 	.word	0x08001b97
 8001b14:	08001b97 	.word	0x08001b97
 8001b18:	08001b97 	.word	0x08001b97
 8001b1c:	08001b97 	.word	0x08001b97
 8001b20:	08001b97 	.word	0x08001b97
 8001b24:	08001b97 	.word	0x08001b97
 8001b28:	08001b97 	.word	0x08001b97
 8001b2c:	08001b45 	.word	0x08001b45
 8001b30:	08001b59 	.word	0x08001b59
 8001b34:	4a79      	ldr	r2, [pc, #484]	; (8001d1c <HAL_GPIO_Init+0x2b4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d013      	beq.n	8001b62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b3a:	e02c      	b.n	8001b96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	623b      	str	r3, [r7, #32]
          break;
 8001b42:	e029      	b.n	8001b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	623b      	str	r3, [r7, #32]
          break;
 8001b4c:	e024      	b.n	8001b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	3308      	adds	r3, #8
 8001b54:	623b      	str	r3, [r7, #32]
          break;
 8001b56:	e01f      	b.n	8001b98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	330c      	adds	r3, #12
 8001b5e:	623b      	str	r3, [r7, #32]
          break;
 8001b60:	e01a      	b.n	8001b98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	623b      	str	r3, [r7, #32]
          break;
 8001b6e:	e013      	b.n	8001b98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d105      	bne.n	8001b84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b78:	2308      	movs	r3, #8
 8001b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	611a      	str	r2, [r3, #16]
          break;
 8001b82:	e009      	b.n	8001b98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b84:	2308      	movs	r3, #8
 8001b86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	615a      	str	r2, [r3, #20]
          break;
 8001b8e:	e003      	b.n	8001b98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b90:	2300      	movs	r3, #0
 8001b92:	623b      	str	r3, [r7, #32]
          break;
 8001b94:	e000      	b.n	8001b98 <HAL_GPIO_Init+0x130>
          break;
 8001b96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	2bff      	cmp	r3, #255	; 0xff
 8001b9c:	d801      	bhi.n	8001ba2 <HAL_GPIO_Init+0x13a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	e001      	b.n	8001ba6 <HAL_GPIO_Init+0x13e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2bff      	cmp	r3, #255	; 0xff
 8001bac:	d802      	bhi.n	8001bb4 <HAL_GPIO_Init+0x14c>
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	e002      	b.n	8001bba <HAL_GPIO_Init+0x152>
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	3b08      	subs	r3, #8
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	210f      	movs	r1, #15
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	401a      	ands	r2, r3
 8001bcc:	6a39      	ldr	r1, [r7, #32]
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80b1 	beq.w	8001d4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001be8:	4b4d      	ldr	r3, [pc, #308]	; (8001d20 <HAL_GPIO_Init+0x2b8>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a4c      	ldr	r2, [pc, #304]	; (8001d20 <HAL_GPIO_Init+0x2b8>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b4a      	ldr	r3, [pc, #296]	; (8001d20 <HAL_GPIO_Init+0x2b8>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c00:	4a48      	ldr	r2, [pc, #288]	; (8001d24 <HAL_GPIO_Init+0x2bc>)
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	3302      	adds	r3, #2
 8001c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	220f      	movs	r2, #15
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	4013      	ands	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a40      	ldr	r2, [pc, #256]	; (8001d28 <HAL_GPIO_Init+0x2c0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d013      	beq.n	8001c54 <HAL_GPIO_Init+0x1ec>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a3f      	ldr	r2, [pc, #252]	; (8001d2c <HAL_GPIO_Init+0x2c4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d00d      	beq.n	8001c50 <HAL_GPIO_Init+0x1e8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a3e      	ldr	r2, [pc, #248]	; (8001d30 <HAL_GPIO_Init+0x2c8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d007      	beq.n	8001c4c <HAL_GPIO_Init+0x1e4>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a3d      	ldr	r2, [pc, #244]	; (8001d34 <HAL_GPIO_Init+0x2cc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d101      	bne.n	8001c48 <HAL_GPIO_Init+0x1e0>
 8001c44:	2303      	movs	r3, #3
 8001c46:	e006      	b.n	8001c56 <HAL_GPIO_Init+0x1ee>
 8001c48:	2304      	movs	r3, #4
 8001c4a:	e004      	b.n	8001c56 <HAL_GPIO_Init+0x1ee>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e002      	b.n	8001c56 <HAL_GPIO_Init+0x1ee>
 8001c50:	2301      	movs	r3, #1
 8001c52:	e000      	b.n	8001c56 <HAL_GPIO_Init+0x1ee>
 8001c54:	2300      	movs	r3, #0
 8001c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c58:	f002 0203 	and.w	r2, r2, #3
 8001c5c:	0092      	lsls	r2, r2, #2
 8001c5e:	4093      	lsls	r3, r2
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c66:	492f      	ldr	r1, [pc, #188]	; (8001d24 <HAL_GPIO_Init+0x2bc>)
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d006      	beq.n	8001c8e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	492c      	ldr	r1, [pc, #176]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4928      	ldr	r1, [pc, #160]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d006      	beq.n	8001cb6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca8:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4922      	ldr	r1, [pc, #136]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	491e      	ldr	r1, [pc, #120]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	4918      	ldr	r1, [pc, #96]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]
 8001cdc:	e006      	b.n	8001cec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	4914      	ldr	r1, [pc, #80]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d021      	beq.n	8001d3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	490e      	ldr	r1, [pc, #56]	; (8001d38 <HAL_GPIO_Init+0x2d0>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60cb      	str	r3, [r1, #12]
 8001d04:	e021      	b.n	8001d4a <HAL_GPIO_Init+0x2e2>
 8001d06:	bf00      	nop
 8001d08:	10320000 	.word	0x10320000
 8001d0c:	10310000 	.word	0x10310000
 8001d10:	10220000 	.word	0x10220000
 8001d14:	10210000 	.word	0x10210000
 8001d18:	10120000 	.word	0x10120000
 8001d1c:	10110000 	.word	0x10110000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40010800 	.word	0x40010800
 8001d2c:	40010c00 	.word	0x40010c00
 8001d30:	40011000 	.word	0x40011000
 8001d34:	40011400 	.word	0x40011400
 8001d38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_GPIO_Init+0x304>)
 8001d3e:	68da      	ldr	r2, [r3, #12]
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	4909      	ldr	r1, [pc, #36]	; (8001d6c <HAL_GPIO_Init+0x304>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f47f ae8e 	bne.w	8001a7c <HAL_GPIO_Init+0x14>
  }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	372c      	adds	r7, #44	; 0x2c
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	40010400 	.word	0x40010400

08001d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	887b      	ldrh	r3, [r7, #2]
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
 8001d8c:	e001      	b.n	8001d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	807b      	strh	r3, [r7, #2]
 8001daa:	4613      	mov	r3, r2
 8001dac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dae:	787b      	ldrb	r3, [r7, #1]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db4:	887a      	ldrh	r2, [r7, #2]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dba:	e003      	b.n	8001dc4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	041a      	lsls	r2, r3, #16
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	611a      	str	r2, [r3, #16]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001de0:	887a      	ldrh	r2, [r7, #2]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4013      	ands	r3, r2
 8001de6:	041a      	lsls	r2, r3, #16
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	400b      	ands	r3, r1
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	611a      	str	r2, [r3, #16]
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e26c      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8087 	beq.w	8001f2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e20:	4b92      	ldr	r3, [pc, #584]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d00c      	beq.n	8001e46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e2c:	4b8f      	ldr	r3, [pc, #572]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d112      	bne.n	8001e5e <HAL_RCC_OscConfig+0x5e>
 8001e38:	4b8c      	ldr	r3, [pc, #560]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e44:	d10b      	bne.n	8001e5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e46:	4b89      	ldr	r3, [pc, #548]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d06c      	beq.n	8001f2c <HAL_RCC_OscConfig+0x12c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d168      	bne.n	8001f2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e246      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x76>
 8001e68:	4b80      	ldr	r3, [pc, #512]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a7f      	ldr	r2, [pc, #508]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	e02e      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd4>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x98>
 8001e7e:	4b7b      	ldr	r3, [pc, #492]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7a      	ldr	r2, [pc, #488]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b78      	ldr	r3, [pc, #480]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a77      	ldr	r2, [pc, #476]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e01d      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd4>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0xbc>
 8001ea2:	4b72      	ldr	r3, [pc, #456]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a71      	ldr	r2, [pc, #452]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a6e      	ldr	r2, [pc, #440]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd4>
 8001ebc:	4b6b      	ldr	r3, [pc, #428]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6a      	ldr	r2, [pc, #424]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b68      	ldr	r3, [pc, #416]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a67      	ldr	r2, [pc, #412]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff fcb2 	bl	8001844 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fcae 	bl	8001844 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1fa      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b5d      	ldr	r3, [pc, #372]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xe4>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff fc9e 	bl	8001844 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fc9a 	bl	8001844 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e1e6      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1e:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x10c>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d063      	beq.n	8002002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3a:	4b4c      	ldr	r3, [pc, #304]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f46:	4b49      	ldr	r3, [pc, #292]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d11c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x18c>
 8001f52:	4b46      	ldr	r3, [pc, #280]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d116      	bne.n	8001f8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	4b43      	ldr	r3, [pc, #268]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <HAL_RCC_OscConfig+0x176>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e1ba      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4939      	ldr	r1, [pc, #228]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	e03a      	b.n	8002002 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f94:	4b36      	ldr	r3, [pc, #216]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fc53 	bl	8001844 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa2:	f7ff fc4f 	bl	8001844 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e19b      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4927      	ldr	r1, [pc, #156]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fc32 	bl	8001844 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fc2e 	bl	8001844 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e17a      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d03a      	beq.n	8002084 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d019      	beq.n	800204a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_RCC_OscConfig+0x274>)
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201c:	f7ff fc12 	bl	8001844 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002024:	f7ff fc0e 	bl	8001844 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e15a      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002042:	2001      	movs	r0, #1
 8002044:	f000 fab0 	bl	80025a8 <RCC_Delay>
 8002048:	e01c      	b.n	8002084 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_RCC_OscConfig+0x274>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7ff fbf8 	bl	8001844 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002056:	e00f      	b.n	8002078 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002058:	f7ff fbf4 	bl	8001844 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d908      	bls.n	8002078 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e140      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	42420000 	.word	0x42420000
 8002074:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	4b9e      	ldr	r3, [pc, #632]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e9      	bne.n	8002058 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a6 	beq.w	80021de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002096:	4b97      	ldr	r3, [pc, #604]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10d      	bne.n	80020be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	4b94      	ldr	r3, [pc, #592]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a93      	ldr	r2, [pc, #588]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	61d3      	str	r3, [r2, #28]
 80020ae:	4b91      	ldr	r3, [pc, #580]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ba:	2301      	movs	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b8e      	ldr	r3, [pc, #568]	; (80022f8 <HAL_RCC_OscConfig+0x4f8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d118      	bne.n	80020fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ca:	4b8b      	ldr	r3, [pc, #556]	; (80022f8 <HAL_RCC_OscConfig+0x4f8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a8a      	ldr	r2, [pc, #552]	; (80022f8 <HAL_RCC_OscConfig+0x4f8>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d6:	f7ff fbb5 	bl	8001844 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020de:	f7ff fbb1 	bl	8001844 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b64      	cmp	r3, #100	; 0x64
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0fd      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	4b81      	ldr	r3, [pc, #516]	; (80022f8 <HAL_RCC_OscConfig+0x4f8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x312>
 8002104:	4b7b      	ldr	r3, [pc, #492]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a7a      	ldr	r2, [pc, #488]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	e02d      	b.n	800216e <HAL_RCC_OscConfig+0x36e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x334>
 800211a:	4b76      	ldr	r3, [pc, #472]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a75      	ldr	r2, [pc, #468]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	6213      	str	r3, [r2, #32]
 8002126:	4b73      	ldr	r3, [pc, #460]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	4a72      	ldr	r2, [pc, #456]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	6213      	str	r3, [r2, #32]
 8002132:	e01c      	b.n	800216e <HAL_RCC_OscConfig+0x36e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b05      	cmp	r3, #5
 800213a:	d10c      	bne.n	8002156 <HAL_RCC_OscConfig+0x356>
 800213c:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a6c      	ldr	r2, [pc, #432]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	4b6a      	ldr	r3, [pc, #424]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4a69      	ldr	r2, [pc, #420]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6213      	str	r3, [r2, #32]
 8002154:	e00b      	b.n	800216e <HAL_RCC_OscConfig+0x36e>
 8002156:	4b67      	ldr	r3, [pc, #412]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a66      	ldr	r2, [pc, #408]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	6213      	str	r3, [r2, #32]
 8002162:	4b64      	ldr	r3, [pc, #400]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4a63      	ldr	r2, [pc, #396]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d015      	beq.n	80021a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002176:	f7ff fb65 	bl	8001844 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7ff fb61 	bl	8001844 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e0ab      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002194:	4b57      	ldr	r3, [pc, #348]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0ee      	beq.n	800217e <HAL_RCC_OscConfig+0x37e>
 80021a0:	e014      	b.n	80021cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a2:	f7ff fb4f 	bl	8001844 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f7ff fb4b 	bl	8001844 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e095      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c0:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1ee      	bne.n	80021aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d105      	bne.n	80021de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d2:	4b48      	ldr	r3, [pc, #288]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4a47      	ldr	r2, [pc, #284]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 8081 	beq.w	80022ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e8:	4b42      	ldr	r3, [pc, #264]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d061      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d146      	bne.n	800228a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fc:	4b3f      	ldr	r3, [pc, #252]	; (80022fc <HAL_RCC_OscConfig+0x4fc>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7ff fb1f 	bl	8001844 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220a:	f7ff fb1b 	bl	8001844 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e067      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f0      	bne.n	800220a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002230:	d108      	bne.n	8002244 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002232:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	492d      	ldr	r1, [pc, #180]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002244:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a19      	ldr	r1, [r3, #32]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	430b      	orrs	r3, r1
 8002256:	4927      	ldr	r1, [pc, #156]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800225c:	4b27      	ldr	r3, [pc, #156]	; (80022fc <HAL_RCC_OscConfig+0x4fc>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7ff faef 	bl	8001844 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226a:	f7ff faeb 	bl	8001844 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e037      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x46a>
 8002288:	e02f      	b.n	80022ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <HAL_RCC_OscConfig+0x4fc>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff fad8 	bl	8001844 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002298:	f7ff fad4 	bl	8001844 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e020      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x498>
 80022b6:	e018      	b.n	80022ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e013      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40007000 	.word	0x40007000
 80022fc:	42420060 	.word	0x42420060

08002300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0d0      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d910      	bls.n	8002344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b67      	ldr	r3, [pc, #412]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 0207 	bic.w	r2, r3, #7
 800232a:	4965      	ldr	r1, [pc, #404]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b63      	ldr	r3, [pc, #396]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0b8      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a58      	ldr	r2, [pc, #352]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002366:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002374:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a52      	ldr	r2, [pc, #328]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800237e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	494d      	ldr	r1, [pc, #308]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d040      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d115      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e07f      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e073      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b3d      	ldr	r3, [pc, #244]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e06b      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b39      	ldr	r3, [pc, #228]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4936      	ldr	r1, [pc, #216]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7ff fa28 	bl	8001844 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7ff fa24 	bl	8001844 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e053      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d210      	bcs.n	8002450 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 0207 	bic.w	r2, r3, #7
 8002436:	4922      	ldr	r1, [pc, #136]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e032      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4916      	ldr	r1, [pc, #88]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	490e      	ldr	r1, [pc, #56]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248e:	f000 f821 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002492:	4602      	mov	r2, r0
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	490a      	ldr	r1, [pc, #40]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	5ccb      	ldrb	r3, [r1, r3]
 80024a2:	fa22 f303 	lsr.w	r3, r2, r3
 80024a6:	4a09      	ldr	r2, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1cc>)
 80024a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1d0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff f986 	bl	80017c0 <HAL_InitTick>

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40022000 	.word	0x40022000
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08005938 	.word	0x08005938
 80024cc:	20000004 	.word	0x20000004
 80024d0:	20000008 	.word	0x20000008

080024d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d4:	b490      	push	{r4, r7}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024dc:	1d3c      	adds	r4, r7, #4
 80024de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024e4:	f240 2301 	movw	r3, #513	; 0x201
 80024e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	2300      	movs	r3, #0
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024fe:	4b22      	ldr	r3, [pc, #136]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b04      	cmp	r3, #4
 800250c:	d002      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x40>
 800250e:	2b08      	cmp	r3, #8
 8002510:	d003      	beq.n	800251a <HAL_RCC_GetSysClockFreq+0x46>
 8002512:	e02d      	b.n	8002570 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002516:	623b      	str	r3, [r7, #32]
      break;
 8002518:	e02d      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	0c9b      	lsrs	r3, r3, #18
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002526:	4413      	add	r3, r2
 8002528:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800252c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	0c5b      	lsrs	r3, r3, #17
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002546:	4413      	add	r3, r2
 8002548:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800254c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	4a0e      	ldr	r2, [pc, #56]	; (800258c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002552:	fb02 f203 	mul.w	r2, r2, r3
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
 800255e:	e004      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	4a0b      	ldr	r2, [pc, #44]	; (8002590 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002564:	fb02 f303 	mul.w	r3, r2, r3
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	623b      	str	r3, [r7, #32]
      break;
 800256e:	e002      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002572:	623b      	str	r3, [r7, #32]
      break;
 8002574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002576:	6a3b      	ldr	r3, [r7, #32]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3728      	adds	r7, #40	; 0x28
 800257c:	46bd      	mov	sp, r7
 800257e:	bc90      	pop	{r4, r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	08005928 	.word	0x08005928
 8002588:	40021000 	.word	0x40021000
 800258c:	007a1200 	.word	0x007a1200
 8002590:	003d0900 	.word	0x003d0900

08002594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002598:	4b02      	ldr	r3, [pc, #8]	; (80025a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	20000004 	.word	0x20000004

080025a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <RCC_Delay+0x34>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <RCC_Delay+0x38>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	0a5b      	lsrs	r3, r3, #9
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	fb02 f303 	mul.w	r3, r2, r3
 80025c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025c4:	bf00      	nop
  }
  while (Delay --);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1e5a      	subs	r2, r3, #1
 80025ca:	60fa      	str	r2, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f9      	bne.n	80025c4 <RCC_Delay+0x1c>
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	20000004 	.word	0x20000004
 80025e0:	10624dd3 	.word	0x10624dd3

080025e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e041      	b.n	800267a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe ff92 	bl	8001534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3304      	adds	r3, #4
 8002620:	4619      	mov	r1, r3
 8002622:	4610      	mov	r0, r2
 8002624:	f000 f93c 	bl	80028a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d001      	beq.n	800269c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e032      	b.n	8002702 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a18      	ldr	r2, [pc, #96]	; (800270c <HAL_TIM_Base_Start+0x88>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00e      	beq.n	80026cc <HAL_TIM_Base_Start+0x48>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b6:	d009      	beq.n	80026cc <HAL_TIM_Base_Start+0x48>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a14      	ldr	r2, [pc, #80]	; (8002710 <HAL_TIM_Base_Start+0x8c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d004      	beq.n	80026cc <HAL_TIM_Base_Start+0x48>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a13      	ldr	r2, [pc, #76]	; (8002714 <HAL_TIM_Base_Start+0x90>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d111      	bne.n	80026f0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d010      	beq.n	8002700 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ee:	e007      	b.n	8002700 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	40012c00 	.word	0x40012c00
 8002710:	40000400 	.word	0x40000400
 8002714:	40000800 	.word	0x40000800

08002718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_TIM_ConfigClockSource+0x18>
 800272c:	2302      	movs	r3, #2
 800272e:	e0b3      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x180>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800274e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002756:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002768:	d03e      	beq.n	80027e8 <HAL_TIM_ConfigClockSource+0xd0>
 800276a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800276e:	f200 8087 	bhi.w	8002880 <HAL_TIM_ConfigClockSource+0x168>
 8002772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002776:	f000 8085 	beq.w	8002884 <HAL_TIM_ConfigClockSource+0x16c>
 800277a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277e:	d87f      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
 8002780:	2b70      	cmp	r3, #112	; 0x70
 8002782:	d01a      	beq.n	80027ba <HAL_TIM_ConfigClockSource+0xa2>
 8002784:	2b70      	cmp	r3, #112	; 0x70
 8002786:	d87b      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
 8002788:	2b60      	cmp	r3, #96	; 0x60
 800278a:	d050      	beq.n	800282e <HAL_TIM_ConfigClockSource+0x116>
 800278c:	2b60      	cmp	r3, #96	; 0x60
 800278e:	d877      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
 8002790:	2b50      	cmp	r3, #80	; 0x50
 8002792:	d03c      	beq.n	800280e <HAL_TIM_ConfigClockSource+0xf6>
 8002794:	2b50      	cmp	r3, #80	; 0x50
 8002796:	d873      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
 8002798:	2b40      	cmp	r3, #64	; 0x40
 800279a:	d058      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x136>
 800279c:	2b40      	cmp	r3, #64	; 0x40
 800279e:	d86f      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
 80027a0:	2b30      	cmp	r3, #48	; 0x30
 80027a2:	d064      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x156>
 80027a4:	2b30      	cmp	r3, #48	; 0x30
 80027a6:	d86b      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
 80027a8:	2b20      	cmp	r3, #32
 80027aa:	d060      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x156>
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	d867      	bhi.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d05c      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x156>
 80027b4:	2b10      	cmp	r3, #16
 80027b6:	d05a      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027b8:	e062      	b.n	8002880 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6899      	ldr	r1, [r3, #8]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f000 f942 	bl	8002a52 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	609a      	str	r2, [r3, #8]
      break;
 80027e6:	e04e      	b.n	8002886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6899      	ldr	r1, [r3, #8]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f000 f92b 	bl	8002a52 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800280a:	609a      	str	r2, [r3, #8]
      break;
 800280c:	e03b      	b.n	8002886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6859      	ldr	r1, [r3, #4]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	461a      	mov	r2, r3
 800281c:	f000 f8a2 	bl	8002964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2150      	movs	r1, #80	; 0x50
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f8f9 	bl	8002a1e <TIM_ITRx_SetConfig>
      break;
 800282c:	e02b      	b.n	8002886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	461a      	mov	r2, r3
 800283c:	f000 f8c0 	bl	80029c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2160      	movs	r1, #96	; 0x60
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f8e9 	bl	8002a1e <TIM_ITRx_SetConfig>
      break;
 800284c:	e01b      	b.n	8002886 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	461a      	mov	r2, r3
 800285c:	f000 f882 	bl	8002964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2140      	movs	r1, #64	; 0x40
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f8d9 	bl	8002a1e <TIM_ITRx_SetConfig>
      break;
 800286c:	e00b      	b.n	8002886 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	f000 f8d0 	bl	8002a1e <TIM_ITRx_SetConfig>
        break;
 800287e:	e002      	b.n	8002886 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002880:	bf00      	nop
 8002882:	e000      	b.n	8002886 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002884:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a29      	ldr	r2, [pc, #164]	; (8002958 <TIM_Base_SetConfig+0xb8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00b      	beq.n	80028d0 <TIM_Base_SetConfig+0x30>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028be:	d007      	beq.n	80028d0 <TIM_Base_SetConfig+0x30>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a26      	ldr	r2, [pc, #152]	; (800295c <TIM_Base_SetConfig+0xbc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d003      	beq.n	80028d0 <TIM_Base_SetConfig+0x30>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a25      	ldr	r2, [pc, #148]	; (8002960 <TIM_Base_SetConfig+0xc0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d108      	bne.n	80028e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a1c      	ldr	r2, [pc, #112]	; (8002958 <TIM_Base_SetConfig+0xb8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00b      	beq.n	8002902 <TIM_Base_SetConfig+0x62>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f0:	d007      	beq.n	8002902 <TIM_Base_SetConfig+0x62>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a19      	ldr	r2, [pc, #100]	; (800295c <TIM_Base_SetConfig+0xbc>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d003      	beq.n	8002902 <TIM_Base_SetConfig+0x62>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a18      	ldr	r2, [pc, #96]	; (8002960 <TIM_Base_SetConfig+0xc0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d108      	bne.n	8002914 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a07      	ldr	r2, [pc, #28]	; (8002958 <TIM_Base_SetConfig+0xb8>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d103      	bne.n	8002948 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	615a      	str	r2, [r3, #20]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	40012c00 	.word	0x40012c00
 800295c:	40000400 	.word	0x40000400
 8002960:	40000800 	.word	0x40000800

08002964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	f023 0201 	bic.w	r2, r3, #1
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800298e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f023 030a 	bic.w	r3, r3, #10
 80029a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	621a      	str	r2, [r3, #32]
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f023 0210 	bic.w	r2, r3, #16
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	031b      	lsls	r3, r3, #12
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	621a      	str	r2, [r3, #32]
}
 8002a14:	bf00      	nop
 8002a16:	371c      	adds	r7, #28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f043 0307 	orr.w	r3, r3, #7
 8002a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	609a      	str	r2, [r3, #8]
}
 8002a48:	bf00      	nop
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b087      	sub	sp, #28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	021a      	lsls	r2, r3, #8
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	609a      	str	r2, [r3, #8]
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e046      	b.n	8002b36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a16      	ldr	r2, [pc, #88]	; (8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00e      	beq.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af4:	d009      	beq.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d004      	beq.n	8002b0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a10      	ldr	r2, [pc, #64]	; (8002b48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d10c      	bne.n	8002b24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800

08002b4c <__errno>:
 8002b4c:	4b01      	ldr	r3, [pc, #4]	; (8002b54 <__errno+0x8>)
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000010 	.word	0x20000010

08002b58 <__libc_init_array>:
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	2600      	movs	r6, #0
 8002b5c:	4d0c      	ldr	r5, [pc, #48]	; (8002b90 <__libc_init_array+0x38>)
 8002b5e:	4c0d      	ldr	r4, [pc, #52]	; (8002b94 <__libc_init_array+0x3c>)
 8002b60:	1b64      	subs	r4, r4, r5
 8002b62:	10a4      	asrs	r4, r4, #2
 8002b64:	42a6      	cmp	r6, r4
 8002b66:	d109      	bne.n	8002b7c <__libc_init_array+0x24>
 8002b68:	f002 febc 	bl	80058e4 <_init>
 8002b6c:	2600      	movs	r6, #0
 8002b6e:	4d0a      	ldr	r5, [pc, #40]	; (8002b98 <__libc_init_array+0x40>)
 8002b70:	4c0a      	ldr	r4, [pc, #40]	; (8002b9c <__libc_init_array+0x44>)
 8002b72:	1b64      	subs	r4, r4, r5
 8002b74:	10a4      	asrs	r4, r4, #2
 8002b76:	42a6      	cmp	r6, r4
 8002b78:	d105      	bne.n	8002b86 <__libc_init_array+0x2e>
 8002b7a:	bd70      	pop	{r4, r5, r6, pc}
 8002b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b80:	4798      	blx	r3
 8002b82:	3601      	adds	r6, #1
 8002b84:	e7ee      	b.n	8002b64 <__libc_init_array+0xc>
 8002b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8a:	4798      	blx	r3
 8002b8c:	3601      	adds	r6, #1
 8002b8e:	e7f2      	b.n	8002b76 <__libc_init_array+0x1e>
 8002b90:	08005d2c 	.word	0x08005d2c
 8002b94:	08005d2c 	.word	0x08005d2c
 8002b98:	08005d2c 	.word	0x08005d2c
 8002b9c:	08005d30 	.word	0x08005d30

08002ba0 <memset>:
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4402      	add	r2, r0
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d100      	bne.n	8002baa <memset+0xa>
 8002ba8:	4770      	bx	lr
 8002baa:	f803 1b01 	strb.w	r1, [r3], #1
 8002bae:	e7f9      	b.n	8002ba4 <memset+0x4>

08002bb0 <__cvt>:
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bb6:	461f      	mov	r7, r3
 8002bb8:	bfbb      	ittet	lt
 8002bba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002bbe:	461f      	movlt	r7, r3
 8002bc0:	2300      	movge	r3, #0
 8002bc2:	232d      	movlt	r3, #45	; 0x2d
 8002bc4:	b088      	sub	sp, #32
 8002bc6:	4614      	mov	r4, r2
 8002bc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002bca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002bcc:	7013      	strb	r3, [r2, #0]
 8002bce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002bd0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002bd4:	f023 0820 	bic.w	r8, r3, #32
 8002bd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002bdc:	d005      	beq.n	8002bea <__cvt+0x3a>
 8002bde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002be2:	d100      	bne.n	8002be6 <__cvt+0x36>
 8002be4:	3501      	adds	r5, #1
 8002be6:	2302      	movs	r3, #2
 8002be8:	e000      	b.n	8002bec <__cvt+0x3c>
 8002bea:	2303      	movs	r3, #3
 8002bec:	aa07      	add	r2, sp, #28
 8002bee:	9204      	str	r2, [sp, #16]
 8002bf0:	aa06      	add	r2, sp, #24
 8002bf2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002bf6:	e9cd 3500 	strd	r3, r5, [sp]
 8002bfa:	4622      	mov	r2, r4
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	f000 fce7 	bl	80035d0 <_dtoa_r>
 8002c02:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002c06:	4606      	mov	r6, r0
 8002c08:	d102      	bne.n	8002c10 <__cvt+0x60>
 8002c0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002c0c:	07db      	lsls	r3, r3, #31
 8002c0e:	d522      	bpl.n	8002c56 <__cvt+0xa6>
 8002c10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002c14:	eb06 0905 	add.w	r9, r6, r5
 8002c18:	d110      	bne.n	8002c3c <__cvt+0x8c>
 8002c1a:	7833      	ldrb	r3, [r6, #0]
 8002c1c:	2b30      	cmp	r3, #48	; 0x30
 8002c1e:	d10a      	bne.n	8002c36 <__cvt+0x86>
 8002c20:	2200      	movs	r2, #0
 8002c22:	2300      	movs	r3, #0
 8002c24:	4620      	mov	r0, r4
 8002c26:	4639      	mov	r1, r7
 8002c28:	f7fd febe 	bl	80009a8 <__aeabi_dcmpeq>
 8002c2c:	b918      	cbnz	r0, 8002c36 <__cvt+0x86>
 8002c2e:	f1c5 0501 	rsb	r5, r5, #1
 8002c32:	f8ca 5000 	str.w	r5, [sl]
 8002c36:	f8da 3000 	ldr.w	r3, [sl]
 8002c3a:	4499      	add	r9, r3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2300      	movs	r3, #0
 8002c40:	4620      	mov	r0, r4
 8002c42:	4639      	mov	r1, r7
 8002c44:	f7fd feb0 	bl	80009a8 <__aeabi_dcmpeq>
 8002c48:	b108      	cbz	r0, 8002c4e <__cvt+0x9e>
 8002c4a:	f8cd 901c 	str.w	r9, [sp, #28]
 8002c4e:	2230      	movs	r2, #48	; 0x30
 8002c50:	9b07      	ldr	r3, [sp, #28]
 8002c52:	454b      	cmp	r3, r9
 8002c54:	d307      	bcc.n	8002c66 <__cvt+0xb6>
 8002c56:	4630      	mov	r0, r6
 8002c58:	9b07      	ldr	r3, [sp, #28]
 8002c5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002c5c:	1b9b      	subs	r3, r3, r6
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	b008      	add	sp, #32
 8002c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c66:	1c59      	adds	r1, r3, #1
 8002c68:	9107      	str	r1, [sp, #28]
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	e7f0      	b.n	8002c50 <__cvt+0xa0>

08002c6e <__exponent>:
 8002c6e:	4603      	mov	r3, r0
 8002c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c72:	2900      	cmp	r1, #0
 8002c74:	f803 2b02 	strb.w	r2, [r3], #2
 8002c78:	bfb6      	itet	lt
 8002c7a:	222d      	movlt	r2, #45	; 0x2d
 8002c7c:	222b      	movge	r2, #43	; 0x2b
 8002c7e:	4249      	neglt	r1, r1
 8002c80:	2909      	cmp	r1, #9
 8002c82:	7042      	strb	r2, [r0, #1]
 8002c84:	dd2b      	ble.n	8002cde <__exponent+0x70>
 8002c86:	f10d 0407 	add.w	r4, sp, #7
 8002c8a:	46a4      	mov	ip, r4
 8002c8c:	270a      	movs	r7, #10
 8002c8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8002c92:	460a      	mov	r2, r1
 8002c94:	46a6      	mov	lr, r4
 8002c96:	fb07 1516 	mls	r5, r7, r6, r1
 8002c9a:	2a63      	cmp	r2, #99	; 0x63
 8002c9c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002ca0:	4631      	mov	r1, r6
 8002ca2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8002ca6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002caa:	dcf0      	bgt.n	8002c8e <__exponent+0x20>
 8002cac:	3130      	adds	r1, #48	; 0x30
 8002cae:	f1ae 0502 	sub.w	r5, lr, #2
 8002cb2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	1c44      	adds	r4, r0, #1
 8002cba:	4561      	cmp	r1, ip
 8002cbc:	d30a      	bcc.n	8002cd4 <__exponent+0x66>
 8002cbe:	f10d 0209 	add.w	r2, sp, #9
 8002cc2:	eba2 020e 	sub.w	r2, r2, lr
 8002cc6:	4565      	cmp	r5, ip
 8002cc8:	bf88      	it	hi
 8002cca:	2200      	movhi	r2, #0
 8002ccc:	4413      	add	r3, r2
 8002cce:	1a18      	subs	r0, r3, r0
 8002cd0:	b003      	add	sp, #12
 8002cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cd4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002cd8:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002cdc:	e7ed      	b.n	8002cba <__exponent+0x4c>
 8002cde:	2330      	movs	r3, #48	; 0x30
 8002ce0:	3130      	adds	r1, #48	; 0x30
 8002ce2:	7083      	strb	r3, [r0, #2]
 8002ce4:	70c1      	strb	r1, [r0, #3]
 8002ce6:	1d03      	adds	r3, r0, #4
 8002ce8:	e7f1      	b.n	8002cce <__exponent+0x60>
	...

08002cec <_printf_float>:
 8002cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf0:	b091      	sub	sp, #68	; 0x44
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002cf8:	4616      	mov	r6, r2
 8002cfa:	461f      	mov	r7, r3
 8002cfc:	4605      	mov	r5, r0
 8002cfe:	f001 fa55 	bl	80041ac <_localeconv_r>
 8002d02:	6803      	ldr	r3, [r0, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	9309      	str	r3, [sp, #36]	; 0x24
 8002d08:	f7fd fa22 	bl	8000150 <strlen>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	930e      	str	r3, [sp, #56]	; 0x38
 8002d10:	f8d8 3000 	ldr.w	r3, [r8]
 8002d14:	900a      	str	r0, [sp, #40]	; 0x28
 8002d16:	3307      	adds	r3, #7
 8002d18:	f023 0307 	bic.w	r3, r3, #7
 8002d1c:	f103 0208 	add.w	r2, r3, #8
 8002d20:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002d24:	f8d4 b000 	ldr.w	fp, [r4]
 8002d28:	f8c8 2000 	str.w	r2, [r8]
 8002d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d30:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002d34:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002d38:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002d3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d42:	4640      	mov	r0, r8
 8002d44:	4b9c      	ldr	r3, [pc, #624]	; (8002fb8 <_printf_float+0x2cc>)
 8002d46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d48:	f7fd fe60 	bl	8000a0c <__aeabi_dcmpun>
 8002d4c:	bb70      	cbnz	r0, 8002dac <_printf_float+0xc0>
 8002d4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d52:	4640      	mov	r0, r8
 8002d54:	4b98      	ldr	r3, [pc, #608]	; (8002fb8 <_printf_float+0x2cc>)
 8002d56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d58:	f7fd fe3a 	bl	80009d0 <__aeabi_dcmple>
 8002d5c:	bb30      	cbnz	r0, 8002dac <_printf_float+0xc0>
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2300      	movs	r3, #0
 8002d62:	4640      	mov	r0, r8
 8002d64:	4651      	mov	r1, sl
 8002d66:	f7fd fe29 	bl	80009bc <__aeabi_dcmplt>
 8002d6a:	b110      	cbz	r0, 8002d72 <_printf_float+0x86>
 8002d6c:	232d      	movs	r3, #45	; 0x2d
 8002d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d72:	4b92      	ldr	r3, [pc, #584]	; (8002fbc <_printf_float+0x2d0>)
 8002d74:	4892      	ldr	r0, [pc, #584]	; (8002fc0 <_printf_float+0x2d4>)
 8002d76:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002d7a:	bf94      	ite	ls
 8002d7c:	4698      	movls	r8, r3
 8002d7e:	4680      	movhi	r8, r0
 8002d80:	2303      	movs	r3, #3
 8002d82:	f04f 0a00 	mov.w	sl, #0
 8002d86:	6123      	str	r3, [r4, #16]
 8002d88:	f02b 0304 	bic.w	r3, fp, #4
 8002d8c:	6023      	str	r3, [r4, #0]
 8002d8e:	4633      	mov	r3, r6
 8002d90:	4621      	mov	r1, r4
 8002d92:	4628      	mov	r0, r5
 8002d94:	9700      	str	r7, [sp, #0]
 8002d96:	aa0f      	add	r2, sp, #60	; 0x3c
 8002d98:	f000 f9d4 	bl	8003144 <_printf_common>
 8002d9c:	3001      	adds	r0, #1
 8002d9e:	f040 8090 	bne.w	8002ec2 <_printf_float+0x1d6>
 8002da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002da6:	b011      	add	sp, #68	; 0x44
 8002da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dac:	4642      	mov	r2, r8
 8002dae:	4653      	mov	r3, sl
 8002db0:	4640      	mov	r0, r8
 8002db2:	4651      	mov	r1, sl
 8002db4:	f7fd fe2a 	bl	8000a0c <__aeabi_dcmpun>
 8002db8:	b148      	cbz	r0, 8002dce <_printf_float+0xe2>
 8002dba:	f1ba 0f00 	cmp.w	sl, #0
 8002dbe:	bfb8      	it	lt
 8002dc0:	232d      	movlt	r3, #45	; 0x2d
 8002dc2:	4880      	ldr	r0, [pc, #512]	; (8002fc4 <_printf_float+0x2d8>)
 8002dc4:	bfb8      	it	lt
 8002dc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002dca:	4b7f      	ldr	r3, [pc, #508]	; (8002fc8 <_printf_float+0x2dc>)
 8002dcc:	e7d3      	b.n	8002d76 <_printf_float+0x8a>
 8002dce:	6863      	ldr	r3, [r4, #4]
 8002dd0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	d142      	bne.n	8002e5e <_printf_float+0x172>
 8002dd8:	2306      	movs	r3, #6
 8002dda:	6063      	str	r3, [r4, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	9206      	str	r2, [sp, #24]
 8002de0:	aa0e      	add	r2, sp, #56	; 0x38
 8002de2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002de6:	aa0d      	add	r2, sp, #52	; 0x34
 8002de8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002dec:	9203      	str	r2, [sp, #12]
 8002dee:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002df2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002df6:	6023      	str	r3, [r4, #0]
 8002df8:	6863      	ldr	r3, [r4, #4]
 8002dfa:	4642      	mov	r2, r8
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	4628      	mov	r0, r5
 8002e00:	4653      	mov	r3, sl
 8002e02:	910b      	str	r1, [sp, #44]	; 0x2c
 8002e04:	f7ff fed4 	bl	8002bb0 <__cvt>
 8002e08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e0a:	4680      	mov	r8, r0
 8002e0c:	2947      	cmp	r1, #71	; 0x47
 8002e0e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002e10:	d108      	bne.n	8002e24 <_printf_float+0x138>
 8002e12:	1cc8      	adds	r0, r1, #3
 8002e14:	db02      	blt.n	8002e1c <_printf_float+0x130>
 8002e16:	6863      	ldr	r3, [r4, #4]
 8002e18:	4299      	cmp	r1, r3
 8002e1a:	dd40      	ble.n	8002e9e <_printf_float+0x1b2>
 8002e1c:	f1a9 0902 	sub.w	r9, r9, #2
 8002e20:	fa5f f989 	uxtb.w	r9, r9
 8002e24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002e28:	d81f      	bhi.n	8002e6a <_printf_float+0x17e>
 8002e2a:	464a      	mov	r2, r9
 8002e2c:	3901      	subs	r1, #1
 8002e2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002e32:	910d      	str	r1, [sp, #52]	; 0x34
 8002e34:	f7ff ff1b 	bl	8002c6e <__exponent>
 8002e38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e3a:	4682      	mov	sl, r0
 8002e3c:	1813      	adds	r3, r2, r0
 8002e3e:	2a01      	cmp	r2, #1
 8002e40:	6123      	str	r3, [r4, #16]
 8002e42:	dc02      	bgt.n	8002e4a <_printf_float+0x15e>
 8002e44:	6822      	ldr	r2, [r4, #0]
 8002e46:	07d2      	lsls	r2, r2, #31
 8002e48:	d501      	bpl.n	8002e4e <_printf_float+0x162>
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	6123      	str	r3, [r4, #16]
 8002e4e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d09b      	beq.n	8002d8e <_printf_float+0xa2>
 8002e56:	232d      	movs	r3, #45	; 0x2d
 8002e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e5c:	e797      	b.n	8002d8e <_printf_float+0xa2>
 8002e5e:	2947      	cmp	r1, #71	; 0x47
 8002e60:	d1bc      	bne.n	8002ddc <_printf_float+0xf0>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1ba      	bne.n	8002ddc <_printf_float+0xf0>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e7b7      	b.n	8002dda <_printf_float+0xee>
 8002e6a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002e6e:	d118      	bne.n	8002ea2 <_printf_float+0x1b6>
 8002e70:	2900      	cmp	r1, #0
 8002e72:	6863      	ldr	r3, [r4, #4]
 8002e74:	dd0b      	ble.n	8002e8e <_printf_float+0x1a2>
 8002e76:	6121      	str	r1, [r4, #16]
 8002e78:	b913      	cbnz	r3, 8002e80 <_printf_float+0x194>
 8002e7a:	6822      	ldr	r2, [r4, #0]
 8002e7c:	07d0      	lsls	r0, r2, #31
 8002e7e:	d502      	bpl.n	8002e86 <_printf_float+0x19a>
 8002e80:	3301      	adds	r3, #1
 8002e82:	440b      	add	r3, r1
 8002e84:	6123      	str	r3, [r4, #16]
 8002e86:	f04f 0a00 	mov.w	sl, #0
 8002e8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8002e8c:	e7df      	b.n	8002e4e <_printf_float+0x162>
 8002e8e:	b913      	cbnz	r3, 8002e96 <_printf_float+0x1aa>
 8002e90:	6822      	ldr	r2, [r4, #0]
 8002e92:	07d2      	lsls	r2, r2, #31
 8002e94:	d501      	bpl.n	8002e9a <_printf_float+0x1ae>
 8002e96:	3302      	adds	r3, #2
 8002e98:	e7f4      	b.n	8002e84 <_printf_float+0x198>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e7f2      	b.n	8002e84 <_printf_float+0x198>
 8002e9e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ea4:	4299      	cmp	r1, r3
 8002ea6:	db05      	blt.n	8002eb4 <_printf_float+0x1c8>
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	6121      	str	r1, [r4, #16]
 8002eac:	07d8      	lsls	r0, r3, #31
 8002eae:	d5ea      	bpl.n	8002e86 <_printf_float+0x19a>
 8002eb0:	1c4b      	adds	r3, r1, #1
 8002eb2:	e7e7      	b.n	8002e84 <_printf_float+0x198>
 8002eb4:	2900      	cmp	r1, #0
 8002eb6:	bfcc      	ite	gt
 8002eb8:	2201      	movgt	r2, #1
 8002eba:	f1c1 0202 	rsble	r2, r1, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	e7e0      	b.n	8002e84 <_printf_float+0x198>
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	055a      	lsls	r2, r3, #21
 8002ec6:	d407      	bmi.n	8002ed8 <_printf_float+0x1ec>
 8002ec8:	6923      	ldr	r3, [r4, #16]
 8002eca:	4642      	mov	r2, r8
 8002ecc:	4631      	mov	r1, r6
 8002ece:	4628      	mov	r0, r5
 8002ed0:	47b8      	blx	r7
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	d12b      	bne.n	8002f2e <_printf_float+0x242>
 8002ed6:	e764      	b.n	8002da2 <_printf_float+0xb6>
 8002ed8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002edc:	f240 80dd 	bls.w	800309a <_printf_float+0x3ae>
 8002ee0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f7fd fd5e 	bl	80009a8 <__aeabi_dcmpeq>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d033      	beq.n	8002f58 <_printf_float+0x26c>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	4631      	mov	r1, r6
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	4a35      	ldr	r2, [pc, #212]	; (8002fcc <_printf_float+0x2e0>)
 8002ef8:	47b8      	blx	r7
 8002efa:	3001      	adds	r0, #1
 8002efc:	f43f af51 	beq.w	8002da2 <_printf_float+0xb6>
 8002f00:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f04:	429a      	cmp	r2, r3
 8002f06:	db02      	blt.n	8002f0e <_printf_float+0x222>
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	07d8      	lsls	r0, r3, #31
 8002f0c:	d50f      	bpl.n	8002f2e <_printf_float+0x242>
 8002f0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f12:	4631      	mov	r1, r6
 8002f14:	4628      	mov	r0, r5
 8002f16:	47b8      	blx	r7
 8002f18:	3001      	adds	r0, #1
 8002f1a:	f43f af42 	beq.w	8002da2 <_printf_float+0xb6>
 8002f1e:	f04f 0800 	mov.w	r8, #0
 8002f22:	f104 091a 	add.w	r9, r4, #26
 8002f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	4543      	cmp	r3, r8
 8002f2c:	dc09      	bgt.n	8002f42 <_printf_float+0x256>
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	079b      	lsls	r3, r3, #30
 8002f32:	f100 8102 	bmi.w	800313a <_printf_float+0x44e>
 8002f36:	68e0      	ldr	r0, [r4, #12]
 8002f38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002f3a:	4298      	cmp	r0, r3
 8002f3c:	bfb8      	it	lt
 8002f3e:	4618      	movlt	r0, r3
 8002f40:	e731      	b.n	8002da6 <_printf_float+0xba>
 8002f42:	2301      	movs	r3, #1
 8002f44:	464a      	mov	r2, r9
 8002f46:	4631      	mov	r1, r6
 8002f48:	4628      	mov	r0, r5
 8002f4a:	47b8      	blx	r7
 8002f4c:	3001      	adds	r0, #1
 8002f4e:	f43f af28 	beq.w	8002da2 <_printf_float+0xb6>
 8002f52:	f108 0801 	add.w	r8, r8, #1
 8002f56:	e7e6      	b.n	8002f26 <_printf_float+0x23a>
 8002f58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	dc38      	bgt.n	8002fd0 <_printf_float+0x2e4>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	4631      	mov	r1, r6
 8002f62:	4628      	mov	r0, r5
 8002f64:	4a19      	ldr	r2, [pc, #100]	; (8002fcc <_printf_float+0x2e0>)
 8002f66:	47b8      	blx	r7
 8002f68:	3001      	adds	r0, #1
 8002f6a:	f43f af1a 	beq.w	8002da2 <_printf_float+0xb6>
 8002f6e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f72:	4313      	orrs	r3, r2
 8002f74:	d102      	bne.n	8002f7c <_printf_float+0x290>
 8002f76:	6823      	ldr	r3, [r4, #0]
 8002f78:	07d9      	lsls	r1, r3, #31
 8002f7a:	d5d8      	bpl.n	8002f2e <_printf_float+0x242>
 8002f7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f80:	4631      	mov	r1, r6
 8002f82:	4628      	mov	r0, r5
 8002f84:	47b8      	blx	r7
 8002f86:	3001      	adds	r0, #1
 8002f88:	f43f af0b 	beq.w	8002da2 <_printf_float+0xb6>
 8002f8c:	f04f 0900 	mov.w	r9, #0
 8002f90:	f104 0a1a 	add.w	sl, r4, #26
 8002f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f96:	425b      	negs	r3, r3
 8002f98:	454b      	cmp	r3, r9
 8002f9a:	dc01      	bgt.n	8002fa0 <_printf_float+0x2b4>
 8002f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f9e:	e794      	b.n	8002eca <_printf_float+0x1de>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	4652      	mov	r2, sl
 8002fa4:	4631      	mov	r1, r6
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	47b8      	blx	r7
 8002faa:	3001      	adds	r0, #1
 8002fac:	f43f aef9 	beq.w	8002da2 <_printf_float+0xb6>
 8002fb0:	f109 0901 	add.w	r9, r9, #1
 8002fb4:	e7ee      	b.n	8002f94 <_printf_float+0x2a8>
 8002fb6:	bf00      	nop
 8002fb8:	7fefffff 	.word	0x7fefffff
 8002fbc:	0800594c 	.word	0x0800594c
 8002fc0:	08005950 	.word	0x08005950
 8002fc4:	08005958 	.word	0x08005958
 8002fc8:	08005954 	.word	0x08005954
 8002fcc:	0800595c 	.word	0x0800595c
 8002fd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	bfa8      	it	ge
 8002fd8:	461a      	movge	r2, r3
 8002fda:	2a00      	cmp	r2, #0
 8002fdc:	4691      	mov	r9, r2
 8002fde:	dc37      	bgt.n	8003050 <_printf_float+0x364>
 8002fe0:	f04f 0b00 	mov.w	fp, #0
 8002fe4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002fe8:	f104 021a 	add.w	r2, r4, #26
 8002fec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002ff0:	ebaa 0309 	sub.w	r3, sl, r9
 8002ff4:	455b      	cmp	r3, fp
 8002ff6:	dc33      	bgt.n	8003060 <_printf_float+0x374>
 8002ff8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	db3b      	blt.n	8003078 <_printf_float+0x38c>
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	07da      	lsls	r2, r3, #31
 8003004:	d438      	bmi.n	8003078 <_printf_float+0x38c>
 8003006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003008:	990d      	ldr	r1, [sp, #52]	; 0x34
 800300a:	eba2 030a 	sub.w	r3, r2, sl
 800300e:	eba2 0901 	sub.w	r9, r2, r1
 8003012:	4599      	cmp	r9, r3
 8003014:	bfa8      	it	ge
 8003016:	4699      	movge	r9, r3
 8003018:	f1b9 0f00 	cmp.w	r9, #0
 800301c:	dc34      	bgt.n	8003088 <_printf_float+0x39c>
 800301e:	f04f 0800 	mov.w	r8, #0
 8003022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003026:	f104 0a1a 	add.w	sl, r4, #26
 800302a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	eba3 0309 	sub.w	r3, r3, r9
 8003034:	4543      	cmp	r3, r8
 8003036:	f77f af7a 	ble.w	8002f2e <_printf_float+0x242>
 800303a:	2301      	movs	r3, #1
 800303c:	4652      	mov	r2, sl
 800303e:	4631      	mov	r1, r6
 8003040:	4628      	mov	r0, r5
 8003042:	47b8      	blx	r7
 8003044:	3001      	adds	r0, #1
 8003046:	f43f aeac 	beq.w	8002da2 <_printf_float+0xb6>
 800304a:	f108 0801 	add.w	r8, r8, #1
 800304e:	e7ec      	b.n	800302a <_printf_float+0x33e>
 8003050:	4613      	mov	r3, r2
 8003052:	4631      	mov	r1, r6
 8003054:	4642      	mov	r2, r8
 8003056:	4628      	mov	r0, r5
 8003058:	47b8      	blx	r7
 800305a:	3001      	adds	r0, #1
 800305c:	d1c0      	bne.n	8002fe0 <_printf_float+0x2f4>
 800305e:	e6a0      	b.n	8002da2 <_printf_float+0xb6>
 8003060:	2301      	movs	r3, #1
 8003062:	4631      	mov	r1, r6
 8003064:	4628      	mov	r0, r5
 8003066:	920b      	str	r2, [sp, #44]	; 0x2c
 8003068:	47b8      	blx	r7
 800306a:	3001      	adds	r0, #1
 800306c:	f43f ae99 	beq.w	8002da2 <_printf_float+0xb6>
 8003070:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003072:	f10b 0b01 	add.w	fp, fp, #1
 8003076:	e7b9      	b.n	8002fec <_printf_float+0x300>
 8003078:	4631      	mov	r1, r6
 800307a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800307e:	4628      	mov	r0, r5
 8003080:	47b8      	blx	r7
 8003082:	3001      	adds	r0, #1
 8003084:	d1bf      	bne.n	8003006 <_printf_float+0x31a>
 8003086:	e68c      	b.n	8002da2 <_printf_float+0xb6>
 8003088:	464b      	mov	r3, r9
 800308a:	4631      	mov	r1, r6
 800308c:	4628      	mov	r0, r5
 800308e:	eb08 020a 	add.w	r2, r8, sl
 8003092:	47b8      	blx	r7
 8003094:	3001      	adds	r0, #1
 8003096:	d1c2      	bne.n	800301e <_printf_float+0x332>
 8003098:	e683      	b.n	8002da2 <_printf_float+0xb6>
 800309a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800309c:	2a01      	cmp	r2, #1
 800309e:	dc01      	bgt.n	80030a4 <_printf_float+0x3b8>
 80030a0:	07db      	lsls	r3, r3, #31
 80030a2:	d537      	bpl.n	8003114 <_printf_float+0x428>
 80030a4:	2301      	movs	r3, #1
 80030a6:	4642      	mov	r2, r8
 80030a8:	4631      	mov	r1, r6
 80030aa:	4628      	mov	r0, r5
 80030ac:	47b8      	blx	r7
 80030ae:	3001      	adds	r0, #1
 80030b0:	f43f ae77 	beq.w	8002da2 <_printf_float+0xb6>
 80030b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80030b8:	4631      	mov	r1, r6
 80030ba:	4628      	mov	r0, r5
 80030bc:	47b8      	blx	r7
 80030be:	3001      	adds	r0, #1
 80030c0:	f43f ae6f 	beq.w	8002da2 <_printf_float+0xb6>
 80030c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80030c8:	2200      	movs	r2, #0
 80030ca:	2300      	movs	r3, #0
 80030cc:	f7fd fc6c 	bl	80009a8 <__aeabi_dcmpeq>
 80030d0:	b9d8      	cbnz	r0, 800310a <_printf_float+0x41e>
 80030d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030d4:	f108 0201 	add.w	r2, r8, #1
 80030d8:	3b01      	subs	r3, #1
 80030da:	4631      	mov	r1, r6
 80030dc:	4628      	mov	r0, r5
 80030de:	47b8      	blx	r7
 80030e0:	3001      	adds	r0, #1
 80030e2:	d10e      	bne.n	8003102 <_printf_float+0x416>
 80030e4:	e65d      	b.n	8002da2 <_printf_float+0xb6>
 80030e6:	2301      	movs	r3, #1
 80030e8:	464a      	mov	r2, r9
 80030ea:	4631      	mov	r1, r6
 80030ec:	4628      	mov	r0, r5
 80030ee:	47b8      	blx	r7
 80030f0:	3001      	adds	r0, #1
 80030f2:	f43f ae56 	beq.w	8002da2 <_printf_float+0xb6>
 80030f6:	f108 0801 	add.w	r8, r8, #1
 80030fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030fc:	3b01      	subs	r3, #1
 80030fe:	4543      	cmp	r3, r8
 8003100:	dcf1      	bgt.n	80030e6 <_printf_float+0x3fa>
 8003102:	4653      	mov	r3, sl
 8003104:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003108:	e6e0      	b.n	8002ecc <_printf_float+0x1e0>
 800310a:	f04f 0800 	mov.w	r8, #0
 800310e:	f104 091a 	add.w	r9, r4, #26
 8003112:	e7f2      	b.n	80030fa <_printf_float+0x40e>
 8003114:	2301      	movs	r3, #1
 8003116:	4642      	mov	r2, r8
 8003118:	e7df      	b.n	80030da <_printf_float+0x3ee>
 800311a:	2301      	movs	r3, #1
 800311c:	464a      	mov	r2, r9
 800311e:	4631      	mov	r1, r6
 8003120:	4628      	mov	r0, r5
 8003122:	47b8      	blx	r7
 8003124:	3001      	adds	r0, #1
 8003126:	f43f ae3c 	beq.w	8002da2 <_printf_float+0xb6>
 800312a:	f108 0801 	add.w	r8, r8, #1
 800312e:	68e3      	ldr	r3, [r4, #12]
 8003130:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003132:	1a5b      	subs	r3, r3, r1
 8003134:	4543      	cmp	r3, r8
 8003136:	dcf0      	bgt.n	800311a <_printf_float+0x42e>
 8003138:	e6fd      	b.n	8002f36 <_printf_float+0x24a>
 800313a:	f04f 0800 	mov.w	r8, #0
 800313e:	f104 0919 	add.w	r9, r4, #25
 8003142:	e7f4      	b.n	800312e <_printf_float+0x442>

08003144 <_printf_common>:
 8003144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003148:	4616      	mov	r6, r2
 800314a:	4699      	mov	r9, r3
 800314c:	688a      	ldr	r2, [r1, #8]
 800314e:	690b      	ldr	r3, [r1, #16]
 8003150:	4607      	mov	r7, r0
 8003152:	4293      	cmp	r3, r2
 8003154:	bfb8      	it	lt
 8003156:	4613      	movlt	r3, r2
 8003158:	6033      	str	r3, [r6, #0]
 800315a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800315e:	460c      	mov	r4, r1
 8003160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003164:	b10a      	cbz	r2, 800316a <_printf_common+0x26>
 8003166:	3301      	adds	r3, #1
 8003168:	6033      	str	r3, [r6, #0]
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	0699      	lsls	r1, r3, #26
 800316e:	bf42      	ittt	mi
 8003170:	6833      	ldrmi	r3, [r6, #0]
 8003172:	3302      	addmi	r3, #2
 8003174:	6033      	strmi	r3, [r6, #0]
 8003176:	6825      	ldr	r5, [r4, #0]
 8003178:	f015 0506 	ands.w	r5, r5, #6
 800317c:	d106      	bne.n	800318c <_printf_common+0x48>
 800317e:	f104 0a19 	add.w	sl, r4, #25
 8003182:	68e3      	ldr	r3, [r4, #12]
 8003184:	6832      	ldr	r2, [r6, #0]
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	42ab      	cmp	r3, r5
 800318a:	dc28      	bgt.n	80031de <_printf_common+0x9a>
 800318c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003190:	1e13      	subs	r3, r2, #0
 8003192:	6822      	ldr	r2, [r4, #0]
 8003194:	bf18      	it	ne
 8003196:	2301      	movne	r3, #1
 8003198:	0692      	lsls	r2, r2, #26
 800319a:	d42d      	bmi.n	80031f8 <_printf_common+0xb4>
 800319c:	4649      	mov	r1, r9
 800319e:	4638      	mov	r0, r7
 80031a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031a4:	47c0      	blx	r8
 80031a6:	3001      	adds	r0, #1
 80031a8:	d020      	beq.n	80031ec <_printf_common+0xa8>
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	68e5      	ldr	r5, [r4, #12]
 80031ae:	f003 0306 	and.w	r3, r3, #6
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	bf18      	it	ne
 80031b6:	2500      	movne	r5, #0
 80031b8:	6832      	ldr	r2, [r6, #0]
 80031ba:	f04f 0600 	mov.w	r6, #0
 80031be:	68a3      	ldr	r3, [r4, #8]
 80031c0:	bf08      	it	eq
 80031c2:	1aad      	subeq	r5, r5, r2
 80031c4:	6922      	ldr	r2, [r4, #16]
 80031c6:	bf08      	it	eq
 80031c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031cc:	4293      	cmp	r3, r2
 80031ce:	bfc4      	itt	gt
 80031d0:	1a9b      	subgt	r3, r3, r2
 80031d2:	18ed      	addgt	r5, r5, r3
 80031d4:	341a      	adds	r4, #26
 80031d6:	42b5      	cmp	r5, r6
 80031d8:	d11a      	bne.n	8003210 <_printf_common+0xcc>
 80031da:	2000      	movs	r0, #0
 80031dc:	e008      	b.n	80031f0 <_printf_common+0xac>
 80031de:	2301      	movs	r3, #1
 80031e0:	4652      	mov	r2, sl
 80031e2:	4649      	mov	r1, r9
 80031e4:	4638      	mov	r0, r7
 80031e6:	47c0      	blx	r8
 80031e8:	3001      	adds	r0, #1
 80031ea:	d103      	bne.n	80031f4 <_printf_common+0xb0>
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f4:	3501      	adds	r5, #1
 80031f6:	e7c4      	b.n	8003182 <_printf_common+0x3e>
 80031f8:	2030      	movs	r0, #48	; 0x30
 80031fa:	18e1      	adds	r1, r4, r3
 80031fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003206:	4422      	add	r2, r4
 8003208:	3302      	adds	r3, #2
 800320a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800320e:	e7c5      	b.n	800319c <_printf_common+0x58>
 8003210:	2301      	movs	r3, #1
 8003212:	4622      	mov	r2, r4
 8003214:	4649      	mov	r1, r9
 8003216:	4638      	mov	r0, r7
 8003218:	47c0      	blx	r8
 800321a:	3001      	adds	r0, #1
 800321c:	d0e6      	beq.n	80031ec <_printf_common+0xa8>
 800321e:	3601      	adds	r6, #1
 8003220:	e7d9      	b.n	80031d6 <_printf_common+0x92>
	...

08003224 <_printf_i>:
 8003224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003228:	460c      	mov	r4, r1
 800322a:	7e27      	ldrb	r7, [r4, #24]
 800322c:	4691      	mov	r9, r2
 800322e:	2f78      	cmp	r7, #120	; 0x78
 8003230:	4680      	mov	r8, r0
 8003232:	469a      	mov	sl, r3
 8003234:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003236:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800323a:	d807      	bhi.n	800324c <_printf_i+0x28>
 800323c:	2f62      	cmp	r7, #98	; 0x62
 800323e:	d80a      	bhi.n	8003256 <_printf_i+0x32>
 8003240:	2f00      	cmp	r7, #0
 8003242:	f000 80d9 	beq.w	80033f8 <_printf_i+0x1d4>
 8003246:	2f58      	cmp	r7, #88	; 0x58
 8003248:	f000 80a4 	beq.w	8003394 <_printf_i+0x170>
 800324c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003254:	e03a      	b.n	80032cc <_printf_i+0xa8>
 8003256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800325a:	2b15      	cmp	r3, #21
 800325c:	d8f6      	bhi.n	800324c <_printf_i+0x28>
 800325e:	a001      	add	r0, pc, #4	; (adr r0, 8003264 <_printf_i+0x40>)
 8003260:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003264:	080032bd 	.word	0x080032bd
 8003268:	080032d1 	.word	0x080032d1
 800326c:	0800324d 	.word	0x0800324d
 8003270:	0800324d 	.word	0x0800324d
 8003274:	0800324d 	.word	0x0800324d
 8003278:	0800324d 	.word	0x0800324d
 800327c:	080032d1 	.word	0x080032d1
 8003280:	0800324d 	.word	0x0800324d
 8003284:	0800324d 	.word	0x0800324d
 8003288:	0800324d 	.word	0x0800324d
 800328c:	0800324d 	.word	0x0800324d
 8003290:	080033df 	.word	0x080033df
 8003294:	08003301 	.word	0x08003301
 8003298:	080033c1 	.word	0x080033c1
 800329c:	0800324d 	.word	0x0800324d
 80032a0:	0800324d 	.word	0x0800324d
 80032a4:	08003401 	.word	0x08003401
 80032a8:	0800324d 	.word	0x0800324d
 80032ac:	08003301 	.word	0x08003301
 80032b0:	0800324d 	.word	0x0800324d
 80032b4:	0800324d 	.word	0x0800324d
 80032b8:	080033c9 	.word	0x080033c9
 80032bc:	680b      	ldr	r3, [r1, #0]
 80032be:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80032c2:	1d1a      	adds	r2, r3, #4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	600a      	str	r2, [r1, #0]
 80032c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0a4      	b.n	800341a <_printf_i+0x1f6>
 80032d0:	6825      	ldr	r5, [r4, #0]
 80032d2:	6808      	ldr	r0, [r1, #0]
 80032d4:	062e      	lsls	r6, r5, #24
 80032d6:	f100 0304 	add.w	r3, r0, #4
 80032da:	d50a      	bpl.n	80032f2 <_printf_i+0xce>
 80032dc:	6805      	ldr	r5, [r0, #0]
 80032de:	600b      	str	r3, [r1, #0]
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	da03      	bge.n	80032ec <_printf_i+0xc8>
 80032e4:	232d      	movs	r3, #45	; 0x2d
 80032e6:	426d      	negs	r5, r5
 80032e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032ec:	230a      	movs	r3, #10
 80032ee:	485e      	ldr	r0, [pc, #376]	; (8003468 <_printf_i+0x244>)
 80032f0:	e019      	b.n	8003326 <_printf_i+0x102>
 80032f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80032f6:	6805      	ldr	r5, [r0, #0]
 80032f8:	600b      	str	r3, [r1, #0]
 80032fa:	bf18      	it	ne
 80032fc:	b22d      	sxthne	r5, r5
 80032fe:	e7ef      	b.n	80032e0 <_printf_i+0xbc>
 8003300:	680b      	ldr	r3, [r1, #0]
 8003302:	6825      	ldr	r5, [r4, #0]
 8003304:	1d18      	adds	r0, r3, #4
 8003306:	6008      	str	r0, [r1, #0]
 8003308:	0628      	lsls	r0, r5, #24
 800330a:	d501      	bpl.n	8003310 <_printf_i+0xec>
 800330c:	681d      	ldr	r5, [r3, #0]
 800330e:	e002      	b.n	8003316 <_printf_i+0xf2>
 8003310:	0669      	lsls	r1, r5, #25
 8003312:	d5fb      	bpl.n	800330c <_printf_i+0xe8>
 8003314:	881d      	ldrh	r5, [r3, #0]
 8003316:	2f6f      	cmp	r7, #111	; 0x6f
 8003318:	bf0c      	ite	eq
 800331a:	2308      	moveq	r3, #8
 800331c:	230a      	movne	r3, #10
 800331e:	4852      	ldr	r0, [pc, #328]	; (8003468 <_printf_i+0x244>)
 8003320:	2100      	movs	r1, #0
 8003322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003326:	6866      	ldr	r6, [r4, #4]
 8003328:	2e00      	cmp	r6, #0
 800332a:	bfa8      	it	ge
 800332c:	6821      	ldrge	r1, [r4, #0]
 800332e:	60a6      	str	r6, [r4, #8]
 8003330:	bfa4      	itt	ge
 8003332:	f021 0104 	bicge.w	r1, r1, #4
 8003336:	6021      	strge	r1, [r4, #0]
 8003338:	b90d      	cbnz	r5, 800333e <_printf_i+0x11a>
 800333a:	2e00      	cmp	r6, #0
 800333c:	d04d      	beq.n	80033da <_printf_i+0x1b6>
 800333e:	4616      	mov	r6, r2
 8003340:	fbb5 f1f3 	udiv	r1, r5, r3
 8003344:	fb03 5711 	mls	r7, r3, r1, r5
 8003348:	5dc7      	ldrb	r7, [r0, r7]
 800334a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800334e:	462f      	mov	r7, r5
 8003350:	42bb      	cmp	r3, r7
 8003352:	460d      	mov	r5, r1
 8003354:	d9f4      	bls.n	8003340 <_printf_i+0x11c>
 8003356:	2b08      	cmp	r3, #8
 8003358:	d10b      	bne.n	8003372 <_printf_i+0x14e>
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	07df      	lsls	r7, r3, #31
 800335e:	d508      	bpl.n	8003372 <_printf_i+0x14e>
 8003360:	6923      	ldr	r3, [r4, #16]
 8003362:	6861      	ldr	r1, [r4, #4]
 8003364:	4299      	cmp	r1, r3
 8003366:	bfde      	ittt	le
 8003368:	2330      	movle	r3, #48	; 0x30
 800336a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800336e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003372:	1b92      	subs	r2, r2, r6
 8003374:	6122      	str	r2, [r4, #16]
 8003376:	464b      	mov	r3, r9
 8003378:	4621      	mov	r1, r4
 800337a:	4640      	mov	r0, r8
 800337c:	f8cd a000 	str.w	sl, [sp]
 8003380:	aa03      	add	r2, sp, #12
 8003382:	f7ff fedf 	bl	8003144 <_printf_common>
 8003386:	3001      	adds	r0, #1
 8003388:	d14c      	bne.n	8003424 <_printf_i+0x200>
 800338a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800338e:	b004      	add	sp, #16
 8003390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003394:	4834      	ldr	r0, [pc, #208]	; (8003468 <_printf_i+0x244>)
 8003396:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800339a:	680e      	ldr	r6, [r1, #0]
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	f856 5b04 	ldr.w	r5, [r6], #4
 80033a2:	061f      	lsls	r7, r3, #24
 80033a4:	600e      	str	r6, [r1, #0]
 80033a6:	d514      	bpl.n	80033d2 <_printf_i+0x1ae>
 80033a8:	07d9      	lsls	r1, r3, #31
 80033aa:	bf44      	itt	mi
 80033ac:	f043 0320 	orrmi.w	r3, r3, #32
 80033b0:	6023      	strmi	r3, [r4, #0]
 80033b2:	b91d      	cbnz	r5, 80033bc <_printf_i+0x198>
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	f023 0320 	bic.w	r3, r3, #32
 80033ba:	6023      	str	r3, [r4, #0]
 80033bc:	2310      	movs	r3, #16
 80033be:	e7af      	b.n	8003320 <_printf_i+0xfc>
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	f043 0320 	orr.w	r3, r3, #32
 80033c6:	6023      	str	r3, [r4, #0]
 80033c8:	2378      	movs	r3, #120	; 0x78
 80033ca:	4828      	ldr	r0, [pc, #160]	; (800346c <_printf_i+0x248>)
 80033cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033d0:	e7e3      	b.n	800339a <_printf_i+0x176>
 80033d2:	065e      	lsls	r6, r3, #25
 80033d4:	bf48      	it	mi
 80033d6:	b2ad      	uxthmi	r5, r5
 80033d8:	e7e6      	b.n	80033a8 <_printf_i+0x184>
 80033da:	4616      	mov	r6, r2
 80033dc:	e7bb      	b.n	8003356 <_printf_i+0x132>
 80033de:	680b      	ldr	r3, [r1, #0]
 80033e0:	6826      	ldr	r6, [r4, #0]
 80033e2:	1d1d      	adds	r5, r3, #4
 80033e4:	6960      	ldr	r0, [r4, #20]
 80033e6:	600d      	str	r5, [r1, #0]
 80033e8:	0635      	lsls	r5, r6, #24
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	d501      	bpl.n	80033f2 <_printf_i+0x1ce>
 80033ee:	6018      	str	r0, [r3, #0]
 80033f0:	e002      	b.n	80033f8 <_printf_i+0x1d4>
 80033f2:	0671      	lsls	r1, r6, #25
 80033f4:	d5fb      	bpl.n	80033ee <_printf_i+0x1ca>
 80033f6:	8018      	strh	r0, [r3, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	4616      	mov	r6, r2
 80033fc:	6123      	str	r3, [r4, #16]
 80033fe:	e7ba      	b.n	8003376 <_printf_i+0x152>
 8003400:	680b      	ldr	r3, [r1, #0]
 8003402:	1d1a      	adds	r2, r3, #4
 8003404:	600a      	str	r2, [r1, #0]
 8003406:	681e      	ldr	r6, [r3, #0]
 8003408:	2100      	movs	r1, #0
 800340a:	4630      	mov	r0, r6
 800340c:	6862      	ldr	r2, [r4, #4]
 800340e:	f000 fed9 	bl	80041c4 <memchr>
 8003412:	b108      	cbz	r0, 8003418 <_printf_i+0x1f4>
 8003414:	1b80      	subs	r0, r0, r6
 8003416:	6060      	str	r0, [r4, #4]
 8003418:	6863      	ldr	r3, [r4, #4]
 800341a:	6123      	str	r3, [r4, #16]
 800341c:	2300      	movs	r3, #0
 800341e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003422:	e7a8      	b.n	8003376 <_printf_i+0x152>
 8003424:	4632      	mov	r2, r6
 8003426:	4649      	mov	r1, r9
 8003428:	4640      	mov	r0, r8
 800342a:	6923      	ldr	r3, [r4, #16]
 800342c:	47d0      	blx	sl
 800342e:	3001      	adds	r0, #1
 8003430:	d0ab      	beq.n	800338a <_printf_i+0x166>
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	079b      	lsls	r3, r3, #30
 8003436:	d413      	bmi.n	8003460 <_printf_i+0x23c>
 8003438:	68e0      	ldr	r0, [r4, #12]
 800343a:	9b03      	ldr	r3, [sp, #12]
 800343c:	4298      	cmp	r0, r3
 800343e:	bfb8      	it	lt
 8003440:	4618      	movlt	r0, r3
 8003442:	e7a4      	b.n	800338e <_printf_i+0x16a>
 8003444:	2301      	movs	r3, #1
 8003446:	4632      	mov	r2, r6
 8003448:	4649      	mov	r1, r9
 800344a:	4640      	mov	r0, r8
 800344c:	47d0      	blx	sl
 800344e:	3001      	adds	r0, #1
 8003450:	d09b      	beq.n	800338a <_printf_i+0x166>
 8003452:	3501      	adds	r5, #1
 8003454:	68e3      	ldr	r3, [r4, #12]
 8003456:	9903      	ldr	r1, [sp, #12]
 8003458:	1a5b      	subs	r3, r3, r1
 800345a:	42ab      	cmp	r3, r5
 800345c:	dcf2      	bgt.n	8003444 <_printf_i+0x220>
 800345e:	e7eb      	b.n	8003438 <_printf_i+0x214>
 8003460:	2500      	movs	r5, #0
 8003462:	f104 0619 	add.w	r6, r4, #25
 8003466:	e7f5      	b.n	8003454 <_printf_i+0x230>
 8003468:	0800595e 	.word	0x0800595e
 800346c:	0800596f 	.word	0x0800596f

08003470 <_vsiprintf_r>:
 8003470:	b500      	push	{lr}
 8003472:	b09b      	sub	sp, #108	; 0x6c
 8003474:	9100      	str	r1, [sp, #0]
 8003476:	9104      	str	r1, [sp, #16]
 8003478:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800347c:	9105      	str	r1, [sp, #20]
 800347e:	9102      	str	r1, [sp, #8]
 8003480:	4905      	ldr	r1, [pc, #20]	; (8003498 <_vsiprintf_r+0x28>)
 8003482:	9103      	str	r1, [sp, #12]
 8003484:	4669      	mov	r1, sp
 8003486:	f001 fb4b 	bl	8004b20 <_svfiprintf_r>
 800348a:	2200      	movs	r2, #0
 800348c:	9b00      	ldr	r3, [sp, #0]
 800348e:	701a      	strb	r2, [r3, #0]
 8003490:	b01b      	add	sp, #108	; 0x6c
 8003492:	f85d fb04 	ldr.w	pc, [sp], #4
 8003496:	bf00      	nop
 8003498:	ffff0208 	.word	0xffff0208

0800349c <vsiprintf>:
 800349c:	4613      	mov	r3, r2
 800349e:	460a      	mov	r2, r1
 80034a0:	4601      	mov	r1, r0
 80034a2:	4802      	ldr	r0, [pc, #8]	; (80034ac <vsiprintf+0x10>)
 80034a4:	6800      	ldr	r0, [r0, #0]
 80034a6:	f7ff bfe3 	b.w	8003470 <_vsiprintf_r>
 80034aa:	bf00      	nop
 80034ac:	20000010 	.word	0x20000010

080034b0 <quorem>:
 80034b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b4:	6903      	ldr	r3, [r0, #16]
 80034b6:	690c      	ldr	r4, [r1, #16]
 80034b8:	4607      	mov	r7, r0
 80034ba:	42a3      	cmp	r3, r4
 80034bc:	f2c0 8083 	blt.w	80035c6 <quorem+0x116>
 80034c0:	3c01      	subs	r4, #1
 80034c2:	f100 0514 	add.w	r5, r0, #20
 80034c6:	f101 0814 	add.w	r8, r1, #20
 80034ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80034d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80034d8:	3301      	adds	r3, #1
 80034da:	429a      	cmp	r2, r3
 80034dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80034e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80034e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80034e8:	d332      	bcc.n	8003550 <quorem+0xa0>
 80034ea:	f04f 0e00 	mov.w	lr, #0
 80034ee:	4640      	mov	r0, r8
 80034f0:	46ac      	mov	ip, r5
 80034f2:	46f2      	mov	sl, lr
 80034f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80034f8:	b293      	uxth	r3, r2
 80034fa:	fb06 e303 	mla	r3, r6, r3, lr
 80034fe:	0c12      	lsrs	r2, r2, #16
 8003500:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003504:	fb06 e202 	mla	r2, r6, r2, lr
 8003508:	b29b      	uxth	r3, r3
 800350a:	ebaa 0303 	sub.w	r3, sl, r3
 800350e:	f8dc a000 	ldr.w	sl, [ip]
 8003512:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003516:	fa1f fa8a 	uxth.w	sl, sl
 800351a:	4453      	add	r3, sl
 800351c:	fa1f fa82 	uxth.w	sl, r2
 8003520:	f8dc 2000 	ldr.w	r2, [ip]
 8003524:	4581      	cmp	r9, r0
 8003526:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800352a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800352e:	b29b      	uxth	r3, r3
 8003530:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003534:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003538:	f84c 3b04 	str.w	r3, [ip], #4
 800353c:	d2da      	bcs.n	80034f4 <quorem+0x44>
 800353e:	f855 300b 	ldr.w	r3, [r5, fp]
 8003542:	b92b      	cbnz	r3, 8003550 <quorem+0xa0>
 8003544:	9b01      	ldr	r3, [sp, #4]
 8003546:	3b04      	subs	r3, #4
 8003548:	429d      	cmp	r5, r3
 800354a:	461a      	mov	r2, r3
 800354c:	d32f      	bcc.n	80035ae <quorem+0xfe>
 800354e:	613c      	str	r4, [r7, #16]
 8003550:	4638      	mov	r0, r7
 8003552:	f001 f8cd 	bl	80046f0 <__mcmp>
 8003556:	2800      	cmp	r0, #0
 8003558:	db25      	blt.n	80035a6 <quorem+0xf6>
 800355a:	4628      	mov	r0, r5
 800355c:	f04f 0c00 	mov.w	ip, #0
 8003560:	3601      	adds	r6, #1
 8003562:	f858 1b04 	ldr.w	r1, [r8], #4
 8003566:	f8d0 e000 	ldr.w	lr, [r0]
 800356a:	b28b      	uxth	r3, r1
 800356c:	ebac 0303 	sub.w	r3, ip, r3
 8003570:	fa1f f28e 	uxth.w	r2, lr
 8003574:	4413      	add	r3, r2
 8003576:	0c0a      	lsrs	r2, r1, #16
 8003578:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800357c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003580:	b29b      	uxth	r3, r3
 8003582:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003586:	45c1      	cmp	r9, r8
 8003588:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800358c:	f840 3b04 	str.w	r3, [r0], #4
 8003590:	d2e7      	bcs.n	8003562 <quorem+0xb2>
 8003592:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800359a:	b922      	cbnz	r2, 80035a6 <quorem+0xf6>
 800359c:	3b04      	subs	r3, #4
 800359e:	429d      	cmp	r5, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	d30a      	bcc.n	80035ba <quorem+0x10a>
 80035a4:	613c      	str	r4, [r7, #16]
 80035a6:	4630      	mov	r0, r6
 80035a8:	b003      	add	sp, #12
 80035aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	3b04      	subs	r3, #4
 80035b2:	2a00      	cmp	r2, #0
 80035b4:	d1cb      	bne.n	800354e <quorem+0x9e>
 80035b6:	3c01      	subs	r4, #1
 80035b8:	e7c6      	b.n	8003548 <quorem+0x98>
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	3b04      	subs	r3, #4
 80035be:	2a00      	cmp	r2, #0
 80035c0:	d1f0      	bne.n	80035a4 <quorem+0xf4>
 80035c2:	3c01      	subs	r4, #1
 80035c4:	e7eb      	b.n	800359e <quorem+0xee>
 80035c6:	2000      	movs	r0, #0
 80035c8:	e7ee      	b.n	80035a8 <quorem+0xf8>
 80035ca:	0000      	movs	r0, r0
 80035cc:	0000      	movs	r0, r0
	...

080035d0 <_dtoa_r>:
 80035d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035d4:	4616      	mov	r6, r2
 80035d6:	461f      	mov	r7, r3
 80035d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80035da:	b099      	sub	sp, #100	; 0x64
 80035dc:	4605      	mov	r5, r0
 80035de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80035e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80035e6:	b974      	cbnz	r4, 8003606 <_dtoa_r+0x36>
 80035e8:	2010      	movs	r0, #16
 80035ea:	f000 fde3 	bl	80041b4 <malloc>
 80035ee:	4602      	mov	r2, r0
 80035f0:	6268      	str	r0, [r5, #36]	; 0x24
 80035f2:	b920      	cbnz	r0, 80035fe <_dtoa_r+0x2e>
 80035f4:	21ea      	movs	r1, #234	; 0xea
 80035f6:	4bae      	ldr	r3, [pc, #696]	; (80038b0 <_dtoa_r+0x2e0>)
 80035f8:	48ae      	ldr	r0, [pc, #696]	; (80038b4 <_dtoa_r+0x2e4>)
 80035fa:	f001 fba1 	bl	8004d40 <__assert_func>
 80035fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003602:	6004      	str	r4, [r0, #0]
 8003604:	60c4      	str	r4, [r0, #12]
 8003606:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003608:	6819      	ldr	r1, [r3, #0]
 800360a:	b151      	cbz	r1, 8003622 <_dtoa_r+0x52>
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	2301      	movs	r3, #1
 8003610:	4093      	lsls	r3, r2
 8003612:	604a      	str	r2, [r1, #4]
 8003614:	608b      	str	r3, [r1, #8]
 8003616:	4628      	mov	r0, r5
 8003618:	f000 fe30 	bl	800427c <_Bfree>
 800361c:	2200      	movs	r2, #0
 800361e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	1e3b      	subs	r3, r7, #0
 8003624:	bfaf      	iteee	ge
 8003626:	2300      	movge	r3, #0
 8003628:	2201      	movlt	r2, #1
 800362a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800362e:	9305      	strlt	r3, [sp, #20]
 8003630:	bfa8      	it	ge
 8003632:	f8c8 3000 	strge.w	r3, [r8]
 8003636:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800363a:	4b9f      	ldr	r3, [pc, #636]	; (80038b8 <_dtoa_r+0x2e8>)
 800363c:	bfb8      	it	lt
 800363e:	f8c8 2000 	strlt.w	r2, [r8]
 8003642:	ea33 0309 	bics.w	r3, r3, r9
 8003646:	d119      	bne.n	800367c <_dtoa_r+0xac>
 8003648:	f242 730f 	movw	r3, #9999	; 0x270f
 800364c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003654:	4333      	orrs	r3, r6
 8003656:	f000 8580 	beq.w	800415a <_dtoa_r+0xb8a>
 800365a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800365c:	b953      	cbnz	r3, 8003674 <_dtoa_r+0xa4>
 800365e:	4b97      	ldr	r3, [pc, #604]	; (80038bc <_dtoa_r+0x2ec>)
 8003660:	e022      	b.n	80036a8 <_dtoa_r+0xd8>
 8003662:	4b97      	ldr	r3, [pc, #604]	; (80038c0 <_dtoa_r+0x2f0>)
 8003664:	9308      	str	r3, [sp, #32]
 8003666:	3308      	adds	r3, #8
 8003668:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	9808      	ldr	r0, [sp, #32]
 800366e:	b019      	add	sp, #100	; 0x64
 8003670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003674:	4b91      	ldr	r3, [pc, #580]	; (80038bc <_dtoa_r+0x2ec>)
 8003676:	9308      	str	r3, [sp, #32]
 8003678:	3303      	adds	r3, #3
 800367a:	e7f5      	b.n	8003668 <_dtoa_r+0x98>
 800367c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003680:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003684:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003688:	2200      	movs	r2, #0
 800368a:	2300      	movs	r3, #0
 800368c:	f7fd f98c 	bl	80009a8 <__aeabi_dcmpeq>
 8003690:	4680      	mov	r8, r0
 8003692:	b158      	cbz	r0, 80036ac <_dtoa_r+0xdc>
 8003694:	2301      	movs	r3, #1
 8003696:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 8559 	beq.w	8004154 <_dtoa_r+0xb84>
 80036a2:	4888      	ldr	r0, [pc, #544]	; (80038c4 <_dtoa_r+0x2f4>)
 80036a4:	6018      	str	r0, [r3, #0]
 80036a6:	1e43      	subs	r3, r0, #1
 80036a8:	9308      	str	r3, [sp, #32]
 80036aa:	e7df      	b.n	800366c <_dtoa_r+0x9c>
 80036ac:	ab16      	add	r3, sp, #88	; 0x58
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	ab17      	add	r3, sp, #92	; 0x5c
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	4628      	mov	r0, r5
 80036b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80036ba:	f001 f8c5 	bl	8004848 <__d2b>
 80036be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80036c2:	4682      	mov	sl, r0
 80036c4:	2c00      	cmp	r4, #0
 80036c6:	d07e      	beq.n	80037c6 <_dtoa_r+0x1f6>
 80036c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80036cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80036d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80036da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80036de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80036e2:	2200      	movs	r2, #0
 80036e4:	4b78      	ldr	r3, [pc, #480]	; (80038c8 <_dtoa_r+0x2f8>)
 80036e6:	f7fc fd3f 	bl	8000168 <__aeabi_dsub>
 80036ea:	a36b      	add	r3, pc, #428	; (adr r3, 8003898 <_dtoa_r+0x2c8>)
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f7fc fef2 	bl	80004d8 <__aeabi_dmul>
 80036f4:	a36a      	add	r3, pc, #424	; (adr r3, 80038a0 <_dtoa_r+0x2d0>)
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	f7fc fd37 	bl	800016c <__adddf3>
 80036fe:	4606      	mov	r6, r0
 8003700:	4620      	mov	r0, r4
 8003702:	460f      	mov	r7, r1
 8003704:	f7fc fe7e 	bl	8000404 <__aeabi_i2d>
 8003708:	a367      	add	r3, pc, #412	; (adr r3, 80038a8 <_dtoa_r+0x2d8>)
 800370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370e:	f7fc fee3 	bl	80004d8 <__aeabi_dmul>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	4630      	mov	r0, r6
 8003718:	4639      	mov	r1, r7
 800371a:	f7fc fd27 	bl	800016c <__adddf3>
 800371e:	4606      	mov	r6, r0
 8003720:	460f      	mov	r7, r1
 8003722:	f7fd f989 	bl	8000a38 <__aeabi_d2iz>
 8003726:	2200      	movs	r2, #0
 8003728:	4681      	mov	r9, r0
 800372a:	2300      	movs	r3, #0
 800372c:	4630      	mov	r0, r6
 800372e:	4639      	mov	r1, r7
 8003730:	f7fd f944 	bl	80009bc <__aeabi_dcmplt>
 8003734:	b148      	cbz	r0, 800374a <_dtoa_r+0x17a>
 8003736:	4648      	mov	r0, r9
 8003738:	f7fc fe64 	bl	8000404 <__aeabi_i2d>
 800373c:	4632      	mov	r2, r6
 800373e:	463b      	mov	r3, r7
 8003740:	f7fd f932 	bl	80009a8 <__aeabi_dcmpeq>
 8003744:	b908      	cbnz	r0, 800374a <_dtoa_r+0x17a>
 8003746:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800374a:	f1b9 0f16 	cmp.w	r9, #22
 800374e:	d857      	bhi.n	8003800 <_dtoa_r+0x230>
 8003750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003754:	4b5d      	ldr	r3, [pc, #372]	; (80038cc <_dtoa_r+0x2fc>)
 8003756:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f7fd f92d 	bl	80009bc <__aeabi_dcmplt>
 8003762:	2800      	cmp	r0, #0
 8003764:	d04e      	beq.n	8003804 <_dtoa_r+0x234>
 8003766:	2300      	movs	r3, #0
 8003768:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800376c:	930f      	str	r3, [sp, #60]	; 0x3c
 800376e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003770:	1b1c      	subs	r4, r3, r4
 8003772:	1e63      	subs	r3, r4, #1
 8003774:	9309      	str	r3, [sp, #36]	; 0x24
 8003776:	bf49      	itett	mi
 8003778:	f1c4 0301 	rsbmi	r3, r4, #1
 800377c:	2300      	movpl	r3, #0
 800377e:	9306      	strmi	r3, [sp, #24]
 8003780:	2300      	movmi	r3, #0
 8003782:	bf54      	ite	pl
 8003784:	9306      	strpl	r3, [sp, #24]
 8003786:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003788:	f1b9 0f00 	cmp.w	r9, #0
 800378c:	db3c      	blt.n	8003808 <_dtoa_r+0x238>
 800378e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003790:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003794:	444b      	add	r3, r9
 8003796:	9309      	str	r3, [sp, #36]	; 0x24
 8003798:	2300      	movs	r3, #0
 800379a:	930a      	str	r3, [sp, #40]	; 0x28
 800379c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800379e:	2b09      	cmp	r3, #9
 80037a0:	d86c      	bhi.n	800387c <_dtoa_r+0x2ac>
 80037a2:	2b05      	cmp	r3, #5
 80037a4:	bfc4      	itt	gt
 80037a6:	3b04      	subgt	r3, #4
 80037a8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80037aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037ac:	bfc8      	it	gt
 80037ae:	2400      	movgt	r4, #0
 80037b0:	f1a3 0302 	sub.w	r3, r3, #2
 80037b4:	bfd8      	it	le
 80037b6:	2401      	movle	r4, #1
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	f200 808b 	bhi.w	80038d4 <_dtoa_r+0x304>
 80037be:	e8df f003 	tbb	[pc, r3]
 80037c2:	4f2d      	.short	0x4f2d
 80037c4:	5b4d      	.short	0x5b4d
 80037c6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80037ca:	441c      	add	r4, r3
 80037cc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	bfc3      	ittte	gt
 80037d4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80037d8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80037dc:	fa09 f303 	lslgt.w	r3, r9, r3
 80037e0:	f1c3 0320 	rsble	r3, r3, #32
 80037e4:	bfc6      	itte	gt
 80037e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80037ea:	4318      	orrgt	r0, r3
 80037ec:	fa06 f003 	lslle.w	r0, r6, r3
 80037f0:	f7fc fdf8 	bl	80003e4 <__aeabi_ui2d>
 80037f4:	2301      	movs	r3, #1
 80037f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80037fa:	3c01      	subs	r4, #1
 80037fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80037fe:	e770      	b.n	80036e2 <_dtoa_r+0x112>
 8003800:	2301      	movs	r3, #1
 8003802:	e7b3      	b.n	800376c <_dtoa_r+0x19c>
 8003804:	900f      	str	r0, [sp, #60]	; 0x3c
 8003806:	e7b2      	b.n	800376e <_dtoa_r+0x19e>
 8003808:	9b06      	ldr	r3, [sp, #24]
 800380a:	eba3 0309 	sub.w	r3, r3, r9
 800380e:	9306      	str	r3, [sp, #24]
 8003810:	f1c9 0300 	rsb	r3, r9, #0
 8003814:	930a      	str	r3, [sp, #40]	; 0x28
 8003816:	2300      	movs	r3, #0
 8003818:	930e      	str	r3, [sp, #56]	; 0x38
 800381a:	e7bf      	b.n	800379c <_dtoa_r+0x1cc>
 800381c:	2300      	movs	r3, #0
 800381e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003820:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003822:	2b00      	cmp	r3, #0
 8003824:	dc59      	bgt.n	80038da <_dtoa_r+0x30a>
 8003826:	f04f 0b01 	mov.w	fp, #1
 800382a:	465b      	mov	r3, fp
 800382c:	f8cd b008 	str.w	fp, [sp, #8]
 8003830:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003834:	2200      	movs	r2, #0
 8003836:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003838:	6042      	str	r2, [r0, #4]
 800383a:	2204      	movs	r2, #4
 800383c:	f102 0614 	add.w	r6, r2, #20
 8003840:	429e      	cmp	r6, r3
 8003842:	6841      	ldr	r1, [r0, #4]
 8003844:	d94f      	bls.n	80038e6 <_dtoa_r+0x316>
 8003846:	4628      	mov	r0, r5
 8003848:	f000 fcd8 	bl	80041fc <_Balloc>
 800384c:	9008      	str	r0, [sp, #32]
 800384e:	2800      	cmp	r0, #0
 8003850:	d14d      	bne.n	80038ee <_dtoa_r+0x31e>
 8003852:	4602      	mov	r2, r0
 8003854:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003858:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <_dtoa_r+0x300>)
 800385a:	e6cd      	b.n	80035f8 <_dtoa_r+0x28>
 800385c:	2301      	movs	r3, #1
 800385e:	e7de      	b.n	800381e <_dtoa_r+0x24e>
 8003860:	2300      	movs	r3, #0
 8003862:	930b      	str	r3, [sp, #44]	; 0x2c
 8003864:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003866:	eb09 0b03 	add.w	fp, r9, r3
 800386a:	f10b 0301 	add.w	r3, fp, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	9302      	str	r3, [sp, #8]
 8003872:	bfb8      	it	lt
 8003874:	2301      	movlt	r3, #1
 8003876:	e7dd      	b.n	8003834 <_dtoa_r+0x264>
 8003878:	2301      	movs	r3, #1
 800387a:	e7f2      	b.n	8003862 <_dtoa_r+0x292>
 800387c:	2401      	movs	r4, #1
 800387e:	2300      	movs	r3, #0
 8003880:	940b      	str	r4, [sp, #44]	; 0x2c
 8003882:	9322      	str	r3, [sp, #136]	; 0x88
 8003884:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003888:	2200      	movs	r2, #0
 800388a:	2312      	movs	r3, #18
 800388c:	f8cd b008 	str.w	fp, [sp, #8]
 8003890:	9223      	str	r2, [sp, #140]	; 0x8c
 8003892:	e7cf      	b.n	8003834 <_dtoa_r+0x264>
 8003894:	f3af 8000 	nop.w
 8003898:	636f4361 	.word	0x636f4361
 800389c:	3fd287a7 	.word	0x3fd287a7
 80038a0:	8b60c8b3 	.word	0x8b60c8b3
 80038a4:	3fc68a28 	.word	0x3fc68a28
 80038a8:	509f79fb 	.word	0x509f79fb
 80038ac:	3fd34413 	.word	0x3fd34413
 80038b0:	0800598d 	.word	0x0800598d
 80038b4:	080059a4 	.word	0x080059a4
 80038b8:	7ff00000 	.word	0x7ff00000
 80038bc:	08005989 	.word	0x08005989
 80038c0:	08005980 	.word	0x08005980
 80038c4:	0800595d 	.word	0x0800595d
 80038c8:	3ff80000 	.word	0x3ff80000
 80038cc:	08005aa0 	.word	0x08005aa0
 80038d0:	08005a03 	.word	0x08005a03
 80038d4:	2301      	movs	r3, #1
 80038d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80038d8:	e7d4      	b.n	8003884 <_dtoa_r+0x2b4>
 80038da:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80038de:	465b      	mov	r3, fp
 80038e0:	f8cd b008 	str.w	fp, [sp, #8]
 80038e4:	e7a6      	b.n	8003834 <_dtoa_r+0x264>
 80038e6:	3101      	adds	r1, #1
 80038e8:	6041      	str	r1, [r0, #4]
 80038ea:	0052      	lsls	r2, r2, #1
 80038ec:	e7a6      	b.n	800383c <_dtoa_r+0x26c>
 80038ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80038f0:	9a08      	ldr	r2, [sp, #32]
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	9b02      	ldr	r3, [sp, #8]
 80038f6:	2b0e      	cmp	r3, #14
 80038f8:	f200 80a8 	bhi.w	8003a4c <_dtoa_r+0x47c>
 80038fc:	2c00      	cmp	r4, #0
 80038fe:	f000 80a5 	beq.w	8003a4c <_dtoa_r+0x47c>
 8003902:	f1b9 0f00 	cmp.w	r9, #0
 8003906:	dd34      	ble.n	8003972 <_dtoa_r+0x3a2>
 8003908:	4a9a      	ldr	r2, [pc, #616]	; (8003b74 <_dtoa_r+0x5a4>)
 800390a:	f009 030f 	and.w	r3, r9, #15
 800390e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003912:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003916:	e9d3 3400 	ldrd	r3, r4, [r3]
 800391a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800391e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003922:	d016      	beq.n	8003952 <_dtoa_r+0x382>
 8003924:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003928:	4b93      	ldr	r3, [pc, #588]	; (8003b78 <_dtoa_r+0x5a8>)
 800392a:	2703      	movs	r7, #3
 800392c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003930:	f7fc fefc 	bl	800072c <__aeabi_ddiv>
 8003934:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003938:	f004 040f 	and.w	r4, r4, #15
 800393c:	4e8e      	ldr	r6, [pc, #568]	; (8003b78 <_dtoa_r+0x5a8>)
 800393e:	b954      	cbnz	r4, 8003956 <_dtoa_r+0x386>
 8003940:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003948:	f7fc fef0 	bl	800072c <__aeabi_ddiv>
 800394c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003950:	e029      	b.n	80039a6 <_dtoa_r+0x3d6>
 8003952:	2702      	movs	r7, #2
 8003954:	e7f2      	b.n	800393c <_dtoa_r+0x36c>
 8003956:	07e1      	lsls	r1, r4, #31
 8003958:	d508      	bpl.n	800396c <_dtoa_r+0x39c>
 800395a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800395e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003962:	f7fc fdb9 	bl	80004d8 <__aeabi_dmul>
 8003966:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800396a:	3701      	adds	r7, #1
 800396c:	1064      	asrs	r4, r4, #1
 800396e:	3608      	adds	r6, #8
 8003970:	e7e5      	b.n	800393e <_dtoa_r+0x36e>
 8003972:	f000 80a5 	beq.w	8003ac0 <_dtoa_r+0x4f0>
 8003976:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800397a:	f1c9 0400 	rsb	r4, r9, #0
 800397e:	4b7d      	ldr	r3, [pc, #500]	; (8003b74 <_dtoa_r+0x5a4>)
 8003980:	f004 020f 	and.w	r2, r4, #15
 8003984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398c:	f7fc fda4 	bl	80004d8 <__aeabi_dmul>
 8003990:	2702      	movs	r7, #2
 8003992:	2300      	movs	r3, #0
 8003994:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003998:	4e77      	ldr	r6, [pc, #476]	; (8003b78 <_dtoa_r+0x5a8>)
 800399a:	1124      	asrs	r4, r4, #4
 800399c:	2c00      	cmp	r4, #0
 800399e:	f040 8084 	bne.w	8003aaa <_dtoa_r+0x4da>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1d2      	bne.n	800394c <_dtoa_r+0x37c>
 80039a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 808b 	beq.w	8003ac4 <_dtoa_r+0x4f4>
 80039ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80039b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80039b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80039ba:	2200      	movs	r2, #0
 80039bc:	4b6f      	ldr	r3, [pc, #444]	; (8003b7c <_dtoa_r+0x5ac>)
 80039be:	f7fc fffd 	bl	80009bc <__aeabi_dcmplt>
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d07e      	beq.n	8003ac4 <_dtoa_r+0x4f4>
 80039c6:	9b02      	ldr	r3, [sp, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d07b      	beq.n	8003ac4 <_dtoa_r+0x4f4>
 80039cc:	f1bb 0f00 	cmp.w	fp, #0
 80039d0:	dd38      	ble.n	8003a44 <_dtoa_r+0x474>
 80039d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80039d6:	2200      	movs	r2, #0
 80039d8:	4b69      	ldr	r3, [pc, #420]	; (8003b80 <_dtoa_r+0x5b0>)
 80039da:	f7fc fd7d 	bl	80004d8 <__aeabi_dmul>
 80039de:	465c      	mov	r4, fp
 80039e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80039e4:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 80039e8:	3701      	adds	r7, #1
 80039ea:	4638      	mov	r0, r7
 80039ec:	f7fc fd0a 	bl	8000404 <__aeabi_i2d>
 80039f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039f4:	f7fc fd70 	bl	80004d8 <__aeabi_dmul>
 80039f8:	2200      	movs	r2, #0
 80039fa:	4b62      	ldr	r3, [pc, #392]	; (8003b84 <_dtoa_r+0x5b4>)
 80039fc:	f7fc fbb6 	bl	800016c <__adddf3>
 8003a00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003a04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003a08:	9611      	str	r6, [sp, #68]	; 0x44
 8003a0a:	2c00      	cmp	r4, #0
 8003a0c:	d15d      	bne.n	8003aca <_dtoa_r+0x4fa>
 8003a0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a12:	2200      	movs	r2, #0
 8003a14:	4b5c      	ldr	r3, [pc, #368]	; (8003b88 <_dtoa_r+0x5b8>)
 8003a16:	f7fc fba7 	bl	8000168 <__aeabi_dsub>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003a22:	4633      	mov	r3, r6
 8003a24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003a26:	f7fc ffe7 	bl	80009f8 <__aeabi_dcmpgt>
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	f040 829e 	bne.w	8003f6c <_dtoa_r+0x99c>
 8003a30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003a36:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003a3a:	f7fc ffbf 	bl	80009bc <__aeabi_dcmplt>
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	f040 8292 	bne.w	8003f68 <_dtoa_r+0x998>
 8003a44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003a48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003a4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f2c0 8153 	blt.w	8003cfa <_dtoa_r+0x72a>
 8003a54:	f1b9 0f0e 	cmp.w	r9, #14
 8003a58:	f300 814f 	bgt.w	8003cfa <_dtoa_r+0x72a>
 8003a5c:	4b45      	ldr	r3, [pc, #276]	; (8003b74 <_dtoa_r+0x5a4>)
 8003a5e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003a62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a66:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003a6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f280 80db 	bge.w	8003c28 <_dtoa_r+0x658>
 8003a72:	9b02      	ldr	r3, [sp, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f300 80d7 	bgt.w	8003c28 <_dtoa_r+0x658>
 8003a7a:	f040 8274 	bne.w	8003f66 <_dtoa_r+0x996>
 8003a7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a82:	2200      	movs	r2, #0
 8003a84:	4b40      	ldr	r3, [pc, #256]	; (8003b88 <_dtoa_r+0x5b8>)
 8003a86:	f7fc fd27 	bl	80004d8 <__aeabi_dmul>
 8003a8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a8e:	f7fc ffa9 	bl	80009e4 <__aeabi_dcmpge>
 8003a92:	9c02      	ldr	r4, [sp, #8]
 8003a94:	4626      	mov	r6, r4
 8003a96:	2800      	cmp	r0, #0
 8003a98:	f040 824a 	bne.w	8003f30 <_dtoa_r+0x960>
 8003a9c:	2331      	movs	r3, #49	; 0x31
 8003a9e:	9f08      	ldr	r7, [sp, #32]
 8003aa0:	f109 0901 	add.w	r9, r9, #1
 8003aa4:	f807 3b01 	strb.w	r3, [r7], #1
 8003aa8:	e246      	b.n	8003f38 <_dtoa_r+0x968>
 8003aaa:	07e2      	lsls	r2, r4, #31
 8003aac:	d505      	bpl.n	8003aba <_dtoa_r+0x4ea>
 8003aae:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003ab2:	f7fc fd11 	bl	80004d8 <__aeabi_dmul>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	3701      	adds	r7, #1
 8003aba:	1064      	asrs	r4, r4, #1
 8003abc:	3608      	adds	r6, #8
 8003abe:	e76d      	b.n	800399c <_dtoa_r+0x3cc>
 8003ac0:	2702      	movs	r7, #2
 8003ac2:	e770      	b.n	80039a6 <_dtoa_r+0x3d6>
 8003ac4:	46c8      	mov	r8, r9
 8003ac6:	9c02      	ldr	r4, [sp, #8]
 8003ac8:	e78f      	b.n	80039ea <_dtoa_r+0x41a>
 8003aca:	9908      	ldr	r1, [sp, #32]
 8003acc:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <_dtoa_r+0x5a4>)
 8003ace:	4421      	add	r1, r4
 8003ad0:	9112      	str	r1, [sp, #72]	; 0x48
 8003ad2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ad4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003ad8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003adc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003ae0:	2900      	cmp	r1, #0
 8003ae2:	d055      	beq.n	8003b90 <_dtoa_r+0x5c0>
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	4929      	ldr	r1, [pc, #164]	; (8003b8c <_dtoa_r+0x5bc>)
 8003ae8:	f7fc fe20 	bl	800072c <__aeabi_ddiv>
 8003aec:	463b      	mov	r3, r7
 8003aee:	4632      	mov	r2, r6
 8003af0:	f7fc fb3a 	bl	8000168 <__aeabi_dsub>
 8003af4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003af8:	9f08      	ldr	r7, [sp, #32]
 8003afa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003afe:	f7fc ff9b 	bl	8000a38 <__aeabi_d2iz>
 8003b02:	4604      	mov	r4, r0
 8003b04:	f7fc fc7e 	bl	8000404 <__aeabi_i2d>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b10:	f7fc fb2a 	bl	8000168 <__aeabi_dsub>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	3430      	adds	r4, #48	; 0x30
 8003b1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003b22:	f807 4b01 	strb.w	r4, [r7], #1
 8003b26:	f7fc ff49 	bl	80009bc <__aeabi_dcmplt>
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	d174      	bne.n	8003c18 <_dtoa_r+0x648>
 8003b2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b32:	2000      	movs	r0, #0
 8003b34:	4911      	ldr	r1, [pc, #68]	; (8003b7c <_dtoa_r+0x5ac>)
 8003b36:	f7fc fb17 	bl	8000168 <__aeabi_dsub>
 8003b3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003b3e:	f7fc ff3d 	bl	80009bc <__aeabi_dcmplt>
 8003b42:	2800      	cmp	r0, #0
 8003b44:	f040 80b6 	bne.w	8003cb4 <_dtoa_r+0x6e4>
 8003b48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003b4a:	429f      	cmp	r7, r3
 8003b4c:	f43f af7a 	beq.w	8003a44 <_dtoa_r+0x474>
 8003b50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003b54:	2200      	movs	r2, #0
 8003b56:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <_dtoa_r+0x5b0>)
 8003b58:	f7fc fcbe 	bl	80004d8 <__aeabi_dmul>
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003b62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <_dtoa_r+0x5b0>)
 8003b68:	f7fc fcb6 	bl	80004d8 <__aeabi_dmul>
 8003b6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003b70:	e7c3      	b.n	8003afa <_dtoa_r+0x52a>
 8003b72:	bf00      	nop
 8003b74:	08005aa0 	.word	0x08005aa0
 8003b78:	08005a78 	.word	0x08005a78
 8003b7c:	3ff00000 	.word	0x3ff00000
 8003b80:	40240000 	.word	0x40240000
 8003b84:	401c0000 	.word	0x401c0000
 8003b88:	40140000 	.word	0x40140000
 8003b8c:	3fe00000 	.word	0x3fe00000
 8003b90:	4630      	mov	r0, r6
 8003b92:	4639      	mov	r1, r7
 8003b94:	f7fc fca0 	bl	80004d8 <__aeabi_dmul>
 8003b98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003b9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003b9e:	9c08      	ldr	r4, [sp, #32]
 8003ba0:	9314      	str	r3, [sp, #80]	; 0x50
 8003ba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ba6:	f7fc ff47 	bl	8000a38 <__aeabi_d2iz>
 8003baa:	9015      	str	r0, [sp, #84]	; 0x54
 8003bac:	f7fc fc2a 	bl	8000404 <__aeabi_i2d>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003bb8:	f7fc fad6 	bl	8000168 <__aeabi_dsub>
 8003bbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	3330      	adds	r3, #48	; 0x30
 8003bc2:	f804 3b01 	strb.w	r3, [r4], #1
 8003bc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003bc8:	460f      	mov	r7, r1
 8003bca:	429c      	cmp	r4, r3
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	d124      	bne.n	8003c1c <_dtoa_r+0x64c>
 8003bd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003bd6:	4bb3      	ldr	r3, [pc, #716]	; (8003ea4 <_dtoa_r+0x8d4>)
 8003bd8:	f7fc fac8 	bl	800016c <__adddf3>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4630      	mov	r0, r6
 8003be2:	4639      	mov	r1, r7
 8003be4:	f7fc ff08 	bl	80009f8 <__aeabi_dcmpgt>
 8003be8:	2800      	cmp	r0, #0
 8003bea:	d162      	bne.n	8003cb2 <_dtoa_r+0x6e2>
 8003bec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	49ac      	ldr	r1, [pc, #688]	; (8003ea4 <_dtoa_r+0x8d4>)
 8003bf4:	f7fc fab8 	bl	8000168 <__aeabi_dsub>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4630      	mov	r0, r6
 8003bfe:	4639      	mov	r1, r7
 8003c00:	f7fc fedc 	bl	80009bc <__aeabi_dcmplt>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	f43f af1d 	beq.w	8003a44 <_dtoa_r+0x474>
 8003c0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003c0c:	1e7b      	subs	r3, r7, #1
 8003c0e:	9314      	str	r3, [sp, #80]	; 0x50
 8003c10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003c14:	2b30      	cmp	r3, #48	; 0x30
 8003c16:	d0f8      	beq.n	8003c0a <_dtoa_r+0x63a>
 8003c18:	46c1      	mov	r9, r8
 8003c1a:	e03a      	b.n	8003c92 <_dtoa_r+0x6c2>
 8003c1c:	4ba2      	ldr	r3, [pc, #648]	; (8003ea8 <_dtoa_r+0x8d8>)
 8003c1e:	f7fc fc5b 	bl	80004d8 <__aeabi_dmul>
 8003c22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c26:	e7bc      	b.n	8003ba2 <_dtoa_r+0x5d2>
 8003c28:	9f08      	ldr	r7, [sp, #32]
 8003c2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c32:	f7fc fd7b 	bl	800072c <__aeabi_ddiv>
 8003c36:	f7fc feff 	bl	8000a38 <__aeabi_d2iz>
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	f7fc fbe2 	bl	8000404 <__aeabi_i2d>
 8003c40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c44:	f7fc fc48 	bl	80004d8 <__aeabi_dmul>
 8003c48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4602      	mov	r2, r0
 8003c50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c54:	f7fc fa88 	bl	8000168 <__aeabi_dsub>
 8003c58:	f807 6b01 	strb.w	r6, [r7], #1
 8003c5c:	9e08      	ldr	r6, [sp, #32]
 8003c5e:	9b02      	ldr	r3, [sp, #8]
 8003c60:	1bbe      	subs	r6, r7, r6
 8003c62:	42b3      	cmp	r3, r6
 8003c64:	d13a      	bne.n	8003cdc <_dtoa_r+0x70c>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	f7fc fa7f 	bl	800016c <__adddf3>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c7a:	f7fc febd 	bl	80009f8 <__aeabi_dcmpgt>
 8003c7e:	bb58      	cbnz	r0, 8003cd8 <_dtoa_r+0x708>
 8003c80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c88:	f7fc fe8e 	bl	80009a8 <__aeabi_dcmpeq>
 8003c8c:	b108      	cbz	r0, 8003c92 <_dtoa_r+0x6c2>
 8003c8e:	07e1      	lsls	r1, r4, #31
 8003c90:	d422      	bmi.n	8003cd8 <_dtoa_r+0x708>
 8003c92:	4628      	mov	r0, r5
 8003c94:	4651      	mov	r1, sl
 8003c96:	f000 faf1 	bl	800427c <_Bfree>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	703b      	strb	r3, [r7, #0]
 8003c9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003ca0:	f109 0001 	add.w	r0, r9, #1
 8003ca4:	6018      	str	r0, [r3, #0]
 8003ca6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f43f acdf 	beq.w	800366c <_dtoa_r+0x9c>
 8003cae:	601f      	str	r7, [r3, #0]
 8003cb0:	e4dc      	b.n	800366c <_dtoa_r+0x9c>
 8003cb2:	4627      	mov	r7, r4
 8003cb4:	463b      	mov	r3, r7
 8003cb6:	461f      	mov	r7, r3
 8003cb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003cbc:	2a39      	cmp	r2, #57	; 0x39
 8003cbe:	d107      	bne.n	8003cd0 <_dtoa_r+0x700>
 8003cc0:	9a08      	ldr	r2, [sp, #32]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d1f7      	bne.n	8003cb6 <_dtoa_r+0x6e6>
 8003cc6:	2230      	movs	r2, #48	; 0x30
 8003cc8:	9908      	ldr	r1, [sp, #32]
 8003cca:	f108 0801 	add.w	r8, r8, #1
 8003cce:	700a      	strb	r2, [r1, #0]
 8003cd0:	781a      	ldrb	r2, [r3, #0]
 8003cd2:	3201      	adds	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	e79f      	b.n	8003c18 <_dtoa_r+0x648>
 8003cd8:	46c8      	mov	r8, r9
 8003cda:	e7eb      	b.n	8003cb4 <_dtoa_r+0x6e4>
 8003cdc:	2200      	movs	r2, #0
 8003cde:	4b72      	ldr	r3, [pc, #456]	; (8003ea8 <_dtoa_r+0x8d8>)
 8003ce0:	f7fc fbfa 	bl	80004d8 <__aeabi_dmul>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003cec:	2200      	movs	r2, #0
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f7fc fe5a 	bl	80009a8 <__aeabi_dcmpeq>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d098      	beq.n	8003c2a <_dtoa_r+0x65a>
 8003cf8:	e7cb      	b.n	8003c92 <_dtoa_r+0x6c2>
 8003cfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003cfc:	2a00      	cmp	r2, #0
 8003cfe:	f000 80cd 	beq.w	8003e9c <_dtoa_r+0x8cc>
 8003d02:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003d04:	2a01      	cmp	r2, #1
 8003d06:	f300 80af 	bgt.w	8003e68 <_dtoa_r+0x898>
 8003d0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003d0c:	2a00      	cmp	r2, #0
 8003d0e:	f000 80a7 	beq.w	8003e60 <_dtoa_r+0x890>
 8003d12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003d16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003d18:	9f06      	ldr	r7, [sp, #24]
 8003d1a:	9a06      	ldr	r2, [sp, #24]
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	441a      	add	r2, r3
 8003d20:	9206      	str	r2, [sp, #24]
 8003d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d24:	4628      	mov	r0, r5
 8003d26:	441a      	add	r2, r3
 8003d28:	9209      	str	r2, [sp, #36]	; 0x24
 8003d2a:	f000 fb61 	bl	80043f0 <__i2b>
 8003d2e:	4606      	mov	r6, r0
 8003d30:	2f00      	cmp	r7, #0
 8003d32:	dd0c      	ble.n	8003d4e <_dtoa_r+0x77e>
 8003d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	dd09      	ble.n	8003d4e <_dtoa_r+0x77e>
 8003d3a:	42bb      	cmp	r3, r7
 8003d3c:	bfa8      	it	ge
 8003d3e:	463b      	movge	r3, r7
 8003d40:	9a06      	ldr	r2, [sp, #24]
 8003d42:	1aff      	subs	r7, r7, r3
 8003d44:	1ad2      	subs	r2, r2, r3
 8003d46:	9206      	str	r2, [sp, #24]
 8003d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d50:	b1f3      	cbz	r3, 8003d90 <_dtoa_r+0x7c0>
 8003d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80a9 	beq.w	8003eac <_dtoa_r+0x8dc>
 8003d5a:	2c00      	cmp	r4, #0
 8003d5c:	dd10      	ble.n	8003d80 <_dtoa_r+0x7b0>
 8003d5e:	4631      	mov	r1, r6
 8003d60:	4622      	mov	r2, r4
 8003d62:	4628      	mov	r0, r5
 8003d64:	f000 fbfe 	bl	8004564 <__pow5mult>
 8003d68:	4652      	mov	r2, sl
 8003d6a:	4601      	mov	r1, r0
 8003d6c:	4606      	mov	r6, r0
 8003d6e:	4628      	mov	r0, r5
 8003d70:	f000 fb54 	bl	800441c <__multiply>
 8003d74:	4680      	mov	r8, r0
 8003d76:	4651      	mov	r1, sl
 8003d78:	4628      	mov	r0, r5
 8003d7a:	f000 fa7f 	bl	800427c <_Bfree>
 8003d7e:	46c2      	mov	sl, r8
 8003d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d82:	1b1a      	subs	r2, r3, r4
 8003d84:	d004      	beq.n	8003d90 <_dtoa_r+0x7c0>
 8003d86:	4651      	mov	r1, sl
 8003d88:	4628      	mov	r0, r5
 8003d8a:	f000 fbeb 	bl	8004564 <__pow5mult>
 8003d8e:	4682      	mov	sl, r0
 8003d90:	2101      	movs	r1, #1
 8003d92:	4628      	mov	r0, r5
 8003d94:	f000 fb2c 	bl	80043f0 <__i2b>
 8003d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f340 8087 	ble.w	8003eb0 <_dtoa_r+0x8e0>
 8003da2:	461a      	mov	r2, r3
 8003da4:	4601      	mov	r1, r0
 8003da6:	4628      	mov	r0, r5
 8003da8:	f000 fbdc 	bl	8004564 <__pow5mult>
 8003dac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003dae:	4604      	mov	r4, r0
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	f340 8080 	ble.w	8003eb6 <_dtoa_r+0x8e6>
 8003db6:	f04f 0800 	mov.w	r8, #0
 8003dba:	6923      	ldr	r3, [r4, #16]
 8003dbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003dc0:	6918      	ldr	r0, [r3, #16]
 8003dc2:	f000 fac7 	bl	8004354 <__hi0bits>
 8003dc6:	f1c0 0020 	rsb	r0, r0, #32
 8003dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dcc:	4418      	add	r0, r3
 8003dce:	f010 001f 	ands.w	r0, r0, #31
 8003dd2:	f000 8092 	beq.w	8003efa <_dtoa_r+0x92a>
 8003dd6:	f1c0 0320 	rsb	r3, r0, #32
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	f340 808a 	ble.w	8003ef4 <_dtoa_r+0x924>
 8003de0:	f1c0 001c 	rsb	r0, r0, #28
 8003de4:	9b06      	ldr	r3, [sp, #24]
 8003de6:	4407      	add	r7, r0
 8003de8:	4403      	add	r3, r0
 8003dea:	9306      	str	r3, [sp, #24]
 8003dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dee:	4403      	add	r3, r0
 8003df0:	9309      	str	r3, [sp, #36]	; 0x24
 8003df2:	9b06      	ldr	r3, [sp, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	dd05      	ble.n	8003e04 <_dtoa_r+0x834>
 8003df8:	4651      	mov	r1, sl
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	f000 fc0b 	bl	8004618 <__lshift>
 8003e02:	4682      	mov	sl, r0
 8003e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	dd05      	ble.n	8003e16 <_dtoa_r+0x846>
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4628      	mov	r0, r5
 8003e10:	f000 fc02 	bl	8004618 <__lshift>
 8003e14:	4604      	mov	r4, r0
 8003e16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d070      	beq.n	8003efe <_dtoa_r+0x92e>
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	4650      	mov	r0, sl
 8003e20:	f000 fc66 	bl	80046f0 <__mcmp>
 8003e24:	2800      	cmp	r0, #0
 8003e26:	da6a      	bge.n	8003efe <_dtoa_r+0x92e>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	4651      	mov	r1, sl
 8003e2c:	220a      	movs	r2, #10
 8003e2e:	4628      	mov	r0, r5
 8003e30:	f000 fa46 	bl	80042c0 <__multadd>
 8003e34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e36:	4682      	mov	sl, r0
 8003e38:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8193 	beq.w	8004168 <_dtoa_r+0xb98>
 8003e42:	4631      	mov	r1, r6
 8003e44:	2300      	movs	r3, #0
 8003e46:	220a      	movs	r2, #10
 8003e48:	4628      	mov	r0, r5
 8003e4a:	f000 fa39 	bl	80042c0 <__multadd>
 8003e4e:	f1bb 0f00 	cmp.w	fp, #0
 8003e52:	4606      	mov	r6, r0
 8003e54:	f300 8093 	bgt.w	8003f7e <_dtoa_r+0x9ae>
 8003e58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	dc57      	bgt.n	8003f0e <_dtoa_r+0x93e>
 8003e5e:	e08e      	b.n	8003f7e <_dtoa_r+0x9ae>
 8003e60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003e62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003e66:	e756      	b.n	8003d16 <_dtoa_r+0x746>
 8003e68:	9b02      	ldr	r3, [sp, #8]
 8003e6a:	1e5c      	subs	r4, r3, #1
 8003e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e6e:	42a3      	cmp	r3, r4
 8003e70:	bfb7      	itett	lt
 8003e72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003e74:	1b1c      	subge	r4, r3, r4
 8003e76:	1ae2      	sublt	r2, r4, r3
 8003e78:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003e7a:	bfbe      	ittt	lt
 8003e7c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003e7e:	189b      	addlt	r3, r3, r2
 8003e80:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003e82:	9b02      	ldr	r3, [sp, #8]
 8003e84:	bfb8      	it	lt
 8003e86:	2400      	movlt	r4, #0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bfbb      	ittet	lt
 8003e8c:	9b06      	ldrlt	r3, [sp, #24]
 8003e8e:	9a02      	ldrlt	r2, [sp, #8]
 8003e90:	9f06      	ldrge	r7, [sp, #24]
 8003e92:	1a9f      	sublt	r7, r3, r2
 8003e94:	bfac      	ite	ge
 8003e96:	9b02      	ldrge	r3, [sp, #8]
 8003e98:	2300      	movlt	r3, #0
 8003e9a:	e73e      	b.n	8003d1a <_dtoa_r+0x74a>
 8003e9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003e9e:	9f06      	ldr	r7, [sp, #24]
 8003ea0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003ea2:	e745      	b.n	8003d30 <_dtoa_r+0x760>
 8003ea4:	3fe00000 	.word	0x3fe00000
 8003ea8:	40240000 	.word	0x40240000
 8003eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003eae:	e76a      	b.n	8003d86 <_dtoa_r+0x7b6>
 8003eb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	dc19      	bgt.n	8003eea <_dtoa_r+0x91a>
 8003eb6:	9b04      	ldr	r3, [sp, #16]
 8003eb8:	b9bb      	cbnz	r3, 8003eea <_dtoa_r+0x91a>
 8003eba:	9b05      	ldr	r3, [sp, #20]
 8003ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec0:	b99b      	cbnz	r3, 8003eea <_dtoa_r+0x91a>
 8003ec2:	9b05      	ldr	r3, [sp, #20]
 8003ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ec8:	0d1b      	lsrs	r3, r3, #20
 8003eca:	051b      	lsls	r3, r3, #20
 8003ecc:	b183      	cbz	r3, 8003ef0 <_dtoa_r+0x920>
 8003ece:	f04f 0801 	mov.w	r8, #1
 8003ed2:	9b06      	ldr	r3, [sp, #24]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	9306      	str	r3, [sp, #24]
 8003ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eda:	3301      	adds	r3, #1
 8003edc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f47f af6a 	bne.w	8003dba <_dtoa_r+0x7ea>
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	e76f      	b.n	8003dca <_dtoa_r+0x7fa>
 8003eea:	f04f 0800 	mov.w	r8, #0
 8003eee:	e7f6      	b.n	8003ede <_dtoa_r+0x90e>
 8003ef0:	4698      	mov	r8, r3
 8003ef2:	e7f4      	b.n	8003ede <_dtoa_r+0x90e>
 8003ef4:	f43f af7d 	beq.w	8003df2 <_dtoa_r+0x822>
 8003ef8:	4618      	mov	r0, r3
 8003efa:	301c      	adds	r0, #28
 8003efc:	e772      	b.n	8003de4 <_dtoa_r+0x814>
 8003efe:	9b02      	ldr	r3, [sp, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	dc36      	bgt.n	8003f72 <_dtoa_r+0x9a2>
 8003f04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	dd33      	ble.n	8003f72 <_dtoa_r+0x9a2>
 8003f0a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003f0e:	f1bb 0f00 	cmp.w	fp, #0
 8003f12:	d10d      	bne.n	8003f30 <_dtoa_r+0x960>
 8003f14:	4621      	mov	r1, r4
 8003f16:	465b      	mov	r3, fp
 8003f18:	2205      	movs	r2, #5
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	f000 f9d0 	bl	80042c0 <__multadd>
 8003f20:	4601      	mov	r1, r0
 8003f22:	4604      	mov	r4, r0
 8003f24:	4650      	mov	r0, sl
 8003f26:	f000 fbe3 	bl	80046f0 <__mcmp>
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	f73f adb6 	bgt.w	8003a9c <_dtoa_r+0x4cc>
 8003f30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f32:	9f08      	ldr	r7, [sp, #32]
 8003f34:	ea6f 0903 	mvn.w	r9, r3
 8003f38:	f04f 0800 	mov.w	r8, #0
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	4628      	mov	r0, r5
 8003f40:	f000 f99c 	bl	800427c <_Bfree>
 8003f44:	2e00      	cmp	r6, #0
 8003f46:	f43f aea4 	beq.w	8003c92 <_dtoa_r+0x6c2>
 8003f4a:	f1b8 0f00 	cmp.w	r8, #0
 8003f4e:	d005      	beq.n	8003f5c <_dtoa_r+0x98c>
 8003f50:	45b0      	cmp	r8, r6
 8003f52:	d003      	beq.n	8003f5c <_dtoa_r+0x98c>
 8003f54:	4641      	mov	r1, r8
 8003f56:	4628      	mov	r0, r5
 8003f58:	f000 f990 	bl	800427c <_Bfree>
 8003f5c:	4631      	mov	r1, r6
 8003f5e:	4628      	mov	r0, r5
 8003f60:	f000 f98c 	bl	800427c <_Bfree>
 8003f64:	e695      	b.n	8003c92 <_dtoa_r+0x6c2>
 8003f66:	2400      	movs	r4, #0
 8003f68:	4626      	mov	r6, r4
 8003f6a:	e7e1      	b.n	8003f30 <_dtoa_r+0x960>
 8003f6c:	46c1      	mov	r9, r8
 8003f6e:	4626      	mov	r6, r4
 8003f70:	e594      	b.n	8003a9c <_dtoa_r+0x4cc>
 8003f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f74:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80fc 	beq.w	8004176 <_dtoa_r+0xba6>
 8003f7e:	2f00      	cmp	r7, #0
 8003f80:	dd05      	ble.n	8003f8e <_dtoa_r+0x9be>
 8003f82:	4631      	mov	r1, r6
 8003f84:	463a      	mov	r2, r7
 8003f86:	4628      	mov	r0, r5
 8003f88:	f000 fb46 	bl	8004618 <__lshift>
 8003f8c:	4606      	mov	r6, r0
 8003f8e:	f1b8 0f00 	cmp.w	r8, #0
 8003f92:	d05c      	beq.n	800404e <_dtoa_r+0xa7e>
 8003f94:	4628      	mov	r0, r5
 8003f96:	6871      	ldr	r1, [r6, #4]
 8003f98:	f000 f930 	bl	80041fc <_Balloc>
 8003f9c:	4607      	mov	r7, r0
 8003f9e:	b928      	cbnz	r0, 8003fac <_dtoa_r+0x9dc>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003fa6:	4b7e      	ldr	r3, [pc, #504]	; (80041a0 <_dtoa_r+0xbd0>)
 8003fa8:	f7ff bb26 	b.w	80035f8 <_dtoa_r+0x28>
 8003fac:	6932      	ldr	r2, [r6, #16]
 8003fae:	f106 010c 	add.w	r1, r6, #12
 8003fb2:	3202      	adds	r2, #2
 8003fb4:	0092      	lsls	r2, r2, #2
 8003fb6:	300c      	adds	r0, #12
 8003fb8:	f000 f912 	bl	80041e0 <memcpy>
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	4639      	mov	r1, r7
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	f000 fb29 	bl	8004618 <__lshift>
 8003fc6:	46b0      	mov	r8, r6
 8003fc8:	4606      	mov	r6, r0
 8003fca:	9b08      	ldr	r3, [sp, #32]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	9302      	str	r3, [sp, #8]
 8003fd0:	9b08      	ldr	r3, [sp, #32]
 8003fd2:	445b      	add	r3, fp
 8003fd4:	930a      	str	r3, [sp, #40]	; 0x28
 8003fd6:	9b04      	ldr	r3, [sp, #16]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8003fde:	9b02      	ldr	r3, [sp, #8]
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	4650      	mov	r0, sl
 8003fe4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8003fe8:	f7ff fa62 	bl	80034b0 <quorem>
 8003fec:	4603      	mov	r3, r0
 8003fee:	4641      	mov	r1, r8
 8003ff0:	3330      	adds	r3, #48	; 0x30
 8003ff2:	9004      	str	r0, [sp, #16]
 8003ff4:	4650      	mov	r0, sl
 8003ff6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ff8:	f000 fb7a 	bl	80046f0 <__mcmp>
 8003ffc:	4632      	mov	r2, r6
 8003ffe:	9006      	str	r0, [sp, #24]
 8004000:	4621      	mov	r1, r4
 8004002:	4628      	mov	r0, r5
 8004004:	f000 fb90 	bl	8004728 <__mdiff>
 8004008:	68c2      	ldr	r2, [r0, #12]
 800400a:	4607      	mov	r7, r0
 800400c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800400e:	bb02      	cbnz	r2, 8004052 <_dtoa_r+0xa82>
 8004010:	4601      	mov	r1, r0
 8004012:	4650      	mov	r0, sl
 8004014:	f000 fb6c 	bl	80046f0 <__mcmp>
 8004018:	4602      	mov	r2, r0
 800401a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800401c:	4639      	mov	r1, r7
 800401e:	4628      	mov	r0, r5
 8004020:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004024:	f000 f92a 	bl	800427c <_Bfree>
 8004028:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800402a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800402c:	9f02      	ldr	r7, [sp, #8]
 800402e:	ea43 0102 	orr.w	r1, r3, r2
 8004032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004034:	430b      	orrs	r3, r1
 8004036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004038:	d10d      	bne.n	8004056 <_dtoa_r+0xa86>
 800403a:	2b39      	cmp	r3, #57	; 0x39
 800403c:	d027      	beq.n	800408e <_dtoa_r+0xabe>
 800403e:	9a06      	ldr	r2, [sp, #24]
 8004040:	2a00      	cmp	r2, #0
 8004042:	dd01      	ble.n	8004048 <_dtoa_r+0xa78>
 8004044:	9b04      	ldr	r3, [sp, #16]
 8004046:	3331      	adds	r3, #49	; 0x31
 8004048:	f88b 3000 	strb.w	r3, [fp]
 800404c:	e776      	b.n	8003f3c <_dtoa_r+0x96c>
 800404e:	4630      	mov	r0, r6
 8004050:	e7b9      	b.n	8003fc6 <_dtoa_r+0x9f6>
 8004052:	2201      	movs	r2, #1
 8004054:	e7e2      	b.n	800401c <_dtoa_r+0xa4c>
 8004056:	9906      	ldr	r1, [sp, #24]
 8004058:	2900      	cmp	r1, #0
 800405a:	db04      	blt.n	8004066 <_dtoa_r+0xa96>
 800405c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800405e:	4301      	orrs	r1, r0
 8004060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004062:	4301      	orrs	r1, r0
 8004064:	d120      	bne.n	80040a8 <_dtoa_r+0xad8>
 8004066:	2a00      	cmp	r2, #0
 8004068:	ddee      	ble.n	8004048 <_dtoa_r+0xa78>
 800406a:	4651      	mov	r1, sl
 800406c:	2201      	movs	r2, #1
 800406e:	4628      	mov	r0, r5
 8004070:	9302      	str	r3, [sp, #8]
 8004072:	f000 fad1 	bl	8004618 <__lshift>
 8004076:	4621      	mov	r1, r4
 8004078:	4682      	mov	sl, r0
 800407a:	f000 fb39 	bl	80046f0 <__mcmp>
 800407e:	2800      	cmp	r0, #0
 8004080:	9b02      	ldr	r3, [sp, #8]
 8004082:	dc02      	bgt.n	800408a <_dtoa_r+0xaba>
 8004084:	d1e0      	bne.n	8004048 <_dtoa_r+0xa78>
 8004086:	07da      	lsls	r2, r3, #31
 8004088:	d5de      	bpl.n	8004048 <_dtoa_r+0xa78>
 800408a:	2b39      	cmp	r3, #57	; 0x39
 800408c:	d1da      	bne.n	8004044 <_dtoa_r+0xa74>
 800408e:	2339      	movs	r3, #57	; 0x39
 8004090:	f88b 3000 	strb.w	r3, [fp]
 8004094:	463b      	mov	r3, r7
 8004096:	461f      	mov	r7, r3
 8004098:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800409c:	3b01      	subs	r3, #1
 800409e:	2a39      	cmp	r2, #57	; 0x39
 80040a0:	d050      	beq.n	8004144 <_dtoa_r+0xb74>
 80040a2:	3201      	adds	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]
 80040a6:	e749      	b.n	8003f3c <_dtoa_r+0x96c>
 80040a8:	2a00      	cmp	r2, #0
 80040aa:	dd03      	ble.n	80040b4 <_dtoa_r+0xae4>
 80040ac:	2b39      	cmp	r3, #57	; 0x39
 80040ae:	d0ee      	beq.n	800408e <_dtoa_r+0xabe>
 80040b0:	3301      	adds	r3, #1
 80040b2:	e7c9      	b.n	8004048 <_dtoa_r+0xa78>
 80040b4:	9a02      	ldr	r2, [sp, #8]
 80040b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80040b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80040bc:	428a      	cmp	r2, r1
 80040be:	d02a      	beq.n	8004116 <_dtoa_r+0xb46>
 80040c0:	4651      	mov	r1, sl
 80040c2:	2300      	movs	r3, #0
 80040c4:	220a      	movs	r2, #10
 80040c6:	4628      	mov	r0, r5
 80040c8:	f000 f8fa 	bl	80042c0 <__multadd>
 80040cc:	45b0      	cmp	r8, r6
 80040ce:	4682      	mov	sl, r0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	f04f 020a 	mov.w	r2, #10
 80040d8:	4641      	mov	r1, r8
 80040da:	4628      	mov	r0, r5
 80040dc:	d107      	bne.n	80040ee <_dtoa_r+0xb1e>
 80040de:	f000 f8ef 	bl	80042c0 <__multadd>
 80040e2:	4680      	mov	r8, r0
 80040e4:	4606      	mov	r6, r0
 80040e6:	9b02      	ldr	r3, [sp, #8]
 80040e8:	3301      	adds	r3, #1
 80040ea:	9302      	str	r3, [sp, #8]
 80040ec:	e777      	b.n	8003fde <_dtoa_r+0xa0e>
 80040ee:	f000 f8e7 	bl	80042c0 <__multadd>
 80040f2:	4631      	mov	r1, r6
 80040f4:	4680      	mov	r8, r0
 80040f6:	2300      	movs	r3, #0
 80040f8:	220a      	movs	r2, #10
 80040fa:	4628      	mov	r0, r5
 80040fc:	f000 f8e0 	bl	80042c0 <__multadd>
 8004100:	4606      	mov	r6, r0
 8004102:	e7f0      	b.n	80040e6 <_dtoa_r+0xb16>
 8004104:	f1bb 0f00 	cmp.w	fp, #0
 8004108:	bfcc      	ite	gt
 800410a:	465f      	movgt	r7, fp
 800410c:	2701      	movle	r7, #1
 800410e:	f04f 0800 	mov.w	r8, #0
 8004112:	9a08      	ldr	r2, [sp, #32]
 8004114:	4417      	add	r7, r2
 8004116:	4651      	mov	r1, sl
 8004118:	2201      	movs	r2, #1
 800411a:	4628      	mov	r0, r5
 800411c:	9302      	str	r3, [sp, #8]
 800411e:	f000 fa7b 	bl	8004618 <__lshift>
 8004122:	4621      	mov	r1, r4
 8004124:	4682      	mov	sl, r0
 8004126:	f000 fae3 	bl	80046f0 <__mcmp>
 800412a:	2800      	cmp	r0, #0
 800412c:	dcb2      	bgt.n	8004094 <_dtoa_r+0xac4>
 800412e:	d102      	bne.n	8004136 <_dtoa_r+0xb66>
 8004130:	9b02      	ldr	r3, [sp, #8]
 8004132:	07db      	lsls	r3, r3, #31
 8004134:	d4ae      	bmi.n	8004094 <_dtoa_r+0xac4>
 8004136:	463b      	mov	r3, r7
 8004138:	461f      	mov	r7, r3
 800413a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800413e:	2a30      	cmp	r2, #48	; 0x30
 8004140:	d0fa      	beq.n	8004138 <_dtoa_r+0xb68>
 8004142:	e6fb      	b.n	8003f3c <_dtoa_r+0x96c>
 8004144:	9a08      	ldr	r2, [sp, #32]
 8004146:	429a      	cmp	r2, r3
 8004148:	d1a5      	bne.n	8004096 <_dtoa_r+0xac6>
 800414a:	2331      	movs	r3, #49	; 0x31
 800414c:	f109 0901 	add.w	r9, r9, #1
 8004150:	7013      	strb	r3, [r2, #0]
 8004152:	e6f3      	b.n	8003f3c <_dtoa_r+0x96c>
 8004154:	4b13      	ldr	r3, [pc, #76]	; (80041a4 <_dtoa_r+0xbd4>)
 8004156:	f7ff baa7 	b.w	80036a8 <_dtoa_r+0xd8>
 800415a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800415c:	2b00      	cmp	r3, #0
 800415e:	f47f aa80 	bne.w	8003662 <_dtoa_r+0x92>
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <_dtoa_r+0xbd8>)
 8004164:	f7ff baa0 	b.w	80036a8 <_dtoa_r+0xd8>
 8004168:	f1bb 0f00 	cmp.w	fp, #0
 800416c:	dc03      	bgt.n	8004176 <_dtoa_r+0xba6>
 800416e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004170:	2b02      	cmp	r3, #2
 8004172:	f73f aecc 	bgt.w	8003f0e <_dtoa_r+0x93e>
 8004176:	9f08      	ldr	r7, [sp, #32]
 8004178:	4621      	mov	r1, r4
 800417a:	4650      	mov	r0, sl
 800417c:	f7ff f998 	bl	80034b0 <quorem>
 8004180:	9a08      	ldr	r2, [sp, #32]
 8004182:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004186:	f807 3b01 	strb.w	r3, [r7], #1
 800418a:	1aba      	subs	r2, r7, r2
 800418c:	4593      	cmp	fp, r2
 800418e:	ddb9      	ble.n	8004104 <_dtoa_r+0xb34>
 8004190:	4651      	mov	r1, sl
 8004192:	2300      	movs	r3, #0
 8004194:	220a      	movs	r2, #10
 8004196:	4628      	mov	r0, r5
 8004198:	f000 f892 	bl	80042c0 <__multadd>
 800419c:	4682      	mov	sl, r0
 800419e:	e7eb      	b.n	8004178 <_dtoa_r+0xba8>
 80041a0:	08005a03 	.word	0x08005a03
 80041a4:	0800595c 	.word	0x0800595c
 80041a8:	08005980 	.word	0x08005980

080041ac <_localeconv_r>:
 80041ac:	4800      	ldr	r0, [pc, #0]	; (80041b0 <_localeconv_r+0x4>)
 80041ae:	4770      	bx	lr
 80041b0:	20000164 	.word	0x20000164

080041b4 <malloc>:
 80041b4:	4b02      	ldr	r3, [pc, #8]	; (80041c0 <malloc+0xc>)
 80041b6:	4601      	mov	r1, r0
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	f000 bbfb 	b.w	80049b4 <_malloc_r>
 80041be:	bf00      	nop
 80041c0:	20000010 	.word	0x20000010

080041c4 <memchr>:
 80041c4:	4603      	mov	r3, r0
 80041c6:	b510      	push	{r4, lr}
 80041c8:	b2c9      	uxtb	r1, r1
 80041ca:	4402      	add	r2, r0
 80041cc:	4293      	cmp	r3, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	d101      	bne.n	80041d6 <memchr+0x12>
 80041d2:	2000      	movs	r0, #0
 80041d4:	e003      	b.n	80041de <memchr+0x1a>
 80041d6:	7804      	ldrb	r4, [r0, #0]
 80041d8:	3301      	adds	r3, #1
 80041da:	428c      	cmp	r4, r1
 80041dc:	d1f6      	bne.n	80041cc <memchr+0x8>
 80041de:	bd10      	pop	{r4, pc}

080041e0 <memcpy>:
 80041e0:	440a      	add	r2, r1
 80041e2:	4291      	cmp	r1, r2
 80041e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80041e8:	d100      	bne.n	80041ec <memcpy+0xc>
 80041ea:	4770      	bx	lr
 80041ec:	b510      	push	{r4, lr}
 80041ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041f2:	4291      	cmp	r1, r2
 80041f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041f8:	d1f9      	bne.n	80041ee <memcpy+0xe>
 80041fa:	bd10      	pop	{r4, pc}

080041fc <_Balloc>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004200:	4604      	mov	r4, r0
 8004202:	460d      	mov	r5, r1
 8004204:	b976      	cbnz	r6, 8004224 <_Balloc+0x28>
 8004206:	2010      	movs	r0, #16
 8004208:	f7ff ffd4 	bl	80041b4 <malloc>
 800420c:	4602      	mov	r2, r0
 800420e:	6260      	str	r0, [r4, #36]	; 0x24
 8004210:	b920      	cbnz	r0, 800421c <_Balloc+0x20>
 8004212:	2166      	movs	r1, #102	; 0x66
 8004214:	4b17      	ldr	r3, [pc, #92]	; (8004274 <_Balloc+0x78>)
 8004216:	4818      	ldr	r0, [pc, #96]	; (8004278 <_Balloc+0x7c>)
 8004218:	f000 fd92 	bl	8004d40 <__assert_func>
 800421c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004220:	6006      	str	r6, [r0, #0]
 8004222:	60c6      	str	r6, [r0, #12]
 8004224:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004226:	68f3      	ldr	r3, [r6, #12]
 8004228:	b183      	cbz	r3, 800424c <_Balloc+0x50>
 800422a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004232:	b9b8      	cbnz	r0, 8004264 <_Balloc+0x68>
 8004234:	2101      	movs	r1, #1
 8004236:	fa01 f605 	lsl.w	r6, r1, r5
 800423a:	1d72      	adds	r2, r6, #5
 800423c:	4620      	mov	r0, r4
 800423e:	0092      	lsls	r2, r2, #2
 8004240:	f000 fb5e 	bl	8004900 <_calloc_r>
 8004244:	b160      	cbz	r0, 8004260 <_Balloc+0x64>
 8004246:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800424a:	e00e      	b.n	800426a <_Balloc+0x6e>
 800424c:	2221      	movs	r2, #33	; 0x21
 800424e:	2104      	movs	r1, #4
 8004250:	4620      	mov	r0, r4
 8004252:	f000 fb55 	bl	8004900 <_calloc_r>
 8004256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004258:	60f0      	str	r0, [r6, #12]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e4      	bne.n	800422a <_Balloc+0x2e>
 8004260:	2000      	movs	r0, #0
 8004262:	bd70      	pop	{r4, r5, r6, pc}
 8004264:	6802      	ldr	r2, [r0, #0]
 8004266:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800426a:	2300      	movs	r3, #0
 800426c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004270:	e7f7      	b.n	8004262 <_Balloc+0x66>
 8004272:	bf00      	nop
 8004274:	0800598d 	.word	0x0800598d
 8004278:	08005a14 	.word	0x08005a14

0800427c <_Bfree>:
 800427c:	b570      	push	{r4, r5, r6, lr}
 800427e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004280:	4605      	mov	r5, r0
 8004282:	460c      	mov	r4, r1
 8004284:	b976      	cbnz	r6, 80042a4 <_Bfree+0x28>
 8004286:	2010      	movs	r0, #16
 8004288:	f7ff ff94 	bl	80041b4 <malloc>
 800428c:	4602      	mov	r2, r0
 800428e:	6268      	str	r0, [r5, #36]	; 0x24
 8004290:	b920      	cbnz	r0, 800429c <_Bfree+0x20>
 8004292:	218a      	movs	r1, #138	; 0x8a
 8004294:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <_Bfree+0x3c>)
 8004296:	4809      	ldr	r0, [pc, #36]	; (80042bc <_Bfree+0x40>)
 8004298:	f000 fd52 	bl	8004d40 <__assert_func>
 800429c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80042a0:	6006      	str	r6, [r0, #0]
 80042a2:	60c6      	str	r6, [r0, #12]
 80042a4:	b13c      	cbz	r4, 80042b6 <_Bfree+0x3a>
 80042a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80042a8:	6862      	ldr	r2, [r4, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042b0:	6021      	str	r1, [r4, #0]
 80042b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	0800598d 	.word	0x0800598d
 80042bc:	08005a14 	.word	0x08005a14

080042c0 <__multadd>:
 80042c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042c4:	4698      	mov	r8, r3
 80042c6:	460c      	mov	r4, r1
 80042c8:	2300      	movs	r3, #0
 80042ca:	690e      	ldr	r6, [r1, #16]
 80042cc:	4607      	mov	r7, r0
 80042ce:	f101 0014 	add.w	r0, r1, #20
 80042d2:	6805      	ldr	r5, [r0, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	b2a9      	uxth	r1, r5
 80042d8:	fb02 8101 	mla	r1, r2, r1, r8
 80042dc:	0c2d      	lsrs	r5, r5, #16
 80042de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80042e2:	fb02 c505 	mla	r5, r2, r5, ip
 80042e6:	b289      	uxth	r1, r1
 80042e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80042ec:	429e      	cmp	r6, r3
 80042ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80042f2:	f840 1b04 	str.w	r1, [r0], #4
 80042f6:	dcec      	bgt.n	80042d2 <__multadd+0x12>
 80042f8:	f1b8 0f00 	cmp.w	r8, #0
 80042fc:	d022      	beq.n	8004344 <__multadd+0x84>
 80042fe:	68a3      	ldr	r3, [r4, #8]
 8004300:	42b3      	cmp	r3, r6
 8004302:	dc19      	bgt.n	8004338 <__multadd+0x78>
 8004304:	6861      	ldr	r1, [r4, #4]
 8004306:	4638      	mov	r0, r7
 8004308:	3101      	adds	r1, #1
 800430a:	f7ff ff77 	bl	80041fc <_Balloc>
 800430e:	4605      	mov	r5, r0
 8004310:	b928      	cbnz	r0, 800431e <__multadd+0x5e>
 8004312:	4602      	mov	r2, r0
 8004314:	21b5      	movs	r1, #181	; 0xb5
 8004316:	4b0d      	ldr	r3, [pc, #52]	; (800434c <__multadd+0x8c>)
 8004318:	480d      	ldr	r0, [pc, #52]	; (8004350 <__multadd+0x90>)
 800431a:	f000 fd11 	bl	8004d40 <__assert_func>
 800431e:	6922      	ldr	r2, [r4, #16]
 8004320:	f104 010c 	add.w	r1, r4, #12
 8004324:	3202      	adds	r2, #2
 8004326:	0092      	lsls	r2, r2, #2
 8004328:	300c      	adds	r0, #12
 800432a:	f7ff ff59 	bl	80041e0 <memcpy>
 800432e:	4621      	mov	r1, r4
 8004330:	4638      	mov	r0, r7
 8004332:	f7ff ffa3 	bl	800427c <_Bfree>
 8004336:	462c      	mov	r4, r5
 8004338:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800433c:	3601      	adds	r6, #1
 800433e:	f8c3 8014 	str.w	r8, [r3, #20]
 8004342:	6126      	str	r6, [r4, #16]
 8004344:	4620      	mov	r0, r4
 8004346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800434a:	bf00      	nop
 800434c:	08005a03 	.word	0x08005a03
 8004350:	08005a14 	.word	0x08005a14

08004354 <__hi0bits>:
 8004354:	0c02      	lsrs	r2, r0, #16
 8004356:	0412      	lsls	r2, r2, #16
 8004358:	4603      	mov	r3, r0
 800435a:	b9ca      	cbnz	r2, 8004390 <__hi0bits+0x3c>
 800435c:	0403      	lsls	r3, r0, #16
 800435e:	2010      	movs	r0, #16
 8004360:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004364:	bf04      	itt	eq
 8004366:	021b      	lsleq	r3, r3, #8
 8004368:	3008      	addeq	r0, #8
 800436a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800436e:	bf04      	itt	eq
 8004370:	011b      	lsleq	r3, r3, #4
 8004372:	3004      	addeq	r0, #4
 8004374:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004378:	bf04      	itt	eq
 800437a:	009b      	lsleq	r3, r3, #2
 800437c:	3002      	addeq	r0, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	db05      	blt.n	800438e <__hi0bits+0x3a>
 8004382:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004386:	f100 0001 	add.w	r0, r0, #1
 800438a:	bf08      	it	eq
 800438c:	2020      	moveq	r0, #32
 800438e:	4770      	bx	lr
 8004390:	2000      	movs	r0, #0
 8004392:	e7e5      	b.n	8004360 <__hi0bits+0xc>

08004394 <__lo0bits>:
 8004394:	6803      	ldr	r3, [r0, #0]
 8004396:	4602      	mov	r2, r0
 8004398:	f013 0007 	ands.w	r0, r3, #7
 800439c:	d00b      	beq.n	80043b6 <__lo0bits+0x22>
 800439e:	07d9      	lsls	r1, r3, #31
 80043a0:	d422      	bmi.n	80043e8 <__lo0bits+0x54>
 80043a2:	0798      	lsls	r0, r3, #30
 80043a4:	bf49      	itett	mi
 80043a6:	085b      	lsrmi	r3, r3, #1
 80043a8:	089b      	lsrpl	r3, r3, #2
 80043aa:	2001      	movmi	r0, #1
 80043ac:	6013      	strmi	r3, [r2, #0]
 80043ae:	bf5c      	itt	pl
 80043b0:	2002      	movpl	r0, #2
 80043b2:	6013      	strpl	r3, [r2, #0]
 80043b4:	4770      	bx	lr
 80043b6:	b299      	uxth	r1, r3
 80043b8:	b909      	cbnz	r1, 80043be <__lo0bits+0x2a>
 80043ba:	2010      	movs	r0, #16
 80043bc:	0c1b      	lsrs	r3, r3, #16
 80043be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80043c2:	bf04      	itt	eq
 80043c4:	0a1b      	lsreq	r3, r3, #8
 80043c6:	3008      	addeq	r0, #8
 80043c8:	0719      	lsls	r1, r3, #28
 80043ca:	bf04      	itt	eq
 80043cc:	091b      	lsreq	r3, r3, #4
 80043ce:	3004      	addeq	r0, #4
 80043d0:	0799      	lsls	r1, r3, #30
 80043d2:	bf04      	itt	eq
 80043d4:	089b      	lsreq	r3, r3, #2
 80043d6:	3002      	addeq	r0, #2
 80043d8:	07d9      	lsls	r1, r3, #31
 80043da:	d403      	bmi.n	80043e4 <__lo0bits+0x50>
 80043dc:	085b      	lsrs	r3, r3, #1
 80043de:	f100 0001 	add.w	r0, r0, #1
 80043e2:	d003      	beq.n	80043ec <__lo0bits+0x58>
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	4770      	bx	lr
 80043e8:	2000      	movs	r0, #0
 80043ea:	4770      	bx	lr
 80043ec:	2020      	movs	r0, #32
 80043ee:	4770      	bx	lr

080043f0 <__i2b>:
 80043f0:	b510      	push	{r4, lr}
 80043f2:	460c      	mov	r4, r1
 80043f4:	2101      	movs	r1, #1
 80043f6:	f7ff ff01 	bl	80041fc <_Balloc>
 80043fa:	4602      	mov	r2, r0
 80043fc:	b928      	cbnz	r0, 800440a <__i2b+0x1a>
 80043fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004402:	4b04      	ldr	r3, [pc, #16]	; (8004414 <__i2b+0x24>)
 8004404:	4804      	ldr	r0, [pc, #16]	; (8004418 <__i2b+0x28>)
 8004406:	f000 fc9b 	bl	8004d40 <__assert_func>
 800440a:	2301      	movs	r3, #1
 800440c:	6144      	str	r4, [r0, #20]
 800440e:	6103      	str	r3, [r0, #16]
 8004410:	bd10      	pop	{r4, pc}
 8004412:	bf00      	nop
 8004414:	08005a03 	.word	0x08005a03
 8004418:	08005a14 	.word	0x08005a14

0800441c <__multiply>:
 800441c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004420:	4614      	mov	r4, r2
 8004422:	690a      	ldr	r2, [r1, #16]
 8004424:	6923      	ldr	r3, [r4, #16]
 8004426:	460d      	mov	r5, r1
 8004428:	429a      	cmp	r2, r3
 800442a:	bfbe      	ittt	lt
 800442c:	460b      	movlt	r3, r1
 800442e:	4625      	movlt	r5, r4
 8004430:	461c      	movlt	r4, r3
 8004432:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004436:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800443a:	68ab      	ldr	r3, [r5, #8]
 800443c:	6869      	ldr	r1, [r5, #4]
 800443e:	eb0a 0709 	add.w	r7, sl, r9
 8004442:	42bb      	cmp	r3, r7
 8004444:	b085      	sub	sp, #20
 8004446:	bfb8      	it	lt
 8004448:	3101      	addlt	r1, #1
 800444a:	f7ff fed7 	bl	80041fc <_Balloc>
 800444e:	b930      	cbnz	r0, 800445e <__multiply+0x42>
 8004450:	4602      	mov	r2, r0
 8004452:	f240 115d 	movw	r1, #349	; 0x15d
 8004456:	4b41      	ldr	r3, [pc, #260]	; (800455c <__multiply+0x140>)
 8004458:	4841      	ldr	r0, [pc, #260]	; (8004560 <__multiply+0x144>)
 800445a:	f000 fc71 	bl	8004d40 <__assert_func>
 800445e:	f100 0614 	add.w	r6, r0, #20
 8004462:	4633      	mov	r3, r6
 8004464:	2200      	movs	r2, #0
 8004466:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800446a:	4543      	cmp	r3, r8
 800446c:	d31e      	bcc.n	80044ac <__multiply+0x90>
 800446e:	f105 0c14 	add.w	ip, r5, #20
 8004472:	f104 0314 	add.w	r3, r4, #20
 8004476:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800447a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800447e:	9202      	str	r2, [sp, #8]
 8004480:	ebac 0205 	sub.w	r2, ip, r5
 8004484:	3a15      	subs	r2, #21
 8004486:	f022 0203 	bic.w	r2, r2, #3
 800448a:	3204      	adds	r2, #4
 800448c:	f105 0115 	add.w	r1, r5, #21
 8004490:	458c      	cmp	ip, r1
 8004492:	bf38      	it	cc
 8004494:	2204      	movcc	r2, #4
 8004496:	9201      	str	r2, [sp, #4]
 8004498:	9a02      	ldr	r2, [sp, #8]
 800449a:	9303      	str	r3, [sp, #12]
 800449c:	429a      	cmp	r2, r3
 800449e:	d808      	bhi.n	80044b2 <__multiply+0x96>
 80044a0:	2f00      	cmp	r7, #0
 80044a2:	dc55      	bgt.n	8004550 <__multiply+0x134>
 80044a4:	6107      	str	r7, [r0, #16]
 80044a6:	b005      	add	sp, #20
 80044a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ac:	f843 2b04 	str.w	r2, [r3], #4
 80044b0:	e7db      	b.n	800446a <__multiply+0x4e>
 80044b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80044b6:	f1ba 0f00 	cmp.w	sl, #0
 80044ba:	d020      	beq.n	80044fe <__multiply+0xe2>
 80044bc:	46b1      	mov	r9, r6
 80044be:	2200      	movs	r2, #0
 80044c0:	f105 0e14 	add.w	lr, r5, #20
 80044c4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80044c8:	f8d9 b000 	ldr.w	fp, [r9]
 80044cc:	b2a1      	uxth	r1, r4
 80044ce:	fa1f fb8b 	uxth.w	fp, fp
 80044d2:	fb0a b101 	mla	r1, sl, r1, fp
 80044d6:	4411      	add	r1, r2
 80044d8:	f8d9 2000 	ldr.w	r2, [r9]
 80044dc:	0c24      	lsrs	r4, r4, #16
 80044de:	0c12      	lsrs	r2, r2, #16
 80044e0:	fb0a 2404 	mla	r4, sl, r4, r2
 80044e4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80044e8:	b289      	uxth	r1, r1
 80044ea:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80044ee:	45f4      	cmp	ip, lr
 80044f0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80044f4:	f849 1b04 	str.w	r1, [r9], #4
 80044f8:	d8e4      	bhi.n	80044c4 <__multiply+0xa8>
 80044fa:	9901      	ldr	r1, [sp, #4]
 80044fc:	5072      	str	r2, [r6, r1]
 80044fe:	9a03      	ldr	r2, [sp, #12]
 8004500:	3304      	adds	r3, #4
 8004502:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004506:	f1b9 0f00 	cmp.w	r9, #0
 800450a:	d01f      	beq.n	800454c <__multiply+0x130>
 800450c:	46b6      	mov	lr, r6
 800450e:	f04f 0a00 	mov.w	sl, #0
 8004512:	6834      	ldr	r4, [r6, #0]
 8004514:	f105 0114 	add.w	r1, r5, #20
 8004518:	880a      	ldrh	r2, [r1, #0]
 800451a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800451e:	b2a4      	uxth	r4, r4
 8004520:	fb09 b202 	mla	r2, r9, r2, fp
 8004524:	4492      	add	sl, r2
 8004526:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800452a:	f84e 4b04 	str.w	r4, [lr], #4
 800452e:	f851 4b04 	ldr.w	r4, [r1], #4
 8004532:	f8be 2000 	ldrh.w	r2, [lr]
 8004536:	0c24      	lsrs	r4, r4, #16
 8004538:	fb09 2404 	mla	r4, r9, r4, r2
 800453c:	458c      	cmp	ip, r1
 800453e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004542:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004546:	d8e7      	bhi.n	8004518 <__multiply+0xfc>
 8004548:	9a01      	ldr	r2, [sp, #4]
 800454a:	50b4      	str	r4, [r6, r2]
 800454c:	3604      	adds	r6, #4
 800454e:	e7a3      	b.n	8004498 <__multiply+0x7c>
 8004550:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1a5      	bne.n	80044a4 <__multiply+0x88>
 8004558:	3f01      	subs	r7, #1
 800455a:	e7a1      	b.n	80044a0 <__multiply+0x84>
 800455c:	08005a03 	.word	0x08005a03
 8004560:	08005a14 	.word	0x08005a14

08004564 <__pow5mult>:
 8004564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004568:	4615      	mov	r5, r2
 800456a:	f012 0203 	ands.w	r2, r2, #3
 800456e:	4606      	mov	r6, r0
 8004570:	460f      	mov	r7, r1
 8004572:	d007      	beq.n	8004584 <__pow5mult+0x20>
 8004574:	4c25      	ldr	r4, [pc, #148]	; (800460c <__pow5mult+0xa8>)
 8004576:	3a01      	subs	r2, #1
 8004578:	2300      	movs	r3, #0
 800457a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800457e:	f7ff fe9f 	bl	80042c0 <__multadd>
 8004582:	4607      	mov	r7, r0
 8004584:	10ad      	asrs	r5, r5, #2
 8004586:	d03d      	beq.n	8004604 <__pow5mult+0xa0>
 8004588:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800458a:	b97c      	cbnz	r4, 80045ac <__pow5mult+0x48>
 800458c:	2010      	movs	r0, #16
 800458e:	f7ff fe11 	bl	80041b4 <malloc>
 8004592:	4602      	mov	r2, r0
 8004594:	6270      	str	r0, [r6, #36]	; 0x24
 8004596:	b928      	cbnz	r0, 80045a4 <__pow5mult+0x40>
 8004598:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800459c:	4b1c      	ldr	r3, [pc, #112]	; (8004610 <__pow5mult+0xac>)
 800459e:	481d      	ldr	r0, [pc, #116]	; (8004614 <__pow5mult+0xb0>)
 80045a0:	f000 fbce 	bl	8004d40 <__assert_func>
 80045a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80045a8:	6004      	str	r4, [r0, #0]
 80045aa:	60c4      	str	r4, [r0, #12]
 80045ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80045b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80045b4:	b94c      	cbnz	r4, 80045ca <__pow5mult+0x66>
 80045b6:	f240 2171 	movw	r1, #625	; 0x271
 80045ba:	4630      	mov	r0, r6
 80045bc:	f7ff ff18 	bl	80043f0 <__i2b>
 80045c0:	2300      	movs	r3, #0
 80045c2:	4604      	mov	r4, r0
 80045c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80045c8:	6003      	str	r3, [r0, #0]
 80045ca:	f04f 0900 	mov.w	r9, #0
 80045ce:	07eb      	lsls	r3, r5, #31
 80045d0:	d50a      	bpl.n	80045e8 <__pow5mult+0x84>
 80045d2:	4639      	mov	r1, r7
 80045d4:	4622      	mov	r2, r4
 80045d6:	4630      	mov	r0, r6
 80045d8:	f7ff ff20 	bl	800441c <__multiply>
 80045dc:	4680      	mov	r8, r0
 80045de:	4639      	mov	r1, r7
 80045e0:	4630      	mov	r0, r6
 80045e2:	f7ff fe4b 	bl	800427c <_Bfree>
 80045e6:	4647      	mov	r7, r8
 80045e8:	106d      	asrs	r5, r5, #1
 80045ea:	d00b      	beq.n	8004604 <__pow5mult+0xa0>
 80045ec:	6820      	ldr	r0, [r4, #0]
 80045ee:	b938      	cbnz	r0, 8004600 <__pow5mult+0x9c>
 80045f0:	4622      	mov	r2, r4
 80045f2:	4621      	mov	r1, r4
 80045f4:	4630      	mov	r0, r6
 80045f6:	f7ff ff11 	bl	800441c <__multiply>
 80045fa:	6020      	str	r0, [r4, #0]
 80045fc:	f8c0 9000 	str.w	r9, [r0]
 8004600:	4604      	mov	r4, r0
 8004602:	e7e4      	b.n	80045ce <__pow5mult+0x6a>
 8004604:	4638      	mov	r0, r7
 8004606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800460a:	bf00      	nop
 800460c:	08005b68 	.word	0x08005b68
 8004610:	0800598d 	.word	0x0800598d
 8004614:	08005a14 	.word	0x08005a14

08004618 <__lshift>:
 8004618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800461c:	460c      	mov	r4, r1
 800461e:	4607      	mov	r7, r0
 8004620:	4691      	mov	r9, r2
 8004622:	6923      	ldr	r3, [r4, #16]
 8004624:	6849      	ldr	r1, [r1, #4]
 8004626:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800462a:	68a3      	ldr	r3, [r4, #8]
 800462c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004630:	f108 0601 	add.w	r6, r8, #1
 8004634:	42b3      	cmp	r3, r6
 8004636:	db0b      	blt.n	8004650 <__lshift+0x38>
 8004638:	4638      	mov	r0, r7
 800463a:	f7ff fddf 	bl	80041fc <_Balloc>
 800463e:	4605      	mov	r5, r0
 8004640:	b948      	cbnz	r0, 8004656 <__lshift+0x3e>
 8004642:	4602      	mov	r2, r0
 8004644:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004648:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <__lshift+0xd0>)
 800464a:	4828      	ldr	r0, [pc, #160]	; (80046ec <__lshift+0xd4>)
 800464c:	f000 fb78 	bl	8004d40 <__assert_func>
 8004650:	3101      	adds	r1, #1
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	e7ee      	b.n	8004634 <__lshift+0x1c>
 8004656:	2300      	movs	r3, #0
 8004658:	f100 0114 	add.w	r1, r0, #20
 800465c:	f100 0210 	add.w	r2, r0, #16
 8004660:	4618      	mov	r0, r3
 8004662:	4553      	cmp	r3, sl
 8004664:	db33      	blt.n	80046ce <__lshift+0xb6>
 8004666:	6920      	ldr	r0, [r4, #16]
 8004668:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800466c:	f104 0314 	add.w	r3, r4, #20
 8004670:	f019 091f 	ands.w	r9, r9, #31
 8004674:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004678:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800467c:	d02b      	beq.n	80046d6 <__lshift+0xbe>
 800467e:	468a      	mov	sl, r1
 8004680:	2200      	movs	r2, #0
 8004682:	f1c9 0e20 	rsb	lr, r9, #32
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	fa00 f009 	lsl.w	r0, r0, r9
 800468c:	4302      	orrs	r2, r0
 800468e:	f84a 2b04 	str.w	r2, [sl], #4
 8004692:	f853 2b04 	ldr.w	r2, [r3], #4
 8004696:	459c      	cmp	ip, r3
 8004698:	fa22 f20e 	lsr.w	r2, r2, lr
 800469c:	d8f3      	bhi.n	8004686 <__lshift+0x6e>
 800469e:	ebac 0304 	sub.w	r3, ip, r4
 80046a2:	3b15      	subs	r3, #21
 80046a4:	f023 0303 	bic.w	r3, r3, #3
 80046a8:	3304      	adds	r3, #4
 80046aa:	f104 0015 	add.w	r0, r4, #21
 80046ae:	4584      	cmp	ip, r0
 80046b0:	bf38      	it	cc
 80046b2:	2304      	movcc	r3, #4
 80046b4:	50ca      	str	r2, [r1, r3]
 80046b6:	b10a      	cbz	r2, 80046bc <__lshift+0xa4>
 80046b8:	f108 0602 	add.w	r6, r8, #2
 80046bc:	3e01      	subs	r6, #1
 80046be:	4638      	mov	r0, r7
 80046c0:	4621      	mov	r1, r4
 80046c2:	612e      	str	r6, [r5, #16]
 80046c4:	f7ff fdda 	bl	800427c <_Bfree>
 80046c8:	4628      	mov	r0, r5
 80046ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80046d2:	3301      	adds	r3, #1
 80046d4:	e7c5      	b.n	8004662 <__lshift+0x4a>
 80046d6:	3904      	subs	r1, #4
 80046d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80046dc:	459c      	cmp	ip, r3
 80046de:	f841 2f04 	str.w	r2, [r1, #4]!
 80046e2:	d8f9      	bhi.n	80046d8 <__lshift+0xc0>
 80046e4:	e7ea      	b.n	80046bc <__lshift+0xa4>
 80046e6:	bf00      	nop
 80046e8:	08005a03 	.word	0x08005a03
 80046ec:	08005a14 	.word	0x08005a14

080046f0 <__mcmp>:
 80046f0:	4603      	mov	r3, r0
 80046f2:	690a      	ldr	r2, [r1, #16]
 80046f4:	6900      	ldr	r0, [r0, #16]
 80046f6:	b530      	push	{r4, r5, lr}
 80046f8:	1a80      	subs	r0, r0, r2
 80046fa:	d10d      	bne.n	8004718 <__mcmp+0x28>
 80046fc:	3314      	adds	r3, #20
 80046fe:	3114      	adds	r1, #20
 8004700:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004704:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004708:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800470c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004710:	4295      	cmp	r5, r2
 8004712:	d002      	beq.n	800471a <__mcmp+0x2a>
 8004714:	d304      	bcc.n	8004720 <__mcmp+0x30>
 8004716:	2001      	movs	r0, #1
 8004718:	bd30      	pop	{r4, r5, pc}
 800471a:	42a3      	cmp	r3, r4
 800471c:	d3f4      	bcc.n	8004708 <__mcmp+0x18>
 800471e:	e7fb      	b.n	8004718 <__mcmp+0x28>
 8004720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004724:	e7f8      	b.n	8004718 <__mcmp+0x28>
	...

08004728 <__mdiff>:
 8004728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472c:	460c      	mov	r4, r1
 800472e:	4606      	mov	r6, r0
 8004730:	4611      	mov	r1, r2
 8004732:	4620      	mov	r0, r4
 8004734:	4692      	mov	sl, r2
 8004736:	f7ff ffdb 	bl	80046f0 <__mcmp>
 800473a:	1e05      	subs	r5, r0, #0
 800473c:	d111      	bne.n	8004762 <__mdiff+0x3a>
 800473e:	4629      	mov	r1, r5
 8004740:	4630      	mov	r0, r6
 8004742:	f7ff fd5b 	bl	80041fc <_Balloc>
 8004746:	4602      	mov	r2, r0
 8004748:	b928      	cbnz	r0, 8004756 <__mdiff+0x2e>
 800474a:	f240 2132 	movw	r1, #562	; 0x232
 800474e:	4b3c      	ldr	r3, [pc, #240]	; (8004840 <__mdiff+0x118>)
 8004750:	483c      	ldr	r0, [pc, #240]	; (8004844 <__mdiff+0x11c>)
 8004752:	f000 faf5 	bl	8004d40 <__assert_func>
 8004756:	2301      	movs	r3, #1
 8004758:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800475c:	4610      	mov	r0, r2
 800475e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004762:	bfa4      	itt	ge
 8004764:	4653      	movge	r3, sl
 8004766:	46a2      	movge	sl, r4
 8004768:	4630      	mov	r0, r6
 800476a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800476e:	bfa6      	itte	ge
 8004770:	461c      	movge	r4, r3
 8004772:	2500      	movge	r5, #0
 8004774:	2501      	movlt	r5, #1
 8004776:	f7ff fd41 	bl	80041fc <_Balloc>
 800477a:	4602      	mov	r2, r0
 800477c:	b918      	cbnz	r0, 8004786 <__mdiff+0x5e>
 800477e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004782:	4b2f      	ldr	r3, [pc, #188]	; (8004840 <__mdiff+0x118>)
 8004784:	e7e4      	b.n	8004750 <__mdiff+0x28>
 8004786:	f100 0814 	add.w	r8, r0, #20
 800478a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800478e:	60c5      	str	r5, [r0, #12]
 8004790:	f04f 0c00 	mov.w	ip, #0
 8004794:	f10a 0514 	add.w	r5, sl, #20
 8004798:	f10a 0010 	add.w	r0, sl, #16
 800479c:	46c2      	mov	sl, r8
 800479e:	6926      	ldr	r6, [r4, #16]
 80047a0:	f104 0914 	add.w	r9, r4, #20
 80047a4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80047a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80047ac:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80047b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80047b4:	fa1f f18b 	uxth.w	r1, fp
 80047b8:	4461      	add	r1, ip
 80047ba:	fa1f fc83 	uxth.w	ip, r3
 80047be:	0c1b      	lsrs	r3, r3, #16
 80047c0:	eba1 010c 	sub.w	r1, r1, ip
 80047c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80047c8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80047cc:	b289      	uxth	r1, r1
 80047ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80047d2:	454e      	cmp	r6, r9
 80047d4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80047d8:	f84a 3b04 	str.w	r3, [sl], #4
 80047dc:	d8e6      	bhi.n	80047ac <__mdiff+0x84>
 80047de:	1b33      	subs	r3, r6, r4
 80047e0:	3b15      	subs	r3, #21
 80047e2:	f023 0303 	bic.w	r3, r3, #3
 80047e6:	3415      	adds	r4, #21
 80047e8:	3304      	adds	r3, #4
 80047ea:	42a6      	cmp	r6, r4
 80047ec:	bf38      	it	cc
 80047ee:	2304      	movcc	r3, #4
 80047f0:	441d      	add	r5, r3
 80047f2:	4443      	add	r3, r8
 80047f4:	461e      	mov	r6, r3
 80047f6:	462c      	mov	r4, r5
 80047f8:	4574      	cmp	r4, lr
 80047fa:	d30e      	bcc.n	800481a <__mdiff+0xf2>
 80047fc:	f10e 0103 	add.w	r1, lr, #3
 8004800:	1b49      	subs	r1, r1, r5
 8004802:	f021 0103 	bic.w	r1, r1, #3
 8004806:	3d03      	subs	r5, #3
 8004808:	45ae      	cmp	lr, r5
 800480a:	bf38      	it	cc
 800480c:	2100      	movcc	r1, #0
 800480e:	4419      	add	r1, r3
 8004810:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004814:	b18b      	cbz	r3, 800483a <__mdiff+0x112>
 8004816:	6117      	str	r7, [r2, #16]
 8004818:	e7a0      	b.n	800475c <__mdiff+0x34>
 800481a:	f854 8b04 	ldr.w	r8, [r4], #4
 800481e:	fa1f f188 	uxth.w	r1, r8
 8004822:	4461      	add	r1, ip
 8004824:	1408      	asrs	r0, r1, #16
 8004826:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800482a:	b289      	uxth	r1, r1
 800482c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004830:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004834:	f846 1b04 	str.w	r1, [r6], #4
 8004838:	e7de      	b.n	80047f8 <__mdiff+0xd0>
 800483a:	3f01      	subs	r7, #1
 800483c:	e7e8      	b.n	8004810 <__mdiff+0xe8>
 800483e:	bf00      	nop
 8004840:	08005a03 	.word	0x08005a03
 8004844:	08005a14 	.word	0x08005a14

08004848 <__d2b>:
 8004848:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800484c:	2101      	movs	r1, #1
 800484e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004852:	4690      	mov	r8, r2
 8004854:	461d      	mov	r5, r3
 8004856:	f7ff fcd1 	bl	80041fc <_Balloc>
 800485a:	4604      	mov	r4, r0
 800485c:	b930      	cbnz	r0, 800486c <__d2b+0x24>
 800485e:	4602      	mov	r2, r0
 8004860:	f240 310a 	movw	r1, #778	; 0x30a
 8004864:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <__d2b+0xb0>)
 8004866:	4825      	ldr	r0, [pc, #148]	; (80048fc <__d2b+0xb4>)
 8004868:	f000 fa6a 	bl	8004d40 <__assert_func>
 800486c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004870:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004874:	bb2d      	cbnz	r5, 80048c2 <__d2b+0x7a>
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	f1b8 0300 	subs.w	r3, r8, #0
 800487c:	d026      	beq.n	80048cc <__d2b+0x84>
 800487e:	4668      	mov	r0, sp
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	f7ff fd87 	bl	8004394 <__lo0bits>
 8004886:	9900      	ldr	r1, [sp, #0]
 8004888:	b1f0      	cbz	r0, 80048c8 <__d2b+0x80>
 800488a:	9a01      	ldr	r2, [sp, #4]
 800488c:	f1c0 0320 	rsb	r3, r0, #32
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	430b      	orrs	r3, r1
 8004896:	40c2      	lsrs	r2, r0
 8004898:	6163      	str	r3, [r4, #20]
 800489a:	9201      	str	r2, [sp, #4]
 800489c:	9b01      	ldr	r3, [sp, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	bf14      	ite	ne
 80048a2:	2102      	movne	r1, #2
 80048a4:	2101      	moveq	r1, #1
 80048a6:	61a3      	str	r3, [r4, #24]
 80048a8:	6121      	str	r1, [r4, #16]
 80048aa:	b1c5      	cbz	r5, 80048de <__d2b+0x96>
 80048ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80048b0:	4405      	add	r5, r0
 80048b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80048b6:	603d      	str	r5, [r7, #0]
 80048b8:	6030      	str	r0, [r6, #0]
 80048ba:	4620      	mov	r0, r4
 80048bc:	b002      	add	sp, #8
 80048be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048c6:	e7d6      	b.n	8004876 <__d2b+0x2e>
 80048c8:	6161      	str	r1, [r4, #20]
 80048ca:	e7e7      	b.n	800489c <__d2b+0x54>
 80048cc:	a801      	add	r0, sp, #4
 80048ce:	f7ff fd61 	bl	8004394 <__lo0bits>
 80048d2:	2101      	movs	r1, #1
 80048d4:	9b01      	ldr	r3, [sp, #4]
 80048d6:	6121      	str	r1, [r4, #16]
 80048d8:	6163      	str	r3, [r4, #20]
 80048da:	3020      	adds	r0, #32
 80048dc:	e7e5      	b.n	80048aa <__d2b+0x62>
 80048de:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80048e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80048e6:	6038      	str	r0, [r7, #0]
 80048e8:	6918      	ldr	r0, [r3, #16]
 80048ea:	f7ff fd33 	bl	8004354 <__hi0bits>
 80048ee:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80048f2:	6031      	str	r1, [r6, #0]
 80048f4:	e7e1      	b.n	80048ba <__d2b+0x72>
 80048f6:	bf00      	nop
 80048f8:	08005a03 	.word	0x08005a03
 80048fc:	08005a14 	.word	0x08005a14

08004900 <_calloc_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	fb02 f501 	mul.w	r5, r2, r1
 8004906:	4629      	mov	r1, r5
 8004908:	f000 f854 	bl	80049b4 <_malloc_r>
 800490c:	4604      	mov	r4, r0
 800490e:	b118      	cbz	r0, 8004918 <_calloc_r+0x18>
 8004910:	462a      	mov	r2, r5
 8004912:	2100      	movs	r1, #0
 8004914:	f7fe f944 	bl	8002ba0 <memset>
 8004918:	4620      	mov	r0, r4
 800491a:	bd38      	pop	{r3, r4, r5, pc}

0800491c <_free_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	4605      	mov	r5, r0
 8004920:	2900      	cmp	r1, #0
 8004922:	d043      	beq.n	80049ac <_free_r+0x90>
 8004924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004928:	1f0c      	subs	r4, r1, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	bfb8      	it	lt
 800492e:	18e4      	addlt	r4, r4, r3
 8004930:	f000 fa62 	bl	8004df8 <__malloc_lock>
 8004934:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <_free_r+0x94>)
 8004936:	6813      	ldr	r3, [r2, #0]
 8004938:	4610      	mov	r0, r2
 800493a:	b933      	cbnz	r3, 800494a <_free_r+0x2e>
 800493c:	6063      	str	r3, [r4, #4]
 800493e:	6014      	str	r4, [r2, #0]
 8004940:	4628      	mov	r0, r5
 8004942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004946:	f000 ba5d 	b.w	8004e04 <__malloc_unlock>
 800494a:	42a3      	cmp	r3, r4
 800494c:	d90a      	bls.n	8004964 <_free_r+0x48>
 800494e:	6821      	ldr	r1, [r4, #0]
 8004950:	1862      	adds	r2, r4, r1
 8004952:	4293      	cmp	r3, r2
 8004954:	bf01      	itttt	eq
 8004956:	681a      	ldreq	r2, [r3, #0]
 8004958:	685b      	ldreq	r3, [r3, #4]
 800495a:	1852      	addeq	r2, r2, r1
 800495c:	6022      	streq	r2, [r4, #0]
 800495e:	6063      	str	r3, [r4, #4]
 8004960:	6004      	str	r4, [r0, #0]
 8004962:	e7ed      	b.n	8004940 <_free_r+0x24>
 8004964:	461a      	mov	r2, r3
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	b10b      	cbz	r3, 800496e <_free_r+0x52>
 800496a:	42a3      	cmp	r3, r4
 800496c:	d9fa      	bls.n	8004964 <_free_r+0x48>
 800496e:	6811      	ldr	r1, [r2, #0]
 8004970:	1850      	adds	r0, r2, r1
 8004972:	42a0      	cmp	r0, r4
 8004974:	d10b      	bne.n	800498e <_free_r+0x72>
 8004976:	6820      	ldr	r0, [r4, #0]
 8004978:	4401      	add	r1, r0
 800497a:	1850      	adds	r0, r2, r1
 800497c:	4283      	cmp	r3, r0
 800497e:	6011      	str	r1, [r2, #0]
 8004980:	d1de      	bne.n	8004940 <_free_r+0x24>
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4401      	add	r1, r0
 8004988:	6011      	str	r1, [r2, #0]
 800498a:	6053      	str	r3, [r2, #4]
 800498c:	e7d8      	b.n	8004940 <_free_r+0x24>
 800498e:	d902      	bls.n	8004996 <_free_r+0x7a>
 8004990:	230c      	movs	r3, #12
 8004992:	602b      	str	r3, [r5, #0]
 8004994:	e7d4      	b.n	8004940 <_free_r+0x24>
 8004996:	6820      	ldr	r0, [r4, #0]
 8004998:	1821      	adds	r1, r4, r0
 800499a:	428b      	cmp	r3, r1
 800499c:	bf01      	itttt	eq
 800499e:	6819      	ldreq	r1, [r3, #0]
 80049a0:	685b      	ldreq	r3, [r3, #4]
 80049a2:	1809      	addeq	r1, r1, r0
 80049a4:	6021      	streq	r1, [r4, #0]
 80049a6:	6063      	str	r3, [r4, #4]
 80049a8:	6054      	str	r4, [r2, #4]
 80049aa:	e7c9      	b.n	8004940 <_free_r+0x24>
 80049ac:	bd38      	pop	{r3, r4, r5, pc}
 80049ae:	bf00      	nop
 80049b0:	2000022c 	.word	0x2000022c

080049b4 <_malloc_r>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	1ccd      	adds	r5, r1, #3
 80049b8:	f025 0503 	bic.w	r5, r5, #3
 80049bc:	3508      	adds	r5, #8
 80049be:	2d0c      	cmp	r5, #12
 80049c0:	bf38      	it	cc
 80049c2:	250c      	movcc	r5, #12
 80049c4:	2d00      	cmp	r5, #0
 80049c6:	4606      	mov	r6, r0
 80049c8:	db01      	blt.n	80049ce <_malloc_r+0x1a>
 80049ca:	42a9      	cmp	r1, r5
 80049cc:	d903      	bls.n	80049d6 <_malloc_r+0x22>
 80049ce:	230c      	movs	r3, #12
 80049d0:	6033      	str	r3, [r6, #0]
 80049d2:	2000      	movs	r0, #0
 80049d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049d6:	f000 fa0f 	bl	8004df8 <__malloc_lock>
 80049da:	4921      	ldr	r1, [pc, #132]	; (8004a60 <_malloc_r+0xac>)
 80049dc:	680a      	ldr	r2, [r1, #0]
 80049de:	4614      	mov	r4, r2
 80049e0:	b99c      	cbnz	r4, 8004a0a <_malloc_r+0x56>
 80049e2:	4f20      	ldr	r7, [pc, #128]	; (8004a64 <_malloc_r+0xb0>)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	b923      	cbnz	r3, 80049f2 <_malloc_r+0x3e>
 80049e8:	4621      	mov	r1, r4
 80049ea:	4630      	mov	r0, r6
 80049ec:	f000 f998 	bl	8004d20 <_sbrk_r>
 80049f0:	6038      	str	r0, [r7, #0]
 80049f2:	4629      	mov	r1, r5
 80049f4:	4630      	mov	r0, r6
 80049f6:	f000 f993 	bl	8004d20 <_sbrk_r>
 80049fa:	1c43      	adds	r3, r0, #1
 80049fc:	d123      	bne.n	8004a46 <_malloc_r+0x92>
 80049fe:	230c      	movs	r3, #12
 8004a00:	4630      	mov	r0, r6
 8004a02:	6033      	str	r3, [r6, #0]
 8004a04:	f000 f9fe 	bl	8004e04 <__malloc_unlock>
 8004a08:	e7e3      	b.n	80049d2 <_malloc_r+0x1e>
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	1b5b      	subs	r3, r3, r5
 8004a0e:	d417      	bmi.n	8004a40 <_malloc_r+0x8c>
 8004a10:	2b0b      	cmp	r3, #11
 8004a12:	d903      	bls.n	8004a1c <_malloc_r+0x68>
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	441c      	add	r4, r3
 8004a18:	6025      	str	r5, [r4, #0]
 8004a1a:	e004      	b.n	8004a26 <_malloc_r+0x72>
 8004a1c:	6863      	ldr	r3, [r4, #4]
 8004a1e:	42a2      	cmp	r2, r4
 8004a20:	bf0c      	ite	eq
 8004a22:	600b      	streq	r3, [r1, #0]
 8004a24:	6053      	strne	r3, [r2, #4]
 8004a26:	4630      	mov	r0, r6
 8004a28:	f000 f9ec 	bl	8004e04 <__malloc_unlock>
 8004a2c:	f104 000b 	add.w	r0, r4, #11
 8004a30:	1d23      	adds	r3, r4, #4
 8004a32:	f020 0007 	bic.w	r0, r0, #7
 8004a36:	1ac2      	subs	r2, r0, r3
 8004a38:	d0cc      	beq.n	80049d4 <_malloc_r+0x20>
 8004a3a:	1a1b      	subs	r3, r3, r0
 8004a3c:	50a3      	str	r3, [r4, r2]
 8004a3e:	e7c9      	b.n	80049d4 <_malloc_r+0x20>
 8004a40:	4622      	mov	r2, r4
 8004a42:	6864      	ldr	r4, [r4, #4]
 8004a44:	e7cc      	b.n	80049e0 <_malloc_r+0x2c>
 8004a46:	1cc4      	adds	r4, r0, #3
 8004a48:	f024 0403 	bic.w	r4, r4, #3
 8004a4c:	42a0      	cmp	r0, r4
 8004a4e:	d0e3      	beq.n	8004a18 <_malloc_r+0x64>
 8004a50:	1a21      	subs	r1, r4, r0
 8004a52:	4630      	mov	r0, r6
 8004a54:	f000 f964 	bl	8004d20 <_sbrk_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d1dd      	bne.n	8004a18 <_malloc_r+0x64>
 8004a5c:	e7cf      	b.n	80049fe <_malloc_r+0x4a>
 8004a5e:	bf00      	nop
 8004a60:	2000022c 	.word	0x2000022c
 8004a64:	20000230 	.word	0x20000230

08004a68 <__ssputs_r>:
 8004a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6c:	688e      	ldr	r6, [r1, #8]
 8004a6e:	4682      	mov	sl, r0
 8004a70:	429e      	cmp	r6, r3
 8004a72:	460c      	mov	r4, r1
 8004a74:	4690      	mov	r8, r2
 8004a76:	461f      	mov	r7, r3
 8004a78:	d838      	bhi.n	8004aec <__ssputs_r+0x84>
 8004a7a:	898a      	ldrh	r2, [r1, #12]
 8004a7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a80:	d032      	beq.n	8004ae8 <__ssputs_r+0x80>
 8004a82:	6825      	ldr	r5, [r4, #0]
 8004a84:	6909      	ldr	r1, [r1, #16]
 8004a86:	3301      	adds	r3, #1
 8004a88:	eba5 0901 	sub.w	r9, r5, r1
 8004a8c:	6965      	ldr	r5, [r4, #20]
 8004a8e:	444b      	add	r3, r9
 8004a90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a98:	106d      	asrs	r5, r5, #1
 8004a9a:	429d      	cmp	r5, r3
 8004a9c:	bf38      	it	cc
 8004a9e:	461d      	movcc	r5, r3
 8004aa0:	0553      	lsls	r3, r2, #21
 8004aa2:	d531      	bpl.n	8004b08 <__ssputs_r+0xa0>
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	f7ff ff85 	bl	80049b4 <_malloc_r>
 8004aaa:	4606      	mov	r6, r0
 8004aac:	b950      	cbnz	r0, 8004ac4 <__ssputs_r+0x5c>
 8004aae:	230c      	movs	r3, #12
 8004ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ab4:	f8ca 3000 	str.w	r3, [sl]
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004abe:	81a3      	strh	r3, [r4, #12]
 8004ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac4:	464a      	mov	r2, r9
 8004ac6:	6921      	ldr	r1, [r4, #16]
 8004ac8:	f7ff fb8a 	bl	80041e0 <memcpy>
 8004acc:	89a3      	ldrh	r3, [r4, #12]
 8004ace:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad6:	81a3      	strh	r3, [r4, #12]
 8004ad8:	6126      	str	r6, [r4, #16]
 8004ada:	444e      	add	r6, r9
 8004adc:	6026      	str	r6, [r4, #0]
 8004ade:	463e      	mov	r6, r7
 8004ae0:	6165      	str	r5, [r4, #20]
 8004ae2:	eba5 0509 	sub.w	r5, r5, r9
 8004ae6:	60a5      	str	r5, [r4, #8]
 8004ae8:	42be      	cmp	r6, r7
 8004aea:	d900      	bls.n	8004aee <__ssputs_r+0x86>
 8004aec:	463e      	mov	r6, r7
 8004aee:	4632      	mov	r2, r6
 8004af0:	4641      	mov	r1, r8
 8004af2:	6820      	ldr	r0, [r4, #0]
 8004af4:	f000 f966 	bl	8004dc4 <memmove>
 8004af8:	68a3      	ldr	r3, [r4, #8]
 8004afa:	6822      	ldr	r2, [r4, #0]
 8004afc:	1b9b      	subs	r3, r3, r6
 8004afe:	4432      	add	r2, r6
 8004b00:	2000      	movs	r0, #0
 8004b02:	60a3      	str	r3, [r4, #8]
 8004b04:	6022      	str	r2, [r4, #0]
 8004b06:	e7db      	b.n	8004ac0 <__ssputs_r+0x58>
 8004b08:	462a      	mov	r2, r5
 8004b0a:	f000 f981 	bl	8004e10 <_realloc_r>
 8004b0e:	4606      	mov	r6, r0
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d1e1      	bne.n	8004ad8 <__ssputs_r+0x70>
 8004b14:	4650      	mov	r0, sl
 8004b16:	6921      	ldr	r1, [r4, #16]
 8004b18:	f7ff ff00 	bl	800491c <_free_r>
 8004b1c:	e7c7      	b.n	8004aae <__ssputs_r+0x46>
	...

08004b20 <_svfiprintf_r>:
 8004b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	4698      	mov	r8, r3
 8004b26:	898b      	ldrh	r3, [r1, #12]
 8004b28:	4607      	mov	r7, r0
 8004b2a:	061b      	lsls	r3, r3, #24
 8004b2c:	460d      	mov	r5, r1
 8004b2e:	4614      	mov	r4, r2
 8004b30:	b09d      	sub	sp, #116	; 0x74
 8004b32:	d50e      	bpl.n	8004b52 <_svfiprintf_r+0x32>
 8004b34:	690b      	ldr	r3, [r1, #16]
 8004b36:	b963      	cbnz	r3, 8004b52 <_svfiprintf_r+0x32>
 8004b38:	2140      	movs	r1, #64	; 0x40
 8004b3a:	f7ff ff3b 	bl	80049b4 <_malloc_r>
 8004b3e:	6028      	str	r0, [r5, #0]
 8004b40:	6128      	str	r0, [r5, #16]
 8004b42:	b920      	cbnz	r0, 8004b4e <_svfiprintf_r+0x2e>
 8004b44:	230c      	movs	r3, #12
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b4c:	e0d1      	b.n	8004cf2 <_svfiprintf_r+0x1d2>
 8004b4e:	2340      	movs	r3, #64	; 0x40
 8004b50:	616b      	str	r3, [r5, #20]
 8004b52:	2300      	movs	r3, #0
 8004b54:	9309      	str	r3, [sp, #36]	; 0x24
 8004b56:	2320      	movs	r3, #32
 8004b58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b5c:	2330      	movs	r3, #48	; 0x30
 8004b5e:	f04f 0901 	mov.w	r9, #1
 8004b62:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d0c <_svfiprintf_r+0x1ec>
 8004b6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b6e:	4623      	mov	r3, r4
 8004b70:	469a      	mov	sl, r3
 8004b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b76:	b10a      	cbz	r2, 8004b7c <_svfiprintf_r+0x5c>
 8004b78:	2a25      	cmp	r2, #37	; 0x25
 8004b7a:	d1f9      	bne.n	8004b70 <_svfiprintf_r+0x50>
 8004b7c:	ebba 0b04 	subs.w	fp, sl, r4
 8004b80:	d00b      	beq.n	8004b9a <_svfiprintf_r+0x7a>
 8004b82:	465b      	mov	r3, fp
 8004b84:	4622      	mov	r2, r4
 8004b86:	4629      	mov	r1, r5
 8004b88:	4638      	mov	r0, r7
 8004b8a:	f7ff ff6d 	bl	8004a68 <__ssputs_r>
 8004b8e:	3001      	adds	r0, #1
 8004b90:	f000 80aa 	beq.w	8004ce8 <_svfiprintf_r+0x1c8>
 8004b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b96:	445a      	add	r2, fp
 8004b98:	9209      	str	r2, [sp, #36]	; 0x24
 8004b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 80a2 	beq.w	8004ce8 <_svfiprintf_r+0x1c8>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bae:	f10a 0a01 	add.w	sl, sl, #1
 8004bb2:	9304      	str	r3, [sp, #16]
 8004bb4:	9307      	str	r3, [sp, #28]
 8004bb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bba:	931a      	str	r3, [sp, #104]	; 0x68
 8004bbc:	4654      	mov	r4, sl
 8004bbe:	2205      	movs	r2, #5
 8004bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc4:	4851      	ldr	r0, [pc, #324]	; (8004d0c <_svfiprintf_r+0x1ec>)
 8004bc6:	f7ff fafd 	bl	80041c4 <memchr>
 8004bca:	9a04      	ldr	r2, [sp, #16]
 8004bcc:	b9d8      	cbnz	r0, 8004c06 <_svfiprintf_r+0xe6>
 8004bce:	06d0      	lsls	r0, r2, #27
 8004bd0:	bf44      	itt	mi
 8004bd2:	2320      	movmi	r3, #32
 8004bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bd8:	0711      	lsls	r1, r2, #28
 8004bda:	bf44      	itt	mi
 8004bdc:	232b      	movmi	r3, #43	; 0x2b
 8004bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004be2:	f89a 3000 	ldrb.w	r3, [sl]
 8004be6:	2b2a      	cmp	r3, #42	; 0x2a
 8004be8:	d015      	beq.n	8004c16 <_svfiprintf_r+0xf6>
 8004bea:	4654      	mov	r4, sl
 8004bec:	2000      	movs	r0, #0
 8004bee:	f04f 0c0a 	mov.w	ip, #10
 8004bf2:	9a07      	ldr	r2, [sp, #28]
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bfa:	3b30      	subs	r3, #48	; 0x30
 8004bfc:	2b09      	cmp	r3, #9
 8004bfe:	d94e      	bls.n	8004c9e <_svfiprintf_r+0x17e>
 8004c00:	b1b0      	cbz	r0, 8004c30 <_svfiprintf_r+0x110>
 8004c02:	9207      	str	r2, [sp, #28]
 8004c04:	e014      	b.n	8004c30 <_svfiprintf_r+0x110>
 8004c06:	eba0 0308 	sub.w	r3, r0, r8
 8004c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	46a2      	mov	sl, r4
 8004c12:	9304      	str	r3, [sp, #16]
 8004c14:	e7d2      	b.n	8004bbc <_svfiprintf_r+0x9c>
 8004c16:	9b03      	ldr	r3, [sp, #12]
 8004c18:	1d19      	adds	r1, r3, #4
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	9103      	str	r1, [sp, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bfbb      	ittet	lt
 8004c22:	425b      	neglt	r3, r3
 8004c24:	f042 0202 	orrlt.w	r2, r2, #2
 8004c28:	9307      	strge	r3, [sp, #28]
 8004c2a:	9307      	strlt	r3, [sp, #28]
 8004c2c:	bfb8      	it	lt
 8004c2e:	9204      	strlt	r2, [sp, #16]
 8004c30:	7823      	ldrb	r3, [r4, #0]
 8004c32:	2b2e      	cmp	r3, #46	; 0x2e
 8004c34:	d10c      	bne.n	8004c50 <_svfiprintf_r+0x130>
 8004c36:	7863      	ldrb	r3, [r4, #1]
 8004c38:	2b2a      	cmp	r3, #42	; 0x2a
 8004c3a:	d135      	bne.n	8004ca8 <_svfiprintf_r+0x188>
 8004c3c:	9b03      	ldr	r3, [sp, #12]
 8004c3e:	3402      	adds	r4, #2
 8004c40:	1d1a      	adds	r2, r3, #4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	9203      	str	r2, [sp, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bfb8      	it	lt
 8004c4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c4e:	9305      	str	r3, [sp, #20]
 8004c50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d1c <_svfiprintf_r+0x1fc>
 8004c54:	2203      	movs	r2, #3
 8004c56:	4650      	mov	r0, sl
 8004c58:	7821      	ldrb	r1, [r4, #0]
 8004c5a:	f7ff fab3 	bl	80041c4 <memchr>
 8004c5e:	b140      	cbz	r0, 8004c72 <_svfiprintf_r+0x152>
 8004c60:	2340      	movs	r3, #64	; 0x40
 8004c62:	eba0 000a 	sub.w	r0, r0, sl
 8004c66:	fa03 f000 	lsl.w	r0, r3, r0
 8004c6a:	9b04      	ldr	r3, [sp, #16]
 8004c6c:	3401      	adds	r4, #1
 8004c6e:	4303      	orrs	r3, r0
 8004c70:	9304      	str	r3, [sp, #16]
 8004c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c76:	2206      	movs	r2, #6
 8004c78:	4825      	ldr	r0, [pc, #148]	; (8004d10 <_svfiprintf_r+0x1f0>)
 8004c7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c7e:	f7ff faa1 	bl	80041c4 <memchr>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d038      	beq.n	8004cf8 <_svfiprintf_r+0x1d8>
 8004c86:	4b23      	ldr	r3, [pc, #140]	; (8004d14 <_svfiprintf_r+0x1f4>)
 8004c88:	bb1b      	cbnz	r3, 8004cd2 <_svfiprintf_r+0x1b2>
 8004c8a:	9b03      	ldr	r3, [sp, #12]
 8004c8c:	3307      	adds	r3, #7
 8004c8e:	f023 0307 	bic.w	r3, r3, #7
 8004c92:	3308      	adds	r3, #8
 8004c94:	9303      	str	r3, [sp, #12]
 8004c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c98:	4433      	add	r3, r6
 8004c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c9c:	e767      	b.n	8004b6e <_svfiprintf_r+0x4e>
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ca6:	e7a5      	b.n	8004bf4 <_svfiprintf_r+0xd4>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f04f 0c0a 	mov.w	ip, #10
 8004cae:	4619      	mov	r1, r3
 8004cb0:	3401      	adds	r4, #1
 8004cb2:	9305      	str	r3, [sp, #20]
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cba:	3a30      	subs	r2, #48	; 0x30
 8004cbc:	2a09      	cmp	r2, #9
 8004cbe:	d903      	bls.n	8004cc8 <_svfiprintf_r+0x1a8>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0c5      	beq.n	8004c50 <_svfiprintf_r+0x130>
 8004cc4:	9105      	str	r1, [sp, #20]
 8004cc6:	e7c3      	b.n	8004c50 <_svfiprintf_r+0x130>
 8004cc8:	4604      	mov	r4, r0
 8004cca:	2301      	movs	r3, #1
 8004ccc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cd0:	e7f0      	b.n	8004cb4 <_svfiprintf_r+0x194>
 8004cd2:	ab03      	add	r3, sp, #12
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	462a      	mov	r2, r5
 8004cd8:	4638      	mov	r0, r7
 8004cda:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <_svfiprintf_r+0x1f8>)
 8004cdc:	a904      	add	r1, sp, #16
 8004cde:	f7fe f805 	bl	8002cec <_printf_float>
 8004ce2:	1c42      	adds	r2, r0, #1
 8004ce4:	4606      	mov	r6, r0
 8004ce6:	d1d6      	bne.n	8004c96 <_svfiprintf_r+0x176>
 8004ce8:	89ab      	ldrh	r3, [r5, #12]
 8004cea:	065b      	lsls	r3, r3, #25
 8004cec:	f53f af2c 	bmi.w	8004b48 <_svfiprintf_r+0x28>
 8004cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cf2:	b01d      	add	sp, #116	; 0x74
 8004cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf8:	ab03      	add	r3, sp, #12
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	462a      	mov	r2, r5
 8004cfe:	4638      	mov	r0, r7
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <_svfiprintf_r+0x1f8>)
 8004d02:	a904      	add	r1, sp, #16
 8004d04:	f7fe fa8e 	bl	8003224 <_printf_i>
 8004d08:	e7eb      	b.n	8004ce2 <_svfiprintf_r+0x1c2>
 8004d0a:	bf00      	nop
 8004d0c:	08005b74 	.word	0x08005b74
 8004d10:	08005b7e 	.word	0x08005b7e
 8004d14:	08002ced 	.word	0x08002ced
 8004d18:	08004a69 	.word	0x08004a69
 8004d1c:	08005b7a 	.word	0x08005b7a

08004d20 <_sbrk_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	2300      	movs	r3, #0
 8004d24:	4d05      	ldr	r5, [pc, #20]	; (8004d3c <_sbrk_r+0x1c>)
 8004d26:	4604      	mov	r4, r0
 8004d28:	4608      	mov	r0, r1
 8004d2a:	602b      	str	r3, [r5, #0]
 8004d2c:	f7fc fcd0 	bl	80016d0 <_sbrk>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d102      	bne.n	8004d3a <_sbrk_r+0x1a>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	b103      	cbz	r3, 8004d3a <_sbrk_r+0x1a>
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	20000284 	.word	0x20000284

08004d40 <__assert_func>:
 8004d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004d42:	4614      	mov	r4, r2
 8004d44:	461a      	mov	r2, r3
 8004d46:	4b09      	ldr	r3, [pc, #36]	; (8004d6c <__assert_func+0x2c>)
 8004d48:	4605      	mov	r5, r0
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68d8      	ldr	r0, [r3, #12]
 8004d4e:	b14c      	cbz	r4, 8004d64 <__assert_func+0x24>
 8004d50:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <__assert_func+0x30>)
 8004d52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004d56:	9100      	str	r1, [sp, #0]
 8004d58:	462b      	mov	r3, r5
 8004d5a:	4906      	ldr	r1, [pc, #24]	; (8004d74 <__assert_func+0x34>)
 8004d5c:	f000 f80e 	bl	8004d7c <fiprintf>
 8004d60:	f000 faa2 	bl	80052a8 <abort>
 8004d64:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <__assert_func+0x38>)
 8004d66:	461c      	mov	r4, r3
 8004d68:	e7f3      	b.n	8004d52 <__assert_func+0x12>
 8004d6a:	bf00      	nop
 8004d6c:	20000010 	.word	0x20000010
 8004d70:	08005b85 	.word	0x08005b85
 8004d74:	08005b92 	.word	0x08005b92
 8004d78:	08005bc0 	.word	0x08005bc0

08004d7c <fiprintf>:
 8004d7c:	b40e      	push	{r1, r2, r3}
 8004d7e:	b503      	push	{r0, r1, lr}
 8004d80:	4601      	mov	r1, r0
 8004d82:	ab03      	add	r3, sp, #12
 8004d84:	4805      	ldr	r0, [pc, #20]	; (8004d9c <fiprintf+0x20>)
 8004d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d8a:	6800      	ldr	r0, [r0, #0]
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	f000 f88d 	bl	8004eac <_vfiprintf_r>
 8004d92:	b002      	add	sp, #8
 8004d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d98:	b003      	add	sp, #12
 8004d9a:	4770      	bx	lr
 8004d9c:	20000010 	.word	0x20000010

08004da0 <__ascii_mbtowc>:
 8004da0:	b082      	sub	sp, #8
 8004da2:	b901      	cbnz	r1, 8004da6 <__ascii_mbtowc+0x6>
 8004da4:	a901      	add	r1, sp, #4
 8004da6:	b142      	cbz	r2, 8004dba <__ascii_mbtowc+0x1a>
 8004da8:	b14b      	cbz	r3, 8004dbe <__ascii_mbtowc+0x1e>
 8004daa:	7813      	ldrb	r3, [r2, #0]
 8004dac:	600b      	str	r3, [r1, #0]
 8004dae:	7812      	ldrb	r2, [r2, #0]
 8004db0:	1e10      	subs	r0, r2, #0
 8004db2:	bf18      	it	ne
 8004db4:	2001      	movne	r0, #1
 8004db6:	b002      	add	sp, #8
 8004db8:	4770      	bx	lr
 8004dba:	4610      	mov	r0, r2
 8004dbc:	e7fb      	b.n	8004db6 <__ascii_mbtowc+0x16>
 8004dbe:	f06f 0001 	mvn.w	r0, #1
 8004dc2:	e7f8      	b.n	8004db6 <__ascii_mbtowc+0x16>

08004dc4 <memmove>:
 8004dc4:	4288      	cmp	r0, r1
 8004dc6:	b510      	push	{r4, lr}
 8004dc8:	eb01 0402 	add.w	r4, r1, r2
 8004dcc:	d902      	bls.n	8004dd4 <memmove+0x10>
 8004dce:	4284      	cmp	r4, r0
 8004dd0:	4623      	mov	r3, r4
 8004dd2:	d807      	bhi.n	8004de4 <memmove+0x20>
 8004dd4:	1e43      	subs	r3, r0, #1
 8004dd6:	42a1      	cmp	r1, r4
 8004dd8:	d008      	beq.n	8004dec <memmove+0x28>
 8004dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004de2:	e7f8      	b.n	8004dd6 <memmove+0x12>
 8004de4:	4601      	mov	r1, r0
 8004de6:	4402      	add	r2, r0
 8004de8:	428a      	cmp	r2, r1
 8004dea:	d100      	bne.n	8004dee <memmove+0x2a>
 8004dec:	bd10      	pop	{r4, pc}
 8004dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004df6:	e7f7      	b.n	8004de8 <memmove+0x24>

08004df8 <__malloc_lock>:
 8004df8:	4801      	ldr	r0, [pc, #4]	; (8004e00 <__malloc_lock+0x8>)
 8004dfa:	f000 bc15 	b.w	8005628 <__retarget_lock_acquire_recursive>
 8004dfe:	bf00      	nop
 8004e00:	2000028c 	.word	0x2000028c

08004e04 <__malloc_unlock>:
 8004e04:	4801      	ldr	r0, [pc, #4]	; (8004e0c <__malloc_unlock+0x8>)
 8004e06:	f000 bc10 	b.w	800562a <__retarget_lock_release_recursive>
 8004e0a:	bf00      	nop
 8004e0c:	2000028c 	.word	0x2000028c

08004e10 <_realloc_r>:
 8004e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e12:	4607      	mov	r7, r0
 8004e14:	4614      	mov	r4, r2
 8004e16:	460e      	mov	r6, r1
 8004e18:	b921      	cbnz	r1, 8004e24 <_realloc_r+0x14>
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e20:	f7ff bdc8 	b.w	80049b4 <_malloc_r>
 8004e24:	b922      	cbnz	r2, 8004e30 <_realloc_r+0x20>
 8004e26:	f7ff fd79 	bl	800491c <_free_r>
 8004e2a:	4625      	mov	r5, r4
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e30:	f000 fc60 	bl	80056f4 <_malloc_usable_size_r>
 8004e34:	42a0      	cmp	r0, r4
 8004e36:	d20f      	bcs.n	8004e58 <_realloc_r+0x48>
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	f7ff fdba 	bl	80049b4 <_malloc_r>
 8004e40:	4605      	mov	r5, r0
 8004e42:	2800      	cmp	r0, #0
 8004e44:	d0f2      	beq.n	8004e2c <_realloc_r+0x1c>
 8004e46:	4631      	mov	r1, r6
 8004e48:	4622      	mov	r2, r4
 8004e4a:	f7ff f9c9 	bl	80041e0 <memcpy>
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4638      	mov	r0, r7
 8004e52:	f7ff fd63 	bl	800491c <_free_r>
 8004e56:	e7e9      	b.n	8004e2c <_realloc_r+0x1c>
 8004e58:	4635      	mov	r5, r6
 8004e5a:	e7e7      	b.n	8004e2c <_realloc_r+0x1c>

08004e5c <__sfputc_r>:
 8004e5c:	6893      	ldr	r3, [r2, #8]
 8004e5e:	b410      	push	{r4}
 8004e60:	3b01      	subs	r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	6093      	str	r3, [r2, #8]
 8004e66:	da07      	bge.n	8004e78 <__sfputc_r+0x1c>
 8004e68:	6994      	ldr	r4, [r2, #24]
 8004e6a:	42a3      	cmp	r3, r4
 8004e6c:	db01      	blt.n	8004e72 <__sfputc_r+0x16>
 8004e6e:	290a      	cmp	r1, #10
 8004e70:	d102      	bne.n	8004e78 <__sfputc_r+0x1c>
 8004e72:	bc10      	pop	{r4}
 8004e74:	f000 b94a 	b.w	800510c <__swbuf_r>
 8004e78:	6813      	ldr	r3, [r2, #0]
 8004e7a:	1c58      	adds	r0, r3, #1
 8004e7c:	6010      	str	r0, [r2, #0]
 8004e7e:	7019      	strb	r1, [r3, #0]
 8004e80:	4608      	mov	r0, r1
 8004e82:	bc10      	pop	{r4}
 8004e84:	4770      	bx	lr

08004e86 <__sfputs_r>:
 8004e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e88:	4606      	mov	r6, r0
 8004e8a:	460f      	mov	r7, r1
 8004e8c:	4614      	mov	r4, r2
 8004e8e:	18d5      	adds	r5, r2, r3
 8004e90:	42ac      	cmp	r4, r5
 8004e92:	d101      	bne.n	8004e98 <__sfputs_r+0x12>
 8004e94:	2000      	movs	r0, #0
 8004e96:	e007      	b.n	8004ea8 <__sfputs_r+0x22>
 8004e98:	463a      	mov	r2, r7
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea0:	f7ff ffdc 	bl	8004e5c <__sfputc_r>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d1f3      	bne.n	8004e90 <__sfputs_r+0xa>
 8004ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004eac <_vfiprintf_r>:
 8004eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb0:	460d      	mov	r5, r1
 8004eb2:	4614      	mov	r4, r2
 8004eb4:	4698      	mov	r8, r3
 8004eb6:	4606      	mov	r6, r0
 8004eb8:	b09d      	sub	sp, #116	; 0x74
 8004eba:	b118      	cbz	r0, 8004ec4 <_vfiprintf_r+0x18>
 8004ebc:	6983      	ldr	r3, [r0, #24]
 8004ebe:	b90b      	cbnz	r3, 8004ec4 <_vfiprintf_r+0x18>
 8004ec0:	f000 fb14 	bl	80054ec <__sinit>
 8004ec4:	4b89      	ldr	r3, [pc, #548]	; (80050ec <_vfiprintf_r+0x240>)
 8004ec6:	429d      	cmp	r5, r3
 8004ec8:	d11b      	bne.n	8004f02 <_vfiprintf_r+0x56>
 8004eca:	6875      	ldr	r5, [r6, #4]
 8004ecc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ece:	07d9      	lsls	r1, r3, #31
 8004ed0:	d405      	bmi.n	8004ede <_vfiprintf_r+0x32>
 8004ed2:	89ab      	ldrh	r3, [r5, #12]
 8004ed4:	059a      	lsls	r2, r3, #22
 8004ed6:	d402      	bmi.n	8004ede <_vfiprintf_r+0x32>
 8004ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eda:	f000 fba5 	bl	8005628 <__retarget_lock_acquire_recursive>
 8004ede:	89ab      	ldrh	r3, [r5, #12]
 8004ee0:	071b      	lsls	r3, r3, #28
 8004ee2:	d501      	bpl.n	8004ee8 <_vfiprintf_r+0x3c>
 8004ee4:	692b      	ldr	r3, [r5, #16]
 8004ee6:	b9eb      	cbnz	r3, 8004f24 <_vfiprintf_r+0x78>
 8004ee8:	4629      	mov	r1, r5
 8004eea:	4630      	mov	r0, r6
 8004eec:	f000 f96e 	bl	80051cc <__swsetup_r>
 8004ef0:	b1c0      	cbz	r0, 8004f24 <_vfiprintf_r+0x78>
 8004ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ef4:	07dc      	lsls	r4, r3, #31
 8004ef6:	d50e      	bpl.n	8004f16 <_vfiprintf_r+0x6a>
 8004ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004efc:	b01d      	add	sp, #116	; 0x74
 8004efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f02:	4b7b      	ldr	r3, [pc, #492]	; (80050f0 <_vfiprintf_r+0x244>)
 8004f04:	429d      	cmp	r5, r3
 8004f06:	d101      	bne.n	8004f0c <_vfiprintf_r+0x60>
 8004f08:	68b5      	ldr	r5, [r6, #8]
 8004f0a:	e7df      	b.n	8004ecc <_vfiprintf_r+0x20>
 8004f0c:	4b79      	ldr	r3, [pc, #484]	; (80050f4 <_vfiprintf_r+0x248>)
 8004f0e:	429d      	cmp	r5, r3
 8004f10:	bf08      	it	eq
 8004f12:	68f5      	ldreq	r5, [r6, #12]
 8004f14:	e7da      	b.n	8004ecc <_vfiprintf_r+0x20>
 8004f16:	89ab      	ldrh	r3, [r5, #12]
 8004f18:	0598      	lsls	r0, r3, #22
 8004f1a:	d4ed      	bmi.n	8004ef8 <_vfiprintf_r+0x4c>
 8004f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f1e:	f000 fb84 	bl	800562a <__retarget_lock_release_recursive>
 8004f22:	e7e9      	b.n	8004ef8 <_vfiprintf_r+0x4c>
 8004f24:	2300      	movs	r3, #0
 8004f26:	9309      	str	r3, [sp, #36]	; 0x24
 8004f28:	2320      	movs	r3, #32
 8004f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f2e:	2330      	movs	r3, #48	; 0x30
 8004f30:	f04f 0901 	mov.w	r9, #1
 8004f34:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f38:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80050f8 <_vfiprintf_r+0x24c>
 8004f3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f40:	4623      	mov	r3, r4
 8004f42:	469a      	mov	sl, r3
 8004f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f48:	b10a      	cbz	r2, 8004f4e <_vfiprintf_r+0xa2>
 8004f4a:	2a25      	cmp	r2, #37	; 0x25
 8004f4c:	d1f9      	bne.n	8004f42 <_vfiprintf_r+0x96>
 8004f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8004f52:	d00b      	beq.n	8004f6c <_vfiprintf_r+0xc0>
 8004f54:	465b      	mov	r3, fp
 8004f56:	4622      	mov	r2, r4
 8004f58:	4629      	mov	r1, r5
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	f7ff ff93 	bl	8004e86 <__sfputs_r>
 8004f60:	3001      	adds	r0, #1
 8004f62:	f000 80aa 	beq.w	80050ba <_vfiprintf_r+0x20e>
 8004f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f68:	445a      	add	r2, fp
 8004f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80a2 	beq.w	80050ba <_vfiprintf_r+0x20e>
 8004f76:	2300      	movs	r3, #0
 8004f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f80:	f10a 0a01 	add.w	sl, sl, #1
 8004f84:	9304      	str	r3, [sp, #16]
 8004f86:	9307      	str	r3, [sp, #28]
 8004f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8004f8e:	4654      	mov	r4, sl
 8004f90:	2205      	movs	r2, #5
 8004f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f96:	4858      	ldr	r0, [pc, #352]	; (80050f8 <_vfiprintf_r+0x24c>)
 8004f98:	f7ff f914 	bl	80041c4 <memchr>
 8004f9c:	9a04      	ldr	r2, [sp, #16]
 8004f9e:	b9d8      	cbnz	r0, 8004fd8 <_vfiprintf_r+0x12c>
 8004fa0:	06d1      	lsls	r1, r2, #27
 8004fa2:	bf44      	itt	mi
 8004fa4:	2320      	movmi	r3, #32
 8004fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004faa:	0713      	lsls	r3, r2, #28
 8004fac:	bf44      	itt	mi
 8004fae:	232b      	movmi	r3, #43	; 0x2b
 8004fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004fba:	d015      	beq.n	8004fe8 <_vfiprintf_r+0x13c>
 8004fbc:	4654      	mov	r4, sl
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	f04f 0c0a 	mov.w	ip, #10
 8004fc4:	9a07      	ldr	r2, [sp, #28]
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fcc:	3b30      	subs	r3, #48	; 0x30
 8004fce:	2b09      	cmp	r3, #9
 8004fd0:	d94e      	bls.n	8005070 <_vfiprintf_r+0x1c4>
 8004fd2:	b1b0      	cbz	r0, 8005002 <_vfiprintf_r+0x156>
 8004fd4:	9207      	str	r2, [sp, #28]
 8004fd6:	e014      	b.n	8005002 <_vfiprintf_r+0x156>
 8004fd8:	eba0 0308 	sub.w	r3, r0, r8
 8004fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	46a2      	mov	sl, r4
 8004fe4:	9304      	str	r3, [sp, #16]
 8004fe6:	e7d2      	b.n	8004f8e <_vfiprintf_r+0xe2>
 8004fe8:	9b03      	ldr	r3, [sp, #12]
 8004fea:	1d19      	adds	r1, r3, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	9103      	str	r1, [sp, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	bfbb      	ittet	lt
 8004ff4:	425b      	neglt	r3, r3
 8004ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8004ffa:	9307      	strge	r3, [sp, #28]
 8004ffc:	9307      	strlt	r3, [sp, #28]
 8004ffe:	bfb8      	it	lt
 8005000:	9204      	strlt	r2, [sp, #16]
 8005002:	7823      	ldrb	r3, [r4, #0]
 8005004:	2b2e      	cmp	r3, #46	; 0x2e
 8005006:	d10c      	bne.n	8005022 <_vfiprintf_r+0x176>
 8005008:	7863      	ldrb	r3, [r4, #1]
 800500a:	2b2a      	cmp	r3, #42	; 0x2a
 800500c:	d135      	bne.n	800507a <_vfiprintf_r+0x1ce>
 800500e:	9b03      	ldr	r3, [sp, #12]
 8005010:	3402      	adds	r4, #2
 8005012:	1d1a      	adds	r2, r3, #4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	9203      	str	r2, [sp, #12]
 8005018:	2b00      	cmp	r3, #0
 800501a:	bfb8      	it	lt
 800501c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005020:	9305      	str	r3, [sp, #20]
 8005022:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005108 <_vfiprintf_r+0x25c>
 8005026:	2203      	movs	r2, #3
 8005028:	4650      	mov	r0, sl
 800502a:	7821      	ldrb	r1, [r4, #0]
 800502c:	f7ff f8ca 	bl	80041c4 <memchr>
 8005030:	b140      	cbz	r0, 8005044 <_vfiprintf_r+0x198>
 8005032:	2340      	movs	r3, #64	; 0x40
 8005034:	eba0 000a 	sub.w	r0, r0, sl
 8005038:	fa03 f000 	lsl.w	r0, r3, r0
 800503c:	9b04      	ldr	r3, [sp, #16]
 800503e:	3401      	adds	r4, #1
 8005040:	4303      	orrs	r3, r0
 8005042:	9304      	str	r3, [sp, #16]
 8005044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005048:	2206      	movs	r2, #6
 800504a:	482c      	ldr	r0, [pc, #176]	; (80050fc <_vfiprintf_r+0x250>)
 800504c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005050:	f7ff f8b8 	bl	80041c4 <memchr>
 8005054:	2800      	cmp	r0, #0
 8005056:	d03f      	beq.n	80050d8 <_vfiprintf_r+0x22c>
 8005058:	4b29      	ldr	r3, [pc, #164]	; (8005100 <_vfiprintf_r+0x254>)
 800505a:	bb1b      	cbnz	r3, 80050a4 <_vfiprintf_r+0x1f8>
 800505c:	9b03      	ldr	r3, [sp, #12]
 800505e:	3307      	adds	r3, #7
 8005060:	f023 0307 	bic.w	r3, r3, #7
 8005064:	3308      	adds	r3, #8
 8005066:	9303      	str	r3, [sp, #12]
 8005068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800506a:	443b      	add	r3, r7
 800506c:	9309      	str	r3, [sp, #36]	; 0x24
 800506e:	e767      	b.n	8004f40 <_vfiprintf_r+0x94>
 8005070:	460c      	mov	r4, r1
 8005072:	2001      	movs	r0, #1
 8005074:	fb0c 3202 	mla	r2, ip, r2, r3
 8005078:	e7a5      	b.n	8004fc6 <_vfiprintf_r+0x11a>
 800507a:	2300      	movs	r3, #0
 800507c:	f04f 0c0a 	mov.w	ip, #10
 8005080:	4619      	mov	r1, r3
 8005082:	3401      	adds	r4, #1
 8005084:	9305      	str	r3, [sp, #20]
 8005086:	4620      	mov	r0, r4
 8005088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800508c:	3a30      	subs	r2, #48	; 0x30
 800508e:	2a09      	cmp	r2, #9
 8005090:	d903      	bls.n	800509a <_vfiprintf_r+0x1ee>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0c5      	beq.n	8005022 <_vfiprintf_r+0x176>
 8005096:	9105      	str	r1, [sp, #20]
 8005098:	e7c3      	b.n	8005022 <_vfiprintf_r+0x176>
 800509a:	4604      	mov	r4, r0
 800509c:	2301      	movs	r3, #1
 800509e:	fb0c 2101 	mla	r1, ip, r1, r2
 80050a2:	e7f0      	b.n	8005086 <_vfiprintf_r+0x1da>
 80050a4:	ab03      	add	r3, sp, #12
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	462a      	mov	r2, r5
 80050aa:	4630      	mov	r0, r6
 80050ac:	4b15      	ldr	r3, [pc, #84]	; (8005104 <_vfiprintf_r+0x258>)
 80050ae:	a904      	add	r1, sp, #16
 80050b0:	f7fd fe1c 	bl	8002cec <_printf_float>
 80050b4:	4607      	mov	r7, r0
 80050b6:	1c78      	adds	r0, r7, #1
 80050b8:	d1d6      	bne.n	8005068 <_vfiprintf_r+0x1bc>
 80050ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050bc:	07d9      	lsls	r1, r3, #31
 80050be:	d405      	bmi.n	80050cc <_vfiprintf_r+0x220>
 80050c0:	89ab      	ldrh	r3, [r5, #12]
 80050c2:	059a      	lsls	r2, r3, #22
 80050c4:	d402      	bmi.n	80050cc <_vfiprintf_r+0x220>
 80050c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050c8:	f000 faaf 	bl	800562a <__retarget_lock_release_recursive>
 80050cc:	89ab      	ldrh	r3, [r5, #12]
 80050ce:	065b      	lsls	r3, r3, #25
 80050d0:	f53f af12 	bmi.w	8004ef8 <_vfiprintf_r+0x4c>
 80050d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050d6:	e711      	b.n	8004efc <_vfiprintf_r+0x50>
 80050d8:	ab03      	add	r3, sp, #12
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	462a      	mov	r2, r5
 80050de:	4630      	mov	r0, r6
 80050e0:	4b08      	ldr	r3, [pc, #32]	; (8005104 <_vfiprintf_r+0x258>)
 80050e2:	a904      	add	r1, sp, #16
 80050e4:	f7fe f89e 	bl	8003224 <_printf_i>
 80050e8:	e7e4      	b.n	80050b4 <_vfiprintf_r+0x208>
 80050ea:	bf00      	nop
 80050ec:	08005cec 	.word	0x08005cec
 80050f0:	08005d0c 	.word	0x08005d0c
 80050f4:	08005ccc 	.word	0x08005ccc
 80050f8:	08005b74 	.word	0x08005b74
 80050fc:	08005b7e 	.word	0x08005b7e
 8005100:	08002ced 	.word	0x08002ced
 8005104:	08004e87 	.word	0x08004e87
 8005108:	08005b7a 	.word	0x08005b7a

0800510c <__swbuf_r>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	460e      	mov	r6, r1
 8005110:	4614      	mov	r4, r2
 8005112:	4605      	mov	r5, r0
 8005114:	b118      	cbz	r0, 800511e <__swbuf_r+0x12>
 8005116:	6983      	ldr	r3, [r0, #24]
 8005118:	b90b      	cbnz	r3, 800511e <__swbuf_r+0x12>
 800511a:	f000 f9e7 	bl	80054ec <__sinit>
 800511e:	4b21      	ldr	r3, [pc, #132]	; (80051a4 <__swbuf_r+0x98>)
 8005120:	429c      	cmp	r4, r3
 8005122:	d12b      	bne.n	800517c <__swbuf_r+0x70>
 8005124:	686c      	ldr	r4, [r5, #4]
 8005126:	69a3      	ldr	r3, [r4, #24]
 8005128:	60a3      	str	r3, [r4, #8]
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	071a      	lsls	r2, r3, #28
 800512e:	d52f      	bpl.n	8005190 <__swbuf_r+0x84>
 8005130:	6923      	ldr	r3, [r4, #16]
 8005132:	b36b      	cbz	r3, 8005190 <__swbuf_r+0x84>
 8005134:	6923      	ldr	r3, [r4, #16]
 8005136:	6820      	ldr	r0, [r4, #0]
 8005138:	b2f6      	uxtb	r6, r6
 800513a:	1ac0      	subs	r0, r0, r3
 800513c:	6963      	ldr	r3, [r4, #20]
 800513e:	4637      	mov	r7, r6
 8005140:	4283      	cmp	r3, r0
 8005142:	dc04      	bgt.n	800514e <__swbuf_r+0x42>
 8005144:	4621      	mov	r1, r4
 8005146:	4628      	mov	r0, r5
 8005148:	f000 f93c 	bl	80053c4 <_fflush_r>
 800514c:	bb30      	cbnz	r0, 800519c <__swbuf_r+0x90>
 800514e:	68a3      	ldr	r3, [r4, #8]
 8005150:	3001      	adds	r0, #1
 8005152:	3b01      	subs	r3, #1
 8005154:	60a3      	str	r3, [r4, #8]
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	6022      	str	r2, [r4, #0]
 800515c:	701e      	strb	r6, [r3, #0]
 800515e:	6963      	ldr	r3, [r4, #20]
 8005160:	4283      	cmp	r3, r0
 8005162:	d004      	beq.n	800516e <__swbuf_r+0x62>
 8005164:	89a3      	ldrh	r3, [r4, #12]
 8005166:	07db      	lsls	r3, r3, #31
 8005168:	d506      	bpl.n	8005178 <__swbuf_r+0x6c>
 800516a:	2e0a      	cmp	r6, #10
 800516c:	d104      	bne.n	8005178 <__swbuf_r+0x6c>
 800516e:	4621      	mov	r1, r4
 8005170:	4628      	mov	r0, r5
 8005172:	f000 f927 	bl	80053c4 <_fflush_r>
 8005176:	b988      	cbnz	r0, 800519c <__swbuf_r+0x90>
 8005178:	4638      	mov	r0, r7
 800517a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800517c:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <__swbuf_r+0x9c>)
 800517e:	429c      	cmp	r4, r3
 8005180:	d101      	bne.n	8005186 <__swbuf_r+0x7a>
 8005182:	68ac      	ldr	r4, [r5, #8]
 8005184:	e7cf      	b.n	8005126 <__swbuf_r+0x1a>
 8005186:	4b09      	ldr	r3, [pc, #36]	; (80051ac <__swbuf_r+0xa0>)
 8005188:	429c      	cmp	r4, r3
 800518a:	bf08      	it	eq
 800518c:	68ec      	ldreq	r4, [r5, #12]
 800518e:	e7ca      	b.n	8005126 <__swbuf_r+0x1a>
 8005190:	4621      	mov	r1, r4
 8005192:	4628      	mov	r0, r5
 8005194:	f000 f81a 	bl	80051cc <__swsetup_r>
 8005198:	2800      	cmp	r0, #0
 800519a:	d0cb      	beq.n	8005134 <__swbuf_r+0x28>
 800519c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80051a0:	e7ea      	b.n	8005178 <__swbuf_r+0x6c>
 80051a2:	bf00      	nop
 80051a4:	08005cec 	.word	0x08005cec
 80051a8:	08005d0c 	.word	0x08005d0c
 80051ac:	08005ccc 	.word	0x08005ccc

080051b0 <__ascii_wctomb>:
 80051b0:	4603      	mov	r3, r0
 80051b2:	4608      	mov	r0, r1
 80051b4:	b141      	cbz	r1, 80051c8 <__ascii_wctomb+0x18>
 80051b6:	2aff      	cmp	r2, #255	; 0xff
 80051b8:	d904      	bls.n	80051c4 <__ascii_wctomb+0x14>
 80051ba:	228a      	movs	r2, #138	; 0x8a
 80051bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	4770      	bx	lr
 80051c4:	2001      	movs	r0, #1
 80051c6:	700a      	strb	r2, [r1, #0]
 80051c8:	4770      	bx	lr
	...

080051cc <__swsetup_r>:
 80051cc:	4b32      	ldr	r3, [pc, #200]	; (8005298 <__swsetup_r+0xcc>)
 80051ce:	b570      	push	{r4, r5, r6, lr}
 80051d0:	681d      	ldr	r5, [r3, #0]
 80051d2:	4606      	mov	r6, r0
 80051d4:	460c      	mov	r4, r1
 80051d6:	b125      	cbz	r5, 80051e2 <__swsetup_r+0x16>
 80051d8:	69ab      	ldr	r3, [r5, #24]
 80051da:	b913      	cbnz	r3, 80051e2 <__swsetup_r+0x16>
 80051dc:	4628      	mov	r0, r5
 80051de:	f000 f985 	bl	80054ec <__sinit>
 80051e2:	4b2e      	ldr	r3, [pc, #184]	; (800529c <__swsetup_r+0xd0>)
 80051e4:	429c      	cmp	r4, r3
 80051e6:	d10f      	bne.n	8005208 <__swsetup_r+0x3c>
 80051e8:	686c      	ldr	r4, [r5, #4]
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051f0:	0719      	lsls	r1, r3, #28
 80051f2:	d42c      	bmi.n	800524e <__swsetup_r+0x82>
 80051f4:	06dd      	lsls	r5, r3, #27
 80051f6:	d411      	bmi.n	800521c <__swsetup_r+0x50>
 80051f8:	2309      	movs	r3, #9
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005204:	81a3      	strh	r3, [r4, #12]
 8005206:	e03e      	b.n	8005286 <__swsetup_r+0xba>
 8005208:	4b25      	ldr	r3, [pc, #148]	; (80052a0 <__swsetup_r+0xd4>)
 800520a:	429c      	cmp	r4, r3
 800520c:	d101      	bne.n	8005212 <__swsetup_r+0x46>
 800520e:	68ac      	ldr	r4, [r5, #8]
 8005210:	e7eb      	b.n	80051ea <__swsetup_r+0x1e>
 8005212:	4b24      	ldr	r3, [pc, #144]	; (80052a4 <__swsetup_r+0xd8>)
 8005214:	429c      	cmp	r4, r3
 8005216:	bf08      	it	eq
 8005218:	68ec      	ldreq	r4, [r5, #12]
 800521a:	e7e6      	b.n	80051ea <__swsetup_r+0x1e>
 800521c:	0758      	lsls	r0, r3, #29
 800521e:	d512      	bpl.n	8005246 <__swsetup_r+0x7a>
 8005220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005222:	b141      	cbz	r1, 8005236 <__swsetup_r+0x6a>
 8005224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005228:	4299      	cmp	r1, r3
 800522a:	d002      	beq.n	8005232 <__swsetup_r+0x66>
 800522c:	4630      	mov	r0, r6
 800522e:	f7ff fb75 	bl	800491c <_free_r>
 8005232:	2300      	movs	r3, #0
 8005234:	6363      	str	r3, [r4, #52]	; 0x34
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800523c:	81a3      	strh	r3, [r4, #12]
 800523e:	2300      	movs	r3, #0
 8005240:	6063      	str	r3, [r4, #4]
 8005242:	6923      	ldr	r3, [r4, #16]
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	89a3      	ldrh	r3, [r4, #12]
 8005248:	f043 0308 	orr.w	r3, r3, #8
 800524c:	81a3      	strh	r3, [r4, #12]
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	b94b      	cbnz	r3, 8005266 <__swsetup_r+0x9a>
 8005252:	89a3      	ldrh	r3, [r4, #12]
 8005254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800525c:	d003      	beq.n	8005266 <__swsetup_r+0x9a>
 800525e:	4621      	mov	r1, r4
 8005260:	4630      	mov	r0, r6
 8005262:	f000 fa07 	bl	8005674 <__smakebuf_r>
 8005266:	89a0      	ldrh	r0, [r4, #12]
 8005268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800526c:	f010 0301 	ands.w	r3, r0, #1
 8005270:	d00a      	beq.n	8005288 <__swsetup_r+0xbc>
 8005272:	2300      	movs	r3, #0
 8005274:	60a3      	str	r3, [r4, #8]
 8005276:	6963      	ldr	r3, [r4, #20]
 8005278:	425b      	negs	r3, r3
 800527a:	61a3      	str	r3, [r4, #24]
 800527c:	6923      	ldr	r3, [r4, #16]
 800527e:	b943      	cbnz	r3, 8005292 <__swsetup_r+0xc6>
 8005280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005284:	d1ba      	bne.n	80051fc <__swsetup_r+0x30>
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	0781      	lsls	r1, r0, #30
 800528a:	bf58      	it	pl
 800528c:	6963      	ldrpl	r3, [r4, #20]
 800528e:	60a3      	str	r3, [r4, #8]
 8005290:	e7f4      	b.n	800527c <__swsetup_r+0xb0>
 8005292:	2000      	movs	r0, #0
 8005294:	e7f7      	b.n	8005286 <__swsetup_r+0xba>
 8005296:	bf00      	nop
 8005298:	20000010 	.word	0x20000010
 800529c:	08005cec 	.word	0x08005cec
 80052a0:	08005d0c 	.word	0x08005d0c
 80052a4:	08005ccc 	.word	0x08005ccc

080052a8 <abort>:
 80052a8:	2006      	movs	r0, #6
 80052aa:	b508      	push	{r3, lr}
 80052ac:	f000 fa52 	bl	8005754 <raise>
 80052b0:	2001      	movs	r0, #1
 80052b2:	f7fc f999 	bl	80015e8 <_exit>
	...

080052b8 <__sflush_r>:
 80052b8:	898a      	ldrh	r2, [r1, #12]
 80052ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052be:	4605      	mov	r5, r0
 80052c0:	0710      	lsls	r0, r2, #28
 80052c2:	460c      	mov	r4, r1
 80052c4:	d458      	bmi.n	8005378 <__sflush_r+0xc0>
 80052c6:	684b      	ldr	r3, [r1, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	dc05      	bgt.n	80052d8 <__sflush_r+0x20>
 80052cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	dc02      	bgt.n	80052d8 <__sflush_r+0x20>
 80052d2:	2000      	movs	r0, #0
 80052d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052da:	2e00      	cmp	r6, #0
 80052dc:	d0f9      	beq.n	80052d2 <__sflush_r+0x1a>
 80052de:	2300      	movs	r3, #0
 80052e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052e4:	682f      	ldr	r7, [r5, #0]
 80052e6:	602b      	str	r3, [r5, #0]
 80052e8:	d032      	beq.n	8005350 <__sflush_r+0x98>
 80052ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	075a      	lsls	r2, r3, #29
 80052f0:	d505      	bpl.n	80052fe <__sflush_r+0x46>
 80052f2:	6863      	ldr	r3, [r4, #4]
 80052f4:	1ac0      	subs	r0, r0, r3
 80052f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052f8:	b10b      	cbz	r3, 80052fe <__sflush_r+0x46>
 80052fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052fc:	1ac0      	subs	r0, r0, r3
 80052fe:	2300      	movs	r3, #0
 8005300:	4602      	mov	r2, r0
 8005302:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005304:	4628      	mov	r0, r5
 8005306:	6a21      	ldr	r1, [r4, #32]
 8005308:	47b0      	blx	r6
 800530a:	1c43      	adds	r3, r0, #1
 800530c:	89a3      	ldrh	r3, [r4, #12]
 800530e:	d106      	bne.n	800531e <__sflush_r+0x66>
 8005310:	6829      	ldr	r1, [r5, #0]
 8005312:	291d      	cmp	r1, #29
 8005314:	d82c      	bhi.n	8005370 <__sflush_r+0xb8>
 8005316:	4a2a      	ldr	r2, [pc, #168]	; (80053c0 <__sflush_r+0x108>)
 8005318:	40ca      	lsrs	r2, r1
 800531a:	07d6      	lsls	r6, r2, #31
 800531c:	d528      	bpl.n	8005370 <__sflush_r+0xb8>
 800531e:	2200      	movs	r2, #0
 8005320:	6062      	str	r2, [r4, #4]
 8005322:	6922      	ldr	r2, [r4, #16]
 8005324:	04d9      	lsls	r1, r3, #19
 8005326:	6022      	str	r2, [r4, #0]
 8005328:	d504      	bpl.n	8005334 <__sflush_r+0x7c>
 800532a:	1c42      	adds	r2, r0, #1
 800532c:	d101      	bne.n	8005332 <__sflush_r+0x7a>
 800532e:	682b      	ldr	r3, [r5, #0]
 8005330:	b903      	cbnz	r3, 8005334 <__sflush_r+0x7c>
 8005332:	6560      	str	r0, [r4, #84]	; 0x54
 8005334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005336:	602f      	str	r7, [r5, #0]
 8005338:	2900      	cmp	r1, #0
 800533a:	d0ca      	beq.n	80052d2 <__sflush_r+0x1a>
 800533c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005340:	4299      	cmp	r1, r3
 8005342:	d002      	beq.n	800534a <__sflush_r+0x92>
 8005344:	4628      	mov	r0, r5
 8005346:	f7ff fae9 	bl	800491c <_free_r>
 800534a:	2000      	movs	r0, #0
 800534c:	6360      	str	r0, [r4, #52]	; 0x34
 800534e:	e7c1      	b.n	80052d4 <__sflush_r+0x1c>
 8005350:	6a21      	ldr	r1, [r4, #32]
 8005352:	2301      	movs	r3, #1
 8005354:	4628      	mov	r0, r5
 8005356:	47b0      	blx	r6
 8005358:	1c41      	adds	r1, r0, #1
 800535a:	d1c7      	bne.n	80052ec <__sflush_r+0x34>
 800535c:	682b      	ldr	r3, [r5, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0c4      	beq.n	80052ec <__sflush_r+0x34>
 8005362:	2b1d      	cmp	r3, #29
 8005364:	d001      	beq.n	800536a <__sflush_r+0xb2>
 8005366:	2b16      	cmp	r3, #22
 8005368:	d101      	bne.n	800536e <__sflush_r+0xb6>
 800536a:	602f      	str	r7, [r5, #0]
 800536c:	e7b1      	b.n	80052d2 <__sflush_r+0x1a>
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005374:	81a3      	strh	r3, [r4, #12]
 8005376:	e7ad      	b.n	80052d4 <__sflush_r+0x1c>
 8005378:	690f      	ldr	r7, [r1, #16]
 800537a:	2f00      	cmp	r7, #0
 800537c:	d0a9      	beq.n	80052d2 <__sflush_r+0x1a>
 800537e:	0793      	lsls	r3, r2, #30
 8005380:	bf18      	it	ne
 8005382:	2300      	movne	r3, #0
 8005384:	680e      	ldr	r6, [r1, #0]
 8005386:	bf08      	it	eq
 8005388:	694b      	ldreq	r3, [r1, #20]
 800538a:	eba6 0807 	sub.w	r8, r6, r7
 800538e:	600f      	str	r7, [r1, #0]
 8005390:	608b      	str	r3, [r1, #8]
 8005392:	f1b8 0f00 	cmp.w	r8, #0
 8005396:	dd9c      	ble.n	80052d2 <__sflush_r+0x1a>
 8005398:	4643      	mov	r3, r8
 800539a:	463a      	mov	r2, r7
 800539c:	4628      	mov	r0, r5
 800539e:	6a21      	ldr	r1, [r4, #32]
 80053a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053a2:	47b0      	blx	r6
 80053a4:	2800      	cmp	r0, #0
 80053a6:	dc06      	bgt.n	80053b6 <__sflush_r+0xfe>
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053b2:	81a3      	strh	r3, [r4, #12]
 80053b4:	e78e      	b.n	80052d4 <__sflush_r+0x1c>
 80053b6:	4407      	add	r7, r0
 80053b8:	eba8 0800 	sub.w	r8, r8, r0
 80053bc:	e7e9      	b.n	8005392 <__sflush_r+0xda>
 80053be:	bf00      	nop
 80053c0:	20400001 	.word	0x20400001

080053c4 <_fflush_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	690b      	ldr	r3, [r1, #16]
 80053c8:	4605      	mov	r5, r0
 80053ca:	460c      	mov	r4, r1
 80053cc:	b913      	cbnz	r3, 80053d4 <_fflush_r+0x10>
 80053ce:	2500      	movs	r5, #0
 80053d0:	4628      	mov	r0, r5
 80053d2:	bd38      	pop	{r3, r4, r5, pc}
 80053d4:	b118      	cbz	r0, 80053de <_fflush_r+0x1a>
 80053d6:	6983      	ldr	r3, [r0, #24]
 80053d8:	b90b      	cbnz	r3, 80053de <_fflush_r+0x1a>
 80053da:	f000 f887 	bl	80054ec <__sinit>
 80053de:	4b14      	ldr	r3, [pc, #80]	; (8005430 <_fflush_r+0x6c>)
 80053e0:	429c      	cmp	r4, r3
 80053e2:	d11b      	bne.n	800541c <_fflush_r+0x58>
 80053e4:	686c      	ldr	r4, [r5, #4]
 80053e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0ef      	beq.n	80053ce <_fflush_r+0xa>
 80053ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053f0:	07d0      	lsls	r0, r2, #31
 80053f2:	d404      	bmi.n	80053fe <_fflush_r+0x3a>
 80053f4:	0599      	lsls	r1, r3, #22
 80053f6:	d402      	bmi.n	80053fe <_fflush_r+0x3a>
 80053f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053fa:	f000 f915 	bl	8005628 <__retarget_lock_acquire_recursive>
 80053fe:	4628      	mov	r0, r5
 8005400:	4621      	mov	r1, r4
 8005402:	f7ff ff59 	bl	80052b8 <__sflush_r>
 8005406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005408:	4605      	mov	r5, r0
 800540a:	07da      	lsls	r2, r3, #31
 800540c:	d4e0      	bmi.n	80053d0 <_fflush_r+0xc>
 800540e:	89a3      	ldrh	r3, [r4, #12]
 8005410:	059b      	lsls	r3, r3, #22
 8005412:	d4dd      	bmi.n	80053d0 <_fflush_r+0xc>
 8005414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005416:	f000 f908 	bl	800562a <__retarget_lock_release_recursive>
 800541a:	e7d9      	b.n	80053d0 <_fflush_r+0xc>
 800541c:	4b05      	ldr	r3, [pc, #20]	; (8005434 <_fflush_r+0x70>)
 800541e:	429c      	cmp	r4, r3
 8005420:	d101      	bne.n	8005426 <_fflush_r+0x62>
 8005422:	68ac      	ldr	r4, [r5, #8]
 8005424:	e7df      	b.n	80053e6 <_fflush_r+0x22>
 8005426:	4b04      	ldr	r3, [pc, #16]	; (8005438 <_fflush_r+0x74>)
 8005428:	429c      	cmp	r4, r3
 800542a:	bf08      	it	eq
 800542c:	68ec      	ldreq	r4, [r5, #12]
 800542e:	e7da      	b.n	80053e6 <_fflush_r+0x22>
 8005430:	08005cec 	.word	0x08005cec
 8005434:	08005d0c 	.word	0x08005d0c
 8005438:	08005ccc 	.word	0x08005ccc

0800543c <std>:
 800543c:	2300      	movs	r3, #0
 800543e:	b510      	push	{r4, lr}
 8005440:	4604      	mov	r4, r0
 8005442:	e9c0 3300 	strd	r3, r3, [r0]
 8005446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800544a:	6083      	str	r3, [r0, #8]
 800544c:	8181      	strh	r1, [r0, #12]
 800544e:	6643      	str	r3, [r0, #100]	; 0x64
 8005450:	81c2      	strh	r2, [r0, #14]
 8005452:	6183      	str	r3, [r0, #24]
 8005454:	4619      	mov	r1, r3
 8005456:	2208      	movs	r2, #8
 8005458:	305c      	adds	r0, #92	; 0x5c
 800545a:	f7fd fba1 	bl	8002ba0 <memset>
 800545e:	4b05      	ldr	r3, [pc, #20]	; (8005474 <std+0x38>)
 8005460:	6224      	str	r4, [r4, #32]
 8005462:	6263      	str	r3, [r4, #36]	; 0x24
 8005464:	4b04      	ldr	r3, [pc, #16]	; (8005478 <std+0x3c>)
 8005466:	62a3      	str	r3, [r4, #40]	; 0x28
 8005468:	4b04      	ldr	r3, [pc, #16]	; (800547c <std+0x40>)
 800546a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <std+0x44>)
 800546e:	6323      	str	r3, [r4, #48]	; 0x30
 8005470:	bd10      	pop	{r4, pc}
 8005472:	bf00      	nop
 8005474:	0800578d 	.word	0x0800578d
 8005478:	080057af 	.word	0x080057af
 800547c:	080057e7 	.word	0x080057e7
 8005480:	0800580b 	.word	0x0800580b

08005484 <_cleanup_r>:
 8005484:	4901      	ldr	r1, [pc, #4]	; (800548c <_cleanup_r+0x8>)
 8005486:	f000 b8af 	b.w	80055e8 <_fwalk_reent>
 800548a:	bf00      	nop
 800548c:	080053c5 	.word	0x080053c5

08005490 <__sfmoreglue>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	2568      	movs	r5, #104	; 0x68
 8005494:	1e4a      	subs	r2, r1, #1
 8005496:	4355      	muls	r5, r2
 8005498:	460e      	mov	r6, r1
 800549a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800549e:	f7ff fa89 	bl	80049b4 <_malloc_r>
 80054a2:	4604      	mov	r4, r0
 80054a4:	b140      	cbz	r0, 80054b8 <__sfmoreglue+0x28>
 80054a6:	2100      	movs	r1, #0
 80054a8:	e9c0 1600 	strd	r1, r6, [r0]
 80054ac:	300c      	adds	r0, #12
 80054ae:	60a0      	str	r0, [r4, #8]
 80054b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80054b4:	f7fd fb74 	bl	8002ba0 <memset>
 80054b8:	4620      	mov	r0, r4
 80054ba:	bd70      	pop	{r4, r5, r6, pc}

080054bc <__sfp_lock_acquire>:
 80054bc:	4801      	ldr	r0, [pc, #4]	; (80054c4 <__sfp_lock_acquire+0x8>)
 80054be:	f000 b8b3 	b.w	8005628 <__retarget_lock_acquire_recursive>
 80054c2:	bf00      	nop
 80054c4:	20000290 	.word	0x20000290

080054c8 <__sfp_lock_release>:
 80054c8:	4801      	ldr	r0, [pc, #4]	; (80054d0 <__sfp_lock_release+0x8>)
 80054ca:	f000 b8ae 	b.w	800562a <__retarget_lock_release_recursive>
 80054ce:	bf00      	nop
 80054d0:	20000290 	.word	0x20000290

080054d4 <__sinit_lock_acquire>:
 80054d4:	4801      	ldr	r0, [pc, #4]	; (80054dc <__sinit_lock_acquire+0x8>)
 80054d6:	f000 b8a7 	b.w	8005628 <__retarget_lock_acquire_recursive>
 80054da:	bf00      	nop
 80054dc:	2000028b 	.word	0x2000028b

080054e0 <__sinit_lock_release>:
 80054e0:	4801      	ldr	r0, [pc, #4]	; (80054e8 <__sinit_lock_release+0x8>)
 80054e2:	f000 b8a2 	b.w	800562a <__retarget_lock_release_recursive>
 80054e6:	bf00      	nop
 80054e8:	2000028b 	.word	0x2000028b

080054ec <__sinit>:
 80054ec:	b510      	push	{r4, lr}
 80054ee:	4604      	mov	r4, r0
 80054f0:	f7ff fff0 	bl	80054d4 <__sinit_lock_acquire>
 80054f4:	69a3      	ldr	r3, [r4, #24]
 80054f6:	b11b      	cbz	r3, 8005500 <__sinit+0x14>
 80054f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054fc:	f7ff bff0 	b.w	80054e0 <__sinit_lock_release>
 8005500:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005504:	6523      	str	r3, [r4, #80]	; 0x50
 8005506:	4b13      	ldr	r3, [pc, #76]	; (8005554 <__sinit+0x68>)
 8005508:	4a13      	ldr	r2, [pc, #76]	; (8005558 <__sinit+0x6c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	62a2      	str	r2, [r4, #40]	; 0x28
 800550e:	42a3      	cmp	r3, r4
 8005510:	bf08      	it	eq
 8005512:	2301      	moveq	r3, #1
 8005514:	4620      	mov	r0, r4
 8005516:	bf08      	it	eq
 8005518:	61a3      	streq	r3, [r4, #24]
 800551a:	f000 f81f 	bl	800555c <__sfp>
 800551e:	6060      	str	r0, [r4, #4]
 8005520:	4620      	mov	r0, r4
 8005522:	f000 f81b 	bl	800555c <__sfp>
 8005526:	60a0      	str	r0, [r4, #8]
 8005528:	4620      	mov	r0, r4
 800552a:	f000 f817 	bl	800555c <__sfp>
 800552e:	2200      	movs	r2, #0
 8005530:	2104      	movs	r1, #4
 8005532:	60e0      	str	r0, [r4, #12]
 8005534:	6860      	ldr	r0, [r4, #4]
 8005536:	f7ff ff81 	bl	800543c <std>
 800553a:	2201      	movs	r2, #1
 800553c:	2109      	movs	r1, #9
 800553e:	68a0      	ldr	r0, [r4, #8]
 8005540:	f7ff ff7c 	bl	800543c <std>
 8005544:	2202      	movs	r2, #2
 8005546:	2112      	movs	r1, #18
 8005548:	68e0      	ldr	r0, [r4, #12]
 800554a:	f7ff ff77 	bl	800543c <std>
 800554e:	2301      	movs	r3, #1
 8005550:	61a3      	str	r3, [r4, #24]
 8005552:	e7d1      	b.n	80054f8 <__sinit+0xc>
 8005554:	08005948 	.word	0x08005948
 8005558:	08005485 	.word	0x08005485

0800555c <__sfp>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	4607      	mov	r7, r0
 8005560:	f7ff ffac 	bl	80054bc <__sfp_lock_acquire>
 8005564:	4b1e      	ldr	r3, [pc, #120]	; (80055e0 <__sfp+0x84>)
 8005566:	681e      	ldr	r6, [r3, #0]
 8005568:	69b3      	ldr	r3, [r6, #24]
 800556a:	b913      	cbnz	r3, 8005572 <__sfp+0x16>
 800556c:	4630      	mov	r0, r6
 800556e:	f7ff ffbd 	bl	80054ec <__sinit>
 8005572:	3648      	adds	r6, #72	; 0x48
 8005574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005578:	3b01      	subs	r3, #1
 800557a:	d503      	bpl.n	8005584 <__sfp+0x28>
 800557c:	6833      	ldr	r3, [r6, #0]
 800557e:	b30b      	cbz	r3, 80055c4 <__sfp+0x68>
 8005580:	6836      	ldr	r6, [r6, #0]
 8005582:	e7f7      	b.n	8005574 <__sfp+0x18>
 8005584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005588:	b9d5      	cbnz	r5, 80055c0 <__sfp+0x64>
 800558a:	4b16      	ldr	r3, [pc, #88]	; (80055e4 <__sfp+0x88>)
 800558c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005590:	60e3      	str	r3, [r4, #12]
 8005592:	6665      	str	r5, [r4, #100]	; 0x64
 8005594:	f000 f847 	bl	8005626 <__retarget_lock_init_recursive>
 8005598:	f7ff ff96 	bl	80054c8 <__sfp_lock_release>
 800559c:	2208      	movs	r2, #8
 800559e:	4629      	mov	r1, r5
 80055a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80055a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80055a8:	6025      	str	r5, [r4, #0]
 80055aa:	61a5      	str	r5, [r4, #24]
 80055ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80055b0:	f7fd faf6 	bl	8002ba0 <memset>
 80055b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80055b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80055bc:	4620      	mov	r0, r4
 80055be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055c0:	3468      	adds	r4, #104	; 0x68
 80055c2:	e7d9      	b.n	8005578 <__sfp+0x1c>
 80055c4:	2104      	movs	r1, #4
 80055c6:	4638      	mov	r0, r7
 80055c8:	f7ff ff62 	bl	8005490 <__sfmoreglue>
 80055cc:	4604      	mov	r4, r0
 80055ce:	6030      	str	r0, [r6, #0]
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d1d5      	bne.n	8005580 <__sfp+0x24>
 80055d4:	f7ff ff78 	bl	80054c8 <__sfp_lock_release>
 80055d8:	230c      	movs	r3, #12
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	e7ee      	b.n	80055bc <__sfp+0x60>
 80055de:	bf00      	nop
 80055e0:	08005948 	.word	0x08005948
 80055e4:	ffff0001 	.word	0xffff0001

080055e8 <_fwalk_reent>:
 80055e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ec:	4606      	mov	r6, r0
 80055ee:	4688      	mov	r8, r1
 80055f0:	2700      	movs	r7, #0
 80055f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80055f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055fa:	f1b9 0901 	subs.w	r9, r9, #1
 80055fe:	d505      	bpl.n	800560c <_fwalk_reent+0x24>
 8005600:	6824      	ldr	r4, [r4, #0]
 8005602:	2c00      	cmp	r4, #0
 8005604:	d1f7      	bne.n	80055f6 <_fwalk_reent+0xe>
 8005606:	4638      	mov	r0, r7
 8005608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800560c:	89ab      	ldrh	r3, [r5, #12]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d907      	bls.n	8005622 <_fwalk_reent+0x3a>
 8005612:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005616:	3301      	adds	r3, #1
 8005618:	d003      	beq.n	8005622 <_fwalk_reent+0x3a>
 800561a:	4629      	mov	r1, r5
 800561c:	4630      	mov	r0, r6
 800561e:	47c0      	blx	r8
 8005620:	4307      	orrs	r7, r0
 8005622:	3568      	adds	r5, #104	; 0x68
 8005624:	e7e9      	b.n	80055fa <_fwalk_reent+0x12>

08005626 <__retarget_lock_init_recursive>:
 8005626:	4770      	bx	lr

08005628 <__retarget_lock_acquire_recursive>:
 8005628:	4770      	bx	lr

0800562a <__retarget_lock_release_recursive>:
 800562a:	4770      	bx	lr

0800562c <__swhatbuf_r>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	460e      	mov	r6, r1
 8005630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005634:	4614      	mov	r4, r2
 8005636:	2900      	cmp	r1, #0
 8005638:	461d      	mov	r5, r3
 800563a:	b096      	sub	sp, #88	; 0x58
 800563c:	da07      	bge.n	800564e <__swhatbuf_r+0x22>
 800563e:	2300      	movs	r3, #0
 8005640:	602b      	str	r3, [r5, #0]
 8005642:	89b3      	ldrh	r3, [r6, #12]
 8005644:	061a      	lsls	r2, r3, #24
 8005646:	d410      	bmi.n	800566a <__swhatbuf_r+0x3e>
 8005648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800564c:	e00e      	b.n	800566c <__swhatbuf_r+0x40>
 800564e:	466a      	mov	r2, sp
 8005650:	f000 f902 	bl	8005858 <_fstat_r>
 8005654:	2800      	cmp	r0, #0
 8005656:	dbf2      	blt.n	800563e <__swhatbuf_r+0x12>
 8005658:	9a01      	ldr	r2, [sp, #4]
 800565a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800565e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005662:	425a      	negs	r2, r3
 8005664:	415a      	adcs	r2, r3
 8005666:	602a      	str	r2, [r5, #0]
 8005668:	e7ee      	b.n	8005648 <__swhatbuf_r+0x1c>
 800566a:	2340      	movs	r3, #64	; 0x40
 800566c:	2000      	movs	r0, #0
 800566e:	6023      	str	r3, [r4, #0]
 8005670:	b016      	add	sp, #88	; 0x58
 8005672:	bd70      	pop	{r4, r5, r6, pc}

08005674 <__smakebuf_r>:
 8005674:	898b      	ldrh	r3, [r1, #12]
 8005676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005678:	079d      	lsls	r5, r3, #30
 800567a:	4606      	mov	r6, r0
 800567c:	460c      	mov	r4, r1
 800567e:	d507      	bpl.n	8005690 <__smakebuf_r+0x1c>
 8005680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	6123      	str	r3, [r4, #16]
 8005688:	2301      	movs	r3, #1
 800568a:	6163      	str	r3, [r4, #20]
 800568c:	b002      	add	sp, #8
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	466a      	mov	r2, sp
 8005692:	ab01      	add	r3, sp, #4
 8005694:	f7ff ffca 	bl	800562c <__swhatbuf_r>
 8005698:	9900      	ldr	r1, [sp, #0]
 800569a:	4605      	mov	r5, r0
 800569c:	4630      	mov	r0, r6
 800569e:	f7ff f989 	bl	80049b4 <_malloc_r>
 80056a2:	b948      	cbnz	r0, 80056b8 <__smakebuf_r+0x44>
 80056a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056a8:	059a      	lsls	r2, r3, #22
 80056aa:	d4ef      	bmi.n	800568c <__smakebuf_r+0x18>
 80056ac:	f023 0303 	bic.w	r3, r3, #3
 80056b0:	f043 0302 	orr.w	r3, r3, #2
 80056b4:	81a3      	strh	r3, [r4, #12]
 80056b6:	e7e3      	b.n	8005680 <__smakebuf_r+0xc>
 80056b8:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <__smakebuf_r+0x7c>)
 80056ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80056bc:	89a3      	ldrh	r3, [r4, #12]
 80056be:	6020      	str	r0, [r4, #0]
 80056c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c4:	81a3      	strh	r3, [r4, #12]
 80056c6:	9b00      	ldr	r3, [sp, #0]
 80056c8:	6120      	str	r0, [r4, #16]
 80056ca:	6163      	str	r3, [r4, #20]
 80056cc:	9b01      	ldr	r3, [sp, #4]
 80056ce:	b15b      	cbz	r3, 80056e8 <__smakebuf_r+0x74>
 80056d0:	4630      	mov	r0, r6
 80056d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056d6:	f000 f8d1 	bl	800587c <_isatty_r>
 80056da:	b128      	cbz	r0, 80056e8 <__smakebuf_r+0x74>
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	f023 0303 	bic.w	r3, r3, #3
 80056e2:	f043 0301 	orr.w	r3, r3, #1
 80056e6:	81a3      	strh	r3, [r4, #12]
 80056e8:	89a0      	ldrh	r0, [r4, #12]
 80056ea:	4305      	orrs	r5, r0
 80056ec:	81a5      	strh	r5, [r4, #12]
 80056ee:	e7cd      	b.n	800568c <__smakebuf_r+0x18>
 80056f0:	08005485 	.word	0x08005485

080056f4 <_malloc_usable_size_r>:
 80056f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f8:	1f18      	subs	r0, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bfbc      	itt	lt
 80056fe:	580b      	ldrlt	r3, [r1, r0]
 8005700:	18c0      	addlt	r0, r0, r3
 8005702:	4770      	bx	lr

08005704 <_raise_r>:
 8005704:	291f      	cmp	r1, #31
 8005706:	b538      	push	{r3, r4, r5, lr}
 8005708:	4604      	mov	r4, r0
 800570a:	460d      	mov	r5, r1
 800570c:	d904      	bls.n	8005718 <_raise_r+0x14>
 800570e:	2316      	movs	r3, #22
 8005710:	6003      	str	r3, [r0, #0]
 8005712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005716:	bd38      	pop	{r3, r4, r5, pc}
 8005718:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800571a:	b112      	cbz	r2, 8005722 <_raise_r+0x1e>
 800571c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005720:	b94b      	cbnz	r3, 8005736 <_raise_r+0x32>
 8005722:	4620      	mov	r0, r4
 8005724:	f000 f830 	bl	8005788 <_getpid_r>
 8005728:	462a      	mov	r2, r5
 800572a:	4601      	mov	r1, r0
 800572c:	4620      	mov	r0, r4
 800572e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005732:	f000 b817 	b.w	8005764 <_kill_r>
 8005736:	2b01      	cmp	r3, #1
 8005738:	d00a      	beq.n	8005750 <_raise_r+0x4c>
 800573a:	1c59      	adds	r1, r3, #1
 800573c:	d103      	bne.n	8005746 <_raise_r+0x42>
 800573e:	2316      	movs	r3, #22
 8005740:	6003      	str	r3, [r0, #0]
 8005742:	2001      	movs	r0, #1
 8005744:	e7e7      	b.n	8005716 <_raise_r+0x12>
 8005746:	2400      	movs	r4, #0
 8005748:	4628      	mov	r0, r5
 800574a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800574e:	4798      	blx	r3
 8005750:	2000      	movs	r0, #0
 8005752:	e7e0      	b.n	8005716 <_raise_r+0x12>

08005754 <raise>:
 8005754:	4b02      	ldr	r3, [pc, #8]	; (8005760 <raise+0xc>)
 8005756:	4601      	mov	r1, r0
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	f7ff bfd3 	b.w	8005704 <_raise_r>
 800575e:	bf00      	nop
 8005760:	20000010 	.word	0x20000010

08005764 <_kill_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	2300      	movs	r3, #0
 8005768:	4d06      	ldr	r5, [pc, #24]	; (8005784 <_kill_r+0x20>)
 800576a:	4604      	mov	r4, r0
 800576c:	4608      	mov	r0, r1
 800576e:	4611      	mov	r1, r2
 8005770:	602b      	str	r3, [r5, #0]
 8005772:	f7fb ff29 	bl	80015c8 <_kill>
 8005776:	1c43      	adds	r3, r0, #1
 8005778:	d102      	bne.n	8005780 <_kill_r+0x1c>
 800577a:	682b      	ldr	r3, [r5, #0]
 800577c:	b103      	cbz	r3, 8005780 <_kill_r+0x1c>
 800577e:	6023      	str	r3, [r4, #0]
 8005780:	bd38      	pop	{r3, r4, r5, pc}
 8005782:	bf00      	nop
 8005784:	20000284 	.word	0x20000284

08005788 <_getpid_r>:
 8005788:	f7fb bf17 	b.w	80015ba <_getpid>

0800578c <__sread>:
 800578c:	b510      	push	{r4, lr}
 800578e:	460c      	mov	r4, r1
 8005790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005794:	f000 f894 	bl	80058c0 <_read_r>
 8005798:	2800      	cmp	r0, #0
 800579a:	bfab      	itete	ge
 800579c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800579e:	89a3      	ldrhlt	r3, [r4, #12]
 80057a0:	181b      	addge	r3, r3, r0
 80057a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057a6:	bfac      	ite	ge
 80057a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80057aa:	81a3      	strhlt	r3, [r4, #12]
 80057ac:	bd10      	pop	{r4, pc}

080057ae <__swrite>:
 80057ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b2:	461f      	mov	r7, r3
 80057b4:	898b      	ldrh	r3, [r1, #12]
 80057b6:	4605      	mov	r5, r0
 80057b8:	05db      	lsls	r3, r3, #23
 80057ba:	460c      	mov	r4, r1
 80057bc:	4616      	mov	r6, r2
 80057be:	d505      	bpl.n	80057cc <__swrite+0x1e>
 80057c0:	2302      	movs	r3, #2
 80057c2:	2200      	movs	r2, #0
 80057c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c8:	f000 f868 	bl	800589c <_lseek_r>
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	4632      	mov	r2, r6
 80057d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057d4:	81a3      	strh	r3, [r4, #12]
 80057d6:	4628      	mov	r0, r5
 80057d8:	463b      	mov	r3, r7
 80057da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057e2:	f000 b817 	b.w	8005814 <_write_r>

080057e6 <__sseek>:
 80057e6:	b510      	push	{r4, lr}
 80057e8:	460c      	mov	r4, r1
 80057ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ee:	f000 f855 	bl	800589c <_lseek_r>
 80057f2:	1c43      	adds	r3, r0, #1
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	bf15      	itete	ne
 80057f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80057fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005802:	81a3      	strheq	r3, [r4, #12]
 8005804:	bf18      	it	ne
 8005806:	81a3      	strhne	r3, [r4, #12]
 8005808:	bd10      	pop	{r4, pc}

0800580a <__sclose>:
 800580a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580e:	f000 b813 	b.w	8005838 <_close_r>
	...

08005814 <_write_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4604      	mov	r4, r0
 8005818:	4608      	mov	r0, r1
 800581a:	4611      	mov	r1, r2
 800581c:	2200      	movs	r2, #0
 800581e:	4d05      	ldr	r5, [pc, #20]	; (8005834 <_write_r+0x20>)
 8005820:	602a      	str	r2, [r5, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	f7fb ff07 	bl	8001636 <_write>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d102      	bne.n	8005832 <_write_r+0x1e>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	b103      	cbz	r3, 8005832 <_write_r+0x1e>
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	bd38      	pop	{r3, r4, r5, pc}
 8005834:	20000284 	.word	0x20000284

08005838 <_close_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	2300      	movs	r3, #0
 800583c:	4d05      	ldr	r5, [pc, #20]	; (8005854 <_close_r+0x1c>)
 800583e:	4604      	mov	r4, r0
 8005840:	4608      	mov	r0, r1
 8005842:	602b      	str	r3, [r5, #0]
 8005844:	f7fb ff13 	bl	800166e <_close>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d102      	bne.n	8005852 <_close_r+0x1a>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	b103      	cbz	r3, 8005852 <_close_r+0x1a>
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	20000284 	.word	0x20000284

08005858 <_fstat_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	2300      	movs	r3, #0
 800585c:	4d06      	ldr	r5, [pc, #24]	; (8005878 <_fstat_r+0x20>)
 800585e:	4604      	mov	r4, r0
 8005860:	4608      	mov	r0, r1
 8005862:	4611      	mov	r1, r2
 8005864:	602b      	str	r3, [r5, #0]
 8005866:	f7fb ff0d 	bl	8001684 <_fstat>
 800586a:	1c43      	adds	r3, r0, #1
 800586c:	d102      	bne.n	8005874 <_fstat_r+0x1c>
 800586e:	682b      	ldr	r3, [r5, #0]
 8005870:	b103      	cbz	r3, 8005874 <_fstat_r+0x1c>
 8005872:	6023      	str	r3, [r4, #0]
 8005874:	bd38      	pop	{r3, r4, r5, pc}
 8005876:	bf00      	nop
 8005878:	20000284 	.word	0x20000284

0800587c <_isatty_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	2300      	movs	r3, #0
 8005880:	4d05      	ldr	r5, [pc, #20]	; (8005898 <_isatty_r+0x1c>)
 8005882:	4604      	mov	r4, r0
 8005884:	4608      	mov	r0, r1
 8005886:	602b      	str	r3, [r5, #0]
 8005888:	f7fb ff0b 	bl	80016a2 <_isatty>
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	d102      	bne.n	8005896 <_isatty_r+0x1a>
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	b103      	cbz	r3, 8005896 <_isatty_r+0x1a>
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	20000284 	.word	0x20000284

0800589c <_lseek_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4604      	mov	r4, r0
 80058a0:	4608      	mov	r0, r1
 80058a2:	4611      	mov	r1, r2
 80058a4:	2200      	movs	r2, #0
 80058a6:	4d05      	ldr	r5, [pc, #20]	; (80058bc <_lseek_r+0x20>)
 80058a8:	602a      	str	r2, [r5, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f7fb ff03 	bl	80016b6 <_lseek>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d102      	bne.n	80058ba <_lseek_r+0x1e>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	b103      	cbz	r3, 80058ba <_lseek_r+0x1e>
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	bd38      	pop	{r3, r4, r5, pc}
 80058bc:	20000284 	.word	0x20000284

080058c0 <_read_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4604      	mov	r4, r0
 80058c4:	4608      	mov	r0, r1
 80058c6:	4611      	mov	r1, r2
 80058c8:	2200      	movs	r2, #0
 80058ca:	4d05      	ldr	r5, [pc, #20]	; (80058e0 <_read_r+0x20>)
 80058cc:	602a      	str	r2, [r5, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f7fb fe94 	bl	80015fc <_read>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d102      	bne.n	80058de <_read_r+0x1e>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	b103      	cbz	r3, 80058de <_read_r+0x1e>
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	20000284 	.word	0x20000284

080058e4 <_init>:
 80058e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e6:	bf00      	nop
 80058e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ea:	bc08      	pop	{r3}
 80058ec:	469e      	mov	lr, r3
 80058ee:	4770      	bx	lr

080058f0 <_fini>:
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f2:	bf00      	nop
 80058f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f6:	bc08      	pop	{r3}
 80058f8:	469e      	mov	lr, r3
 80058fa:	4770      	bx	lr
